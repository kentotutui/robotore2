
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08010850  08010850  00020850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e00  08010e00  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08010e00  08010e00  00020e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e08  08010e08  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e08  08010e08  00020e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010e0c  08010e0c  00020e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016284  20000210  08011020  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20016494  08011020  00036494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bdb  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000494b  00000000  00000000  00052e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  00057768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c8  00000000  00000000  00059120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ab6  00000000  00000000  0005a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017390  00000000  00000000  0007f39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb532  00000000  00000000  0009672e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f1c  00000000  00000000  00161cdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010834 	.word	0x08010834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010834 	.word	0x08010834

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc53 	bl	800184c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fc20 	bl	8009930 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fc1c 	bl	8009930 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20016048 	.word	0x20016048
 8001110:	20016008 	.word	0x20016008
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <updateEncoderCnt+0x178>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <updateEncoderCnt+0x17c>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <updateEncoderCnt+0x180>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <updateEncoderCnt+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <updateEncoderCnt+0x188>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <updateEncoderCnt+0x17c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <updateEncoderCnt+0x188>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <updateEncoderCnt+0x18c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <updateEncoderCnt+0x184>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateEncoderCnt+0x18c>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <updateEncoderCnt+0x17c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <updateEncoderCnt+0x184>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <updateEncoderCnt+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <updateEncoderCnt+0x190>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <updateEncoderCnt+0x194>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <updateEncoderCnt+0x190>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <updateEncoderCnt+0x194>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <updateEncoderCnt+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <updateEncoderCnt+0x190>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <updateEncoderCnt+0x198>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <updateEncoderCnt+0x19c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <updateEncoderCnt+0x190>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <updateEncoderCnt+0x19c>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <updateEncoderCnt+0x190>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <updateEncoderCnt+0x190>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <updateEncoderCnt+0x190>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <updateEncoderCnt+0x1ac>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <updateEncoderCnt+0x190>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <updateEncoderCnt+0x1ac>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <updateEncoderCnt+0x190>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateEncoderCnt+0x178>)
 8001278:	f242 7210 	movw	r2, #10000	; 0x2710
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <updateEncoderCnt+0x180>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	bd98      	pop	{r3, r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	bec93a2d 	.word	0xbec93a2d
 8001294:	3f8c463a 	.word	0x3f8c463a
 8001298:	40000400 	.word	0x40000400
 800129c:	20000244 	.word	0x20000244
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000246 	.word	0x20000246
 80012a8:	20000248 	.word	0x20000248
 80012ac:	2000024a 	.word	0x2000024a
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	20000250 	.word	0x20000250
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000258 	.word	0x20000258
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000264 	.word	0x20000264
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <getEncoderCnt+0x2c>)
 80012e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <getEncoderCnt+0x30>)
 80012ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244
 8001304:	20000246 	.word	0x20000246

08001308 <getTotalDistance>:

float getTotalDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return total_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getTotalDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getGoalJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <getSideLineJudgeDistance+0x18>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000264 	.word	0x20000264

0800135c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <setTotalDistance+0x1c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000025c 	.word	0x2000025c

0800137c <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <getCrossLineIgnoreDistance+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000268 	.word	0x20000268

08001398 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	total_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearTotalDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearGoalJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearSideLineJudgeDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearCrossLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <clearSideLineIgnoreDistance+0x18>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000026c 	.word	0x2000026c

08001424 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <getDistance10mm+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000250 	.word	0x20000250

08001440 <clearDistance10mm>:

void clearDistance10mm(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <clearDistance10mm+0x18>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000250 	.word	0x20000250

0800145c <getDistance30mm>:

float getDistance30mm(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return distance_30mm;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <getDistance30mm+0x18>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000254 	.word	0x20000254

08001478 <clearDistance30mm>:

void clearDistance30mm(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <clearDistance30mm+0x18>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254
 8001494:	00000000 	.word	0x00000000

08001498 <getspeedcount>:

float getspeedcount(void){
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <getspeedcount+0x60>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db16      	blt.n	80014de <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <getspeedcount+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <getspeedcount+0x58>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fee4 	bl	800028c <__adddf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <getspeedcount+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <getspeedcount+0x60>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <getspeedcount+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	bd98      	pop	{r3, r4, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fb99999 	.word	0x3fb99999
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000270 	.word	0x20000270

08001500 <clearspeedcount>:

void clearspeedcount(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <clearspeedcount+0x14>)
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <clearspeedcount+0x18>)
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000270 	.word	0x20000270
 8001518:	3dcccccd 	.word	0x3dcccccd

0800151c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_Unlock+0x1c>)
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Unlock+0x20>)
 8001524:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <FLASH_Unlock+0x1c>)
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <FLASH_Unlock+0x24>)
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <FLASH_Lock+0x1c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6113      	str	r3, [r2, #16]

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001568:	bf00      	nop
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_WaitBusy+0x1c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <FLASH_WaitBusy+0x6>
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800158e:	f006 fa07 	bl	80079a0 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fabd 	bl	8007b30 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015b6:	f006 fa15 	bl	80079e4 <HAL_FLASH_Lock>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015d0:	f7ff ffa4 	bl	800151c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015d4:	f7ff ffc6 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80015f6:	f7ff ffb5 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <FLASH_Write_Word_F+0x50>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001606:	f7ff ff9d 	bl	8001544 <FLASH_Lock>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <initGyro>:
float omega;
float theta_10mm;
float add_theta_30mm;
float ang_average = 0;

uint8_t initGyro(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800161e:	f001 ffad 	bl	800357c <IMU_init>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f005 f923 	bl	8006874 <HAL_Delay>

	return who_i_am;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <updateIMUValue>:

void updateIMUValue(){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800163e:	f001 ffc1 	bl	80035c4 <read_gyro_data>
	zg_ = zg;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <updateIMUValue+0x188>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <updateIMUValue+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <updateIMUValue+0x188>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <updateIMUValue+0x190>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <updateIMUValue+0x18c>)
 8001692:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <updateIMUValue+0x18c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <updateIMUValue+0x194>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <updateIMUValue+0x18c>)
 80016b8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <updateIMUValue+0x18c>)
 80016bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <updateIMUValue+0x190>)
 80016c2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <updateIMUValue+0x18c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a332      	add	r3, pc, #200	; (adr r3, 80017a8 <updateIMUValue+0x170>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	a330      	add	r3, pc, #192	; (adr r3, 80017b0 <updateIMUValue+0x178>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <updateIMUValue+0x198>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <updateIMUValue+0x19c>)
 800171a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <updateIMUValue+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <updateIMUValue+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	a320      	add	r3, pc, #128	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <updateIMUValue+0x1a0>)
 800175a:	601a      	str	r2, [r3, #0]
	add_theta_30mm += omega * 0.001;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <updateIMUValue+0x1a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <updateIMUValue+0x1a4>)
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	40306666 	.word	0x40306666
 80017b0:	54411744 	.word	0x54411744
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017bc:	3f50624d 	.word	0x3f50624d
 80017c0:	20016170 	.word	0x20016170
 80017c4:	20016088 	.word	0x20016088
 80017c8:	20000278 	.word	0x20000278
 80017cc:	20000274 	.word	0x20000274
 80017d0:	40668000 	.word	0x40668000
 80017d4:	20016098 	.word	0x20016098
 80017d8:	20016094 	.word	0x20016094
 80017dc:	2001608c 	.word	0x2001608c

080017e0 <IMU_average>:

void IMU_average(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	float average = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e015      	b.n	800181e <IMU_average+0x3e>
	{
		average = average + zg;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <IMU_average+0x60>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ed97 7a01 	vldr	s14, [r7, #4]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f005 f831 	bl	8006874 <HAL_Delay>
		setLED2('A');
 8001812:	2041      	movs	r0, #65	; 0x41
 8001814:	f000 f920 	bl	8001a58 <setLED2>
	for(int i = 0; i <= 1000; i++)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	dde5      	ble.n	80017f2 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001844 <IMU_average+0x64>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <IMU_average+0x68>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20016170 	.word	0x20016170
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000274 	.word	0x20000274

0800184c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <getTheta10mm+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20016094 	.word	0x20016094

08001868 <getaddTheta30mm>:

float getaddTheta30mm()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	return add_theta_30mm;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <getaddTheta30mm+0x18>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	ee07 3a90 	vmov	s15, r3
}
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	2001608c 	.word	0x2001608c

08001884 <clearTheta10mm>:

void clearTheta10mm()
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <clearTheta10mm+0x18>)
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20016094 	.word	0x20016094

080018a0 <clearaddTheta30mm>:

void clearaddTheta30mm()
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	add_theta_30mm = 0;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <clearaddTheta30mm+0x18>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2001608c 	.word	0x2001608c

080018bc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b52      	cmp	r3, #82	; 0x52
 80018ca:	d112      	bne.n	80018f2 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4860      	ldr	r0, [pc, #384]	; (8001a54 <setLED+0x198>)
 80018d4:	f006 fc00 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	485d      	ldr	r0, [pc, #372]	; (8001a54 <setLED+0x198>)
 80018e0:	f006 fbfa 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	485a      	ldr	r0, [pc, #360]	; (8001a54 <setLED+0x198>)
 80018ec:	f006 fbf4 	bl	80080d8 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80018f0:	e0ab      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'G'){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b47      	cmp	r3, #71	; 0x47
 80018f6:	d112      	bne.n	800191e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4855      	ldr	r0, [pc, #340]	; (8001a54 <setLED+0x198>)
 8001900:	f006 fbea 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <setLED+0x198>)
 800190c:	f006 fbe4 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <setLED+0x198>)
 8001918:	f006 fbde 	bl	80080d8 <HAL_GPIO_WritePin>
}
 800191c:	e095      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'B'){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b42      	cmp	r3, #66	; 0x42
 8001922:	d112      	bne.n	800194a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <setLED+0x198>)
 800192c:	f006 fbd4 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4847      	ldr	r0, [pc, #284]	; (8001a54 <setLED+0x198>)
 8001938:	f006 fbce 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	4844      	ldr	r0, [pc, #272]	; (8001a54 <setLED+0x198>)
 8001944:	f006 fbc8 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001948:	e07f      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'M'){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b4d      	cmp	r3, #77	; 0x4d
 800194e:	d112      	bne.n	8001976 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <setLED+0x198>)
 8001958:	f006 fbbe 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	483c      	ldr	r0, [pc, #240]	; (8001a54 <setLED+0x198>)
 8001964:	f006 fbb8 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4839      	ldr	r0, [pc, #228]	; (8001a54 <setLED+0x198>)
 8001970:	f006 fbb2 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001974:	e069      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'Y'){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	d112      	bne.n	80019a2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <setLED+0x198>)
 8001984:	f006 fba8 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <setLED+0x198>)
 8001990:	f006 fba2 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <setLED+0x198>)
 800199c:	f006 fb9c 	bl	80080d8 <HAL_GPIO_WritePin>
}
 80019a0:	e053      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'C'){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b43      	cmp	r3, #67	; 0x43
 80019a6:	d112      	bne.n	80019ce <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4829      	ldr	r0, [pc, #164]	; (8001a54 <setLED+0x198>)
 80019b0:	f006 fb92 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <setLED+0x198>)
 80019bc:	f006 fb8c 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <setLED+0x198>)
 80019c8:	f006 fb86 	bl	80080d8 <HAL_GPIO_WritePin>
}
 80019cc:	e03d      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'W'){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b57      	cmp	r3, #87	; 0x57
 80019d2:	d112      	bne.n	80019fa <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <setLED+0x198>)
 80019dc:	f006 fb7c 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <setLED+0x198>)
 80019e8:	f006 fb76 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <setLED+0x198>)
 80019f4:	f006 fb70 	bl	80080d8 <HAL_GPIO_WritePin>
}
 80019f8:	e027      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'N'){
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b4e      	cmp	r3, #78	; 0x4e
 80019fe:	d112      	bne.n	8001a26 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <setLED+0x198>)
 8001a08:	f006 fb66 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <setLED+0x198>)
 8001a14:	f006 fb60 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <setLED+0x198>)
 8001a20:	f006 fb5a 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001a24:	e011      	b.n	8001a4a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <setLED+0x198>)
 8001a2e:	f006 fb53 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <setLED+0x198>)
 8001a3a:	f006 fb4d 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <setLED+0x198>)
 8001a46:	f006 fb47 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020800 	.word	0x40020800

08001a58 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b52      	cmp	r3, #82	; 0x52
 8001a66:	d124      	bne.n	8001ab2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	48c5      	ldr	r0, [pc, #788]	; (8001d84 <setLED2+0x32c>)
 8001a70:	f006 fb32 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	48c3      	ldr	r0, [pc, #780]	; (8001d88 <setLED2+0x330>)
 8001a7c:	f006 fb2c 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	48c0      	ldr	r0, [pc, #768]	; (8001d88 <setLED2+0x330>)
 8001a88:	f006 fb26 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	48bd      	ldr	r0, [pc, #756]	; (8001d88 <setLED2+0x330>)
 8001a94:	f006 fb20 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	48ba      	ldr	r0, [pc, #744]	; (8001d88 <setLED2+0x330>)
 8001aa0:	f006 fb1a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	48b7      	ldr	r0, [pc, #732]	; (8001d88 <setLED2+0x330>)
 8001aac:	f006 fb14 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001ab0:	e163      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'G'){
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b47      	cmp	r3, #71	; 0x47
 8001ab6:	d124      	bne.n	8001b02 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	48b1      	ldr	r0, [pc, #708]	; (8001d84 <setLED2+0x32c>)
 8001ac0:	f006 fb0a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	48af      	ldr	r0, [pc, #700]	; (8001d88 <setLED2+0x330>)
 8001acc:	f006 fb04 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	48ac      	ldr	r0, [pc, #688]	; (8001d88 <setLED2+0x330>)
 8001ad8:	f006 fafe 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	48a9      	ldr	r0, [pc, #676]	; (8001d88 <setLED2+0x330>)
 8001ae4:	f006 faf8 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	48a6      	ldr	r0, [pc, #664]	; (8001d88 <setLED2+0x330>)
 8001af0:	f006 faf2 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	48a3      	ldr	r0, [pc, #652]	; (8001d88 <setLED2+0x330>)
 8001afc:	f006 faec 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001b00:	e13b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'B'){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b42      	cmp	r3, #66	; 0x42
 8001b06:	d124      	bne.n	8001b52 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	489d      	ldr	r0, [pc, #628]	; (8001d84 <setLED2+0x32c>)
 8001b10:	f006 fae2 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	489b      	ldr	r0, [pc, #620]	; (8001d88 <setLED2+0x330>)
 8001b1c:	f006 fadc 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	4898      	ldr	r0, [pc, #608]	; (8001d88 <setLED2+0x330>)
 8001b28:	f006 fad6 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b32:	4895      	ldr	r0, [pc, #596]	; (8001d88 <setLED2+0x330>)
 8001b34:	f006 fad0 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4892      	ldr	r0, [pc, #584]	; (8001d88 <setLED2+0x330>)
 8001b40:	f006 faca 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4a:	488f      	ldr	r0, [pc, #572]	; (8001d88 <setLED2+0x330>)
 8001b4c:	f006 fac4 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001b50:	e113      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'W'){
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b57      	cmp	r3, #87	; 0x57
 8001b56:	d124      	bne.n	8001ba2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	4889      	ldr	r0, [pc, #548]	; (8001d84 <setLED2+0x32c>)
 8001b60:	f006 faba 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4887      	ldr	r0, [pc, #540]	; (8001d88 <setLED2+0x330>)
 8001b6c:	f006 fab4 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4884      	ldr	r0, [pc, #528]	; (8001d88 <setLED2+0x330>)
 8001b78:	f006 faae 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b82:	4881      	ldr	r0, [pc, #516]	; (8001d88 <setLED2+0x330>)
 8001b84:	f006 faa8 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	487e      	ldr	r0, [pc, #504]	; (8001d88 <setLED2+0x330>)
 8001b90:	f006 faa2 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <setLED2+0x330>)
 8001b9c:	f006 fa9c 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001ba0:	e0eb      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'Y'){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b59      	cmp	r3, #89	; 0x59
 8001ba6:	d124      	bne.n	8001bf2 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <setLED2+0x32c>)
 8001bb0:	f006 fa92 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4873      	ldr	r0, [pc, #460]	; (8001d88 <setLED2+0x330>)
 8001bbc:	f006 fa8c 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc6:	4870      	ldr	r0, [pc, #448]	; (8001d88 <setLED2+0x330>)
 8001bc8:	f006 fa86 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	486d      	ldr	r0, [pc, #436]	; (8001d88 <setLED2+0x330>)
 8001bd4:	f006 fa80 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	486a      	ldr	r0, [pc, #424]	; (8001d88 <setLED2+0x330>)
 8001be0:	f006 fa7a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <setLED2+0x330>)
 8001bec:	f006 fa74 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001bf0:	e0c3      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'X'){
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b58      	cmp	r3, #88	; 0x58
 8001bf6:	d124      	bne.n	8001c42 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <setLED2+0x32c>)
 8001c00:	f006 fa6a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	485f      	ldr	r0, [pc, #380]	; (8001d88 <setLED2+0x330>)
 8001c0c:	f006 fa64 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <setLED2+0x330>)
 8001c18:	f006 fa5e 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4859      	ldr	r0, [pc, #356]	; (8001d88 <setLED2+0x330>)
 8001c24:	f006 fa58 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2e:	4856      	ldr	r0, [pc, #344]	; (8001d88 <setLED2+0x330>)
 8001c30:	f006 fa52 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <setLED2+0x330>)
 8001c3c:	f006 fa4c 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001c40:	e09b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'V'){
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b56      	cmp	r3, #86	; 0x56
 8001c46:	d124      	bne.n	8001c92 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c4e:	484d      	ldr	r0, [pc, #308]	; (8001d84 <setLED2+0x32c>)
 8001c50:	f006 fa42 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	484b      	ldr	r0, [pc, #300]	; (8001d88 <setLED2+0x330>)
 8001c5c:	f006 fa3c 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	4848      	ldr	r0, [pc, #288]	; (8001d88 <setLED2+0x330>)
 8001c68:	f006 fa36 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <setLED2+0x330>)
 8001c74:	f006 fa30 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <setLED2+0x330>)
 8001c80:	f006 fa2a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <setLED2+0x330>)
 8001c8c:	f006 fa24 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001c90:	e073      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'T'){
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b54      	cmp	r3, #84	; 0x54
 8001c96:	d124      	bne.n	8001ce2 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <setLED2+0x32c>)
 8001ca0:	f006 fa1a 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4837      	ldr	r0, [pc, #220]	; (8001d88 <setLED2+0x330>)
 8001cac:	f006 fa14 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <setLED2+0x330>)
 8001cb8:	f006 fa0e 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	4831      	ldr	r0, [pc, #196]	; (8001d88 <setLED2+0x330>)
 8001cc4:	f006 fa08 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	482e      	ldr	r0, [pc, #184]	; (8001d88 <setLED2+0x330>)
 8001cd0:	f006 fa02 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	482b      	ldr	r0, [pc, #172]	; (8001d88 <setLED2+0x330>)
 8001cdc:	f006 f9fc 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001ce0:	e04b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'A'){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b41      	cmp	r3, #65	; 0x41
 8001ce6:	d124      	bne.n	8001d32 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <setLED2+0x32c>)
 8001cf0:	f006 f9f2 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <setLED2+0x330>)
 8001cfc:	f006 f9ec 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <setLED2+0x330>)
 8001d08:	f006 f9e6 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <setLED2+0x330>)
 8001d14:	f006 f9e0 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	481a      	ldr	r0, [pc, #104]	; (8001d88 <setLED2+0x330>)
 8001d20:	f006 f9da 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <setLED2+0x330>)
 8001d2c:	f006 f9d4 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001d30:	e023      	b.n	8001d7a <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <setLED2+0x32c>)
 8001d3a:	f006 f9cd 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <setLED2+0x330>)
 8001d46:	f006 f9c7 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <setLED2+0x330>)
 8001d52:	f006 f9c1 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <setLED2+0x330>)
 8001d5e:	f006 f9bb 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <setLED2+0x330>)
 8001d6a:	f006 f9b5 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <setLED2+0x330>)
 8001d76:	f006 f9af 	bl	80080d8 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	00000000 	.word	0x00000000

08001d90 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <calculateLineFollowingTermFlip+0x2d8>)
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	; (800206c <calculateLineFollowingTermFlip+0x2dc>)
 8001d9e:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001da6:	4bb2      	ldr	r3, [pc, #712]	; (8002070 <calculateLineFollowingTermFlip+0x2e0>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 8140 	bne.w	8002032 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dba:	4baf      	ldr	r3, [pc, #700]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001dc8:	4bac      	ldr	r3, [pc, #688]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fba8 	bl	8000524 <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4ba9      	ldr	r3, [pc, #676]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4625      	mov	r5, r4
 8001de4:	461c      	mov	r4, r3
 8001de6:	4ba5      	ldr	r3, [pc, #660]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	a393      	add	r3, pc, #588	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4625      	mov	r5, r4
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb84 	bl	8000524 <__aeabi_i2d>
 8001e1c:	a38a      	add	r3, pc, #552	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbe9 	bl	80005f8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa2d 	bl	800028c <__adddf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4625      	mov	r5, r4
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4b90      	ldr	r3, [pc, #576]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a382      	add	r3, pc, #520	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa18 	bl	800028c <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4625      	mov	r5, r4
 8001e62:	461c      	mov	r4, r3
 8001e64:	4b85      	ldr	r3, [pc, #532]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb5a 	bl	8000524 <__aeabi_i2d>
 8001e70:	a379      	add	r3, pc, #484	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa03 	bl	800028c <__adddf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4625      	mov	r5, r4
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001eb4:	f7fe fcca 	bl	800084c <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4625      	mov	r5, r4
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	4b6e      	ldr	r3, [pc, #440]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_i2d>
 8001edc:	a35e      	add	r3, pc, #376	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb89 	bl	80005f8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe f9cd 	bl	800028c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	4699      	mov	r9, r3
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001efc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb0f 	bl	8000524 <__aeabi_i2d>
 8001f06:	a352      	add	r3, pc, #328	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9b8 	bl	800028c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4b55      	ldr	r3, [pc, #340]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fafa 	bl	8000524 <__aeabi_i2d>
 8001f30:	a345      	add	r3, pc, #276	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb5f 	bl	80005f8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f7fe f9a3 	bl	800028c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fae5 	bl	8000524 <__aeabi_i2d>
 8001f5a:	a339      	add	r3, pc, #228	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb4a 	bl	80005f8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe f98e 	bl	800028c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fad0 	bl	8000524 <__aeabi_i2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f7fe f979 	bl	800028c <__adddf3>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001fa8:	f7fe fc50 	bl	800084c <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f968 	bl	8000288 <__aeabi_dsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	f7fe fe12 	bl	8000be8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ee17 0a90 	vmov	r0, s15
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	a31a      	add	r3, pc, #104	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2d0>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc26 	bl	800084c <__aeabi_ddiv>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fdee 	bl	8000be8 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <calculateLineFollowingTermFlip+0x2fc>)
 8002028:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6013      	str	r3, [r2, #0]
	}
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	9999999a 	.word	0x9999999a
 8002044:	3ff99999 	.word	0x3ff99999
 8002048:	33333333 	.word	0x33333333
 800204c:	3ff73333 	.word	0x3ff73333
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3ff4cccc 	.word	0x3ff4cccc
 8002058:	66666666 	.word	0x66666666
 800205c:	3ff26666 	.word	0x3ff26666
 8002060:	d2f1a9fc 	.word	0xd2f1a9fc
 8002064:	3f50624d 	.word	0x3f50624d
 8002068:	40733333 	.word	0x40733333
 800206c:	3ccccccd 	.word	0x3ccccccd
 8002070:	2000027a 	.word	0x2000027a
 8002074:	2000027b 	.word	0x2000027b
 8002078:	20000288 	.word	0x20000288
 800207c:	20015fb4 	.word	0x20015fb4
 8002080:	3ffc0000 	.word	0x3ffc0000
 8002084:	40180000 	.word	0x40180000
 8002088:	20000284 	.word	0x20000284
 800208c:	2000027c 	.word	0x2000027c

08002090 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <lineTraceFlip+0x150>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8097 	bne.w	80021d0 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 80020a2:	f001 fe59 	bl	8003d58 <getVelocityControlTerm>
 80020a6:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <lineTraceFlip+0x154>)
 80020ac:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	db02      	blt.n	80020c6 <lineTraceFlip+0x36>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e010      	b.n	80020e8 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 80020c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d805      	bhi.n	80020e8 <lineTraceFlip+0x58>
 80020dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e0:	eef1 7a67 	vneg.f32	s15, s15
 80020e4:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <lineTraceFlip+0x158>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80021ec <lineTraceFlip+0x15c>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	db0d      	blt.n	8002126 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <lineTraceFlip+0x158>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021ec <lineTraceFlip+0x15c>
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	edc7 7a04 	vstr	s15, [r7, #16]
 8002124:	e01a      	b.n	800215c <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <lineTraceFlip+0x158>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021f0 <lineTraceFlip+0x160>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d80c      	bhi.n	800215c <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <lineTraceFlip+0x158>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ed97 7a05 	vldr	s14, [r7, #20]
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021f0 <lineTraceFlip+0x160>
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 800215c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002160:	edd7 7a04 	vldr	s15, [r7, #16]
 8002164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002168:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <lineTraceFlip+0x158>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a04 	vldr	s15, [r7, #16]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <lineTraceFlip+0x158>)
 800217c:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <lineTraceFlip+0x158>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ed97 7a05 	vldr	s14, [r7, #20]
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <lineTraceFlip+0x158>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed97 7a05 	vldr	s14, [r7, #20]
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <lineTraceFlip+0x164>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 80021aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b2:	ee17 3a90 	vmov	r3, s15
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c0:	ee17 2a90 	vmov	r2, s15
 80021c4:	b212      	sxth	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 f833 	bl	8005234 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021ce:	e003      	b.n	80021d8 <lineTraceFlip+0x148>
		setMotor(0, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f003 f82e 	bl	8005234 <setMotor>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000027a 	.word	0x2000027a
 80021e4:	44b264cd 	.word	0x44b264cd
 80021e8:	2000027c 	.word	0x2000027c
 80021ec:	44d1e000 	.word	0x44d1e000
 80021f0:	c4d1e000 	.word	0xc4d1e000
 80021f4:	2001609c 	.word	0x2001609c

080021f8 <startLineTrace>:

void startLineTrace()
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <startLineTrace+0x1c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <startLineTrace+0x20>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000027a 	.word	0x2000027a
 8002218:	2000027b 	.word	0x2000027b

0800221c <stopLineTrace>:

void stopLineTrace()
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <stopLineTrace+0x1c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <stopLineTrace+0x20>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2000027a 	.word	0x2000027a
 800223c:	2000027c 	.word	0x2000027c

08002240 <checkCourseOut>:

void checkCourseOut(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <checkCourseOut+0xb4>)
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	461a      	mov	r2, r3
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <checkCourseOut+0xb4>)
 8002250:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002254:	4413      	add	r3, r2
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <checkCourseOut+0xb4>)
 8002258:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <checkCourseOut+0xb4>)
 8002260:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002264:	4413      	add	r3, r2
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <checkCourseOut+0xb4>)
 8002268:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800226c:	4413      	add	r3, r2
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <checkCourseOut+0xb4>)
 8002270:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002274:	4413      	add	r3, r2
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <checkCourseOut+0xb4>)
 8002278:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800227c:	4413      	add	r3, r2
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <checkCourseOut+0xb4>)
 8002280:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002284:	4413      	add	r3, r2
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <checkCourseOut+0xb4>)
 8002288:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800228c:	4413      	add	r3, r2
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <checkCourseOut+0xb4>)
 8002290:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002294:	4413      	add	r3, r2
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <checkCourseOut+0xb4>)
 8002298:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800229c:	4413      	add	r3, r2
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <checkCourseOut+0xb4>)
 80022a0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <checkCourseOut+0xb8>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1052      	asrs	r2, r2, #1
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022ba:	d906      	bls.n	80022ca <checkCourseOut+0x8a>
		dark_cnt++;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <checkCourseOut+0xbc>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <checkCourseOut+0xbc>)
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e002      	b.n	80022d0 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <checkCourseOut+0xbc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <checkCourseOut+0xbc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b13      	cmp	r3, #19
 80022d6:	d903      	bls.n	80022e0 <checkCourseOut+0xa0>
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <checkCourseOut+0xc0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 80022de:	e002      	b.n	80022e6 <checkCourseOut+0xa6>
	else dark_flag = false;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <checkCourseOut+0xc0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20015fb4 	.word	0x20015fb4
 80022f8:	2aaaaaab 	.word	0x2aaaaaab
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000280 	.word	0x20000280

08002304 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return dark_flag;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <getCouseOutFlag+0x14>)
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000280 	.word	0x20000280

0800231c <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002320:	2202      	movs	r2, #2
 8002322:	4905      	ldr	r1, [pc, #20]	; (8002338 <initADC+0x1c>)
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <initADC+0x20>)
 8002326:	f004 fb0b 	bl	8006940 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800232a:	220c      	movs	r2, #12
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <initADC+0x24>)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <initADC+0x28>)
 8002330:	f004 fb06 	bl	8006940 <HAL_ADC_Start_DMA>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200002a8 	.word	0x200002a8
 800233c:	200160f0 	.word	0x200160f0
 8002340:	20000290 	.word	0x20000290
 8002344:	200160a0 	.word	0x200160a0

08002348 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002358:	4bc7      	ldr	r3, [pc, #796]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800235a:	edd3 7a01 	vldr	s15, [r3, #4]
 800235e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002362:	4bc6      	ldr	r3, [pc, #792]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002364:	ed93 7a01 	vldr	s14, [r3, #4]
 8002368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002374:	4bc3      	ldr	r3, [pc, #780]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	b219      	sxth	r1, r3
 8002384:	4bc0      	ldr	r3, [pc, #768]	; (8002688 <storeAnalogSensorBuffer+0x340>)
 8002386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800238a:	4bba      	ldr	r3, [pc, #744]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	4bb8      	ldr	r3, [pc, #736]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a0:	4bb6      	ldr	r3, [pc, #728]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	b219      	sxth	r1, r3
 80023c2:	4bb2      	ldr	r3, [pc, #712]	; (800268c <storeAnalogSensorBuffer+0x344>)
 80023c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023c8:	4baa      	ldr	r3, [pc, #680]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023de:	4ba7      	ldr	r3, [pc, #668]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	4ba4      	ldr	r3, [pc, #656]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	b219      	sxth	r1, r3
 8002400:	4ba3      	ldr	r3, [pc, #652]	; (8002690 <storeAnalogSensorBuffer+0x348>)
 8002402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002408:	88db      	ldrh	r3, [r3, #6]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241c:	4b97      	ldr	r3, [pc, #604]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800241e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	b219      	sxth	r1, r3
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <storeAnalogSensorBuffer+0x34c>)
 8002440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002444:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002446:	891b      	ldrh	r3, [r3, #8]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002452:	edd3 7a04 	vldr	s15, [r3, #16]
 8002456:	ee77 6a67 	vsub.f32	s13, s14, s15
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800245c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	4b85      	ldr	r3, [pc, #532]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	b219      	sxth	r1, r3
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <storeAnalogSensorBuffer+0x350>)
 800247e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002484:	895b      	ldrh	r3, [r3, #10]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002490:	edd3 7a05 	vldr	s15, [r3, #20]
 8002494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002498:	4b78      	ldr	r3, [pc, #480]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800249a:	ed93 7a05 	vldr	s14, [r3, #20]
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	b219      	sxth	r1, r3
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <storeAnalogSensorBuffer+0x354>)
 80024bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80024c2:	899b      	ldrh	r3, [r3, #12]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80024ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b69      	ldr	r3, [pc, #420]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80024d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	ee17 3a90 	vmov	r3, s15
 80024f6:	b219      	sxth	r1, r3
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <storeAnalogSensorBuffer+0x358>)
 80024fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800250c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002510:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002516:	ed93 7a07 	vldr	s14, [r3, #28]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	b219      	sxth	r1, r3
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <storeAnalogSensorBuffer+0x35c>)
 8002538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800253e:	8a1b      	ldrh	r3, [r3, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800254a:	edd3 7a08 	vldr	s15, [r3, #32]
 800254e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002554:	ed93 7a08 	vldr	s14, [r3, #32]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	b219      	sxth	r1, r3
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <storeAnalogSensorBuffer+0x360>)
 8002576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800257c:	8a5b      	ldrh	r3, [r3, #18]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002588:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800258c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002592:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	b219      	sxth	r1, r3
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <storeAnalogSensorBuffer+0x364>)
 80025b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025ba:	8a9b      	ldrh	r3, [r3, #20]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80025c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80025d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	b219      	sxth	r1, r3
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <storeAnalogSensorBuffer+0x368>)
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025f8:	8adb      	ldrh	r3, [r3, #22]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002604:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002608:	ee77 6a67 	vsub.f32	s13, s14, s15
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800260e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002616:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	b219      	sxth	r1, r3
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <storeAnalogSensorBuffer+0x36c>)
 8002630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <storeAnalogSensorBuffer+0x370>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <storeAnalogSensorBuffer+0x374>)
 8002642:	edd3 7a01 	vldr	s15, [r3, #4]
 8002646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <storeAnalogSensorBuffer+0x378>)
 800264c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b219      	sxth	r1, r3
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <storeAnalogSensorBuffer+0x37c>)
 800266e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002672:	e029      	b.n	80026c8 <storeAnalogSensorBuffer+0x380>
 8002674:	20000290 	.word	0x20000290
 8002678:	20015f74 	.word	0x20015f74
 800267c:	20015fd8 	.word	0x20015fd8
 8002680:	447a0000 	.word	0x447a0000
 8002684:	20000030 	.word	0x20000030
 8002688:	200002c0 	.word	0x200002c0
 800268c:	200002ac 	.word	0x200002ac
 8002690:	200002d4 	.word	0x200002d4
 8002694:	200002e8 	.word	0x200002e8
 8002698:	200002fc 	.word	0x200002fc
 800269c:	20000310 	.word	0x20000310
 80026a0:	20000324 	.word	0x20000324
 80026a4:	20000338 	.word	0x20000338
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000360 	.word	0x20000360
 80026b0:	20000374 	.word	0x20000374
 80026b4:	20000388 	.word	0x20000388
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	20015f6c 	.word	0x20015f6c
 80026c0:	20015fac 	.word	0x20015fac
 80026c4:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <storeAnalogSensorBuffer+0x3d4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <storeAnalogSensorBuffer+0x3d8>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <storeAnalogSensorBuffer+0x3dc>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002728 <storeAnalogSensorBuffer+0x3e0>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fa:	ee17 3a90 	vmov	r3, s15
 80026fe:	b219      	sxth	r1, r3
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <storeAnalogSensorBuffer+0x3e8>)
 8002702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	200002a8 	.word	0x200002a8
 8002720:	20015f6c 	.word	0x20015f6c
 8002724:	20015fac 	.word	0x20015fac
 8002728:	447a0000 	.word	0x447a0000
 800272c:	20000030 	.word	0x20000030
 8002730:	200003b0 	.word	0x200003b0

08002734 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800273a:	4bc9      	ldr	r3, [pc, #804]	; (8002a60 <updateAnalogSensor+0x32c>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002746:	4bc7      	ldr	r3, [pc, #796]	; (8002a64 <updateAnalogSensor+0x330>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002750:	4bc5      	ldr	r3, [pc, #788]	; (8002a68 <updateAnalogSensor+0x334>)
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a6c <updateAnalogSensor+0x338>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 3a90 	vmov	r3, s15
 800276a:	b21a      	sxth	r2, r3
 800276c:	4bc0      	ldr	r3, [pc, #768]	; (8002a70 <updateAnalogSensor+0x33c>)
 800276e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002770:	4bbb      	ldr	r3, [pc, #748]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277c:	4bb9      	ldr	r3, [pc, #740]	; (8002a64 <updateAnalogSensor+0x330>)
 800277e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002782:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002786:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <updateAnalogSensor+0x334>)
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a6c <updateAnalogSensor+0x338>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	4bb3      	ldr	r3, [pc, #716]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027a4:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80027a6:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	4bac      	ldr	r3, [pc, #688]	; (8002a64 <updateAnalogSensor+0x330>)
 80027b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027bc:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <updateAnalogSensor+0x334>)
 80027be:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a6c <updateAnalogSensor+0x338>
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 3a90 	vmov	r3, s15
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4ba5      	ldr	r3, [pc, #660]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027da:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027de:	88db      	ldrh	r3, [r3, #6]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <updateAnalogSensor+0x330>)
 80027ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f2:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <updateAnalogSensor+0x334>)
 80027f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a6c <updateAnalogSensor+0x338>
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	ee17 3a90 	vmov	r3, s15
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002810:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002814:	891b      	ldrh	r3, [r3, #8]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b91      	ldr	r3, [pc, #580]	; (8002a64 <updateAnalogSensor+0x330>)
 8002820:	edd3 7a04 	vldr	s15, [r3, #16]
 8002824:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <updateAnalogSensor+0x334>)
 800282a:	ed93 7a04 	vldr	s14, [r3, #16]
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a6c <updateAnalogSensor+0x338>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002846:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <updateAnalogSensor+0x32c>)
 800284a:	895b      	ldrh	r3, [r3, #10]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <updateAnalogSensor+0x330>)
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <updateAnalogSensor+0x334>)
 8002860:	ed93 7a05 	vldr	s14, [r3, #20]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a6c <updateAnalogSensor+0x338>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <updateAnalogSensor+0x33c>)
 800287c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002880:	899b      	ldrh	r3, [r3, #12]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <updateAnalogSensor+0x330>)
 800288c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002894:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <updateAnalogSensor+0x334>)
 8002896:	ed93 7a06 	vldr	s14, [r3, #24]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a6c <updateAnalogSensor+0x338>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	ee17 3a90 	vmov	r3, s15
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028b2:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028b6:	89db      	ldrh	r3, [r3, #14]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <updateAnalogSensor+0x330>)
 80028c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <updateAnalogSensor+0x334>)
 80028cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a6c <updateAnalogSensor+0x338>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028e8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028ec:	8a1b      	ldrh	r3, [r3, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <updateAnalogSensor+0x330>)
 80028f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <updateAnalogSensor+0x334>)
 8002902:	ed93 7a08 	vldr	s14, [r3, #32]
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a6c <updateAnalogSensor+0x338>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	ee17 3a90 	vmov	r3, s15
 800291a:	b21a      	sxth	r2, r3
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <updateAnalogSensor+0x33c>)
 800291e:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <updateAnalogSensor+0x330>)
 800292e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <updateAnalogSensor+0x334>)
 8002938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a6c <updateAnalogSensor+0x338>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002954:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002958:	8a9b      	ldrh	r3, [r3, #20]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <updateAnalogSensor+0x330>)
 8002964:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002968:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <updateAnalogSensor+0x334>)
 800296e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a6c <updateAnalogSensor+0x338>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002982:	ee17 3a90 	vmov	r3, s15
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <updateAnalogSensor+0x33c>)
 800298a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <updateAnalogSensor+0x32c>)
 800298e:	8adb      	ldrh	r3, [r3, #22]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <updateAnalogSensor+0x330>)
 800299a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800299e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <updateAnalogSensor+0x334>)
 80029a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a6c <updateAnalogSensor+0x338>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b8:	ee17 3a90 	vmov	r3, s15
 80029bc:	b21a      	sxth	r2, r3
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <updateAnalogSensor+0x33c>)
 80029c0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <updateAnalogSensor+0x340>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <updateAnalogSensor+0x340>)
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <updateAnalogSensor+0x340>)
 80029d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <updateAnalogSensor+0x340>)
 80029ec:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <updateAnalogSensor+0x340>)
 80029f4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <updateAnalogSensor+0x340>)
 80029fc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a04:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a0c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <updateAnalogSensor+0x344>)
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	1092      	asrs	r2, r2, #2
 8002a1a:	17db      	asrs	r3, r3, #31
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <updateAnalogSensor+0x348>)
 8002a22:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a3e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a4e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a56:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	e012      	b.n	8002a84 <updateAnalogSensor+0x350>
 8002a5e:	bf00      	nop
 8002a60:	20000290 	.word	0x20000290
 8002a64:	20015f74 	.word	0x20015f74
 8002a68:	20015fd8 	.word	0x20015fd8
 8002a6c:	447a0000 	.word	0x447a0000
 8002a70:	20015fb4 	.word	0x20015fb4
 8002a74:	2000039c 	.word	0x2000039c
 8002a78:	66666667 	.word	0x66666667
 8002a7c:	20015f58 	.word	0x20015f58
 8002a80:	200003b0 	.word	0x200003b0
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a86:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a8e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a96:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <updateAnalogSensor+0x3d4>)
 8002a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa2:	1092      	asrs	r2, r2, #2
 8002aa4:	17db      	asrs	r3, r3, #31
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <updateAnalogSensor+0x3d8>)
 8002aac:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e01a      	b.n	8002aea <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac0:	db05      	blt.n	8002ace <updateAnalogSensor+0x39a>
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc04      	bgt.n	8002ae4 <updateAnalogSensor+0x3b0>
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	dde1      	ble.n	8002ab4 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <updateAnalogSensor+0x3e0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200003b0 	.word	0x200003b0
 8002b08:	66666667 	.word	0x66666667
 8002b0c:	20015fd0 	.word	0x20015fd0
 8002b10:	20015fb4 	.word	0x20015fb4
 8002b14:	20000030 	.word	0x20000030

08002b18 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a0      	sub	sp, #128	; 0x80
 8002b1c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b22:	2230      	movs	r2, #48	; 0x30
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 fc49 	bl	800c3be <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	2230      	movs	r2, #48	; 0x30
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 fc42 	bl	800c3be <memset>
 8002b3a:	4bd8      	ldr	r3, [pc, #864]	; (8002e9c <sensorCalibration+0x384>)
 8002b3c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b44:	e026      	b.n	8002b94 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b4a:	4ad5      	ldr	r2, [pc, #852]	; (8002ea0 <sensorCalibration+0x388>)
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b5a:	4ad2      	ldr	r2, [pc, #840]	; (8002ea4 <sensorCalibration+0x38c>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	4ad1      	ldr	r2, [pc, #836]	; (8002ea8 <sensorCalibration+0x390>)
 8002b62:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b40      	subs	r3, #64	; 0x40
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b82:	4413      	add	r3, r2
 8002b84:	3b70      	subs	r3, #112	; 0x70
 8002b86:	4ac8      	ldr	r2, [pc, #800]	; (8002ea8 <sensorCalibration+0x390>)
 8002b88:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b94:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b98:	2b0b      	cmp	r3, #11
 8002b9a:	d9d4      	bls.n	8002b46 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002ba2:	e013      	b.n	8002bcc <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002ba4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ba8:	4ac0      	ldr	r2, [pc, #768]	; (8002eac <sensorCalibration+0x394>)
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002bb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bb8:	4abd      	ldr	r2, [pc, #756]	; (8002eb0 <sensorCalibration+0x398>)
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4aba      	ldr	r2, [pc, #744]	; (8002ea8 <sensorCalibration+0x390>)
 8002bc0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002bcc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d9e7      	bls.n	8002ba4 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002bd4:	e0f5      	b.n	8002dc2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f7fe ff3e 	bl	8001a58 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002be2:	e06e      	b.n	8002cc2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002be4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002be8:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <sensorCalibration+0x39c>)
 8002bea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bf2:	ee07 2a90 	vmov	s15, r2
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c00:	4413      	add	r3, r2
 8002c02:	3b40      	subs	r3, #64	; 0x40
 8002c04:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002c08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c0c:	4aa9      	ldr	r2, [pc, #676]	; (8002eb4 <sensorCalibration+0x39c>)
 8002c0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c16:	ee07 2a90 	vmov	s15, r2
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c24:	4413      	add	r3, r2
 8002c26:	3b70      	subs	r3, #112	; 0x70
 8002c28:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	3b40      	subs	r3, #64	; 0x40
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c42:	4a97      	ldr	r2, [pc, #604]	; (8002ea0 <sensorCalibration+0x388>)
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	dd0d      	ble.n	8002c72 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002c56:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c64:	440a      	add	r2, r1
 8002c66:	3a40      	subs	r2, #64	; 0x40
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	498d      	ldr	r1, [pc, #564]	; (8002ea0 <sensorCalibration+0x388>)
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c72:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b70      	subs	r3, #112	; 0x70
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <sensorCalibration+0x38c>)
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50d      	bpl.n	8002cb8 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002ca0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002caa:	440a      	add	r2, r1
 8002cac:	3a70      	subs	r2, #112	; 0x70
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	497c      	ldr	r1, [pc, #496]	; (8002ea4 <sensorCalibration+0x38c>)
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002cc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cc6:	2b0b      	cmp	r3, #11
 8002cc8:	d98c      	bls.n	8002be4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cd0:	e073      	b.n	8002dba <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cd2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cdc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce0:	ee07 2a90 	vmov	s15, r2
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b78      	subs	r3, #120	; 0x78
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d04:	ee07 2a90 	vmov	s15, r2
 8002d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d12:	4413      	add	r3, r2
 8002d14:	3b80      	subs	r3, #128	; 0x80
 8002d16:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002d1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d24:	4413      	add	r3, r2
 8002d26:	3b78      	subs	r3, #120	; 0x78
 8002d28:	ed93 7a00 	vldr	s14, [r3]
 8002d2c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <sensorCalibration+0x394>)
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd10      	ble.n	8002d66 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002d44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d48:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d52:	ee07 2a90 	vmov	s15, r2
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <sensorCalibration+0x394>)
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]
 8002d64:	e024      	b.n	8002db0 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d66:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d70:	4413      	add	r3, r2
 8002d72:	3b80      	subs	r3, #128	; 0x80
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <sensorCalibration+0x398>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d50f      	bpl.n	8002db0 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d9a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d9e:	ee07 2a90 	vmov	s15, r2
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <sensorCalibration+0x398>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002db0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002dba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d987      	bls.n	8002cd2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002dc2:	204c      	movs	r0, #76	; 0x4c
 8002dc4:	f003 fbd6 	bl	8006574 <getSwitchStatus>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f43f af03 	beq.w	8002bd6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002dd6:	e01b      	b.n	8002e10 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002dd8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <sensorCalibration+0x388>)
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <sensorCalibration+0x38c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <sensorCalibration+0x3a4>)
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002e10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d9df      	bls.n	8002dd8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e1e:	e010      	b.n	8002e42 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002e20:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <sensorCalibration+0x38c>)
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	440a      	add	r2, r1
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <sensorCalibration+0x3a8>)
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e38:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e46:	2b0b      	cmp	r3, #11
 8002e48:	d9ea      	bls.n	8002e20 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e50:	e01b      	b.n	8002e8a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <sensorCalibration+0x394>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <sensorCalibration+0x398>)
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <sensorCalibration+0x3ac>)
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e8a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d9df      	bls.n	8002e52 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e98:	e027      	b.n	8002eea <sensorCalibration+0x3d2>
 8002e9a:	bf00      	nop
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	20016138 	.word	0x20016138
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	44bb8000 	.word	0x44bb8000
 8002eac:	200160e8 	.word	0x200160e8
 8002eb0:	20016168 	.word	0x20016168
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002a8 	.word	0x200002a8
 8002ebc:	20015fd8 	.word	0x20015fd8
 8002ec0:	20015f74 	.word	0x20015f74
 8002ec4:	20015fac 	.word	0x20015fac
		side_offset_values[i] = side_min_values[i];
 8002ec8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002ecc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ed0:	490a      	ldr	r1, [pc, #40]	; (8002efc <sensorCalibration+0x3e4>)
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <sensorCalibration+0x3e8>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ee0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002eea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d9ea      	bls.n	8002ec8 <sensorCalibration+0x3b0>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3780      	adds	r7, #128	; 0x80
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20016168 	.word	0x20016168
 8002f00:	20015f6c 	.word	0x20015f6c

08002f04 <initLog>:
static float log_distance[2000];
static float log_theta[2000];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;
//static uint16_t log_distance_cnt, log_theta_cnt, log_x-axis_cnt, log_y-axis_cnt, log_debug_cnt;

void initLog(){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <initLog+0x60>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <initLog+0x64>)
 8002f0e:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <initLog+0x68>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <initLog+0x6c>)
 8002f16:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <initLog+0x70>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <initLog+0x74>)
 8002f1e:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <initLog+0x78>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <initLog+0x7c>)
 8002f26:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <initLog+0x80>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <initLog+0x84>)
 8002f2e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <initLog+0x60>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <initLog+0x88>)
 8002f36:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <initLog+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <initLog+0x8c>)
 8002f3e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <initLog+0x70>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <initLog+0x90>)
 8002f46:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <initLog+0x78>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <initLog+0x94>)
 8002f4e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <initLog+0x80>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <initLog+0x98>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	08010890 	.word	0x08010890
 8002f68:	20015f54 	.word	0x20015f54
 8002f6c:	08010894 	.word	0x08010894
 8002f70:	20015fa8 	.word	0x20015fa8
 8002f74:	08010898 	.word	0x08010898
 8002f78:	20015f64 	.word	0x20015f64
 8002f7c:	0801089c 	.word	0x0801089c
 8002f80:	20015f50 	.word	0x20015f50
 8002f84:	080108a0 	.word	0x080108a0
 8002f88:	20015f60 	.word	0x20015f60
 8002f8c:	20015f5c 	.word	0x20015f5c
 8002f90:	20015f68 	.word	0x20015f68
 8002f94:	20015fd4 	.word	0x20015fd4
 8002f98:	20015fcc 	.word	0x20015fcc
 8002f9c:	20015fa4 	.word	0x20015fa4

08002fa0 <saveDistance>:

void saveDistance(float distance){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <saveDistance+0x2c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb06 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <saveDistance+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <saveDistance+0x2c>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20015f54 	.word	0x20015f54

08002fd0 <saveTheta>:

void saveTheta(float theta){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <saveTheta+0x2c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faee 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <saveTheta+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <saveTheta+0x2c>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20015fa8 	.word	0x20015fa8

08003000 <saveCross>:

void saveCross(float cross){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <saveCross+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fad6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <saveCross+0x2c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3304      	adds	r3, #4
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <saveCross+0x2c>)
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20015f64 	.word	0x20015f64

08003030 <saveSide>:

void saveSide(float side){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <saveSide+0x2c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fabe 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <saveSide+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	4a03      	ldr	r2, [pc, #12]	; (800305c <saveSide+0x2c>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20015f50 	.word	0x20015f50

08003060 <saveDebug>:

void saveDebug(float value){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <saveDebug+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe faa6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <saveDebug+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <saveDebug+0x2c>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20015f60 	.word	0x20015f60

08003090 <ereaseLog>:
void saveY-axis(float y-axis){
	FLASH_Write_Word_F(writeAdd_4, side);
	writeAdd_4 += 0x04;
}*/

void ereaseLog(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003094:	2007      	movs	r0, #7
 8003096:	f7fe fa75 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 800309a:	2008      	movs	r0, #8
 800309c:	f7fe fa72 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 80030a0:	2009      	movs	r0, #9
 80030a2:	f7fe fa6f 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe fa6c 	bl	8001584 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030ac:	200b      	movs	r0, #11
 80030ae:	f7fe fa69 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <ereaseLog+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <ereaseLog+0x54>)
 80030b8:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <ereaseLog+0x58>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <ereaseLog+0x5c>)
 80030c0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <ereaseLog+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <ereaseLog+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <ereaseLog+0x68>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <ereaseLog+0x6c>)
 80030d0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <ereaseLog+0x70>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <ereaseLog+0x74>)
 80030d8:	6013      	str	r3, [r2, #0]
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08010890 	.word	0x08010890
 80030e4:	20015f54 	.word	0x20015f54
 80030e8:	08010894 	.word	0x08010894
 80030ec:	20015fa8 	.word	0x20015fa8
 80030f0:	08010898 	.word	0x08010898
 80030f4:	20015f64 	.word	0x20015f64
 80030f8:	0801089c 	.word	0x0801089c
 80030fc:	20015f50 	.word	0x20015f50
 8003100:	080108a0 	.word	0x080108a0
 8003104:	20015f60 	.word	0x20015f60

08003108 <ereaseDebugLog>:

void ereaseDebugLog(){
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 800310c:	200b      	movs	r0, #11
 800310e:	f7fe fa39 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ereaseDebugLog+0x18>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <ereaseDebugLog+0x1c>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	080108a0 	.word	0x080108a0
 8003124:	20015f60 	.word	0x20015f60

08003128 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <getDistanceLogSize+0x14>)
 800312e:	881b      	ldrh	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200100e4 	.word	0x200100e4

08003140 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <getCrossLogSize+0x14>)
 8003146:	881b      	ldrh	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200100e8 	.word	0x200100e8

08003158 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <getSideLogSize+0x14>)
 800315e:	881b      	ldrh	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	200100ea 	.word	0x200100ea

08003170 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <getDebugLogSize+0x14>)
 8003176:	881b      	ldrh	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	200100ec 	.word	0x200100ec

08003188 <loadDistance>:


void loadDistance(){
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <loadDistance+0x6c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <loadDistance+0x70>)
 8003198:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <loadDistance+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <loadDistance+0x70>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4915      	ldr	r1, [pc, #84]	; (8003200 <loadDistance+0x78>)
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <loadDistance+0x78>)
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eef4 7a67 	vcmp.f32	s15, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d60e      	bvs.n	80031e6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <loadDistance+0x74>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <loadDistance+0x74>)
 80031d2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <loadDistance+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <loadDistance+0x70>)
 80031dc:	6013      	str	r3, [r2, #0]
		i++;
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	3301      	adds	r3, #1
 80031e2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80031e4:	e7dc      	b.n	80031a0 <loadDistance+0x18>
			break;
 80031e6:	bf00      	nop
	}
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	08010890 	.word	0x08010890
 80031f8:	20015f5c 	.word	0x20015f5c
 80031fc:	200100e4 	.word	0x200100e4
 8003200:	2000c264 	.word	0x2000c264

08003204 <loadTheta>:

void loadTheta(){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <loadTheta+0x6c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <loadTheta+0x70>)
 8003214:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <loadTheta+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <loadTheta+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4915      	ldr	r1, [pc, #84]	; (800327c <loadTheta+0x78>)
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <loadTheta+0x78>)
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eef4 7a67 	vcmp.f32	s15, s15
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d60e      	bvs.n	8003262 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <loadTheta+0x74>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <loadTheta+0x74>)
 800324e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <loadTheta+0x70>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <loadTheta+0x70>)
 8003258:	6013      	str	r3, [r2, #0]
		i++;
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	3301      	adds	r3, #1
 800325e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003260:	e7dc      	b.n	800321c <loadTheta+0x18>
			break;
 8003262:	bf00      	nop
	}
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	08010894 	.word	0x08010894
 8003274:	20015f68 	.word	0x20015f68
 8003278:	200100e6 	.word	0x200100e6
 800327c:	2000e1a4 	.word	0x2000e1a4

08003280 <loadCross>:

void loadCross(){
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <loadCross+0x6c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <loadCross+0x70>)
 8003290:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <loadCross+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <loadCross+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <loadCross+0x78>)
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <loadCross+0x78>)
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eef4 7a67 	vcmp.f32	s15, s15
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	d60e      	bvs.n	80032de <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <loadCross+0x74>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <loadCross+0x74>)
 80032ca:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <loadCross+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <loadCross+0x70>)
 80032d4:	6013      	str	r3, [r2, #0]
		i++;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	3301      	adds	r3, #1
 80032da:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80032dc:	e7dc      	b.n	8003298 <loadCross+0x18>
			break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	08010898 	.word	0x08010898
 80032f0:	20015fd4 	.word	0x20015fd4
 80032f4:	200100e8 	.word	0x200100e8
 80032f8:	200003c4 	.word	0x200003c4

080032fc <loadSide>:

void loadSide(){
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <loadSide+0x6c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <loadSide+0x70>)
 800330c:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <loadSide+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <loadSide+0x70>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <loadSide+0x78>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <loadSide+0x78>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef4 7a67 	vcmp.f32	s15, s15
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d60e      	bvs.n	800335a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <loadSide+0x74>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <loadSide+0x74>)
 8003346:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <loadSide+0x70>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <loadSide+0x70>)
 8003350:	6013      	str	r3, [r2, #0]
		i++;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	3301      	adds	r3, #1
 8003356:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003358:	e7dc      	b.n	8003314 <loadSide+0x18>
			break;
 800335a:	bf00      	nop
	}
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	0801089c 	.word	0x0801089c
 800336c:	20015fcc 	.word	0x20015fcc
 8003370:	200100ea 	.word	0x200100ea
 8003374:	20000554 	.word	0x20000554

08003378 <loadDebug>:

void loadDebug(){
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <loadDebug+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <loadDebug+0x70>)
 8003388:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <loadDebug+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <loadDebug+0x70>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4915      	ldr	r1, [pc, #84]	; (80033f0 <loadDebug+0x78>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <loadDebug+0x78>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef4 7a67 	vcmp.f32	s15, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d60e      	bvs.n	80033d6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <loadDebug+0x74>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <loadDebug+0x74>)
 80033c2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <loadDebug+0x70>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <loadDebug+0x70>)
 80033cc:	6013      	str	r3, [r2, #0]
		i++;
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	3301      	adds	r3, #1
 80033d2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80033d4:	e7dc      	b.n	8003390 <loadDebug+0x18>
			break;
 80033d6:	bf00      	nop
	}
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	080108a0 	.word	0x080108a0
 80033e8:	20015fa4 	.word	0x20015fa4
 80033ec:	200100ec 	.word	0x200100ec
 80033f0:	200006e4 	.word	0x200006e4

080033f4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	return log_distance;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <getDistanceArrayPointer+0x10>)
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	2000c264 	.word	0x2000c264

08003408 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return log_theta;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <getThetaArrayPointer+0x10>)
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	2000e1a4 	.word	0x2000e1a4

0800341c <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <getDistanceLog+0x28>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ee07 3a90 	vmov	s15, r3
}
 8003434:	eeb0 0a67 	vmov.f32	s0, s15
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000c264 	.word	0x2000c264

08003448 <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <getCrossLog+0x28>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200003c4 	.word	0x200003c4

08003474 <getSideLog>:

float getSideLog(uint16_t idx){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <getSideLog+0x28>)
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000554 	.word	0x20000554

080034a0 <getDebugLog>:

float getDebugLog(uint16_t idx){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <getDebugLog+0x28>)
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	ee07 3a90 	vmov	s15, r3
}
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	200006e4 	.word	0x200006e4

080034cc <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80034e0:	2200      	movs	r2, #0
 80034e2:	2104      	movs	r1, #4
 80034e4:	480d      	ldr	r0, [pc, #52]	; (800351c <read_byte+0x50>)
 80034e6:	f004 fdf7 	bl	80080d8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80034ea:	f107 010f 	add.w	r1, r7, #15
 80034ee:	2364      	movs	r3, #100	; 0x64
 80034f0:	2201      	movs	r2, #1
 80034f2:	480b      	ldr	r0, [pc, #44]	; (8003520 <read_byte+0x54>)
 80034f4:	f005 fbe2 	bl	8008cbc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80034f8:	f107 010e 	add.w	r1, r7, #14
 80034fc:	2364      	movs	r3, #100	; 0x64
 80034fe:	2201      	movs	r2, #1
 8003500:	4807      	ldr	r0, [pc, #28]	; (8003520 <read_byte+0x54>)
 8003502:	f005 fd0f 	bl	8008f24 <HAL_SPI_Receive>
		CS_SET;
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4804      	ldr	r0, [pc, #16]	; (800351c <read_byte+0x50>)
 800350c:	f004 fde4 	bl	80080d8 <HAL_GPIO_WritePin>

	return val;
 8003510:	7bbb      	ldrb	r3, [r7, #14]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020c00 	.word	0x40020c00
 8003520:	2001623c 	.word	0x2001623c

08003524 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	460a      	mov	r2, r1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	4613      	mov	r3, r2
 8003532:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	b2db      	uxtb	r3, r3
 800353c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <write_byte+0x50>)
 8003544:	f004 fdc8 	bl	80080d8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003548:	f107 010f 	add.w	r1, r7, #15
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	2201      	movs	r2, #1
 8003550:	4809      	ldr	r0, [pc, #36]	; (8003578 <write_byte+0x54>)
 8003552:	f005 fbb3 	bl	8008cbc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003556:	1db9      	adds	r1, r7, #6
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	2201      	movs	r2, #1
 800355c:	4806      	ldr	r0, [pc, #24]	; (8003578 <write_byte+0x54>)
 800355e:	f005 fce1 	bl	8008f24 <HAL_SPI_Receive>
	CS_SET;
 8003562:	2201      	movs	r2, #1
 8003564:	2104      	movs	r1, #4
 8003566:	4803      	ldr	r0, [pc, #12]	; (8003574 <write_byte+0x50>)
 8003568:	f004 fdb6 	bl	80080d8 <HAL_GPIO_WritePin>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020c00 	.word	0x40020c00
 8003578:	2001623c 	.word	0x2001623c

0800357c <IMU_init>:

uint8_t IMU_init() {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8003586:	2075      	movs	r0, #117	; 0x75
 8003588:	f7ff ffa0 	bl	80034cc <read_byte>
 800358c:	4603      	mov	r3, r0
 800358e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003590:	79bb      	ldrb	r3, [r7, #6]
 8003592:	2b70      	cmp	r3, #112	; 0x70
 8003594:	d110      	bne.n	80035b8 <IMU_init+0x3c>
		ret = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800359a:	2100      	movs	r1, #0
 800359c:	206b      	movs	r0, #107	; 0x6b
 800359e:	f7ff ffc1 	bl	8003524 <write_byte>
		HAL_Delay(100);
 80035a2:	2064      	movs	r0, #100	; 0x64
 80035a4:	f003 f966 	bl	8006874 <HAL_Delay>
		write_byte(0x1A, 0x00);
 80035a8:	2100      	movs	r1, #0
 80035aa:	201a      	movs	r0, #26
 80035ac:	f7ff ffba 	bl	8003524 <write_byte>
		write_byte(0x1B, 0x18);
 80035b0:	2118      	movs	r1, #24
 80035b2:	201b      	movs	r0, #27
 80035b4:	f7ff ffb6 	bl	8003524 <write_byte>
	}
	return ret;
 80035b8:	79fb      	ldrb	r3, [r7, #7]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <read_gyro_data>:

void read_gyro_data() {
 80035c4:	b598      	push	{r3, r4, r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80035c8:	2047      	movs	r0, #71	; 0x47
 80035ca:	f7ff ff7f 	bl	80034cc <read_byte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	b21c      	sxth	r4, r3
 80035d4:	2048      	movs	r0, #72	; 0x48
 80035d6:	f7ff ff79 	bl	80034cc <read_byte>
 80035da:	4603      	mov	r3, r0
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4323      	orrs	r3, r4
 80035e0:	b21a      	sxth	r2, r3
 80035e2:	4b02      	ldr	r3, [pc, #8]	; (80035ec <read_gyro_data+0x28>)
 80035e4:	801a      	strh	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	bd98      	pop	{r3, r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20016170 	.word	0x20016170

080035f0 <CreateXYcoordinates>:
static float target_Y_coordinate;

bool lookaheadpoint_update_flag;

void CreateXYcoordinates()
{
 80035f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035f4:	b08a      	sub	sp, #40	; 0x28
 80035f6:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80035f8:	f7ff fefc 	bl	80033f4 <getDistanceArrayPointer>
 80035fc:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80035fe:	f7ff ff03 	bl	8003408 <getThetaArrayPointer>
 8003602:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	61fb      	str	r3, [r7, #28]
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 8003616:	f7ff fd87 	bl	8003128 <getDistanceLogSize>
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 800361e:	2300      	movs	r3, #0
 8003620:	82fb      	strh	r3, [r7, #22]
 8003622:	e08f      	b.n	8003744 <CreateXYcoordinates+0x154>
		temp_distance = p_distance[i];
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 8003630:	8afb      	ldrh	r3, [r7, #22]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4413      	add	r3, r2
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 800363c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003640:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d101      	bne.n	800364e <CreateXYcoordinates+0x5e>
 800364a:	4b43      	ldr	r3, [pc, #268]	; (8003758 <CreateXYcoordinates+0x168>)
 800364c:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 800364e:	6a38      	ldr	r0, [r7, #32]
 8003650:	f7fc ff7a 	bl	8000548 <__aeabi_f2d>
 8003654:	4604      	mov	r4, r0
 8003656:	460d      	mov	r5, r1
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7fc ff75 	bl	8000548 <__aeabi_f2d>
 800365e:	4680      	mov	r8, r0
 8003660:	4689      	mov	r9, r1
 8003662:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003666:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800366a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800366e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	ee17 0a90 	vmov	r0, s15
 800367a:	f7fc ff65 	bl	8000548 <__aeabi_f2d>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	ec43 2b10 	vmov	d0, r2, r3
 8003686:	f007 fb87 	bl	800ad98 <cos>
 800368a:	ec53 2b10 	vmov	r2, r3, d0
 800368e:	4640      	mov	r0, r8
 8003690:	4649      	mov	r1, r9
 8003692:	f7fc ffb1 	bl	80005f8 <__aeabi_dmul>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc fdf5 	bl	800028c <__adddf3>
 80036a2:	4603      	mov	r3, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	4618      	mov	r0, r3
 80036a8:	4621      	mov	r1, r4
 80036aa:	f7fd fa9d 	bl	8000be8 <__aeabi_d2f>
 80036ae:	4603      	mov	r3, r0
 80036b0:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 80036b2:	69f8      	ldr	r0, [r7, #28]
 80036b4:	f7fc ff48 	bl	8000548 <__aeabi_f2d>
 80036b8:	4604      	mov	r4, r0
 80036ba:	460d      	mov	r5, r1
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fc ff43 	bl	8000548 <__aeabi_f2d>
 80036c2:	4680      	mov	r8, r0
 80036c4:	4689      	mov	r9, r1
 80036c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	ee17 0a90 	vmov	r0, s15
 80036de:	f7fc ff33 	bl	8000548 <__aeabi_f2d>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	ec43 2b10 	vmov	d0, r2, r3
 80036ea:	f007 fb99 	bl	800ae20 <sin>
 80036ee:	ec53 2b10 	vmov	r2, r3, d0
 80036f2:	4640      	mov	r0, r8
 80036f4:	4649      	mov	r1, r9
 80036f6:	f7fc ff7f 	bl	80005f8 <__aeabi_dmul>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4620      	mov	r0, r4
 8003700:	4629      	mov	r1, r5
 8003702:	f7fc fdc3 	bl	800028c <__adddf3>
 8003706:	4603      	mov	r3, r0
 8003708:	460c      	mov	r4, r1
 800370a:	4618      	mov	r0, r3
 800370c:	4621      	mov	r1, r4
 800370e:	f7fd fa6b 	bl	8000be8 <__aeabi_d2f>
 8003712:	4603      	mov	r3, r0
 8003714:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 8003716:	ed97 7a06 	vldr	s14, [r7, #24]
 800371a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800371e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003722:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 8003726:	8afb      	ldrh	r3, [r7, #22]
 8003728:	4a0c      	ldr	r2, [pc, #48]	; (800375c <CreateXYcoordinates+0x16c>)
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 8003732:	8afb      	ldrh	r3, [r7, #22]
 8003734:	4a0a      	ldr	r2, [pc, #40]	; (8003760 <CreateXYcoordinates+0x170>)
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 800373e:	8afb      	ldrh	r3, [r7, #22]
 8003740:	3301      	adds	r3, #1
 8003742:	82fb      	strh	r3, [r7, #22]
 8003744:	8afa      	ldrh	r2, [r7, #22]
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	429a      	cmp	r2, r3
 800374a:	f4ff af6b 	bcc.w	8003624 <CreateXYcoordinates+0x34>

		//saveDebug(X_table[i]);//X_tableに値が入っていることを確認
	    //saveDebug(Y_table[i]);
	}
}
 800374e:	bf00      	nop
 8003750:	3728      	adds	r7, #40	; 0x28
 8003752:	46bd      	mov	sp, r7
 8003754:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003758:	3727c5ac 	.word	0x3727c5ac
 800375c:	200100f0 	.word	0x200100f0
 8003760:	20012030 	.word	0x20012030

08003764 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003764:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003778:	f7fd fe54 	bl	8001424 <getDistance10mm>
 800377c:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003780:	f7fe f864 	bl	800184c <getTheta10mm>
 8003784:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003788:	edd7 7a03 	vldr	s15, [r7, #12]
 800378c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	d101      	bne.n	800379a <CurrentXcoordinates+0x36>
 8003796:	4b27      	ldr	r3, [pc, #156]	; (8003834 <CurrentXcoordinates+0xd0>)
 8003798:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cos(pre_th + now_theta/2);
 800379a:	4b27      	ldr	r3, [pc, #156]	; (8003838 <CurrentXcoordinates+0xd4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fc fed2 	bl	8000548 <__aeabi_f2d>
 80037a4:	4604      	mov	r4, r0
 80037a6:	460d      	mov	r5, r1
 80037a8:	6838      	ldr	r0, [r7, #0]
 80037aa:	f7fc fecd 	bl	8000548 <__aeabi_f2d>
 80037ae:	4680      	mov	r8, r0
 80037b0:	4689      	mov	r9, r1
 80037b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037be:	4b1f      	ldr	r3, [pc, #124]	; (800383c <CurrentXcoordinates+0xd8>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037c8:	ee17 0a90 	vmov	r0, s15
 80037cc:	f7fc febc 	bl	8000548 <__aeabi_f2d>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	ec43 2b10 	vmov	d0, r2, r3
 80037d8:	f007 fade 	bl	800ad98 <cos>
 80037dc:	ec53 2b10 	vmov	r2, r3, d0
 80037e0:	4640      	mov	r0, r8
 80037e2:	4649      	mov	r1, r9
 80037e4:	f7fc ff08 	bl	80005f8 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4620      	mov	r0, r4
 80037ee:	4629      	mov	r1, r5
 80037f0:	f7fc fd4c 	bl	800028c <__adddf3>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	4618      	mov	r0, r3
 80037fa:	4621      	mov	r1, r4
 80037fc:	f7fd f9f4 	bl	8000be8 <__aeabi_d2f>
 8003800:	4603      	mov	r3, r0
 8003802:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <CurrentXcoordinates+0xd8>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ed97 7a03 	vldr	s14, [r7, #12]
 800380e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003812:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <CurrentXcoordinates+0xd4>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6013      	str	r3, [r2, #0]
	pre_th = th;
 800381c:	4a07      	ldr	r2, [pc, #28]	; (800383c <CurrentXcoordinates+0xd8>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]

	return x;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	ee07 3a90 	vmov	s15, r3
}
 8003828:	eeb0 0a67 	vmov.f32	s0, s15
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003834:	3727c5ac 	.word	0x3727c5ac
 8003838:	20013f84 	.word	0x20013f84
 800383c:	20013f88 	.word	0x20013f88

08003840 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003854:	f7fd fde6 	bl	8001424 <getDistance10mm>
 8003858:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 800385c:	f7fd fff6 	bl	800184c <getTheta10mm>
 8003860:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003864:	edd7 7a03 	vldr	s15, [r7, #12]
 8003868:	eef5 7a40 	vcmp.f32	s15, #0.0
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	d101      	bne.n	8003876 <CurrentYcoordinates+0x36>
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <CurrentYcoordinates+0xd0>)
 8003874:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sin(pre_th + now_theta/2);
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <CurrentYcoordinates+0xd4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fc fe64 	bl	8000548 <__aeabi_f2d>
 8003880:	4604      	mov	r4, r0
 8003882:	460d      	mov	r5, r1
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	f7fc fe5f 	bl	8000548 <__aeabi_f2d>
 800388a:	4680      	mov	r8, r0
 800388c:	4689      	mov	r9, r1
 800388e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003892:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003896:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <CurrentYcoordinates+0xd8>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a4:	ee17 0a90 	vmov	r0, s15
 80038a8:	f7fc fe4e 	bl	8000548 <__aeabi_f2d>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	ec43 2b10 	vmov	d0, r2, r3
 80038b4:	f007 fab4 	bl	800ae20 <sin>
 80038b8:	ec53 2b10 	vmov	r2, r3, d0
 80038bc:	4640      	mov	r0, r8
 80038be:	4649      	mov	r1, r9
 80038c0:	f7fc fe9a 	bl	80005f8 <__aeabi_dmul>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4620      	mov	r0, r4
 80038ca:	4629      	mov	r1, r5
 80038cc:	f7fc fcde 	bl	800028c <__adddf3>
 80038d0:	4603      	mov	r3, r0
 80038d2:	460c      	mov	r4, r1
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	f7fd f986 	bl	8000be8 <__aeabi_d2f>
 80038dc:	4603      	mov	r3, r0
 80038de:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <CurrentYcoordinates+0xd8>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80038ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ee:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 80038f2:	4a08      	ldr	r2, [pc, #32]	; (8003914 <CurrentYcoordinates+0xd4>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6013      	str	r3, [r2, #0]
	pre_th = th;
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <CurrentYcoordinates+0xd8>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]

	return y;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	ee07 3a90 	vmov	s15, r3
}
 8003904:	eeb0 0a67 	vmov.f32	s0, s15
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003910:	3727c5ac 	.word	0x3727c5ac
 8003914:	20013f8c 	.word	0x20013f8c
 8003918:	20013f90 	.word	0x20013f90

0800391c <updateLookaheadpoints>:

void updateLookaheadpoints(){
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0

	if(getTargetUpdateflag() == true){
 8003920:	f002 f9fe 	bl	8005d20 <getTargetUpdateflag>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d064      	beq.n	80039f4 <updateLookaheadpoints+0xd8>
		if(getTotalDistance() >= ref_XYdistance){
 800392a:	f7fd fced 	bl	8001308 <getTotalDistance>
 800392e:	eeb0 7a40 	vmov.f32	s14, s0
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <updateLookaheadpoints+0xdc>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800393c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003940:	db17      	blt.n	8003972 <updateLookaheadpoints+0x56>
			ref_XYdistance += getDistanceLog(lookaheadpoint_table_idx);
 8003942:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <updateLookaheadpoints+0xe0>)
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fd68 	bl	800341c <getDistanceLog>
 800394c:	eeb0 7a40 	vmov.f32	s14, s0
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <updateLookaheadpoints+0xdc>)
 8003952:	edd3 7a00 	vldr	s15, [r3]
 8003956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395a:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <updateLookaheadpoints+0xdc>)
 800395c:	edc3 7a00 	vstr	s15, [r3]
			lookaheadpoint_table_idx++;
 8003960:	4b26      	ldr	r3, [pc, #152]	; (80039fc <updateLookaheadpoints+0xe0>)
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	4b24      	ldr	r3, [pc, #144]	; (80039fc <updateLookaheadpoints+0xe0>)
 800396a:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 800396c:	f7fd fd84 	bl	8001478 <clearDistance30mm>
 8003970:	e021      	b.n	80039b6 <updateLookaheadpoints+0x9a>
		}else if(getDistance30mm() >= 30){
 8003972:	f7fd fd73 	bl	800145c <getDistance30mm>
 8003976:	eeb0 7a40 	vmov.f32	s14, s0
 800397a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800397e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	db16      	blt.n	80039b6 <updateLookaheadpoints+0x9a>
			ref_XYdistance += getDistanceLog(lookaheadpoint_table_idx);
 8003988:	4b1c      	ldr	r3, [pc, #112]	; (80039fc <updateLookaheadpoints+0xe0>)
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff fd45 	bl	800341c <getDistanceLog>
 8003992:	eeb0 7a40 	vmov.f32	s14, s0
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <updateLookaheadpoints+0xdc>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <updateLookaheadpoints+0xdc>)
 80039a2:	edc3 7a00 	vstr	s15, [r3]
			lookaheadpoint_table_idx++;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	3301      	adds	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039b0:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 80039b2:	f7fd fd61 	bl	8001478 <clearDistance30mm>
		}
		if(lookaheadpoint_table_idx >= getDistanceLogSize()){
 80039b6:	f7ff fbb7 	bl	8003128 <getDistanceLogSize>
 80039ba:	4603      	mov	r3, r0
 80039bc:	461a      	mov	r2, r3
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d806      	bhi.n	80039d4 <updateLookaheadpoints+0xb8>
			lookaheadpoint_table_idx = getDistanceLogSize() - 1;
 80039c6:	f7ff fbaf 	bl	8003128 <getDistanceLogSize>
 80039ca:	4603      	mov	r3, r0
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039d2:	801a      	strh	r2, [r3, #0]
		}

		target_X_coordinate = X_table[lookaheadpoint_table_idx];
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	4a09      	ldr	r2, [pc, #36]	; (8003a00 <updateLookaheadpoints+0xe4>)
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a08      	ldr	r2, [pc, #32]	; (8003a04 <updateLookaheadpoints+0xe8>)
 80039e2:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[lookaheadpoint_table_idx];
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <updateLookaheadpoints+0xe0>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <updateLookaheadpoints+0xec>)
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <updateLookaheadpoints+0xf0>)
 80039f2:	6013      	str	r3, [r2, #0]

	}
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	2001617c 	.word	0x2001617c
 80039fc:	20013f70 	.word	0x20013f70
 8003a00:	200100f0 	.word	0x200100f0
 8003a04:	20013f7c 	.word	0x20013f7c
 8003a08:	20012030 	.word	0x20012030
 8003a0c:	20013f80 	.word	0x20013f80

08003a10 <Ang_atan_diff>:

float Ang_atan_diff(void)
{
 8003a10:	b5b0      	push	{r4, r5, r7, lr}
 8003a12:	ed2d 8b02 	vpush	{d8}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
	static float ang_atan2;
	static float ang_diff;

	float now_theta = getaddTheta30mm();
 8003a1a:	f7fd ff25 	bl	8001868 <getaddTheta30mm>
 8003a1e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(now_theta == 0) now_theta = 0.00001;
 8003a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2e:	d101      	bne.n	8003a34 <Ang_atan_diff+0x24>
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <Ang_atan_diff+0x160>)
 8003a32:	607b      	str	r3, [r7, #4]

	ang_atan2 = atan2((target_Y_coordinate - CurrentYcoordinates()) , (target_X_coordinate - CurrentXcoordinates()));
 8003a34:	4b4f      	ldr	r3, [pc, #316]	; (8003b74 <Ang_atan_diff+0x164>)
 8003a36:	ed93 8a00 	vldr	s16, [r3]
 8003a3a:	f7ff ff01 	bl	8003840 <CurrentYcoordinates>
 8003a3e:	eef0 7a40 	vmov.f32	s15, s0
 8003a42:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003a46:	ee17 0a90 	vmov	r0, s15
 8003a4a:	f7fc fd7d 	bl	8000548 <__aeabi_f2d>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	460d      	mov	r5, r1
 8003a52:	4b49      	ldr	r3, [pc, #292]	; (8003b78 <Ang_atan_diff+0x168>)
 8003a54:	ed93 8a00 	vldr	s16, [r3]
 8003a58:	f7ff fe84 	bl	8003764 <CurrentXcoordinates>
 8003a5c:	eef0 7a40 	vmov.f32	s15, s0
 8003a60:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003a64:	ee17 0a90 	vmov	r0, s15
 8003a68:	f7fc fd6e 	bl	8000548 <__aeabi_f2d>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	ec43 2b11 	vmov	d1, r2, r3
 8003a74:	ec45 4b10 	vmov	d0, r4, r5
 8003a78:	f007 fa1a 	bl	800aeb0 <atan2>
 8003a7c:	ec54 3b10 	vmov	r3, r4, d0
 8003a80:	4618      	mov	r0, r3
 8003a82:	4621      	mov	r1, r4
 8003a84:	f7fd f8b0 	bl	8000be8 <__aeabi_d2f>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003a8c:	601a      	str	r2, [r3, #0]

	//atan2関数は、-π ~ πの間で戻り値が設定されているため、-π・πを超えた数字が戻り値として計算されることはない。そのため、条件分岐を使って、＋－2πすることで値を計算している。

	pre_ang_atan2_diff = pre_ang_atan2 - ang_atan2;
 8003a8e:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <Ang_atan_diff+0x170>)
 8003a90:	ed93 7a00 	vldr	s14, [r3]
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003a96:	edd3 7a00 	vldr	s15, [r3]
 8003a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a9e:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <Ang_atan_diff+0x174>)
 8003aa0:	edc3 7a00 	vstr	s15, [r3]

	if(pre_ang_atan2_diff > PI){//差分がπ以上のときは、＋2π
 8003aa4:	4b37      	ldr	r3, [pc, #220]	; (8003b84 <Ang_atan_diff+0x174>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fc fd4d 	bl	8000548 <__aeabi_f2d>
 8003aae:	a32a      	add	r3, pc, #168	; (adr r3, 8003b58 <Ang_atan_diff+0x148>)
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f7fd f830 	bl	8000b18 <__aeabi_dcmpgt>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d012      	beq.n	8003ae4 <Ang_atan_diff+0xd4>
		ang_atan2 = ang_atan2 + 2*PI;
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd40 	bl	8000548 <__aeabi_f2d>
 8003ac8:	a325      	add	r3, pc, #148	; (adr r3, 8003b60 <Ang_atan_diff+0x150>)
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f7fc fbdd 	bl	800028c <__adddf3>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	4621      	mov	r1, r4
 8003ada:	f7fd f885 	bl	8000be8 <__aeabi_d2f>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b26      	ldr	r3, [pc, #152]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003ae2:	601a      	str	r2, [r3, #0]
	}

	if(pre_ang_atan2_diff < -PI){//差分が-π以下のときは、-2π
 8003ae4:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <Ang_atan_diff+0x174>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fc fd2d 	bl	8000548 <__aeabi_f2d>
 8003aee:	a31e      	add	r3, pc, #120	; (adr r3, 8003b68 <Ang_atan_diff+0x158>)
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f7fc fff2 	bl	8000adc <__aeabi_dcmplt>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d012      	beq.n	8003b24 <Ang_atan_diff+0x114>
		ang_atan2 = ang_atan2 - 2*PI;
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fc fd20 	bl	8000548 <__aeabi_f2d>
 8003b08:	a315      	add	r3, pc, #84	; (adr r3, 8003b60 <Ang_atan_diff+0x150>)
 8003b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0e:	f7fc fbbb 	bl	8000288 <__aeabi_dsub>
 8003b12:	4603      	mov	r3, r0
 8003b14:	460c      	mov	r4, r1
 8003b16:	4618      	mov	r0, r3
 8003b18:	4621      	mov	r1, r4
 8003b1a:	f7fd f865 	bl	8000be8 <__aeabi_d2f>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003b22:	601a      	str	r2, [r3, #0]
	}

	pre_ang_atan2 = ang_atan2;
 8003b24:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <Ang_atan_diff+0x170>)
 8003b2a:	6013      	str	r3, [r2, #0]

	ang_diff = ang_atan2 - now_theta;//目標点と走行中の点の差分角度を計算する(rad)
 8003b2c:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <Ang_atan_diff+0x16c>)
 8003b2e:	ed93 7a00 	vldr	s14, [r3]
 8003b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <Ang_atan_diff+0x178>)
 8003b3c:	edc3 7a00 	vstr	s15, [r3]

	return ang_diff;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <Ang_atan_diff+0x178>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	ee07 3a90 	vmov	s15, r3
}
 8003b48:	eeb0 0a67 	vmov.f32	s0, s15
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	ecbd 8b02 	vpop	{d8}
 8003b54:	bdb0      	pop	{r4, r5, r7, pc}
 8003b56:	bf00      	nop
 8003b58:	54411744 	.word	0x54411744
 8003b5c:	400921fb 	.word	0x400921fb
 8003b60:	54411744 	.word	0x54411744
 8003b64:	401921fb 	.word	0x401921fb
 8003b68:	54411744 	.word	0x54411744
 8003b6c:	c00921fb 	.word	0xc00921fb
 8003b70:	3727c5ac 	.word	0x3727c5ac
 8003b74:	20013f80 	.word	0x20013f80
 8003b78:	20013f7c 	.word	0x20013f7c
 8003b7c:	20013f94 	.word	0x20013f94
 8003b80:	20013f74 	.word	0x20013f74
 8003b84:	20013f78 	.word	0x20013f78
 8003b88:	20013f98 	.word	0x20013f98
 8003b8c:	00000000 	.word	0x00000000

08003b90 <AngularVelocityCalculation>:

float AngularVelocityCalculation(void)
{
 8003b90:	b5b0      	push	{r4, r5, r7, lr}
 8003b92:	af00      	add	r7, sp, #0
	static float control_input_v;
	static float control_output_omega;

	control_input_v = getTargetVelocity();
 8003b94:	f000 f96e 	bl	8003e74 <getTargetVelocity>
 8003b98:	eef0 7a40 	vmov.f32	s15, s0
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <AngularVelocityCalculation+0x90>)
 8003b9e:	edc3 7a00 	vstr	s15, [r3]

	control_output_omega = (2*control_input_v*sin(Ang_atan_diff())) / Forward_gaze_distance;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <AngularVelocityCalculation+0x90>)
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bac:	ee17 0a90 	vmov	r0, s15
 8003bb0:	f7fc fcca 	bl	8000548 <__aeabi_f2d>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	f7ff ff2a 	bl	8003a10 <Ang_atan_diff>
 8003bbc:	ee10 3a10 	vmov	r3, s0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fc fcc1 	bl	8000548 <__aeabi_f2d>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	ec43 2b10 	vmov	d0, r2, r3
 8003bce:	f007 f927 	bl	800ae20 <sin>
 8003bd2:	ec53 2b10 	vmov	r2, r3, d0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc fd0d 	bl	80005f8 <__aeabi_dmul>
 8003bde:	4603      	mov	r3, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	4618      	mov	r0, r3
 8003be4:	4621      	mov	r1, r4
 8003be6:	a30c      	add	r3, pc, #48	; (adr r3, 8003c18 <AngularVelocityCalculation+0x88>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fe2e 	bl	800084c <__aeabi_ddiv>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	f7fc fff6 	bl	8000be8 <__aeabi_d2f>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <AngularVelocityCalculation+0x94>)
 8003c00:	601a      	str	r2, [r3, #0]

	saveDebug(control_output_omega);
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <AngularVelocityCalculation+0x94>)
 8003c04:	edd3 7a00 	vldr	s15, [r3]
 8003c08:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0c:	f7ff fa28 	bl	8003060 <saveDebug>
}
 8003c10:	bf00      	nop
 8003c12:	eeb0 0a67 	vmov.f32	s0, s15
 8003c16:	bdb0      	pop	{r4, r5, r7, pc}
 8003c18:	eb851eb8 	.word	0xeb851eb8
 8003c1c:	3f9eb851 	.word	0x3f9eb851
 8003c20:	20013f9c 	.word	0x20013f9c
 8003c24:	20013fa0 	.word	0x20013fa0

08003c28 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003c28:	b5b0      	push	{r4, r5, r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 8003c2e:	4b40      	ldr	r3, [pc, #256]	; (8003d30 <calculateVelocityControlFlip+0x108>)
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	4b40      	ldr	r3, [pc, #256]	; (8003d34 <calculateVelocityControlFlip+0x10c>)
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 8003c42:	f000 f8d9 	bl	8003df8 <getCurrentVelocity>
 8003c46:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003c4a:	4b3b      	ldr	r3, [pc, #236]	; (8003d38 <calculateVelocityControlFlip+0x110>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d163      	bne.n	8003d1a <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 8003c52:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <calculateVelocityControlFlip+0x114>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d106      	bne.n	8003c68 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <calculateVelocityControlFlip+0x114>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003c68:	f000 f894 	bl	8003d94 <setvariablespeed>
 8003c6c:	eeb0 7a40 	vmov.f32	s14, s0
 8003c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c78:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c80:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003c8c:	4b2c      	ldr	r3, [pc, #176]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fc fc59 	bl	8000548 <__aeabi_f2d>
 8003c96:	4604      	mov	r4, r0
 8003c98:	460d      	mov	r5, r1
 8003c9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8003c9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca6:	ee17 0a90 	vmov	r0, s15
 8003caa:	f7fc fc4d 	bl	8000548 <__aeabi_f2d>
 8003cae:	a31e      	add	r3, pc, #120	; (adr r3, 8003d28 <calculateVelocityControlFlip+0x100>)
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f7fc fca0 	bl	80005f8 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fae4 	bl	800028c <__adddf3>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f7fc ff8c 	bl	8000be8 <__aeabi_d2f>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003cd4:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003cd8:	ed93 7a00 	vldr	s14, [r3]
 8003cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <calculateVelocityControlFlip+0x11c>)
 8003ce6:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 8003cea:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <calculateVelocityControlFlip+0x120>)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6013      	str	r3, [r2, #0]
		mon_i = i;
 8003cf0:	4b13      	ldr	r3, [pc, #76]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <calculateVelocityControlFlip+0x124>)
 8003cf6:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <calculateVelocityControlFlip+0x118>)
 8003cfa:	ed93 7a00 	vldr	s14, [r3]
 8003cfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d06:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <calculateVelocityControlFlip+0x128>)
 8003d10:	edc3 7a00 	vstr	s15, [r3]
			velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 8003d14:	4a0f      	ldr	r2, [pc, #60]	; (8003d54 <calculateVelocityControlFlip+0x12c>)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6013      	str	r3, [r2, #0]

	}

}
 8003d1a:	bf00      	nop
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bdb0      	pop	{r4, r5, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	f3af 8000 	nop.w
 8003d28:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d2c:	3f50624d 	.word	0x3f50624d
 8003d30:	44bb8000 	.word	0x44bb8000
 8003d34:	469c4000 	.word	0x469c4000
 8003d38:	20013fa4 	.word	0x20013fa4
 8003d3c:	20013fa5 	.word	0x20013fa5
 8003d40:	20013fb4 	.word	0x20013fb4
 8003d44:	20016184 	.word	0x20016184
 8003d48:	20016194 	.word	0x20016194
 8003d4c:	2001618c 	.word	0x2001618c
 8003d50:	20013fa8 	.word	0x20013fa8
 8003d54:	20013fb8 	.word	0x20013fb8

08003d58 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <getVelocityControlTerm+0x18>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	ee07 3a90 	vmov	s15, r3
}
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	20013fa8 	.word	0x20013fa8

08003d74 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003d7e:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <setTargetVelocity+0x1c>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6013      	str	r3, [r2, #0]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	20013fac 	.word	0x20013fac

08003d94 <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003d98:	f7fd fb7e 	bl	8001498 <getspeedcount>
 8003d9c:	eeb0 7a40 	vmov.f32	s14, s0
 8003da0:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <setvariablespeed+0x5c>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dae:	db04      	blt.n	8003dba <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <setvariablespeed+0x5c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <setvariablespeed+0x60>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	e012      	b.n	8003de0 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003dba:	f7fd fb6d 	bl	8001498 <getspeedcount>
 8003dbe:	eeb0 7a40 	vmov.f32	s14, s0
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <setvariablespeed+0x5c>)
 8003dc4:	edd3 7a00 	vldr	s15, [r3]
 8003dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd0:	d506      	bpl.n	8003de0 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 8003dd2:	f7fd fb61 	bl	8001498 <getspeedcount>
 8003dd6:	eef0 7a40 	vmov.f32	s15, s0
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <setvariablespeed+0x60>)
 8003ddc:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <setvariablespeed+0x60>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	ee07 3a90 	vmov	s15, r3
}
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	20013fac 	.word	0x20013fac
 8003df4:	20013fb0 	.word	0x20013fb0

08003df8 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	80fb      	strh	r3, [r7, #6]
 8003e02:	2300      	movs	r3, #0
 8003e04:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003e06:	1d3a      	adds	r2, r7, #4
 8003e08:	1dbb      	adds	r3, r7, #6
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fa61 	bl	80012d4 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	0fda      	lsrs	r2, r3, #31
 8003e20:	4413      	add	r3, r2
 8003e22:	105b      	asrs	r3, r3, #1
 8003e24:	ee07 3a90 	vmov	s15, r3
 8003e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e2c:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7fc fb89 	bl	8000548 <__aeabi_f2d>
 8003e36:	a30d      	add	r3, pc, #52	; (adr r3, 8003e6c <getCurrentVelocity+0x74>)
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f7fc fbdc 	bl	80005f8 <__aeabi_dmul>
 8003e40:	4603      	mov	r3, r0
 8003e42:	460c      	mov	r4, r1
 8003e44:	4618      	mov	r0, r3
 8003e46:	4621      	mov	r1, r4
 8003e48:	f7fc fece 	bl	8000be8 <__aeabi_d2f>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003e50:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <getCurrentVelocity+0x70>)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	ee07 3a90 	vmov	s15, r3
}
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20016188 	.word	0x20016188
 8003e6c:	2df331e5 	.word	0x2df331e5
 8003e70:	3f878fcc 	.word	0x3f878fcc

08003e74 <getTargetVelocity>:

float getTargetVelocity()
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
	return target_velocity;
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <getTargetVelocity+0x18>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	ee07 3a90 	vmov	s15, r3
}
 8003e80:	eeb0 0a67 	vmov.f32	s0, s15
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	20013fac 	.word	0x20013fac

08003e90 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8003e94:	4b05      	ldr	r3, [pc, #20]	; (8003eac <startVelocityControl+0x1c>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <startVelocityControl+0x20>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20013fa4 	.word	0x20013fa4
 8003eb0:	20013fa5 	.word	0x20013fa5

08003eb4 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <stopVelocityControl+0x14>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20013fa4 	.word	0x20013fa4

08003ecc <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <setClearFlagOfVelocityControlI+0x14>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20013fa5 	.word	0x20013fa5

08003ee4 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003eec:	1d39      	adds	r1, r7, #4
 8003eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4803      	ldr	r0, [pc, #12]	; (8003f04 <__io_putchar+0x20>)
 8003ef6:	f006 faee 	bl	800a4d6 <HAL_UART_Transmit>
	return ch;
 8003efa:	687b      	ldr	r3, [r7, #4]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20016294 	.word	0x20016294

08003f08 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d121      	bne.n	8003f5e <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003f1a:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003f22:	6013      	str	r3, [r2, #0]
      timer2++;
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003f2c:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003f2e:	f7fd f8f7 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003f32:	f7fd fb81 	bl	8001638 <updateIMUValue>
      updateAnalogSensor();
 8003f36:	f7fe fbfd 	bl	8002734 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003f3a:	f7fd ff29 	bl	8001d90 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003f3e:	f7ff fe73 	bl	8003c28 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003f42:	f7fd f821 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003f46:	f7fe f8a3 	bl	8002090 <lineTraceFlip>
      runningFlip();
 8003f4a:	f001 fbdf 	bl	800570c <runningFlip>
      motorCtrlFlip();
 8003f4e:	f001 f8fb 	bl	8005148 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003f52:	f001 f95d 	bl	8005210 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003f56:	f001 f9c9 	bl	80052ec <updateSideSensorStatus>

      checkCourseOut();
 8003f5a:	f7fe f971 	bl	8002240 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d106      	bne.n	8003f76 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	4a08      	ldr	r2, [pc, #32]	; (8003f90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003f70:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003f72:	f7fe f9e9 	bl	8002348 <storeAnalogSensorBuffer>

   }
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40001000 	.word	0x40001000
 8003f84:	20016198 	.word	0x20016198
 8003f88:	200161e0 	.word	0x200161e0
 8003f8c:	40001400 	.word	0x40001400
 8003f90:	200163b8 	.word	0x200163b8

08003f94 <init>:

void init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	  initADC();
 8003f98:	f7fe f9c0 	bl	800231c <initADC>
	  initEncoder();
 8003f9c:	f7fd f8a2 	bl	80010e4 <initEncoder>
	  initLog();
 8003fa0:	f7fe ffb0 	bl	8002f04 <initLog>
	  initGyro();
 8003fa4:	f7fd fb38 	bl	8001618 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003fa8:	4809      	ldr	r0, [pc, #36]	; (8003fd0 <init+0x3c>)
 8003faa:	f005 fba2 	bl	80096f2 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003fae:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <init+0x40>)
 8003fb0:	f005 fb9f 	bl	80096f2 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003fb4:	f001 f8b0 	bl	8005118 <initMotor>

	  setLED('R');
 8003fb8:	2052      	movs	r0, #82	; 0x52
 8003fba:	f7fd fc7f 	bl	80018bc <setLED>

	  sensorCalibration();
 8003fbe:	f7fe fdab 	bl	8002b18 <sensorCalibration>

	  HAL_Delay(1000);
 8003fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc6:	f002 fc55 	bl	8006874 <HAL_Delay>

}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20016334 	.word	0x20016334
 8003fd4:	2001641c 	.word	0x2001641c

08003fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fde:	f002 fbd7 	bl	8006790 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fe2:	f000 fb47 	bl	8004674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fe6:	f000 ffd5 	bl	8004f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fea:	f000 ffab 	bl	8004f44 <MX_DMA_Init>
  MX_TIM1_Init();
 8003fee:	f000 fd5b 	bl	8004aa8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003ff2:	f000 fddb 	bl	8004bac <MX_TIM3_Init>
  MX_TIM4_Init();
 8003ff6:	f000 fe2d 	bl	8004c54 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003ffa:	f000 fee9 	bl	8004dd0 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003ffe:	f000 fba3 	bl	8004748 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004002:	f000 fced 	bl	80049e0 <MX_I2C1_Init>
  MX_SPI3_Init();
 8004006:	f000 fd19 	bl	8004a3c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800400a:	f000 ff71 	bl	8004ef0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800400e:	f000 fe75 	bl	8004cfc <MX_TIM6_Init>
  MX_TIM7_Init();
 8004012:	f000 fea9 	bl	8004d68 <MX_TIM7_Init>
  MX_ADC2_Init();
 8004016:	f000 fbf7 	bl	8004808 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800401a:	f7ff ffbb 	bl	8003f94 <init>

  bool running_flag = false;
 800401e:	2300      	movs	r3, #0
 8004020:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004022:	204c      	movs	r0, #76	; 0x4c
 8004024:	f002 faa6 	bl	8006574 <getSwitchStatus>
 8004028:	4603      	mov	r3, r0
 800402a:	2b01      	cmp	r3, #1
 800402c:	d109      	bne.n	8004042 <main+0x6a>
 800402e:	4bc3      	ldr	r3, [pc, #780]	; (800433c <main+0x364>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <main+0x6a>
		  timer = 0;
 8004036:	4bc2      	ldr	r3, [pc, #776]	; (8004340 <main+0x368>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
		  sw = 1;
 800403c:	4bbf      	ldr	r3, [pc, #764]	; (800433c <main+0x364>)
 800403e:	2201      	movs	r2, #1
 8004040:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8004042:	204c      	movs	r0, #76	; 0x4c
 8004044:	f002 fa96 	bl	8006574 <getSwitchStatus>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d10a      	bne.n	8004064 <main+0x8c>
 800404e:	4bbc      	ldr	r3, [pc, #752]	; (8004340 <main+0x368>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b14      	cmp	r3, #20
 8004054:	d906      	bls.n	8004064 <main+0x8c>
 8004056:	4bb9      	ldr	r3, [pc, #740]	; (800433c <main+0x364>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d102      	bne.n	8004064 <main+0x8c>
		  sw = 2;
 800405e:	4bb7      	ldr	r3, [pc, #732]	; (800433c <main+0x364>)
 8004060:	2202      	movs	r2, #2
 8004062:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8004064:	4bb6      	ldr	r3, [pc, #728]	; (8004340 <main+0x368>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b28      	cmp	r3, #40	; 0x28
 800406a:	d906      	bls.n	800407a <main+0xa2>
 800406c:	4bb3      	ldr	r3, [pc, #716]	; (800433c <main+0x364>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <main+0xa2>
		  sw = 0;
 8004074:	4bb1      	ldr	r3, [pc, #708]	; (800433c <main+0x364>)
 8004076:	2200      	movs	r2, #0
 8004078:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 800407a:	204c      	movs	r0, #76	; 0x4c
 800407c:	f002 fa7a 	bl	8006574 <getSwitchStatus>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <main+0xc8>
 8004086:	4bad      	ldr	r3, [pc, #692]	; (800433c <main+0x364>)
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d108      	bne.n	80040a0 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 800408e:	4bad      	ldr	r3, [pc, #692]	; (8004344 <main+0x36c>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	4bab      	ldr	r3, [pc, #684]	; (8004344 <main+0x36c>)
 8004098:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 800409a:	4ba8      	ldr	r3, [pc, #672]	; (800433c <main+0x364>)
 800409c:	2200      	movs	r2, #0
 800409e:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80040a0:	2052      	movs	r0, #82	; 0x52
 80040a2:	f002 fa67 	bl	8006574 <getSwitchStatus>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d109      	bne.n	80040c0 <main+0xe8>
 80040ac:	4ba6      	ldr	r3, [pc, #664]	; (8004348 <main+0x370>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <main+0xe8>
	  	  timer = 0;
 80040b4:	4ba2      	ldr	r3, [pc, #648]	; (8004340 <main+0x368>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 80040ba:	4ba3      	ldr	r3, [pc, #652]	; (8004348 <main+0x370>)
 80040bc:	2201      	movs	r2, #1
 80040be:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 80040c0:	2052      	movs	r0, #82	; 0x52
 80040c2:	f002 fa57 	bl	8006574 <getSwitchStatus>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10a      	bne.n	80040e2 <main+0x10a>
 80040cc:	4b9c      	ldr	r3, [pc, #624]	; (8004340 <main+0x368>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b14      	cmp	r3, #20
 80040d2:	d906      	bls.n	80040e2 <main+0x10a>
 80040d4:	4b9c      	ldr	r3, [pc, #624]	; (8004348 <main+0x370>)
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d102      	bne.n	80040e2 <main+0x10a>
	  	  sw2 = 2;
 80040dc:	4b9a      	ldr	r3, [pc, #616]	; (8004348 <main+0x370>)
 80040de:	2202      	movs	r2, #2
 80040e0:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 80040e2:	4b97      	ldr	r3, [pc, #604]	; (8004340 <main+0x368>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b28      	cmp	r3, #40	; 0x28
 80040e8:	d906      	bls.n	80040f8 <main+0x120>
 80040ea:	4b97      	ldr	r3, [pc, #604]	; (8004348 <main+0x370>)
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <main+0x120>
	  	  sw2 = 0;
 80040f2:	4b95      	ldr	r3, [pc, #596]	; (8004348 <main+0x370>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 80040f8:	2052      	movs	r0, #82	; 0x52
 80040fa:	f002 fa3b 	bl	8006574 <getSwitchStatus>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10c      	bne.n	800411e <main+0x146>
 8004104:	4b90      	ldr	r3, [pc, #576]	; (8004348 <main+0x370>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d108      	bne.n	800411e <main+0x146>
	  	  cnt++;
 800410c:	4b8f      	ldr	r3, [pc, #572]	; (800434c <main+0x374>)
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	3301      	adds	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	4b8d      	ldr	r3, [pc, #564]	; (800434c <main+0x374>)
 8004116:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8004118:	4b8b      	ldr	r3, [pc, #556]	; (8004348 <main+0x370>)
 800411a:	2200      	movs	r2, #0
 800411c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 800411e:	4b8b      	ldr	r3, [pc, #556]	; (800434c <main+0x374>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d902      	bls.n	800412c <main+0x154>
		  cnt = 0;
 8004126:	4b89      	ldr	r3, [pc, #548]	; (800434c <main+0x374>)
 8004128:	2200      	movs	r2, #0
 800412a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 800412c:	4b87      	ldr	r3, [pc, #540]	; (800434c <main+0x374>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00b      	beq.n	800414c <main+0x174>
		  HAL_Delay(1000);
 8004134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004138:	f002 fb9c 	bl	8006874 <HAL_Delay>
		  running_flag = true;
 800413c:	2301      	movs	r3, #1
 800413e:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8004140:	4b83      	ldr	r3, [pc, #524]	; (8004350 <main+0x378>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8004146:	4b81      	ldr	r3, [pc, #516]	; (800434c <main+0x374>)
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	f083 0301 	eor.w	r3, r3, #1
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <main+0x188>
		  stopLineTrace();
 8004158:	f7fe f860 	bl	800221c <stopLineTrace>
		  stopVelocityControl();
 800415c:	f7ff feaa 	bl	8003eb4 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8004160:	f001 fdd2 	bl	8005d08 <getgoalStatus>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <main+0x1a2>
		  running_flag = false;
 800416a:	2300      	movs	r3, #0
 800416c:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 800416e:	4b77      	ldr	r3, [pc, #476]	; (800434c <main+0x374>)
 8004170:	2200      	movs	r2, #0
 8004172:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8004174:	2000      	movs	r0, #0
 8004176:	f001 f89b 	bl	80052b0 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 800417a:	4b72      	ldr	r3, [pc, #456]	; (8004344 <main+0x36c>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	2b0d      	cmp	r3, #13
 8004180:	d902      	bls.n	8004188 <main+0x1b0>
		  soiya = 0;
 8004182:	4b70      	ldr	r3, [pc, #448]	; (8004344 <main+0x36c>)
 8004184:	2200      	movs	r2, #0
 8004186:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8004188:	4b6e      	ldr	r3, [pc, #440]	; (8004344 <main+0x36c>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	2b0d      	cmp	r3, #13
 800418e:	f200 824b 	bhi.w	8004628 <main+0x650>
 8004192:	a201      	add	r2, pc, #4	; (adr r2, 8004198 <main+0x1c0>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041d1 	.word	0x080041d1
 800419c:	080041fd 	.word	0x080041fd
 80041a0:	0800421b 	.word	0x0800421b
 80041a4:	0800425f 	.word	0x0800425f
 80041a8:	080042a3 	.word	0x080042a3
 80041ac:	080042e7 	.word	0x080042e7
 80041b0:	08004369 	.word	0x08004369
 80041b4:	080043bd 	.word	0x080043bd
 80041b8:	08004411 	.word	0x08004411
 80041bc:	08004465 	.word	0x08004465
 80041c0:	080044b9 	.word	0x080044b9
 80041c4:	0800450d 	.word	0x0800450d
 80041c8:	08004561 	.word	0x08004561
 80041cc:	080045b3 	.word	0x080045b3

			  case 0:
				  setLED('W');
 80041d0:	2057      	movs	r0, #87	; 0x57
 80041d2:	f7fd fb73 	bl	80018bc <setLED>
				  setLED2('R');
 80041d6:	2052      	movs	r0, #82	; 0x52
 80041d8:	f7fd fc3e 	bl	8001a58 <setLED2>
				  printf("0\r\n");
 80041dc:	485d      	ldr	r0, [pc, #372]	; (8004354 <main+0x37c>)
 80041de:	f008 ffa9 	bl	800d134 <puts>

				  if(running_flag == true){
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8221 	beq.w	800462c <main+0x654>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 80041ea:	2002      	movs	r0, #2
 80041ec:	f001 f8a8 	bl	8005340 <setRunMode>
					      runningInit();
 80041f0:	f001 fb90 	bl	8005914 <runningInit>
					      soiya = 13;
 80041f4:	4b53      	ldr	r3, [pc, #332]	; (8004344 <main+0x36c>)
 80041f6:	220d      	movs	r2, #13
 80041f8:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 80041fa:	e217      	b.n	800462c <main+0x654>

			  case 1:
				  setLED('G');
 80041fc:	2047      	movs	r0, #71	; 0x47
 80041fe:	f7fd fb5d 	bl	80018bc <setLED>
				  setLED2('G');
 8004202:	2047      	movs	r0, #71	; 0x47
 8004204:	f7fd fc28 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 8210 	beq.w	8004630 <main+0x658>

					  setsuctionMotor(500);
 8004210:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004214:	f001 f84c 	bl	80052b0 <setsuctionMotor>
						  HAL_Delay(1500);

						  running();*/
				  }

				  break;
 8004218:	e20a      	b.n	8004630 <main+0x658>

			  case 2:
				  setLED('Y');
 800421a:	2059      	movs	r0, #89	; 0x59
 800421c:	f7fd fb4e 	bl	80018bc <setLED>
				  setLED2('R');
 8004220:	2052      	movs	r0, #82	; 0x52
 8004222:	f7fd fc19 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8203 	beq.w	8004634 <main+0x65c>
						  //startLineTrace();

					      clearspeedcount();
 800422e:	f7fd f967 	bl	8001500 <clearspeedcount>

					      IMU_average();
 8004232:	f7fd fad5 	bl	80017e0 <IMU_average>

					      setRunMode(1);
 8004236:	2001      	movs	r0, #1
 8004238:	f001 f882 	bl	8005340 <setRunMode>

					      setVelocityRange(1.5, 1.5);
 800423c:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004240:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004244:	f001 fd78 	bl	8005d38 <setVelocityRange>

						  setsuctionMotor(500);
 8004248:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800424c:	f001 f830 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1000);
 8004250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004254:	f002 fb0e 	bl	8006874 <HAL_Delay>

						  running();
 8004258:	f001 f958 	bl	800550c <running>
				  }

				  break;
 800425c:	e1ea      	b.n	8004634 <main+0x65c>

			  case 3:
				  setLED('Y');
 800425e:	2059      	movs	r0, #89	; 0x59
 8004260:	f7fd fb2c 	bl	80018bc <setLED>
				  setLED2('G');
 8004264:	2047      	movs	r0, #71	; 0x47
 8004266:	f7fd fbf7 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800426a:	79fb      	ldrb	r3, [r7, #7]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 81e3 	beq.w	8004638 <main+0x660>
						  //startLineTrace();

						  clearspeedcount();
 8004272:	f7fd f945 	bl	8001500 <clearspeedcount>

						  IMU_average();
 8004276:	f7fd fab3 	bl	80017e0 <IMU_average>

						  setRunMode(1);
 800427a:	2001      	movs	r0, #1
 800427c:	f001 f860 	bl	8005340 <setRunMode>

						  setVelocityRange(2.2, 2.2);
 8004280:	eddf 0a35 	vldr	s1, [pc, #212]	; 8004358 <main+0x380>
 8004284:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004358 <main+0x380>
 8004288:	f001 fd56 	bl	8005d38 <setVelocityRange>

						  setsuctionMotor(500);
 800428c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004290:	f001 f80e 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1000);
 8004294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004298:	f002 faec 	bl	8006874 <HAL_Delay>

						  running();
 800429c:	f001 f936 	bl	800550c <running>
				  }

				  break;
 80042a0:	e1ca      	b.n	8004638 <main+0x660>

			  case 4:
				  setLED('C');
 80042a2:	2043      	movs	r0, #67	; 0x43
 80042a4:	f7fd fb0a 	bl	80018bc <setLED>
				  setLED2('R');
 80042a8:	2052      	movs	r0, #82	; 0x52
 80042aa:	f7fd fbd5 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 81c3 	beq.w	800463c <main+0x664>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80042b6:	f7fd f923 	bl	8001500 <clearspeedcount>

					      IMU_average();
 80042ba:	f7fd fa91 	bl	80017e0 <IMU_average>

					      setRunMode(5);
 80042be:	2005      	movs	r0, #5
 80042c0:	f001 f83e 	bl	8005340 <setRunMode>

					      setVelocityRange(1.5, 1.5);
 80042c4:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80042c8:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80042cc:	f001 fd34 	bl	8005d38 <setVelocityRange>

						  setsuctionMotor(500);
 80042d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042d4:	f000 ffec 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 80042d8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042dc:	f002 faca 	bl	8006874 <HAL_Delay>

						  running();
 80042e0:	f001 f914 	bl	800550c <running>
				  }

				  break;
 80042e4:	e1aa      	b.n	800463c <main+0x664>

			  case 5:
				  setLED('C');
 80042e6:	2043      	movs	r0, #67	; 0x43
 80042e8:	f7fd fae8 	bl	80018bc <setLED>
				  setLED2('G');
 80042ec:	2047      	movs	r0, #71	; 0x47
 80042ee:	f7fd fbb3 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 81a3 	beq.w	8004640 <main+0x668>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80042fa:	f7fd f901 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80042fe:	2002      	movs	r0, #2
 8004300:	f001 f81e 	bl	8005340 <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 8004304:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004308:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800430c:	f001 fd14 	bl	8005d38 <setVelocityRange>
						  setAccDec(7, 3);
 8004310:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004314:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004318:	f001 fd26 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800431c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8004364 <main+0x38c>
 8004320:	f001 fd3a 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 8004324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004328:	f000 ffc2 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 800432c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004330:	f002 faa0 	bl	8006874 <HAL_Delay>

						  running();
 8004334:	f001 f8ea 	bl	800550c <running>
				  }

				  break;
 8004338:	e182      	b.n	8004640 <main+0x668>
 800433a:	bf00      	nop
 800433c:	200163b4 	.word	0x200163b4
 8004340:	20016198 	.word	0x20016198
 8004344:	20013fbe 	.word	0x20013fbe
 8004348:	20013fbc 	.word	0x20013fbc
 800434c:	20016238 	.word	0x20016238
 8004350:	200161e0 	.word	0x200161e0
 8004354:	08010850 	.word	0x08010850
 8004358:	400ccccd 	.word	0x400ccccd
 800435c:	40133333 	.word	0x40133333
 8004360:	40266666 	.word	0x40266666
 8004364:	447a0000 	.word	0x447a0000

			  case 6:
				  setLED('C');
 8004368:	2043      	movs	r0, #67	; 0x43
 800436a:	f7fd faa7 	bl	80018bc <setLED>
				  setLED2('B');
 800436e:	2042      	movs	r0, #66	; 0x42
 8004370:	f7fd fb72 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8164 	beq.w	8004644 <main+0x66c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800437c:	f7fd f8c0 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004380:	2002      	movs	r0, #2
 8004382:	f000 ffdd 	bl	8005340 <setRunMode>


						  setVelocityRange(2.0, 6.0);
 8004386:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800438a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800438e:	f001 fcd3 	bl	8005d38 <setVelocityRange>
						  setAccDec(8, 5);
 8004392:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004396:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800439a:	f001 fce5 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800439e:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 8004364 <main+0x38c>
 80043a2:	f001 fcf9 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 80043a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043aa:	f000 ff81 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 80043ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80043b2:	f002 fa5f 	bl	8006874 <HAL_Delay>

						  running();
 80043b6:	f001 f8a9 	bl	800550c <running>
				  }

				  break;
 80043ba:	e143      	b.n	8004644 <main+0x66c>

			  case 7:
				  setLED('C');
 80043bc:	2043      	movs	r0, #67	; 0x43
 80043be:	f7fd fa7d 	bl	80018bc <setLED>
				  setLED2('W');
 80043c2:	2057      	movs	r0, #87	; 0x57
 80043c4:	f7fd fb48 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 813c 	beq.w	8004648 <main+0x670>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80043d0:	f7fd f896 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80043d4:	2002      	movs	r0, #2
 80043d6:	f000 ffb3 	bl	8005340 <setRunMode>

						  setVelocityRange(2.5, 6.0);
 80043da:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80043de:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80043e2:	f001 fca9 	bl	8005d38 <setVelocityRange>
						  setAccDec(8, 5);
 80043e6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80043ea:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80043ee:	f001 fcbb 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043f2:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 8004364 <main+0x38c>
 80043f6:	f001 fccf 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 80043fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043fe:	f000 ff57 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 8004402:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004406:	f002 fa35 	bl	8006874 <HAL_Delay>

						  running();
 800440a:	f001 f87f 	bl	800550c <running>
				  }

				  break;
 800440e:	e11b      	b.n	8004648 <main+0x670>

			  case 8:
				  setLED('C');
 8004410:	2043      	movs	r0, #67	; 0x43
 8004412:	f7fd fa53 	bl	80018bc <setLED>
				  setLED2('Y');
 8004416:	2059      	movs	r0, #89	; 0x59
 8004418:	f7fd fb1e 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8114 	beq.w	800464c <main+0x674>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004424:	f7fd f86c 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 8004428:	2003      	movs	r0, #3
 800442a:	f000 ff89 	bl	8005340 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 800442e:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004432:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 800435c <main+0x384>
 8004436:	f001 fc7f 	bl	8005d38 <setVelocityRange>
						  setAccDec(7, 4);
 800443a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800443e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004442:	f001 fc91 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004446:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 8004364 <main+0x38c>
 800444a:	f001 fca5 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 800444e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004452:	f000 ff2d 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 8004456:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800445a:	f002 fa0b 	bl	8006874 <HAL_Delay>

						  running();
 800445e:	f001 f855 	bl	800550c <running>
				  }

			  	  break;
 8004462:	e0f3      	b.n	800464c <main+0x674>

			  case 9:
				  setLED('C');
 8004464:	2043      	movs	r0, #67	; 0x43
 8004466:	f7fd fa29 	bl	80018bc <setLED>
				  setLED2('X');
 800446a:	2058      	movs	r0, #88	; 0x58
 800446c:	f7fd faf4 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80ec 	beq.w	8004650 <main+0x678>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004478:	f7fd f842 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 800447c:	2003      	movs	r0, #3
 800447e:	f000 ff5f 	bl	8005340 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004482:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004486:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 800435c <main+0x384>
 800448a:	f001 fc55 	bl	8005d38 <setVelocityRange>
						  setAccDec(8, 6);
 800448e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004492:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004496:	f001 fc67 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800449a:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 8004364 <main+0x38c>
 800449e:	f001 fc7b 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 80044a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044a6:	f000 ff03 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1500);
 80044aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80044ae:	f002 f9e1 	bl	8006874 <HAL_Delay>

						  running();
 80044b2:	f001 f82b 	bl	800550c <running>
				  }

				  break;
 80044b6:	e0cb      	b.n	8004650 <main+0x678>

			  case 10:
				  setLED('C');
 80044b8:	2043      	movs	r0, #67	; 0x43
 80044ba:	f7fd f9ff 	bl	80018bc <setLED>
				  setLED2('V');
 80044be:	2056      	movs	r0, #86	; 0x56
 80044c0:	f7fd faca 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80c4 	beq.w	8004654 <main+0x67c>
						  //startLineTrace();

						  clearspeedcount();
 80044cc:	f7fd f818 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80044d0:	2002      	movs	r0, #2
 80044d2:	f000 ff35 	bl	8005340 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 80044d6:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 80044da:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80044de:	f001 fc2b 	bl	8005d38 <setVelocityRange>
						  setAccDec(7, 4);
 80044e2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80044e6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80044ea:	f001 fc3d 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80044ee:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8004364 <main+0x38c>
 80044f2:	f001 fc51 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 80044f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044fa:	f000 fed9 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1000);
 80044fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004502:	f002 f9b7 	bl	8006874 <HAL_Delay>

						  running();
 8004506:	f001 f801 	bl	800550c <running>
				  }

				  break;
 800450a:	e0a3      	b.n	8004654 <main+0x67c>


			  case 11:
				  setLED('C');
 800450c:	2043      	movs	r0, #67	; 0x43
 800450e:	f7fd f9d5 	bl	80018bc <setLED>
				  setLED2('T');
 8004512:	2054      	movs	r0, #84	; 0x54
 8004514:	f7fd faa0 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 809c 	beq.w	8004658 <main+0x680>
						  //startLineTrace();

						  clearspeedcount();
 8004520:	f7fc ffee 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 8004524:	2003      	movs	r0, #3
 8004526:	f000 ff0b 	bl	8005340 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 800452a:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 800452e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004532:	f001 fc01 	bl	8005d38 <setVelocityRange>
						  setAccDec(10, 5);
 8004536:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800453a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800453e:	f001 fc13 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004542:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 8004364 <main+0x38c>
 8004546:	f001 fc27 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 800454a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800454e:	f000 feaf 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1000);
 8004552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004556:	f002 f98d 	bl	8006874 <HAL_Delay>

						  running();
 800455a:	f000 ffd7 	bl	800550c <running>
				  }

				  break;
 800455e:	e07b      	b.n	8004658 <main+0x680>

			  case 12:
				  setLED('C');
 8004560:	2043      	movs	r0, #67	; 0x43
 8004562:	f7fd f9ab 	bl	80018bc <setLED>
				  setLED2('A');
 8004566:	2041      	movs	r0, #65	; 0x41
 8004568:	f7fd fa76 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d074      	beq.n	800465c <main+0x684>
						  //startLineTrace();

						  clearspeedcount();
 8004572:	f7fc ffc5 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004576:	2002      	movs	r0, #2
 8004578:	f000 fee2 	bl	8005340 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 800457c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004580:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 8004360 <main+0x388>
 8004584:	f001 fbd8 	bl	8005d38 <setVelocityRange>
						  setAccDec(7, 4);
 8004588:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800458c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004590:	f001 fbea 	bl	8005d68 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004594:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 8004364 <main+0x38c>
 8004598:	f001 fbfe 	bl	8005d98 <setStraightRadius>

						  setsuctionMotor(500);
 800459c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045a0:	f000 fe86 	bl	80052b0 <setsuctionMotor>

						  HAL_Delay(1000);
 80045a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045a8:	f002 f964 	bl	8006874 <HAL_Delay>

						  running();
 80045ac:	f000 ffae 	bl	800550c <running>
				  }

				  break;
 80045b0:	e054      	b.n	800465c <main+0x684>

			  case 13:
				  setLED('M');
 80045b2:	204d      	movs	r0, #77	; 0x4d
 80045b4:	f7fd f982 	bl	80018bc <setLED>
				  setLED2('A');
 80045b8:	2041      	movs	r0, #65	; 0x41
 80045ba:	f7fd fa4d 	bl	8001a58 <setLED2>
				  printf("6\r\n");
 80045be:	4829      	ldr	r0, [pc, #164]	; (8004664 <main+0x68c>)
 80045c0:	f008 fdb8 	bl	800d134 <puts>

				  if(running_flag == true){
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d04a      	beq.n	8004660 <main+0x688>
					  loadDistance();
 80045ca:	f7fe fddd 	bl	8003188 <loadDistance>
					  loadTheta();
 80045ce:	f7fe fe19 	bl	8003204 <loadTheta>
					  loadCross();
 80045d2:	f7fe fe55 	bl	8003280 <loadCross>
					  loadSide();
 80045d6:	f7fe fe91 	bl	80032fc <loadSide>
					  loadDebug();
 80045da:	f7fe fecd 	bl	8003378 <loadDebug>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 80045de:	4822      	ldr	r0, [pc, #136]	; (8004668 <main+0x690>)
 80045e0:	f008 fda8 	bl	800d134 <puts>
					  uint16_t size = getDebugLogSize();
 80045e4:	f7fe fdc4 	bl	8003170 <getDebugLogSize>
 80045e8:	4603      	mov	r3, r0
 80045ea:	807b      	strh	r3, [r7, #2]

					  /*for(uint16_t i = 0; i < size; i = i+2){
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
					  }*/
					  for(uint16_t i = 0; i < size; i++){
 80045ec:	2300      	movs	r3, #0
 80045ee:	80bb      	strh	r3, [r7, #4]
 80045f0:	e012      	b.n	8004618 <main+0x640>
						  printf("%f\r\n", getDebugLog(i));
 80045f2:	88bb      	ldrh	r3, [r7, #4]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fe ff53 	bl	80034a0 <getDebugLog>
 80045fa:	ee10 3a10 	vmov	r3, s0
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ffa2 	bl	8000548 <__aeabi_f2d>
 8004604:	4603      	mov	r3, r0
 8004606:	460c      	mov	r4, r1
 8004608:	461a      	mov	r2, r3
 800460a:	4623      	mov	r3, r4
 800460c:	4817      	ldr	r0, [pc, #92]	; (800466c <main+0x694>)
 800460e:	f008 fd1d 	bl	800d04c <iprintf>
					  for(uint16_t i = 0; i < size; i++){
 8004612:	88bb      	ldrh	r3, [r7, #4]
 8004614:	3301      	adds	r3, #1
 8004616:	80bb      	strh	r3, [r7, #4]
 8004618:	88ba      	ldrh	r2, [r7, #4]
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	429a      	cmp	r2, r3
 800461e:	d3e8      	bcc.n	80045f2 <main+0x61a>
					  printf("ang_atan2, now_theta, ang_diff\r\n");
					  for(uint16_t i = 0; i < size; i = i+3){
						 printf("%f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2));
					  }*/

					  printf("9999, 9999\r\n");
 8004620:	4813      	ldr	r0, [pc, #76]	; (8004670 <main+0x698>)
 8004622:	f008 fd87 	bl	800d134 <puts>
				  }

				  break;
 8004626:	e01b      	b.n	8004660 <main+0x688>

			  default:
				  break;
 8004628:	bf00      	nop
 800462a:	e4fa      	b.n	8004022 <main+0x4a>
				  break;
 800462c:	bf00      	nop
 800462e:	e4f8      	b.n	8004022 <main+0x4a>
				  break;
 8004630:	bf00      	nop
 8004632:	e4f6      	b.n	8004022 <main+0x4a>
				  break;
 8004634:	bf00      	nop
 8004636:	e4f4      	b.n	8004022 <main+0x4a>
				  break;
 8004638:	bf00      	nop
 800463a:	e4f2      	b.n	8004022 <main+0x4a>
				  break;
 800463c:	bf00      	nop
 800463e:	e4f0      	b.n	8004022 <main+0x4a>
				  break;
 8004640:	bf00      	nop
 8004642:	e4ee      	b.n	8004022 <main+0x4a>
				  break;
 8004644:	bf00      	nop
 8004646:	e4ec      	b.n	8004022 <main+0x4a>
				  break;
 8004648:	bf00      	nop
 800464a:	e4ea      	b.n	8004022 <main+0x4a>
			  	  break;
 800464c:	bf00      	nop
 800464e:	e4e8      	b.n	8004022 <main+0x4a>
				  break;
 8004650:	bf00      	nop
 8004652:	e4e6      	b.n	8004022 <main+0x4a>
				  break;
 8004654:	bf00      	nop
 8004656:	e4e4      	b.n	8004022 <main+0x4a>
				  break;
 8004658:	bf00      	nop
 800465a:	e4e2      	b.n	8004022 <main+0x4a>
				  break;
 800465c:	bf00      	nop
 800465e:	e4e0      	b.n	8004022 <main+0x4a>
				  break;
 8004660:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004662:	e4de      	b.n	8004022 <main+0x4a>
 8004664:	08010854 	.word	0x08010854
 8004668:	08010858 	.word	0x08010858
 800466c:	0801087c 	.word	0x0801087c
 8004670:	08010884 	.word	0x08010884

08004674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b094      	sub	sp, #80	; 0x50
 8004678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800467a:	f107 0320 	add.w	r3, r7, #32
 800467e:	2230      	movs	r2, #48	; 0x30
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f007 fe9b 	bl	800c3be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004688:	f107 030c 	add.w	r3, r7, #12
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	60da      	str	r2, [r3, #12]
 8004696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004698:	2300      	movs	r3, #0
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <SystemClock_Config+0xcc>)
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	4a27      	ldr	r2, [pc, #156]	; (8004740 <SystemClock_Config+0xcc>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6413      	str	r3, [r2, #64]	; 0x40
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <SystemClock_Config+0xcc>)
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	4b22      	ldr	r3, [pc, #136]	; (8004744 <SystemClock_Config+0xd0>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a21      	ldr	r2, [pc, #132]	; (8004744 <SystemClock_Config+0xd0>)
 80046be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b1f      	ldr	r3, [pc, #124]	; (8004744 <SystemClock_Config+0xd0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046d0:	2302      	movs	r3, #2
 80046d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046d4:	2301      	movs	r3, #1
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046d8:	2310      	movs	r3, #16
 80046da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046dc:	2302      	movs	r3, #2
 80046de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046e0:	2300      	movs	r3, #0
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046e4:	2308      	movs	r3, #8
 80046e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80046e8:	23a8      	movs	r3, #168	; 0xa8
 80046ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046ec:	2302      	movs	r3, #2
 80046ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80046f0:	2304      	movs	r3, #4
 80046f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046f4:	f107 0320 	add.w	r3, r7, #32
 80046f8:	4618      	mov	r0, r3
 80046fa:	f003 fe3f 	bl	800837c <HAL_RCC_OscConfig>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004704:	f000 fd04 	bl	8005110 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004708:	230f      	movs	r3, #15
 800470a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800470c:	2302      	movs	r3, #2
 800470e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800471a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800471e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004720:	f107 030c 	add.w	r3, r7, #12
 8004724:	2105      	movs	r1, #5
 8004726:	4618      	mov	r0, r3
 8004728:	f004 f898 	bl	800885c <HAL_RCC_ClockConfig>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004732:	f000 fced 	bl	8005110 <Error_Handler>
  }
}
 8004736:	bf00      	nop
 8004738:	3750      	adds	r7, #80	; 0x50
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023800 	.word	0x40023800
 8004744:	40007000 	.word	0x40007000

08004748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800474e:	463b      	mov	r3, r7
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800475a:	4b28      	ldr	r3, [pc, #160]	; (80047fc <MX_ADC1_Init+0xb4>)
 800475c:	4a28      	ldr	r2, [pc, #160]	; (8004800 <MX_ADC1_Init+0xb8>)
 800475e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004766:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004768:	4b24      	ldr	r3, [pc, #144]	; (80047fc <MX_ADC1_Init+0xb4>)
 800476a:	2200      	movs	r2, #0
 800476c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004770:	2201      	movs	r2, #1
 8004772:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004774:	4b21      	ldr	r3, [pc, #132]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004776:	2201      	movs	r2, #1
 8004778:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <MX_ADC1_Init+0xb4>)
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004782:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004784:	2200      	movs	r2, #0
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004788:	4b1c      	ldr	r3, [pc, #112]	; (80047fc <MX_ADC1_Init+0xb4>)
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <MX_ADC1_Init+0xbc>)
 800478c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800478e:	4b1b      	ldr	r3, [pc, #108]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004790:	2200      	movs	r2, #0
 8004792:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004794:	4b19      	ldr	r3, [pc, #100]	; (80047fc <MX_ADC1_Init+0xb4>)
 8004796:	2202      	movs	r2, #2
 8004798:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <MX_ADC1_Init+0xb4>)
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047a2:	4b16      	ldr	r3, [pc, #88]	; (80047fc <MX_ADC1_Init+0xb4>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047a8:	4814      	ldr	r0, [pc, #80]	; (80047fc <MX_ADC1_Init+0xb4>)
 80047aa:	f002 f885 	bl	80068b8 <HAL_ADC_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80047b4:	f000 fcac 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80047b8:	230c      	movs	r3, #12
 80047ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80047bc:	2301      	movs	r3, #1
 80047be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80047c0:	2307      	movs	r3, #7
 80047c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047c4:	463b      	mov	r3, r7
 80047c6:	4619      	mov	r1, r3
 80047c8:	480c      	ldr	r0, [pc, #48]	; (80047fc <MX_ADC1_Init+0xb4>)
 80047ca:	f002 f9c9 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80047d4:	f000 fc9c 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80047d8:	230d      	movs	r3, #13
 80047da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80047dc:	2302      	movs	r3, #2
 80047de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047e0:	463b      	mov	r3, r7
 80047e2:	4619      	mov	r1, r3
 80047e4:	4805      	ldr	r0, [pc, #20]	; (80047fc <MX_ADC1_Init+0xb4>)
 80047e6:	f002 f9bb 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80047f0:	f000 fc8e 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200160f0 	.word	0x200160f0
 8004800:	40012000 	.word	0x40012000
 8004804:	0f000001 	.word	0x0f000001

08004808 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800480e:	463b      	mov	r3, r7
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	605a      	str	r2, [r3, #4]
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800481a:	4b6e      	ldr	r3, [pc, #440]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800481c:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <MX_ADC2_Init+0x1d0>)
 800481e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004820:	4b6c      	ldr	r3, [pc, #432]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004826:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004828:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800482a:	2200      	movs	r2, #0
 800482c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800482e:	4b69      	ldr	r3, [pc, #420]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004830:	2201      	movs	r2, #1
 8004832:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004834:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004836:	2201      	movs	r2, #1
 8004838:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800483a:	4b66      	ldr	r3, [pc, #408]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004842:	4b64      	ldr	r3, [pc, #400]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004844:	2200      	movs	r2, #0
 8004846:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004848:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800484a:	4a64      	ldr	r2, [pc, #400]	; (80049dc <MX_ADC2_Init+0x1d4>)
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800484e:	4b61      	ldr	r3, [pc, #388]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004850:	2200      	movs	r2, #0
 8004852:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004854:	4b5f      	ldr	r3, [pc, #380]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004856:	220c      	movs	r2, #12
 8004858:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800485a:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004862:	4b5c      	ldr	r3, [pc, #368]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004864:	2201      	movs	r2, #1
 8004866:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004868:	485a      	ldr	r0, [pc, #360]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800486a:	f002 f825 	bl	80068b8 <HAL_ADC_Init>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004874:	f000 fc4c 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004878:	2300      	movs	r3, #0
 800487a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800487c:	2301      	movs	r3, #1
 800487e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004880:	2307      	movs	r3, #7
 8004882:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004884:	463b      	mov	r3, r7
 8004886:	4619      	mov	r1, r3
 8004888:	4852      	ldr	r0, [pc, #328]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800488a:	f002 f969 	bl	8006b60 <HAL_ADC_ConfigChannel>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004894:	f000 fc3c 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004898:	2301      	movs	r3, #1
 800489a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800489c:	2302      	movs	r3, #2
 800489e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048a0:	463b      	mov	r3, r7
 80048a2:	4619      	mov	r1, r3
 80048a4:	484b      	ldr	r0, [pc, #300]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80048a6:	f002 f95b 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80048b0:	f000 fc2e 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80048b4:	2302      	movs	r3, #2
 80048b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80048b8:	2303      	movs	r3, #3
 80048ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048bc:	463b      	mov	r3, r7
 80048be:	4619      	mov	r1, r3
 80048c0:	4844      	ldr	r0, [pc, #272]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80048c2:	f002 f94d 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80048cc:	f000 fc20 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80048d0:	2303      	movs	r3, #3
 80048d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80048d4:	2304      	movs	r3, #4
 80048d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048d8:	463b      	mov	r3, r7
 80048da:	4619      	mov	r1, r3
 80048dc:	483d      	ldr	r0, [pc, #244]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80048de:	f002 f93f 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80048e8:	f000 fc12 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80048ec:	2304      	movs	r3, #4
 80048ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80048f0:	2305      	movs	r3, #5
 80048f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048f4:	463b      	mov	r3, r7
 80048f6:	4619      	mov	r1, r3
 80048f8:	4836      	ldr	r0, [pc, #216]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80048fa:	f002 f931 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004904:	f000 fc04 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004908:	2305      	movs	r3, #5
 800490a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800490c:	2306      	movs	r3, #6
 800490e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004910:	463b      	mov	r3, r7
 8004912:	4619      	mov	r1, r3
 8004914:	482f      	ldr	r0, [pc, #188]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004916:	f002 f923 	bl	8006b60 <HAL_ADC_ConfigChannel>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004920:	f000 fbf6 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004924:	2306      	movs	r3, #6
 8004926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004928:	2307      	movs	r3, #7
 800492a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800492c:	463b      	mov	r3, r7
 800492e:	4619      	mov	r1, r3
 8004930:	4828      	ldr	r0, [pc, #160]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004932:	f002 f915 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800493c:	f000 fbe8 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004940:	2307      	movs	r3, #7
 8004942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004944:	2308      	movs	r3, #8
 8004946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004948:	463b      	mov	r3, r7
 800494a:	4619      	mov	r1, r3
 800494c:	4821      	ldr	r0, [pc, #132]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800494e:	f002 f907 	bl	8006b60 <HAL_ADC_ConfigChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004958:	f000 fbda 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800495c:	2308      	movs	r3, #8
 800495e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004960:	2309      	movs	r3, #9
 8004962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004964:	463b      	mov	r3, r7
 8004966:	4619      	mov	r1, r3
 8004968:	481a      	ldr	r0, [pc, #104]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 800496a:	f002 f8f9 	bl	8006b60 <HAL_ADC_ConfigChannel>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004974:	f000 fbcc 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004978:	2309      	movs	r3, #9
 800497a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800497c:	230a      	movs	r3, #10
 800497e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004980:	463b      	mov	r3, r7
 8004982:	4619      	mov	r1, r3
 8004984:	4813      	ldr	r0, [pc, #76]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 8004986:	f002 f8eb 	bl	8006b60 <HAL_ADC_ConfigChannel>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004990:	f000 fbbe 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004994:	230e      	movs	r3, #14
 8004996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004998:	230b      	movs	r3, #11
 800499a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800499c:	463b      	mov	r3, r7
 800499e:	4619      	mov	r1, r3
 80049a0:	480c      	ldr	r0, [pc, #48]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80049a2:	f002 f8dd 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80049ac:	f000 fbb0 	bl	8005110 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80049b0:	230f      	movs	r3, #15
 80049b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80049b4:	230c      	movs	r3, #12
 80049b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049b8:	463b      	mov	r3, r7
 80049ba:	4619      	mov	r1, r3
 80049bc:	4805      	ldr	r0, [pc, #20]	; (80049d4 <MX_ADC2_Init+0x1cc>)
 80049be:	f002 f8cf 	bl	8006b60 <HAL_ADC_ConfigChannel>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80049c8:	f000 fba2 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	200160a0 	.word	0x200160a0
 80049d8:	40012100 	.word	0x40012100
 80049dc:	0f000001 	.word	0x0f000001

080049e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80049e4:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <MX_I2C1_Init+0x50>)
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <MX_I2C1_Init+0x54>)
 80049e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <MX_I2C1_Init+0x50>)
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <MX_I2C1_Init+0x58>)
 80049ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <MX_I2C1_Init+0x50>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <MX_I2C1_Init+0x50>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049fc:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <MX_I2C1_Init+0x50>)
 80049fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <MX_I2C1_Init+0x50>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a0a:	4b09      	ldr	r3, [pc, #36]	; (8004a30 <MX_I2C1_Init+0x50>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <MX_I2C1_Init+0x50>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <MX_I2C1_Init+0x50>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004a1c:	4804      	ldr	r0, [pc, #16]	; (8004a30 <MX_I2C1_Init+0x50>)
 8004a1e:	f003 fb75 	bl	800810c <HAL_I2C_Init>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004a28:	f000 fb72 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004a2c:	bf00      	nop
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	200161e4 	.word	0x200161e4
 8004a34:	40005400 	.word	0x40005400
 8004a38:	000186a0 	.word	0x000186a0

08004a3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a42:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <MX_SPI3_Init+0x68>)
 8004a44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a46:	4b16      	ldr	r3, [pc, #88]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a60:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a70:	2228      	movs	r2, #40	; 0x28
 8004a72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a7a:	4b09      	ldr	r3, [pc, #36]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a88:	220a      	movs	r2, #10
 8004a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004a8c:	4804      	ldr	r0, [pc, #16]	; (8004aa0 <MX_SPI3_Init+0x64>)
 8004a8e:	f004 f8b1 	bl	8008bf4 <HAL_SPI_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004a98:	f000 fb3a 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	2001623c 	.word	0x2001623c
 8004aa4:	40003c00 	.word	0x40003c00

08004aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b092      	sub	sp, #72	; 0x48
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
 8004ac8:	615a      	str	r2, [r3, #20]
 8004aca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	2220      	movs	r2, #32
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f007 fc73 	bl	800c3be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004ada:	4a33      	ldr	r2, [pc, #204]	; (8004ba8 <MX_TIM1_Init+0x100>)
 8004adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004ade:	4b31      	ldr	r3, [pc, #196]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004aea:	4b2e      	ldr	r3, [pc, #184]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004aec:	f240 3247 	movw	r2, #839	; 0x347
 8004af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004af2:	4b2c      	ldr	r3, [pc, #176]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004afe:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b04:	4827      	ldr	r0, [pc, #156]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b06:	f004 fe18 	bl	800973a <HAL_TIM_PWM_Init>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004b10:	f000 fafe 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b14:	2300      	movs	r3, #0
 8004b16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b20:	4619      	mov	r1, r3
 8004b22:	4820      	ldr	r0, [pc, #128]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b24:	f005 fba8 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004b2e:	f000 faef 	bl	8005110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b32:	2360      	movs	r3, #96	; 0x60
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004b42:	2300      	movs	r3, #0
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b4e:	220c      	movs	r2, #12
 8004b50:	4619      	mov	r1, r3
 8004b52:	4814      	ldr	r0, [pc, #80]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b54:	f005 f82c 	bl	8009bb0 <HAL_TIM_PWM_ConfigChannel>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004b5e:	f000 fad7 	bl	8005110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b86:	f005 fbf3 	bl	800a370 <HAL_TIMEx_ConfigBreakDeadTime>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004b90:	f000 fabe 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004b94:	4803      	ldr	r0, [pc, #12]	; (8004ba4 <MX_TIM1_Init+0xfc>)
 8004b96:	f001 fbef 	bl	8006378 <HAL_TIM_MspPostInit>

}
 8004b9a:	bf00      	nop
 8004b9c:	3748      	adds	r7, #72	; 0x48
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20016374 	.word	0x20016374
 8004ba8:	40010000 	.word	0x40010000

08004bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004bb2:	f107 030c 	add.w	r3, r7, #12
 8004bb6:	2224      	movs	r2, #36	; 0x24
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f007 fbff 	bl	800c3be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004bc8:	4b20      	ldr	r3, [pc, #128]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <MX_TIM3_Init+0xa4>)
 8004bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004bda:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004be8:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c06:	2301      	movs	r3, #1
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004c12:	f107 030c 	add.w	r3, r7, #12
 8004c16:	4619      	mov	r1, r3
 8004c18:	480c      	ldr	r0, [pc, #48]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004c1a:	f004 fdf7 	bl	800980c <HAL_TIM_Encoder_Init>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004c24:	f000 fa74 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c30:	1d3b      	adds	r3, r7, #4
 8004c32:	4619      	mov	r1, r3
 8004c34:	4805      	ldr	r0, [pc, #20]	; (8004c4c <MX_TIM3_Init+0xa0>)
 8004c36:	f005 fb1f 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004c40:	f000 fa66 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004c44:	bf00      	nop
 8004c46:	3730      	adds	r7, #48	; 0x30
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20016048 	.word	0x20016048
 8004c50:	40000400 	.word	0x40000400

08004c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c5a:	f107 030c 	add.w	r3, r7, #12
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f007 fbab 	bl	800c3be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c68:	1d3b      	adds	r3, r7, #4
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004c70:	4b20      	ldr	r3, [pc, #128]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c72:	4a21      	ldr	r2, [pc, #132]	; (8004cf8 <MX_TIM4_Init+0xa4>)
 8004c74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004c76:	4b1f      	ldr	r3, [pc, #124]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c90:	4b18      	ldr	r3, [pc, #96]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004caa:	2300      	movs	r3, #0
 8004cac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004cc2:	f004 fda3 	bl	800980c <HAL_TIM_Encoder_Init>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004ccc:	f000 fa20 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004cd8:	1d3b      	adds	r3, r7, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4805      	ldr	r0, [pc, #20]	; (8004cf4 <MX_TIM4_Init+0xa0>)
 8004cde:	f005 facb 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004ce8:	f000 fa12 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004cec:	bf00      	nop
 8004cee:	3730      	adds	r7, #48	; 0x30
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20016008 	.word	0x20016008
 8004cf8:	40000800 	.word	0x40000800

08004cfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d02:	463b      	mov	r3, r7
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d0c:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <MX_TIM6_Init+0x68>)
 8004d0e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004d10:	4b13      	ldr	r3, [pc, #76]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d12:	2253      	movs	r2, #83	; 0x53
 8004d14:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d16:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d1e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d22:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d24:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004d2a:	480d      	ldr	r0, [pc, #52]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d2c:	f004 fcb6 	bl	800969c <HAL_TIM_Base_Init>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004d36:	f000 f9eb 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004d42:	463b      	mov	r3, r7
 8004d44:	4619      	mov	r1, r3
 8004d46:	4806      	ldr	r0, [pc, #24]	; (8004d60 <MX_TIM6_Init+0x64>)
 8004d48:	f005 fa96 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004d52:	f000 f9dd 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20016334 	.word	0x20016334
 8004d64:	40001000 	.word	0x40001000

08004d68 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d6e:	463b      	mov	r3, r7
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d78:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <MX_TIM7_Init+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d7e:	2253      	movs	r2, #83	; 0x53
 8004d80:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d82:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d8a:	2263      	movs	r2, #99	; 0x63
 8004d8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d94:	480c      	ldr	r0, [pc, #48]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004d96:	f004 fc81 	bl	800969c <HAL_TIM_Base_Init>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004da0:	f000 f9b6 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004dac:	463b      	mov	r3, r7
 8004dae:	4619      	mov	r1, r3
 8004db0:	4805      	ldr	r0, [pc, #20]	; (8004dc8 <MX_TIM7_Init+0x60>)
 8004db2:	f005 fa61 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004dbc:	f000 f9a8 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2001641c 	.word	0x2001641c
 8004dcc:	40001400 	.word	0x40001400

08004dd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b092      	sub	sp, #72	; 0x48
 8004dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	605a      	str	r2, [r3, #4]
 8004dea:	609a      	str	r2, [r3, #8]
 8004dec:	60da      	str	r2, [r3, #12]
 8004dee:	611a      	str	r2, [r3, #16]
 8004df0:	615a      	str	r2, [r3, #20]
 8004df2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	2220      	movs	r2, #32
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f007 fadf 	bl	800c3be <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e00:	4b39      	ldr	r3, [pc, #228]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e02:	4a3a      	ldr	r2, [pc, #232]	; (8004eec <MX_TIM8_Init+0x11c>)
 8004e04:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004e06:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e08:	2203      	movs	r2, #3
 8004e0a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004e12:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e14:	f240 628f 	movw	r2, #1679	; 0x68f
 8004e18:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e1a:	4b33      	ldr	r3, [pc, #204]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e26:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004e2c:	482e      	ldr	r0, [pc, #184]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e2e:	f004 fc84 	bl	800973a <HAL_TIM_PWM_Init>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004e38:	f000 f96a 	bl	8005110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e40:	2300      	movs	r3, #0
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4827      	ldr	r0, [pc, #156]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e4c:	f005 fa14 	bl	800a278 <HAL_TIMEx_MasterConfigSynchronization>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004e56:	f000 f95b 	bl	8005110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e5a:	2360      	movs	r3, #96	; 0x60
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e66:	2300      	movs	r3, #0
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	481a      	ldr	r0, [pc, #104]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e80:	f004 fe96 	bl	8009bb0 <HAL_TIM_PWM_ConfigChannel>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004e8a:	f000 f941 	bl	8005110 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e92:	2208      	movs	r2, #8
 8004e94:	4619      	mov	r1, r3
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004e98:	f004 fe8a 	bl	8009bb0 <HAL_TIM_PWM_ConfigChannel>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d001      	beq.n	8004ea6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004ea2:	f000 f935 	bl	8005110 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ebe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004ec4:	1d3b      	adds	r3, r7, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004eca:	f005 fa51 	bl	800a370 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004ed4:	f000 f91c 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004ed8:	4803      	ldr	r0, [pc, #12]	; (8004ee8 <MX_TIM8_Init+0x118>)
 8004eda:	f001 fa4d 	bl	8006378 <HAL_TIM_MspPostInit>

}
 8004ede:	bf00      	nop
 8004ee0:	3748      	adds	r7, #72	; 0x48
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	2001619c 	.word	0x2001619c
 8004eec:	40010400 	.word	0x40010400

08004ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004ef6:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <MX_USART1_UART_Init+0x50>)
 8004ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004efc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f08:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f0e:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f16:	220c      	movs	r2, #12
 8004f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1a:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004f26:	4805      	ldr	r0, [pc, #20]	; (8004f3c <MX_USART1_UART_Init+0x4c>)
 8004f28:	f005 fa88 	bl	800a43c <HAL_UART_Init>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004f32:	f000 f8ed 	bl	8005110 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20016294 	.word	0x20016294
 8004f40:	40011000 	.word	0x40011000

08004f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	607b      	str	r3, [r7, #4]
 8004f4e:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <MX_DMA_Init+0x4c>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <MX_DMA_Init+0x4c>)
 8004f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f58:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5a:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <MX_DMA_Init+0x4c>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004f66:	2200      	movs	r2, #0
 8004f68:	2100      	movs	r1, #0
 8004f6a:	2038      	movs	r0, #56	; 0x38
 8004f6c:	f002 f973 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004f70:	2038      	movs	r0, #56	; 0x38
 8004f72:	f002 f98c 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	203a      	movs	r0, #58	; 0x3a
 8004f7c:	f002 f96b 	bl	8007256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004f80:	203a      	movs	r0, #58	; 0x3a
 8004f82:	f002 f984 	bl	800728e <HAL_NVIC_EnableIRQ>

}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9a:	f107 0314 	add.w	r3, r7, #20
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
 8004fa6:	60da      	str	r2, [r3, #12]
 8004fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	4b53      	ldr	r3, [pc, #332]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	4a52      	ldr	r2, [pc, #328]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fb4:	f043 0304 	orr.w	r3, r3, #4
 8004fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fba:	4b50      	ldr	r3, [pc, #320]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4a4b      	ldr	r2, [pc, #300]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd6:	4b49      	ldr	r3, [pc, #292]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	4b45      	ldr	r3, [pc, #276]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	4a44      	ldr	r2, [pc, #272]	; (80050fc <MX_GPIO_Init+0x168>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff2:	4b42      	ldr	r3, [pc, #264]	; (80050fc <MX_GPIO_Init+0x168>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <MX_GPIO_Init+0x168>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	4a3d      	ldr	r2, [pc, #244]	; (80050fc <MX_GPIO_Init+0x168>)
 8005008:	f043 0302 	orr.w	r3, r3, #2
 800500c:	6313      	str	r3, [r2, #48]	; 0x30
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <MX_GPIO_Init+0x168>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	603b      	str	r3, [r7, #0]
 800501e:	4b37      	ldr	r3, [pc, #220]	; (80050fc <MX_GPIO_Init+0x168>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	4a36      	ldr	r2, [pc, #216]	; (80050fc <MX_GPIO_Init+0x168>)
 8005024:	f043 0308 	orr.w	r3, r3, #8
 8005028:	6313      	str	r3, [r2, #48]	; 0x30
 800502a:	4b34      	ldr	r3, [pc, #208]	; (80050fc <MX_GPIO_Init+0x168>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	603b      	str	r3, [r7, #0]
 8005034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8005036:	2200      	movs	r2, #0
 8005038:	f24e 2180 	movw	r1, #57984	; 0xe280
 800503c:	4830      	ldr	r0, [pc, #192]	; (8005100 <MX_GPIO_Init+0x16c>)
 800503e:	f003 f84b 	bl	80080d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005042:	2200      	movs	r2, #0
 8005044:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8005048:	482e      	ldr	r0, [pc, #184]	; (8005104 <MX_GPIO_Init+0x170>)
 800504a:	f003 f845 	bl	80080d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800504e:	2200      	movs	r2, #0
 8005050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005054:	482c      	ldr	r0, [pc, #176]	; (8005108 <MX_GPIO_Init+0x174>)
 8005056:	f003 f83f 	bl	80080d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800505a:	2200      	movs	r2, #0
 800505c:	2104      	movs	r1, #4
 800505e:	482b      	ldr	r0, [pc, #172]	; (800510c <MX_GPIO_Init+0x178>)
 8005060:	f003 f83a 	bl	80080d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8005064:	f24e 2380 	movw	r3, #57984	; 0xe280
 8005068:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800506a:	2301      	movs	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005072:	2300      	movs	r3, #0
 8005074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005076:	f107 0314 	add.w	r3, r7, #20
 800507a:	4619      	mov	r1, r3
 800507c:	4820      	ldr	r0, [pc, #128]	; (8005100 <MX_GPIO_Init+0x16c>)
 800507e:	f002 fe79 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005082:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8005086:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005088:	2301      	movs	r3, #1
 800508a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005090:	2300      	movs	r3, #0
 8005092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005094:	f107 0314 	add.w	r3, r7, #20
 8005098:	4619      	mov	r1, r3
 800509a:	481a      	ldr	r0, [pc, #104]	; (8005104 <MX_GPIO_Init+0x170>)
 800509c:	f002 fe6a 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80050a0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80050a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	4619      	mov	r1, r3
 80050b4:	4814      	ldr	r0, [pc, #80]	; (8005108 <MX_GPIO_Init+0x174>)
 80050b6:	f002 fe5d 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80050ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c0:	2301      	movs	r3, #1
 80050c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	4619      	mov	r1, r3
 80050d2:	480d      	ldr	r0, [pc, #52]	; (8005108 <MX_GPIO_Init+0x174>)
 80050d4:	f002 fe4e 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050d8:	2304      	movs	r3, #4
 80050da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050dc:	2301      	movs	r3, #1
 80050de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e4:	2300      	movs	r3, #0
 80050e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050e8:	f107 0314 	add.w	r3, r7, #20
 80050ec:	4619      	mov	r1, r3
 80050ee:	4807      	ldr	r0, [pc, #28]	; (800510c <MX_GPIO_Init+0x178>)
 80050f0:	f002 fe40 	bl	8007d74 <HAL_GPIO_Init>

}
 80050f4:	bf00      	nop
 80050f6:	3728      	adds	r7, #40	; 0x28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020800 	.word	0x40020800
 8005104:	40020400 	.word	0x40020400
 8005108:	40020000 	.word	0x40020000
 800510c:	40020c00 	.word	0x40020c00

08005110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005114:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005116:	e7fe      	b.n	8005116 <Error_Handler+0x6>

08005118 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 800511c:	2100      	movs	r1, #0
 800511e:	4808      	ldr	r0, [pc, #32]	; (8005140 <initMotor+0x28>)
 8005120:	f004 fb36 	bl	8009790 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8005124:	2108      	movs	r1, #8
 8005126:	4806      	ldr	r0, [pc, #24]	; (8005140 <initMotor+0x28>)
 8005128:	f004 fb32 	bl	8009790 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800512c:	210c      	movs	r1, #12
 800512e:	4805      	ldr	r0, [pc, #20]	; (8005144 <initMotor+0x2c>)
 8005130:	f004 fb2e 	bl	8009790 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8005134:	2064      	movs	r0, #100	; 0x64
 8005136:	f001 fb9d 	bl	8006874 <HAL_Delay>
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2001619c 	.word	0x2001619c
 8005144:	20016374 	.word	0x20016374

08005148 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800514e:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <motorCtrlFlip+0xb0>)
 8005150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005154:	2b00      	cmp	r3, #0
 8005156:	db0d      	blt.n	8005174 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8005158:	4b27      	ldr	r3, [pc, #156]	; (80051f8 <motorCtrlFlip+0xb0>)
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800515e:	4b27      	ldr	r3, [pc, #156]	; (80051fc <motorCtrlFlip+0xb4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005166:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005168:	2200      	movs	r2, #0
 800516a:	2180      	movs	r1, #128	; 0x80
 800516c:	4824      	ldr	r0, [pc, #144]	; (8005200 <motorCtrlFlip+0xb8>)
 800516e:	f002 ffb3 	bl	80080d8 <HAL_GPIO_WritePin>
 8005172:	e010      	b.n	8005196 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8005174:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <motorCtrlFlip+0xb0>)
 8005176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800517a:	b29b      	uxth	r3, r3
 800517c:	425b      	negs	r3, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8005182:	4b1e      	ldr	r3, [pc, #120]	; (80051fc <motorCtrlFlip+0xb4>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800518a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800518c:	2201      	movs	r2, #1
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	481b      	ldr	r0, [pc, #108]	; (8005200 <motorCtrlFlip+0xb8>)
 8005192:	f002 ffa1 	bl	80080d8 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8005196:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <motorCtrlFlip+0xbc>)
 8005198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db0e      	blt.n	80051be <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <motorCtrlFlip+0xbc>)
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80051a6:	4b15      	ldr	r3, [pc, #84]	; (80051fc <motorCtrlFlip+0xb4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80051b0:	2200      	movs	r2, #0
 80051b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051b6:	4812      	ldr	r0, [pc, #72]	; (8005200 <motorCtrlFlip+0xb8>)
 80051b8:	f002 ff8e 	bl	80080d8 <HAL_GPIO_WritePin>
 80051bc:	e011      	b.n	80051e2 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <motorCtrlFlip+0xbc>)
 80051c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	425b      	negs	r3, r3
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <motorCtrlFlip+0xb4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80051d4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80051d6:	2201      	movs	r2, #1
 80051d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051dc:	4808      	ldr	r0, [pc, #32]	; (8005200 <motorCtrlFlip+0xb8>)
 80051de:	f002 ff7b 	bl	80080d8 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <motorCtrlFlip+0xc0>)
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80051e8:	4a08      	ldr	r2, [pc, #32]	; (800520c <motorCtrlFlip+0xc4>)
 80051ea:	88bb      	ldrh	r3, [r7, #4]
 80051ec:	8013      	strh	r3, [r2, #0]
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20013fc0 	.word	0x20013fc0
 80051fc:	2001619c 	.word	0x2001619c
 8005200:	40020800 	.word	0x40020800
 8005204:	20013fc2 	.word	0x20013fc2
 8005208:	20016460 	.word	0x20016460
 800520c:	2001645e 	.word	0x2001645e

08005210 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <suctionmotorCtrlFlip+0x1c>)
 8005216:	f9b3 2000 	ldrsh.w	r2, [r3]
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <suctionmotorCtrlFlip+0x20>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20013fc4 	.word	0x20013fc4
 8005230:	20016374 	.word	0x20016374

08005234 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	460a      	mov	r2, r1
 800523e:	80fb      	strh	r3, [r7, #6]
 8005240:	4613      	mov	r3, r2
 8005242:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8005244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005248:	f240 628e 	movw	r2, #1678	; 0x68e
 800524c:	4293      	cmp	r3, r2
 800524e:	dd03      	ble.n	8005258 <setMotor+0x24>
 8005250:	f240 638f 	movw	r3, #1679	; 0x68f
 8005254:	80fb      	strh	r3, [r7, #6]
 8005256:	e007      	b.n	8005268 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8005258:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800525c:	4a11      	ldr	r2, [pc, #68]	; (80052a4 <setMotor+0x70>)
 800525e:	4293      	cmp	r3, r2
 8005260:	da02      	bge.n	8005268 <setMotor+0x34>
 8005262:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005266:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8005268:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800526c:	f240 628e 	movw	r2, #1678	; 0x68e
 8005270:	4293      	cmp	r3, r2
 8005272:	dd03      	ble.n	800527c <setMotor+0x48>
 8005274:	f240 638f 	movw	r3, #1679	; 0x68f
 8005278:	80bb      	strh	r3, [r7, #4]
 800527a:	e007      	b.n	800528c <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 800527c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005280:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <setMotor+0x70>)
 8005282:	4293      	cmp	r3, r2
 8005284:	da02      	bge.n	800528c <setMotor+0x58>
 8005286:	f64f 1371 	movw	r3, #63857	; 0xf971
 800528a:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 800528c:	4a06      	ldr	r2, [pc, #24]	; (80052a8 <setMotor+0x74>)
 800528e:	88fb      	ldrh	r3, [r7, #6]
 8005290:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8005292:	4a06      	ldr	r2, [pc, #24]	; (80052ac <setMotor+0x78>)
 8005294:	88bb      	ldrh	r3, [r7, #4]
 8005296:	8013      	strh	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	fffff972 	.word	0xfffff972
 80052a8:	20013fc0 	.word	0x20013fc0
 80052ac:	20013fc2 	.word	0x20013fc2

080052b0 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 80052ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfb8      	it	lt
 80052c2:	425b      	neglt	r3, r3
 80052c4:	b21a      	sxth	r2, r3
 80052c6:	4b08      	ldr	r3, [pc, #32]	; (80052e8 <setsuctionMotor+0x38>)
 80052c8:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 80052ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052ce:	f240 3246 	movw	r2, #838	; 0x346
 80052d2:	4293      	cmp	r3, r2
 80052d4:	dd02      	ble.n	80052dc <setsuctionMotor+0x2c>
 80052d6:	f240 3347 	movw	r3, #839	; 0x347
 80052da:	80fb      	strh	r3, [r7, #6]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	20013fc4 	.word	0x20013fc4

080052ec <updateSideSensorStatus>:

static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;

void updateSideSensorStatus(){
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 80052f0:	4b0f      	ldr	r3, [pc, #60]	; (8005330 <updateSideSensorStatus+0x44>)
 80052f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052fa:	dc03      	bgt.n	8005304 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <updateSideSensorStatus+0x48>)
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e002      	b.n	800530a <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <updateSideSensorStatus+0x48>)
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 800530a:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <updateSideSensorStatus+0x4c>)
 800530c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005310:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005314:	dc03      	bgt.n	800531e <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8005316:	4b09      	ldr	r3, [pc, #36]	; (800533c <updateSideSensorStatus+0x50>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 800531c:	e002      	b.n	8005324 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 800531e:	4b07      	ldr	r3, [pc, #28]	; (800533c <updateSideSensorStatus+0x50>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20015fd0 	.word	0x20015fd0
 8005334:	20015f14 	.word	0x20015f14
 8005338:	20015f58 	.word	0x20015f58
 800533c:	20015f15 	.word	0x20015f15

08005340 <setRunMode>:

void setRunMode(uint16_t num){
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	80fb      	strh	r3, [r7, #6]
	mode = num;
 800534a:	4a04      	ldr	r2, [pc, #16]	; (800535c <setRunMode+0x1c>)
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	8013      	strh	r3, [r2, #0]
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	20016468 	.word	0x20016468

08005360 <isCrossLine>:

bool isCrossLine()
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <isCrossLine+0x88>)
 8005368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800536c:	ee07 3a90 	vmov	s15, r3
 8005370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005374:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <isCrossLine+0x88>)
 800537a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005386:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 800538a:	edd7 7a01 	vldr	s15, [r7, #4]
 800538e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80053ec <isCrossLine+0x8c>
 8005392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539a:	d50f      	bpl.n	80053bc <isCrossLine+0x5c>
 800539c:	edd7 7a00 	vldr	s15, [r7]
 80053a0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80053ec <isCrossLine+0x8c>
 80053a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ac:	d506      	bpl.n	80053bc <isCrossLine+0x5c>
		cnt++;
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <isCrossLine+0x90>)
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <isCrossLine+0x90>)
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <isCrossLine+0x90>)
 80053be:	2200      	movs	r2, #0
 80053c0:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <isCrossLine+0x90>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d903      	bls.n	80053d2 <isCrossLine+0x72>
		flag = true;
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <isCrossLine+0x94>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	e002      	b.n	80053d8 <isCrossLine+0x78>
	}
	else{
		flag = false;
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <isCrossLine+0x94>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <isCrossLine+0x94>)
 80053da:	781b      	ldrb	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20015fb4 	.word	0x20015fb4
 80053ec:	442f0000 	.word	0x442f0000
 80053f0:	20015f34 	.word	0x20015f34
 80053f4:	20015f36 	.word	0x20015f36

080053f8 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	ed2d 8b02 	vpush	{d8}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8005402:	2300      	movs	r3, #0
 8005404:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8005406:	4b2e      	ldr	r3, [pc, #184]	; (80054c0 <isContinuousCurvature+0xc8>)
 8005408:	ed93 8a00 	vldr	s16, [r3]
 800540c:	f7fc fa1e 	bl	800184c <getTheta10mm>
 8005410:	eef0 7a40 	vmov.f32	s15, s0
 8005414:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005418:	eef0 7ae7 	vabs.f32	s15, s15
 800541c:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <isContinuousCurvature+0xcc>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005428:	4b26      	ldr	r3, [pc, #152]	; (80054c4 <isContinuousCurvature+0xcc>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 800542e:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <isContinuousCurvature+0xd0>)
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	}

	if(diff_theta <= 0.020) continuous_cnt++;
 8005436:	6838      	ldr	r0, [r7, #0]
 8005438:	f7fb f886 	bl	8000548 <__aeabi_f2d>
 800543c:	a31e      	add	r3, pc, #120	; (adr r3, 80054b8 <isContinuousCurvature+0xc0>)
 800543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005442:	f7fb fb55 	bl	8000af0 <__aeabi_dcmple>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <isContinuousCurvature+0x6a>
 800544c:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <isContinuousCurvature+0xd0>)
 800544e:	edd3 7a00 	vldr	s15, [r3]
 8005452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800545a:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <isContinuousCurvature+0xd0>)
 800545c:	edc3 7a00 	vstr	s15, [r3]
 8005460:	e003      	b.n	800546a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <isContinuousCurvature+0xd0>)
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <isContinuousCurvature+0xd0>)
 800546c:	edd3 7a00 	vldr	s15, [r3]
 8005470:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80054cc <isContinuousCurvature+0xd4>
 8005474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800547c:	db01      	blt.n	8005482 <isContinuousCurvature+0x8a>
 800547e:	2301      	movs	r3, #1
 8005480:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <isContinuousCurvature+0xd0>)
 8005484:	edd3 7a00 	vldr	s15, [r3]
 8005488:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80054d0 <isContinuousCurvature+0xd8>
 800548c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005494:	db02      	blt.n	800549c <isContinuousCurvature+0xa4>
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <isContinuousCurvature+0xd0>)
 8005498:	4a0e      	ldr	r2, [pc, #56]	; (80054d4 <isContinuousCurvature+0xdc>)
 800549a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 800549c:	f7fc f9d6 	bl	800184c <getTheta10mm>
 80054a0:	eef0 7a40 	vmov.f32	s15, s0
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <isContinuousCurvature+0xc8>)
 80054a6:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 80054aa:	79fb      	ldrb	r3, [r7, #7]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	ecbd 8b02 	vpop	{d8}
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	47ae147b 	.word	0x47ae147b
 80054bc:	3f947ae1 	.word	0x3f947ae1
 80054c0:	20015f38 	.word	0x20015f38
 80054c4:	20015f18 	.word	0x20015f18
 80054c8:	20015f3c 	.word	0x20015f3c
 80054cc:	42200000 	.word	0x42200000
 80054d0:	447a0000 	.word	0x447a0000
 80054d4:	447a0000 	.word	0x447a0000

080054d8 <isTargetDistance>:

bool isTargetDistance(float target){
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 80054e2:	2300      	movs	r3, #0
 80054e4:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 80054e6:	f7fb ff9d 	bl	8001424 <getDistance10mm>
 80054ea:	eeb0 7a40 	vmov.f32	s14, s0
 80054ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80054f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054fa:	d801      	bhi.n	8005500 <isTargetDistance+0x28>
		ret = true;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <running>:

void running(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8005516:	f000 f9fd 	bl	8005914 <runningInit>
	startLineTrace();
 800551a:	f7fc fe6d 	bl	80021f8 <startLineTrace>
	startVelocityControl();
 800551e:	f7fe fcb7 	bl	8003e90 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8005522:	4b73      	ldr	r3, [pc, #460]	; (80056f0 <running+0x1e4>)
 8005524:	edd3 7a00 	vldr	s15, [r3]
 8005528:	eeb0 0a67 	vmov.f32	s0, s15
 800552c:	f7fe fc22 	bl	8003d74 <setTargetVelocity>

	while(goal_flag == false){
 8005530:	e0d2      	b.n	80056d8 <running+0x1cc>
		switch(pattern){
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b14      	cmp	r3, #20
 8005536:	f200 80c2 	bhi.w	80056be <running+0x1b2>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <running+0x34>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005595 	.word	0x08005595
 8005544:	080056bf 	.word	0x080056bf
 8005548:	080056bf 	.word	0x080056bf
 800554c:	080056bf 	.word	0x080056bf
 8005550:	080056bf 	.word	0x080056bf
 8005554:	080055e3 	.word	0x080055e3
 8005558:	080056bf 	.word	0x080056bf
 800555c:	080056bf 	.word	0x080056bf
 8005560:	080056bf 	.word	0x080056bf
 8005564:	080056bf 	.word	0x080056bf
 8005568:	080055f7 	.word	0x080055f7
 800556c:	080056bf 	.word	0x080056bf
 8005570:	080056bf 	.word	0x080056bf
 8005574:	080056bf 	.word	0x080056bf
 8005578:	080056bf 	.word	0x080056bf
 800557c:	080056bf 	.word	0x080056bf
 8005580:	080056bf 	.word	0x080056bf
 8005584:	080056bf 	.word	0x080056bf
 8005588:	080056bf 	.word	0x080056bf
 800558c:	080056bf 	.word	0x080056bf
 8005590:	08005693 	.word	0x08005693

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005594:	f000 fc1c 	bl	8005dd0 <getSideSensorStatusR>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 808c 	beq.w	80056b8 <running+0x1ac>
						  start_goal_line_cnt++;
 80055a0:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <running+0x1e8>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	3301      	adds	r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <running+0x1e8>)
 80055aa:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 80055ac:	4b52      	ldr	r3, [pc, #328]	; (80056f8 <running+0x1ec>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <running+0xae>
 80055b4:	f000 fa2c 	bl	8005a10 <startLogging>
 80055b8:	e00c      	b.n	80055d4 <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 80055ba:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <running+0x1ec>)
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d003      	beq.n	80055ca <running+0xbe>
 80055c2:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <running+0x1ec>)
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d102      	bne.n	80055d0 <running+0xc4>
 80055ca:	f000 fa5d 	bl	8005a88 <startVelocityUpdate>
 80055ce:	e001      	b.n	80055d4 <running+0xc8>
						  else startTargetUpdate();
 80055d0:	f000 fa3c 	bl	8005a4c <startTargetUpdate>

						  clearGoalJudgeDistance();
 80055d4:	f7fb feee 	bl	80013b4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 80055d8:	f7fb fefa 	bl	80013d0 <clearSideLineJudgeDistance>
						  pattern = 5;
 80055dc:	2305      	movs	r3, #5
 80055de:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 80055e0:	e06a      	b.n	80056b8 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 80055e2:	f000 fbf5 	bl	8005dd0 <getSideSensorStatusR>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <running+0xea>
 80055f2:	230a      	movs	r3, #10
 80055f4:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 80055f6:	f000 fbdf 	bl	8005db8 <getSideSensorStatusL>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d004      	beq.n	800560a <running+0xfe>
						  goal_judge_flag = false;
 8005600:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <running+0x1f0>)
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005606:	f7fb fed5 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 800560a:	4b3c      	ldr	r3, [pc, #240]	; (80056fc <running+0x1f0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d015      	beq.n	8005644 <running+0x138>
 8005618:	f000 fbda 	bl	8005dd0 <getSideSensorStatusR>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <running+0x138>
 8005622:	f7fb fe7f 	bl	8001324 <getGoalJudgeDistance>
 8005626:	eeb0 7a40 	vmov.f32	s14, s0
 800562a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8005700 <running+0x1f4>
 800562e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005636:	db05      	blt.n	8005644 <running+0x138>
						  goal_judge_flag = true;
 8005638:	4b30      	ldr	r3, [pc, #192]	; (80056fc <running+0x1f0>)
 800563a:	2201      	movs	r2, #1
 800563c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800563e:	f7fb feb9 	bl	80013b4 <clearGoalJudgeDistance>
 8005642:	e019      	b.n	8005678 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <running+0x1f0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d015      	beq.n	8005678 <running+0x16c>
 800564c:	f7fb fe6a 	bl	8001324 <getGoalJudgeDistance>
 8005650:	eeb0 7a40 	vmov.f32	s14, s0
 8005654:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005700 <running+0x1f4>
 8005658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005660:	db0a      	blt.n	8005678 <running+0x16c>
						  start_goal_line_cnt++;
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <running+0x1e8>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	b2da      	uxtb	r2, r3
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <running+0x1e8>)
 800566c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 800566e:	4b23      	ldr	r3, [pc, #140]	; (80056fc <running+0x1f0>)
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005674:	f7fb fe9e 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <running+0x1e8>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d91d      	bls.n	80056bc <running+0x1b0>
						  stopLogging();
 8005680:	f000 f9d8 	bl	8005a34 <stopLogging>
						  stopTargetUpdate();
 8005684:	f000 f9f4 	bl	8005a70 <stopTargetUpdate>
						  stopVelocityUpdate();
 8005688:	f000 fa20 	bl	8005acc <stopVelocityUpdate>
						  pattern = 20;
 800568c:	2314      	movs	r3, #20
 800568e:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005690:	e014      	b.n	80056bc <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 8005692:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005696:	f7fe fb6d 	bl	8003d74 <setTargetVelocity>
					  HAL_Delay(100);
 800569a:	2064      	movs	r0, #100	; 0x64
 800569c:	f001 f8ea 	bl	8006874 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 80056a0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005704 <running+0x1f8>
 80056a4:	f7fe fb66 	bl	8003d74 <setTargetVelocity>
					  HAL_Delay(500);
 80056a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056ac:	f001 f8e2 	bl	8006874 <HAL_Delay>

					  goal_flag = true;
 80056b0:	4b15      	ldr	r3, [pc, #84]	; (8005708 <running+0x1fc>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]

					  break;
 80056b6:	e002      	b.n	80056be <running+0x1b2>
					  break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <running+0x1b2>
					  break;
 80056bc:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 80056be:	f7fc fe21 	bl	8002304 <getCouseOutFlag>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <running+0x1cc>
		{
			stopLogging();
 80056c8:	f000 f9b4 	bl	8005a34 <stopLogging>
			stopTargetUpdate();
 80056cc:	f000 f9d0 	bl	8005a70 <stopTargetUpdate>
			stopVelocityUpdate();
 80056d0:	f000 f9fc 	bl	8005acc <stopVelocityUpdate>
		    pattern = 20;
 80056d4:	2314      	movs	r3, #20
 80056d6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <running+0x1fc>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f083 0301 	eor.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f47f af25 	bne.w	8005532 <running+0x26>
	    }
	}
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20015f20 	.word	0x20015f20
 80056f4:	20015f08 	.word	0x20015f08
 80056f8:	20016468 	.word	0x20016468
 80056fc:	20015f17 	.word	0x20015f17
 8005700:	428c0000 	.word	0x428c0000
 8005704:	00000000 	.word	0x00000000
 8005708:	20015f16 	.word	0x20015f16

0800570c <runningFlip>:

void runningFlip()
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005710:	4b76      	ldr	r3, [pc, #472]	; (80058ec <runningFlip+0x1e0>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80e7 	beq.w	80058e8 <runningFlip+0x1dc>
		setLED('G');
 800571a:	2047      	movs	r0, #71	; 0x47
 800571c:	f7fc f8ce 	bl	80018bc <setLED>
		updateTargetVelocity();//速度の変更
 8005720:	f000 f9e0 	bl	8005ae4 <updateTargetVelocity>
		updateLookaheadpoints();//座標の変更
 8005724:	f7fe f8fa 	bl	800391c <updateLookaheadpoints>

		if(isTargetDistance(30) == true){//30mmごとにデータ取得
 8005728:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800572c:	f7ff fed4 	bl	80054d8 <isTargetDistance>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00d      	beq.n	8005752 <runningFlip+0x46>
			saveLog();
 8005736:	f000 f931 	bl	800599c <saveLog>

			if(isContinuousCurvature() == true){
 800573a:	f7ff fe5d 	bl	80053f8 <isContinuousCurvature>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005744:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <runningFlip+0x1e4>)
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 800574a:	f7fb fe79 	bl	8001440 <clearDistance10mm>
			clearTheta10mm();
 800574e:	f7fc f899 	bl	8001884 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005752:	f7ff fe05 	bl	8005360 <isCrossLine>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d026      	beq.n	80057aa <runningFlip+0x9e>
 800575c:	4b65      	ldr	r3, [pc, #404]	; (80058f4 <runningFlip+0x1e8>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f083 0301 	eor.w	r3, r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d01f      	beq.n	80057aa <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 800576a:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <runningFlip+0x1e8>)
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005770:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <runningFlip+0x1e4>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005776:	f7fb fe39 	bl	80013ec <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 800577a:	f7fb fe45 	bl	8001408 <clearSideLineIgnoreDistance>

			if(mode == 1){
 800577e:	4b5e      	ldr	r3, [pc, #376]	; (80058f8 <runningFlip+0x1ec>)
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d10b      	bne.n	800579e <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 8005786:	4b5d      	ldr	r3, [pc, #372]	; (80058fc <runningFlip+0x1f0>)
 8005788:	2200      	movs	r2, #0
 800578a:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 800578c:	f7fb fdbc 	bl	8001308 <getTotalDistance>
 8005790:	eef0 7a40 	vmov.f32	s15, s0
 8005794:	eeb0 0a67 	vmov.f32	s0, s15
 8005798:	f7fd fc32 	bl	8003000 <saveCross>
			if(mode == 1){
 800579c:	e017      	b.n	80057ce <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 800579e:	4b57      	ldr	r3, [pc, #348]	; (80058fc <runningFlip+0x1f0>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80057a4:	f000 fa04 	bl	8005bb0 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 80057a8:	e011      	b.n	80057ce <runningFlip+0xc2>
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 80057aa:	4b52      	ldr	r3, [pc, #328]	; (80058f4 <runningFlip+0x1e8>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <runningFlip+0xc2>
 80057b2:	f7fb fde3 	bl	800137c <getCrossLineIgnoreDistance>
 80057b6:	eeb0 7a40 	vmov.f32	s14, s0
 80057ba:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005900 <runningFlip+0x1f4>
 80057be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057c6:	db02      	blt.n	80057ce <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 80057c8:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <runningFlip+0x1e8>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80057ce:	f000 faff 	bl	8005dd0 <getSideSensorStatusR>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <runningFlip+0xd6>
			side_line_judge_flag = false;
 80057d8:	4b4a      	ldr	r3, [pc, #296]	; (8005904 <runningFlip+0x1f8>)
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80057de:	f7fb fdf7 	bl	80013d0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 80057e2:	4b48      	ldr	r3, [pc, #288]	; (8005904 <runningFlip+0x1f8>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	f083 0301 	eor.w	r3, r3, #1
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <runningFlip+0x110>
 80057f0:	f000 fae2 	bl	8005db8 <getSideSensorStatusL>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <runningFlip+0x110>
 80057fa:	f7fb fda1 	bl	8001340 <getSideLineJudgeDistance>
 80057fe:	eeb0 7a40 	vmov.f32	s14, s0
 8005802:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005908 <runningFlip+0x1fc>
 8005806:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800580a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580e:	db05      	blt.n	800581c <runningFlip+0x110>
			side_line_judge_flag = true;
 8005810:	4b3c      	ldr	r3, [pc, #240]	; (8005904 <runningFlip+0x1f8>)
 8005812:	2201      	movs	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8005816:	f7fb fddb 	bl	80013d0 <clearSideLineJudgeDistance>
 800581a:	e02f      	b.n	800587c <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 800581c:	4b39      	ldr	r3, [pc, #228]	; (8005904 <runningFlip+0x1f8>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d02b      	beq.n	800587c <runningFlip+0x170>
 8005824:	f7fb fd8c 	bl	8001340 <getSideLineJudgeDistance>
 8005828:	eeb0 7a40 	vmov.f32	s14, s0
 800582c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005908 <runningFlip+0x1fc>
 8005830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	db20      	blt.n	800587c <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800583a:	f7fb fdc9 	bl	80013d0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 800583e:	4b31      	ldr	r3, [pc, #196]	; (8005904 <runningFlip+0x1f8>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005844:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <runningFlip+0x1e4>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d017      	beq.n	800587c <runningFlip+0x170>
				continuous_curve_flag = false;
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <runningFlip+0x1e4>)
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <runningFlip+0x200>)
 8005854:	2201      	movs	r2, #1
 8005856:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8005858:	4b27      	ldr	r3, [pc, #156]	; (80058f8 <runningFlip+0x1ec>)
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d10b      	bne.n	8005878 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005860:	4b2b      	ldr	r3, [pc, #172]	; (8005910 <runningFlip+0x204>)
 8005862:	2200      	movs	r2, #0
 8005864:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8005866:	f7fb fd4f 	bl	8001308 <getTotalDistance>
 800586a:	eef0 7a40 	vmov.f32	s15, s0
 800586e:	eeb0 0a67 	vmov.f32	s0, s15
 8005872:	f7fd fbdd 	bl	8003030 <saveSide>
 8005876:	e001      	b.n	800587c <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005878:	f000 f9f0 	bl	8005c5c <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 800587c:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <runningFlip+0x1f0>)
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	3301      	adds	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <runningFlip+0x1f0>)
 8005886:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8005888:	4b21      	ldr	r3, [pc, #132]	; (8005910 <runningFlip+0x204>)
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <runningFlip+0x204>)
 8005892:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8005894:	4b19      	ldr	r3, [pc, #100]	; (80058fc <runningFlip+0x1f0>)
 8005896:	881b      	ldrh	r3, [r3, #0]
 8005898:	f242 720f 	movw	r2, #9999	; 0x270f
 800589c:	4293      	cmp	r3, r2
 800589e:	d903      	bls.n	80058a8 <runningFlip+0x19c>
 80058a0:	4b16      	ldr	r3, [pc, #88]	; (80058fc <runningFlip+0x1f0>)
 80058a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80058a6:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80058a8:	4b19      	ldr	r3, [pc, #100]	; (8005910 <runningFlip+0x204>)
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d903      	bls.n	80058bc <runningFlip+0x1b0>
 80058b4:	4b16      	ldr	r3, [pc, #88]	; (8005910 <runningFlip+0x204>)
 80058b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80058ba:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <runningFlip+0x204>)
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	2b96      	cmp	r3, #150	; 0x96
 80058c2:	d803      	bhi.n	80058cc <runningFlip+0x1c0>
 80058c4:	2047      	movs	r0, #71	; 0x47
 80058c6:	f7fc f8c7 	bl	8001a58 <setLED2>
 80058ca:	e002      	b.n	80058d2 <runningFlip+0x1c6>
	    else setLED2('N');
 80058cc:	204e      	movs	r0, #78	; 0x4e
 80058ce:	f7fc f8c3 	bl	8001a58 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80058d2:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <runningFlip+0x204>)
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	2b96      	cmp	r3, #150	; 0x96
 80058d8:	d803      	bhi.n	80058e2 <runningFlip+0x1d6>
 80058da:	2042      	movs	r0, #66	; 0x42
 80058dc:	f7fb ffee 	bl	80018bc <setLED>
	    else setLED('G');
	}
}
 80058e0:	e002      	b.n	80058e8 <runningFlip+0x1dc>
	    else setLED('G');
 80058e2:	2047      	movs	r0, #71	; 0x47
 80058e4:	f7fb ffea 	bl	80018bc <setLED>
}
 80058e8:	bf00      	nop
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20015f1a 	.word	0x20015f1a
 80058f0:	20015f19 	.word	0x20015f19
 80058f4:	20015f12 	.word	0x20015f12
 80058f8:	20016468 	.word	0x20016468
 80058fc:	20015f0e 	.word	0x20015f0e
 8005900:	42480000 	.word	0x42480000
 8005904:	20015f13 	.word	0x20015f13
 8005908:	42700000 	.word	0x42700000
 800590c:	20015f18 	.word	0x20015f18
 8005910:	20015f10 	.word	0x20015f10

08005914 <runningInit>:

void runningInit()
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	if(mode == 1){
 8005918:	4b18      	ldr	r3, [pc, #96]	; (800597c <runningInit+0x68>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d105      	bne.n	800592c <runningInit+0x18>
		setLED('W');
 8005920:	2057      	movs	r0, #87	; 0x57
 8005922:	f7fb ffcb 	bl	80018bc <setLED>
		ereaseLog();
 8005926:	f7fd fbb3 	bl	8003090 <ereaseLog>
 800592a:	e00b      	b.n	8005944 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 800592c:	f7fd fbec 	bl	8003108 <ereaseDebugLog>
		loadDistance();
 8005930:	f7fd fc2a 	bl	8003188 <loadDistance>
		loadTheta();
 8005934:	f7fd fc66 	bl	8003204 <loadTheta>
		loadCross();
 8005938:	f7fd fca2 	bl	8003280 <loadCross>
		loadSide();
 800593c:	f7fd fcde 	bl	80032fc <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005940:	f7fd fe56 	bl	80035f0 <CreateXYcoordinates>

	}

	clearCrossLineIgnoreDistance();
 8005944:	f7fb fd52 	bl	80013ec <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005948:	f7fb fd5e 	bl	8001408 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <runningInit+0x6c>)
 800594e:	2200      	movs	r2, #0
 8005950:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <runningInit+0x70>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <runningInit+0x74>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <runningInit+0x78>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005964:	4b0a      	ldr	r3, [pc, #40]	; (8005990 <runningInit+0x7c>)
 8005966:	2201      	movs	r2, #1
 8005968:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <runningInit+0x80>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005970:	4b09      	ldr	r3, [pc, #36]	; (8005998 <runningInit+0x84>)
 8005972:	2201      	movs	r2, #1
 8005974:	701a      	strb	r2, [r3, #0]
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20016468 	.word	0x20016468
 8005980:	20015f08 	.word	0x20015f08
 8005984:	20015f12 	.word	0x20015f12
 8005988:	20015f13 	.word	0x20015f13
 800598c:	20015f17 	.word	0x20015f17
 8005990:	20015f18 	.word	0x20015f18
 8005994:	20015f19 	.word	0x20015f19
 8005998:	20015f1a 	.word	0x20015f1a

0800599c <saveLog>:

void saveLog(){
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80059a0:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <saveLog+0x68>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80059a8:	f7fb fd3c 	bl	8001424 <getDistance10mm>
 80059ac:	eef0 7a40 	vmov.f32	s15, s0
 80059b0:	eeb0 0a67 	vmov.f32	s0, s15
 80059b4:	f7fd faf4 	bl	8002fa0 <saveDistance>
		saveTheta(getTheta10mm());
 80059b8:	f7fb ff48 	bl	800184c <getTheta10mm>
 80059bc:	eef0 7a40 	vmov.f32	s15, s0
 80059c0:	eeb0 0a67 	vmov.f32	s0, s15
 80059c4:	f7fd fb04 	bl	8002fd0 <saveTheta>
		//saveDebug(getLookaheadpoints_Y());
		//saveDebug(PurepursuitCalculation());
		//saveDebug(getaddTheta30mm());
		AngularVelocityCalculation();
	}
}
 80059c8:	e01a      	b.n	8005a00 <saveLog+0x64>
	else if(velocity_update_flag == true){
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <saveLog+0x6c>)
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d010      	beq.n	80059f4 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 80059d2:	f7fe fa4f 	bl	8003e74 <getTargetVelocity>
 80059d6:	eef0 7a40 	vmov.f32	s15, s0
 80059da:	eeb0 0a67 	vmov.f32	s0, s15
 80059de:	f7fd fb3f 	bl	8003060 <saveDebug>
	    saveDebug(getCurrentVelocity());
 80059e2:	f7fe fa09 	bl	8003df8 <getCurrentVelocity>
 80059e6:	eef0 7a40 	vmov.f32	s15, s0
 80059ea:	eeb0 0a67 	vmov.f32	s0, s15
 80059ee:	f7fd fb37 	bl	8003060 <saveDebug>
}
 80059f2:	e005      	b.n	8005a00 <saveLog+0x64>
	else if(target_update_flag == true){
 80059f4:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <saveLog+0x70>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <saveLog+0x64>
		AngularVelocityCalculation();
 80059fc:	f7fe f8c8 	bl	8003b90 <AngularVelocityCalculation>
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20015f1b 	.word	0x20015f1b
 8005a08:	20015f1d 	.word	0x20015f1d
 8005a0c:	20015f1c 	.word	0x20015f1c

08005a10 <startLogging>:

void startLogging()
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005a14:	f7fb fd14 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005a18:	f7fb ff34 	bl	8001884 <clearTheta10mm>
	clearaddTheta30mm();
 8005a1c:	f7fb ff40 	bl	80018a0 <clearaddTheta30mm>
	clearTotalDistance();
 8005a20:	f7fb fcba 	bl	8001398 <clearTotalDistance>
	logging_flag = true;
 8005a24:	4b02      	ldr	r3, [pc, #8]	; (8005a30 <startLogging+0x20>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20015f1b 	.word	0x20015f1b

08005a34 <stopLogging>:

void stopLogging()
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005a38:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <stopLogging+0x14>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
}
 8005a3e:	bf00      	nop
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	20015f1b 	.word	0x20015f1b

08005a4c <startTargetUpdate>:

void startTargetUpdate()
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005a50:	f7fb fcf6 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 8005a54:	f7fb ff16 	bl	8001884 <clearTheta10mm>
	clearaddTheta30mm();
 8005a58:	f7fb ff22 	bl	80018a0 <clearaddTheta30mm>
	clearTotalDistance();
 8005a5c:	f7fb fc9c 	bl	8001398 <clearTotalDistance>
	target_update_flag = true;
 8005a60:	4b02      	ldr	r3, [pc, #8]	; (8005a6c <startTargetUpdate+0x20>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
}
 8005a66:	bf00      	nop
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20015f1c 	.word	0x20015f1c

08005a70 <stopTargetUpdate>:

void stopTargetUpdate()
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
	target_update_flag = false;
 8005a74:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <stopTargetUpdate+0x14>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20015f1c 	.word	0x20015f1c

08005a88 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005a8c:	f7fb fcd8 	bl	8001440 <clearDistance10mm>
	clearTotalDistance();
 8005a90:	f7fb fc82 	bl	8001398 <clearTotalDistance>
	velocity_table_idx = 0;
 8005a94:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <startVelocityUpdate+0x30>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005a9a:	4b08      	ldr	r3, [pc, #32]	; (8005abc <startVelocityUpdate+0x34>)
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 8005aa2:	4b07      	ldr	r3, [pc, #28]	; (8005ac0 <startVelocityUpdate+0x38>)
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <startVelocityUpdate+0x3c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <startVelocityUpdate+0x40>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	801a      	strh	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	2001646a 	.word	0x2001646a
 8005abc:	20016464 	.word	0x20016464
 8005ac0:	20015f1d 	.word	0x20015f1d
 8005ac4:	20015f0a 	.word	0x20015f0a
 8005ac8:	20015f0c 	.word	0x20015f0c

08005acc <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005ad0:	4b03      	ldr	r3, [pc, #12]	; (8005ae0 <stopVelocityUpdate+0x14>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	701a      	strb	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20015f1d 	.word	0x20015f1d

08005ae4 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005ae8:	4b2c      	ldr	r3, [pc, #176]	; (8005b9c <updateTargetVelocity+0xb8>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d053      	beq.n	8005b98 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005af0:	f7fb fc0a 	bl	8001308 <getTotalDistance>
 8005af4:	eeb0 7a40 	vmov.f32	s14, s0
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <updateTargetVelocity+0xbc>)
 8005afa:	edd3 7a00 	vldr	s15, [r3]
 8005afe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b06:	db14      	blt.n	8005b32 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005b08:	4b26      	ldr	r3, [pc, #152]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fc85 	bl	800341c <getDistanceLog>
 8005b12:	eeb0 7a40 	vmov.f32	s14, s0
 8005b16:	4b22      	ldr	r3, [pc, #136]	; (8005ba0 <updateTargetVelocity+0xbc>)
 8005b18:	edd3 7a00 	vldr	s15, [r3]
 8005b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b20:	4b1f      	ldr	r3, [pc, #124]	; (8005ba0 <updateTargetVelocity+0xbc>)
 8005b22:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005b26:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b30:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005b32:	f7fd faf9 	bl	8003128 <getDistanceLogSize>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d806      	bhi.n	8005b50 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005b42:	f7fd faf1 	bl	8003128 <getDistanceLogSize>
 8005b46:	4603      	mov	r3, r0
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b4e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005b50:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <updateTargetVelocity+0xc4>)
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	f7fe f907 	bl	8003d74 <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005b66:	4b0f      	ldr	r3, [pc, #60]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <updateTargetVelocity+0xc4>)
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	ed93 7a00 	vldr	s14, [r3]
 8005b74:	4b0d      	ldr	r3, [pc, #52]	; (8005bac <updateTargetVelocity+0xc8>)
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b82:	d501      	bpl.n	8005b88 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005b84:	f7fe f9a2 	bl	8003ecc <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <updateTargetVelocity+0xc0>)
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <updateTargetVelocity+0xc4>)
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a05      	ldr	r2, [pc, #20]	; (8005bac <updateTargetVelocity+0xc8>)
 8005b96:	6013      	str	r3, [r2, #0]

	}
}
 8005b98:	bf00      	nop
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20015f1d 	.word	0x20015f1d
 8005ba0:	20016464 	.word	0x20016464
 8005ba4:	2001646a 	.word	0x2001646a
 8005ba8:	20013fc8 	.word	0x20013fc8
 8005bac:	20015f40 	.word	0x20015f40

08005bb0 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005bb6:	e03f      	b.n	8005c38 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fd fc43 	bl	8003448 <getCrossLog>
 8005bc2:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005bc6:	f7fb fb9f 	bl	8001308 <getTotalDistance>
 8005bca:	eeb0 7a40 	vmov.f32	s14, s0
 8005bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bd6:	eef0 7ae7 	vabs.f32	s15, s15
 8005bda:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005bde:	edd7 7a00 	vldr	s15, [r7]
 8005be2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c54 <correctionTotalDistanceFromCrossLine+0xa4>
 8005be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bee:	d80d      	bhi.n	8005c0c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005bf0:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005bf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bfa:	f7fb fbaf 	bl	800135c <setTotalDistance>
			cross_line_idx++;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c08:	801a      	strh	r2, [r3, #0]
			break;
 8005c0a:	e01d      	b.n	8005c48 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	3301      	adds	r3, #1
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c16:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005c18:	f7fd fa92 	bl	8003140 <getCrossLogSize>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c22:	881b      	ldrh	r3, [r3, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d807      	bhi.n	8005c38 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005c28:	f7fd fa8a 	bl	8003140 <getCrossLogSize>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c34:	801a      	strh	r2, [r3, #0]
			break;
 8005c36:	e007      	b.n	8005c48 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005c38:	f7fd fa82 	bl	8003140 <getCrossLogSize>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	461a      	mov	r2, r3
 8005c40:	4b03      	ldr	r3, [pc, #12]	; (8005c50 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d2b7      	bcs.n	8005bb8 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20015f0a 	.word	0x20015f0a
 8005c54:	437a0000 	.word	0x437a0000
 8005c58:	20015f0e 	.word	0x20015f0e

08005c5c <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005c62:	e03f      	b.n	8005ce4 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7fd fc03 	bl	8003474 <getSideLog>
 8005c6e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005c72:	f7fb fb49 	bl	8001308 <getTotalDistance>
 8005c76:	eeb0 7a40 	vmov.f32	s14, s0
 8005c7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c82:	eef0 7ae7 	vabs.f32	s15, s15
 8005c86:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005c8a:	edd7 7a00 	vldr	s15, [r7]
 8005c8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005d00 <correctionTotalDistanceFromSideLine+0xa4>
 8005c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9a:	d80d      	bhi.n	8005cb8 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <correctionTotalDistanceFromSideLine+0xa8>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005ca2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ca6:	f7fb fb59 	bl	800135c <setTotalDistance>
			side_line_idx++;
 8005caa:	4b14      	ldr	r3, [pc, #80]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	4b12      	ldr	r3, [pc, #72]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cb4:	801a      	strh	r2, [r3, #0]
			break;
 8005cb6:	e01d      	b.n	8005cf4 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cc2:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005cc4:	f7fd fa48 	bl	8003158 <getSideLogSize>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d807      	bhi.n	8005ce4 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005cd4:	f7fd fa40 	bl	8003158 <getSideLogSize>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005ce0:	801a      	strh	r2, [r3, #0]
			break;
 8005ce2:	e007      	b.n	8005cf4 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005ce4:	f7fd fa38 	bl	8003158 <getSideLogSize>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <correctionTotalDistanceFromSideLine+0xa0>)
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d2b7      	bcs.n	8005c64 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20015f0c 	.word	0x20015f0c
 8005d00:	437a0000 	.word	0x437a0000
 8005d04:	20015f10 	.word	0x20015f10

08005d08 <getgoalStatus>:
    }
}
*/

bool getgoalStatus()
{
 8005d08:	b480      	push	{r7}
 8005d0a:	af00      	add	r7, sp, #0
	return goal_flag;
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <getgoalStatus+0x14>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20015f16 	.word	0x20015f16

08005d20 <getTargetUpdateflag>:

bool getTargetUpdateflag()//デバックflag監視
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <getTargetUpdateflag+0x14>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20015f1c 	.word	0x20015f1c

08005d38 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d42:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005d46:	4a06      	ldr	r2, [pc, #24]	; (8005d60 <setVelocityRange+0x28>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005d4c:	4a05      	ldr	r2, [pc, #20]	; (8005d64 <setVelocityRange+0x2c>)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	6013      	str	r3, [r2, #0]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20015f20 	.word	0x20015f20
 8005d64:	20015f24 	.word	0x20015f24

08005d68 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d72:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005d76:	4a06      	ldr	r2, [pc, #24]	; (8005d90 <setAccDec+0x28>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005d7c:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <setAccDec+0x2c>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6013      	str	r3, [r2, #0]
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20015f28 	.word	0x20015f28
 8005d94:	20015f2c 	.word	0x20015f2c

08005d98 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005da2:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <setStraightRadius+0x1c>)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6013      	str	r3, [r2, #0]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	20015f30 	.word	0x20015f30

08005db8 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <getSideSensorStatusL+0x14>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20015f14 	.word	0x20015f14

08005dd0 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <getSideSensorStatusR+0x14>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	20015f15 	.word	0x20015f15

08005de8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	607b      	str	r3, [r7, #4]
 8005df2:	4b10      	ldr	r3, [pc, #64]	; (8005e34 <HAL_MspInit+0x4c>)
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	4a0f      	ldr	r2, [pc, #60]	; (8005e34 <HAL_MspInit+0x4c>)
 8005df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8005dfe:	4b0d      	ldr	r3, [pc, #52]	; (8005e34 <HAL_MspInit+0x4c>)
 8005e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_MspInit+0x4c>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	4a08      	ldr	r2, [pc, #32]	; (8005e34 <HAL_MspInit+0x4c>)
 8005e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1a:	4b06      	ldr	r3, [pc, #24]	; (8005e34 <HAL_MspInit+0x4c>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800

08005e38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	; 0x38
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a79      	ldr	r2, [pc, #484]	; (800603c <HAL_ADC_MspInit+0x204>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d158      	bne.n	8005f0c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	4b78      	ldr	r3, [pc, #480]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e62:	4a77      	ldr	r2, [pc, #476]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e68:	6453      	str	r3, [r2, #68]	; 0x44
 8005e6a:	4b75      	ldr	r3, [pc, #468]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	623b      	str	r3, [r7, #32]
 8005e74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
 8005e7a:	4b71      	ldr	r3, [pc, #452]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a70      	ldr	r2, [pc, #448]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e80:	f043 0304 	orr.w	r3, r3, #4
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b6e      	ldr	r3, [pc, #440]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0304 	and.w	r3, r3, #4
 8005e8e:	61fb      	str	r3, [r7, #28]
 8005e90:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005e92:	230e      	movs	r3, #14
 8005e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e96:	2303      	movs	r3, #3
 8005e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4867      	ldr	r0, [pc, #412]	; (8006044 <HAL_ADC_MspInit+0x20c>)
 8005ea6:	f001 ff65 	bl	8007d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005eaa:	4b67      	ldr	r3, [pc, #412]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005eac:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_ADC_MspInit+0x214>)
 8005eae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005eb0:	4b65      	ldr	r3, [pc, #404]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eb6:	4b64      	ldr	r3, [pc, #400]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ebc:	4b62      	ldr	r3, [pc, #392]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ec2:	4b61      	ldr	r3, [pc, #388]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ec8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005eca:	4b5f      	ldr	r3, [pc, #380]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ed2:	4b5d      	ldr	r3, [pc, #372]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ed8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005eda:	4b5b      	ldr	r3, [pc, #364]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005ee2:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ee8:	4b57      	ldr	r3, [pc, #348]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005eee:	4856      	ldr	r0, [pc, #344]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005ef0:	f001 f9e8 	bl	80072c4 <HAL_DMA_Init>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005efa:	f7ff f909 	bl	8005110 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a51      	ldr	r2, [pc, #324]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
 8005f04:	4a50      	ldr	r2, [pc, #320]	; (8006048 <HAL_ADC_MspInit+0x210>)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005f0a:	e092      	b.n	8006032 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a4f      	ldr	r2, [pc, #316]	; (8006050 <HAL_ADC_MspInit+0x218>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	f040 808d 	bne.w	8006032 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005f18:	2300      	movs	r3, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	4b48      	ldr	r3, [pc, #288]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	4a47      	ldr	r2, [pc, #284]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f26:	6453      	str	r3, [r2, #68]	; 0x44
 8005f28:	4b45      	ldr	r3, [pc, #276]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	4b41      	ldr	r3, [pc, #260]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	4a40      	ldr	r2, [pc, #256]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6313      	str	r3, [r2, #48]	; 0x30
 8005f44:	4b3e      	ldr	r3, [pc, #248]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]
 8005f54:	4b3a      	ldr	r3, [pc, #232]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	4a39      	ldr	r2, [pc, #228]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f5a:	f043 0304 	orr.w	r3, r3, #4
 8005f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f60:	4b37      	ldr	r3, [pc, #220]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	4b33      	ldr	r3, [pc, #204]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4a32      	ldr	r2, [pc, #200]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f76:	f043 0302 	orr.w	r3, r3, #2
 8005f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7c:	4b30      	ldr	r3, [pc, #192]	; (8006040 <HAL_ADC_MspInit+0x208>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f003 0302 	and.w	r3, r3, #2
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005f88:	23ff      	movs	r3, #255	; 0xff
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f98:	4619      	mov	r1, r3
 8005f9a:	482e      	ldr	r0, [pc, #184]	; (8006054 <HAL_ADC_MspInit+0x21c>)
 8005f9c:	f001 feea 	bl	8007d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005fa0:	2330      	movs	r3, #48	; 0x30
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4824      	ldr	r0, [pc, #144]	; (8006044 <HAL_ADC_MspInit+0x20c>)
 8005fb4:	f001 fede 	bl	8007d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4823      	ldr	r0, [pc, #140]	; (8006058 <HAL_ADC_MspInit+0x220>)
 8005fcc:	f001 fed2 	bl	8007d74 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005fd0:	4b22      	ldr	r3, [pc, #136]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005fd2:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_ADC_MspInit+0x228>)
 8005fd4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fdc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fe4:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005fea:	4b1c      	ldr	r3, [pc, #112]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ff0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ff2:	4b1a      	ldr	r3, [pc, #104]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ff8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ffa:	4b18      	ldr	r3, [pc, #96]	; (800605c <HAL_ADC_MspInit+0x224>)
 8005ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006000:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006002:	4b16      	ldr	r3, [pc, #88]	; (800605c <HAL_ADC_MspInit+0x224>)
 8006004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006008:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800600a:	4b14      	ldr	r3, [pc, #80]	; (800605c <HAL_ADC_MspInit+0x224>)
 800600c:	2200      	movs	r2, #0
 800600e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006010:	4b12      	ldr	r3, [pc, #72]	; (800605c <HAL_ADC_MspInit+0x224>)
 8006012:	2200      	movs	r2, #0
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006016:	4811      	ldr	r0, [pc, #68]	; (800605c <HAL_ADC_MspInit+0x224>)
 8006018:	f001 f954 	bl	80072c4 <HAL_DMA_Init>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8006022:	f7ff f875 	bl	8005110 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a0c      	ldr	r2, [pc, #48]	; (800605c <HAL_ADC_MspInit+0x224>)
 800602a:	639a      	str	r2, [r3, #56]	; 0x38
 800602c:	4a0b      	ldr	r2, [pc, #44]	; (800605c <HAL_ADC_MspInit+0x224>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006032:	bf00      	nop
 8006034:	3738      	adds	r7, #56	; 0x38
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40012000 	.word	0x40012000
 8006040:	40023800 	.word	0x40023800
 8006044:	40020800 	.word	0x40020800
 8006048:	200162d4 	.word	0x200162d4
 800604c:	40026410 	.word	0x40026410
 8006050:	40012100 	.word	0x40012100
 8006054:	40020000 	.word	0x40020000
 8006058:	40020400 	.word	0x40020400
 800605c:	200163bc 	.word	0x200163bc
 8006060:	40026440 	.word	0x40026440

08006064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800606c:	f107 0314 	add.w	r3, r7, #20
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	609a      	str	r2, [r3, #8]
 8006078:	60da      	str	r2, [r3, #12]
 800607a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <HAL_I2C_MspInit+0x84>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d12c      	bne.n	80060e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	4b18      	ldr	r3, [pc, #96]	; (80060ec <HAL_I2C_MspInit+0x88>)
 800608c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608e:	4a17      	ldr	r2, [pc, #92]	; (80060ec <HAL_I2C_MspInit+0x88>)
 8006090:	f043 0302 	orr.w	r3, r3, #2
 8006094:	6313      	str	r3, [r2, #48]	; 0x30
 8006096:	4b15      	ldr	r3, [pc, #84]	; (80060ec <HAL_I2C_MspInit+0x88>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80060a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80060a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060a8:	2312      	movs	r3, #18
 80060aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060ac:	2301      	movs	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060b0:	2303      	movs	r3, #3
 80060b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80060b4:	2304      	movs	r3, #4
 80060b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060b8:	f107 0314 	add.w	r3, r7, #20
 80060bc:	4619      	mov	r1, r3
 80060be:	480c      	ldr	r0, [pc, #48]	; (80060f0 <HAL_I2C_MspInit+0x8c>)
 80060c0:	f001 fe58 	bl	8007d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <HAL_I2C_MspInit+0x88>)
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	4a07      	ldr	r2, [pc, #28]	; (80060ec <HAL_I2C_MspInit+0x88>)
 80060ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060d2:	6413      	str	r3, [r2, #64]	; 0x40
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_I2C_MspInit+0x88>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80060e0:	bf00      	nop
 80060e2:	3728      	adds	r7, #40	; 0x28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40005400 	.word	0x40005400
 80060ec:	40023800 	.word	0x40023800
 80060f0:	40020400 	.word	0x40020400

080060f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <HAL_SPI_MspInit+0x84>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d12c      	bne.n	8006170 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	4b18      	ldr	r3, [pc, #96]	; (800617c <HAL_SPI_MspInit+0x88>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a17      	ldr	r2, [pc, #92]	; (800617c <HAL_SPI_MspInit+0x88>)
 8006120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b15      	ldr	r3, [pc, #84]	; (800617c <HAL_SPI_MspInit+0x88>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b11      	ldr	r3, [pc, #68]	; (800617c <HAL_SPI_MspInit+0x88>)
 8006138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613a:	4a10      	ldr	r2, [pc, #64]	; (800617c <HAL_SPI_MspInit+0x88>)
 800613c:	f043 0304 	orr.w	r3, r3, #4
 8006140:	6313      	str	r3, [r2, #48]	; 0x30
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <HAL_SPI_MspInit+0x88>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800614e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006154:	2302      	movs	r3, #2
 8006156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615c:	2303      	movs	r3, #3
 800615e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006160:	2306      	movs	r3, #6
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	4619      	mov	r1, r3
 800616a:	4805      	ldr	r0, [pc, #20]	; (8006180 <HAL_SPI_MspInit+0x8c>)
 800616c:	f001 fe02 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006170:	bf00      	nop
 8006172:	3728      	adds	r7, #40	; 0x28
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40003c00 	.word	0x40003c00
 800617c:	40023800 	.word	0x40023800
 8006180:	40020800 	.word	0x40020800

08006184 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <HAL_TIM_PWM_MspInit+0x64>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10e      	bne.n	80061b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006196:	2300      	movs	r3, #0
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	4b14      	ldr	r3, [pc, #80]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	4a13      	ldr	r2, [pc, #76]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 80061a0:	f043 0301 	orr.w	r3, r3, #1
 80061a4:	6453      	str	r3, [r2, #68]	; 0x44
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 80061a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80061b2:	e012      	b.n	80061da <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <HAL_TIM_PWM_MspInit+0x6c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10d      	bne.n	80061da <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80061be:	2300      	movs	r3, #0
 80061c0:	60bb      	str	r3, [r7, #8]
 80061c2:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 80061c8:	f043 0302 	orr.w	r3, r3, #2
 80061cc:	6453      	str	r3, [r2, #68]	; 0x44
 80061ce:	4b07      	ldr	r3, [pc, #28]	; (80061ec <HAL_TIM_PWM_MspInit+0x68>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	40010000 	.word	0x40010000
 80061ec:	40023800 	.word	0x40023800
 80061f0:	40010400 	.word	0x40010400

080061f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	; 0x30
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061fc:	f107 031c 	add.w	r3, r7, #28
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	609a      	str	r2, [r3, #8]
 8006208:	60da      	str	r2, [r3, #12]
 800620a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a32      	ldr	r2, [pc, #200]	; (80062dc <HAL_TIM_Encoder_MspInit+0xe8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d12c      	bne.n	8006270 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	4b31      	ldr	r3, [pc, #196]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	4a30      	ldr	r2, [pc, #192]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006220:	f043 0302 	orr.w	r3, r3, #2
 8006224:	6413      	str	r3, [r2, #64]	; 0x40
 8006226:	4b2e      	ldr	r3, [pc, #184]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	4a29      	ldr	r2, [pc, #164]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	6313      	str	r3, [r2, #48]	; 0x30
 8006242:	4b27      	ldr	r3, [pc, #156]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800624e:	2330      	movs	r3, #48	; 0x30
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006252:	2302      	movs	r3, #2
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625a:	2300      	movs	r3, #0
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800625e:	2302      	movs	r3, #2
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006262:	f107 031c 	add.w	r3, r7, #28
 8006266:	4619      	mov	r1, r3
 8006268:	481e      	ldr	r0, [pc, #120]	; (80062e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 800626a:	f001 fd83 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800626e:	e030      	b.n	80062d2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1c      	ldr	r2, [pc, #112]	; (80062e8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12b      	bne.n	80062d2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 8006284:	f043 0304 	orr.w	r3, r3, #4
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006296:	2300      	movs	r3, #0
 8006298:	60fb      	str	r3, [r7, #12]
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 800629c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 80062a0:	f043 0302 	orr.w	r3, r3, #2
 80062a4:	6313      	str	r3, [r2, #48]	; 0x30
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_TIM_Encoder_MspInit+0xec>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b6:	2302      	movs	r3, #2
 80062b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062be:	2300      	movs	r3, #0
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80062c2:	2302      	movs	r3, #2
 80062c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062c6:	f107 031c 	add.w	r3, r7, #28
 80062ca:	4619      	mov	r1, r3
 80062cc:	4805      	ldr	r0, [pc, #20]	; (80062e4 <HAL_TIM_Encoder_MspInit+0xf0>)
 80062ce:	f001 fd51 	bl	8007d74 <HAL_GPIO_Init>
}
 80062d2:	bf00      	nop
 80062d4:	3730      	adds	r7, #48	; 0x30
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40023800 	.word	0x40023800
 80062e4:	40020400 	.word	0x40020400
 80062e8:	40000800 	.word	0x40000800

080062ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a1c      	ldr	r2, [pc, #112]	; (800636c <HAL_TIM_Base_MspInit+0x80>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d116      	bne.n	800632c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 8006308:	f043 0310 	orr.w	r3, r3, #16
 800630c:	6413      	str	r3, [r2, #64]	; 0x40
 800630e:	4b18      	ldr	r3, [pc, #96]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800631a:	2200      	movs	r2, #0
 800631c:	2101      	movs	r1, #1
 800631e:	2036      	movs	r0, #54	; 0x36
 8006320:	f000 ff99 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006324:	2036      	movs	r0, #54	; 0x36
 8006326:	f000 ffb2 	bl	800728e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800632a:	e01a      	b.n	8006362 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a10      	ldr	r2, [pc, #64]	; (8006374 <HAL_TIM_Base_MspInit+0x88>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d115      	bne.n	8006362 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	60bb      	str	r3, [r7, #8]
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 8006340:	f043 0320 	orr.w	r3, r3, #32
 8006344:	6413      	str	r3, [r2, #64]	; 0x40
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <HAL_TIM_Base_MspInit+0x84>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	60bb      	str	r3, [r7, #8]
 8006350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006352:	2200      	movs	r2, #0
 8006354:	2100      	movs	r1, #0
 8006356:	2037      	movs	r0, #55	; 0x37
 8006358:	f000 ff7d 	bl	8007256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800635c:	2037      	movs	r0, #55	; 0x37
 800635e:	f000 ff96 	bl	800728e <HAL_NVIC_EnableIRQ>
}
 8006362:	bf00      	nop
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	40001000 	.word	0x40001000
 8006370:	40023800 	.word	0x40023800
 8006374:	40001400 	.word	0x40001400

08006378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b08a      	sub	sp, #40	; 0x28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006380:	f107 0314 	add.w	r3, r7, #20
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
 800638a:	609a      	str	r2, [r3, #8]
 800638c:	60da      	str	r2, [r3, #12]
 800638e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a25      	ldr	r2, [pc, #148]	; (800642c <HAL_TIM_MspPostInit+0xb4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d11f      	bne.n	80063da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a23      	ldr	r2, [pc, #140]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b21      	ldr	r3, [pc, #132]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80063b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063bc:	2302      	movs	r3, #2
 80063be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80063c8:	2301      	movs	r3, #1
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063cc:	f107 0314 	add.w	r3, r7, #20
 80063d0:	4619      	mov	r1, r3
 80063d2:	4818      	ldr	r0, [pc, #96]	; (8006434 <HAL_TIM_MspPostInit+0xbc>)
 80063d4:	f001 fcce 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80063d8:	e023      	b.n	8006422 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a16      	ldr	r2, [pc, #88]	; (8006438 <HAL_TIM_MspPostInit+0xc0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d11e      	bne.n	8006422 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	4b11      	ldr	r3, [pc, #68]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	4a10      	ldr	r2, [pc, #64]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063ee:	f043 0304 	orr.w	r3, r3, #4
 80063f2:	6313      	str	r3, [r2, #48]	; 0x30
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_TIM_MspPostInit+0xb8>)
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8006400:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006406:	2302      	movs	r3, #2
 8006408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800640e:	2300      	movs	r3, #0
 8006410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006412:	2303      	movs	r3, #3
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006416:	f107 0314 	add.w	r3, r7, #20
 800641a:	4619      	mov	r1, r3
 800641c:	4807      	ldr	r0, [pc, #28]	; (800643c <HAL_TIM_MspPostInit+0xc4>)
 800641e:	f001 fca9 	bl	8007d74 <HAL_GPIO_Init>
}
 8006422:	bf00      	nop
 8006424:	3728      	adds	r7, #40	; 0x28
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000
 8006430:	40023800 	.word	0x40023800
 8006434:	40020000 	.word	0x40020000
 8006438:	40010400 	.word	0x40010400
 800643c:	40020800 	.word	0x40020800

08006440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	; 0x28
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006448:	f107 0314 	add.w	r3, r7, #20
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	60da      	str	r2, [r3, #12]
 8006456:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <HAL_UART_MspInit+0x84>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d12c      	bne.n	80064bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	4b18      	ldr	r3, [pc, #96]	; (80064c8 <HAL_UART_MspInit+0x88>)
 8006468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <HAL_UART_MspInit+0x88>)
 800646c:	f043 0310 	orr.w	r3, r3, #16
 8006470:	6453      	str	r3, [r2, #68]	; 0x44
 8006472:	4b15      	ldr	r3, [pc, #84]	; (80064c8 <HAL_UART_MspInit+0x88>)
 8006474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006476:	f003 0310 	and.w	r3, r3, #16
 800647a:	613b      	str	r3, [r7, #16]
 800647c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
 8006482:	4b11      	ldr	r3, [pc, #68]	; (80064c8 <HAL_UART_MspInit+0x88>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a10      	ldr	r2, [pc, #64]	; (80064c8 <HAL_UART_MspInit+0x88>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b0e      	ldr	r3, [pc, #56]	; (80064c8 <HAL_UART_MspInit+0x88>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800649a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800649e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064a0:	2302      	movs	r3, #2
 80064a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064a8:	2303      	movs	r3, #3
 80064aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80064ac:	2307      	movs	r3, #7
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b0:	f107 0314 	add.w	r3, r7, #20
 80064b4:	4619      	mov	r1, r3
 80064b6:	4805      	ldr	r0, [pc, #20]	; (80064cc <HAL_UART_MspInit+0x8c>)
 80064b8:	f001 fc5c 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80064bc:	bf00      	nop
 80064be:	3728      	adds	r7, #40	; 0x28
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40011000 	.word	0x40011000
 80064c8:	40023800 	.word	0x40023800
 80064cc:	40020000 	.word	0x40020000

080064d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80064d4:	e7fe      	b.n	80064d4 <NMI_Handler+0x4>

080064d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80064d6:	b480      	push	{r7}
 80064d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80064da:	e7fe      	b.n	80064da <HardFault_Handler+0x4>

080064dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80064e0:	e7fe      	b.n	80064e0 <MemManage_Handler+0x4>

080064e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064e2:	b480      	push	{r7}
 80064e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064e6:	e7fe      	b.n	80064e6 <BusFault_Handler+0x4>

080064e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064ec:	e7fe      	b.n	80064ec <UsageFault_Handler+0x4>

080064ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064ee:	b480      	push	{r7}
 80064f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006500:	bf00      	nop
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800650e:	bf00      	nop
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800651c:	f000 f98a 	bl	8006834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006520:	bf00      	nop
 8006522:	bd80      	pop	{r7, pc}

08006524 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006528:	4802      	ldr	r0, [pc, #8]	; (8006534 <TIM6_DAC_IRQHandler+0x10>)
 800652a:	f003 fa38 	bl	800999e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800652e:	bf00      	nop
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20016334 	.word	0x20016334

08006538 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800653c:	4802      	ldr	r0, [pc, #8]	; (8006548 <TIM7_IRQHandler+0x10>)
 800653e:	f003 fa2e 	bl	800999e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006542:	bf00      	nop
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	2001641c 	.word	0x2001641c

0800654c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006550:	4802      	ldr	r0, [pc, #8]	; (800655c <DMA2_Stream0_IRQHandler+0x10>)
 8006552:	f000 ffbd 	bl	80074d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006556:	bf00      	nop
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200162d4 	.word	0x200162d4

08006560 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006564:	4802      	ldr	r0, [pc, #8]	; (8006570 <DMA2_Stream2_IRQHandler+0x10>)
 8006566:	f000 ffb3 	bl	80074d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800656a:	bf00      	nop
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	200163bc 	.word	0x200163bc

08006574 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	2b52      	cmp	r3, #82	; 0x52
 8006586:	d10a      	bne.n	800659e <getSwitchStatus+0x2a>
 8006588:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800658c:	480d      	ldr	r0, [pc, #52]	; (80065c4 <getSwitchStatus+0x50>)
 800658e:	f001 fd8b 	bl	80080a8 <HAL_GPIO_ReadPin>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d102      	bne.n	800659e <getSwitchStatus+0x2a>
		ret = 1;
 8006598:	2301      	movs	r3, #1
 800659a:	81fb      	strh	r3, [r7, #14]
 800659c:	e00c      	b.n	80065b8 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	2b4c      	cmp	r3, #76	; 0x4c
 80065a2:	d109      	bne.n	80065b8 <getSwitchStatus+0x44>
 80065a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065a8:	4806      	ldr	r0, [pc, #24]	; (80065c4 <getSwitchStatus+0x50>)
 80065aa:	f001 fd7d 	bl	80080a8 <HAL_GPIO_ReadPin>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <getSwitchStatus+0x44>
		ret = 1;
 80065b4:	2301      	movs	r3, #1
 80065b6:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80065b8:	89fb      	ldrh	r3, [r7, #14]

}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	40020000 	.word	0x40020000

080065c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065d4:	2300      	movs	r3, #0
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	e00a      	b.n	80065f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80065da:	f3af 8000 	nop.w
 80065de:	4601      	mov	r1, r0
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	60ba      	str	r2, [r7, #8]
 80065e6:	b2ca      	uxtb	r2, r1
 80065e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	dbf0      	blt.n	80065da <_read+0x12>
	}

return len;
 80065f8:	687b      	ldr	r3, [r7, #4]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	e009      	b.n	8006628 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	1c5a      	adds	r2, r3, #1
 8006618:	60ba      	str	r2, [r7, #8]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd fc61 	bl	8003ee4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	3301      	adds	r3, #1
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	dbf1      	blt.n	8006614 <_write+0x12>
	}
	return len;
 8006630:	687b      	ldr	r3, [r7, #4]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <_close>:

int _close(int file)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
	return -1;
 8006642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006662:	605a      	str	r2, [r3, #4]
	return 0;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <_isatty>:

int _isatty(int file)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
	return 1;
 800667a:	2301      	movs	r3, #1
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
	return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066ac:	4a14      	ldr	r2, [pc, #80]	; (8006700 <_sbrk+0x5c>)
 80066ae:	4b15      	ldr	r3, [pc, #84]	; (8006704 <_sbrk+0x60>)
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <_sbrk+0x64>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <_sbrk+0x64>)
 80066c2:	4a12      	ldr	r2, [pc, #72]	; (800670c <_sbrk+0x68>)
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066c6:	4b10      	ldr	r3, [pc, #64]	; (8006708 <_sbrk+0x64>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4413      	add	r3, r2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d207      	bcs.n	80066e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066d4:	f005 fe3e 	bl	800c354 <__errno>
 80066d8:	4602      	mov	r2, r0
 80066da:	230c      	movs	r3, #12
 80066dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	e009      	b.n	80066f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066e4:	4b08      	ldr	r3, [pc, #32]	; (8006708 <_sbrk+0x64>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066ea:	4b07      	ldr	r3, [pc, #28]	; (8006708 <_sbrk+0x64>)
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	4a05      	ldr	r2, [pc, #20]	; (8006708 <_sbrk+0x64>)
 80066f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066f6:	68fb      	ldr	r3, [r7, #12]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20020000 	.word	0x20020000
 8006704:	00000400 	.word	0x00000400
 8006708:	20015f44 	.word	0x20015f44
 800670c:	20016498 	.word	0x20016498

08006710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <SystemInit+0x28>)
 8006716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671a:	4a07      	ldr	r2, [pc, #28]	; (8006738 <SystemInit+0x28>)
 800671c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006724:	4b04      	ldr	r3, [pc, #16]	; (8006738 <SystemInit+0x28>)
 8006726:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800672a:	609a      	str	r2, [r3, #8]
#endif
}
 800672c:	bf00      	nop
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	e000ed00 	.word	0xe000ed00

0800673c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800673c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006774 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006740:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006742:	e003      	b.n	800674c <LoopCopyDataInit>

08006744 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006746:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006748:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800674a:	3104      	adds	r1, #4

0800674c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800674c:	480b      	ldr	r0, [pc, #44]	; (800677c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800674e:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006750:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006752:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006754:	d3f6      	bcc.n	8006744 <CopyDataInit>
  ldr  r2, =_sbss
 8006756:	4a0b      	ldr	r2, [pc, #44]	; (8006784 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006758:	e002      	b.n	8006760 <LoopFillZerobss>

0800675a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800675a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800675c:	f842 3b04 	str.w	r3, [r2], #4

08006760 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006762:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006764:	d3f9      	bcc.n	800675a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006766:	f7ff ffd3 	bl	8006710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800676a:	f005 fdf9 	bl	800c360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800676e:	f7fd fc33 	bl	8003fd8 <main>
  bx  lr    
 8006772:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006774:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006778:	08010e10 	.word	0x08010e10
  ldr  r0, =_sdata
 800677c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006780:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006784:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8006788:	20016494 	.word	0x20016494

0800678c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800678c:	e7fe      	b.n	800678c <ADC_IRQHandler>
	...

08006790 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <HAL_Init+0x40>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <HAL_Init+0x40>)
 800679a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800679e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <HAL_Init+0x40>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	; (80067d0 <HAL_Init+0x40>)
 80067a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <HAL_Init+0x40>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <HAL_Init+0x40>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067b8:	2003      	movs	r0, #3
 80067ba:	f000 fd41 	bl	8007240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067be:	2000      	movs	r0, #0
 80067c0:	f000 f808 	bl	80067d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067c4:	f7ff fb10 	bl	8005de8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40023c00 	.word	0x40023c00

080067d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067dc:	4b12      	ldr	r3, [pc, #72]	; (8006828 <HAL_InitTick+0x54>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_InitTick+0x58>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4619      	mov	r1, r3
 80067e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fd59 	bl	80072aa <HAL_SYSTICK_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e00e      	b.n	8006820 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d80a      	bhi.n	800681e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006808:	2200      	movs	r2, #0
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	f000 fd21 	bl	8007256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006814:	4a06      	ldr	r2, [pc, #24]	; (8006830 <HAL_InitTick+0x5c>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800681a:	2300      	movs	r3, #0
 800681c:	e000      	b.n	8006820 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000034 	.word	0x20000034
 800682c:	2000003c 	.word	0x2000003c
 8006830:	20000038 	.word	0x20000038

08006834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006838:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_IncTick+0x20>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_IncTick+0x24>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4413      	add	r3, r2
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <HAL_IncTick+0x24>)
 8006846:	6013      	str	r3, [r2, #0]
}
 8006848:	bf00      	nop
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	2000003c 	.word	0x2000003c
 8006858:	2001646c 	.word	0x2001646c

0800685c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
  return uwTick;
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <HAL_GetTick+0x14>)
 8006862:	681b      	ldr	r3, [r3, #0]
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	2001646c 	.word	0x2001646c

08006874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800687c:	f7ff ffee 	bl	800685c <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d005      	beq.n	800689a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <HAL_Delay+0x40>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800689a:	bf00      	nop
 800689c:	f7ff ffde 	bl	800685c <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d8f7      	bhi.n	800689c <HAL_Delay+0x28>
  {
  }
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2000003c 	.word	0x2000003c

080068b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e033      	b.n	8006936 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff faae 	bl	8005e38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d118      	bne.n	8006928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068fe:	f023 0302 	bic.w	r3, r3, #2
 8006902:	f043 0202 	orr.w	r2, r3, #2
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa4a 	bl	8006da4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	f023 0303 	bic.w	r3, r3, #3
 800691e:	f043 0201 	orr.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	641a      	str	r2, [r3, #64]	; 0x40
 8006926:	e001      	b.n	800692c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
	...

08006940 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_ADC_Start_DMA+0x1e>
 800695a:	2302      	movs	r3, #2
 800695c:	e0cc      	b.n	8006af8 <HAL_ADC_Start_DMA+0x1b8>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	2b01      	cmp	r3, #1
 8006972:	d018      	beq.n	80069a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006984:	4b5e      	ldr	r3, [pc, #376]	; (8006b00 <HAL_ADC_Start_DMA+0x1c0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a5e      	ldr	r2, [pc, #376]	; (8006b04 <HAL_ADC_Start_DMA+0x1c4>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0c9a      	lsrs	r2, r3, #18
 8006990:	4613      	mov	r3, r2
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	4413      	add	r3, r2
 8006996:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006998:	e002      	b.n	80069a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	3b01      	subs	r3, #1
 800699e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f9      	bne.n	800699a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	f040 80a0 	bne.w	8006af6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f4:	d106      	bne.n	8006a04 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f023 0206 	bic.w	r2, r3, #6
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
 8006a02:	e002      	b.n	8006a0a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a12:	4b3d      	ldr	r3, [pc, #244]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006a14:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	4a3c      	ldr	r2, [pc, #240]	; (8006b0c <HAL_ADC_Start_DMA+0x1cc>)
 8006a1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	4a3b      	ldr	r2, [pc, #236]	; (8006b10 <HAL_ADC_Start_DMA+0x1d0>)
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_ADC_Start_DMA+0x1d4>)
 8006a2c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006a36:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006a46:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a56:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	334c      	adds	r3, #76	; 0x4c
 8006a62:	4619      	mov	r1, r3
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f000 fcda 	bl	8007420 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d12a      	bne.n	8006ace <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a26      	ldr	r2, [pc, #152]	; (8006b18 <HAL_ADC_Start_DMA+0x1d8>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d015      	beq.n	8006aae <HAL_ADC_Start_DMA+0x16e>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a25      	ldr	r2, [pc, #148]	; (8006b1c <HAL_ADC_Start_DMA+0x1dc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d105      	bne.n	8006a98 <HAL_ADC_Start_DMA+0x158>
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00a      	beq.n	8006aae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a20      	ldr	r2, [pc, #128]	; (8006b20 <HAL_ADC_Start_DMA+0x1e0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d129      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
 8006aa2:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <HAL_ADC_Start_DMA+0x1c8>)
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f003 031f 	and.w	r3, r3, #31
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d823      	bhi.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11c      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689a      	ldr	r2, [r3, #8]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006aca:	609a      	str	r2, [r3, #8]
 8006acc:	e013      	b.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <HAL_ADC_Start_DMA+0x1d8>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10e      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d107      	bne.n	8006af6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006af4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000034 	.word	0x20000034
 8006b04:	431bde83 	.word	0x431bde83
 8006b08:	40012300 	.word	0x40012300
 8006b0c:	08006f9d 	.word	0x08006f9d
 8006b10:	08007057 	.word	0x08007057
 8006b14:	08007073 	.word	0x08007073
 8006b18:	40012000 	.word	0x40012000
 8006b1c:	40012100 	.word	0x40012100
 8006b20:	40012200 	.word	0x40012200

08006b24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e105      	b.n	8006d88 <HAL_ADC_ConfigChannel+0x228>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b09      	cmp	r3, #9
 8006b8a:	d925      	bls.n	8006bd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68d9      	ldr	r1, [r3, #12]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3b1e      	subs	r3, #30
 8006ba2:	2207      	movs	r2, #7
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43da      	mvns	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	400a      	ands	r2, r1
 8006bb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68d9      	ldr	r1, [r3, #12]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4403      	add	r3, r0
 8006bca:	3b1e      	subs	r3, #30
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	60da      	str	r2, [r3, #12]
 8006bd6:	e022      	b.n	8006c1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6919      	ldr	r1, [r3, #16]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	2207      	movs	r2, #7
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	43da      	mvns	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6919      	ldr	r1, [r3, #16]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4403      	add	r3, r0
 8006c14:	409a      	lsls	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2b06      	cmp	r3, #6
 8006c24:	d824      	bhi.n	8006c70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	3b05      	subs	r3, #5
 8006c38:	221f      	movs	r2, #31
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	43da      	mvns	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	400a      	ands	r2, r1
 8006c46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	4618      	mov	r0, r3
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	3b05      	subs	r3, #5
 8006c62:	fa00 f203 	lsl.w	r2, r0, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8006c6e:	e04c      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d824      	bhi.n	8006cc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	3b23      	subs	r3, #35	; 0x23
 8006c8a:	221f      	movs	r2, #31
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	43da      	mvns	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	400a      	ands	r2, r1
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3b23      	subs	r3, #35	; 0x23
 8006cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006cc0:	e023      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3b41      	subs	r3, #65	; 0x41
 8006cd4:	221f      	movs	r2, #31
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	400a      	ands	r2, r1
 8006ce2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3b41      	subs	r3, #65	; 0x41
 8006cfe:	fa00 f203 	lsl.w	r2, r0, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d0a:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <HAL_ADC_ConfigChannel+0x234>)
 8006d0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a21      	ldr	r2, [pc, #132]	; (8006d98 <HAL_ADC_ConfigChannel+0x238>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d109      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x1cc>
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b12      	cmp	r3, #18
 8006d1e:	d105      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a19      	ldr	r2, [pc, #100]	; (8006d98 <HAL_ADC_ConfigChannel+0x238>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d123      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x21e>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d003      	beq.n	8006d46 <HAL_ADC_ConfigChannel+0x1e6>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b11      	cmp	r3, #17
 8006d44:	d11b      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b10      	cmp	r3, #16
 8006d58:	d111      	bne.n	8006d7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006d5a:	4b10      	ldr	r3, [pc, #64]	; (8006d9c <HAL_ADC_ConfigChannel+0x23c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <HAL_ADC_ConfigChannel+0x240>)
 8006d60:	fba2 2303 	umull	r2, r3, r2, r3
 8006d64:	0c9a      	lsrs	r2, r3, #18
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d70:	e002      	b.n	8006d78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3b01      	subs	r3, #1
 8006d76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f9      	bne.n	8006d72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3714      	adds	r7, #20
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40012300 	.word	0x40012300
 8006d98:	40012000 	.word	0x40012000
 8006d9c:	20000034 	.word	0x20000034
 8006da0:	431bde83 	.word	0x431bde83

08006da4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dac:	4b79      	ldr	r3, [pc, #484]	; (8006f94 <ADC_Init+0x1f0>)
 8006dae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	431a      	orrs	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6859      	ldr	r1, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	021a      	lsls	r2, r3, #8
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6859      	ldr	r1, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	4a58      	ldr	r2, [pc, #352]	; (8006f98 <ADC_Init+0x1f4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	689a      	ldr	r2, [r3, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6899      	ldr	r1, [r3, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6899      	ldr	r1, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]
 8006e80:	e00f      	b.n	8006ea2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689a      	ldr	r2, [r3, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ea0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 0202 	bic.w	r2, r2, #2
 8006eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	6899      	ldr	r1, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7e1b      	ldrb	r3, [r3, #24]
 8006ebc:	005a      	lsls	r2, r3, #1
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01b      	beq.n	8006f08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ede:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685a      	ldr	r2, [r3, #4]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006eee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	3b01      	subs	r3, #1
 8006efc:	035a      	lsls	r2, r3, #13
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	e007      	b.n	8006f18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	051a      	lsls	r2, r3, #20
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6899      	ldr	r1, [r3, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f5a:	025a      	lsls	r2, r3, #9
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	029a      	lsls	r2, r3, #10
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	609a      	str	r2, [r3, #8]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	40012300 	.word	0x40012300
 8006f98:	0f000001 	.word	0x0f000001

08006f9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d13c      	bne.n	8007030 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d12b      	bne.n	8007028 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d127      	bne.n	8007028 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d006      	beq.n	8006ff4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d119      	bne.n	8007028 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0220 	bic.w	r2, r2, #32
 8007002:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d105      	bne.n	8007028 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f043 0201 	orr.w	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f7ff fd7b 	bl	8006b24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800702e:	e00e      	b.n	800704e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fd85 	bl	8006b4c <HAL_ADC_ErrorCallback>
}
 8007042:	e004      	b.n	800704e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff fd67 	bl	8006b38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2240      	movs	r2, #64	; 0x40
 8007084:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708a:	f043 0204 	orr.w	r2, r3, #4
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fd5a 	bl	8006b4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <__NVIC_SetPriorityGrouping+0x44>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070bc:	4013      	ands	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070d2:	4a04      	ldr	r2, [pc, #16]	; (80070e4 <__NVIC_SetPriorityGrouping+0x44>)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	60d3      	str	r3, [r2, #12]
}
 80070d8:	bf00      	nop
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e000ed00 	.word	0xe000ed00

080070e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <__NVIC_GetPriorityGrouping+0x18>)
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	0a1b      	lsrs	r3, r3, #8
 80070f2:	f003 0307 	and.w	r3, r3, #7
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007112:	2b00      	cmp	r3, #0
 8007114:	db0b      	blt.n	800712e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	f003 021f 	and.w	r2, r3, #31
 800711c:	4907      	ldr	r1, [pc, #28]	; (800713c <__NVIC_EnableIRQ+0x38>)
 800711e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	2001      	movs	r0, #1
 8007126:	fa00 f202 	lsl.w	r2, r0, r2
 800712a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	e000e100 	.word	0xe000e100

08007140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	4603      	mov	r3, r0
 8007148:	6039      	str	r1, [r7, #0]
 800714a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800714c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007150:	2b00      	cmp	r3, #0
 8007152:	db0a      	blt.n	800716a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	490c      	ldr	r1, [pc, #48]	; (800718c <__NVIC_SetPriority+0x4c>)
 800715a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715e:	0112      	lsls	r2, r2, #4
 8007160:	b2d2      	uxtb	r2, r2
 8007162:	440b      	add	r3, r1
 8007164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007168:	e00a      	b.n	8007180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	4908      	ldr	r1, [pc, #32]	; (8007190 <__NVIC_SetPriority+0x50>)
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	3b04      	subs	r3, #4
 8007178:	0112      	lsls	r2, r2, #4
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	440b      	add	r3, r1
 800717e:	761a      	strb	r2, [r3, #24]
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	e000e100 	.word	0xe000e100
 8007190:	e000ed00 	.word	0xe000ed00

08007194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007194:	b480      	push	{r7}
 8007196:	b089      	sub	sp, #36	; 0x24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	f1c3 0307 	rsb	r3, r3, #7
 80071ae:	2b04      	cmp	r3, #4
 80071b0:	bf28      	it	cs
 80071b2:	2304      	movcs	r3, #4
 80071b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3304      	adds	r3, #4
 80071ba:	2b06      	cmp	r3, #6
 80071bc:	d902      	bls.n	80071c4 <NVIC_EncodePriority+0x30>
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3b03      	subs	r3, #3
 80071c2:	e000      	b.n	80071c6 <NVIC_EncodePriority+0x32>
 80071c4:	2300      	movs	r3, #0
 80071c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	fa02 f303 	lsl.w	r3, r2, r3
 80071d2:	43da      	mvns	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	401a      	ands	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071dc:	f04f 31ff 	mov.w	r1, #4294967295
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	fa01 f303 	lsl.w	r3, r1, r3
 80071e6:	43d9      	mvns	r1, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071ec:	4313      	orrs	r3, r2
         );
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3724      	adds	r7, #36	; 0x24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3b01      	subs	r3, #1
 8007208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800720c:	d301      	bcc.n	8007212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800720e:	2301      	movs	r3, #1
 8007210:	e00f      	b.n	8007232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007212:	4a0a      	ldr	r2, [pc, #40]	; (800723c <SysTick_Config+0x40>)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b01      	subs	r3, #1
 8007218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800721a:	210f      	movs	r1, #15
 800721c:	f04f 30ff 	mov.w	r0, #4294967295
 8007220:	f7ff ff8e 	bl	8007140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007224:	4b05      	ldr	r3, [pc, #20]	; (800723c <SysTick_Config+0x40>)
 8007226:	2200      	movs	r2, #0
 8007228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800722a:	4b04      	ldr	r3, [pc, #16]	; (800723c <SysTick_Config+0x40>)
 800722c:	2207      	movs	r2, #7
 800722e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	e000e010 	.word	0xe000e010

08007240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff29 	bl	80070a0 <__NVIC_SetPriorityGrouping>
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007256:	b580      	push	{r7, lr}
 8007258:	b086      	sub	sp, #24
 800725a:	af00      	add	r7, sp, #0
 800725c:	4603      	mov	r3, r0
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
 8007262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007268:	f7ff ff3e 	bl	80070e8 <__NVIC_GetPriorityGrouping>
 800726c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	6978      	ldr	r0, [r7, #20]
 8007274:	f7ff ff8e 	bl	8007194 <NVIC_EncodePriority>
 8007278:	4602      	mov	r2, r0
 800727a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800727e:	4611      	mov	r1, r2
 8007280:	4618      	mov	r0, r3
 8007282:	f7ff ff5d 	bl	8007140 <__NVIC_SetPriority>
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	4603      	mov	r3, r0
 8007296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ff31 	bl	8007104 <__NVIC_EnableIRQ>
}
 80072a2:	bf00      	nop
 80072a4:	3708      	adds	r7, #8
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7ff ffa2 	bl	80071fc <SysTick_Config>
 80072b8:	4603      	mov	r3, r0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80072d0:	f7ff fac4 	bl	800685c <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e099      	b.n	8007414 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0201 	bic.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007300:	e00f      	b.n	8007322 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007302:	f7ff faab 	bl	800685c <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b05      	cmp	r3, #5
 800730e:	d908      	bls.n	8007322 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2220      	movs	r2, #32
 8007314:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2203      	movs	r2, #3
 800731a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e078      	b.n	8007414 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e8      	bne.n	8007302 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	4b38      	ldr	r3, [pc, #224]	; (800741c <HAL_DMA_Init+0x158>)
 800733c:	4013      	ands	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800734e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800735a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b04      	cmp	r3, #4
 800737a:	d107      	bne.n	800738c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	4313      	orrs	r3, r2
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4313      	orrs	r3, r2
 800738a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0307 	bic.w	r3, r3, #7
 80073a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d117      	bne.n	80073e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00e      	beq.n	80073e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fa6f 	bl	80078ac <DMA_CheckFifoParam>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2240      	movs	r2, #64	; 0x40
 80073d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80073e2:	2301      	movs	r3, #1
 80073e4:	e016      	b.n	8007414 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fa26 	bl	8007840 <DMA_CalcBaseAndBitshift>
 80073f4:	4603      	mov	r3, r0
 80073f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fc:	223f      	movs	r2, #63	; 0x3f
 80073fe:	409a      	lsls	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	f010803f 	.word	0xf010803f

08007420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007436:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800743e:	2b01      	cmp	r3, #1
 8007440:	d101      	bne.n	8007446 <HAL_DMA_Start_IT+0x26>
 8007442:	2302      	movs	r3, #2
 8007444:	e040      	b.n	80074c8 <HAL_DMA_Start_IT+0xa8>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b01      	cmp	r3, #1
 8007458:	d12f      	bne.n	80074ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2202      	movs	r2, #2
 800745e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 f9b8 	bl	80077e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007478:	223f      	movs	r2, #63	; 0x3f
 800747a:	409a      	lsls	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0216 	orr.w	r2, r2, #22
 800748e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 0208 	orr.w	r2, r2, #8
 80074a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	e005      	b.n	80074c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
 80074c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074dc:	4b92      	ldr	r3, [pc, #584]	; (8007728 <HAL_DMA_IRQHandler+0x258>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a92      	ldr	r2, [pc, #584]	; (800772c <HAL_DMA_IRQHandler+0x25c>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	0a9b      	lsrs	r3, r3, #10
 80074e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	2208      	movs	r2, #8
 80074fc:	409a      	lsls	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d01a      	beq.n	800753c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 0204 	bic.w	r2, r2, #4
 8007522:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007528:	2208      	movs	r2, #8
 800752a:	409a      	lsls	r2, r3
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007534:	f043 0201 	orr.w	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007540:	2201      	movs	r2, #1
 8007542:	409a      	lsls	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4013      	ands	r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	d012      	beq.n	8007572 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800755e:	2201      	movs	r2, #1
 8007560:	409a      	lsls	r2, r3
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f043 0202 	orr.w	r2, r3, #2
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007576:	2204      	movs	r2, #4
 8007578:	409a      	lsls	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4013      	ands	r3, r2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d012      	beq.n	80075a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007594:	2204      	movs	r2, #4
 8007596:	409a      	lsls	r2, r3
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f043 0204 	orr.w	r2, r3, #4
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	2210      	movs	r2, #16
 80075ae:	409a      	lsls	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d043      	beq.n	8007640 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d03c      	beq.n	8007640 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	2210      	movs	r2, #16
 80075cc:	409a      	lsls	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d018      	beq.n	8007612 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d108      	bne.n	8007600 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d024      	beq.n	8007640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
 80075fe:	e01f      	b.n	8007640 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01b      	beq.n	8007640 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	4798      	blx	r3
 8007610:	e016      	b.n	8007640 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761c:	2b00      	cmp	r3, #0
 800761e:	d107      	bne.n	8007630 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0208 	bic.w	r2, r2, #8
 800762e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007644:	2220      	movs	r2, #32
 8007646:	409a      	lsls	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4013      	ands	r3, r2
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 808e 	beq.w	800776e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 8086 	beq.w	800776e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	2220      	movs	r2, #32
 8007668:	409a      	lsls	r2, r3
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b05      	cmp	r3, #5
 8007678:	d136      	bne.n	80076e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 0216 	bic.w	r2, r2, #22
 8007688:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695a      	ldr	r2, [r3, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007698:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d103      	bne.n	80076aa <HAL_DMA_IRQHandler+0x1da>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d007      	beq.n	80076ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0208 	bic.w	r2, r2, #8
 80076b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076be:	223f      	movs	r2, #63	; 0x3f
 80076c0:	409a      	lsls	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d07d      	beq.n	80077da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
        }
        return;
 80076e6:	e078      	b.n	80077da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01c      	beq.n	8007730 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d108      	bne.n	8007716 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007708:	2b00      	cmp	r3, #0
 800770a:	d030      	beq.n	800776e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	4798      	blx	r3
 8007714:	e02b      	b.n	800776e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	2b00      	cmp	r3, #0
 800771c:	d027      	beq.n	800776e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	4798      	blx	r3
 8007726:	e022      	b.n	800776e <HAL_DMA_IRQHandler+0x29e>
 8007728:	20000034 	.word	0x20000034
 800772c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0210 	bic.w	r2, r2, #16
 800774c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007772:	2b00      	cmp	r3, #0
 8007774:	d032      	beq.n	80077dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d022      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2205      	movs	r2, #5
 8007786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	3301      	adds	r3, #1
 800779e:	60bb      	str	r3, [r7, #8]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d307      	bcc.n	80077b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f2      	bne.n	800779a <HAL_DMA_IRQHandler+0x2ca>
 80077b4:	e000      	b.n	80077b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80077b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d005      	beq.n	80077dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	e000      	b.n	80077dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80077da:	bf00      	nop
    }
  }
}
 80077dc:	3718      	adds	r7, #24
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop

080077e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007800:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d108      	bne.n	8007824 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007822:	e007      	b.n	8007834 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	60da      	str	r2, [r3, #12]
}
 8007834:	bf00      	nop
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	b2db      	uxtb	r3, r3
 800784e:	3b10      	subs	r3, #16
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <DMA_CalcBaseAndBitshift+0x64>)
 8007852:	fba2 2303 	umull	r2, r3, r2, r3
 8007856:	091b      	lsrs	r3, r3, #4
 8007858:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800785a:	4a13      	ldr	r2, [pc, #76]	; (80078a8 <DMA_CalcBaseAndBitshift+0x68>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b03      	cmp	r3, #3
 800786c:	d909      	bls.n	8007882 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	1d1a      	adds	r2, r3, #4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	659a      	str	r2, [r3, #88]	; 0x58
 8007880:	e007      	b.n	8007892 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800788a:	f023 0303 	bic.w	r3, r3, #3
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	aaaaaaab 	.word	0xaaaaaaab
 80078a8:	080108bc 	.word	0x080108bc

080078ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11f      	bne.n	8007906 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d855      	bhi.n	8007978 <DMA_CheckFifoParam+0xcc>
 80078cc:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <DMA_CheckFifoParam+0x28>)
 80078ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d2:	bf00      	nop
 80078d4:	080078e5 	.word	0x080078e5
 80078d8:	080078f7 	.word	0x080078f7
 80078dc:	080078e5 	.word	0x080078e5
 80078e0:	08007979 	.word	0x08007979
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d045      	beq.n	800797c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078f4:	e042      	b.n	800797c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078fe:	d13f      	bne.n	8007980 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007904:	e03c      	b.n	8007980 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800790e:	d121      	bne.n	8007954 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b03      	cmp	r3, #3
 8007914:	d836      	bhi.n	8007984 <DMA_CheckFifoParam+0xd8>
 8007916:	a201      	add	r2, pc, #4	; (adr r2, 800791c <DMA_CheckFifoParam+0x70>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	0800792d 	.word	0x0800792d
 8007920:	08007933 	.word	0x08007933
 8007924:	0800792d 	.word	0x0800792d
 8007928:	08007945 	.word	0x08007945
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	73fb      	strb	r3, [r7, #15]
      break;
 8007930:	e02f      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d024      	beq.n	8007988 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007942:	e021      	b.n	8007988 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800794c:	d11e      	bne.n	800798c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007952:	e01b      	b.n	800798c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d902      	bls.n	8007960 <DMA_CheckFifoParam+0xb4>
 800795a:	2b03      	cmp	r3, #3
 800795c:	d003      	beq.n	8007966 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800795e:	e018      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
      break;
 8007964:	e015      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	73fb      	strb	r3, [r7, #15]
      break;
 8007976:	e00b      	b.n	8007990 <DMA_CheckFifoParam+0xe4>
      break;
 8007978:	bf00      	nop
 800797a:	e00a      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 800797c:	bf00      	nop
 800797e:	e008      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 8007980:	bf00      	nop
 8007982:	e006      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 8007984:	bf00      	nop
 8007986:	e004      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 8007988:	bf00      	nop
 800798a:	e002      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;   
 800798c:	bf00      	nop
 800798e:	e000      	b.n	8007992 <DMA_CheckFifoParam+0xe6>
      break;
 8007990:	bf00      	nop
    }
  } 
  
  return status; 
 8007992:	7bfb      	ldrb	r3, [r7, #15]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80079a6:	2300      	movs	r3, #0
 80079a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80079aa:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <HAL_FLASH_Unlock+0x38>)
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da0b      	bge.n	80079ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80079b2:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <HAL_FLASH_Unlock+0x38>)
 80079b4:	4a09      	ldr	r2, [pc, #36]	; (80079dc <HAL_FLASH_Unlock+0x3c>)
 80079b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80079b8:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <HAL_FLASH_Unlock+0x38>)
 80079ba:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <HAL_FLASH_Unlock+0x40>)
 80079bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80079be:	4b06      	ldr	r3, [pc, #24]	; (80079d8 <HAL_FLASH_Unlock+0x38>)
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	da01      	bge.n	80079ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80079ca:	79fb      	ldrb	r3, [r7, #7]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40023c00 	.word	0x40023c00
 80079dc:	45670123 	.word	0x45670123
 80079e0:	cdef89ab 	.word	0xcdef89ab

080079e4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80079e8:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <HAL_FLASH_Lock+0x1c>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	4a04      	ldr	r2, [pc, #16]	; (8007a00 <HAL_FLASH_Lock+0x1c>)
 80079ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079f2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	40023c00 	.word	0x40023c00

08007a04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <FLASH_WaitForLastOperation+0x78>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007a16:	f7fe ff21 	bl	800685c <HAL_GetTick>
 8007a1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007a1c:	e010      	b.n	8007a40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a24:	d00c      	beq.n	8007a40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d007      	beq.n	8007a3c <FLASH_WaitForLastOperation+0x38>
 8007a2c:	f7fe ff16 	bl	800685c <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d201      	bcs.n	8007a40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e019      	b.n	8007a74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <FLASH_WaitForLastOperation+0x7c>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e8      	bne.n	8007a1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <FLASH_WaitForLastOperation+0x7c>)
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <FLASH_WaitForLastOperation+0x7c>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007a5e:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <FLASH_WaitForLastOperation+0x7c>)
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007a6a:	f000 f80b 	bl	8007a84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e000      	b.n	8007a74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
  
}  
 8007a74:	4618      	mov	r0, r3
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20016470 	.word	0x20016470
 8007a80:	40023c00 	.word	0x40023c00

08007a84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007a88:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f003 0310 	and.w	r3, r3, #16
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d008      	beq.n	8007aa6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	f043 0310 	orr.w	r3, r3, #16
 8007a9c:	4a23      	ldr	r2, [pc, #140]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007a9e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007aa0:	4b21      	ldr	r3, [pc, #132]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007aa2:	2210      	movs	r2, #16
 8007aa4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007aa6:	4b20      	ldr	r3, [pc, #128]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d008      	beq.n	8007ac4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f043 0308 	orr.w	r3, r3, #8
 8007aba:	4a1c      	ldr	r2, [pc, #112]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007abc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007abe:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007ac4:	4b18      	ldr	r3, [pc, #96]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d008      	beq.n	8007ae2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007ad0:	4b16      	ldr	r3, [pc, #88]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f043 0304 	orr.w	r3, r3, #4
 8007ad8:	4a14      	ldr	r2, [pc, #80]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007ada:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007adc:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007ade:	2240      	movs	r2, #64	; 0x40
 8007ae0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007ae2:	4b11      	ldr	r3, [pc, #68]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f043 0302 	orr.w	r3, r3, #2
 8007af6:	4a0d      	ldr	r2, [pc, #52]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007af8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007b00:	4b09      	ldr	r3, [pc, #36]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f043 0320 	orr.w	r3, r3, #32
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <FLASH_SetErrorCode+0xa8>)
 8007b16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007b18:	4b03      	ldr	r3, [pc, #12]	; (8007b28 <FLASH_SetErrorCode+0xa4>)
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	60da      	str	r2, [r3, #12]
  }
}
 8007b1e:	bf00      	nop
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40023c00 	.word	0x40023c00
 8007b2c:	20016470 	.word	0x20016470

08007b30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007b42:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <HAL_FLASHEx_Erase+0xd8>)
 8007b44:	7e1b      	ldrb	r3, [r3, #24]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_FLASHEx_Erase+0x1e>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e058      	b.n	8007c00 <HAL_FLASHEx_Erase+0xd0>
 8007b4e:	4b2e      	ldr	r3, [pc, #184]	; (8007c08 <HAL_FLASHEx_Erase+0xd8>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b58:	f7ff ff54 	bl	8007a04 <FLASH_WaitForLastOperation>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d148      	bne.n	8007bf8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d115      	bne.n	8007ba2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f000 f844 	bl	8007c10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b8c:	f7ff ff3a 	bl	8007a04 <FLASH_WaitForLastOperation>
 8007b90:	4603      	mov	r3, r0
 8007b92:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <HAL_FLASHEx_Erase+0xdc>)
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	4a1c      	ldr	r2, [pc, #112]	; (8007c0c <HAL_FLASHEx_Erase+0xdc>)
 8007b9a:	f023 0304 	bic.w	r3, r3, #4
 8007b9e:	6113      	str	r3, [r2, #16]
 8007ba0:	e028      	b.n	8007bf4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]
 8007ba8:	e01c      	b.n	8007be4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68b8      	ldr	r0, [r7, #8]
 8007bb4:	f000 f850 	bl	8007c58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bbc:	f7ff ff22 	bl	8007a04 <FLASH_WaitForLastOperation>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007bc4:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <HAL_FLASHEx_Erase+0xdc>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	4a10      	ldr	r2, [pc, #64]	; (8007c0c <HAL_FLASHEx_Erase+0xdc>)
 8007bca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007bce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	601a      	str	r2, [r3, #0]
          break;
 8007bdc:	e00a      	b.n	8007bf4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	3301      	adds	r3, #1
 8007be2:	60bb      	str	r3, [r7, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	4413      	add	r3, r2
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d3da      	bcc.n	8007baa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007bf4:	f000 f878 	bl	8007ce8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007bf8:	4b03      	ldr	r3, [pc, #12]	; (8007c08 <HAL_FLASHEx_Erase+0xd8>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	761a      	strb	r2, [r3, #24]

  return status;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20016470 	.word	0x20016470
 8007c0c:	40023c00 	.word	0x40023c00

08007c10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	6039      	str	r1, [r7, #0]
 8007c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c1c:	4b0d      	ldr	r3, [pc, #52]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	4a09      	ldr	r2, [pc, #36]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c2e:	f043 0304 	orr.w	r3, r3, #4
 8007c32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	4a05      	ldr	r2, [pc, #20]	; (8007c54 <FLASH_MassErase+0x44>)
 8007c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c44:	6113      	str	r3, [r2, #16]
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40023c00 	.word	0x40023c00

08007c58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	460b      	mov	r3, r1
 8007c62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007c68:	78fb      	ldrb	r3, [r7, #3]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d102      	bne.n	8007c74 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e010      	b.n	8007c96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d103      	bne.n	8007c82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e009      	b.n	8007c96 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d103      	bne.n	8007c90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c8c:	60fb      	str	r3, [r7, #12]
 8007c8e:	e002      	b.n	8007c96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007c90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007ca2:	4b10      	ldr	r3, [pc, #64]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	490f      	ldr	r1, [pc, #60]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007cae:	4b0d      	ldr	r3, [pc, #52]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	4a0c      	ldr	r2, [pc, #48]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007cb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007cba:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cbc:	691a      	ldr	r2, [r3, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	00db      	lsls	r3, r3, #3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	4a07      	ldr	r2, [pc, #28]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cc6:	f043 0302 	orr.w	r3, r3, #2
 8007cca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	4a04      	ldr	r2, [pc, #16]	; (8007ce4 <FLASH_Erase_Sector+0x8c>)
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd6:	6113      	str	r3, [r2, #16]
}
 8007cd8:	bf00      	nop
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	40023c00 	.word	0x40023c00

08007ce8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007cec:	4b20      	ldr	r3, [pc, #128]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d017      	beq.n	8007d28 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007cf8:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1c      	ldr	r2, [pc, #112]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007cfe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d02:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d04:	4b1a      	ldr	r3, [pc, #104]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a19      	ldr	r2, [pc, #100]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	4b17      	ldr	r3, [pc, #92]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a16      	ldr	r2, [pc, #88]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d1a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d1c:	4b14      	ldr	r3, [pc, #80]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d26:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d017      	beq.n	8007d64 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d3e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a0a      	ldr	r2, [pc, #40]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a07      	ldr	r2, [pc, #28]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a04      	ldr	r2, [pc, #16]	; (8007d70 <FLASH_FlushCaches+0x88>)
 8007d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d62:	6013      	str	r3, [r2, #0]
  }
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40023c00 	.word	0x40023c00

08007d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b089      	sub	sp, #36	; 0x24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e16b      	b.n	8008068 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d90:	2201      	movs	r2, #1
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4013      	ands	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	f040 815a 	bne.w	8008062 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d00b      	beq.n	8007dce <HAL_GPIO_Init+0x5a>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d007      	beq.n	8007dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007dc2:	2b11      	cmp	r3, #17
 8007dc4:	d003      	beq.n	8007dce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2b12      	cmp	r3, #18
 8007dcc:	d130      	bne.n	8007e30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	2203      	movs	r2, #3
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68da      	ldr	r2, [r3, #12]
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	69ba      	ldr	r2, [r7, #24]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e04:	2201      	movs	r2, #1
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4013      	ands	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	091b      	lsrs	r3, r3, #4
 8007e1a:	f003 0201 	and.w	r2, r3, #1
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	fa02 f303 	lsl.w	r3, r2, r3
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	43db      	mvns	r3, r3
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	4013      	ands	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	fa02 f303 	lsl.w	r3, r2, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d003      	beq.n	8007e70 <HAL_GPIO_Init+0xfc>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	2b12      	cmp	r3, #18
 8007e6e:	d123      	bne.n	8007eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	08da      	lsrs	r2, r3, #3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3208      	adds	r2, #8
 8007e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	220f      	movs	r2, #15
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	4013      	ands	r3, r2
 8007e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	691a      	ldr	r2, [r3, #16]
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	08da      	lsrs	r2, r3, #3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3208      	adds	r2, #8
 8007eb2:	69b9      	ldr	r1, [r7, #24]
 8007eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	005b      	lsls	r3, r3, #1
 8007ec2:	2203      	movs	r2, #3
 8007ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	4013      	ands	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 0203 	and.w	r2, r3, #3
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 80b4 	beq.w	8008062 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
 8007efe:	4b5f      	ldr	r3, [pc, #380]	; (800807c <HAL_GPIO_Init+0x308>)
 8007f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f02:	4a5e      	ldr	r2, [pc, #376]	; (800807c <HAL_GPIO_Init+0x308>)
 8007f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f08:	6453      	str	r3, [r2, #68]	; 0x44
 8007f0a:	4b5c      	ldr	r3, [pc, #368]	; (800807c <HAL_GPIO_Init+0x308>)
 8007f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f12:	60fb      	str	r3, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f16:	4a5a      	ldr	r2, [pc, #360]	; (8008080 <HAL_GPIO_Init+0x30c>)
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	089b      	lsrs	r3, r3, #2
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	220f      	movs	r2, #15
 8007f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f32:	43db      	mvns	r3, r3
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	4013      	ands	r3, r2
 8007f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a51      	ldr	r2, [pc, #324]	; (8008084 <HAL_GPIO_Init+0x310>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d02b      	beq.n	8007f9a <HAL_GPIO_Init+0x226>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a50      	ldr	r2, [pc, #320]	; (8008088 <HAL_GPIO_Init+0x314>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d025      	beq.n	8007f96 <HAL_GPIO_Init+0x222>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a4f      	ldr	r2, [pc, #316]	; (800808c <HAL_GPIO_Init+0x318>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d01f      	beq.n	8007f92 <HAL_GPIO_Init+0x21e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a4e      	ldr	r2, [pc, #312]	; (8008090 <HAL_GPIO_Init+0x31c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d019      	beq.n	8007f8e <HAL_GPIO_Init+0x21a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a4d      	ldr	r2, [pc, #308]	; (8008094 <HAL_GPIO_Init+0x320>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d013      	beq.n	8007f8a <HAL_GPIO_Init+0x216>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a4c      	ldr	r2, [pc, #304]	; (8008098 <HAL_GPIO_Init+0x324>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00d      	beq.n	8007f86 <HAL_GPIO_Init+0x212>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a4b      	ldr	r2, [pc, #300]	; (800809c <HAL_GPIO_Init+0x328>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d007      	beq.n	8007f82 <HAL_GPIO_Init+0x20e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a4a      	ldr	r2, [pc, #296]	; (80080a0 <HAL_GPIO_Init+0x32c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d101      	bne.n	8007f7e <HAL_GPIO_Init+0x20a>
 8007f7a:	2307      	movs	r3, #7
 8007f7c:	e00e      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f7e:	2308      	movs	r3, #8
 8007f80:	e00c      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f82:	2306      	movs	r3, #6
 8007f84:	e00a      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f86:	2305      	movs	r3, #5
 8007f88:	e008      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	e006      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e004      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e002      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e000      	b.n	8007f9c <HAL_GPIO_Init+0x228>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	69fa      	ldr	r2, [r7, #28]
 8007f9e:	f002 0203 	and.w	r2, r2, #3
 8007fa2:	0092      	lsls	r2, r2, #2
 8007fa4:	4093      	lsls	r3, r2
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fac:	4934      	ldr	r1, [pc, #208]	; (8008080 <HAL_GPIO_Init+0x30c>)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	089b      	lsrs	r3, r3, #2
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007fba:	4b3a      	ldr	r3, [pc, #232]	; (80080a4 <HAL_GPIO_Init+0x330>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	43db      	mvns	r3, r3
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fde:	4a31      	ldr	r2, [pc, #196]	; (80080a4 <HAL_GPIO_Init+0x330>)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fe4:	4b2f      	ldr	r3, [pc, #188]	; (80080a4 <HAL_GPIO_Init+0x330>)
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	43db      	mvns	r3, r3
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d003      	beq.n	8008008 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	4313      	orrs	r3, r2
 8008006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008008:	4a26      	ldr	r2, [pc, #152]	; (80080a4 <HAL_GPIO_Init+0x330>)
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800800e:	4b25      	ldr	r3, [pc, #148]	; (80080a4 <HAL_GPIO_Init+0x330>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800802a:	69ba      	ldr	r2, [r7, #24]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008032:	4a1c      	ldr	r2, [pc, #112]	; (80080a4 <HAL_GPIO_Init+0x330>)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008038:	4b1a      	ldr	r3, [pc, #104]	; (80080a4 <HAL_GPIO_Init+0x330>)
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	43db      	mvns	r3, r3
 8008042:	69ba      	ldr	r2, [r7, #24]
 8008044:	4013      	ands	r3, r2
 8008046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800805c:	4a11      	ldr	r2, [pc, #68]	; (80080a4 <HAL_GPIO_Init+0x330>)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	3301      	adds	r3, #1
 8008066:	61fb      	str	r3, [r7, #28]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2b0f      	cmp	r3, #15
 800806c:	f67f ae90 	bls.w	8007d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008070:	bf00      	nop
 8008072:	3724      	adds	r7, #36	; 0x24
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40023800 	.word	0x40023800
 8008080:	40013800 	.word	0x40013800
 8008084:	40020000 	.word	0x40020000
 8008088:	40020400 	.word	0x40020400
 800808c:	40020800 	.word	0x40020800
 8008090:	40020c00 	.word	0x40020c00
 8008094:	40021000 	.word	0x40021000
 8008098:	40021400 	.word	0x40021400
 800809c:	40021800 	.word	0x40021800
 80080a0:	40021c00 	.word	0x40021c00
 80080a4:	40013c00 	.word	0x40013c00

080080a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e001      	b.n	80080ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	807b      	strh	r3, [r7, #2]
 80080e4:	4613      	mov	r3, r2
 80080e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080e8:	787b      	ldrb	r3, [r7, #1]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d003      	beq.n	80080f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ee:	887a      	ldrh	r2, [r7, #2]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080f4:	e003      	b.n	80080fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080f6:	887b      	ldrh	r3, [r7, #2]
 80080f8:	041a      	lsls	r2, r3, #16
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	619a      	str	r2, [r3, #24]
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e11f      	b.n	800835e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fd ff96 	bl	8006064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2224      	movs	r2, #36	; 0x24
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800815e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800816e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008170:	f000 fd18 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 8008174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	4a7b      	ldr	r2, [pc, #492]	; (8008368 <HAL_I2C_Init+0x25c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d807      	bhi.n	8008190 <HAL_I2C_Init+0x84>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4a7a      	ldr	r2, [pc, #488]	; (800836c <HAL_I2C_Init+0x260>)
 8008184:	4293      	cmp	r3, r2
 8008186:	bf94      	ite	ls
 8008188:	2301      	movls	r3, #1
 800818a:	2300      	movhi	r3, #0
 800818c:	b2db      	uxtb	r3, r3
 800818e:	e006      	b.n	800819e <HAL_I2C_Init+0x92>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a77      	ldr	r2, [pc, #476]	; (8008370 <HAL_I2C_Init+0x264>)
 8008194:	4293      	cmp	r3, r2
 8008196:	bf94      	ite	ls
 8008198:	2301      	movls	r3, #1
 800819a:	2300      	movhi	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e0db      	b.n	800835e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4a72      	ldr	r2, [pc, #456]	; (8008374 <HAL_I2C_Init+0x268>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	0c9b      	lsrs	r3, r3, #18
 80081b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	4a64      	ldr	r2, [pc, #400]	; (8008368 <HAL_I2C_Init+0x25c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d802      	bhi.n	80081e0 <HAL_I2C_Init+0xd4>
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3301      	adds	r3, #1
 80081de:	e009      	b.n	80081f4 <HAL_I2C_Init+0xe8>
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081e6:	fb02 f303 	mul.w	r3, r2, r3
 80081ea:	4a63      	ldr	r2, [pc, #396]	; (8008378 <HAL_I2C_Init+0x26c>)
 80081ec:	fba2 2303 	umull	r2, r3, r2, r3
 80081f0:	099b      	lsrs	r3, r3, #6
 80081f2:	3301      	adds	r3, #1
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6812      	ldr	r2, [r2, #0]
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008206:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	4956      	ldr	r1, [pc, #344]	; (8008368 <HAL_I2C_Init+0x25c>)
 8008210:	428b      	cmp	r3, r1
 8008212:	d80d      	bhi.n	8008230 <HAL_I2C_Init+0x124>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	1e59      	subs	r1, r3, #1
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008222:	3301      	adds	r3, #1
 8008224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008228:	2b04      	cmp	r3, #4
 800822a:	bf38      	it	cc
 800822c:	2304      	movcc	r3, #4
 800822e:	e04f      	b.n	80082d0 <HAL_I2C_Init+0x1c4>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d111      	bne.n	800825c <HAL_I2C_Init+0x150>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1e58      	subs	r0, r3, #1
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6859      	ldr	r1, [r3, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	440b      	add	r3, r1
 8008246:	fbb0 f3f3 	udiv	r3, r0, r3
 800824a:	3301      	adds	r3, #1
 800824c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008250:	2b00      	cmp	r3, #0
 8008252:	bf0c      	ite	eq
 8008254:	2301      	moveq	r3, #1
 8008256:	2300      	movne	r3, #0
 8008258:	b2db      	uxtb	r3, r3
 800825a:	e012      	b.n	8008282 <HAL_I2C_Init+0x176>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	1e58      	subs	r0, r3, #1
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6859      	ldr	r1, [r3, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	0099      	lsls	r1, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008272:	3301      	adds	r3, #1
 8008274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <HAL_I2C_Init+0x17e>
 8008286:	2301      	movs	r3, #1
 8008288:	e022      	b.n	80082d0 <HAL_I2C_Init+0x1c4>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10e      	bne.n	80082b0 <HAL_I2C_Init+0x1a4>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1e58      	subs	r0, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6859      	ldr	r1, [r3, #4]
 800829a:	460b      	mov	r3, r1
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	440b      	add	r3, r1
 80082a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80082a4:	3301      	adds	r3, #1
 80082a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082ae:	e00f      	b.n	80082d0 <HAL_I2C_Init+0x1c4>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	1e58      	subs	r0, r3, #1
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6859      	ldr	r1, [r3, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	0099      	lsls	r1, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c6:	3301      	adds	r3, #1
 80082c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	6809      	ldr	r1, [r1, #0]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69da      	ldr	r2, [r3, #28]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	6911      	ldr	r1, [r2, #16]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	68d2      	ldr	r2, [r2, #12]
 800830a:	4311      	orrs	r1, r2
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	6812      	ldr	r2, [r2, #0]
 8008310:	430b      	orrs	r3, r1
 8008312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	695a      	ldr	r2, [r3, #20]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	431a      	orrs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	000186a0 	.word	0x000186a0
 800836c:	001e847f 	.word	0x001e847f
 8008370:	003d08ff 	.word	0x003d08ff
 8008374:	431bde83 	.word	0x431bde83
 8008378:	10624dd3 	.word	0x10624dd3

0800837c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d101      	bne.n	800838e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e25b      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d075      	beq.n	8008486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800839a:	4ba3      	ldr	r3, [pc, #652]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d00c      	beq.n	80083c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083a6:	4ba0      	ldr	r3, [pc, #640]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083ae:	2b08      	cmp	r3, #8
 80083b0:	d112      	bne.n	80083d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083b2:	4b9d      	ldr	r3, [pc, #628]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083be:	d10b      	bne.n	80083d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c0:	4b99      	ldr	r3, [pc, #612]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d05b      	beq.n	8008484 <HAL_RCC_OscConfig+0x108>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d157      	bne.n	8008484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e236      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e0:	d106      	bne.n	80083f0 <HAL_RCC_OscConfig+0x74>
 80083e2:	4b91      	ldr	r3, [pc, #580]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a90      	ldr	r2, [pc, #576]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	e01d      	b.n	800842c <HAL_RCC_OscConfig+0xb0>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083f8:	d10c      	bne.n	8008414 <HAL_RCC_OscConfig+0x98>
 80083fa:	4b8b      	ldr	r3, [pc, #556]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a8a      	ldr	r2, [pc, #552]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b88      	ldr	r3, [pc, #544]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a87      	ldr	r2, [pc, #540]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 800840c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008410:	6013      	str	r3, [r2, #0]
 8008412:	e00b      	b.n	800842c <HAL_RCC_OscConfig+0xb0>
 8008414:	4b84      	ldr	r3, [pc, #528]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a83      	ldr	r2, [pc, #524]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 800841a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4b81      	ldr	r3, [pc, #516]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a80      	ldr	r2, [pc, #512]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800842a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d013      	beq.n	800845c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008434:	f7fe fa12 	bl	800685c <HAL_GetTick>
 8008438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800843c:	f7fe fa0e 	bl	800685c <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b64      	cmp	r3, #100	; 0x64
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e1fb      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800844e:	4b76      	ldr	r3, [pc, #472]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f0      	beq.n	800843c <HAL_RCC_OscConfig+0xc0>
 800845a:	e014      	b.n	8008486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845c:	f7fe f9fe 	bl	800685c <HAL_GetTick>
 8008460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008464:	f7fe f9fa 	bl	800685c <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	; 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e1e7      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008476:	4b6c      	ldr	r3, [pc, #432]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1f0      	bne.n	8008464 <HAL_RCC_OscConfig+0xe8>
 8008482:	e000      	b.n	8008486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0302 	and.w	r3, r3, #2
 800848e:	2b00      	cmp	r3, #0
 8008490:	d063      	beq.n	800855a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008492:	4b65      	ldr	r3, [pc, #404]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 030c 	and.w	r3, r3, #12
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800849e:	4b62      	ldr	r3, [pc, #392]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084a6:	2b08      	cmp	r3, #8
 80084a8:	d11c      	bne.n	80084e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084aa:	4b5f      	ldr	r3, [pc, #380]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d116      	bne.n	80084e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <HAL_RCC_OscConfig+0x152>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d001      	beq.n	80084ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e1bb      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ce:	4b56      	ldr	r3, [pc, #344]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	4952      	ldr	r1, [pc, #328]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084e2:	e03a      	b.n	800855a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d020      	beq.n	800852e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084ec:	4b4f      	ldr	r3, [pc, #316]	; (800862c <HAL_RCC_OscConfig+0x2b0>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f2:	f7fe f9b3 	bl	800685c <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f8:	e008      	b.n	800850c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084fa:	f7fe f9af 	bl	800685c <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e19c      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800850c:	4b46      	ldr	r3, [pc, #280]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0f0      	beq.n	80084fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008518:	4b43      	ldr	r3, [pc, #268]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4940      	ldr	r1, [pc, #256]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008528:	4313      	orrs	r3, r2
 800852a:	600b      	str	r3, [r1, #0]
 800852c:	e015      	b.n	800855a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800852e:	4b3f      	ldr	r3, [pc, #252]	; (800862c <HAL_RCC_OscConfig+0x2b0>)
 8008530:	2200      	movs	r2, #0
 8008532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008534:	f7fe f992 	bl	800685c <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800853c:	f7fe f98e 	bl	800685c <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e17b      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800854e:	4b36      	ldr	r3, [pc, #216]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f0      	bne.n	800853c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d030      	beq.n	80085c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d016      	beq.n	800859c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800856e:	4b30      	ldr	r3, [pc, #192]	; (8008630 <HAL_RCC_OscConfig+0x2b4>)
 8008570:	2201      	movs	r2, #1
 8008572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008574:	f7fe f972 	bl	800685c <HAL_GetTick>
 8008578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800857a:	e008      	b.n	800858e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800857c:	f7fe f96e 	bl	800685c <HAL_GetTick>
 8008580:	4602      	mov	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	2b02      	cmp	r3, #2
 8008588:	d901      	bls.n	800858e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e15b      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800858e:	4b26      	ldr	r3, [pc, #152]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 8008590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f0      	beq.n	800857c <HAL_RCC_OscConfig+0x200>
 800859a:	e015      	b.n	80085c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800859c:	4b24      	ldr	r3, [pc, #144]	; (8008630 <HAL_RCC_OscConfig+0x2b4>)
 800859e:	2200      	movs	r2, #0
 80085a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085a2:	f7fe f95b 	bl	800685c <HAL_GetTick>
 80085a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085a8:	e008      	b.n	80085bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085aa:	f7fe f957 	bl	800685c <HAL_GetTick>
 80085ae:	4602      	mov	r2, r0
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d901      	bls.n	80085bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e144      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085bc:	4b1a      	ldr	r3, [pc, #104]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80085be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c0:	f003 0302 	and.w	r3, r3, #2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1f0      	bne.n	80085aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 80a0 	beq.w	8008716 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10f      	bne.n	8008606 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085e6:	2300      	movs	r3, #0
 80085e8:	60bb      	str	r3, [r7, #8]
 80085ea:	4b0f      	ldr	r3, [pc, #60]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	4a0e      	ldr	r2, [pc, #56]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80085f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f4:	6413      	str	r3, [r2, #64]	; 0x40
 80085f6:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <HAL_RCC_OscConfig+0x2ac>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085fe:	60bb      	str	r3, [r7, #8]
 8008600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008602:	2301      	movs	r3, #1
 8008604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008606:	4b0b      	ldr	r3, [pc, #44]	; (8008634 <HAL_RCC_OscConfig+0x2b8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800860e:	2b00      	cmp	r3, #0
 8008610:	d121      	bne.n	8008656 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <HAL_RCC_OscConfig+0x2b8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <HAL_RCC_OscConfig+0x2b8>)
 8008618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800861c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800861e:	f7fe f91d 	bl	800685c <HAL_GetTick>
 8008622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008624:	e011      	b.n	800864a <HAL_RCC_OscConfig+0x2ce>
 8008626:	bf00      	nop
 8008628:	40023800 	.word	0x40023800
 800862c:	42470000 	.word	0x42470000
 8008630:	42470e80 	.word	0x42470e80
 8008634:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008638:	f7fe f910 	bl	800685c <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e0fd      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800864a:	4b81      	ldr	r3, [pc, #516]	; (8008850 <HAL_RCC_OscConfig+0x4d4>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0f0      	beq.n	8008638 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d106      	bne.n	800866c <HAL_RCC_OscConfig+0x2f0>
 800865e:	4b7d      	ldr	r3, [pc, #500]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008662:	4a7c      	ldr	r2, [pc, #496]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	6713      	str	r3, [r2, #112]	; 0x70
 800866a:	e01c      	b.n	80086a6 <HAL_RCC_OscConfig+0x32a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b05      	cmp	r3, #5
 8008672:	d10c      	bne.n	800868e <HAL_RCC_OscConfig+0x312>
 8008674:	4b77      	ldr	r3, [pc, #476]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008678:	4a76      	ldr	r2, [pc, #472]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 800867a:	f043 0304 	orr.w	r3, r3, #4
 800867e:	6713      	str	r3, [r2, #112]	; 0x70
 8008680:	4b74      	ldr	r3, [pc, #464]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	4a73      	ldr	r2, [pc, #460]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	6713      	str	r3, [r2, #112]	; 0x70
 800868c:	e00b      	b.n	80086a6 <HAL_RCC_OscConfig+0x32a>
 800868e:	4b71      	ldr	r3, [pc, #452]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008692:	4a70      	ldr	r2, [pc, #448]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	6713      	str	r3, [r2, #112]	; 0x70
 800869a:	4b6e      	ldr	r3, [pc, #440]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	4a6d      	ldr	r2, [pc, #436]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80086a0:	f023 0304 	bic.w	r3, r3, #4
 80086a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d015      	beq.n	80086da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ae:	f7fe f8d5 	bl	800685c <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b4:	e00a      	b.n	80086cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086b6:	f7fe f8d1 	bl	800685c <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e0bc      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086cc:	4b61      	ldr	r3, [pc, #388]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80086ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d0ee      	beq.n	80086b6 <HAL_RCC_OscConfig+0x33a>
 80086d8:	e014      	b.n	8008704 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086da:	f7fe f8bf 	bl	800685c <HAL_GetTick>
 80086de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086e0:	e00a      	b.n	80086f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086e2:	f7fe f8bb 	bl	800685c <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d901      	bls.n	80086f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e0a6      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f8:	4b56      	ldr	r3, [pc, #344]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1ee      	bne.n	80086e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d105      	bne.n	8008716 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800870a:	4b52      	ldr	r3, [pc, #328]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	4a51      	ldr	r2, [pc, #324]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008714:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	699b      	ldr	r3, [r3, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8092 	beq.w	8008844 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008720:	4b4c      	ldr	r3, [pc, #304]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 030c 	and.w	r3, r3, #12
 8008728:	2b08      	cmp	r3, #8
 800872a:	d05c      	beq.n	80087e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d141      	bne.n	80087b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008734:	4b48      	ldr	r3, [pc, #288]	; (8008858 <HAL_RCC_OscConfig+0x4dc>)
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800873a:	f7fe f88f 	bl	800685c <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008740:	e008      	b.n	8008754 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008742:	f7fe f88b 	bl	800685c <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d901      	bls.n	8008754 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e078      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008754:	4b3f      	ldr	r3, [pc, #252]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f0      	bne.n	8008742 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	019b      	lsls	r3, r3, #6
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	085b      	lsrs	r3, r3, #1
 8008778:	3b01      	subs	r3, #1
 800877a:	041b      	lsls	r3, r3, #16
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	4933      	ldr	r1, [pc, #204]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800878a:	4b33      	ldr	r3, [pc, #204]	; (8008858 <HAL_RCC_OscConfig+0x4dc>)
 800878c:	2201      	movs	r2, #1
 800878e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008790:	f7fe f864 	bl	800685c <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008798:	f7fe f860 	bl	800685c <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e04d      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087aa:	4b2a      	ldr	r3, [pc, #168]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0x41c>
 80087b6:	e045      	b.n	8008844 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087b8:	4b27      	ldr	r3, [pc, #156]	; (8008858 <HAL_RCC_OscConfig+0x4dc>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087be:	f7fe f84d 	bl	800685c <HAL_GetTick>
 80087c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087c4:	e008      	b.n	80087d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c6:	f7fe f849 	bl	800685c <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e036      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087d8:	4b1e      	ldr	r3, [pc, #120]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <HAL_RCC_OscConfig+0x44a>
 80087e4:	e02e      	b.n	8008844 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e029      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087f2:	4b18      	ldr	r3, [pc, #96]	; (8008854 <HAL_RCC_OscConfig+0x4d8>)
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	429a      	cmp	r2, r3
 8008804:	d11c      	bne.n	8008840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008810:	429a      	cmp	r2, r3
 8008812:	d115      	bne.n	8008840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800881a:	4013      	ands	r3, r2
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008820:	4293      	cmp	r3, r2
 8008822:	d10d      	bne.n	8008840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d106      	bne.n	8008840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800883c:	429a      	cmp	r2, r3
 800883e:	d001      	beq.n	8008844 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3718      	adds	r7, #24
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	40007000 	.word	0x40007000
 8008854:	40023800 	.word	0x40023800
 8008858:	42470060 	.word	0x42470060

0800885c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e0cc      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008870:	4b68      	ldr	r3, [pc, #416]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 030f 	and.w	r3, r3, #15
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d90c      	bls.n	8008898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887e:	4b65      	ldr	r3, [pc, #404]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	b2d2      	uxtb	r2, r2
 8008884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008886:	4b63      	ldr	r3, [pc, #396]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	429a      	cmp	r2, r3
 8008892:	d001      	beq.n	8008898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e0b8      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d020      	beq.n	80088e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088b0:	4b59      	ldr	r3, [pc, #356]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	4a58      	ldr	r2, [pc, #352]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088c8:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	4a52      	ldr	r2, [pc, #328]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088d4:	4b50      	ldr	r3, [pc, #320]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	494d      	ldr	r1, [pc, #308]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d044      	beq.n	800897c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d107      	bne.n	800890a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088fa:	4b47      	ldr	r3, [pc, #284]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d119      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e07f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d003      	beq.n	800891a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008916:	2b03      	cmp	r3, #3
 8008918:	d107      	bne.n	800892a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800891a:	4b3f      	ldr	r3, [pc, #252]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d109      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e06f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	4b3b      	ldr	r3, [pc, #236]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e067      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800893a:	4b37      	ldr	r3, [pc, #220]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f023 0203 	bic.w	r2, r3, #3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	4934      	ldr	r1, [pc, #208]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 8008948:	4313      	orrs	r3, r2
 800894a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800894c:	f7fd ff86 	bl	800685c <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008952:	e00a      	b.n	800896a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008954:	f7fd ff82 	bl	800685c <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008962:	4293      	cmp	r3, r2
 8008964:	d901      	bls.n	800896a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e04f      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800896a:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 020c 	and.w	r2, r3, #12
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	429a      	cmp	r2, r3
 800897a:	d1eb      	bne.n	8008954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800897c:	4b25      	ldr	r3, [pc, #148]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 030f 	and.w	r3, r3, #15
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d20c      	bcs.n	80089a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898a:	4b22      	ldr	r3, [pc, #136]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b20      	ldr	r3, [pc, #128]	; (8008a14 <HAL_RCC_ClockConfig+0x1b8>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e032      	b.n	8008a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0304 	and.w	r3, r3, #4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089b2:	689b      	ldr	r3, [r3, #8]
 80089b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	4916      	ldr	r1, [pc, #88]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	691b      	ldr	r3, [r3, #16]
 80089da:	00db      	lsls	r3, r3, #3
 80089dc:	490e      	ldr	r1, [pc, #56]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80089e2:	f000 f821 	bl	8008a28 <HAL_RCC_GetSysClockFreq>
 80089e6:	4601      	mov	r1, r0
 80089e8:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <HAL_RCC_ClockConfig+0x1bc>)
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	091b      	lsrs	r3, r3, #4
 80089ee:	f003 030f 	and.w	r3, r3, #15
 80089f2:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <HAL_RCC_ClockConfig+0x1c0>)
 80089f4:	5cd3      	ldrb	r3, [r2, r3]
 80089f6:	fa21 f303 	lsr.w	r3, r1, r3
 80089fa:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <HAL_RCC_ClockConfig+0x1c4>)
 80089fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd fee6 	bl	80067d4 <HAL_InitTick>

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	40023c00 	.word	0x40023c00
 8008a18:	40023800 	.word	0x40023800
 8008a1c:	080108a4 	.word	0x080108a4
 8008a20:	20000034 	.word	0x20000034
 8008a24:	20000038 	.word	0x20000038

08008a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	2300      	movs	r3, #0
 8008a38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a3e:	4b50      	ldr	r3, [pc, #320]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 030c 	and.w	r3, r3, #12
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	d007      	beq.n	8008a5a <HAL_RCC_GetSysClockFreq+0x32>
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d008      	beq.n	8008a60 <HAL_RCC_GetSysClockFreq+0x38>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f040 808d 	bne.w	8008b6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a54:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a56:	60bb      	str	r3, [r7, #8]
       break;
 8008a58:	e08c      	b.n	8008b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a5a:	4b4b      	ldr	r3, [pc, #300]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a5c:	60bb      	str	r3, [r7, #8]
      break;
 8008a5e:	e089      	b.n	8008b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a60:	4b47      	ldr	r3, [pc, #284]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a6a:	4b45      	ldr	r3, [pc, #276]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d023      	beq.n	8008abe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a76:	4b42      	ldr	r3, [pc, #264]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	099b      	lsrs	r3, r3, #6
 8008a7c:	f04f 0400 	mov.w	r4, #0
 8008a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	ea03 0501 	and.w	r5, r3, r1
 8008a8c:	ea04 0602 	and.w	r6, r4, r2
 8008a90:	4a3d      	ldr	r2, [pc, #244]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a92:	fb02 f106 	mul.w	r1, r2, r6
 8008a96:	2200      	movs	r2, #0
 8008a98:	fb02 f205 	mul.w	r2, r2, r5
 8008a9c:	440a      	add	r2, r1
 8008a9e:	493a      	ldr	r1, [pc, #232]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x160>)
 8008aa0:	fba5 0101 	umull	r0, r1, r5, r1
 8008aa4:	1853      	adds	r3, r2, r1
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f04f 0400 	mov.w	r4, #0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4623      	mov	r3, r4
 8008ab2:	f7f8 f8e9 	bl	8000c88 <__aeabi_uldivmod>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e049      	b.n	8008b52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008abe:	4b30      	ldr	r3, [pc, #192]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	099b      	lsrs	r3, r3, #6
 8008ac4:	f04f 0400 	mov.w	r4, #0
 8008ac8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008acc:	f04f 0200 	mov.w	r2, #0
 8008ad0:	ea03 0501 	and.w	r5, r3, r1
 8008ad4:	ea04 0602 	and.w	r6, r4, r2
 8008ad8:	4629      	mov	r1, r5
 8008ada:	4632      	mov	r2, r6
 8008adc:	f04f 0300 	mov.w	r3, #0
 8008ae0:	f04f 0400 	mov.w	r4, #0
 8008ae4:	0154      	lsls	r4, r2, #5
 8008ae6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008aea:	014b      	lsls	r3, r1, #5
 8008aec:	4619      	mov	r1, r3
 8008aee:	4622      	mov	r2, r4
 8008af0:	1b49      	subs	r1, r1, r5
 8008af2:	eb62 0206 	sbc.w	r2, r2, r6
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	f04f 0400 	mov.w	r4, #0
 8008afe:	0194      	lsls	r4, r2, #6
 8008b00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b04:	018b      	lsls	r3, r1, #6
 8008b06:	1a5b      	subs	r3, r3, r1
 8008b08:	eb64 0402 	sbc.w	r4, r4, r2
 8008b0c:	f04f 0100 	mov.w	r1, #0
 8008b10:	f04f 0200 	mov.w	r2, #0
 8008b14:	00e2      	lsls	r2, r4, #3
 8008b16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b1a:	00d9      	lsls	r1, r3, #3
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	195b      	adds	r3, r3, r5
 8008b22:	eb44 0406 	adc.w	r4, r4, r6
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	02a2      	lsls	r2, r4, #10
 8008b30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b34:	0299      	lsls	r1, r3, #10
 8008b36:	460b      	mov	r3, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	4621      	mov	r1, r4
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f04f 0400 	mov.w	r4, #0
 8008b44:	461a      	mov	r2, r3
 8008b46:	4623      	mov	r3, r4
 8008b48:	f7f8 f89e 	bl	8000c88 <__aeabi_uldivmod>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	460c      	mov	r4, r1
 8008b50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b52:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x158>)
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	f003 0303 	and.w	r3, r3, #3
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b6a:	60bb      	str	r3, [r7, #8]
      break;
 8008b6c:	e002      	b.n	8008b74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b6e:	4b05      	ldr	r3, [pc, #20]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008b70:	60bb      	str	r3, [r7, #8]
      break;
 8008b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b74:	68bb      	ldr	r3, [r7, #8]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	40023800 	.word	0x40023800
 8008b84:	00f42400 	.word	0x00f42400
 8008b88:	00bebc20 	.word	0x00bebc20

08008b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b90:	4b03      	ldr	r3, [pc, #12]	; (8008ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b92:	681b      	ldr	r3, [r3, #0]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000034 	.word	0x20000034

08008ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ba8:	f7ff fff0 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bac:	4601      	mov	r1, r0
 8008bae:	4b05      	ldr	r3, [pc, #20]	; (8008bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	0a9b      	lsrs	r3, r3, #10
 8008bb4:	f003 0307 	and.w	r3, r3, #7
 8008bb8:	4a03      	ldr	r2, [pc, #12]	; (8008bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bba:	5cd3      	ldrb	r3, [r2, r3]
 8008bbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40023800 	.word	0x40023800
 8008bc8:	080108b4 	.word	0x080108b4

08008bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008bd0:	f7ff ffdc 	bl	8008b8c <HAL_RCC_GetHCLKFreq>
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4b05      	ldr	r3, [pc, #20]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	0b5b      	lsrs	r3, r3, #13
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	4a03      	ldr	r2, [pc, #12]	; (8008bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008be2:	5cd3      	ldrb	r3, [r2, r3]
 8008be4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	080108b4 	.word	0x080108b4

08008bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e056      	b.n	8008cb4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d106      	bne.n	8008c26 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fd fa67 	bl	80060f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c3c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	431a      	orrs	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	431a      	orrs	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	ea42 0103 	orr.w	r1, r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	f003 0104 	and.w	r1, r3, #4
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69da      	ldr	r2, [r3, #28]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	603b      	str	r3, [r7, #0]
 8008cc8:	4613      	mov	r3, r2
 8008cca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d101      	bne.n	8008cde <HAL_SPI_Transmit+0x22>
 8008cda:	2302      	movs	r3, #2
 8008cdc:	e11e      	b.n	8008f1c <HAL_SPI_Transmit+0x260>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ce6:	f7fd fdb9 	bl	800685c <HAL_GetTick>
 8008cea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008cec:	88fb      	ldrh	r3, [r7, #6]
 8008cee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d002      	beq.n	8008d02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d00:	e103      	b.n	8008f0a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Transmit+0x52>
 8008d08:	88fb      	ldrh	r3, [r7, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d12:	e0fa      	b.n	8008f0a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2203      	movs	r2, #3
 8008d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	88fa      	ldrh	r2, [r7, #6]
 8008d32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d5a:	d107      	bne.n	8008d6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	d007      	beq.n	8008d8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d92:	d14b      	bne.n	8008e2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_SPI_Transmit+0xe6>
 8008d9c:	8afb      	ldrh	r3, [r7, #22]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d13e      	bne.n	8008e20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da6:	881a      	ldrh	r2, [r3, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	1c9a      	adds	r2, r3, #2
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	3b01      	subs	r3, #1
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008dc6:	e02b      	b.n	8008e20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d112      	bne.n	8008dfc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dda:	881a      	ldrh	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	1c9a      	adds	r2, r3, #2
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dfa:	e011      	b.n	8008e20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dfc:	f7fd fd2e 	bl	800685c <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d803      	bhi.n	8008e14 <HAL_SPI_Transmit+0x158>
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e12:	d102      	bne.n	8008e1a <HAL_SPI_Transmit+0x15e>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e1e:	e074      	b.n	8008f0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1ce      	bne.n	8008dc8 <HAL_SPI_Transmit+0x10c>
 8008e2a:	e04c      	b.n	8008ec6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <HAL_SPI_Transmit+0x17e>
 8008e34:	8afb      	ldrh	r3, [r7, #22]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d140      	bne.n	8008ebc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	7812      	ldrb	r2, [r2, #0]
 8008e46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008e60:	e02c      	b.n	8008ebc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d113      	bne.n	8008e98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	7812      	ldrb	r2, [r2, #0]
 8008e7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e96:	e011      	b.n	8008ebc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e98:	f7fd fce0 	bl	800685c <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d803      	bhi.n	8008eb0 <HAL_SPI_Transmit+0x1f4>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	d102      	bne.n	8008eb6 <HAL_SPI_Transmit+0x1fa>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d102      	bne.n	8008ebc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008eba:	e026      	b.n	8008f0a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1cd      	bne.n	8008e62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f000 fba4 	bl	8009618 <SPI_EndRxTxTransaction>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	613b      	str	r3, [r7, #16]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	613b      	str	r3, [r7, #16]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	613b      	str	r3, [r7, #16]
 8008ef8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	77fb      	strb	r3, [r7, #31]
 8008f06:	e000      	b.n	8008f0a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008f08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b088      	sub	sp, #32
 8008f28:	af02      	add	r7, sp, #8
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	603b      	str	r3, [r7, #0]
 8008f30:	4613      	mov	r3, r2
 8008f32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f40:	d112      	bne.n	8008f68 <HAL_SPI_Receive+0x44>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10e      	bne.n	8008f68 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2204      	movs	r2, #4
 8008f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f52:	88fa      	ldrh	r2, [r7, #6]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	68b9      	ldr	r1, [r7, #8]
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 f8e9 	bl	8009136 <HAL_SPI_TransmitReceive>
 8008f64:	4603      	mov	r3, r0
 8008f66:	e0e2      	b.n	800912e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d101      	bne.n	8008f76 <HAL_SPI_Receive+0x52>
 8008f72:	2302      	movs	r3, #2
 8008f74:	e0db      	b.n	800912e <HAL_SPI_Receive+0x20a>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f7e:	f7fd fc6d 	bl	800685c <HAL_GetTick>
 8008f82:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d002      	beq.n	8008f96 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f90:	2302      	movs	r3, #2
 8008f92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f94:	e0c2      	b.n	800911c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_SPI_Receive+0x7e>
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fa6:	e0b9      	b.n	800911c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2204      	movs	r2, #4
 8008fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68ba      	ldr	r2, [r7, #8]
 8008fba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	88fa      	ldrh	r2, [r7, #6]
 8008fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	88fa      	ldrh	r2, [r7, #6]
 8008fc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fee:	d107      	bne.n	8009000 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ffe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b40      	cmp	r3, #64	; 0x40
 800900c:	d007      	beq.n	800901e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800901c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d162      	bne.n	80090ec <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009026:	e02e      	b.n	8009086 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 0301 	and.w	r3, r3, #1
 8009032:	2b01      	cmp	r3, #1
 8009034:	d115      	bne.n	8009062 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f103 020c 	add.w	r2, r3, #12
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	7812      	ldrb	r2, [r2, #0]
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009060:	e011      	b.n	8009086 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009062:	f7fd fbfb 	bl	800685c <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d803      	bhi.n	800907a <HAL_SPI_Receive+0x156>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d102      	bne.n	8009080 <HAL_SPI_Receive+0x15c>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d102      	bne.n	8009086 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009080:	2303      	movs	r3, #3
 8009082:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009084:	e04a      	b.n	800911c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908a:	b29b      	uxth	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1cb      	bne.n	8009028 <HAL_SPI_Receive+0x104>
 8009090:	e031      	b.n	80090f6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b01      	cmp	r3, #1
 800909e:	d113      	bne.n	80090c8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	b292      	uxth	r2, r2
 80090ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	1c9a      	adds	r2, r3, #2
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090bc:	b29b      	uxth	r3, r3
 80090be:	3b01      	subs	r3, #1
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090c6:	e011      	b.n	80090ec <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090c8:	f7fd fbc8 	bl	800685c <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d803      	bhi.n	80090e0 <HAL_SPI_Receive+0x1bc>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090de:	d102      	bne.n	80090e6 <HAL_SPI_Receive+0x1c2>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090ea:	e017      	b.n	800911c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1cd      	bne.n	8009092 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090f6:	693a      	ldr	r2, [r7, #16]
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fa27 	bl	800954e <SPI_EndRxTransaction>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2220      	movs	r2, #32
 800910a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
 8009118:	e000      	b.n	800911c <HAL_SPI_Receive+0x1f8>
  }

error :
 800911a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b08c      	sub	sp, #48	; 0x30
 800913a:	af00      	add	r7, sp, #0
 800913c:	60f8      	str	r0, [r7, #12]
 800913e:	60b9      	str	r1, [r7, #8]
 8009140:	607a      	str	r2, [r7, #4]
 8009142:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009144:	2301      	movs	r3, #1
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009148:	2300      	movs	r3, #0
 800914a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_SPI_TransmitReceive+0x26>
 8009158:	2302      	movs	r3, #2
 800915a:	e18a      	b.n	8009472 <HAL_SPI_TransmitReceive+0x33c>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009164:	f7fd fb7a 	bl	800685c <HAL_GetTick>
 8009168:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800917a:	887b      	ldrh	r3, [r7, #2]
 800917c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800917e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009182:	2b01      	cmp	r3, #1
 8009184:	d00f      	beq.n	80091a6 <HAL_SPI_TransmitReceive+0x70>
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800918c:	d107      	bne.n	800919e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d103      	bne.n	800919e <HAL_SPI_TransmitReceive+0x68>
 8009196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800919a:	2b04      	cmp	r3, #4
 800919c:	d003      	beq.n	80091a6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800919e:	2302      	movs	r3, #2
 80091a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091a4:	e15b      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <HAL_SPI_TransmitReceive+0x82>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_SPI_TransmitReceive+0x82>
 80091b2:	887b      	ldrh	r3, [r7, #2]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d103      	bne.n	80091c0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091be:	e14e      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d003      	beq.n	80091d4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2205      	movs	r2, #5
 80091d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	887a      	ldrh	r2, [r7, #2]
 80091e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	887a      	ldrh	r2, [r7, #2]
 80091ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	887a      	ldrh	r2, [r7, #2]
 80091f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	887a      	ldrh	r2, [r7, #2]
 80091fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009214:	2b40      	cmp	r3, #64	; 0x40
 8009216:	d007      	beq.n	8009228 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009226:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	68db      	ldr	r3, [r3, #12]
 800922c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009230:	d178      	bne.n	8009324 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d002      	beq.n	8009240 <HAL_SPI_TransmitReceive+0x10a>
 800923a:	8b7b      	ldrh	r3, [r7, #26]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d166      	bne.n	800930e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	881a      	ldrh	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	1c9a      	adds	r2, r3, #2
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800925a:	b29b      	uxth	r3, r3
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009264:	e053      	b.n	800930e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b02      	cmp	r3, #2
 8009272:	d11b      	bne.n	80092ac <HAL_SPI_TransmitReceive+0x176>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d016      	beq.n	80092ac <HAL_SPI_TransmitReceive+0x176>
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	2b01      	cmp	r3, #1
 8009282:	d113      	bne.n	80092ac <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009294:	1c9a      	adds	r2, r3, #2
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929e:	b29b      	uxth	r3, r3
 80092a0:	3b01      	subs	r3, #1
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092a8:	2300      	movs	r3, #0
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d119      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x1b8>
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d014      	beq.n	80092ee <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ce:	b292      	uxth	r2, r2
 80092d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d6:	1c9a      	adds	r2, r3, #2
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092ea:	2301      	movs	r3, #1
 80092ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092ee:	f7fd fab5 	bl	800685c <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d807      	bhi.n	800930e <HAL_SPI_TransmitReceive+0x1d8>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d003      	beq.n	800930e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800930c:	e0a7      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009312:	b29b      	uxth	r3, r3
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1a6      	bne.n	8009266 <HAL_SPI_TransmitReceive+0x130>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1a1      	bne.n	8009266 <HAL_SPI_TransmitReceive+0x130>
 8009322:	e07c      	b.n	800941e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <HAL_SPI_TransmitReceive+0x1fc>
 800932c:	8b7b      	ldrh	r3, [r7, #26]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d16b      	bne.n	800940a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009358:	e057      	b.n	800940a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d11c      	bne.n	80093a2 <HAL_SPI_TransmitReceive+0x26c>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d017      	beq.n	80093a2 <HAL_SPI_TransmitReceive+0x26c>
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2b01      	cmp	r3, #1
 8009376:	d114      	bne.n	80093a2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	330c      	adds	r3, #12
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d119      	bne.n	80093e4 <HAL_SPI_TransmitReceive+0x2ae>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d014      	beq.n	80093e4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	1c5a      	adds	r2, r3, #1
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093e0:	2301      	movs	r3, #1
 80093e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80093e4:	f7fd fa3a 	bl	800685c <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d803      	bhi.n	80093fc <HAL_SPI_TransmitReceive+0x2c6>
 80093f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fa:	d102      	bne.n	8009402 <HAL_SPI_TransmitReceive+0x2cc>
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009408:	e029      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800940e:	b29b      	uxth	r3, r3
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1a2      	bne.n	800935a <HAL_SPI_TransmitReceive+0x224>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d19d      	bne.n	800935a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800941e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009422:	68f8      	ldr	r0, [r7, #12]
 8009424:	f000 f8f8 	bl	8009618 <SPI_EndRxTxTransaction>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800943a:	e010      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10b      	bne.n	800945c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	617b      	str	r3, [r7, #20]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	e000      	b.n	800945e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800945c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800946e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009472:	4618      	mov	r0, r3
 8009474:	3730      	adds	r7, #48	; 0x30
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b084      	sub	sp, #16
 800947e:	af00      	add	r7, sp, #0
 8009480:	60f8      	str	r0, [r7, #12]
 8009482:	60b9      	str	r1, [r7, #8]
 8009484:	603b      	str	r3, [r7, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800948a:	e04c      	b.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d048      	beq.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009494:	f7fd f9e2 	bl	800685c <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d902      	bls.n	80094aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d13d      	bne.n	8009526 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094c2:	d111      	bne.n	80094e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094cc:	d004      	beq.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d6:	d107      	bne.n	80094e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094f0:	d10f      	bne.n	8009512 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e00f      	b.n	8009546 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	4013      	ands	r3, r2
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	429a      	cmp	r2, r3
 8009534:	bf0c      	ite	eq
 8009536:	2301      	moveq	r3, #1
 8009538:	2300      	movne	r3, #0
 800953a:	b2db      	uxtb	r3, r3
 800953c:	461a      	mov	r2, r3
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	429a      	cmp	r2, r3
 8009542:	d1a3      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b086      	sub	sp, #24
 8009552:	af02      	add	r7, sp, #8
 8009554:	60f8      	str	r0, [r7, #12]
 8009556:	60b9      	str	r1, [r7, #8]
 8009558:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009562:	d111      	bne.n	8009588 <SPI_EndRxTransaction+0x3a>
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800956c:	d004      	beq.n	8009578 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009576:	d107      	bne.n	8009588 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009586:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009590:	d12a      	bne.n	80095e8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959a:	d012      	beq.n	80095c2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	2180      	movs	r1, #128	; 0x80
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7ff ff67 	bl	800947a <SPI_WaitFlagStateUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d02d      	beq.n	800960e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	f043 0220 	orr.w	r2, r3, #32
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e026      	b.n	8009610 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2200      	movs	r2, #0
 80095ca:	2101      	movs	r1, #1
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f7ff ff54 	bl	800947a <SPI_WaitFlagStateUntilTimeout>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01a      	beq.n	800960e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095dc:	f043 0220 	orr.w	r2, r3, #32
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e013      	b.n	8009610 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	2101      	movs	r1, #1
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7ff ff41 	bl	800947a <SPI_WaitFlagStateUntilTimeout>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009602:	f043 0220 	orr.w	r2, r3, #32
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e000      	b.n	8009610 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af02      	add	r7, sp, #8
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009624:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <SPI_EndRxTxTransaction+0x7c>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1b      	ldr	r2, [pc, #108]	; (8009698 <SPI_EndRxTxTransaction+0x80>)
 800962a:	fba2 2303 	umull	r2, r3, r2, r3
 800962e:	0d5b      	lsrs	r3, r3, #21
 8009630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009634:	fb02 f303 	mul.w	r3, r2, r3
 8009638:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009642:	d112      	bne.n	800966a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	2200      	movs	r2, #0
 800964c:	2180      	movs	r1, #128	; 0x80
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff ff13 	bl	800947a <SPI_WaitFlagStateUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d016      	beq.n	8009688 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965e:	f043 0220 	orr.w	r2, r3, #32
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e00f      	b.n	800968a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	3b01      	subs	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	689b      	ldr	r3, [r3, #8]
 800967c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009680:	2b80      	cmp	r3, #128	; 0x80
 8009682:	d0f2      	beq.n	800966a <SPI_EndRxTxTransaction+0x52>
 8009684:	e000      	b.n	8009688 <SPI_EndRxTxTransaction+0x70>
        break;
 8009686:	bf00      	nop
  }

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20000034 	.word	0x20000034
 8009698:	165e9f81 	.word	0x165e9f81

0800969c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e01d      	b.n	80096ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7fc fe12 	bl	80062ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2202      	movs	r2, #2
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4610      	mov	r0, r2
 80096dc:	f000 fb56 	bl	8009d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b085      	sub	sp, #20
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f042 0201 	orr.w	r2, r2, #1
 8009708:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f003 0307 	and.w	r3, r3, #7
 8009714:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b06      	cmp	r3, #6
 800971a:	d007      	beq.n	800972c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e01d      	b.n	8009788 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009752:	b2db      	uxtb	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d106      	bne.n	8009766 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7fc fd0f 	bl	8006184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2202      	movs	r2, #2
 800976a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	3304      	adds	r3, #4
 8009776:	4619      	mov	r1, r3
 8009778:	4610      	mov	r0, r2
 800977a:	f000 fb07 	bl	8009d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3708      	adds	r7, #8
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}

08009790 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2201      	movs	r2, #1
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 fd42 	bl	800a22c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a15      	ldr	r2, [pc, #84]	; (8009804 <HAL_TIM_PWM_Start+0x74>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d004      	beq.n	80097bc <HAL_TIM_PWM_Start+0x2c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a14      	ldr	r2, [pc, #80]	; (8009808 <HAL_TIM_PWM_Start+0x78>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d101      	bne.n	80097c0 <HAL_TIM_PWM_Start+0x30>
 80097bc:	2301      	movs	r3, #1
 80097be:	e000      	b.n	80097c2 <HAL_TIM_PWM_Start+0x32>
 80097c0:	2300      	movs	r3, #0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d007      	beq.n	80097d6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f003 0307 	and.w	r3, r3, #7
 80097e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d007      	beq.n	80097f8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	40010000 	.word	0x40010000
 8009808:	40010400 	.word	0x40010400

0800980c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800981c:	2301      	movs	r3, #1
 800981e:	e083      	b.n	8009928 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d106      	bne.n	800983a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7fc fcdd 	bl	80061f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2202      	movs	r2, #2
 800983e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	6812      	ldr	r2, [r2, #0]
 800984c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009850:	f023 0307 	bic.w	r3, r3, #7
 8009854:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	3304      	adds	r3, #4
 800985e:	4619      	mov	r1, r3
 8009860:	4610      	mov	r0, r2
 8009862:	f000 fa93 	bl	8009d8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800988e:	f023 0303 	bic.w	r3, r3, #3
 8009892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689a      	ldr	r2, [r3, #8]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	4313      	orrs	r3, r2
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80098ac:	f023 030c 	bic.w	r3, r3, #12
 80098b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	4313      	orrs	r3, r2
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	011a      	lsls	r2, r3, #4
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	031b      	lsls	r3, r3, #12
 80098dc:	4313      	orrs	r3, r2
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80098ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	695b      	ldr	r3, [r3, #20]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	4313      	orrs	r3, r2
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4313      	orrs	r3, r2
 8009904:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <HAL_TIM_Encoder_Start+0x16>
 8009940:	2b04      	cmp	r3, #4
 8009942:	d008      	beq.n	8009956 <HAL_TIM_Encoder_Start+0x26>
 8009944:	e00f      	b.n	8009966 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2201      	movs	r2, #1
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fc6c 	bl	800a22c <TIM_CCxChannelCmd>
      break;
 8009954:	e016      	b.n	8009984 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	2104      	movs	r1, #4
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fc64 	bl	800a22c <TIM_CCxChannelCmd>
      break;
 8009964:	e00e      	b.n	8009984 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	2201      	movs	r2, #1
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f000 fc5c 	bl	800a22c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2201      	movs	r2, #1
 800997a:	2104      	movs	r1, #4
 800997c:	4618      	mov	r0, r3
 800997e:	f000 fc55 	bl	800a22c <TIM_CCxChannelCmd>
      break;
 8009982:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f003 0302 	and.w	r3, r3, #2
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d122      	bne.n	80099fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d11b      	bne.n	80099fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f06f 0202 	mvn.w	r2, #2
 80099ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f9b5 	bl	8009d50 <HAL_TIM_IC_CaptureCallback>
 80099e6:	e005      	b.n	80099f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9a7 	bl	8009d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f9b8 	bl	8009d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	d122      	bne.n	8009a4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f003 0304 	and.w	r3, r3, #4
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d11b      	bne.n	8009a4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f06f 0204 	mvn.w	r2, #4
 8009a1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f98b 	bl	8009d50 <HAL_TIM_IC_CaptureCallback>
 8009a3a:	e005      	b.n	8009a48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f97d 	bl	8009d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f98e 	bl	8009d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	f003 0308 	and.w	r3, r3, #8
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d122      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f003 0308 	and.w	r3, r3, #8
 8009a66:	2b08      	cmp	r3, #8
 8009a68:	d11b      	bne.n	8009aa2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f06f 0208 	mvn.w	r2, #8
 8009a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2204      	movs	r2, #4
 8009a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f961 	bl	8009d50 <HAL_TIM_IC_CaptureCallback>
 8009a8e:	e005      	b.n	8009a9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f953 	bl	8009d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f964 	bl	8009d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	f003 0310 	and.w	r3, r3, #16
 8009aac:	2b10      	cmp	r3, #16
 8009aae:	d122      	bne.n	8009af6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f003 0310 	and.w	r3, r3, #16
 8009aba:	2b10      	cmp	r3, #16
 8009abc:	d11b      	bne.n	8009af6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f06f 0210 	mvn.w	r2, #16
 8009ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2208      	movs	r2, #8
 8009acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f937 	bl	8009d50 <HAL_TIM_IC_CaptureCallback>
 8009ae2:	e005      	b.n	8009af0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 f929 	bl	8009d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f93a 	bl	8009d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d10e      	bne.n	8009b22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d107      	bne.n	8009b22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f06f 0201 	mvn.w	r2, #1
 8009b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f7fa f9f3 	bl	8003f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d10e      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b3a:	2b80      	cmp	r3, #128	; 0x80
 8009b3c:	d107      	bne.n	8009b4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fc6d 	bl	800a428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	d10e      	bne.n	8009b7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	d107      	bne.n	8009b7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8ff 	bl	8009d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d10e      	bne.n	8009ba6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d107      	bne.n	8009ba6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f06f 0220 	mvn.w	r2, #32
 8009b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fc37 	bl	800a414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	e0b4      	b.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b0c      	cmp	r3, #12
 8009bde:	f200 809f 	bhi.w	8009d20 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009be2:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c1d 	.word	0x08009c1d
 8009bec:	08009d21 	.word	0x08009d21
 8009bf0:	08009d21 	.word	0x08009d21
 8009bf4:	08009d21 	.word	0x08009d21
 8009bf8:	08009c5d 	.word	0x08009c5d
 8009bfc:	08009d21 	.word	0x08009d21
 8009c00:	08009d21 	.word	0x08009d21
 8009c04:	08009d21 	.word	0x08009d21
 8009c08:	08009c9f 	.word	0x08009c9f
 8009c0c:	08009d21 	.word	0x08009d21
 8009c10:	08009d21 	.word	0x08009d21
 8009c14:	08009d21 	.word	0x08009d21
 8009c18:	08009cdf 	.word	0x08009cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f952 	bl	8009ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0208 	orr.w	r2, r2, #8
 8009c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699a      	ldr	r2, [r3, #24]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f022 0204 	bic.w	r2, r2, #4
 8009c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6999      	ldr	r1, [r3, #24]
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	691a      	ldr	r2, [r3, #16]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	619a      	str	r2, [r3, #24]
      break;
 8009c5a:	e062      	b.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68b9      	ldr	r1, [r7, #8]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 f9a2 	bl	8009fac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699a      	ldr	r2, [r3, #24]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699a      	ldr	r2, [r3, #24]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	6999      	ldr	r1, [r3, #24]
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	021a      	lsls	r2, r3, #8
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	619a      	str	r2, [r3, #24]
      break;
 8009c9c:	e041      	b.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 f9f7 	bl	800a098 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69da      	ldr	r2, [r3, #28]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f042 0208 	orr.w	r2, r2, #8
 8009cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69da      	ldr	r2, [r3, #28]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f022 0204 	bic.w	r2, r2, #4
 8009cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	69d9      	ldr	r1, [r3, #28]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	691a      	ldr	r2, [r3, #16]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	61da      	str	r2, [r3, #28]
      break;
 8009cdc:	e021      	b.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 fa4b 	bl	800a180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69da      	ldr	r2, [r3, #28]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69da      	ldr	r2, [r3, #28]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	69d9      	ldr	r1, [r3, #28]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	021a      	lsls	r2, r3, #8
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	61da      	str	r2, [r3, #28]
      break;
 8009d1e:	e000      	b.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009d20:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a40      	ldr	r2, [pc, #256]	; (8009ea0 <TIM_Base_SetConfig+0x114>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d013      	beq.n	8009dcc <TIM_Base_SetConfig+0x40>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009daa:	d00f      	beq.n	8009dcc <TIM_Base_SetConfig+0x40>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4a3d      	ldr	r2, [pc, #244]	; (8009ea4 <TIM_Base_SetConfig+0x118>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d00b      	beq.n	8009dcc <TIM_Base_SetConfig+0x40>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4a3c      	ldr	r2, [pc, #240]	; (8009ea8 <TIM_Base_SetConfig+0x11c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d007      	beq.n	8009dcc <TIM_Base_SetConfig+0x40>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4a3b      	ldr	r2, [pc, #236]	; (8009eac <TIM_Base_SetConfig+0x120>)
 8009dc0:	4293      	cmp	r3, r2
 8009dc2:	d003      	beq.n	8009dcc <TIM_Base_SetConfig+0x40>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a3a      	ldr	r2, [pc, #232]	; (8009eb0 <TIM_Base_SetConfig+0x124>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d108      	bne.n	8009dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a2f      	ldr	r2, [pc, #188]	; (8009ea0 <TIM_Base_SetConfig+0x114>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d02b      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dec:	d027      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a2c      	ldr	r2, [pc, #176]	; (8009ea4 <TIM_Base_SetConfig+0x118>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d023      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a2b      	ldr	r2, [pc, #172]	; (8009ea8 <TIM_Base_SetConfig+0x11c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d01f      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a2a      	ldr	r2, [pc, #168]	; (8009eac <TIM_Base_SetConfig+0x120>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d01b      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a29      	ldr	r2, [pc, #164]	; (8009eb0 <TIM_Base_SetConfig+0x124>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d017      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a28      	ldr	r2, [pc, #160]	; (8009eb4 <TIM_Base_SetConfig+0x128>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d013      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a27      	ldr	r2, [pc, #156]	; (8009eb8 <TIM_Base_SetConfig+0x12c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00f      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a26      	ldr	r2, [pc, #152]	; (8009ebc <TIM_Base_SetConfig+0x130>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d00b      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a25      	ldr	r2, [pc, #148]	; (8009ec0 <TIM_Base_SetConfig+0x134>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d007      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a24      	ldr	r2, [pc, #144]	; (8009ec4 <TIM_Base_SetConfig+0x138>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d003      	beq.n	8009e3e <TIM_Base_SetConfig+0xb2>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a23      	ldr	r2, [pc, #140]	; (8009ec8 <TIM_Base_SetConfig+0x13c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d108      	bne.n	8009e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	695b      	ldr	r3, [r3, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <TIM_Base_SetConfig+0x114>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d003      	beq.n	8009e84 <TIM_Base_SetConfig+0xf8>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	4a0c      	ldr	r2, [pc, #48]	; (8009eb0 <TIM_Base_SetConfig+0x124>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d103      	bne.n	8009e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	691a      	ldr	r2, [r3, #16]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	615a      	str	r2, [r3, #20]
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40000400 	.word	0x40000400
 8009ea8:	40000800 	.word	0x40000800
 8009eac:	40000c00 	.word	0x40000c00
 8009eb0:	40010400 	.word	0x40010400
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40014400 	.word	0x40014400
 8009ebc:	40014800 	.word	0x40014800
 8009ec0:	40001800 	.word	0x40001800
 8009ec4:	40001c00 	.word	0x40001c00
 8009ec8:	40002000 	.word	0x40002000

08009ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f023 0201 	bic.w	r2, r3, #1
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f023 0302 	bic.w	r3, r3, #2
 8009f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	689b      	ldr	r3, [r3, #8]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a20      	ldr	r2, [pc, #128]	; (8009fa4 <TIM_OC1_SetConfig+0xd8>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d003      	beq.n	8009f30 <TIM_OC1_SetConfig+0x64>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a1f      	ldr	r2, [pc, #124]	; (8009fa8 <TIM_OC1_SetConfig+0xdc>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d10c      	bne.n	8009f4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	f023 0308 	bic.w	r3, r3, #8
 8009f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f023 0304 	bic.w	r3, r3, #4
 8009f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a15      	ldr	r2, [pc, #84]	; (8009fa4 <TIM_OC1_SetConfig+0xd8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_OC1_SetConfig+0x8e>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a14      	ldr	r2, [pc, #80]	; (8009fa8 <TIM_OC1_SetConfig+0xdc>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d111      	bne.n	8009f7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	693a      	ldr	r2, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685a      	ldr	r2, [r3, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	621a      	str	r2, [r3, #32]
}
 8009f98:	bf00      	nop
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	40010000 	.word	0x40010000
 8009fa8:	40010400 	.word	0x40010400

08009fac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a1b      	ldr	r3, [r3, #32]
 8009fba:	f023 0210 	bic.w	r2, r3, #16
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	68fa      	ldr	r2, [r7, #12]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	f023 0320 	bic.w	r3, r3, #32
 8009ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	4313      	orrs	r3, r2
 800a002:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a22      	ldr	r2, [pc, #136]	; (800a090 <TIM_OC2_SetConfig+0xe4>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_OC2_SetConfig+0x68>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a21      	ldr	r2, [pc, #132]	; (800a094 <TIM_OC2_SetConfig+0xe8>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d10d      	bne.n	800a030 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a01a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	697a      	ldr	r2, [r7, #20]
 800a024:	4313      	orrs	r3, r2
 800a026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a02e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a17      	ldr	r2, [pc, #92]	; (800a090 <TIM_OC2_SetConfig+0xe4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d003      	beq.n	800a040 <TIM_OC2_SetConfig+0x94>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a16      	ldr	r2, [pc, #88]	; (800a094 <TIM_OC2_SetConfig+0xe8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d113      	bne.n	800a068 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a046:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a04e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	695b      	ldr	r3, [r3, #20]
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	4313      	orrs	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	693a      	ldr	r2, [r7, #16]
 800a064:	4313      	orrs	r3, r2
 800a066:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685a      	ldr	r2, [r3, #4]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	697a      	ldr	r2, [r7, #20]
 800a080:	621a      	str	r2, [r3, #32]
}
 800a082:	bf00      	nop
 800a084:	371c      	adds	r7, #28
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	40010000 	.word	0x40010000
 800a094:	40010400 	.word	0x40010400

0800a098 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f023 0303 	bic.w	r3, r3, #3
 800a0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	021b      	lsls	r3, r3, #8
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a21      	ldr	r2, [pc, #132]	; (800a178 <TIM_OC3_SetConfig+0xe0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d003      	beq.n	800a0fe <TIM_OC3_SetConfig+0x66>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a20      	ldr	r2, [pc, #128]	; (800a17c <TIM_OC3_SetConfig+0xe4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d10d      	bne.n	800a11a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	021b      	lsls	r3, r3, #8
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	4313      	orrs	r3, r2
 800a110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a16      	ldr	r2, [pc, #88]	; (800a178 <TIM_OC3_SetConfig+0xe0>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d003      	beq.n	800a12a <TIM_OC3_SetConfig+0x92>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a15      	ldr	r2, [pc, #84]	; (800a17c <TIM_OC3_SetConfig+0xe4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d113      	bne.n	800a152 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	4313      	orrs	r3, r2
 800a150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	bf00      	nop
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	40010000 	.word	0x40010000
 800a17c:	40010400 	.word	0x40010400

0800a180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	021b      	lsls	r3, r3, #8
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	031b      	lsls	r3, r3, #12
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a12      	ldr	r2, [pc, #72]	; (800a224 <TIM_OC4_SetConfig+0xa4>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d003      	beq.n	800a1e8 <TIM_OC4_SetConfig+0x68>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a11      	ldr	r2, [pc, #68]	; (800a228 <TIM_OC4_SetConfig+0xa8>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d109      	bne.n	800a1fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	019b      	lsls	r3, r3, #6
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 031f 	and.w	r3, r3, #31
 800a23e:	2201      	movs	r2, #1
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	43db      	mvns	r3, r3
 800a24e:	401a      	ands	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6a1a      	ldr	r2, [r3, #32]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	f003 031f 	and.w	r3, r3, #31
 800a25e:	6879      	ldr	r1, [r7, #4]
 800a260:	fa01 f303 	lsl.w	r3, r1, r3
 800a264:	431a      	orrs	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	621a      	str	r2, [r3, #32]
}
 800a26a:	bf00      	nop
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr
	...

0800a278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a28c:	2302      	movs	r3, #2
 800a28e:	e05a      	b.n	800a346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a21      	ldr	r2, [pc, #132]	; (800a354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d022      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2dc:	d01d      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1d      	ldr	r2, [pc, #116]	; (800a358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d018      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a1b      	ldr	r2, [pc, #108]	; (800a35c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d013      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a1a      	ldr	r2, [pc, #104]	; (800a360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d00e      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a18      	ldr	r2, [pc, #96]	; (800a364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d009      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a17      	ldr	r2, [pc, #92]	; (800a368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d004      	beq.n	800a31a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a15      	ldr	r2, [pc, #84]	; (800a36c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d10c      	bne.n	800a334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	40010000 	.word	0x40010000
 800a358:	40000400 	.word	0x40000400
 800a35c:	40000800 	.word	0x40000800
 800a360:	40000c00 	.word	0x40000c00
 800a364:	40010400 	.word	0x40010400
 800a368:	40014000 	.word	0x40014000
 800a36c:	40001800 	.word	0x40001800

0800a370 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a370:	b480      	push	{r7}
 800a372:	b085      	sub	sp, #20
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a384:	2b01      	cmp	r3, #1
 800a386:	d101      	bne.n	800a38c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a388:	2302      	movs	r3, #2
 800a38a:	e03d      	b.n	800a408 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e03f      	b.n	800a4ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a454:	b2db      	uxtb	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d106      	bne.n	800a468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7fb ffec 	bl	8006440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2224      	movs	r2, #36	; 0x24
 800a46c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	68da      	ldr	r2, [r3, #12]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a47e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f90b 	bl	800a69c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2220      	movs	r2, #32
 800a4c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b088      	sub	sp, #32
 800a4da:	af02      	add	r7, sp, #8
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	603b      	str	r3, [r7, #0]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	2b20      	cmp	r3, #32
 800a4f4:	f040 8083 	bne.w	800a5fe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d002      	beq.n	800a504 <HAL_UART_Transmit+0x2e>
 800a4fe:	88fb      	ldrh	r3, [r7, #6]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e07b      	b.n	800a600 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d101      	bne.n	800a516 <HAL_UART_Transmit+0x40>
 800a512:	2302      	movs	r3, #2
 800a514:	e074      	b.n	800a600 <HAL_UART_Transmit+0x12a>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2200      	movs	r2, #0
 800a522:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2221      	movs	r2, #33	; 0x21
 800a528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a52c:	f7fc f996 	bl	800685c <HAL_GetTick>
 800a530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	88fa      	ldrh	r2, [r7, #6]
 800a536:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	88fa      	ldrh	r2, [r7, #6]
 800a53c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a546:	e042      	b.n	800a5ce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	3b01      	subs	r3, #1
 800a550:	b29a      	uxth	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a55e:	d122      	bne.n	800a5a6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	9300      	str	r3, [sp, #0]
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2200      	movs	r2, #0
 800a568:	2180      	movs	r1, #128	; 0x80
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f000 f84c 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a576:	2303      	movs	r3, #3
 800a578:	e042      	b.n	800a600 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a58c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	3302      	adds	r3, #2
 800a59a:	60bb      	str	r3, [r7, #8]
 800a59c:	e017      	b.n	800a5ce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	60bb      	str	r3, [r7, #8]
 800a5a4:	e013      	b.n	800a5ce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2180      	movs	r1, #128	; 0x80
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 f829 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e01f      	b.n	800a600 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	60ba      	str	r2, [r7, #8]
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1b7      	bne.n	800a548 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	2140      	movs	r1, #64	; 0x40
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f000 f810 	bl	800a608 <UART_WaitOnFlagUntilTimeout>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e006      	b.n	800a600 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2220      	movs	r2, #32
 800a5f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e000      	b.n	800a600 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
  }
}
 800a600:	4618      	mov	r0, r3
 800a602:	3718      	adds	r7, #24
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	603b      	str	r3, [r7, #0]
 800a614:	4613      	mov	r3, r2
 800a616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a618:	e02c      	b.n	800a674 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a620:	d028      	beq.n	800a674 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d007      	beq.n	800a638 <UART_WaitOnFlagUntilTimeout+0x30>
 800a628:	f7fc f918 	bl	800685c <HAL_GetTick>
 800a62c:	4602      	mov	r2, r0
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	429a      	cmp	r2, r3
 800a636:	d21d      	bcs.n	800a674 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68da      	ldr	r2, [r3, #12]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a646:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	695a      	ldr	r2, [r3, #20]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f022 0201 	bic.w	r2, r2, #1
 800a656:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2220      	movs	r2, #32
 800a65c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2220      	movs	r2, #32
 800a664:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e00f      	b.n	800a694 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	4013      	ands	r3, r2
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	429a      	cmp	r2, r3
 800a682:	bf0c      	ite	eq
 800a684:	2301      	moveq	r3, #1
 800a686:	2300      	movne	r3, #0
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	461a      	mov	r2, r3
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d0c3      	beq.n	800a61a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	431a      	orrs	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	69db      	ldr	r3, [r3, #28]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a6de:	f023 030c 	bic.w	r3, r3, #12
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	430b      	orrs	r3, r1
 800a6ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	699a      	ldr	r2, [r3, #24]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70a:	f040 818b 	bne.w	800aa24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4ac1      	ldr	r2, [pc, #772]	; (800aa18 <UART_SetConfig+0x37c>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d005      	beq.n	800a724 <UART_SetConfig+0x88>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4abf      	ldr	r2, [pc, #764]	; (800aa1c <UART_SetConfig+0x380>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	f040 80bd 	bne.w	800a89e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a724:	f7fe fa52 	bl	8008bcc <HAL_RCC_GetPCLK2Freq>
 800a728:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	461d      	mov	r5, r3
 800a72e:	f04f 0600 	mov.w	r6, #0
 800a732:	46a8      	mov	r8, r5
 800a734:	46b1      	mov	r9, r6
 800a736:	eb18 0308 	adds.w	r3, r8, r8
 800a73a:	eb49 0409 	adc.w	r4, r9, r9
 800a73e:	4698      	mov	r8, r3
 800a740:	46a1      	mov	r9, r4
 800a742:	eb18 0805 	adds.w	r8, r8, r5
 800a746:	eb49 0906 	adc.w	r9, r9, r6
 800a74a:	f04f 0100 	mov.w	r1, #0
 800a74e:	f04f 0200 	mov.w	r2, #0
 800a752:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a756:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a75a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a75e:	4688      	mov	r8, r1
 800a760:	4691      	mov	r9, r2
 800a762:	eb18 0005 	adds.w	r0, r8, r5
 800a766:	eb49 0106 	adc.w	r1, r9, r6
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	461d      	mov	r5, r3
 800a770:	f04f 0600 	mov.w	r6, #0
 800a774:	196b      	adds	r3, r5, r5
 800a776:	eb46 0406 	adc.w	r4, r6, r6
 800a77a:	461a      	mov	r2, r3
 800a77c:	4623      	mov	r3, r4
 800a77e:	f7f6 fa83 	bl	8000c88 <__aeabi_uldivmod>
 800a782:	4603      	mov	r3, r0
 800a784:	460c      	mov	r4, r1
 800a786:	461a      	mov	r2, r3
 800a788:	4ba5      	ldr	r3, [pc, #660]	; (800aa20 <UART_SetConfig+0x384>)
 800a78a:	fba3 2302 	umull	r2, r3, r3, r2
 800a78e:	095b      	lsrs	r3, r3, #5
 800a790:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	461d      	mov	r5, r3
 800a798:	f04f 0600 	mov.w	r6, #0
 800a79c:	46a9      	mov	r9, r5
 800a79e:	46b2      	mov	sl, r6
 800a7a0:	eb19 0309 	adds.w	r3, r9, r9
 800a7a4:	eb4a 040a 	adc.w	r4, sl, sl
 800a7a8:	4699      	mov	r9, r3
 800a7aa:	46a2      	mov	sl, r4
 800a7ac:	eb19 0905 	adds.w	r9, r9, r5
 800a7b0:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7b4:	f04f 0100 	mov.w	r1, #0
 800a7b8:	f04f 0200 	mov.w	r2, #0
 800a7bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7c8:	4689      	mov	r9, r1
 800a7ca:	4692      	mov	sl, r2
 800a7cc:	eb19 0005 	adds.w	r0, r9, r5
 800a7d0:	eb4a 0106 	adc.w	r1, sl, r6
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	461d      	mov	r5, r3
 800a7da:	f04f 0600 	mov.w	r6, #0
 800a7de:	196b      	adds	r3, r5, r5
 800a7e0:	eb46 0406 	adc.w	r4, r6, r6
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4623      	mov	r3, r4
 800a7e8:	f7f6 fa4e 	bl	8000c88 <__aeabi_uldivmod>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4b8b      	ldr	r3, [pc, #556]	; (800aa20 <UART_SetConfig+0x384>)
 800a7f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	2164      	movs	r1, #100	; 0x64
 800a7fc:	fb01 f303 	mul.w	r3, r1, r3
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	00db      	lsls	r3, r3, #3
 800a804:	3332      	adds	r3, #50	; 0x32
 800a806:	4a86      	ldr	r2, [pc, #536]	; (800aa20 <UART_SetConfig+0x384>)
 800a808:	fba2 2303 	umull	r2, r3, r2, r3
 800a80c:	095b      	lsrs	r3, r3, #5
 800a80e:	005b      	lsls	r3, r3, #1
 800a810:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a814:	4498      	add	r8, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	461d      	mov	r5, r3
 800a81a:	f04f 0600 	mov.w	r6, #0
 800a81e:	46a9      	mov	r9, r5
 800a820:	46b2      	mov	sl, r6
 800a822:	eb19 0309 	adds.w	r3, r9, r9
 800a826:	eb4a 040a 	adc.w	r4, sl, sl
 800a82a:	4699      	mov	r9, r3
 800a82c:	46a2      	mov	sl, r4
 800a82e:	eb19 0905 	adds.w	r9, r9, r5
 800a832:	eb4a 0a06 	adc.w	sl, sl, r6
 800a836:	f04f 0100 	mov.w	r1, #0
 800a83a:	f04f 0200 	mov.w	r2, #0
 800a83e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a842:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a846:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a84a:	4689      	mov	r9, r1
 800a84c:	4692      	mov	sl, r2
 800a84e:	eb19 0005 	adds.w	r0, r9, r5
 800a852:	eb4a 0106 	adc.w	r1, sl, r6
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	461d      	mov	r5, r3
 800a85c:	f04f 0600 	mov.w	r6, #0
 800a860:	196b      	adds	r3, r5, r5
 800a862:	eb46 0406 	adc.w	r4, r6, r6
 800a866:	461a      	mov	r2, r3
 800a868:	4623      	mov	r3, r4
 800a86a:	f7f6 fa0d 	bl	8000c88 <__aeabi_uldivmod>
 800a86e:	4603      	mov	r3, r0
 800a870:	460c      	mov	r4, r1
 800a872:	461a      	mov	r2, r3
 800a874:	4b6a      	ldr	r3, [pc, #424]	; (800aa20 <UART_SetConfig+0x384>)
 800a876:	fba3 1302 	umull	r1, r3, r3, r2
 800a87a:	095b      	lsrs	r3, r3, #5
 800a87c:	2164      	movs	r1, #100	; 0x64
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	3332      	adds	r3, #50	; 0x32
 800a888:	4a65      	ldr	r2, [pc, #404]	; (800aa20 <UART_SetConfig+0x384>)
 800a88a:	fba2 2303 	umull	r2, r3, r2, r3
 800a88e:	095b      	lsrs	r3, r3, #5
 800a890:	f003 0207 	and.w	r2, r3, #7
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4442      	add	r2, r8
 800a89a:	609a      	str	r2, [r3, #8]
 800a89c:	e26f      	b.n	800ad7e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a89e:	f7fe f981 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800a8a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	461d      	mov	r5, r3
 800a8a8:	f04f 0600 	mov.w	r6, #0
 800a8ac:	46a8      	mov	r8, r5
 800a8ae:	46b1      	mov	r9, r6
 800a8b0:	eb18 0308 	adds.w	r3, r8, r8
 800a8b4:	eb49 0409 	adc.w	r4, r9, r9
 800a8b8:	4698      	mov	r8, r3
 800a8ba:	46a1      	mov	r9, r4
 800a8bc:	eb18 0805 	adds.w	r8, r8, r5
 800a8c0:	eb49 0906 	adc.w	r9, r9, r6
 800a8c4:	f04f 0100 	mov.w	r1, #0
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8d8:	4688      	mov	r8, r1
 800a8da:	4691      	mov	r9, r2
 800a8dc:	eb18 0005 	adds.w	r0, r8, r5
 800a8e0:	eb49 0106 	adc.w	r1, r9, r6
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	461d      	mov	r5, r3
 800a8ea:	f04f 0600 	mov.w	r6, #0
 800a8ee:	196b      	adds	r3, r5, r5
 800a8f0:	eb46 0406 	adc.w	r4, r6, r6
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	4623      	mov	r3, r4
 800a8f8:	f7f6 f9c6 	bl	8000c88 <__aeabi_uldivmod>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	461a      	mov	r2, r3
 800a902:	4b47      	ldr	r3, [pc, #284]	; (800aa20 <UART_SetConfig+0x384>)
 800a904:	fba3 2302 	umull	r2, r3, r3, r2
 800a908:	095b      	lsrs	r3, r3, #5
 800a90a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	461d      	mov	r5, r3
 800a912:	f04f 0600 	mov.w	r6, #0
 800a916:	46a9      	mov	r9, r5
 800a918:	46b2      	mov	sl, r6
 800a91a:	eb19 0309 	adds.w	r3, r9, r9
 800a91e:	eb4a 040a 	adc.w	r4, sl, sl
 800a922:	4699      	mov	r9, r3
 800a924:	46a2      	mov	sl, r4
 800a926:	eb19 0905 	adds.w	r9, r9, r5
 800a92a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a92e:	f04f 0100 	mov.w	r1, #0
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a93a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a93e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a942:	4689      	mov	r9, r1
 800a944:	4692      	mov	sl, r2
 800a946:	eb19 0005 	adds.w	r0, r9, r5
 800a94a:	eb4a 0106 	adc.w	r1, sl, r6
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	461d      	mov	r5, r3
 800a954:	f04f 0600 	mov.w	r6, #0
 800a958:	196b      	adds	r3, r5, r5
 800a95a:	eb46 0406 	adc.w	r4, r6, r6
 800a95e:	461a      	mov	r2, r3
 800a960:	4623      	mov	r3, r4
 800a962:	f7f6 f991 	bl	8000c88 <__aeabi_uldivmod>
 800a966:	4603      	mov	r3, r0
 800a968:	460c      	mov	r4, r1
 800a96a:	461a      	mov	r2, r3
 800a96c:	4b2c      	ldr	r3, [pc, #176]	; (800aa20 <UART_SetConfig+0x384>)
 800a96e:	fba3 1302 	umull	r1, r3, r3, r2
 800a972:	095b      	lsrs	r3, r3, #5
 800a974:	2164      	movs	r1, #100	; 0x64
 800a976:	fb01 f303 	mul.w	r3, r1, r3
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	00db      	lsls	r3, r3, #3
 800a97e:	3332      	adds	r3, #50	; 0x32
 800a980:	4a27      	ldr	r2, [pc, #156]	; (800aa20 <UART_SetConfig+0x384>)
 800a982:	fba2 2303 	umull	r2, r3, r2, r3
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a98e:	4498      	add	r8, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	461d      	mov	r5, r3
 800a994:	f04f 0600 	mov.w	r6, #0
 800a998:	46a9      	mov	r9, r5
 800a99a:	46b2      	mov	sl, r6
 800a99c:	eb19 0309 	adds.w	r3, r9, r9
 800a9a0:	eb4a 040a 	adc.w	r4, sl, sl
 800a9a4:	4699      	mov	r9, r3
 800a9a6:	46a2      	mov	sl, r4
 800a9a8:	eb19 0905 	adds.w	r9, r9, r5
 800a9ac:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9b0:	f04f 0100 	mov.w	r1, #0
 800a9b4:	f04f 0200 	mov.w	r2, #0
 800a9b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9c4:	4689      	mov	r9, r1
 800a9c6:	4692      	mov	sl, r2
 800a9c8:	eb19 0005 	adds.w	r0, r9, r5
 800a9cc:	eb4a 0106 	adc.w	r1, sl, r6
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	461d      	mov	r5, r3
 800a9d6:	f04f 0600 	mov.w	r6, #0
 800a9da:	196b      	adds	r3, r5, r5
 800a9dc:	eb46 0406 	adc.w	r4, r6, r6
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4623      	mov	r3, r4
 800a9e4:	f7f6 f950 	bl	8000c88 <__aeabi_uldivmod>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	; (800aa20 <UART_SetConfig+0x384>)
 800a9f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9f4:	095b      	lsrs	r3, r3, #5
 800a9f6:	2164      	movs	r1, #100	; 0x64
 800a9f8:	fb01 f303 	mul.w	r3, r1, r3
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	3332      	adds	r3, #50	; 0x32
 800aa02:	4a07      	ldr	r2, [pc, #28]	; (800aa20 <UART_SetConfig+0x384>)
 800aa04:	fba2 2303 	umull	r2, r3, r2, r3
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	f003 0207 	and.w	r2, r3, #7
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4442      	add	r2, r8
 800aa14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aa16:	e1b2      	b.n	800ad7e <UART_SetConfig+0x6e2>
 800aa18:	40011000 	.word	0x40011000
 800aa1c:	40011400 	.word	0x40011400
 800aa20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4ad7      	ldr	r2, [pc, #860]	; (800ad88 <UART_SetConfig+0x6ec>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d005      	beq.n	800aa3a <UART_SetConfig+0x39e>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4ad6      	ldr	r2, [pc, #856]	; (800ad8c <UART_SetConfig+0x6f0>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	f040 80d1 	bne.w	800abdc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa3a:	f7fe f8c7 	bl	8008bcc <HAL_RCC_GetPCLK2Freq>
 800aa3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	469a      	mov	sl, r3
 800aa44:	f04f 0b00 	mov.w	fp, #0
 800aa48:	46d0      	mov	r8, sl
 800aa4a:	46d9      	mov	r9, fp
 800aa4c:	eb18 0308 	adds.w	r3, r8, r8
 800aa50:	eb49 0409 	adc.w	r4, r9, r9
 800aa54:	4698      	mov	r8, r3
 800aa56:	46a1      	mov	r9, r4
 800aa58:	eb18 080a 	adds.w	r8, r8, sl
 800aa5c:	eb49 090b 	adc.w	r9, r9, fp
 800aa60:	f04f 0100 	mov.w	r1, #0
 800aa64:	f04f 0200 	mov.w	r2, #0
 800aa68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa74:	4688      	mov	r8, r1
 800aa76:	4691      	mov	r9, r2
 800aa78:	eb1a 0508 	adds.w	r5, sl, r8
 800aa7c:	eb4b 0609 	adc.w	r6, fp, r9
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	4619      	mov	r1, r3
 800aa86:	f04f 0200 	mov.w	r2, #0
 800aa8a:	f04f 0300 	mov.w	r3, #0
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	0094      	lsls	r4, r2, #2
 800aa94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa98:	008b      	lsls	r3, r1, #2
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	f7f6 f8f1 	bl	8000c88 <__aeabi_uldivmod>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	461a      	mov	r2, r3
 800aaac:	4bb8      	ldr	r3, [pc, #736]	; (800ad90 <UART_SetConfig+0x6f4>)
 800aaae:	fba3 2302 	umull	r2, r3, r3, r2
 800aab2:	095b      	lsrs	r3, r3, #5
 800aab4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	469b      	mov	fp, r3
 800aabc:	f04f 0c00 	mov.w	ip, #0
 800aac0:	46d9      	mov	r9, fp
 800aac2:	46e2      	mov	sl, ip
 800aac4:	eb19 0309 	adds.w	r3, r9, r9
 800aac8:	eb4a 040a 	adc.w	r4, sl, sl
 800aacc:	4699      	mov	r9, r3
 800aace:	46a2      	mov	sl, r4
 800aad0:	eb19 090b 	adds.w	r9, r9, fp
 800aad4:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aad8:	f04f 0100 	mov.w	r1, #0
 800aadc:	f04f 0200 	mov.w	r2, #0
 800aae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aaec:	4689      	mov	r9, r1
 800aaee:	4692      	mov	sl, r2
 800aaf0:	eb1b 0509 	adds.w	r5, fp, r9
 800aaf4:	eb4c 060a 	adc.w	r6, ip, sl
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	4619      	mov	r1, r3
 800aafe:	f04f 0200 	mov.w	r2, #0
 800ab02:	f04f 0300 	mov.w	r3, #0
 800ab06:	f04f 0400 	mov.w	r4, #0
 800ab0a:	0094      	lsls	r4, r2, #2
 800ab0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab10:	008b      	lsls	r3, r1, #2
 800ab12:	461a      	mov	r2, r3
 800ab14:	4623      	mov	r3, r4
 800ab16:	4628      	mov	r0, r5
 800ab18:	4631      	mov	r1, r6
 800ab1a:	f7f6 f8b5 	bl	8000c88 <__aeabi_uldivmod>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	460c      	mov	r4, r1
 800ab22:	461a      	mov	r2, r3
 800ab24:	4b9a      	ldr	r3, [pc, #616]	; (800ad90 <UART_SetConfig+0x6f4>)
 800ab26:	fba3 1302 	umull	r1, r3, r3, r2
 800ab2a:	095b      	lsrs	r3, r3, #5
 800ab2c:	2164      	movs	r1, #100	; 0x64
 800ab2e:	fb01 f303 	mul.w	r3, r1, r3
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	011b      	lsls	r3, r3, #4
 800ab36:	3332      	adds	r3, #50	; 0x32
 800ab38:	4a95      	ldr	r2, [pc, #596]	; (800ad90 <UART_SetConfig+0x6f4>)
 800ab3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab3e:	095b      	lsrs	r3, r3, #5
 800ab40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab44:	4498      	add	r8, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	469b      	mov	fp, r3
 800ab4a:	f04f 0c00 	mov.w	ip, #0
 800ab4e:	46d9      	mov	r9, fp
 800ab50:	46e2      	mov	sl, ip
 800ab52:	eb19 0309 	adds.w	r3, r9, r9
 800ab56:	eb4a 040a 	adc.w	r4, sl, sl
 800ab5a:	4699      	mov	r9, r3
 800ab5c:	46a2      	mov	sl, r4
 800ab5e:	eb19 090b 	adds.w	r9, r9, fp
 800ab62:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab66:	f04f 0100 	mov.w	r1, #0
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab7a:	4689      	mov	r9, r1
 800ab7c:	4692      	mov	sl, r2
 800ab7e:	eb1b 0509 	adds.w	r5, fp, r9
 800ab82:	eb4c 060a 	adc.w	r6, ip, sl
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f04f 0200 	mov.w	r2, #0
 800ab90:	f04f 0300 	mov.w	r3, #0
 800ab94:	f04f 0400 	mov.w	r4, #0
 800ab98:	0094      	lsls	r4, r2, #2
 800ab9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab9e:	008b      	lsls	r3, r1, #2
 800aba0:	461a      	mov	r2, r3
 800aba2:	4623      	mov	r3, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	4631      	mov	r1, r6
 800aba8:	f7f6 f86e 	bl	8000c88 <__aeabi_uldivmod>
 800abac:	4603      	mov	r3, r0
 800abae:	460c      	mov	r4, r1
 800abb0:	461a      	mov	r2, r3
 800abb2:	4b77      	ldr	r3, [pc, #476]	; (800ad90 <UART_SetConfig+0x6f4>)
 800abb4:	fba3 1302 	umull	r1, r3, r3, r2
 800abb8:	095b      	lsrs	r3, r3, #5
 800abba:	2164      	movs	r1, #100	; 0x64
 800abbc:	fb01 f303 	mul.w	r3, r1, r3
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	011b      	lsls	r3, r3, #4
 800abc4:	3332      	adds	r3, #50	; 0x32
 800abc6:	4a72      	ldr	r2, [pc, #456]	; (800ad90 <UART_SetConfig+0x6f4>)
 800abc8:	fba2 2303 	umull	r2, r3, r2, r3
 800abcc:	095b      	lsrs	r3, r3, #5
 800abce:	f003 020f 	and.w	r2, r3, #15
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4442      	add	r2, r8
 800abd8:	609a      	str	r2, [r3, #8]
 800abda:	e0d0      	b.n	800ad7e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800abdc:	f7fd ffe2 	bl	8008ba4 <HAL_RCC_GetPCLK1Freq>
 800abe0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	469a      	mov	sl, r3
 800abe6:	f04f 0b00 	mov.w	fp, #0
 800abea:	46d0      	mov	r8, sl
 800abec:	46d9      	mov	r9, fp
 800abee:	eb18 0308 	adds.w	r3, r8, r8
 800abf2:	eb49 0409 	adc.w	r4, r9, r9
 800abf6:	4698      	mov	r8, r3
 800abf8:	46a1      	mov	r9, r4
 800abfa:	eb18 080a 	adds.w	r8, r8, sl
 800abfe:	eb49 090b 	adc.w	r9, r9, fp
 800ac02:	f04f 0100 	mov.w	r1, #0
 800ac06:	f04f 0200 	mov.w	r2, #0
 800ac0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac16:	4688      	mov	r8, r1
 800ac18:	4691      	mov	r9, r2
 800ac1a:	eb1a 0508 	adds.w	r5, sl, r8
 800ac1e:	eb4b 0609 	adc.w	r6, fp, r9
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	4619      	mov	r1, r3
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	f04f 0300 	mov.w	r3, #0
 800ac30:	f04f 0400 	mov.w	r4, #0
 800ac34:	0094      	lsls	r4, r2, #2
 800ac36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac3a:	008b      	lsls	r3, r1, #2
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	4623      	mov	r3, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	4631      	mov	r1, r6
 800ac44:	f7f6 f820 	bl	8000c88 <__aeabi_uldivmod>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	4b50      	ldr	r3, [pc, #320]	; (800ad90 <UART_SetConfig+0x6f4>)
 800ac50:	fba3 2302 	umull	r2, r3, r3, r2
 800ac54:	095b      	lsrs	r3, r3, #5
 800ac56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	469b      	mov	fp, r3
 800ac5e:	f04f 0c00 	mov.w	ip, #0
 800ac62:	46d9      	mov	r9, fp
 800ac64:	46e2      	mov	sl, ip
 800ac66:	eb19 0309 	adds.w	r3, r9, r9
 800ac6a:	eb4a 040a 	adc.w	r4, sl, sl
 800ac6e:	4699      	mov	r9, r3
 800ac70:	46a2      	mov	sl, r4
 800ac72:	eb19 090b 	adds.w	r9, r9, fp
 800ac76:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac7a:	f04f 0100 	mov.w	r1, #0
 800ac7e:	f04f 0200 	mov.w	r2, #0
 800ac82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac8e:	4689      	mov	r9, r1
 800ac90:	4692      	mov	sl, r2
 800ac92:	eb1b 0509 	adds.w	r5, fp, r9
 800ac96:	eb4c 060a 	adc.w	r6, ip, sl
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	f04f 0200 	mov.w	r2, #0
 800aca4:	f04f 0300 	mov.w	r3, #0
 800aca8:	f04f 0400 	mov.w	r4, #0
 800acac:	0094      	lsls	r4, r2, #2
 800acae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acb2:	008b      	lsls	r3, r1, #2
 800acb4:	461a      	mov	r2, r3
 800acb6:	4623      	mov	r3, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	4631      	mov	r1, r6
 800acbc:	f7f5 ffe4 	bl	8000c88 <__aeabi_uldivmod>
 800acc0:	4603      	mov	r3, r0
 800acc2:	460c      	mov	r4, r1
 800acc4:	461a      	mov	r2, r3
 800acc6:	4b32      	ldr	r3, [pc, #200]	; (800ad90 <UART_SetConfig+0x6f4>)
 800acc8:	fba3 1302 	umull	r1, r3, r3, r2
 800accc:	095b      	lsrs	r3, r3, #5
 800acce:	2164      	movs	r1, #100	; 0x64
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	3332      	adds	r3, #50	; 0x32
 800acda:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <UART_SetConfig+0x6f4>)
 800acdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ace0:	095b      	lsrs	r3, r3, #5
 800ace2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ace6:	4498      	add	r8, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	469b      	mov	fp, r3
 800acec:	f04f 0c00 	mov.w	ip, #0
 800acf0:	46d9      	mov	r9, fp
 800acf2:	46e2      	mov	sl, ip
 800acf4:	eb19 0309 	adds.w	r3, r9, r9
 800acf8:	eb4a 040a 	adc.w	r4, sl, sl
 800acfc:	4699      	mov	r9, r3
 800acfe:	46a2      	mov	sl, r4
 800ad00:	eb19 090b 	adds.w	r9, r9, fp
 800ad04:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad08:	f04f 0100 	mov.w	r1, #0
 800ad0c:	f04f 0200 	mov.w	r2, #0
 800ad10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad1c:	4689      	mov	r9, r1
 800ad1e:	4692      	mov	sl, r2
 800ad20:	eb1b 0509 	adds.w	r5, fp, r9
 800ad24:	eb4c 060a 	adc.w	r6, ip, sl
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f04f 0200 	mov.w	r2, #0
 800ad32:	f04f 0300 	mov.w	r3, #0
 800ad36:	f04f 0400 	mov.w	r4, #0
 800ad3a:	0094      	lsls	r4, r2, #2
 800ad3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad40:	008b      	lsls	r3, r1, #2
 800ad42:	461a      	mov	r2, r3
 800ad44:	4623      	mov	r3, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	4631      	mov	r1, r6
 800ad4a:	f7f5 ff9d 	bl	8000c88 <__aeabi_uldivmod>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	460c      	mov	r4, r1
 800ad52:	461a      	mov	r2, r3
 800ad54:	4b0e      	ldr	r3, [pc, #56]	; (800ad90 <UART_SetConfig+0x6f4>)
 800ad56:	fba3 1302 	umull	r1, r3, r3, r2
 800ad5a:	095b      	lsrs	r3, r3, #5
 800ad5c:	2164      	movs	r1, #100	; 0x64
 800ad5e:	fb01 f303 	mul.w	r3, r1, r3
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	011b      	lsls	r3, r3, #4
 800ad66:	3332      	adds	r3, #50	; 0x32
 800ad68:	4a09      	ldr	r2, [pc, #36]	; (800ad90 <UART_SetConfig+0x6f4>)
 800ad6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	f003 020f 	and.w	r2, r3, #15
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4442      	add	r2, r8
 800ad7a:	609a      	str	r2, [r3, #8]
}
 800ad7c:	e7ff      	b.n	800ad7e <UART_SetConfig+0x6e2>
 800ad7e:	bf00      	nop
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad88:	40011000 	.word	0x40011000
 800ad8c:	40011400 	.word	0x40011400
 800ad90:	51eb851f 	.word	0x51eb851f
 800ad94:	00000000 	.word	0x00000000

0800ad98 <cos>:
 800ad98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad9a:	ec51 0b10 	vmov	r0, r1, d0
 800ad9e:	4a1e      	ldr	r2, [pc, #120]	; (800ae18 <cos+0x80>)
 800ada0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ada4:	4293      	cmp	r3, r2
 800ada6:	dc06      	bgt.n	800adb6 <cos+0x1e>
 800ada8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ae10 <cos+0x78>
 800adac:	f000 fb58 	bl	800b460 <__kernel_cos>
 800adb0:	ec51 0b10 	vmov	r0, r1, d0
 800adb4:	e007      	b.n	800adc6 <cos+0x2e>
 800adb6:	4a19      	ldr	r2, [pc, #100]	; (800ae1c <cos+0x84>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	dd09      	ble.n	800add0 <cos+0x38>
 800adbc:	ee10 2a10 	vmov	r2, s0
 800adc0:	460b      	mov	r3, r1
 800adc2:	f7f5 fa61 	bl	8000288 <__aeabi_dsub>
 800adc6:	ec41 0b10 	vmov	d0, r0, r1
 800adca:	b005      	add	sp, #20
 800adcc:	f85d fb04 	ldr.w	pc, [sp], #4
 800add0:	4668      	mov	r0, sp
 800add2:	f000 f951 	bl	800b078 <__ieee754_rem_pio2>
 800add6:	f000 0003 	and.w	r0, r0, #3
 800adda:	2801      	cmp	r0, #1
 800addc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ade0:	ed9d 0b00 	vldr	d0, [sp]
 800ade4:	d007      	beq.n	800adf6 <cos+0x5e>
 800ade6:	2802      	cmp	r0, #2
 800ade8:	d00e      	beq.n	800ae08 <cos+0x70>
 800adea:	2800      	cmp	r0, #0
 800adec:	d0de      	beq.n	800adac <cos+0x14>
 800adee:	2001      	movs	r0, #1
 800adf0:	f000 ff3e 	bl	800bc70 <__kernel_sin>
 800adf4:	e7dc      	b.n	800adb0 <cos+0x18>
 800adf6:	f000 ff3b 	bl	800bc70 <__kernel_sin>
 800adfa:	ec53 2b10 	vmov	r2, r3, d0
 800adfe:	ee10 0a10 	vmov	r0, s0
 800ae02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae06:	e7de      	b.n	800adc6 <cos+0x2e>
 800ae08:	f000 fb2a 	bl	800b460 <__kernel_cos>
 800ae0c:	e7f5      	b.n	800adfa <cos+0x62>
 800ae0e:	bf00      	nop
	...
 800ae18:	3fe921fb 	.word	0x3fe921fb
 800ae1c:	7fefffff 	.word	0x7fefffff

0800ae20 <sin>:
 800ae20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae22:	ec51 0b10 	vmov	r0, r1, d0
 800ae26:	4a20      	ldr	r2, [pc, #128]	; (800aea8 <sin+0x88>)
 800ae28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	dc07      	bgt.n	800ae40 <sin+0x20>
 800ae30:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800aea0 <sin+0x80>
 800ae34:	2000      	movs	r0, #0
 800ae36:	f000 ff1b 	bl	800bc70 <__kernel_sin>
 800ae3a:	ec51 0b10 	vmov	r0, r1, d0
 800ae3e:	e007      	b.n	800ae50 <sin+0x30>
 800ae40:	4a1a      	ldr	r2, [pc, #104]	; (800aeac <sin+0x8c>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	dd09      	ble.n	800ae5a <sin+0x3a>
 800ae46:	ee10 2a10 	vmov	r2, s0
 800ae4a:	460b      	mov	r3, r1
 800ae4c:	f7f5 fa1c 	bl	8000288 <__aeabi_dsub>
 800ae50:	ec41 0b10 	vmov	d0, r0, r1
 800ae54:	b005      	add	sp, #20
 800ae56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae5a:	4668      	mov	r0, sp
 800ae5c:	f000 f90c 	bl	800b078 <__ieee754_rem_pio2>
 800ae60:	f000 0003 	and.w	r0, r0, #3
 800ae64:	2801      	cmp	r0, #1
 800ae66:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae6a:	ed9d 0b00 	vldr	d0, [sp]
 800ae6e:	d004      	beq.n	800ae7a <sin+0x5a>
 800ae70:	2802      	cmp	r0, #2
 800ae72:	d005      	beq.n	800ae80 <sin+0x60>
 800ae74:	b970      	cbnz	r0, 800ae94 <sin+0x74>
 800ae76:	2001      	movs	r0, #1
 800ae78:	e7dd      	b.n	800ae36 <sin+0x16>
 800ae7a:	f000 faf1 	bl	800b460 <__kernel_cos>
 800ae7e:	e7dc      	b.n	800ae3a <sin+0x1a>
 800ae80:	2001      	movs	r0, #1
 800ae82:	f000 fef5 	bl	800bc70 <__kernel_sin>
 800ae86:	ec53 2b10 	vmov	r2, r3, d0
 800ae8a:	ee10 0a10 	vmov	r0, s0
 800ae8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae92:	e7dd      	b.n	800ae50 <sin+0x30>
 800ae94:	f000 fae4 	bl	800b460 <__kernel_cos>
 800ae98:	e7f5      	b.n	800ae86 <sin+0x66>
 800ae9a:	bf00      	nop
 800ae9c:	f3af 8000 	nop.w
	...
 800aea8:	3fe921fb 	.word	0x3fe921fb
 800aeac:	7fefffff 	.word	0x7fefffff

0800aeb0 <atan2>:
 800aeb0:	f000 b802 	b.w	800aeb8 <__ieee754_atan2>
 800aeb4:	0000      	movs	r0, r0
	...

0800aeb8 <__ieee754_atan2>:
 800aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aebc:	ec57 6b11 	vmov	r6, r7, d1
 800aec0:	4273      	negs	r3, r6
 800aec2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800aec6:	4333      	orrs	r3, r6
 800aec8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800b070 <__ieee754_atan2+0x1b8>
 800aecc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aed0:	4573      	cmp	r3, lr
 800aed2:	ec51 0b10 	vmov	r0, r1, d0
 800aed6:	ee11 8a10 	vmov	r8, s2
 800aeda:	d80a      	bhi.n	800aef2 <__ieee754_atan2+0x3a>
 800aedc:	4244      	negs	r4, r0
 800aede:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aee2:	4304      	orrs	r4, r0
 800aee4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aee8:	4574      	cmp	r4, lr
 800aeea:	468c      	mov	ip, r1
 800aeec:	ee10 9a10 	vmov	r9, s0
 800aef0:	d907      	bls.n	800af02 <__ieee754_atan2+0x4a>
 800aef2:	4632      	mov	r2, r6
 800aef4:	463b      	mov	r3, r7
 800aef6:	f7f5 f9c9 	bl	800028c <__adddf3>
 800aefa:	ec41 0b10 	vmov	d0, r0, r1
 800aefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800af06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af0a:	4334      	orrs	r4, r6
 800af0c:	d103      	bne.n	800af16 <__ieee754_atan2+0x5e>
 800af0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af12:	f000 bf69 	b.w	800bde8 <atan>
 800af16:	17bc      	asrs	r4, r7, #30
 800af18:	f004 0402 	and.w	r4, r4, #2
 800af1c:	ea53 0909 	orrs.w	r9, r3, r9
 800af20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800af24:	d107      	bne.n	800af36 <__ieee754_atan2+0x7e>
 800af26:	2c02      	cmp	r4, #2
 800af28:	d073      	beq.n	800b012 <__ieee754_atan2+0x15a>
 800af2a:	2c03      	cmp	r4, #3
 800af2c:	d1e5      	bne.n	800aefa <__ieee754_atan2+0x42>
 800af2e:	a13e      	add	r1, pc, #248	; (adr r1, 800b028 <__ieee754_atan2+0x170>)
 800af30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af34:	e7e1      	b.n	800aefa <__ieee754_atan2+0x42>
 800af36:	ea52 0808 	orrs.w	r8, r2, r8
 800af3a:	d106      	bne.n	800af4a <__ieee754_atan2+0x92>
 800af3c:	f1bc 0f00 	cmp.w	ip, #0
 800af40:	da6b      	bge.n	800b01a <__ieee754_atan2+0x162>
 800af42:	a13b      	add	r1, pc, #236	; (adr r1, 800b030 <__ieee754_atan2+0x178>)
 800af44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af48:	e7d7      	b.n	800aefa <__ieee754_atan2+0x42>
 800af4a:	4572      	cmp	r2, lr
 800af4c:	d120      	bne.n	800af90 <__ieee754_atan2+0xd8>
 800af4e:	4293      	cmp	r3, r2
 800af50:	d111      	bne.n	800af76 <__ieee754_atan2+0xbe>
 800af52:	2c02      	cmp	r4, #2
 800af54:	d007      	beq.n	800af66 <__ieee754_atan2+0xae>
 800af56:	2c03      	cmp	r4, #3
 800af58:	d009      	beq.n	800af6e <__ieee754_atan2+0xb6>
 800af5a:	2c01      	cmp	r4, #1
 800af5c:	d155      	bne.n	800b00a <__ieee754_atan2+0x152>
 800af5e:	a136      	add	r1, pc, #216	; (adr r1, 800b038 <__ieee754_atan2+0x180>)
 800af60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af64:	e7c9      	b.n	800aefa <__ieee754_atan2+0x42>
 800af66:	a136      	add	r1, pc, #216	; (adr r1, 800b040 <__ieee754_atan2+0x188>)
 800af68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af6c:	e7c5      	b.n	800aefa <__ieee754_atan2+0x42>
 800af6e:	a136      	add	r1, pc, #216	; (adr r1, 800b048 <__ieee754_atan2+0x190>)
 800af70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af74:	e7c1      	b.n	800aefa <__ieee754_atan2+0x42>
 800af76:	2c02      	cmp	r4, #2
 800af78:	d04b      	beq.n	800b012 <__ieee754_atan2+0x15a>
 800af7a:	2c03      	cmp	r4, #3
 800af7c:	d0d7      	beq.n	800af2e <__ieee754_atan2+0x76>
 800af7e:	2c01      	cmp	r4, #1
 800af80:	f04f 0000 	mov.w	r0, #0
 800af84:	d102      	bne.n	800af8c <__ieee754_atan2+0xd4>
 800af86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800af8a:	e7b6      	b.n	800aefa <__ieee754_atan2+0x42>
 800af8c:	2100      	movs	r1, #0
 800af8e:	e7b4      	b.n	800aefa <__ieee754_atan2+0x42>
 800af90:	4573      	cmp	r3, lr
 800af92:	d0d3      	beq.n	800af3c <__ieee754_atan2+0x84>
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	151b      	asrs	r3, r3, #20
 800af98:	2b3c      	cmp	r3, #60	; 0x3c
 800af9a:	dc1e      	bgt.n	800afda <__ieee754_atan2+0x122>
 800af9c:	2f00      	cmp	r7, #0
 800af9e:	da01      	bge.n	800afa4 <__ieee754_atan2+0xec>
 800afa0:	333c      	adds	r3, #60	; 0x3c
 800afa2:	db1e      	blt.n	800afe2 <__ieee754_atan2+0x12a>
 800afa4:	4632      	mov	r2, r6
 800afa6:	463b      	mov	r3, r7
 800afa8:	f7f5 fc50 	bl	800084c <__aeabi_ddiv>
 800afac:	ec41 0b10 	vmov	d0, r0, r1
 800afb0:	f001 f8ba 	bl	800c128 <fabs>
 800afb4:	f000 ff18 	bl	800bde8 <atan>
 800afb8:	ec51 0b10 	vmov	r0, r1, d0
 800afbc:	2c01      	cmp	r4, #1
 800afbe:	d013      	beq.n	800afe8 <__ieee754_atan2+0x130>
 800afc0:	2c02      	cmp	r4, #2
 800afc2:	d015      	beq.n	800aff0 <__ieee754_atan2+0x138>
 800afc4:	2c00      	cmp	r4, #0
 800afc6:	d098      	beq.n	800aefa <__ieee754_atan2+0x42>
 800afc8:	a321      	add	r3, pc, #132	; (adr r3, 800b050 <__ieee754_atan2+0x198>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 f95b 	bl	8000288 <__aeabi_dsub>
 800afd2:	a321      	add	r3, pc, #132	; (adr r3, 800b058 <__ieee754_atan2+0x1a0>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	e014      	b.n	800b004 <__ieee754_atan2+0x14c>
 800afda:	a121      	add	r1, pc, #132	; (adr r1, 800b060 <__ieee754_atan2+0x1a8>)
 800afdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afe0:	e7ec      	b.n	800afbc <__ieee754_atan2+0x104>
 800afe2:	2000      	movs	r0, #0
 800afe4:	2100      	movs	r1, #0
 800afe6:	e7e9      	b.n	800afbc <__ieee754_atan2+0x104>
 800afe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afec:	4619      	mov	r1, r3
 800afee:	e784      	b.n	800aefa <__ieee754_atan2+0x42>
 800aff0:	a317      	add	r3, pc, #92	; (adr r3, 800b050 <__ieee754_atan2+0x198>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 f947 	bl	8000288 <__aeabi_dsub>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	a116      	add	r1, pc, #88	; (adr r1, 800b058 <__ieee754_atan2+0x1a0>)
 800b000:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b004:	f7f5 f940 	bl	8000288 <__aeabi_dsub>
 800b008:	e777      	b.n	800aefa <__ieee754_atan2+0x42>
 800b00a:	a117      	add	r1, pc, #92	; (adr r1, 800b068 <__ieee754_atan2+0x1b0>)
 800b00c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b010:	e773      	b.n	800aefa <__ieee754_atan2+0x42>
 800b012:	a111      	add	r1, pc, #68	; (adr r1, 800b058 <__ieee754_atan2+0x1a0>)
 800b014:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b018:	e76f      	b.n	800aefa <__ieee754_atan2+0x42>
 800b01a:	a111      	add	r1, pc, #68	; (adr r1, 800b060 <__ieee754_atan2+0x1a8>)
 800b01c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b020:	e76b      	b.n	800aefa <__ieee754_atan2+0x42>
 800b022:	bf00      	nop
 800b024:	f3af 8000 	nop.w
 800b028:	54442d18 	.word	0x54442d18
 800b02c:	c00921fb 	.word	0xc00921fb
 800b030:	54442d18 	.word	0x54442d18
 800b034:	bff921fb 	.word	0xbff921fb
 800b038:	54442d18 	.word	0x54442d18
 800b03c:	bfe921fb 	.word	0xbfe921fb
 800b040:	7f3321d2 	.word	0x7f3321d2
 800b044:	4002d97c 	.word	0x4002d97c
 800b048:	7f3321d2 	.word	0x7f3321d2
 800b04c:	c002d97c 	.word	0xc002d97c
 800b050:	33145c07 	.word	0x33145c07
 800b054:	3ca1a626 	.word	0x3ca1a626
 800b058:	54442d18 	.word	0x54442d18
 800b05c:	400921fb 	.word	0x400921fb
 800b060:	54442d18 	.word	0x54442d18
 800b064:	3ff921fb 	.word	0x3ff921fb
 800b068:	54442d18 	.word	0x54442d18
 800b06c:	3fe921fb 	.word	0x3fe921fb
 800b070:	7ff00000 	.word	0x7ff00000
 800b074:	00000000 	.word	0x00000000

0800b078 <__ieee754_rem_pio2>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	ec57 6b10 	vmov	r6, r7, d0
 800b080:	4bc3      	ldr	r3, [pc, #780]	; (800b390 <__ieee754_rem_pio2+0x318>)
 800b082:	b08d      	sub	sp, #52	; 0x34
 800b084:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b088:	4598      	cmp	r8, r3
 800b08a:	4604      	mov	r4, r0
 800b08c:	9704      	str	r7, [sp, #16]
 800b08e:	dc07      	bgt.n	800b0a0 <__ieee754_rem_pio2+0x28>
 800b090:	2200      	movs	r2, #0
 800b092:	2300      	movs	r3, #0
 800b094:	ed84 0b00 	vstr	d0, [r4]
 800b098:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b09c:	2500      	movs	r5, #0
 800b09e:	e027      	b.n	800b0f0 <__ieee754_rem_pio2+0x78>
 800b0a0:	4bbc      	ldr	r3, [pc, #752]	; (800b394 <__ieee754_rem_pio2+0x31c>)
 800b0a2:	4598      	cmp	r8, r3
 800b0a4:	dc75      	bgt.n	800b192 <__ieee754_rem_pio2+0x11a>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	4dbb      	ldr	r5, [pc, #748]	; (800b398 <__ieee754_rem_pio2+0x320>)
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	ee10 0a10 	vmov	r0, s0
 800b0b0:	a3a9      	add	r3, pc, #676	; (adr r3, 800b358 <__ieee754_rem_pio2+0x2e0>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	dd36      	ble.n	800b128 <__ieee754_rem_pio2+0xb0>
 800b0ba:	f7f5 f8e5 	bl	8000288 <__aeabi_dsub>
 800b0be:	45a8      	cmp	r8, r5
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	d018      	beq.n	800b0f8 <__ieee754_rem_pio2+0x80>
 800b0c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b360 <__ieee754_rem_pio2+0x2e8>)
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f7f5 f8dc 	bl	8000288 <__aeabi_dsub>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	e9c4 2300 	strd	r2, r3, [r4]
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f8d4 	bl	8000288 <__aeabi_dsub>
 800b0e0:	a39f      	add	r3, pc, #636	; (adr r3, 800b360 <__ieee754_rem_pio2+0x2e8>)
 800b0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b0ee:	2501      	movs	r5, #1
 800b0f0:	4628      	mov	r0, r5
 800b0f2:	b00d      	add	sp, #52	; 0x34
 800b0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f8:	a39b      	add	r3, pc, #620	; (adr r3, 800b368 <__ieee754_rem_pio2+0x2f0>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f7f5 f8c3 	bl	8000288 <__aeabi_dsub>
 800b102:	a39b      	add	r3, pc, #620	; (adr r3, 800b370 <__ieee754_rem_pio2+0x2f8>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	4606      	mov	r6, r0
 800b10a:	460f      	mov	r7, r1
 800b10c:	f7f5 f8bc 	bl	8000288 <__aeabi_dsub>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	e9c4 2300 	strd	r2, r3, [r4]
 800b118:	4630      	mov	r0, r6
 800b11a:	4639      	mov	r1, r7
 800b11c:	f7f5 f8b4 	bl	8000288 <__aeabi_dsub>
 800b120:	a393      	add	r3, pc, #588	; (adr r3, 800b370 <__ieee754_rem_pio2+0x2f8>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	e7de      	b.n	800b0e6 <__ieee754_rem_pio2+0x6e>
 800b128:	f7f5 f8b0 	bl	800028c <__adddf3>
 800b12c:	45a8      	cmp	r8, r5
 800b12e:	4606      	mov	r6, r0
 800b130:	460f      	mov	r7, r1
 800b132:	d016      	beq.n	800b162 <__ieee754_rem_pio2+0xea>
 800b134:	a38a      	add	r3, pc, #552	; (adr r3, 800b360 <__ieee754_rem_pio2+0x2e8>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 f8a7 	bl	800028c <__adddf3>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	e9c4 2300 	strd	r2, r3, [r4]
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 f89d 	bl	8000288 <__aeabi_dsub>
 800b14e:	a384      	add	r3, pc, #528	; (adr r3, 800b360 <__ieee754_rem_pio2+0x2e8>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	f7f5 f89a 	bl	800028c <__adddf3>
 800b158:	f04f 35ff 	mov.w	r5, #4294967295
 800b15c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b160:	e7c6      	b.n	800b0f0 <__ieee754_rem_pio2+0x78>
 800b162:	a381      	add	r3, pc, #516	; (adr r3, 800b368 <__ieee754_rem_pio2+0x2f0>)
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f7f5 f890 	bl	800028c <__adddf3>
 800b16c:	a380      	add	r3, pc, #512	; (adr r3, 800b370 <__ieee754_rem_pio2+0x2f8>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	4606      	mov	r6, r0
 800b174:	460f      	mov	r7, r1
 800b176:	f7f5 f889 	bl	800028c <__adddf3>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	e9c4 2300 	strd	r2, r3, [r4]
 800b182:	4630      	mov	r0, r6
 800b184:	4639      	mov	r1, r7
 800b186:	f7f5 f87f 	bl	8000288 <__aeabi_dsub>
 800b18a:	a379      	add	r3, pc, #484	; (adr r3, 800b370 <__ieee754_rem_pio2+0x2f8>)
 800b18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b190:	e7e0      	b.n	800b154 <__ieee754_rem_pio2+0xdc>
 800b192:	4b82      	ldr	r3, [pc, #520]	; (800b39c <__ieee754_rem_pio2+0x324>)
 800b194:	4598      	cmp	r8, r3
 800b196:	f300 80d0 	bgt.w	800b33a <__ieee754_rem_pio2+0x2c2>
 800b19a:	f000 ffc5 	bl	800c128 <fabs>
 800b19e:	ec57 6b10 	vmov	r6, r7, d0
 800b1a2:	ee10 0a10 	vmov	r0, s0
 800b1a6:	a374      	add	r3, pc, #464	; (adr r3, 800b378 <__ieee754_rem_pio2+0x300>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	4639      	mov	r1, r7
 800b1ae:	f7f5 fa23 	bl	80005f8 <__aeabi_dmul>
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	4b7a      	ldr	r3, [pc, #488]	; (800b3a0 <__ieee754_rem_pio2+0x328>)
 800b1b6:	f7f5 f869 	bl	800028c <__adddf3>
 800b1ba:	f7f5 fccd 	bl	8000b58 <__aeabi_d2iz>
 800b1be:	4605      	mov	r5, r0
 800b1c0:	f7f5 f9b0 	bl	8000524 <__aeabi_i2d>
 800b1c4:	a364      	add	r3, pc, #400	; (adr r3, 800b358 <__ieee754_rem_pio2+0x2e0>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ce:	f7f5 fa13 	bl	80005f8 <__aeabi_dmul>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	4639      	mov	r1, r7
 800b1da:	f7f5 f855 	bl	8000288 <__aeabi_dsub>
 800b1de:	a360      	add	r3, pc, #384	; (adr r3, 800b360 <__ieee754_rem_pio2+0x2e8>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	468b      	mov	fp, r1
 800b1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	2d1f      	cmp	r5, #31
 800b1f2:	4606      	mov	r6, r0
 800b1f4:	460f      	mov	r7, r1
 800b1f6:	dc0c      	bgt.n	800b212 <__ieee754_rem_pio2+0x19a>
 800b1f8:	1e6a      	subs	r2, r5, #1
 800b1fa:	4b6a      	ldr	r3, [pc, #424]	; (800b3a4 <__ieee754_rem_pio2+0x32c>)
 800b1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b200:	4543      	cmp	r3, r8
 800b202:	d006      	beq.n	800b212 <__ieee754_rem_pio2+0x19a>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	4650      	mov	r0, sl
 800b20a:	4659      	mov	r1, fp
 800b20c:	f7f5 f83c 	bl	8000288 <__aeabi_dsub>
 800b210:	e00e      	b.n	800b230 <__ieee754_rem_pio2+0x1b8>
 800b212:	4632      	mov	r2, r6
 800b214:	463b      	mov	r3, r7
 800b216:	4650      	mov	r0, sl
 800b218:	4659      	mov	r1, fp
 800b21a:	f7f5 f835 	bl	8000288 <__aeabi_dsub>
 800b21e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	9a05      	ldr	r2, [sp, #20]
 800b226:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	2b10      	cmp	r3, #16
 800b22e:	dc02      	bgt.n	800b236 <__ieee754_rem_pio2+0x1be>
 800b230:	e9c4 0100 	strd	r0, r1, [r4]
 800b234:	e039      	b.n	800b2aa <__ieee754_rem_pio2+0x232>
 800b236:	a34c      	add	r3, pc, #304	; (adr r3, 800b368 <__ieee754_rem_pio2+0x2f0>)
 800b238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b240:	f7f5 f9da 	bl	80005f8 <__aeabi_dmul>
 800b244:	4606      	mov	r6, r0
 800b246:	460f      	mov	r7, r1
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4650      	mov	r0, sl
 800b24e:	4659      	mov	r1, fp
 800b250:	f7f5 f81a 	bl	8000288 <__aeabi_dsub>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4680      	mov	r8, r0
 800b25a:	4689      	mov	r9, r1
 800b25c:	4650      	mov	r0, sl
 800b25e:	4659      	mov	r1, fp
 800b260:	f7f5 f812 	bl	8000288 <__aeabi_dsub>
 800b264:	4632      	mov	r2, r6
 800b266:	463b      	mov	r3, r7
 800b268:	f7f5 f80e 	bl	8000288 <__aeabi_dsub>
 800b26c:	a340      	add	r3, pc, #256	; (adr r3, 800b370 <__ieee754_rem_pio2+0x2f8>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	4606      	mov	r6, r0
 800b274:	460f      	mov	r7, r1
 800b276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b27a:	f7f5 f9bd 	bl	80005f8 <__aeabi_dmul>
 800b27e:	4632      	mov	r2, r6
 800b280:	463b      	mov	r3, r7
 800b282:	f7f5 f801 	bl	8000288 <__aeabi_dsub>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	4640      	mov	r0, r8
 800b290:	4649      	mov	r1, r9
 800b292:	f7f4 fff9 	bl	8000288 <__aeabi_dsub>
 800b296:	9a05      	ldr	r2, [sp, #20]
 800b298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b31      	cmp	r3, #49	; 0x31
 800b2a0:	dc20      	bgt.n	800b2e4 <__ieee754_rem_pio2+0x26c>
 800b2a2:	e9c4 0100 	strd	r0, r1, [r4]
 800b2a6:	46c2      	mov	sl, r8
 800b2a8:	46cb      	mov	fp, r9
 800b2aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	464b      	mov	r3, r9
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	f7f4 ffe7 	bl	8000288 <__aeabi_dsub>
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	4632      	mov	r2, r6
 800b2be:	f7f4 ffe3 	bl	8000288 <__aeabi_dsub>
 800b2c2:	9b04      	ldr	r3, [sp, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2ca:	f6bf af11 	bge.w	800b0f0 <__ieee754_rem_pio2+0x78>
 800b2ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b2d2:	6063      	str	r3, [r4, #4]
 800b2d4:	f8c4 8000 	str.w	r8, [r4]
 800b2d8:	60a0      	str	r0, [r4, #8]
 800b2da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2de:	60e3      	str	r3, [r4, #12]
 800b2e0:	426d      	negs	r5, r5
 800b2e2:	e705      	b.n	800b0f0 <__ieee754_rem_pio2+0x78>
 800b2e4:	a326      	add	r3, pc, #152	; (adr r3, 800b380 <__ieee754_rem_pio2+0x308>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ee:	f7f5 f983 	bl	80005f8 <__aeabi_dmul>
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f4 ffc3 	bl	8000288 <__aeabi_dsub>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4682      	mov	sl, r0
 800b308:	468b      	mov	fp, r1
 800b30a:	4640      	mov	r0, r8
 800b30c:	4649      	mov	r1, r9
 800b30e:	f7f4 ffbb 	bl	8000288 <__aeabi_dsub>
 800b312:	4632      	mov	r2, r6
 800b314:	463b      	mov	r3, r7
 800b316:	f7f4 ffb7 	bl	8000288 <__aeabi_dsub>
 800b31a:	a31b      	add	r3, pc, #108	; (adr r3, 800b388 <__ieee754_rem_pio2+0x310>)
 800b31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b320:	4606      	mov	r6, r0
 800b322:	460f      	mov	r7, r1
 800b324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b328:	f7f5 f966 	bl	80005f8 <__aeabi_dmul>
 800b32c:	4632      	mov	r2, r6
 800b32e:	463b      	mov	r3, r7
 800b330:	f7f4 ffaa 	bl	8000288 <__aeabi_dsub>
 800b334:	4606      	mov	r6, r0
 800b336:	460f      	mov	r7, r1
 800b338:	e764      	b.n	800b204 <__ieee754_rem_pio2+0x18c>
 800b33a:	4b1b      	ldr	r3, [pc, #108]	; (800b3a8 <__ieee754_rem_pio2+0x330>)
 800b33c:	4598      	cmp	r8, r3
 800b33e:	dd35      	ble.n	800b3ac <__ieee754_rem_pio2+0x334>
 800b340:	ee10 2a10 	vmov	r2, s0
 800b344:	463b      	mov	r3, r7
 800b346:	4630      	mov	r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	f7f4 ff9d 	bl	8000288 <__aeabi_dsub>
 800b34e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b352:	e9c4 0100 	strd	r0, r1, [r4]
 800b356:	e6a1      	b.n	800b09c <__ieee754_rem_pio2+0x24>
 800b358:	54400000 	.word	0x54400000
 800b35c:	3ff921fb 	.word	0x3ff921fb
 800b360:	1a626331 	.word	0x1a626331
 800b364:	3dd0b461 	.word	0x3dd0b461
 800b368:	1a600000 	.word	0x1a600000
 800b36c:	3dd0b461 	.word	0x3dd0b461
 800b370:	2e037073 	.word	0x2e037073
 800b374:	3ba3198a 	.word	0x3ba3198a
 800b378:	6dc9c883 	.word	0x6dc9c883
 800b37c:	3fe45f30 	.word	0x3fe45f30
 800b380:	2e000000 	.word	0x2e000000
 800b384:	3ba3198a 	.word	0x3ba3198a
 800b388:	252049c1 	.word	0x252049c1
 800b38c:	397b839a 	.word	0x397b839a
 800b390:	3fe921fb 	.word	0x3fe921fb
 800b394:	4002d97b 	.word	0x4002d97b
 800b398:	3ff921fb 	.word	0x3ff921fb
 800b39c:	413921fb 	.word	0x413921fb
 800b3a0:	3fe00000 	.word	0x3fe00000
 800b3a4:	080108c4 	.word	0x080108c4
 800b3a8:	7fefffff 	.word	0x7fefffff
 800b3ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b3b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b3b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	f7f5 fbcc 	bl	8000b58 <__aeabi_d2iz>
 800b3c0:	f7f5 f8b0 	bl	8000524 <__aeabi_i2d>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b3d0:	f7f4 ff5a 	bl	8000288 <__aeabi_dsub>
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	4b1f      	ldr	r3, [pc, #124]	; (800b454 <__ieee754_rem_pio2+0x3dc>)
 800b3d8:	f7f5 f90e 	bl	80005f8 <__aeabi_dmul>
 800b3dc:	460f      	mov	r7, r1
 800b3de:	4606      	mov	r6, r0
 800b3e0:	f7f5 fbba 	bl	8000b58 <__aeabi_d2iz>
 800b3e4:	f7f5 f89e 	bl	8000524 <__aeabi_i2d>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b3f4:	f7f4 ff48 	bl	8000288 <__aeabi_dsub>
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	4b16      	ldr	r3, [pc, #88]	; (800b454 <__ieee754_rem_pio2+0x3dc>)
 800b3fc:	f7f5 f8fc 	bl	80005f8 <__aeabi_dmul>
 800b400:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b404:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b408:	f04f 0803 	mov.w	r8, #3
 800b40c:	2600      	movs	r6, #0
 800b40e:	2700      	movs	r7, #0
 800b410:	4632      	mov	r2, r6
 800b412:	463b      	mov	r3, r7
 800b414:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b418:	f108 3aff 	add.w	sl, r8, #4294967295
 800b41c:	f7f5 fb54 	bl	8000ac8 <__aeabi_dcmpeq>
 800b420:	b9b0      	cbnz	r0, 800b450 <__ieee754_rem_pio2+0x3d8>
 800b422:	4b0d      	ldr	r3, [pc, #52]	; (800b458 <__ieee754_rem_pio2+0x3e0>)
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	2302      	movs	r3, #2
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	462a      	mov	r2, r5
 800b42c:	4643      	mov	r3, r8
 800b42e:	4621      	mov	r1, r4
 800b430:	a806      	add	r0, sp, #24
 800b432:	f000 f8dd 	bl	800b5f0 <__kernel_rem_pio2>
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	4605      	mov	r5, r0
 800b43c:	f6bf ae58 	bge.w	800b0f0 <__ieee754_rem_pio2+0x78>
 800b440:	6863      	ldr	r3, [r4, #4]
 800b442:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b446:	6063      	str	r3, [r4, #4]
 800b448:	68e3      	ldr	r3, [r4, #12]
 800b44a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b44e:	e746      	b.n	800b2de <__ieee754_rem_pio2+0x266>
 800b450:	46d0      	mov	r8, sl
 800b452:	e7dd      	b.n	800b410 <__ieee754_rem_pio2+0x398>
 800b454:	41700000 	.word	0x41700000
 800b458:	08010944 	.word	0x08010944
 800b45c:	00000000 	.word	0x00000000

0800b460 <__kernel_cos>:
 800b460:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b464:	ec59 8b10 	vmov	r8, r9, d0
 800b468:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b46c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b470:	ed2d 8b02 	vpush	{d8}
 800b474:	eeb0 8a41 	vmov.f32	s16, s2
 800b478:	eef0 8a61 	vmov.f32	s17, s3
 800b47c:	da07      	bge.n	800b48e <__kernel_cos+0x2e>
 800b47e:	ee10 0a10 	vmov	r0, s0
 800b482:	4649      	mov	r1, r9
 800b484:	f7f5 fb68 	bl	8000b58 <__aeabi_d2iz>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f000 8089 	beq.w	800b5a0 <__kernel_cos+0x140>
 800b48e:	4642      	mov	r2, r8
 800b490:	464b      	mov	r3, r9
 800b492:	4640      	mov	r0, r8
 800b494:	4649      	mov	r1, r9
 800b496:	f7f5 f8af 	bl	80005f8 <__aeabi_dmul>
 800b49a:	2200      	movs	r2, #0
 800b49c:	4b4e      	ldr	r3, [pc, #312]	; (800b5d8 <__kernel_cos+0x178>)
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	a340      	add	r3, pc, #256	; (adr r3, 800b5a8 <__kernel_cos+0x148>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	4682      	mov	sl, r0
 800b4ae:	468b      	mov	fp, r1
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	f7f5 f8a0 	bl	80005f8 <__aeabi_dmul>
 800b4b8:	a33d      	add	r3, pc, #244	; (adr r3, 800b5b0 <__kernel_cos+0x150>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 fee5 	bl	800028c <__adddf3>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	462b      	mov	r3, r5
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	a33b      	add	r3, pc, #236	; (adr r3, 800b5b8 <__kernel_cos+0x158>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 feda 	bl	8000288 <__aeabi_dsub>
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	f7f5 f88e 	bl	80005f8 <__aeabi_dmul>
 800b4dc:	a338      	add	r3, pc, #224	; (adr r3, 800b5c0 <__kernel_cos+0x160>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fed3 	bl	800028c <__adddf3>
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	462b      	mov	r3, r5
 800b4ea:	f7f5 f885 	bl	80005f8 <__aeabi_dmul>
 800b4ee:	a336      	add	r3, pc, #216	; (adr r3, 800b5c8 <__kernel_cos+0x168>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	f7f4 fec8 	bl	8000288 <__aeabi_dsub>
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	462b      	mov	r3, r5
 800b4fc:	f7f5 f87c 	bl	80005f8 <__aeabi_dmul>
 800b500:	a333      	add	r3, pc, #204	; (adr r3, 800b5d0 <__kernel_cos+0x170>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f4 fec1 	bl	800028c <__adddf3>
 800b50a:	4622      	mov	r2, r4
 800b50c:	462b      	mov	r3, r5
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	4622      	mov	r2, r4
 800b514:	462b      	mov	r3, r5
 800b516:	f7f5 f86f 	bl	80005f8 <__aeabi_dmul>
 800b51a:	ec53 2b18 	vmov	r2, r3, d8
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	4640      	mov	r0, r8
 800b524:	4649      	mov	r1, r9
 800b526:	f7f5 f867 	bl	80005f8 <__aeabi_dmul>
 800b52a:	460b      	mov	r3, r1
 800b52c:	4602      	mov	r2, r0
 800b52e:	4629      	mov	r1, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f7f4 fea9 	bl	8000288 <__aeabi_dsub>
 800b536:	4b29      	ldr	r3, [pc, #164]	; (800b5dc <__kernel_cos+0x17c>)
 800b538:	429e      	cmp	r6, r3
 800b53a:	4680      	mov	r8, r0
 800b53c:	4689      	mov	r9, r1
 800b53e:	dc11      	bgt.n	800b564 <__kernel_cos+0x104>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	4650      	mov	r0, sl
 800b546:	4659      	mov	r1, fp
 800b548:	f7f4 fe9e 	bl	8000288 <__aeabi_dsub>
 800b54c:	460b      	mov	r3, r1
 800b54e:	4924      	ldr	r1, [pc, #144]	; (800b5e0 <__kernel_cos+0x180>)
 800b550:	4602      	mov	r2, r0
 800b552:	2000      	movs	r0, #0
 800b554:	f7f4 fe98 	bl	8000288 <__aeabi_dsub>
 800b558:	ecbd 8b02 	vpop	{d8}
 800b55c:	ec41 0b10 	vmov	d0, r0, r1
 800b560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b564:	4b1f      	ldr	r3, [pc, #124]	; (800b5e4 <__kernel_cos+0x184>)
 800b566:	491e      	ldr	r1, [pc, #120]	; (800b5e0 <__kernel_cos+0x180>)
 800b568:	429e      	cmp	r6, r3
 800b56a:	bfcc      	ite	gt
 800b56c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b5e8 <__kernel_cos+0x188>)
 800b56e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b572:	2400      	movs	r4, #0
 800b574:	4622      	mov	r2, r4
 800b576:	462b      	mov	r3, r5
 800b578:	2000      	movs	r0, #0
 800b57a:	f7f4 fe85 	bl	8000288 <__aeabi_dsub>
 800b57e:	4622      	mov	r2, r4
 800b580:	4606      	mov	r6, r0
 800b582:	460f      	mov	r7, r1
 800b584:	462b      	mov	r3, r5
 800b586:	4650      	mov	r0, sl
 800b588:	4659      	mov	r1, fp
 800b58a:	f7f4 fe7d 	bl	8000288 <__aeabi_dsub>
 800b58e:	4642      	mov	r2, r8
 800b590:	464b      	mov	r3, r9
 800b592:	f7f4 fe79 	bl	8000288 <__aeabi_dsub>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	4630      	mov	r0, r6
 800b59c:	4639      	mov	r1, r7
 800b59e:	e7d9      	b.n	800b554 <__kernel_cos+0xf4>
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	490f      	ldr	r1, [pc, #60]	; (800b5e0 <__kernel_cos+0x180>)
 800b5a4:	e7d8      	b.n	800b558 <__kernel_cos+0xf8>
 800b5a6:	bf00      	nop
 800b5a8:	be8838d4 	.word	0xbe8838d4
 800b5ac:	bda8fae9 	.word	0xbda8fae9
 800b5b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5b4:	3e21ee9e 	.word	0x3e21ee9e
 800b5b8:	809c52ad 	.word	0x809c52ad
 800b5bc:	3e927e4f 	.word	0x3e927e4f
 800b5c0:	19cb1590 	.word	0x19cb1590
 800b5c4:	3efa01a0 	.word	0x3efa01a0
 800b5c8:	16c15177 	.word	0x16c15177
 800b5cc:	3f56c16c 	.word	0x3f56c16c
 800b5d0:	5555554c 	.word	0x5555554c
 800b5d4:	3fa55555 	.word	0x3fa55555
 800b5d8:	3fe00000 	.word	0x3fe00000
 800b5dc:	3fd33332 	.word	0x3fd33332
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	3fe90000 	.word	0x3fe90000
 800b5e8:	3fd20000 	.word	0x3fd20000
 800b5ec:	00000000 	.word	0x00000000

0800b5f0 <__kernel_rem_pio2>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	ed2d 8b02 	vpush	{d8}
 800b5f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b5fc:	1ed4      	subs	r4, r2, #3
 800b5fe:	9308      	str	r3, [sp, #32]
 800b600:	9101      	str	r1, [sp, #4]
 800b602:	4bc5      	ldr	r3, [pc, #788]	; (800b918 <__kernel_rem_pio2+0x328>)
 800b604:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b606:	9009      	str	r0, [sp, #36]	; 0x24
 800b608:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b60c:	9304      	str	r3, [sp, #16]
 800b60e:	9b08      	ldr	r3, [sp, #32]
 800b610:	3b01      	subs	r3, #1
 800b612:	9307      	str	r3, [sp, #28]
 800b614:	2318      	movs	r3, #24
 800b616:	fb94 f4f3 	sdiv	r4, r4, r3
 800b61a:	f06f 0317 	mvn.w	r3, #23
 800b61e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b622:	fb04 3303 	mla	r3, r4, r3, r3
 800b626:	eb03 0a02 	add.w	sl, r3, r2
 800b62a:	9b04      	ldr	r3, [sp, #16]
 800b62c:	9a07      	ldr	r2, [sp, #28]
 800b62e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b908 <__kernel_rem_pio2+0x318>
 800b632:	eb03 0802 	add.w	r8, r3, r2
 800b636:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b638:	1aa7      	subs	r7, r4, r2
 800b63a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b63e:	ae22      	add	r6, sp, #136	; 0x88
 800b640:	2500      	movs	r5, #0
 800b642:	4545      	cmp	r5, r8
 800b644:	dd13      	ble.n	800b66e <__kernel_rem_pio2+0x7e>
 800b646:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b908 <__kernel_rem_pio2+0x318>
 800b64a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b64e:	2600      	movs	r6, #0
 800b650:	9b04      	ldr	r3, [sp, #16]
 800b652:	429e      	cmp	r6, r3
 800b654:	dc32      	bgt.n	800b6bc <__kernel_rem_pio2+0xcc>
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	9302      	str	r3, [sp, #8]
 800b65a:	9b08      	ldr	r3, [sp, #32]
 800b65c:	199d      	adds	r5, r3, r6
 800b65e:	ab22      	add	r3, sp, #136	; 0x88
 800b660:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b664:	9306      	str	r3, [sp, #24]
 800b666:	ec59 8b18 	vmov	r8, r9, d8
 800b66a:	2700      	movs	r7, #0
 800b66c:	e01f      	b.n	800b6ae <__kernel_rem_pio2+0xbe>
 800b66e:	42ef      	cmn	r7, r5
 800b670:	d407      	bmi.n	800b682 <__kernel_rem_pio2+0x92>
 800b672:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b676:	f7f4 ff55 	bl	8000524 <__aeabi_i2d>
 800b67a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b67e:	3501      	adds	r5, #1
 800b680:	e7df      	b.n	800b642 <__kernel_rem_pio2+0x52>
 800b682:	ec51 0b18 	vmov	r0, r1, d8
 800b686:	e7f8      	b.n	800b67a <__kernel_rem_pio2+0x8a>
 800b688:	9906      	ldr	r1, [sp, #24]
 800b68a:	9d02      	ldr	r5, [sp, #8]
 800b68c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b690:	9106      	str	r1, [sp, #24]
 800b692:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b696:	9502      	str	r5, [sp, #8]
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	4640      	mov	r0, r8
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	f7f4 fdf2 	bl	800028c <__adddf3>
 800b6a8:	3701      	adds	r7, #1
 800b6aa:	4680      	mov	r8, r0
 800b6ac:	4689      	mov	r9, r1
 800b6ae:	9b07      	ldr	r3, [sp, #28]
 800b6b0:	429f      	cmp	r7, r3
 800b6b2:	dde9      	ble.n	800b688 <__kernel_rem_pio2+0x98>
 800b6b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b6b8:	3601      	adds	r6, #1
 800b6ba:	e7c9      	b.n	800b650 <__kernel_rem_pio2+0x60>
 800b6bc:	9b04      	ldr	r3, [sp, #16]
 800b6be:	aa0e      	add	r2, sp, #56	; 0x38
 800b6c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6c4:	930c      	str	r3, [sp, #48]	; 0x30
 800b6c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b6c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b6cc:	9c04      	ldr	r4, [sp, #16]
 800b6ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6d0:	ab9a      	add	r3, sp, #616	; 0x268
 800b6d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b6d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6da:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b6e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b6e6:	ab9a      	add	r3, sp, #616	; 0x268
 800b6e8:	445b      	add	r3, fp
 800b6ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	1b63      	subs	r3, r4, r5
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	dc78      	bgt.n	800b7e8 <__kernel_rem_pio2+0x1f8>
 800b6f6:	4650      	mov	r0, sl
 800b6f8:	ec49 8b10 	vmov	d0, r8, r9
 800b6fc:	f000 fda4 	bl	800c248 <scalbn>
 800b700:	ec57 6b10 	vmov	r6, r7, d0
 800b704:	2200      	movs	r2, #0
 800b706:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b70a:	ee10 0a10 	vmov	r0, s0
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f4 ff72 	bl	80005f8 <__aeabi_dmul>
 800b714:	ec41 0b10 	vmov	d0, r0, r1
 800b718:	f000 fd12 	bl	800c140 <floor>
 800b71c:	2200      	movs	r2, #0
 800b71e:	ec51 0b10 	vmov	r0, r1, d0
 800b722:	4b7e      	ldr	r3, [pc, #504]	; (800b91c <__kernel_rem_pio2+0x32c>)
 800b724:	f7f4 ff68 	bl	80005f8 <__aeabi_dmul>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	f7f4 fdaa 	bl	8000288 <__aeabi_dsub>
 800b734:	460f      	mov	r7, r1
 800b736:	4606      	mov	r6, r0
 800b738:	f7f5 fa0e 	bl	8000b58 <__aeabi_d2iz>
 800b73c:	9006      	str	r0, [sp, #24]
 800b73e:	f7f4 fef1 	bl	8000524 <__aeabi_i2d>
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4630      	mov	r0, r6
 800b748:	4639      	mov	r1, r7
 800b74a:	f7f4 fd9d 	bl	8000288 <__aeabi_dsub>
 800b74e:	f1ba 0f00 	cmp.w	sl, #0
 800b752:	4606      	mov	r6, r0
 800b754:	460f      	mov	r7, r1
 800b756:	dd6c      	ble.n	800b832 <__kernel_rem_pio2+0x242>
 800b758:	1e62      	subs	r2, r4, #1
 800b75a:	ab0e      	add	r3, sp, #56	; 0x38
 800b75c:	f1ca 0118 	rsb	r1, sl, #24
 800b760:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b764:	9d06      	ldr	r5, [sp, #24]
 800b766:	fa40 f301 	asr.w	r3, r0, r1
 800b76a:	441d      	add	r5, r3
 800b76c:	408b      	lsls	r3, r1
 800b76e:	1ac0      	subs	r0, r0, r3
 800b770:	ab0e      	add	r3, sp, #56	; 0x38
 800b772:	9506      	str	r5, [sp, #24]
 800b774:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b778:	f1ca 0317 	rsb	r3, sl, #23
 800b77c:	fa40 f303 	asr.w	r3, r0, r3
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	9b02      	ldr	r3, [sp, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd62      	ble.n	800b84e <__kernel_rem_pio2+0x25e>
 800b788:	9b06      	ldr	r3, [sp, #24]
 800b78a:	2200      	movs	r2, #0
 800b78c:	3301      	adds	r3, #1
 800b78e:	9306      	str	r3, [sp, #24]
 800b790:	4615      	mov	r5, r2
 800b792:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b796:	4294      	cmp	r4, r2
 800b798:	f300 8095 	bgt.w	800b8c6 <__kernel_rem_pio2+0x2d6>
 800b79c:	f1ba 0f00 	cmp.w	sl, #0
 800b7a0:	dd07      	ble.n	800b7b2 <__kernel_rem_pio2+0x1c2>
 800b7a2:	f1ba 0f01 	cmp.w	sl, #1
 800b7a6:	f000 80a2 	beq.w	800b8ee <__kernel_rem_pio2+0x2fe>
 800b7aa:	f1ba 0f02 	cmp.w	sl, #2
 800b7ae:	f000 80c1 	beq.w	800b934 <__kernel_rem_pio2+0x344>
 800b7b2:	9b02      	ldr	r3, [sp, #8]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d14a      	bne.n	800b84e <__kernel_rem_pio2+0x25e>
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	463b      	mov	r3, r7
 800b7bc:	2000      	movs	r0, #0
 800b7be:	4958      	ldr	r1, [pc, #352]	; (800b920 <__kernel_rem_pio2+0x330>)
 800b7c0:	f7f4 fd62 	bl	8000288 <__aeabi_dsub>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	2d00      	cmp	r5, #0
 800b7ca:	d040      	beq.n	800b84e <__kernel_rem_pio2+0x25e>
 800b7cc:	4650      	mov	r0, sl
 800b7ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b910 <__kernel_rem_pio2+0x320>
 800b7d2:	f000 fd39 	bl	800c248 <scalbn>
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	4639      	mov	r1, r7
 800b7da:	ec53 2b10 	vmov	r2, r3, d0
 800b7de:	f7f4 fd53 	bl	8000288 <__aeabi_dsub>
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	e032      	b.n	800b84e <__kernel_rem_pio2+0x25e>
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <__kernel_rem_pio2+0x334>)
 800b7ec:	4640      	mov	r0, r8
 800b7ee:	4649      	mov	r1, r9
 800b7f0:	f7f4 ff02 	bl	80005f8 <__aeabi_dmul>
 800b7f4:	f7f5 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800b7f8:	f7f4 fe94 	bl	8000524 <__aeabi_i2d>
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	4b4a      	ldr	r3, [pc, #296]	; (800b928 <__kernel_rem_pio2+0x338>)
 800b800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b804:	f7f4 fef8 	bl	80005f8 <__aeabi_dmul>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4640      	mov	r0, r8
 800b80e:	4649      	mov	r1, r9
 800b810:	f7f4 fd3a 	bl	8000288 <__aeabi_dsub>
 800b814:	f7f5 f9a0 	bl	8000b58 <__aeabi_d2iz>
 800b818:	ab0e      	add	r3, sp, #56	; 0x38
 800b81a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b81e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b826:	f7f4 fd31 	bl	800028c <__adddf3>
 800b82a:	3501      	adds	r5, #1
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	e75e      	b.n	800b6f0 <__kernel_rem_pio2+0x100>
 800b832:	d105      	bne.n	800b840 <__kernel_rem_pio2+0x250>
 800b834:	1e63      	subs	r3, r4, #1
 800b836:	aa0e      	add	r2, sp, #56	; 0x38
 800b838:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b83c:	15c3      	asrs	r3, r0, #23
 800b83e:	e79f      	b.n	800b780 <__kernel_rem_pio2+0x190>
 800b840:	2200      	movs	r2, #0
 800b842:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <__kernel_rem_pio2+0x33c>)
 800b844:	f7f5 f95e 	bl	8000b04 <__aeabi_dcmpge>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d139      	bne.n	800b8c0 <__kernel_rem_pio2+0x2d0>
 800b84c:	9002      	str	r0, [sp, #8]
 800b84e:	2200      	movs	r2, #0
 800b850:	2300      	movs	r3, #0
 800b852:	4630      	mov	r0, r6
 800b854:	4639      	mov	r1, r7
 800b856:	f7f5 f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f000 80c7 	beq.w	800b9ee <__kernel_rem_pio2+0x3fe>
 800b860:	1e65      	subs	r5, r4, #1
 800b862:	462b      	mov	r3, r5
 800b864:	2200      	movs	r2, #0
 800b866:	9904      	ldr	r1, [sp, #16]
 800b868:	428b      	cmp	r3, r1
 800b86a:	da6a      	bge.n	800b942 <__kernel_rem_pio2+0x352>
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	f000 8088 	beq.w	800b982 <__kernel_rem_pio2+0x392>
 800b872:	ab0e      	add	r3, sp, #56	; 0x38
 800b874:	f1aa 0a18 	sub.w	sl, sl, #24
 800b878:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80b4 	beq.w	800b9ea <__kernel_rem_pio2+0x3fa>
 800b882:	4650      	mov	r0, sl
 800b884:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b910 <__kernel_rem_pio2+0x320>
 800b888:	f000 fcde 	bl	800c248 <scalbn>
 800b88c:	00ec      	lsls	r4, r5, #3
 800b88e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b890:	191e      	adds	r6, r3, r4
 800b892:	ec59 8b10 	vmov	r8, r9, d0
 800b896:	f106 0a08 	add.w	sl, r6, #8
 800b89a:	462f      	mov	r7, r5
 800b89c:	2f00      	cmp	r7, #0
 800b89e:	f280 80df 	bge.w	800ba60 <__kernel_rem_pio2+0x470>
 800b8a2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b908 <__kernel_rem_pio2+0x318>
 800b8a6:	f04f 0a00 	mov.w	sl, #0
 800b8aa:	eba5 030a 	sub.w	r3, r5, sl
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f2c0 810a 	blt.w	800bac8 <__kernel_rem_pio2+0x4d8>
 800b8b4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b930 <__kernel_rem_pio2+0x340>
 800b8b8:	ec59 8b18 	vmov	r8, r9, d8
 800b8bc:	2700      	movs	r7, #0
 800b8be:	e0f5      	b.n	800baac <__kernel_rem_pio2+0x4bc>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	9302      	str	r3, [sp, #8]
 800b8c4:	e760      	b.n	800b788 <__kernel_rem_pio2+0x198>
 800b8c6:	ab0e      	add	r3, sp, #56	; 0x38
 800b8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8cc:	b94d      	cbnz	r5, 800b8e2 <__kernel_rem_pio2+0x2f2>
 800b8ce:	b12b      	cbz	r3, 800b8dc <__kernel_rem_pio2+0x2ec>
 800b8d0:	a80e      	add	r0, sp, #56	; 0x38
 800b8d2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b8d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b8da:	2301      	movs	r3, #1
 800b8dc:	3201      	adds	r2, #1
 800b8de:	461d      	mov	r5, r3
 800b8e0:	e759      	b.n	800b796 <__kernel_rem_pio2+0x1a6>
 800b8e2:	a80e      	add	r0, sp, #56	; 0x38
 800b8e4:	1acb      	subs	r3, r1, r3
 800b8e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b8ea:	462b      	mov	r3, r5
 800b8ec:	e7f6      	b.n	800b8dc <__kernel_rem_pio2+0x2ec>
 800b8ee:	1e62      	subs	r2, r4, #1
 800b8f0:	ab0e      	add	r3, sp, #56	; 0x38
 800b8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b8fa:	a90e      	add	r1, sp, #56	; 0x38
 800b8fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b900:	e757      	b.n	800b7b2 <__kernel_rem_pio2+0x1c2>
 800b902:	bf00      	nop
 800b904:	f3af 8000 	nop.w
	...
 800b914:	3ff00000 	.word	0x3ff00000
 800b918:	08010a90 	.word	0x08010a90
 800b91c:	40200000 	.word	0x40200000
 800b920:	3ff00000 	.word	0x3ff00000
 800b924:	3e700000 	.word	0x3e700000
 800b928:	41700000 	.word	0x41700000
 800b92c:	3fe00000 	.word	0x3fe00000
 800b930:	08010a50 	.word	0x08010a50
 800b934:	1e62      	subs	r2, r4, #1
 800b936:	ab0e      	add	r3, sp, #56	; 0x38
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b940:	e7db      	b.n	800b8fa <__kernel_rem_pio2+0x30a>
 800b942:	a90e      	add	r1, sp, #56	; 0x38
 800b944:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b948:	3b01      	subs	r3, #1
 800b94a:	430a      	orrs	r2, r1
 800b94c:	e78b      	b.n	800b866 <__kernel_rem_pio2+0x276>
 800b94e:	3301      	adds	r3, #1
 800b950:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b954:	2900      	cmp	r1, #0
 800b956:	d0fa      	beq.n	800b94e <__kernel_rem_pio2+0x35e>
 800b958:	9a08      	ldr	r2, [sp, #32]
 800b95a:	4422      	add	r2, r4
 800b95c:	00d2      	lsls	r2, r2, #3
 800b95e:	a922      	add	r1, sp, #136	; 0x88
 800b960:	18e3      	adds	r3, r4, r3
 800b962:	9206      	str	r2, [sp, #24]
 800b964:	440a      	add	r2, r1
 800b966:	9302      	str	r3, [sp, #8]
 800b968:	f10b 0108 	add.w	r1, fp, #8
 800b96c:	f102 0308 	add.w	r3, r2, #8
 800b970:	1c66      	adds	r6, r4, #1
 800b972:	910a      	str	r1, [sp, #40]	; 0x28
 800b974:	2500      	movs	r5, #0
 800b976:	930d      	str	r3, [sp, #52]	; 0x34
 800b978:	9b02      	ldr	r3, [sp, #8]
 800b97a:	42b3      	cmp	r3, r6
 800b97c:	da04      	bge.n	800b988 <__kernel_rem_pio2+0x398>
 800b97e:	461c      	mov	r4, r3
 800b980:	e6a6      	b.n	800b6d0 <__kernel_rem_pio2+0xe0>
 800b982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b984:	2301      	movs	r3, #1
 800b986:	e7e3      	b.n	800b950 <__kernel_rem_pio2+0x360>
 800b988:	9b06      	ldr	r3, [sp, #24]
 800b98a:	18ef      	adds	r7, r5, r3
 800b98c:	ab22      	add	r3, sp, #136	; 0x88
 800b98e:	441f      	add	r7, r3
 800b990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b992:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b996:	f7f4 fdc5 	bl	8000524 <__aeabi_i2d>
 800b99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99c:	461c      	mov	r4, r3
 800b99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9a0:	e9c7 0100 	strd	r0, r1, [r7]
 800b9a4:	eb03 0b05 	add.w	fp, r3, r5
 800b9a8:	2700      	movs	r7, #0
 800b9aa:	f04f 0800 	mov.w	r8, #0
 800b9ae:	f04f 0900 	mov.w	r9, #0
 800b9b2:	9b07      	ldr	r3, [sp, #28]
 800b9b4:	429f      	cmp	r7, r3
 800b9b6:	dd08      	ble.n	800b9ca <__kernel_rem_pio2+0x3da>
 800b9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9ba:	aa72      	add	r2, sp, #456	; 0x1c8
 800b9bc:	18eb      	adds	r3, r5, r3
 800b9be:	4413      	add	r3, r2
 800b9c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	3508      	adds	r5, #8
 800b9c8:	e7d6      	b.n	800b978 <__kernel_rem_pio2+0x388>
 800b9ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b9ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4640      	mov	r0, r8
 800b9dc:	4649      	mov	r1, r9
 800b9de:	f7f4 fc55 	bl	800028c <__adddf3>
 800b9e2:	3701      	adds	r7, #1
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	4689      	mov	r9, r1
 800b9e8:	e7e3      	b.n	800b9b2 <__kernel_rem_pio2+0x3c2>
 800b9ea:	3d01      	subs	r5, #1
 800b9ec:	e741      	b.n	800b872 <__kernel_rem_pio2+0x282>
 800b9ee:	f1ca 0000 	rsb	r0, sl, #0
 800b9f2:	ec47 6b10 	vmov	d0, r6, r7
 800b9f6:	f000 fc27 	bl	800c248 <scalbn>
 800b9fa:	ec57 6b10 	vmov	r6, r7, d0
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4b99      	ldr	r3, [pc, #612]	; (800bc68 <__kernel_rem_pio2+0x678>)
 800ba02:	ee10 0a10 	vmov	r0, s0
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f5 f87c 	bl	8000b04 <__aeabi_dcmpge>
 800ba0c:	b1f8      	cbz	r0, 800ba4e <__kernel_rem_pio2+0x45e>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	4b96      	ldr	r3, [pc, #600]	; (800bc6c <__kernel_rem_pio2+0x67c>)
 800ba12:	4630      	mov	r0, r6
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f4 fdef 	bl	80005f8 <__aeabi_dmul>
 800ba1a:	f7f5 f89d 	bl	8000b58 <__aeabi_d2iz>
 800ba1e:	4680      	mov	r8, r0
 800ba20:	f7f4 fd80 	bl	8000524 <__aeabi_i2d>
 800ba24:	2200      	movs	r2, #0
 800ba26:	4b90      	ldr	r3, [pc, #576]	; (800bc68 <__kernel_rem_pio2+0x678>)
 800ba28:	f7f4 fde6 	bl	80005f8 <__aeabi_dmul>
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	4602      	mov	r2, r0
 800ba30:	4639      	mov	r1, r7
 800ba32:	4630      	mov	r0, r6
 800ba34:	f7f4 fc28 	bl	8000288 <__aeabi_dsub>
 800ba38:	f7f5 f88e 	bl	8000b58 <__aeabi_d2iz>
 800ba3c:	1c65      	adds	r5, r4, #1
 800ba3e:	ab0e      	add	r3, sp, #56	; 0x38
 800ba40:	f10a 0a18 	add.w	sl, sl, #24
 800ba44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ba4c:	e719      	b.n	800b882 <__kernel_rem_pio2+0x292>
 800ba4e:	4630      	mov	r0, r6
 800ba50:	4639      	mov	r1, r7
 800ba52:	f7f5 f881 	bl	8000b58 <__aeabi_d2iz>
 800ba56:	ab0e      	add	r3, sp, #56	; 0x38
 800ba58:	4625      	mov	r5, r4
 800ba5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ba5e:	e710      	b.n	800b882 <__kernel_rem_pio2+0x292>
 800ba60:	ab0e      	add	r3, sp, #56	; 0x38
 800ba62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ba66:	f7f4 fd5d 	bl	8000524 <__aeabi_i2d>
 800ba6a:	4642      	mov	r2, r8
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	f7f4 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ba72:	2200      	movs	r2, #0
 800ba74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ba78:	4b7c      	ldr	r3, [pc, #496]	; (800bc6c <__kernel_rem_pio2+0x67c>)
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	f7f4 fdbb 	bl	80005f8 <__aeabi_dmul>
 800ba82:	3f01      	subs	r7, #1
 800ba84:	4680      	mov	r8, r0
 800ba86:	4689      	mov	r9, r1
 800ba88:	e708      	b.n	800b89c <__kernel_rem_pio2+0x2ac>
 800ba8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ba96:	f7f4 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4640      	mov	r0, r8
 800baa0:	4649      	mov	r1, r9
 800baa2:	f7f4 fbf3 	bl	800028c <__adddf3>
 800baa6:	3701      	adds	r7, #1
 800baa8:	4680      	mov	r8, r0
 800baaa:	4689      	mov	r9, r1
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	429f      	cmp	r7, r3
 800bab0:	dc01      	bgt.n	800bab6 <__kernel_rem_pio2+0x4c6>
 800bab2:	45ba      	cmp	sl, r7
 800bab4:	dae9      	bge.n	800ba8a <__kernel_rem_pio2+0x49a>
 800bab6:	ab4a      	add	r3, sp, #296	; 0x128
 800bab8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800babc:	e9c3 8900 	strd	r8, r9, [r3]
 800bac0:	f10a 0a01 	add.w	sl, sl, #1
 800bac4:	3e08      	subs	r6, #8
 800bac6:	e6f0      	b.n	800b8aa <__kernel_rem_pio2+0x2ba>
 800bac8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d85b      	bhi.n	800bb86 <__kernel_rem_pio2+0x596>
 800bace:	e8df f003 	tbb	[pc, r3]
 800bad2:	264a      	.short	0x264a
 800bad4:	0226      	.short	0x0226
 800bad6:	ab9a      	add	r3, sp, #616	; 0x268
 800bad8:	441c      	add	r4, r3
 800bada:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bade:	46a2      	mov	sl, r4
 800bae0:	46ab      	mov	fp, r5
 800bae2:	f1bb 0f00 	cmp.w	fp, #0
 800bae6:	dc6c      	bgt.n	800bbc2 <__kernel_rem_pio2+0x5d2>
 800bae8:	46a2      	mov	sl, r4
 800baea:	46ab      	mov	fp, r5
 800baec:	f1bb 0f01 	cmp.w	fp, #1
 800baf0:	f300 8086 	bgt.w	800bc00 <__kernel_rem_pio2+0x610>
 800baf4:	2000      	movs	r0, #0
 800baf6:	2100      	movs	r1, #0
 800baf8:	2d01      	cmp	r5, #1
 800bafa:	f300 80a0 	bgt.w	800bc3e <__kernel_rem_pio2+0x64e>
 800bafe:	9b02      	ldr	r3, [sp, #8]
 800bb00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bb04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	f040 809e 	bne.w	800bc4a <__kernel_rem_pio2+0x65a>
 800bb0e:	9b01      	ldr	r3, [sp, #4]
 800bb10:	e9c3 7800 	strd	r7, r8, [r3]
 800bb14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bb18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bb1c:	e033      	b.n	800bb86 <__kernel_rem_pio2+0x596>
 800bb1e:	3408      	adds	r4, #8
 800bb20:	ab4a      	add	r3, sp, #296	; 0x128
 800bb22:	441c      	add	r4, r3
 800bb24:	462e      	mov	r6, r5
 800bb26:	2000      	movs	r0, #0
 800bb28:	2100      	movs	r1, #0
 800bb2a:	2e00      	cmp	r6, #0
 800bb2c:	da3a      	bge.n	800bba4 <__kernel_rem_pio2+0x5b4>
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d03d      	beq.n	800bbb0 <__kernel_rem_pio2+0x5c0>
 800bb34:	4602      	mov	r2, r0
 800bb36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb3a:	9c01      	ldr	r4, [sp, #4]
 800bb3c:	e9c4 2300 	strd	r2, r3, [r4]
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bb48:	f7f4 fb9e 	bl	8000288 <__aeabi_dsub>
 800bb4c:	ae4c      	add	r6, sp, #304	; 0x130
 800bb4e:	2401      	movs	r4, #1
 800bb50:	42a5      	cmp	r5, r4
 800bb52:	da30      	bge.n	800bbb6 <__kernel_rem_pio2+0x5c6>
 800bb54:	9b02      	ldr	r3, [sp, #8]
 800bb56:	b113      	cbz	r3, 800bb5e <__kernel_rem_pio2+0x56e>
 800bb58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	9b01      	ldr	r3, [sp, #4]
 800bb60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bb64:	e00f      	b.n	800bb86 <__kernel_rem_pio2+0x596>
 800bb66:	ab9a      	add	r3, sp, #616	; 0x268
 800bb68:	441c      	add	r4, r3
 800bb6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bb6e:	2000      	movs	r0, #0
 800bb70:	2100      	movs	r1, #0
 800bb72:	2d00      	cmp	r5, #0
 800bb74:	da10      	bge.n	800bb98 <__kernel_rem_pio2+0x5a8>
 800bb76:	9b02      	ldr	r3, [sp, #8]
 800bb78:	b113      	cbz	r3, 800bb80 <__kernel_rem_pio2+0x590>
 800bb7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb7e:	4619      	mov	r1, r3
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	e9c3 0100 	strd	r0, r1, [r3]
 800bb86:	9b06      	ldr	r3, [sp, #24]
 800bb88:	f003 0007 	and.w	r0, r3, #7
 800bb8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bb90:	ecbd 8b02 	vpop	{d8}
 800bb94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bb9c:	f7f4 fb76 	bl	800028c <__adddf3>
 800bba0:	3d01      	subs	r5, #1
 800bba2:	e7e6      	b.n	800bb72 <__kernel_rem_pio2+0x582>
 800bba4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bba8:	f7f4 fb70 	bl	800028c <__adddf3>
 800bbac:	3e01      	subs	r6, #1
 800bbae:	e7bc      	b.n	800bb2a <__kernel_rem_pio2+0x53a>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	e7c1      	b.n	800bb3a <__kernel_rem_pio2+0x54a>
 800bbb6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bbba:	f7f4 fb67 	bl	800028c <__adddf3>
 800bbbe:	3401      	adds	r4, #1
 800bbc0:	e7c6      	b.n	800bb50 <__kernel_rem_pio2+0x560>
 800bbc2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bbc6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bbca:	4640      	mov	r0, r8
 800bbcc:	ec53 2b17 	vmov	r2, r3, d7
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bbd6:	f7f4 fb59 	bl	800028c <__adddf3>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4606      	mov	r6, r0
 800bbe0:	460f      	mov	r7, r1
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	4649      	mov	r1, r9
 800bbe6:	f7f4 fb4f 	bl	8000288 <__aeabi_dsub>
 800bbea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbee:	f7f4 fb4d 	bl	800028c <__adddf3>
 800bbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bbf6:	e9ca 0100 	strd	r0, r1, [sl]
 800bbfa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bbfe:	e770      	b.n	800bae2 <__kernel_rem_pio2+0x4f2>
 800bc00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bc04:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bc08:	4630      	mov	r0, r6
 800bc0a:	ec53 2b17 	vmov	r2, r3, d7
 800bc0e:	4639      	mov	r1, r7
 800bc10:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc14:	f7f4 fb3a 	bl	800028c <__adddf3>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	4689      	mov	r9, r1
 800bc20:	4630      	mov	r0, r6
 800bc22:	4639      	mov	r1, r7
 800bc24:	f7f4 fb30 	bl	8000288 <__aeabi_dsub>
 800bc28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc2c:	f7f4 fb2e 	bl	800028c <__adddf3>
 800bc30:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc34:	e9ca 0100 	strd	r0, r1, [sl]
 800bc38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bc3c:	e756      	b.n	800baec <__kernel_rem_pio2+0x4fc>
 800bc3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bc42:	f7f4 fb23 	bl	800028c <__adddf3>
 800bc46:	3d01      	subs	r5, #1
 800bc48:	e756      	b.n	800baf8 <__kernel_rem_pio2+0x508>
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	9a01      	ldr	r2, [sp, #4]
 800bc4e:	601f      	str	r7, [r3, #0]
 800bc50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bc54:	605c      	str	r4, [r3, #4]
 800bc56:	609d      	str	r5, [r3, #8]
 800bc58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bc5c:	60d3      	str	r3, [r2, #12]
 800bc5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc62:	6110      	str	r0, [r2, #16]
 800bc64:	6153      	str	r3, [r2, #20]
 800bc66:	e78e      	b.n	800bb86 <__kernel_rem_pio2+0x596>
 800bc68:	41700000 	.word	0x41700000
 800bc6c:	3e700000 	.word	0x3e700000

0800bc70 <__kernel_sin>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	ec55 4b10 	vmov	r4, r5, d0
 800bc78:	b085      	sub	sp, #20
 800bc7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bc82:	ed8d 1b00 	vstr	d1, [sp]
 800bc86:	9002      	str	r0, [sp, #8]
 800bc88:	da06      	bge.n	800bc98 <__kernel_sin+0x28>
 800bc8a:	ee10 0a10 	vmov	r0, s0
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 ff62 	bl	8000b58 <__aeabi_d2iz>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d051      	beq.n	800bd3c <__kernel_sin+0xcc>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 fcaa 	bl	80005f8 <__aeabi_dmul>
 800bca4:	4682      	mov	sl, r0
 800bca6:	468b      	mov	fp, r1
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fca2 	bl	80005f8 <__aeabi_dmul>
 800bcb4:	a341      	add	r3, pc, #260	; (adr r3, 800bdbc <__kernel_sin+0x14c>)
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	4680      	mov	r8, r0
 800bcbc:	4689      	mov	r9, r1
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	4659      	mov	r1, fp
 800bcc2:	f7f4 fc99 	bl	80005f8 <__aeabi_dmul>
 800bcc6:	a33f      	add	r3, pc, #252	; (adr r3, 800bdc4 <__kernel_sin+0x154>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f7f4 fadc 	bl	8000288 <__aeabi_dsub>
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	465b      	mov	r3, fp
 800bcd4:	f7f4 fc90 	bl	80005f8 <__aeabi_dmul>
 800bcd8:	a33c      	add	r3, pc, #240	; (adr r3, 800bdcc <__kernel_sin+0x15c>)
 800bcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcde:	f7f4 fad5 	bl	800028c <__adddf3>
 800bce2:	4652      	mov	r2, sl
 800bce4:	465b      	mov	r3, fp
 800bce6:	f7f4 fc87 	bl	80005f8 <__aeabi_dmul>
 800bcea:	a33a      	add	r3, pc, #232	; (adr r3, 800bdd4 <__kernel_sin+0x164>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 faca 	bl	8000288 <__aeabi_dsub>
 800bcf4:	4652      	mov	r2, sl
 800bcf6:	465b      	mov	r3, fp
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	a337      	add	r3, pc, #220	; (adr r3, 800bddc <__kernel_sin+0x16c>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fac3 	bl	800028c <__adddf3>
 800bd06:	9b02      	ldr	r3, [sp, #8]
 800bd08:	4606      	mov	r6, r0
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	b9db      	cbnz	r3, 800bd46 <__kernel_sin+0xd6>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4650      	mov	r0, sl
 800bd14:	4659      	mov	r1, fp
 800bd16:	f7f4 fc6f 	bl	80005f8 <__aeabi_dmul>
 800bd1a:	a325      	add	r3, pc, #148	; (adr r3, 800bdb0 <__kernel_sin+0x140>)
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	f7f4 fab2 	bl	8000288 <__aeabi_dsub>
 800bd24:	4642      	mov	r2, r8
 800bd26:	464b      	mov	r3, r9
 800bd28:	f7f4 fc66 	bl	80005f8 <__aeabi_dmul>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4620      	mov	r0, r4
 800bd32:	4629      	mov	r1, r5
 800bd34:	f7f4 faaa 	bl	800028c <__adddf3>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	ec45 4b10 	vmov	d0, r4, r5
 800bd40:	b005      	add	sp, #20
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	2200      	movs	r2, #0
 800bd48:	4b1b      	ldr	r3, [pc, #108]	; (800bdb8 <__kernel_sin+0x148>)
 800bd4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	4632      	mov	r2, r6
 800bd54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd58:	463b      	mov	r3, r7
 800bd5a:	4640      	mov	r0, r8
 800bd5c:	4649      	mov	r1, r9
 800bd5e:	f7f4 fc4b 	bl	80005f8 <__aeabi_dmul>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd6a:	f7f4 fa8d 	bl	8000288 <__aeabi_dsub>
 800bd6e:	4652      	mov	r2, sl
 800bd70:	465b      	mov	r3, fp
 800bd72:	f7f4 fc41 	bl	80005f8 <__aeabi_dmul>
 800bd76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd7a:	f7f4 fa85 	bl	8000288 <__aeabi_dsub>
 800bd7e:	a30c      	add	r3, pc, #48	; (adr r3, 800bdb0 <__kernel_sin+0x140>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	4606      	mov	r6, r0
 800bd86:	460f      	mov	r7, r1
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 fc34 	bl	80005f8 <__aeabi_dmul>
 800bd90:	4602      	mov	r2, r0
 800bd92:	460b      	mov	r3, r1
 800bd94:	4630      	mov	r0, r6
 800bd96:	4639      	mov	r1, r7
 800bd98:	f7f4 fa78 	bl	800028c <__adddf3>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4620      	mov	r0, r4
 800bda2:	4629      	mov	r1, r5
 800bda4:	f7f4 fa70 	bl	8000288 <__aeabi_dsub>
 800bda8:	e7c6      	b.n	800bd38 <__kernel_sin+0xc8>
 800bdaa:	bf00      	nop
 800bdac:	f3af 8000 	nop.w
 800bdb0:	55555549 	.word	0x55555549
 800bdb4:	3fc55555 	.word	0x3fc55555
 800bdb8:	3fe00000 	.word	0x3fe00000
 800bdbc:	5acfd57c 	.word	0x5acfd57c
 800bdc0:	3de5d93a 	.word	0x3de5d93a
 800bdc4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bdc8:	3e5ae5e6 	.word	0x3e5ae5e6
 800bdcc:	57b1fe7d 	.word	0x57b1fe7d
 800bdd0:	3ec71de3 	.word	0x3ec71de3
 800bdd4:	19c161d5 	.word	0x19c161d5
 800bdd8:	3f2a01a0 	.word	0x3f2a01a0
 800bddc:	1110f8a6 	.word	0x1110f8a6
 800bde0:	3f811111 	.word	0x3f811111
 800bde4:	00000000 	.word	0x00000000

0800bde8 <atan>:
 800bde8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdec:	ec55 4b10 	vmov	r4, r5, d0
 800bdf0:	4bc3      	ldr	r3, [pc, #780]	; (800c100 <atan+0x318>)
 800bdf2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bdf6:	429e      	cmp	r6, r3
 800bdf8:	46ab      	mov	fp, r5
 800bdfa:	dd18      	ble.n	800be2e <atan+0x46>
 800bdfc:	4bc1      	ldr	r3, [pc, #772]	; (800c104 <atan+0x31c>)
 800bdfe:	429e      	cmp	r6, r3
 800be00:	dc01      	bgt.n	800be06 <atan+0x1e>
 800be02:	d109      	bne.n	800be18 <atan+0x30>
 800be04:	b144      	cbz	r4, 800be18 <atan+0x30>
 800be06:	4622      	mov	r2, r4
 800be08:	462b      	mov	r3, r5
 800be0a:	4620      	mov	r0, r4
 800be0c:	4629      	mov	r1, r5
 800be0e:	f7f4 fa3d 	bl	800028c <__adddf3>
 800be12:	4604      	mov	r4, r0
 800be14:	460d      	mov	r5, r1
 800be16:	e006      	b.n	800be26 <atan+0x3e>
 800be18:	f1bb 0f00 	cmp.w	fp, #0
 800be1c:	f340 8131 	ble.w	800c082 <atan+0x29a>
 800be20:	a59b      	add	r5, pc, #620	; (adr r5, 800c090 <atan+0x2a8>)
 800be22:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be26:	ec45 4b10 	vmov	d0, r4, r5
 800be2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2e:	4bb6      	ldr	r3, [pc, #728]	; (800c108 <atan+0x320>)
 800be30:	429e      	cmp	r6, r3
 800be32:	dc14      	bgt.n	800be5e <atan+0x76>
 800be34:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800be38:	429e      	cmp	r6, r3
 800be3a:	dc0d      	bgt.n	800be58 <atan+0x70>
 800be3c:	a396      	add	r3, pc, #600	; (adr r3, 800c098 <atan+0x2b0>)
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	ee10 0a10 	vmov	r0, s0
 800be46:	4629      	mov	r1, r5
 800be48:	f7f4 fa20 	bl	800028c <__adddf3>
 800be4c:	2200      	movs	r2, #0
 800be4e:	4baf      	ldr	r3, [pc, #700]	; (800c10c <atan+0x324>)
 800be50:	f7f4 fe62 	bl	8000b18 <__aeabi_dcmpgt>
 800be54:	2800      	cmp	r0, #0
 800be56:	d1e6      	bne.n	800be26 <atan+0x3e>
 800be58:	f04f 3aff 	mov.w	sl, #4294967295
 800be5c:	e02b      	b.n	800beb6 <atan+0xce>
 800be5e:	f000 f963 	bl	800c128 <fabs>
 800be62:	4bab      	ldr	r3, [pc, #684]	; (800c110 <atan+0x328>)
 800be64:	429e      	cmp	r6, r3
 800be66:	ec55 4b10 	vmov	r4, r5, d0
 800be6a:	f300 80bf 	bgt.w	800bfec <atan+0x204>
 800be6e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800be72:	429e      	cmp	r6, r3
 800be74:	f300 80a0 	bgt.w	800bfb8 <atan+0x1d0>
 800be78:	ee10 2a10 	vmov	r2, s0
 800be7c:	ee10 0a10 	vmov	r0, s0
 800be80:	462b      	mov	r3, r5
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fa02 	bl	800028c <__adddf3>
 800be88:	2200      	movs	r2, #0
 800be8a:	4ba0      	ldr	r3, [pc, #640]	; (800c10c <atan+0x324>)
 800be8c:	f7f4 f9fc 	bl	8000288 <__aeabi_dsub>
 800be90:	2200      	movs	r2, #0
 800be92:	4606      	mov	r6, r0
 800be94:	460f      	mov	r7, r1
 800be96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 f9f5 	bl	800028c <__adddf3>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 fccf 	bl	800084c <__aeabi_ddiv>
 800beae:	f04f 0a00 	mov.w	sl, #0
 800beb2:	4604      	mov	r4, r0
 800beb4:	460d      	mov	r5, r1
 800beb6:	4622      	mov	r2, r4
 800beb8:	462b      	mov	r3, r5
 800beba:	4620      	mov	r0, r4
 800bebc:	4629      	mov	r1, r5
 800bebe:	f7f4 fb9b 	bl	80005f8 <__aeabi_dmul>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4680      	mov	r8, r0
 800bec8:	4689      	mov	r9, r1
 800beca:	f7f4 fb95 	bl	80005f8 <__aeabi_dmul>
 800bece:	a374      	add	r3, pc, #464	; (adr r3, 800c0a0 <atan+0x2b8>)
 800bed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed4:	4606      	mov	r6, r0
 800bed6:	460f      	mov	r7, r1
 800bed8:	f7f4 fb8e 	bl	80005f8 <__aeabi_dmul>
 800bedc:	a372      	add	r3, pc, #456	; (adr r3, 800c0a8 <atan+0x2c0>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	f7f4 f9d3 	bl	800028c <__adddf3>
 800bee6:	4632      	mov	r2, r6
 800bee8:	463b      	mov	r3, r7
 800beea:	f7f4 fb85 	bl	80005f8 <__aeabi_dmul>
 800beee:	a370      	add	r3, pc, #448	; (adr r3, 800c0b0 <atan+0x2c8>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	f7f4 f9ca 	bl	800028c <__adddf3>
 800bef8:	4632      	mov	r2, r6
 800befa:	463b      	mov	r3, r7
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	a36d      	add	r3, pc, #436	; (adr r3, 800c0b8 <atan+0x2d0>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 f9c1 	bl	800028c <__adddf3>
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	f7f4 fb73 	bl	80005f8 <__aeabi_dmul>
 800bf12:	a36b      	add	r3, pc, #428	; (adr r3, 800c0c0 <atan+0x2d8>)
 800bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	463b      	mov	r3, r7
 800bf20:	f7f4 fb6a 	bl	80005f8 <__aeabi_dmul>
 800bf24:	a368      	add	r3, pc, #416	; (adr r3, 800c0c8 <atan+0x2e0>)
 800bf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2a:	f7f4 f9af 	bl	800028c <__adddf3>
 800bf2e:	4642      	mov	r2, r8
 800bf30:	464b      	mov	r3, r9
 800bf32:	f7f4 fb61 	bl	80005f8 <__aeabi_dmul>
 800bf36:	a366      	add	r3, pc, #408	; (adr r3, 800c0d0 <atan+0x2e8>)
 800bf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4689      	mov	r9, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 fb58 	bl	80005f8 <__aeabi_dmul>
 800bf48:	a363      	add	r3, pc, #396	; (adr r3, 800c0d8 <atan+0x2f0>)
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	f7f4 f99b 	bl	8000288 <__aeabi_dsub>
 800bf52:	4632      	mov	r2, r6
 800bf54:	463b      	mov	r3, r7
 800bf56:	f7f4 fb4f 	bl	80005f8 <__aeabi_dmul>
 800bf5a:	a361      	add	r3, pc, #388	; (adr r3, 800c0e0 <atan+0x2f8>)
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f7f4 f992 	bl	8000288 <__aeabi_dsub>
 800bf64:	4632      	mov	r2, r6
 800bf66:	463b      	mov	r3, r7
 800bf68:	f7f4 fb46 	bl	80005f8 <__aeabi_dmul>
 800bf6c:	a35e      	add	r3, pc, #376	; (adr r3, 800c0e8 <atan+0x300>)
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	f7f4 f989 	bl	8000288 <__aeabi_dsub>
 800bf76:	4632      	mov	r2, r6
 800bf78:	463b      	mov	r3, r7
 800bf7a:	f7f4 fb3d 	bl	80005f8 <__aeabi_dmul>
 800bf7e:	a35c      	add	r3, pc, #368	; (adr r3, 800c0f0 <atan+0x308>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 f980 	bl	8000288 <__aeabi_dsub>
 800bf88:	4632      	mov	r2, r6
 800bf8a:	463b      	mov	r3, r7
 800bf8c:	f7f4 fb34 	bl	80005f8 <__aeabi_dmul>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	4640      	mov	r0, r8
 800bf96:	4649      	mov	r1, r9
 800bf98:	f7f4 f978 	bl	800028c <__adddf3>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	f7f4 fb2a 	bl	80005f8 <__aeabi_dmul>
 800bfa4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	d14b      	bne.n	800c046 <atan+0x25e>
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 f969 	bl	8000288 <__aeabi_dsub>
 800bfb6:	e72c      	b.n	800be12 <atan+0x2a>
 800bfb8:	ee10 0a10 	vmov	r0, s0
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4b53      	ldr	r3, [pc, #332]	; (800c10c <atan+0x324>)
 800bfc0:	4629      	mov	r1, r5
 800bfc2:	f7f4 f961 	bl	8000288 <__aeabi_dsub>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	4b4f      	ldr	r3, [pc, #316]	; (800c10c <atan+0x324>)
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 f95b 	bl	800028c <__adddf3>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 fc35 	bl	800084c <__aeabi_ddiv>
 800bfe2:	f04f 0a01 	mov.w	sl, #1
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	460d      	mov	r5, r1
 800bfea:	e764      	b.n	800beb6 <atan+0xce>
 800bfec:	4b49      	ldr	r3, [pc, #292]	; (800c114 <atan+0x32c>)
 800bfee:	429e      	cmp	r6, r3
 800bff0:	dc1d      	bgt.n	800c02e <atan+0x246>
 800bff2:	ee10 0a10 	vmov	r0, s0
 800bff6:	2200      	movs	r2, #0
 800bff8:	4b47      	ldr	r3, [pc, #284]	; (800c118 <atan+0x330>)
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 f944 	bl	8000288 <__aeabi_dsub>
 800c000:	2200      	movs	r2, #0
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	4b44      	ldr	r3, [pc, #272]	; (800c118 <atan+0x330>)
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 faf4 	bl	80005f8 <__aeabi_dmul>
 800c010:	2200      	movs	r2, #0
 800c012:	4b3e      	ldr	r3, [pc, #248]	; (800c10c <atan+0x324>)
 800c014:	f7f4 f93a 	bl	800028c <__adddf3>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4630      	mov	r0, r6
 800c01e:	4639      	mov	r1, r7
 800c020:	f7f4 fc14 	bl	800084c <__aeabi_ddiv>
 800c024:	f04f 0a02 	mov.w	sl, #2
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	e743      	b.n	800beb6 <atan+0xce>
 800c02e:	462b      	mov	r3, r5
 800c030:	ee10 2a10 	vmov	r2, s0
 800c034:	2000      	movs	r0, #0
 800c036:	4939      	ldr	r1, [pc, #228]	; (800c11c <atan+0x334>)
 800c038:	f7f4 fc08 	bl	800084c <__aeabi_ddiv>
 800c03c:	f04f 0a03 	mov.w	sl, #3
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	e737      	b.n	800beb6 <atan+0xce>
 800c046:	4b36      	ldr	r3, [pc, #216]	; (800c120 <atan+0x338>)
 800c048:	4e36      	ldr	r6, [pc, #216]	; (800c124 <atan+0x33c>)
 800c04a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c04e:	4456      	add	r6, sl
 800c050:	449a      	add	sl, r3
 800c052:	e9da 2300 	ldrd	r2, r3, [sl]
 800c056:	f7f4 f917 	bl	8000288 <__aeabi_dsub>
 800c05a:	4622      	mov	r2, r4
 800c05c:	462b      	mov	r3, r5
 800c05e:	f7f4 f913 	bl	8000288 <__aeabi_dsub>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c06a:	f7f4 f90d 	bl	8000288 <__aeabi_dsub>
 800c06e:	f1bb 0f00 	cmp.w	fp, #0
 800c072:	4604      	mov	r4, r0
 800c074:	460d      	mov	r5, r1
 800c076:	f6bf aed6 	bge.w	800be26 <atan+0x3e>
 800c07a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c07e:	461d      	mov	r5, r3
 800c080:	e6d1      	b.n	800be26 <atan+0x3e>
 800c082:	a51d      	add	r5, pc, #116	; (adr r5, 800c0f8 <atan+0x310>)
 800c084:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c088:	e6cd      	b.n	800be26 <atan+0x3e>
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w
 800c090:	54442d18 	.word	0x54442d18
 800c094:	3ff921fb 	.word	0x3ff921fb
 800c098:	8800759c 	.word	0x8800759c
 800c09c:	7e37e43c 	.word	0x7e37e43c
 800c0a0:	e322da11 	.word	0xe322da11
 800c0a4:	3f90ad3a 	.word	0x3f90ad3a
 800c0a8:	24760deb 	.word	0x24760deb
 800c0ac:	3fa97b4b 	.word	0x3fa97b4b
 800c0b0:	a0d03d51 	.word	0xa0d03d51
 800c0b4:	3fb10d66 	.word	0x3fb10d66
 800c0b8:	c54c206e 	.word	0xc54c206e
 800c0bc:	3fb745cd 	.word	0x3fb745cd
 800c0c0:	920083ff 	.word	0x920083ff
 800c0c4:	3fc24924 	.word	0x3fc24924
 800c0c8:	5555550d 	.word	0x5555550d
 800c0cc:	3fd55555 	.word	0x3fd55555
 800c0d0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0d4:	bfa2b444 	.word	0xbfa2b444
 800c0d8:	52defd9a 	.word	0x52defd9a
 800c0dc:	3fadde2d 	.word	0x3fadde2d
 800c0e0:	af749a6d 	.word	0xaf749a6d
 800c0e4:	3fb3b0f2 	.word	0x3fb3b0f2
 800c0e8:	fe231671 	.word	0xfe231671
 800c0ec:	3fbc71c6 	.word	0x3fbc71c6
 800c0f0:	9998ebc4 	.word	0x9998ebc4
 800c0f4:	3fc99999 	.word	0x3fc99999
 800c0f8:	54442d18 	.word	0x54442d18
 800c0fc:	bff921fb 	.word	0xbff921fb
 800c100:	440fffff 	.word	0x440fffff
 800c104:	7ff00000 	.word	0x7ff00000
 800c108:	3fdbffff 	.word	0x3fdbffff
 800c10c:	3ff00000 	.word	0x3ff00000
 800c110:	3ff2ffff 	.word	0x3ff2ffff
 800c114:	40037fff 	.word	0x40037fff
 800c118:	3ff80000 	.word	0x3ff80000
 800c11c:	bff00000 	.word	0xbff00000
 800c120:	08010ac0 	.word	0x08010ac0
 800c124:	08010aa0 	.word	0x08010aa0

0800c128 <fabs>:
 800c128:	ec51 0b10 	vmov	r0, r1, d0
 800c12c:	ee10 2a10 	vmov	r2, s0
 800c130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c134:	ec43 2b10 	vmov	d0, r2, r3
 800c138:	4770      	bx	lr
 800c13a:	0000      	movs	r0, r0
 800c13c:	0000      	movs	r0, r0
	...

0800c140 <floor>:
 800c140:	ec51 0b10 	vmov	r0, r1, d0
 800c144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c148:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c14c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c150:	2e13      	cmp	r6, #19
 800c152:	460c      	mov	r4, r1
 800c154:	ee10 5a10 	vmov	r5, s0
 800c158:	4680      	mov	r8, r0
 800c15a:	dc34      	bgt.n	800c1c6 <floor+0x86>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	da16      	bge.n	800c18e <floor+0x4e>
 800c160:	a335      	add	r3, pc, #212	; (adr r3, 800c238 <floor+0xf8>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 f891 	bl	800028c <__adddf3>
 800c16a:	2200      	movs	r2, #0
 800c16c:	2300      	movs	r3, #0
 800c16e:	f7f4 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 800c172:	b148      	cbz	r0, 800c188 <floor+0x48>
 800c174:	2c00      	cmp	r4, #0
 800c176:	da59      	bge.n	800c22c <floor+0xec>
 800c178:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c17c:	4a30      	ldr	r2, [pc, #192]	; (800c240 <floor+0x100>)
 800c17e:	432b      	orrs	r3, r5
 800c180:	2500      	movs	r5, #0
 800c182:	42ab      	cmp	r3, r5
 800c184:	bf18      	it	ne
 800c186:	4614      	movne	r4, r2
 800c188:	4621      	mov	r1, r4
 800c18a:	4628      	mov	r0, r5
 800c18c:	e025      	b.n	800c1da <floor+0x9a>
 800c18e:	4f2d      	ldr	r7, [pc, #180]	; (800c244 <floor+0x104>)
 800c190:	4137      	asrs	r7, r6
 800c192:	ea01 0307 	and.w	r3, r1, r7
 800c196:	4303      	orrs	r3, r0
 800c198:	d01f      	beq.n	800c1da <floor+0x9a>
 800c19a:	a327      	add	r3, pc, #156	; (adr r3, 800c238 <floor+0xf8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 f874 	bl	800028c <__adddf3>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f7f4 fcb6 	bl	8000b18 <__aeabi_dcmpgt>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d0eb      	beq.n	800c188 <floor+0x48>
 800c1b0:	2c00      	cmp	r4, #0
 800c1b2:	bfbe      	ittt	lt
 800c1b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c1b8:	fa43 f606 	asrlt.w	r6, r3, r6
 800c1bc:	19a4      	addlt	r4, r4, r6
 800c1be:	ea24 0407 	bic.w	r4, r4, r7
 800c1c2:	2500      	movs	r5, #0
 800c1c4:	e7e0      	b.n	800c188 <floor+0x48>
 800c1c6:	2e33      	cmp	r6, #51	; 0x33
 800c1c8:	dd0b      	ble.n	800c1e2 <floor+0xa2>
 800c1ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c1ce:	d104      	bne.n	800c1da <floor+0x9a>
 800c1d0:	ee10 2a10 	vmov	r2, s0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	f7f4 f859 	bl	800028c <__adddf3>
 800c1da:	ec41 0b10 	vmov	d0, r0, r1
 800c1de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ea:	fa23 f707 	lsr.w	r7, r3, r7
 800c1ee:	4207      	tst	r7, r0
 800c1f0:	d0f3      	beq.n	800c1da <floor+0x9a>
 800c1f2:	a311      	add	r3, pc, #68	; (adr r3, 800c238 <floor+0xf8>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f848 	bl	800028c <__adddf3>
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2300      	movs	r3, #0
 800c200:	f7f4 fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 800c204:	2800      	cmp	r0, #0
 800c206:	d0bf      	beq.n	800c188 <floor+0x48>
 800c208:	2c00      	cmp	r4, #0
 800c20a:	da02      	bge.n	800c212 <floor+0xd2>
 800c20c:	2e14      	cmp	r6, #20
 800c20e:	d103      	bne.n	800c218 <floor+0xd8>
 800c210:	3401      	adds	r4, #1
 800c212:	ea25 0507 	bic.w	r5, r5, r7
 800c216:	e7b7      	b.n	800c188 <floor+0x48>
 800c218:	2301      	movs	r3, #1
 800c21a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c21e:	fa03 f606 	lsl.w	r6, r3, r6
 800c222:	4435      	add	r5, r6
 800c224:	4545      	cmp	r5, r8
 800c226:	bf38      	it	cc
 800c228:	18e4      	addcc	r4, r4, r3
 800c22a:	e7f2      	b.n	800c212 <floor+0xd2>
 800c22c:	2500      	movs	r5, #0
 800c22e:	462c      	mov	r4, r5
 800c230:	e7aa      	b.n	800c188 <floor+0x48>
 800c232:	bf00      	nop
 800c234:	f3af 8000 	nop.w
 800c238:	8800759c 	.word	0x8800759c
 800c23c:	7e37e43c 	.word	0x7e37e43c
 800c240:	bff00000 	.word	0xbff00000
 800c244:	000fffff 	.word	0x000fffff

0800c248 <scalbn>:
 800c248:	b570      	push	{r4, r5, r6, lr}
 800c24a:	ec55 4b10 	vmov	r4, r5, d0
 800c24e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c252:	4606      	mov	r6, r0
 800c254:	462b      	mov	r3, r5
 800c256:	b9aa      	cbnz	r2, 800c284 <scalbn+0x3c>
 800c258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c25c:	4323      	orrs	r3, r4
 800c25e:	d03b      	beq.n	800c2d8 <scalbn+0x90>
 800c260:	4b31      	ldr	r3, [pc, #196]	; (800c328 <scalbn+0xe0>)
 800c262:	4629      	mov	r1, r5
 800c264:	2200      	movs	r2, #0
 800c266:	ee10 0a10 	vmov	r0, s0
 800c26a:	f7f4 f9c5 	bl	80005f8 <__aeabi_dmul>
 800c26e:	4b2f      	ldr	r3, [pc, #188]	; (800c32c <scalbn+0xe4>)
 800c270:	429e      	cmp	r6, r3
 800c272:	4604      	mov	r4, r0
 800c274:	460d      	mov	r5, r1
 800c276:	da12      	bge.n	800c29e <scalbn+0x56>
 800c278:	a327      	add	r3, pc, #156	; (adr r3, 800c318 <scalbn+0xd0>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f9bb 	bl	80005f8 <__aeabi_dmul>
 800c282:	e009      	b.n	800c298 <scalbn+0x50>
 800c284:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c288:	428a      	cmp	r2, r1
 800c28a:	d10c      	bne.n	800c2a6 <scalbn+0x5e>
 800c28c:	ee10 2a10 	vmov	r2, s0
 800c290:	4620      	mov	r0, r4
 800c292:	4629      	mov	r1, r5
 800c294:	f7f3 fffa 	bl	800028c <__adddf3>
 800c298:	4604      	mov	r4, r0
 800c29a:	460d      	mov	r5, r1
 800c29c:	e01c      	b.n	800c2d8 <scalbn+0x90>
 800c29e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	3a36      	subs	r2, #54	; 0x36
 800c2a6:	4432      	add	r2, r6
 800c2a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c2ac:	428a      	cmp	r2, r1
 800c2ae:	dd0b      	ble.n	800c2c8 <scalbn+0x80>
 800c2b0:	ec45 4b11 	vmov	d1, r4, r5
 800c2b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c320 <scalbn+0xd8>
 800c2b8:	f000 f83c 	bl	800c334 <copysign>
 800c2bc:	a318      	add	r3, pc, #96	; (adr r3, 800c320 <scalbn+0xd8>)
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	ec51 0b10 	vmov	r0, r1, d0
 800c2c6:	e7da      	b.n	800c27e <scalbn+0x36>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	dd08      	ble.n	800c2de <scalbn+0x96>
 800c2cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c2d8:	ec45 4b10 	vmov	d0, r4, r5
 800c2dc:	bd70      	pop	{r4, r5, r6, pc}
 800c2de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c2e2:	da0d      	bge.n	800c300 <scalbn+0xb8>
 800c2e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c2e8:	429e      	cmp	r6, r3
 800c2ea:	ec45 4b11 	vmov	d1, r4, r5
 800c2ee:	dce1      	bgt.n	800c2b4 <scalbn+0x6c>
 800c2f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c318 <scalbn+0xd0>
 800c2f4:	f000 f81e 	bl	800c334 <copysign>
 800c2f8:	a307      	add	r3, pc, #28	; (adr r3, 800c318 <scalbn+0xd0>)
 800c2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fe:	e7e0      	b.n	800c2c2 <scalbn+0x7a>
 800c300:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c304:	3236      	adds	r2, #54	; 0x36
 800c306:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c30a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c30e:	4620      	mov	r0, r4
 800c310:	4629      	mov	r1, r5
 800c312:	2200      	movs	r2, #0
 800c314:	4b06      	ldr	r3, [pc, #24]	; (800c330 <scalbn+0xe8>)
 800c316:	e7b2      	b.n	800c27e <scalbn+0x36>
 800c318:	c2f8f359 	.word	0xc2f8f359
 800c31c:	01a56e1f 	.word	0x01a56e1f
 800c320:	8800759c 	.word	0x8800759c
 800c324:	7e37e43c 	.word	0x7e37e43c
 800c328:	43500000 	.word	0x43500000
 800c32c:	ffff3cb0 	.word	0xffff3cb0
 800c330:	3c900000 	.word	0x3c900000

0800c334 <copysign>:
 800c334:	ec51 0b10 	vmov	r0, r1, d0
 800c338:	ee11 0a90 	vmov	r0, s3
 800c33c:	ee10 2a10 	vmov	r2, s0
 800c340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c344:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c348:	ea41 0300 	orr.w	r3, r1, r0
 800c34c:	ec43 2b10 	vmov	d0, r2, r3
 800c350:	4770      	bx	lr
	...

0800c354 <__errno>:
 800c354:	4b01      	ldr	r3, [pc, #4]	; (800c35c <__errno+0x8>)
 800c356:	6818      	ldr	r0, [r3, #0]
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	20000040 	.word	0x20000040

0800c360 <__libc_init_array>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	4e0d      	ldr	r6, [pc, #52]	; (800c398 <__libc_init_array+0x38>)
 800c364:	4c0d      	ldr	r4, [pc, #52]	; (800c39c <__libc_init_array+0x3c>)
 800c366:	1ba4      	subs	r4, r4, r6
 800c368:	10a4      	asrs	r4, r4, #2
 800c36a:	2500      	movs	r5, #0
 800c36c:	42a5      	cmp	r5, r4
 800c36e:	d109      	bne.n	800c384 <__libc_init_array+0x24>
 800c370:	4e0b      	ldr	r6, [pc, #44]	; (800c3a0 <__libc_init_array+0x40>)
 800c372:	4c0c      	ldr	r4, [pc, #48]	; (800c3a4 <__libc_init_array+0x44>)
 800c374:	f004 fa5e 	bl	8010834 <_init>
 800c378:	1ba4      	subs	r4, r4, r6
 800c37a:	10a4      	asrs	r4, r4, #2
 800c37c:	2500      	movs	r5, #0
 800c37e:	42a5      	cmp	r5, r4
 800c380:	d105      	bne.n	800c38e <__libc_init_array+0x2e>
 800c382:	bd70      	pop	{r4, r5, r6, pc}
 800c384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c388:	4798      	blx	r3
 800c38a:	3501      	adds	r5, #1
 800c38c:	e7ee      	b.n	800c36c <__libc_init_array+0xc>
 800c38e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c392:	4798      	blx	r3
 800c394:	3501      	adds	r5, #1
 800c396:	e7f2      	b.n	800c37e <__libc_init_array+0x1e>
 800c398:	08010e08 	.word	0x08010e08
 800c39c:	08010e08 	.word	0x08010e08
 800c3a0:	08010e08 	.word	0x08010e08
 800c3a4:	08010e0c 	.word	0x08010e0c

0800c3a8 <memcpy>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	1e43      	subs	r3, r0, #1
 800c3ac:	440a      	add	r2, r1
 800c3ae:	4291      	cmp	r1, r2
 800c3b0:	d100      	bne.n	800c3b4 <memcpy+0xc>
 800c3b2:	bd10      	pop	{r4, pc}
 800c3b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3bc:	e7f7      	b.n	800c3ae <memcpy+0x6>

0800c3be <memset>:
 800c3be:	4402      	add	r2, r0
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d100      	bne.n	800c3c8 <memset+0xa>
 800c3c6:	4770      	bx	lr
 800c3c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c3cc:	e7f9      	b.n	800c3c2 <memset+0x4>

0800c3ce <__cvt>:
 800c3ce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d2:	ec55 4b10 	vmov	r4, r5, d0
 800c3d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c3dc:	2d00      	cmp	r5, #0
 800c3de:	460e      	mov	r6, r1
 800c3e0:	4691      	mov	r9, r2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	bfb8      	it	lt
 800c3e6:	4622      	movlt	r2, r4
 800c3e8:	462b      	mov	r3, r5
 800c3ea:	f027 0720 	bic.w	r7, r7, #32
 800c3ee:	bfbb      	ittet	lt
 800c3f0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c3f4:	461d      	movlt	r5, r3
 800c3f6:	2300      	movge	r3, #0
 800c3f8:	232d      	movlt	r3, #45	; 0x2d
 800c3fa:	bfb8      	it	lt
 800c3fc:	4614      	movlt	r4, r2
 800c3fe:	2f46      	cmp	r7, #70	; 0x46
 800c400:	700b      	strb	r3, [r1, #0]
 800c402:	d004      	beq.n	800c40e <__cvt+0x40>
 800c404:	2f45      	cmp	r7, #69	; 0x45
 800c406:	d100      	bne.n	800c40a <__cvt+0x3c>
 800c408:	3601      	adds	r6, #1
 800c40a:	2102      	movs	r1, #2
 800c40c:	e000      	b.n	800c410 <__cvt+0x42>
 800c40e:	2103      	movs	r1, #3
 800c410:	ab03      	add	r3, sp, #12
 800c412:	9301      	str	r3, [sp, #4]
 800c414:	ab02      	add	r3, sp, #8
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	4632      	mov	r2, r6
 800c41a:	4653      	mov	r3, sl
 800c41c:	ec45 4b10 	vmov	d0, r4, r5
 800c420:	f001 feb2 	bl	800e188 <_dtoa_r>
 800c424:	2f47      	cmp	r7, #71	; 0x47
 800c426:	4680      	mov	r8, r0
 800c428:	d102      	bne.n	800c430 <__cvt+0x62>
 800c42a:	f019 0f01 	tst.w	r9, #1
 800c42e:	d026      	beq.n	800c47e <__cvt+0xb0>
 800c430:	2f46      	cmp	r7, #70	; 0x46
 800c432:	eb08 0906 	add.w	r9, r8, r6
 800c436:	d111      	bne.n	800c45c <__cvt+0x8e>
 800c438:	f898 3000 	ldrb.w	r3, [r8]
 800c43c:	2b30      	cmp	r3, #48	; 0x30
 800c43e:	d10a      	bne.n	800c456 <__cvt+0x88>
 800c440:	2200      	movs	r2, #0
 800c442:	2300      	movs	r3, #0
 800c444:	4620      	mov	r0, r4
 800c446:	4629      	mov	r1, r5
 800c448:	f7f4 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c44c:	b918      	cbnz	r0, 800c456 <__cvt+0x88>
 800c44e:	f1c6 0601 	rsb	r6, r6, #1
 800c452:	f8ca 6000 	str.w	r6, [sl]
 800c456:	f8da 3000 	ldr.w	r3, [sl]
 800c45a:	4499      	add	r9, r3
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	4620      	mov	r0, r4
 800c462:	4629      	mov	r1, r5
 800c464:	f7f4 fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 800c468:	b938      	cbnz	r0, 800c47a <__cvt+0xac>
 800c46a:	2230      	movs	r2, #48	; 0x30
 800c46c:	9b03      	ldr	r3, [sp, #12]
 800c46e:	454b      	cmp	r3, r9
 800c470:	d205      	bcs.n	800c47e <__cvt+0xb0>
 800c472:	1c59      	adds	r1, r3, #1
 800c474:	9103      	str	r1, [sp, #12]
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e7f8      	b.n	800c46c <__cvt+0x9e>
 800c47a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c482:	eba3 0308 	sub.w	r3, r3, r8
 800c486:	4640      	mov	r0, r8
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	b004      	add	sp, #16
 800c48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c490 <__exponent>:
 800c490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c492:	2900      	cmp	r1, #0
 800c494:	4604      	mov	r4, r0
 800c496:	bfba      	itte	lt
 800c498:	4249      	neglt	r1, r1
 800c49a:	232d      	movlt	r3, #45	; 0x2d
 800c49c:	232b      	movge	r3, #43	; 0x2b
 800c49e:	2909      	cmp	r1, #9
 800c4a0:	f804 2b02 	strb.w	r2, [r4], #2
 800c4a4:	7043      	strb	r3, [r0, #1]
 800c4a6:	dd20      	ble.n	800c4ea <__exponent+0x5a>
 800c4a8:	f10d 0307 	add.w	r3, sp, #7
 800c4ac:	461f      	mov	r7, r3
 800c4ae:	260a      	movs	r6, #10
 800c4b0:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4b4:	fb06 1115 	mls	r1, r6, r5, r1
 800c4b8:	3130      	adds	r1, #48	; 0x30
 800c4ba:	2d09      	cmp	r5, #9
 800c4bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4c0:	f103 32ff 	add.w	r2, r3, #4294967295
 800c4c4:	4629      	mov	r1, r5
 800c4c6:	dc09      	bgt.n	800c4dc <__exponent+0x4c>
 800c4c8:	3130      	adds	r1, #48	; 0x30
 800c4ca:	3b02      	subs	r3, #2
 800c4cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c4d0:	42bb      	cmp	r3, r7
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	d304      	bcc.n	800c4e0 <__exponent+0x50>
 800c4d6:	1a10      	subs	r0, r2, r0
 800c4d8:	b003      	add	sp, #12
 800c4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4dc:	4613      	mov	r3, r2
 800c4de:	e7e7      	b.n	800c4b0 <__exponent+0x20>
 800c4e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e4:	f804 2b01 	strb.w	r2, [r4], #1
 800c4e8:	e7f2      	b.n	800c4d0 <__exponent+0x40>
 800c4ea:	2330      	movs	r3, #48	; 0x30
 800c4ec:	4419      	add	r1, r3
 800c4ee:	7083      	strb	r3, [r0, #2]
 800c4f0:	1d02      	adds	r2, r0, #4
 800c4f2:	70c1      	strb	r1, [r0, #3]
 800c4f4:	e7ef      	b.n	800c4d6 <__exponent+0x46>
	...

0800c4f8 <_printf_float>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	b08d      	sub	sp, #52	; 0x34
 800c4fe:	460c      	mov	r4, r1
 800c500:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c504:	4616      	mov	r6, r2
 800c506:	461f      	mov	r7, r3
 800c508:	4605      	mov	r5, r0
 800c50a:	f003 f89b 	bl	800f644 <_localeconv_r>
 800c50e:	6803      	ldr	r3, [r0, #0]
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	4618      	mov	r0, r3
 800c514:	f7f3 fe5c 	bl	80001d0 <strlen>
 800c518:	2300      	movs	r3, #0
 800c51a:	930a      	str	r3, [sp, #40]	; 0x28
 800c51c:	f8d8 3000 	ldr.w	r3, [r8]
 800c520:	9005      	str	r0, [sp, #20]
 800c522:	3307      	adds	r3, #7
 800c524:	f023 0307 	bic.w	r3, r3, #7
 800c528:	f103 0208 	add.w	r2, r3, #8
 800c52c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c530:	f8d4 b000 	ldr.w	fp, [r4]
 800c534:	f8c8 2000 	str.w	r2, [r8]
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c540:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c544:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c548:	9307      	str	r3, [sp, #28]
 800c54a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	4ba7      	ldr	r3, [pc, #668]	; (800c7f0 <_printf_float+0x2f8>)
 800c554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c558:	f7f4 fae8 	bl	8000b2c <__aeabi_dcmpun>
 800c55c:	bb70      	cbnz	r0, 800c5bc <_printf_float+0xc4>
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	4ba3      	ldr	r3, [pc, #652]	; (800c7f0 <_printf_float+0x2f8>)
 800c564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c568:	f7f4 fac2 	bl	8000af0 <__aeabi_dcmple>
 800c56c:	bb30      	cbnz	r0, 800c5bc <_printf_float+0xc4>
 800c56e:	2200      	movs	r2, #0
 800c570:	2300      	movs	r3, #0
 800c572:	4640      	mov	r0, r8
 800c574:	4649      	mov	r1, r9
 800c576:	f7f4 fab1 	bl	8000adc <__aeabi_dcmplt>
 800c57a:	b110      	cbz	r0, 800c582 <_printf_float+0x8a>
 800c57c:	232d      	movs	r3, #45	; 0x2d
 800c57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c582:	4a9c      	ldr	r2, [pc, #624]	; (800c7f4 <_printf_float+0x2fc>)
 800c584:	4b9c      	ldr	r3, [pc, #624]	; (800c7f8 <_printf_float+0x300>)
 800c586:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c58a:	bf8c      	ite	hi
 800c58c:	4690      	movhi	r8, r2
 800c58e:	4698      	movls	r8, r3
 800c590:	2303      	movs	r3, #3
 800c592:	f02b 0204 	bic.w	r2, fp, #4
 800c596:	6123      	str	r3, [r4, #16]
 800c598:	6022      	str	r2, [r4, #0]
 800c59a:	f04f 0900 	mov.w	r9, #0
 800c59e:	9700      	str	r7, [sp, #0]
 800c5a0:	4633      	mov	r3, r6
 800c5a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f000 f9e6 	bl	800c978 <_printf_common>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f040 808d 	bne.w	800c6cc <_printf_float+0x1d4>
 800c5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5b6:	b00d      	add	sp, #52	; 0x34
 800c5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5bc:	4642      	mov	r2, r8
 800c5be:	464b      	mov	r3, r9
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f4 fab2 	bl	8000b2c <__aeabi_dcmpun>
 800c5c8:	b110      	cbz	r0, 800c5d0 <_printf_float+0xd8>
 800c5ca:	4a8c      	ldr	r2, [pc, #560]	; (800c7fc <_printf_float+0x304>)
 800c5cc:	4b8c      	ldr	r3, [pc, #560]	; (800c800 <_printf_float+0x308>)
 800c5ce:	e7da      	b.n	800c586 <_printf_float+0x8e>
 800c5d0:	6861      	ldr	r1, [r4, #4]
 800c5d2:	1c4b      	adds	r3, r1, #1
 800c5d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c5d8:	a80a      	add	r0, sp, #40	; 0x28
 800c5da:	d13e      	bne.n	800c65a <_printf_float+0x162>
 800c5dc:	2306      	movs	r3, #6
 800c5de:	6063      	str	r3, [r4, #4]
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c5e6:	ab09      	add	r3, sp, #36	; 0x24
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	ec49 8b10 	vmov	d0, r8, r9
 800c5ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c5f2:	6022      	str	r2, [r4, #0]
 800c5f4:	f8cd a004 	str.w	sl, [sp, #4]
 800c5f8:	6861      	ldr	r1, [r4, #4]
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f7ff fee7 	bl	800c3ce <__cvt>
 800c600:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c604:	2b47      	cmp	r3, #71	; 0x47
 800c606:	4680      	mov	r8, r0
 800c608:	d109      	bne.n	800c61e <_printf_float+0x126>
 800c60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60c:	1cd8      	adds	r0, r3, #3
 800c60e:	db02      	blt.n	800c616 <_printf_float+0x11e>
 800c610:	6862      	ldr	r2, [r4, #4]
 800c612:	4293      	cmp	r3, r2
 800c614:	dd47      	ble.n	800c6a6 <_printf_float+0x1ae>
 800c616:	f1aa 0a02 	sub.w	sl, sl, #2
 800c61a:	fa5f fa8a 	uxtb.w	sl, sl
 800c61e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c622:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c624:	d824      	bhi.n	800c670 <_printf_float+0x178>
 800c626:	3901      	subs	r1, #1
 800c628:	4652      	mov	r2, sl
 800c62a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c62e:	9109      	str	r1, [sp, #36]	; 0x24
 800c630:	f7ff ff2e 	bl	800c490 <__exponent>
 800c634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c636:	1813      	adds	r3, r2, r0
 800c638:	2a01      	cmp	r2, #1
 800c63a:	4681      	mov	r9, r0
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	dc02      	bgt.n	800c646 <_printf_float+0x14e>
 800c640:	6822      	ldr	r2, [r4, #0]
 800c642:	07d1      	lsls	r1, r2, #31
 800c644:	d501      	bpl.n	800c64a <_printf_float+0x152>
 800c646:	3301      	adds	r3, #1
 800c648:	6123      	str	r3, [r4, #16]
 800c64a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d0a5      	beq.n	800c59e <_printf_float+0xa6>
 800c652:	232d      	movs	r3, #45	; 0x2d
 800c654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c658:	e7a1      	b.n	800c59e <_printf_float+0xa6>
 800c65a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c65e:	f000 8177 	beq.w	800c950 <_printf_float+0x458>
 800c662:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c666:	d1bb      	bne.n	800c5e0 <_printf_float+0xe8>
 800c668:	2900      	cmp	r1, #0
 800c66a:	d1b9      	bne.n	800c5e0 <_printf_float+0xe8>
 800c66c:	2301      	movs	r3, #1
 800c66e:	e7b6      	b.n	800c5de <_printf_float+0xe6>
 800c670:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c674:	d119      	bne.n	800c6aa <_printf_float+0x1b2>
 800c676:	2900      	cmp	r1, #0
 800c678:	6863      	ldr	r3, [r4, #4]
 800c67a:	dd0c      	ble.n	800c696 <_printf_float+0x19e>
 800c67c:	6121      	str	r1, [r4, #16]
 800c67e:	b913      	cbnz	r3, 800c686 <_printf_float+0x18e>
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	07d2      	lsls	r2, r2, #31
 800c684:	d502      	bpl.n	800c68c <_printf_float+0x194>
 800c686:	3301      	adds	r3, #1
 800c688:	440b      	add	r3, r1
 800c68a:	6123      	str	r3, [r4, #16]
 800c68c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c68e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c690:	f04f 0900 	mov.w	r9, #0
 800c694:	e7d9      	b.n	800c64a <_printf_float+0x152>
 800c696:	b913      	cbnz	r3, 800c69e <_printf_float+0x1a6>
 800c698:	6822      	ldr	r2, [r4, #0]
 800c69a:	07d0      	lsls	r0, r2, #31
 800c69c:	d501      	bpl.n	800c6a2 <_printf_float+0x1aa>
 800c69e:	3302      	adds	r3, #2
 800c6a0:	e7f3      	b.n	800c68a <_printf_float+0x192>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e7f1      	b.n	800c68a <_printf_float+0x192>
 800c6a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c6aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	db05      	blt.n	800c6be <_printf_float+0x1c6>
 800c6b2:	6822      	ldr	r2, [r4, #0]
 800c6b4:	6123      	str	r3, [r4, #16]
 800c6b6:	07d1      	lsls	r1, r2, #31
 800c6b8:	d5e8      	bpl.n	800c68c <_printf_float+0x194>
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	e7e5      	b.n	800c68a <_printf_float+0x192>
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bfd4      	ite	le
 800c6c2:	f1c3 0302 	rsble	r3, r3, #2
 800c6c6:	2301      	movgt	r3, #1
 800c6c8:	4413      	add	r3, r2
 800c6ca:	e7de      	b.n	800c68a <_printf_float+0x192>
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	055a      	lsls	r2, r3, #21
 800c6d0:	d407      	bmi.n	800c6e2 <_printf_float+0x1ea>
 800c6d2:	6923      	ldr	r3, [r4, #16]
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d12b      	bne.n	800c738 <_printf_float+0x240>
 800c6e0:	e767      	b.n	800c5b2 <_printf_float+0xba>
 800c6e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c6e6:	f240 80dc 	bls.w	800c8a2 <_printf_float+0x3aa>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6f2:	f7f4 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6f6:	2800      	cmp	r0, #0
 800c6f8:	d033      	beq.n	800c762 <_printf_float+0x26a>
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	4a41      	ldr	r2, [pc, #260]	; (800c804 <_printf_float+0x30c>)
 800c6fe:	4631      	mov	r1, r6
 800c700:	4628      	mov	r0, r5
 800c702:	47b8      	blx	r7
 800c704:	3001      	adds	r0, #1
 800c706:	f43f af54 	beq.w	800c5b2 <_printf_float+0xba>
 800c70a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c70e:	429a      	cmp	r2, r3
 800c710:	db02      	blt.n	800c718 <_printf_float+0x220>
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	07d8      	lsls	r0, r3, #31
 800c716:	d50f      	bpl.n	800c738 <_printf_float+0x240>
 800c718:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c71c:	4631      	mov	r1, r6
 800c71e:	4628      	mov	r0, r5
 800c720:	47b8      	blx	r7
 800c722:	3001      	adds	r0, #1
 800c724:	f43f af45 	beq.w	800c5b2 <_printf_float+0xba>
 800c728:	f04f 0800 	mov.w	r8, #0
 800c72c:	f104 091a 	add.w	r9, r4, #26
 800c730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c732:	3b01      	subs	r3, #1
 800c734:	4543      	cmp	r3, r8
 800c736:	dc09      	bgt.n	800c74c <_printf_float+0x254>
 800c738:	6823      	ldr	r3, [r4, #0]
 800c73a:	079b      	lsls	r3, r3, #30
 800c73c:	f100 8103 	bmi.w	800c946 <_printf_float+0x44e>
 800c740:	68e0      	ldr	r0, [r4, #12]
 800c742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c744:	4298      	cmp	r0, r3
 800c746:	bfb8      	it	lt
 800c748:	4618      	movlt	r0, r3
 800c74a:	e734      	b.n	800c5b6 <_printf_float+0xbe>
 800c74c:	2301      	movs	r3, #1
 800c74e:	464a      	mov	r2, r9
 800c750:	4631      	mov	r1, r6
 800c752:	4628      	mov	r0, r5
 800c754:	47b8      	blx	r7
 800c756:	3001      	adds	r0, #1
 800c758:	f43f af2b 	beq.w	800c5b2 <_printf_float+0xba>
 800c75c:	f108 0801 	add.w	r8, r8, #1
 800c760:	e7e6      	b.n	800c730 <_printf_float+0x238>
 800c762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c764:	2b00      	cmp	r3, #0
 800c766:	dc2b      	bgt.n	800c7c0 <_printf_float+0x2c8>
 800c768:	2301      	movs	r3, #1
 800c76a:	4a26      	ldr	r2, [pc, #152]	; (800c804 <_printf_float+0x30c>)
 800c76c:	4631      	mov	r1, r6
 800c76e:	4628      	mov	r0, r5
 800c770:	47b8      	blx	r7
 800c772:	3001      	adds	r0, #1
 800c774:	f43f af1d 	beq.w	800c5b2 <_printf_float+0xba>
 800c778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c77a:	b923      	cbnz	r3, 800c786 <_printf_float+0x28e>
 800c77c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c77e:	b913      	cbnz	r3, 800c786 <_printf_float+0x28e>
 800c780:	6823      	ldr	r3, [r4, #0]
 800c782:	07d9      	lsls	r1, r3, #31
 800c784:	d5d8      	bpl.n	800c738 <_printf_float+0x240>
 800c786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c78a:	4631      	mov	r1, r6
 800c78c:	4628      	mov	r0, r5
 800c78e:	47b8      	blx	r7
 800c790:	3001      	adds	r0, #1
 800c792:	f43f af0e 	beq.w	800c5b2 <_printf_float+0xba>
 800c796:	f04f 0900 	mov.w	r9, #0
 800c79a:	f104 0a1a 	add.w	sl, r4, #26
 800c79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a0:	425b      	negs	r3, r3
 800c7a2:	454b      	cmp	r3, r9
 800c7a4:	dc01      	bgt.n	800c7aa <_printf_float+0x2b2>
 800c7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7a8:	e794      	b.n	800c6d4 <_printf_float+0x1dc>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4652      	mov	r2, sl
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	47b8      	blx	r7
 800c7b4:	3001      	adds	r0, #1
 800c7b6:	f43f aefc 	beq.w	800c5b2 <_printf_float+0xba>
 800c7ba:	f109 0901 	add.w	r9, r9, #1
 800c7be:	e7ee      	b.n	800c79e <_printf_float+0x2a6>
 800c7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	bfa8      	it	ge
 800c7c8:	461a      	movge	r2, r3
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	4691      	mov	r9, r2
 800c7ce:	dd07      	ble.n	800c7e0 <_printf_float+0x2e8>
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4642      	mov	r2, r8
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	47b8      	blx	r7
 800c7da:	3001      	adds	r0, #1
 800c7dc:	f43f aee9 	beq.w	800c5b2 <_printf_float+0xba>
 800c7e0:	f104 031a 	add.w	r3, r4, #26
 800c7e4:	f04f 0b00 	mov.w	fp, #0
 800c7e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ec:	9306      	str	r3, [sp, #24]
 800c7ee:	e015      	b.n	800c81c <_printf_float+0x324>
 800c7f0:	7fefffff 	.word	0x7fefffff
 800c7f4:	08010ae8 	.word	0x08010ae8
 800c7f8:	08010ae4 	.word	0x08010ae4
 800c7fc:	08010af0 	.word	0x08010af0
 800c800:	08010aec 	.word	0x08010aec
 800c804:	08010af4 	.word	0x08010af4
 800c808:	2301      	movs	r3, #1
 800c80a:	9a06      	ldr	r2, [sp, #24]
 800c80c:	4631      	mov	r1, r6
 800c80e:	4628      	mov	r0, r5
 800c810:	47b8      	blx	r7
 800c812:	3001      	adds	r0, #1
 800c814:	f43f aecd 	beq.w	800c5b2 <_printf_float+0xba>
 800c818:	f10b 0b01 	add.w	fp, fp, #1
 800c81c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c820:	ebaa 0309 	sub.w	r3, sl, r9
 800c824:	455b      	cmp	r3, fp
 800c826:	dcef      	bgt.n	800c808 <_printf_float+0x310>
 800c828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c82c:	429a      	cmp	r2, r3
 800c82e:	44d0      	add	r8, sl
 800c830:	db15      	blt.n	800c85e <_printf_float+0x366>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	07da      	lsls	r2, r3, #31
 800c836:	d412      	bmi.n	800c85e <_printf_float+0x366>
 800c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c83a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c83c:	eba3 020a 	sub.w	r2, r3, sl
 800c840:	eba3 0a01 	sub.w	sl, r3, r1
 800c844:	4592      	cmp	sl, r2
 800c846:	bfa8      	it	ge
 800c848:	4692      	movge	sl, r2
 800c84a:	f1ba 0f00 	cmp.w	sl, #0
 800c84e:	dc0e      	bgt.n	800c86e <_printf_float+0x376>
 800c850:	f04f 0800 	mov.w	r8, #0
 800c854:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c858:	f104 091a 	add.w	r9, r4, #26
 800c85c:	e019      	b.n	800c892 <_printf_float+0x39a>
 800c85e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c862:	4631      	mov	r1, r6
 800c864:	4628      	mov	r0, r5
 800c866:	47b8      	blx	r7
 800c868:	3001      	adds	r0, #1
 800c86a:	d1e5      	bne.n	800c838 <_printf_float+0x340>
 800c86c:	e6a1      	b.n	800c5b2 <_printf_float+0xba>
 800c86e:	4653      	mov	r3, sl
 800c870:	4642      	mov	r2, r8
 800c872:	4631      	mov	r1, r6
 800c874:	4628      	mov	r0, r5
 800c876:	47b8      	blx	r7
 800c878:	3001      	adds	r0, #1
 800c87a:	d1e9      	bne.n	800c850 <_printf_float+0x358>
 800c87c:	e699      	b.n	800c5b2 <_printf_float+0xba>
 800c87e:	2301      	movs	r3, #1
 800c880:	464a      	mov	r2, r9
 800c882:	4631      	mov	r1, r6
 800c884:	4628      	mov	r0, r5
 800c886:	47b8      	blx	r7
 800c888:	3001      	adds	r0, #1
 800c88a:	f43f ae92 	beq.w	800c5b2 <_printf_float+0xba>
 800c88e:	f108 0801 	add.w	r8, r8, #1
 800c892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c896:	1a9b      	subs	r3, r3, r2
 800c898:	eba3 030a 	sub.w	r3, r3, sl
 800c89c:	4543      	cmp	r3, r8
 800c89e:	dcee      	bgt.n	800c87e <_printf_float+0x386>
 800c8a0:	e74a      	b.n	800c738 <_printf_float+0x240>
 800c8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8a4:	2a01      	cmp	r2, #1
 800c8a6:	dc01      	bgt.n	800c8ac <_printf_float+0x3b4>
 800c8a8:	07db      	lsls	r3, r3, #31
 800c8aa:	d53a      	bpl.n	800c922 <_printf_float+0x42a>
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	4642      	mov	r2, r8
 800c8b0:	4631      	mov	r1, r6
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	47b8      	blx	r7
 800c8b6:	3001      	adds	r0, #1
 800c8b8:	f43f ae7b 	beq.w	800c5b2 <_printf_float+0xba>
 800c8bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c0:	4631      	mov	r1, r6
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	f108 0801 	add.w	r8, r8, #1
 800c8cc:	f43f ae71 	beq.w	800c5b2 <_printf_float+0xba>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f103 3aff 	add.w	sl, r3, #4294967295
 800c8d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f7f4 f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8e2:	b9c8      	cbnz	r0, 800c918 <_printf_float+0x420>
 800c8e4:	4653      	mov	r3, sl
 800c8e6:	4642      	mov	r2, r8
 800c8e8:	4631      	mov	r1, r6
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	47b8      	blx	r7
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	d10e      	bne.n	800c910 <_printf_float+0x418>
 800c8f2:	e65e      	b.n	800c5b2 <_printf_float+0xba>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	4631      	mov	r1, r6
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	47b8      	blx	r7
 800c8fe:	3001      	adds	r0, #1
 800c900:	f43f ae57 	beq.w	800c5b2 <_printf_float+0xba>
 800c904:	f108 0801 	add.w	r8, r8, #1
 800c908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c90a:	3b01      	subs	r3, #1
 800c90c:	4543      	cmp	r3, r8
 800c90e:	dcf1      	bgt.n	800c8f4 <_printf_float+0x3fc>
 800c910:	464b      	mov	r3, r9
 800c912:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c916:	e6de      	b.n	800c6d6 <_printf_float+0x1de>
 800c918:	f04f 0800 	mov.w	r8, #0
 800c91c:	f104 0a1a 	add.w	sl, r4, #26
 800c920:	e7f2      	b.n	800c908 <_printf_float+0x410>
 800c922:	2301      	movs	r3, #1
 800c924:	e7df      	b.n	800c8e6 <_printf_float+0x3ee>
 800c926:	2301      	movs	r3, #1
 800c928:	464a      	mov	r2, r9
 800c92a:	4631      	mov	r1, r6
 800c92c:	4628      	mov	r0, r5
 800c92e:	47b8      	blx	r7
 800c930:	3001      	adds	r0, #1
 800c932:	f43f ae3e 	beq.w	800c5b2 <_printf_float+0xba>
 800c936:	f108 0801 	add.w	r8, r8, #1
 800c93a:	68e3      	ldr	r3, [r4, #12]
 800c93c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c93e:	1a9b      	subs	r3, r3, r2
 800c940:	4543      	cmp	r3, r8
 800c942:	dcf0      	bgt.n	800c926 <_printf_float+0x42e>
 800c944:	e6fc      	b.n	800c740 <_printf_float+0x248>
 800c946:	f04f 0800 	mov.w	r8, #0
 800c94a:	f104 0919 	add.w	r9, r4, #25
 800c94e:	e7f4      	b.n	800c93a <_printf_float+0x442>
 800c950:	2900      	cmp	r1, #0
 800c952:	f43f ae8b 	beq.w	800c66c <_printf_float+0x174>
 800c956:	2300      	movs	r3, #0
 800c958:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c95c:	ab09      	add	r3, sp, #36	; 0x24
 800c95e:	9300      	str	r3, [sp, #0]
 800c960:	ec49 8b10 	vmov	d0, r8, r9
 800c964:	6022      	str	r2, [r4, #0]
 800c966:	f8cd a004 	str.w	sl, [sp, #4]
 800c96a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c96e:	4628      	mov	r0, r5
 800c970:	f7ff fd2d 	bl	800c3ce <__cvt>
 800c974:	4680      	mov	r8, r0
 800c976:	e648      	b.n	800c60a <_printf_float+0x112>

0800c978 <_printf_common>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	4691      	mov	r9, r2
 800c97e:	461f      	mov	r7, r3
 800c980:	688a      	ldr	r2, [r1, #8]
 800c982:	690b      	ldr	r3, [r1, #16]
 800c984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c988:	4293      	cmp	r3, r2
 800c98a:	bfb8      	it	lt
 800c98c:	4613      	movlt	r3, r2
 800c98e:	f8c9 3000 	str.w	r3, [r9]
 800c992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c996:	4606      	mov	r6, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	b112      	cbz	r2, 800c9a2 <_printf_common+0x2a>
 800c99c:	3301      	adds	r3, #1
 800c99e:	f8c9 3000 	str.w	r3, [r9]
 800c9a2:	6823      	ldr	r3, [r4, #0]
 800c9a4:	0699      	lsls	r1, r3, #26
 800c9a6:	bf42      	ittt	mi
 800c9a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c9ac:	3302      	addmi	r3, #2
 800c9ae:	f8c9 3000 	strmi.w	r3, [r9]
 800c9b2:	6825      	ldr	r5, [r4, #0]
 800c9b4:	f015 0506 	ands.w	r5, r5, #6
 800c9b8:	d107      	bne.n	800c9ca <_printf_common+0x52>
 800c9ba:	f104 0a19 	add.w	sl, r4, #25
 800c9be:	68e3      	ldr	r3, [r4, #12]
 800c9c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c9c4:	1a9b      	subs	r3, r3, r2
 800c9c6:	42ab      	cmp	r3, r5
 800c9c8:	dc28      	bgt.n	800ca1c <_printf_common+0xa4>
 800c9ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c9ce:	6822      	ldr	r2, [r4, #0]
 800c9d0:	3300      	adds	r3, #0
 800c9d2:	bf18      	it	ne
 800c9d4:	2301      	movne	r3, #1
 800c9d6:	0692      	lsls	r2, r2, #26
 800c9d8:	d42d      	bmi.n	800ca36 <_printf_common+0xbe>
 800c9da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9de:	4639      	mov	r1, r7
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	47c0      	blx	r8
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	d020      	beq.n	800ca2a <_printf_common+0xb2>
 800c9e8:	6823      	ldr	r3, [r4, #0]
 800c9ea:	68e5      	ldr	r5, [r4, #12]
 800c9ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c9f0:	f003 0306 	and.w	r3, r3, #6
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	bf08      	it	eq
 800c9f8:	1aad      	subeq	r5, r5, r2
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	6922      	ldr	r2, [r4, #16]
 800c9fe:	bf0c      	ite	eq
 800ca00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca04:	2500      	movne	r5, #0
 800ca06:	4293      	cmp	r3, r2
 800ca08:	bfc4      	itt	gt
 800ca0a:	1a9b      	subgt	r3, r3, r2
 800ca0c:	18ed      	addgt	r5, r5, r3
 800ca0e:	f04f 0900 	mov.w	r9, #0
 800ca12:	341a      	adds	r4, #26
 800ca14:	454d      	cmp	r5, r9
 800ca16:	d11a      	bne.n	800ca4e <_printf_common+0xd6>
 800ca18:	2000      	movs	r0, #0
 800ca1a:	e008      	b.n	800ca2e <_printf_common+0xb6>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	4652      	mov	r2, sl
 800ca20:	4639      	mov	r1, r7
 800ca22:	4630      	mov	r0, r6
 800ca24:	47c0      	blx	r8
 800ca26:	3001      	adds	r0, #1
 800ca28:	d103      	bne.n	800ca32 <_printf_common+0xba>
 800ca2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca32:	3501      	adds	r5, #1
 800ca34:	e7c3      	b.n	800c9be <_printf_common+0x46>
 800ca36:	18e1      	adds	r1, r4, r3
 800ca38:	1c5a      	adds	r2, r3, #1
 800ca3a:	2030      	movs	r0, #48	; 0x30
 800ca3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca40:	4422      	add	r2, r4
 800ca42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca4a:	3302      	adds	r3, #2
 800ca4c:	e7c5      	b.n	800c9da <_printf_common+0x62>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4622      	mov	r2, r4
 800ca52:	4639      	mov	r1, r7
 800ca54:	4630      	mov	r0, r6
 800ca56:	47c0      	blx	r8
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d0e6      	beq.n	800ca2a <_printf_common+0xb2>
 800ca5c:	f109 0901 	add.w	r9, r9, #1
 800ca60:	e7d8      	b.n	800ca14 <_printf_common+0x9c>
	...

0800ca64 <_printf_i>:
 800ca64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ca6c:	460c      	mov	r4, r1
 800ca6e:	7e09      	ldrb	r1, [r1, #24]
 800ca70:	b085      	sub	sp, #20
 800ca72:	296e      	cmp	r1, #110	; 0x6e
 800ca74:	4617      	mov	r7, r2
 800ca76:	4606      	mov	r6, r0
 800ca78:	4698      	mov	r8, r3
 800ca7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca7c:	f000 80b3 	beq.w	800cbe6 <_printf_i+0x182>
 800ca80:	d822      	bhi.n	800cac8 <_printf_i+0x64>
 800ca82:	2963      	cmp	r1, #99	; 0x63
 800ca84:	d036      	beq.n	800caf4 <_printf_i+0x90>
 800ca86:	d80a      	bhi.n	800ca9e <_printf_i+0x3a>
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	f000 80b9 	beq.w	800cc00 <_printf_i+0x19c>
 800ca8e:	2958      	cmp	r1, #88	; 0x58
 800ca90:	f000 8083 	beq.w	800cb9a <_printf_i+0x136>
 800ca94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ca9c:	e032      	b.n	800cb04 <_printf_i+0xa0>
 800ca9e:	2964      	cmp	r1, #100	; 0x64
 800caa0:	d001      	beq.n	800caa6 <_printf_i+0x42>
 800caa2:	2969      	cmp	r1, #105	; 0x69
 800caa4:	d1f6      	bne.n	800ca94 <_printf_i+0x30>
 800caa6:	6820      	ldr	r0, [r4, #0]
 800caa8:	6813      	ldr	r3, [r2, #0]
 800caaa:	0605      	lsls	r5, r0, #24
 800caac:	f103 0104 	add.w	r1, r3, #4
 800cab0:	d52a      	bpl.n	800cb08 <_printf_i+0xa4>
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	da03      	bge.n	800cac2 <_printf_i+0x5e>
 800caba:	222d      	movs	r2, #45	; 0x2d
 800cabc:	425b      	negs	r3, r3
 800cabe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cac2:	486f      	ldr	r0, [pc, #444]	; (800cc80 <_printf_i+0x21c>)
 800cac4:	220a      	movs	r2, #10
 800cac6:	e039      	b.n	800cb3c <_printf_i+0xd8>
 800cac8:	2973      	cmp	r1, #115	; 0x73
 800caca:	f000 809d 	beq.w	800cc08 <_printf_i+0x1a4>
 800cace:	d808      	bhi.n	800cae2 <_printf_i+0x7e>
 800cad0:	296f      	cmp	r1, #111	; 0x6f
 800cad2:	d020      	beq.n	800cb16 <_printf_i+0xb2>
 800cad4:	2970      	cmp	r1, #112	; 0x70
 800cad6:	d1dd      	bne.n	800ca94 <_printf_i+0x30>
 800cad8:	6823      	ldr	r3, [r4, #0]
 800cada:	f043 0320 	orr.w	r3, r3, #32
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	e003      	b.n	800caea <_printf_i+0x86>
 800cae2:	2975      	cmp	r1, #117	; 0x75
 800cae4:	d017      	beq.n	800cb16 <_printf_i+0xb2>
 800cae6:	2978      	cmp	r1, #120	; 0x78
 800cae8:	d1d4      	bne.n	800ca94 <_printf_i+0x30>
 800caea:	2378      	movs	r3, #120	; 0x78
 800caec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800caf0:	4864      	ldr	r0, [pc, #400]	; (800cc84 <_printf_i+0x220>)
 800caf2:	e055      	b.n	800cba0 <_printf_i+0x13c>
 800caf4:	6813      	ldr	r3, [r2, #0]
 800caf6:	1d19      	adds	r1, r3, #4
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6011      	str	r1, [r2, #0]
 800cafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb04:	2301      	movs	r3, #1
 800cb06:	e08c      	b.n	800cc22 <_printf_i+0x1be>
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6011      	str	r1, [r2, #0]
 800cb0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb10:	bf18      	it	ne
 800cb12:	b21b      	sxthne	r3, r3
 800cb14:	e7cf      	b.n	800cab6 <_printf_i+0x52>
 800cb16:	6813      	ldr	r3, [r2, #0]
 800cb18:	6825      	ldr	r5, [r4, #0]
 800cb1a:	1d18      	adds	r0, r3, #4
 800cb1c:	6010      	str	r0, [r2, #0]
 800cb1e:	0628      	lsls	r0, r5, #24
 800cb20:	d501      	bpl.n	800cb26 <_printf_i+0xc2>
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	e002      	b.n	800cb2c <_printf_i+0xc8>
 800cb26:	0668      	lsls	r0, r5, #25
 800cb28:	d5fb      	bpl.n	800cb22 <_printf_i+0xbe>
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	4854      	ldr	r0, [pc, #336]	; (800cc80 <_printf_i+0x21c>)
 800cb2e:	296f      	cmp	r1, #111	; 0x6f
 800cb30:	bf14      	ite	ne
 800cb32:	220a      	movne	r2, #10
 800cb34:	2208      	moveq	r2, #8
 800cb36:	2100      	movs	r1, #0
 800cb38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb3c:	6865      	ldr	r5, [r4, #4]
 800cb3e:	60a5      	str	r5, [r4, #8]
 800cb40:	2d00      	cmp	r5, #0
 800cb42:	f2c0 8095 	blt.w	800cc70 <_printf_i+0x20c>
 800cb46:	6821      	ldr	r1, [r4, #0]
 800cb48:	f021 0104 	bic.w	r1, r1, #4
 800cb4c:	6021      	str	r1, [r4, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d13d      	bne.n	800cbce <_printf_i+0x16a>
 800cb52:	2d00      	cmp	r5, #0
 800cb54:	f040 808e 	bne.w	800cc74 <_printf_i+0x210>
 800cb58:	4665      	mov	r5, ip
 800cb5a:	2a08      	cmp	r2, #8
 800cb5c:	d10b      	bne.n	800cb76 <_printf_i+0x112>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	07db      	lsls	r3, r3, #31
 800cb62:	d508      	bpl.n	800cb76 <_printf_i+0x112>
 800cb64:	6923      	ldr	r3, [r4, #16]
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	bfde      	ittt	le
 800cb6c:	2330      	movle	r3, #48	; 0x30
 800cb6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb72:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb76:	ebac 0305 	sub.w	r3, ip, r5
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	f8cd 8000 	str.w	r8, [sp]
 800cb80:	463b      	mov	r3, r7
 800cb82:	aa03      	add	r2, sp, #12
 800cb84:	4621      	mov	r1, r4
 800cb86:	4630      	mov	r0, r6
 800cb88:	f7ff fef6 	bl	800c978 <_printf_common>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d14d      	bne.n	800cc2c <_printf_i+0x1c8>
 800cb90:	f04f 30ff 	mov.w	r0, #4294967295
 800cb94:	b005      	add	sp, #20
 800cb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb9a:	4839      	ldr	r0, [pc, #228]	; (800cc80 <_printf_i+0x21c>)
 800cb9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cba0:	6813      	ldr	r3, [r2, #0]
 800cba2:	6821      	ldr	r1, [r4, #0]
 800cba4:	1d1d      	adds	r5, r3, #4
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	6015      	str	r5, [r2, #0]
 800cbaa:	060a      	lsls	r2, r1, #24
 800cbac:	d50b      	bpl.n	800cbc6 <_printf_i+0x162>
 800cbae:	07ca      	lsls	r2, r1, #31
 800cbb0:	bf44      	itt	mi
 800cbb2:	f041 0120 	orrmi.w	r1, r1, #32
 800cbb6:	6021      	strmi	r1, [r4, #0]
 800cbb8:	b91b      	cbnz	r3, 800cbc2 <_printf_i+0x15e>
 800cbba:	6822      	ldr	r2, [r4, #0]
 800cbbc:	f022 0220 	bic.w	r2, r2, #32
 800cbc0:	6022      	str	r2, [r4, #0]
 800cbc2:	2210      	movs	r2, #16
 800cbc4:	e7b7      	b.n	800cb36 <_printf_i+0xd2>
 800cbc6:	064d      	lsls	r5, r1, #25
 800cbc8:	bf48      	it	mi
 800cbca:	b29b      	uxthmi	r3, r3
 800cbcc:	e7ef      	b.n	800cbae <_printf_i+0x14a>
 800cbce:	4665      	mov	r5, ip
 800cbd0:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbd4:	fb02 3311 	mls	r3, r2, r1, r3
 800cbd8:	5cc3      	ldrb	r3, [r0, r3]
 800cbda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cbde:	460b      	mov	r3, r1
 800cbe0:	2900      	cmp	r1, #0
 800cbe2:	d1f5      	bne.n	800cbd0 <_printf_i+0x16c>
 800cbe4:	e7b9      	b.n	800cb5a <_printf_i+0xf6>
 800cbe6:	6813      	ldr	r3, [r2, #0]
 800cbe8:	6825      	ldr	r5, [r4, #0]
 800cbea:	6961      	ldr	r1, [r4, #20]
 800cbec:	1d18      	adds	r0, r3, #4
 800cbee:	6010      	str	r0, [r2, #0]
 800cbf0:	0628      	lsls	r0, r5, #24
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	d501      	bpl.n	800cbfa <_printf_i+0x196>
 800cbf6:	6019      	str	r1, [r3, #0]
 800cbf8:	e002      	b.n	800cc00 <_printf_i+0x19c>
 800cbfa:	066a      	lsls	r2, r5, #25
 800cbfc:	d5fb      	bpl.n	800cbf6 <_printf_i+0x192>
 800cbfe:	8019      	strh	r1, [r3, #0]
 800cc00:	2300      	movs	r3, #0
 800cc02:	6123      	str	r3, [r4, #16]
 800cc04:	4665      	mov	r5, ip
 800cc06:	e7b9      	b.n	800cb7c <_printf_i+0x118>
 800cc08:	6813      	ldr	r3, [r2, #0]
 800cc0a:	1d19      	adds	r1, r3, #4
 800cc0c:	6011      	str	r1, [r2, #0]
 800cc0e:	681d      	ldr	r5, [r3, #0]
 800cc10:	6862      	ldr	r2, [r4, #4]
 800cc12:	2100      	movs	r1, #0
 800cc14:	4628      	mov	r0, r5
 800cc16:	f7f3 fae3 	bl	80001e0 <memchr>
 800cc1a:	b108      	cbz	r0, 800cc20 <_printf_i+0x1bc>
 800cc1c:	1b40      	subs	r0, r0, r5
 800cc1e:	6060      	str	r0, [r4, #4]
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	2300      	movs	r3, #0
 800cc26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc2a:	e7a7      	b.n	800cb7c <_printf_i+0x118>
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	462a      	mov	r2, r5
 800cc30:	4639      	mov	r1, r7
 800cc32:	4630      	mov	r0, r6
 800cc34:	47c0      	blx	r8
 800cc36:	3001      	adds	r0, #1
 800cc38:	d0aa      	beq.n	800cb90 <_printf_i+0x12c>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	079b      	lsls	r3, r3, #30
 800cc3e:	d413      	bmi.n	800cc68 <_printf_i+0x204>
 800cc40:	68e0      	ldr	r0, [r4, #12]
 800cc42:	9b03      	ldr	r3, [sp, #12]
 800cc44:	4298      	cmp	r0, r3
 800cc46:	bfb8      	it	lt
 800cc48:	4618      	movlt	r0, r3
 800cc4a:	e7a3      	b.n	800cb94 <_printf_i+0x130>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	464a      	mov	r2, r9
 800cc50:	4639      	mov	r1, r7
 800cc52:	4630      	mov	r0, r6
 800cc54:	47c0      	blx	r8
 800cc56:	3001      	adds	r0, #1
 800cc58:	d09a      	beq.n	800cb90 <_printf_i+0x12c>
 800cc5a:	3501      	adds	r5, #1
 800cc5c:	68e3      	ldr	r3, [r4, #12]
 800cc5e:	9a03      	ldr	r2, [sp, #12]
 800cc60:	1a9b      	subs	r3, r3, r2
 800cc62:	42ab      	cmp	r3, r5
 800cc64:	dcf2      	bgt.n	800cc4c <_printf_i+0x1e8>
 800cc66:	e7eb      	b.n	800cc40 <_printf_i+0x1dc>
 800cc68:	2500      	movs	r5, #0
 800cc6a:	f104 0919 	add.w	r9, r4, #25
 800cc6e:	e7f5      	b.n	800cc5c <_printf_i+0x1f8>
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d1ac      	bne.n	800cbce <_printf_i+0x16a>
 800cc74:	7803      	ldrb	r3, [r0, #0]
 800cc76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc7e:	e76c      	b.n	800cb5a <_printf_i+0xf6>
 800cc80:	08010af6 	.word	0x08010af6
 800cc84:	08010b07 	.word	0x08010b07

0800cc88 <_scanf_float>:
 800cc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc8c:	469a      	mov	sl, r3
 800cc8e:	688b      	ldr	r3, [r1, #8]
 800cc90:	4616      	mov	r6, r2
 800cc92:	1e5a      	subs	r2, r3, #1
 800cc94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc98:	b087      	sub	sp, #28
 800cc9a:	bf83      	ittte	hi
 800cc9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cca0:	189b      	addhi	r3, r3, r2
 800cca2:	9301      	strhi	r3, [sp, #4]
 800cca4:	2300      	movls	r3, #0
 800cca6:	bf86      	itte	hi
 800cca8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ccac:	608b      	strhi	r3, [r1, #8]
 800ccae:	9301      	strls	r3, [sp, #4]
 800ccb0:	680b      	ldr	r3, [r1, #0]
 800ccb2:	4688      	mov	r8, r1
 800ccb4:	f04f 0b00 	mov.w	fp, #0
 800ccb8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ccbc:	f848 3b1c 	str.w	r3, [r8], #28
 800ccc0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	4645      	mov	r5, r8
 800ccca:	465a      	mov	r2, fp
 800cccc:	46d9      	mov	r9, fp
 800ccce:	f8cd b008 	str.w	fp, [sp, #8]
 800ccd2:	68a1      	ldr	r1, [r4, #8]
 800ccd4:	b181      	cbz	r1, 800ccf8 <_scanf_float+0x70>
 800ccd6:	6833      	ldr	r3, [r6, #0]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b49      	cmp	r3, #73	; 0x49
 800ccdc:	d071      	beq.n	800cdc2 <_scanf_float+0x13a>
 800ccde:	d84d      	bhi.n	800cd7c <_scanf_float+0xf4>
 800cce0:	2b39      	cmp	r3, #57	; 0x39
 800cce2:	d840      	bhi.n	800cd66 <_scanf_float+0xde>
 800cce4:	2b31      	cmp	r3, #49	; 0x31
 800cce6:	f080 8088 	bcs.w	800cdfa <_scanf_float+0x172>
 800ccea:	2b2d      	cmp	r3, #45	; 0x2d
 800ccec:	f000 8090 	beq.w	800ce10 <_scanf_float+0x188>
 800ccf0:	d815      	bhi.n	800cd1e <_scanf_float+0x96>
 800ccf2:	2b2b      	cmp	r3, #43	; 0x2b
 800ccf4:	f000 808c 	beq.w	800ce10 <_scanf_float+0x188>
 800ccf8:	f1b9 0f00 	cmp.w	r9, #0
 800ccfc:	d003      	beq.n	800cd06 <_scanf_float+0x7e>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	3a01      	subs	r2, #1
 800cd08:	2a01      	cmp	r2, #1
 800cd0a:	f200 80ea 	bhi.w	800cee2 <_scanf_float+0x25a>
 800cd0e:	4545      	cmp	r5, r8
 800cd10:	f200 80dc 	bhi.w	800cecc <_scanf_float+0x244>
 800cd14:	2601      	movs	r6, #1
 800cd16:	4630      	mov	r0, r6
 800cd18:	b007      	add	sp, #28
 800cd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1e:	2b2e      	cmp	r3, #46	; 0x2e
 800cd20:	f000 809f 	beq.w	800ce62 <_scanf_float+0x1da>
 800cd24:	2b30      	cmp	r3, #48	; 0x30
 800cd26:	d1e7      	bne.n	800ccf8 <_scanf_float+0x70>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800cd2e:	d064      	beq.n	800cdfa <_scanf_float+0x172>
 800cd30:	9b01      	ldr	r3, [sp, #4]
 800cd32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cd36:	6020      	str	r0, [r4, #0]
 800cd38:	f109 0901 	add.w	r9, r9, #1
 800cd3c:	b11b      	cbz	r3, 800cd46 <_scanf_float+0xbe>
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	3101      	adds	r1, #1
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	60a1      	str	r1, [r4, #8]
 800cd46:	68a3      	ldr	r3, [r4, #8]
 800cd48:	3b01      	subs	r3, #1
 800cd4a:	60a3      	str	r3, [r4, #8]
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	6873      	ldr	r3, [r6, #4]
 800cd54:	3b01      	subs	r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	6073      	str	r3, [r6, #4]
 800cd5a:	f340 80ac 	ble.w	800ceb6 <_scanf_float+0x22e>
 800cd5e:	6833      	ldr	r3, [r6, #0]
 800cd60:	3301      	adds	r3, #1
 800cd62:	6033      	str	r3, [r6, #0]
 800cd64:	e7b5      	b.n	800ccd2 <_scanf_float+0x4a>
 800cd66:	2b45      	cmp	r3, #69	; 0x45
 800cd68:	f000 8085 	beq.w	800ce76 <_scanf_float+0x1ee>
 800cd6c:	2b46      	cmp	r3, #70	; 0x46
 800cd6e:	d06a      	beq.n	800ce46 <_scanf_float+0x1be>
 800cd70:	2b41      	cmp	r3, #65	; 0x41
 800cd72:	d1c1      	bne.n	800ccf8 <_scanf_float+0x70>
 800cd74:	2a01      	cmp	r2, #1
 800cd76:	d1bf      	bne.n	800ccf8 <_scanf_float+0x70>
 800cd78:	2202      	movs	r2, #2
 800cd7a:	e046      	b.n	800ce0a <_scanf_float+0x182>
 800cd7c:	2b65      	cmp	r3, #101	; 0x65
 800cd7e:	d07a      	beq.n	800ce76 <_scanf_float+0x1ee>
 800cd80:	d818      	bhi.n	800cdb4 <_scanf_float+0x12c>
 800cd82:	2b54      	cmp	r3, #84	; 0x54
 800cd84:	d066      	beq.n	800ce54 <_scanf_float+0x1cc>
 800cd86:	d811      	bhi.n	800cdac <_scanf_float+0x124>
 800cd88:	2b4e      	cmp	r3, #78	; 0x4e
 800cd8a:	d1b5      	bne.n	800ccf8 <_scanf_float+0x70>
 800cd8c:	2a00      	cmp	r2, #0
 800cd8e:	d146      	bne.n	800ce1e <_scanf_float+0x196>
 800cd90:	f1b9 0f00 	cmp.w	r9, #0
 800cd94:	d145      	bne.n	800ce22 <_scanf_float+0x19a>
 800cd96:	6821      	ldr	r1, [r4, #0]
 800cd98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cd9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cda0:	d13f      	bne.n	800ce22 <_scanf_float+0x19a>
 800cda2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cda6:	6021      	str	r1, [r4, #0]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	e02e      	b.n	800ce0a <_scanf_float+0x182>
 800cdac:	2b59      	cmp	r3, #89	; 0x59
 800cdae:	d01e      	beq.n	800cdee <_scanf_float+0x166>
 800cdb0:	2b61      	cmp	r3, #97	; 0x61
 800cdb2:	e7de      	b.n	800cd72 <_scanf_float+0xea>
 800cdb4:	2b6e      	cmp	r3, #110	; 0x6e
 800cdb6:	d0e9      	beq.n	800cd8c <_scanf_float+0x104>
 800cdb8:	d815      	bhi.n	800cde6 <_scanf_float+0x15e>
 800cdba:	2b66      	cmp	r3, #102	; 0x66
 800cdbc:	d043      	beq.n	800ce46 <_scanf_float+0x1be>
 800cdbe:	2b69      	cmp	r3, #105	; 0x69
 800cdc0:	d19a      	bne.n	800ccf8 <_scanf_float+0x70>
 800cdc2:	f1bb 0f00 	cmp.w	fp, #0
 800cdc6:	d138      	bne.n	800ce3a <_scanf_float+0x1b2>
 800cdc8:	f1b9 0f00 	cmp.w	r9, #0
 800cdcc:	d197      	bne.n	800ccfe <_scanf_float+0x76>
 800cdce:	6821      	ldr	r1, [r4, #0]
 800cdd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cdd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cdd8:	d195      	bne.n	800cd06 <_scanf_float+0x7e>
 800cdda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cdde:	6021      	str	r1, [r4, #0]
 800cde0:	f04f 0b01 	mov.w	fp, #1
 800cde4:	e011      	b.n	800ce0a <_scanf_float+0x182>
 800cde6:	2b74      	cmp	r3, #116	; 0x74
 800cde8:	d034      	beq.n	800ce54 <_scanf_float+0x1cc>
 800cdea:	2b79      	cmp	r3, #121	; 0x79
 800cdec:	d184      	bne.n	800ccf8 <_scanf_float+0x70>
 800cdee:	f1bb 0f07 	cmp.w	fp, #7
 800cdf2:	d181      	bne.n	800ccf8 <_scanf_float+0x70>
 800cdf4:	f04f 0b08 	mov.w	fp, #8
 800cdf8:	e007      	b.n	800ce0a <_scanf_float+0x182>
 800cdfa:	eb12 0f0b 	cmn.w	r2, fp
 800cdfe:	f47f af7b 	bne.w	800ccf8 <_scanf_float+0x70>
 800ce02:	6821      	ldr	r1, [r4, #0]
 800ce04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ce08:	6021      	str	r1, [r4, #0]
 800ce0a:	702b      	strb	r3, [r5, #0]
 800ce0c:	3501      	adds	r5, #1
 800ce0e:	e79a      	b.n	800cd46 <_scanf_float+0xbe>
 800ce10:	6821      	ldr	r1, [r4, #0]
 800ce12:	0608      	lsls	r0, r1, #24
 800ce14:	f57f af70 	bpl.w	800ccf8 <_scanf_float+0x70>
 800ce18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ce1c:	e7f4      	b.n	800ce08 <_scanf_float+0x180>
 800ce1e:	2a02      	cmp	r2, #2
 800ce20:	d047      	beq.n	800ceb2 <_scanf_float+0x22a>
 800ce22:	f1bb 0f01 	cmp.w	fp, #1
 800ce26:	d003      	beq.n	800ce30 <_scanf_float+0x1a8>
 800ce28:	f1bb 0f04 	cmp.w	fp, #4
 800ce2c:	f47f af64 	bne.w	800ccf8 <_scanf_float+0x70>
 800ce30:	f10b 0b01 	add.w	fp, fp, #1
 800ce34:	fa5f fb8b 	uxtb.w	fp, fp
 800ce38:	e7e7      	b.n	800ce0a <_scanf_float+0x182>
 800ce3a:	f1bb 0f03 	cmp.w	fp, #3
 800ce3e:	d0f7      	beq.n	800ce30 <_scanf_float+0x1a8>
 800ce40:	f1bb 0f05 	cmp.w	fp, #5
 800ce44:	e7f2      	b.n	800ce2c <_scanf_float+0x1a4>
 800ce46:	f1bb 0f02 	cmp.w	fp, #2
 800ce4a:	f47f af55 	bne.w	800ccf8 <_scanf_float+0x70>
 800ce4e:	f04f 0b03 	mov.w	fp, #3
 800ce52:	e7da      	b.n	800ce0a <_scanf_float+0x182>
 800ce54:	f1bb 0f06 	cmp.w	fp, #6
 800ce58:	f47f af4e 	bne.w	800ccf8 <_scanf_float+0x70>
 800ce5c:	f04f 0b07 	mov.w	fp, #7
 800ce60:	e7d3      	b.n	800ce0a <_scanf_float+0x182>
 800ce62:	6821      	ldr	r1, [r4, #0]
 800ce64:	0588      	lsls	r0, r1, #22
 800ce66:	f57f af47 	bpl.w	800ccf8 <_scanf_float+0x70>
 800ce6a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ce6e:	6021      	str	r1, [r4, #0]
 800ce70:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce74:	e7c9      	b.n	800ce0a <_scanf_float+0x182>
 800ce76:	6821      	ldr	r1, [r4, #0]
 800ce78:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ce7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ce80:	d006      	beq.n	800ce90 <_scanf_float+0x208>
 800ce82:	0548      	lsls	r0, r1, #21
 800ce84:	f57f af38 	bpl.w	800ccf8 <_scanf_float+0x70>
 800ce88:	f1b9 0f00 	cmp.w	r9, #0
 800ce8c:	f43f af3b 	beq.w	800cd06 <_scanf_float+0x7e>
 800ce90:	0588      	lsls	r0, r1, #22
 800ce92:	bf58      	it	pl
 800ce94:	9802      	ldrpl	r0, [sp, #8]
 800ce96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ce9a:	bf58      	it	pl
 800ce9c:	eba9 0000 	subpl.w	r0, r9, r0
 800cea0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cea4:	bf58      	it	pl
 800cea6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ceaa:	6021      	str	r1, [r4, #0]
 800ceac:	f04f 0900 	mov.w	r9, #0
 800ceb0:	e7ab      	b.n	800ce0a <_scanf_float+0x182>
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	e7a9      	b.n	800ce0a <_scanf_float+0x182>
 800ceb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ceba:	9205      	str	r2, [sp, #20]
 800cebc:	4631      	mov	r1, r6
 800cebe:	4638      	mov	r0, r7
 800cec0:	4798      	blx	r3
 800cec2:	9a05      	ldr	r2, [sp, #20]
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f43f af04 	beq.w	800ccd2 <_scanf_float+0x4a>
 800ceca:	e715      	b.n	800ccf8 <_scanf_float+0x70>
 800cecc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ced0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ced4:	4632      	mov	r2, r6
 800ced6:	4638      	mov	r0, r7
 800ced8:	4798      	blx	r3
 800ceda:	6923      	ldr	r3, [r4, #16]
 800cedc:	3b01      	subs	r3, #1
 800cede:	6123      	str	r3, [r4, #16]
 800cee0:	e715      	b.n	800cd0e <_scanf_float+0x86>
 800cee2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cee6:	2b06      	cmp	r3, #6
 800cee8:	d80a      	bhi.n	800cf00 <_scanf_float+0x278>
 800ceea:	f1bb 0f02 	cmp.w	fp, #2
 800ceee:	d968      	bls.n	800cfc2 <_scanf_float+0x33a>
 800cef0:	f1ab 0b03 	sub.w	fp, fp, #3
 800cef4:	fa5f fb8b 	uxtb.w	fp, fp
 800cef8:	eba5 0b0b 	sub.w	fp, r5, fp
 800cefc:	455d      	cmp	r5, fp
 800cefe:	d14b      	bne.n	800cf98 <_scanf_float+0x310>
 800cf00:	6823      	ldr	r3, [r4, #0]
 800cf02:	05da      	lsls	r2, r3, #23
 800cf04:	d51f      	bpl.n	800cf46 <_scanf_float+0x2be>
 800cf06:	055b      	lsls	r3, r3, #21
 800cf08:	d468      	bmi.n	800cfdc <_scanf_float+0x354>
 800cf0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cf0e:	6923      	ldr	r3, [r4, #16]
 800cf10:	2965      	cmp	r1, #101	; 0x65
 800cf12:	f103 33ff 	add.w	r3, r3, #4294967295
 800cf16:	f105 3bff 	add.w	fp, r5, #4294967295
 800cf1a:	6123      	str	r3, [r4, #16]
 800cf1c:	d00d      	beq.n	800cf3a <_scanf_float+0x2b2>
 800cf1e:	2945      	cmp	r1, #69	; 0x45
 800cf20:	d00b      	beq.n	800cf3a <_scanf_float+0x2b2>
 800cf22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf26:	4632      	mov	r2, r6
 800cf28:	4638      	mov	r0, r7
 800cf2a:	4798      	blx	r3
 800cf2c:	6923      	ldr	r3, [r4, #16]
 800cf2e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	f1a5 0b02 	sub.w	fp, r5, #2
 800cf38:	6123      	str	r3, [r4, #16]
 800cf3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4638      	mov	r0, r7
 800cf42:	4798      	blx	r3
 800cf44:	465d      	mov	r5, fp
 800cf46:	6826      	ldr	r6, [r4, #0]
 800cf48:	f016 0610 	ands.w	r6, r6, #16
 800cf4c:	d17a      	bne.n	800d044 <_scanf_float+0x3bc>
 800cf4e:	702e      	strb	r6, [r5, #0]
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cf56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf5a:	d142      	bne.n	800cfe2 <_scanf_float+0x35a>
 800cf5c:	9b02      	ldr	r3, [sp, #8]
 800cf5e:	eba9 0303 	sub.w	r3, r9, r3
 800cf62:	425a      	negs	r2, r3
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d149      	bne.n	800cffc <_scanf_float+0x374>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4641      	mov	r1, r8
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f000 ff1f 	bl	800ddb0 <_strtod_r>
 800cf72:	6825      	ldr	r5, [r4, #0]
 800cf74:	f8da 3000 	ldr.w	r3, [sl]
 800cf78:	f015 0f02 	tst.w	r5, #2
 800cf7c:	f103 0204 	add.w	r2, r3, #4
 800cf80:	ec59 8b10 	vmov	r8, r9, d0
 800cf84:	f8ca 2000 	str.w	r2, [sl]
 800cf88:	d043      	beq.n	800d012 <_scanf_float+0x38a>
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	e9c3 8900 	strd	r8, r9, [r3]
 800cf90:	68e3      	ldr	r3, [r4, #12]
 800cf92:	3301      	adds	r3, #1
 800cf94:	60e3      	str	r3, [r4, #12]
 800cf96:	e6be      	b.n	800cd16 <_scanf_float+0x8e>
 800cf98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cf9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cfa0:	4632      	mov	r2, r6
 800cfa2:	4638      	mov	r0, r7
 800cfa4:	4798      	blx	r3
 800cfa6:	6923      	ldr	r3, [r4, #16]
 800cfa8:	3b01      	subs	r3, #1
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	e7a6      	b.n	800cefc <_scanf_float+0x274>
 800cfae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfb2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cfb6:	4632      	mov	r2, r6
 800cfb8:	4638      	mov	r0, r7
 800cfba:	4798      	blx	r3
 800cfbc:	6923      	ldr	r3, [r4, #16]
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	6123      	str	r3, [r4, #16]
 800cfc2:	4545      	cmp	r5, r8
 800cfc4:	d8f3      	bhi.n	800cfae <_scanf_float+0x326>
 800cfc6:	e6a5      	b.n	800cd14 <_scanf_float+0x8c>
 800cfc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cfcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4638      	mov	r0, r7
 800cfd4:	4798      	blx	r3
 800cfd6:	6923      	ldr	r3, [r4, #16]
 800cfd8:	3b01      	subs	r3, #1
 800cfda:	6123      	str	r3, [r4, #16]
 800cfdc:	4545      	cmp	r5, r8
 800cfde:	d8f3      	bhi.n	800cfc8 <_scanf_float+0x340>
 800cfe0:	e698      	b.n	800cd14 <_scanf_float+0x8c>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d0bf      	beq.n	800cf68 <_scanf_float+0x2e0>
 800cfe8:	9904      	ldr	r1, [sp, #16]
 800cfea:	230a      	movs	r3, #10
 800cfec:	4632      	mov	r2, r6
 800cfee:	3101      	adds	r1, #1
 800cff0:	4638      	mov	r0, r7
 800cff2:	f000 ff69 	bl	800dec8 <_strtol_r>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	9d04      	ldr	r5, [sp, #16]
 800cffa:	1ac2      	subs	r2, r0, r3
 800cffc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d000:	429d      	cmp	r5, r3
 800d002:	bf28      	it	cs
 800d004:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d008:	490f      	ldr	r1, [pc, #60]	; (800d048 <_scanf_float+0x3c0>)
 800d00a:	4628      	mov	r0, r5
 800d00c:	f000 f8a0 	bl	800d150 <siprintf>
 800d010:	e7aa      	b.n	800cf68 <_scanf_float+0x2e0>
 800d012:	f015 0504 	ands.w	r5, r5, #4
 800d016:	d1b8      	bne.n	800cf8a <_scanf_float+0x302>
 800d018:	681f      	ldr	r7, [r3, #0]
 800d01a:	ee10 2a10 	vmov	r2, s0
 800d01e:	464b      	mov	r3, r9
 800d020:	ee10 0a10 	vmov	r0, s0
 800d024:	4649      	mov	r1, r9
 800d026:	f7f3 fd81 	bl	8000b2c <__aeabi_dcmpun>
 800d02a:	b128      	cbz	r0, 800d038 <_scanf_float+0x3b0>
 800d02c:	4628      	mov	r0, r5
 800d02e:	f000 f889 	bl	800d144 <nanf>
 800d032:	ed87 0a00 	vstr	s0, [r7]
 800d036:	e7ab      	b.n	800cf90 <_scanf_float+0x308>
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 fdd4 	bl	8000be8 <__aeabi_d2f>
 800d040:	6038      	str	r0, [r7, #0]
 800d042:	e7a5      	b.n	800cf90 <_scanf_float+0x308>
 800d044:	2600      	movs	r6, #0
 800d046:	e666      	b.n	800cd16 <_scanf_float+0x8e>
 800d048:	08010b18 	.word	0x08010b18

0800d04c <iprintf>:
 800d04c:	b40f      	push	{r0, r1, r2, r3}
 800d04e:	4b0a      	ldr	r3, [pc, #40]	; (800d078 <iprintf+0x2c>)
 800d050:	b513      	push	{r0, r1, r4, lr}
 800d052:	681c      	ldr	r4, [r3, #0]
 800d054:	b124      	cbz	r4, 800d060 <iprintf+0x14>
 800d056:	69a3      	ldr	r3, [r4, #24]
 800d058:	b913      	cbnz	r3, 800d060 <iprintf+0x14>
 800d05a:	4620      	mov	r0, r4
 800d05c:	f001 ff3c 	bl	800eed8 <__sinit>
 800d060:	ab05      	add	r3, sp, #20
 800d062:	9a04      	ldr	r2, [sp, #16]
 800d064:	68a1      	ldr	r1, [r4, #8]
 800d066:	9301      	str	r3, [sp, #4]
 800d068:	4620      	mov	r0, r4
 800d06a:	f003 f9a9 	bl	80103c0 <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d074:	b004      	add	sp, #16
 800d076:	4770      	bx	lr
 800d078:	20000040 	.word	0x20000040

0800d07c <_puts_r>:
 800d07c:	b570      	push	{r4, r5, r6, lr}
 800d07e:	460e      	mov	r6, r1
 800d080:	4605      	mov	r5, r0
 800d082:	b118      	cbz	r0, 800d08c <_puts_r+0x10>
 800d084:	6983      	ldr	r3, [r0, #24]
 800d086:	b90b      	cbnz	r3, 800d08c <_puts_r+0x10>
 800d088:	f001 ff26 	bl	800eed8 <__sinit>
 800d08c:	69ab      	ldr	r3, [r5, #24]
 800d08e:	68ac      	ldr	r4, [r5, #8]
 800d090:	b913      	cbnz	r3, 800d098 <_puts_r+0x1c>
 800d092:	4628      	mov	r0, r5
 800d094:	f001 ff20 	bl	800eed8 <__sinit>
 800d098:	4b23      	ldr	r3, [pc, #140]	; (800d128 <_puts_r+0xac>)
 800d09a:	429c      	cmp	r4, r3
 800d09c:	d117      	bne.n	800d0ce <_puts_r+0x52>
 800d09e:	686c      	ldr	r4, [r5, #4]
 800d0a0:	89a3      	ldrh	r3, [r4, #12]
 800d0a2:	071b      	lsls	r3, r3, #28
 800d0a4:	d51d      	bpl.n	800d0e2 <_puts_r+0x66>
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	b1db      	cbz	r3, 800d0e2 <_puts_r+0x66>
 800d0aa:	3e01      	subs	r6, #1
 800d0ac:	68a3      	ldr	r3, [r4, #8]
 800d0ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	60a3      	str	r3, [r4, #8]
 800d0b6:	b9e9      	cbnz	r1, 800d0f4 <_puts_r+0x78>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	da2e      	bge.n	800d11a <_puts_r+0x9e>
 800d0bc:	4622      	mov	r2, r4
 800d0be:	210a      	movs	r1, #10
 800d0c0:	4628      	mov	r0, r5
 800d0c2:	f000 ff13 	bl	800deec <__swbuf_r>
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d011      	beq.n	800d0ee <_puts_r+0x72>
 800d0ca:	200a      	movs	r0, #10
 800d0cc:	e011      	b.n	800d0f2 <_puts_r+0x76>
 800d0ce:	4b17      	ldr	r3, [pc, #92]	; (800d12c <_puts_r+0xb0>)
 800d0d0:	429c      	cmp	r4, r3
 800d0d2:	d101      	bne.n	800d0d8 <_puts_r+0x5c>
 800d0d4:	68ac      	ldr	r4, [r5, #8]
 800d0d6:	e7e3      	b.n	800d0a0 <_puts_r+0x24>
 800d0d8:	4b15      	ldr	r3, [pc, #84]	; (800d130 <_puts_r+0xb4>)
 800d0da:	429c      	cmp	r4, r3
 800d0dc:	bf08      	it	eq
 800d0de:	68ec      	ldreq	r4, [r5, #12]
 800d0e0:	e7de      	b.n	800d0a0 <_puts_r+0x24>
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	f000 ff53 	bl	800df90 <__swsetup_r>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d0dd      	beq.n	800d0aa <_puts_r+0x2e>
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f2:	bd70      	pop	{r4, r5, r6, pc}
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	da04      	bge.n	800d102 <_puts_r+0x86>
 800d0f8:	69a2      	ldr	r2, [r4, #24]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	dc06      	bgt.n	800d10c <_puts_r+0x90>
 800d0fe:	290a      	cmp	r1, #10
 800d100:	d004      	beq.n	800d10c <_puts_r+0x90>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	6022      	str	r2, [r4, #0]
 800d108:	7019      	strb	r1, [r3, #0]
 800d10a:	e7cf      	b.n	800d0ac <_puts_r+0x30>
 800d10c:	4622      	mov	r2, r4
 800d10e:	4628      	mov	r0, r5
 800d110:	f000 feec 	bl	800deec <__swbuf_r>
 800d114:	3001      	adds	r0, #1
 800d116:	d1c9      	bne.n	800d0ac <_puts_r+0x30>
 800d118:	e7e9      	b.n	800d0ee <_puts_r+0x72>
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	200a      	movs	r0, #10
 800d11e:	1c5a      	adds	r2, r3, #1
 800d120:	6022      	str	r2, [r4, #0]
 800d122:	7018      	strb	r0, [r3, #0]
 800d124:	e7e5      	b.n	800d0f2 <_puts_r+0x76>
 800d126:	bf00      	nop
 800d128:	08010ba0 	.word	0x08010ba0
 800d12c:	08010bc0 	.word	0x08010bc0
 800d130:	08010b80 	.word	0x08010b80

0800d134 <puts>:
 800d134:	4b02      	ldr	r3, [pc, #8]	; (800d140 <puts+0xc>)
 800d136:	4601      	mov	r1, r0
 800d138:	6818      	ldr	r0, [r3, #0]
 800d13a:	f7ff bf9f 	b.w	800d07c <_puts_r>
 800d13e:	bf00      	nop
 800d140:	20000040 	.word	0x20000040

0800d144 <nanf>:
 800d144:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d14c <nanf+0x8>
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	7fc00000 	.word	0x7fc00000

0800d150 <siprintf>:
 800d150:	b40e      	push	{r1, r2, r3}
 800d152:	b500      	push	{lr}
 800d154:	b09c      	sub	sp, #112	; 0x70
 800d156:	ab1d      	add	r3, sp, #116	; 0x74
 800d158:	9002      	str	r0, [sp, #8]
 800d15a:	9006      	str	r0, [sp, #24]
 800d15c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d160:	4809      	ldr	r0, [pc, #36]	; (800d188 <siprintf+0x38>)
 800d162:	9107      	str	r1, [sp, #28]
 800d164:	9104      	str	r1, [sp, #16]
 800d166:	4909      	ldr	r1, [pc, #36]	; (800d18c <siprintf+0x3c>)
 800d168:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16c:	9105      	str	r1, [sp, #20]
 800d16e:	6800      	ldr	r0, [r0, #0]
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	a902      	add	r1, sp, #8
 800d174:	f003 f802 	bl	801017c <_svfiprintf_r>
 800d178:	9b02      	ldr	r3, [sp, #8]
 800d17a:	2200      	movs	r2, #0
 800d17c:	701a      	strb	r2, [r3, #0]
 800d17e:	b01c      	add	sp, #112	; 0x70
 800d180:	f85d eb04 	ldr.w	lr, [sp], #4
 800d184:	b003      	add	sp, #12
 800d186:	4770      	bx	lr
 800d188:	20000040 	.word	0x20000040
 800d18c:	ffff0208 	.word	0xffff0208

0800d190 <sulp>:
 800d190:	b570      	push	{r4, r5, r6, lr}
 800d192:	4604      	mov	r4, r0
 800d194:	460d      	mov	r5, r1
 800d196:	ec45 4b10 	vmov	d0, r4, r5
 800d19a:	4616      	mov	r6, r2
 800d19c:	f002 fdaa 	bl	800fcf4 <__ulp>
 800d1a0:	ec51 0b10 	vmov	r0, r1, d0
 800d1a4:	b17e      	cbz	r6, 800d1c6 <sulp+0x36>
 800d1a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d1aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	dd09      	ble.n	800d1c6 <sulp+0x36>
 800d1b2:	051b      	lsls	r3, r3, #20
 800d1b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d1b8:	2400      	movs	r4, #0
 800d1ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d1be:	4622      	mov	r2, r4
 800d1c0:	462b      	mov	r3, r5
 800d1c2:	f7f3 fa19 	bl	80005f8 <__aeabi_dmul>
 800d1c6:	bd70      	pop	{r4, r5, r6, pc}

0800d1c8 <_strtod_l>:
 800d1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1cc:	461f      	mov	r7, r3
 800d1ce:	b0a1      	sub	sp, #132	; 0x84
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	4681      	mov	r9, r0
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	460e      	mov	r6, r1
 800d1d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1da:	931c      	str	r3, [sp, #112]	; 0x70
 800d1dc:	f002 fa2f 	bl	800f63e <__localeconv_l>
 800d1e0:	4680      	mov	r8, r0
 800d1e2:	6800      	ldr	r0, [r0, #0]
 800d1e4:	f7f2 fff4 	bl	80001d0 <strlen>
 800d1e8:	f04f 0a00 	mov.w	sl, #0
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	f04f 0b00 	mov.w	fp, #0
 800d1f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800d1f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1f6:	781a      	ldrb	r2, [r3, #0]
 800d1f8:	2a0d      	cmp	r2, #13
 800d1fa:	d832      	bhi.n	800d262 <_strtod_l+0x9a>
 800d1fc:	2a09      	cmp	r2, #9
 800d1fe:	d236      	bcs.n	800d26e <_strtod_l+0xa6>
 800d200:	2a00      	cmp	r2, #0
 800d202:	d03e      	beq.n	800d282 <_strtod_l+0xba>
 800d204:	2300      	movs	r3, #0
 800d206:	930d      	str	r3, [sp, #52]	; 0x34
 800d208:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d20a:	782b      	ldrb	r3, [r5, #0]
 800d20c:	2b30      	cmp	r3, #48	; 0x30
 800d20e:	f040 80ac 	bne.w	800d36a <_strtod_l+0x1a2>
 800d212:	786b      	ldrb	r3, [r5, #1]
 800d214:	2b58      	cmp	r3, #88	; 0x58
 800d216:	d001      	beq.n	800d21c <_strtod_l+0x54>
 800d218:	2b78      	cmp	r3, #120	; 0x78
 800d21a:	d167      	bne.n	800d2ec <_strtod_l+0x124>
 800d21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d21e:	9301      	str	r3, [sp, #4]
 800d220:	ab1c      	add	r3, sp, #112	; 0x70
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	9702      	str	r7, [sp, #8]
 800d226:	ab1d      	add	r3, sp, #116	; 0x74
 800d228:	4a88      	ldr	r2, [pc, #544]	; (800d44c <_strtod_l+0x284>)
 800d22a:	a91b      	add	r1, sp, #108	; 0x6c
 800d22c:	4648      	mov	r0, r9
 800d22e:	f001 ff2c 	bl	800f08a <__gethex>
 800d232:	f010 0407 	ands.w	r4, r0, #7
 800d236:	4606      	mov	r6, r0
 800d238:	d005      	beq.n	800d246 <_strtod_l+0x7e>
 800d23a:	2c06      	cmp	r4, #6
 800d23c:	d12b      	bne.n	800d296 <_strtod_l+0xce>
 800d23e:	3501      	adds	r5, #1
 800d240:	2300      	movs	r3, #0
 800d242:	951b      	str	r5, [sp, #108]	; 0x6c
 800d244:	930d      	str	r3, [sp, #52]	; 0x34
 800d246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f040 859a 	bne.w	800dd82 <_strtod_l+0xbba>
 800d24e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d250:	b1e3      	cbz	r3, 800d28c <_strtod_l+0xc4>
 800d252:	4652      	mov	r2, sl
 800d254:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d258:	ec43 2b10 	vmov	d0, r2, r3
 800d25c:	b021      	add	sp, #132	; 0x84
 800d25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d262:	2a2b      	cmp	r2, #43	; 0x2b
 800d264:	d015      	beq.n	800d292 <_strtod_l+0xca>
 800d266:	2a2d      	cmp	r2, #45	; 0x2d
 800d268:	d004      	beq.n	800d274 <_strtod_l+0xac>
 800d26a:	2a20      	cmp	r2, #32
 800d26c:	d1ca      	bne.n	800d204 <_strtod_l+0x3c>
 800d26e:	3301      	adds	r3, #1
 800d270:	931b      	str	r3, [sp, #108]	; 0x6c
 800d272:	e7bf      	b.n	800d1f4 <_strtod_l+0x2c>
 800d274:	2201      	movs	r2, #1
 800d276:	920d      	str	r2, [sp, #52]	; 0x34
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1c2      	bne.n	800d208 <_strtod_l+0x40>
 800d282:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d284:	961b      	str	r6, [sp, #108]	; 0x6c
 800d286:	2b00      	cmp	r3, #0
 800d288:	f040 8579 	bne.w	800dd7e <_strtod_l+0xbb6>
 800d28c:	4652      	mov	r2, sl
 800d28e:	465b      	mov	r3, fp
 800d290:	e7e2      	b.n	800d258 <_strtod_l+0x90>
 800d292:	2200      	movs	r2, #0
 800d294:	e7ef      	b.n	800d276 <_strtod_l+0xae>
 800d296:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d298:	b13a      	cbz	r2, 800d2aa <_strtod_l+0xe2>
 800d29a:	2135      	movs	r1, #53	; 0x35
 800d29c:	a81e      	add	r0, sp, #120	; 0x78
 800d29e:	f002 fe21 	bl	800fee4 <__copybits>
 800d2a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d2a4:	4648      	mov	r0, r9
 800d2a6:	f002 fa8d 	bl	800f7c4 <_Bfree>
 800d2aa:	3c01      	subs	r4, #1
 800d2ac:	2c04      	cmp	r4, #4
 800d2ae:	d806      	bhi.n	800d2be <_strtod_l+0xf6>
 800d2b0:	e8df f004 	tbb	[pc, r4]
 800d2b4:	1714030a 	.word	0x1714030a
 800d2b8:	0a          	.byte	0x0a
 800d2b9:	00          	.byte	0x00
 800d2ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d2be:	0730      	lsls	r0, r6, #28
 800d2c0:	d5c1      	bpl.n	800d246 <_strtod_l+0x7e>
 800d2c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d2c6:	e7be      	b.n	800d246 <_strtod_l+0x7e>
 800d2c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d2cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d2ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d2d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d2d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d2da:	e7f0      	b.n	800d2be <_strtod_l+0xf6>
 800d2dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d450 <_strtod_l+0x288>
 800d2e0:	e7ed      	b.n	800d2be <_strtod_l+0xf6>
 800d2e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d2e6:	f04f 3aff 	mov.w	sl, #4294967295
 800d2ea:	e7e8      	b.n	800d2be <_strtod_l+0xf6>
 800d2ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ee:	1c5a      	adds	r2, r3, #1
 800d2f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d2f2:	785b      	ldrb	r3, [r3, #1]
 800d2f4:	2b30      	cmp	r3, #48	; 0x30
 800d2f6:	d0f9      	beq.n	800d2ec <_strtod_l+0x124>
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0a4      	beq.n	800d246 <_strtod_l+0x7e>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	2500      	movs	r5, #0
 800d300:	9306      	str	r3, [sp, #24]
 800d302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d304:	9308      	str	r3, [sp, #32]
 800d306:	9507      	str	r5, [sp, #28]
 800d308:	9505      	str	r5, [sp, #20]
 800d30a:	220a      	movs	r2, #10
 800d30c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d30e:	7807      	ldrb	r7, [r0, #0]
 800d310:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d314:	b2d9      	uxtb	r1, r3
 800d316:	2909      	cmp	r1, #9
 800d318:	d929      	bls.n	800d36e <_strtod_l+0x1a6>
 800d31a:	4622      	mov	r2, r4
 800d31c:	f8d8 1000 	ldr.w	r1, [r8]
 800d320:	f003 f9b7 	bl	8010692 <strncmp>
 800d324:	2800      	cmp	r0, #0
 800d326:	d031      	beq.n	800d38c <_strtod_l+0x1c4>
 800d328:	2000      	movs	r0, #0
 800d32a:	9c05      	ldr	r4, [sp, #20]
 800d32c:	9004      	str	r0, [sp, #16]
 800d32e:	463b      	mov	r3, r7
 800d330:	4602      	mov	r2, r0
 800d332:	2b65      	cmp	r3, #101	; 0x65
 800d334:	d001      	beq.n	800d33a <_strtod_l+0x172>
 800d336:	2b45      	cmp	r3, #69	; 0x45
 800d338:	d114      	bne.n	800d364 <_strtod_l+0x19c>
 800d33a:	b924      	cbnz	r4, 800d346 <_strtod_l+0x17e>
 800d33c:	b910      	cbnz	r0, 800d344 <_strtod_l+0x17c>
 800d33e:	9b06      	ldr	r3, [sp, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d09e      	beq.n	800d282 <_strtod_l+0xba>
 800d344:	2400      	movs	r4, #0
 800d346:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d348:	1c73      	adds	r3, r6, #1
 800d34a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d34c:	7873      	ldrb	r3, [r6, #1]
 800d34e:	2b2b      	cmp	r3, #43	; 0x2b
 800d350:	d078      	beq.n	800d444 <_strtod_l+0x27c>
 800d352:	2b2d      	cmp	r3, #45	; 0x2d
 800d354:	d070      	beq.n	800d438 <_strtod_l+0x270>
 800d356:	f04f 0c00 	mov.w	ip, #0
 800d35a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d35e:	2f09      	cmp	r7, #9
 800d360:	d97c      	bls.n	800d45c <_strtod_l+0x294>
 800d362:	961b      	str	r6, [sp, #108]	; 0x6c
 800d364:	f04f 0e00 	mov.w	lr, #0
 800d368:	e09a      	b.n	800d4a0 <_strtod_l+0x2d8>
 800d36a:	2300      	movs	r3, #0
 800d36c:	e7c7      	b.n	800d2fe <_strtod_l+0x136>
 800d36e:	9905      	ldr	r1, [sp, #20]
 800d370:	2908      	cmp	r1, #8
 800d372:	bfdd      	ittte	le
 800d374:	9907      	ldrle	r1, [sp, #28]
 800d376:	fb02 3301 	mlale	r3, r2, r1, r3
 800d37a:	9307      	strle	r3, [sp, #28]
 800d37c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	3001      	adds	r0, #1
 800d384:	3301      	adds	r3, #1
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	901b      	str	r0, [sp, #108]	; 0x6c
 800d38a:	e7bf      	b.n	800d30c <_strtod_l+0x144>
 800d38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d38e:	191a      	adds	r2, r3, r4
 800d390:	921b      	str	r2, [sp, #108]	; 0x6c
 800d392:	9a05      	ldr	r2, [sp, #20]
 800d394:	5d1b      	ldrb	r3, [r3, r4]
 800d396:	2a00      	cmp	r2, #0
 800d398:	d037      	beq.n	800d40a <_strtod_l+0x242>
 800d39a:	9c05      	ldr	r4, [sp, #20]
 800d39c:	4602      	mov	r2, r0
 800d39e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d3a2:	2909      	cmp	r1, #9
 800d3a4:	d913      	bls.n	800d3ce <_strtod_l+0x206>
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	9104      	str	r1, [sp, #16]
 800d3aa:	e7c2      	b.n	800d332 <_strtod_l+0x16a>
 800d3ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3ae:	1c5a      	adds	r2, r3, #1
 800d3b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d3b2:	785b      	ldrb	r3, [r3, #1]
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	2b30      	cmp	r3, #48	; 0x30
 800d3b8:	d0f8      	beq.n	800d3ac <_strtod_l+0x1e4>
 800d3ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d3be:	2a08      	cmp	r2, #8
 800d3c0:	f200 84e4 	bhi.w	800dd8c <_strtod_l+0xbc4>
 800d3c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d3c6:	9208      	str	r2, [sp, #32]
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	2000      	movs	r0, #0
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d3d2:	f100 0101 	add.w	r1, r0, #1
 800d3d6:	d012      	beq.n	800d3fe <_strtod_l+0x236>
 800d3d8:	440a      	add	r2, r1
 800d3da:	eb00 0c04 	add.w	ip, r0, r4
 800d3de:	4621      	mov	r1, r4
 800d3e0:	270a      	movs	r7, #10
 800d3e2:	458c      	cmp	ip, r1
 800d3e4:	d113      	bne.n	800d40e <_strtod_l+0x246>
 800d3e6:	1821      	adds	r1, r4, r0
 800d3e8:	2908      	cmp	r1, #8
 800d3ea:	f104 0401 	add.w	r4, r4, #1
 800d3ee:	4404      	add	r4, r0
 800d3f0:	dc19      	bgt.n	800d426 <_strtod_l+0x25e>
 800d3f2:	9b07      	ldr	r3, [sp, #28]
 800d3f4:	210a      	movs	r1, #10
 800d3f6:	fb01 e303 	mla	r3, r1, r3, lr
 800d3fa:	9307      	str	r3, [sp, #28]
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d400:	1c58      	adds	r0, r3, #1
 800d402:	901b      	str	r0, [sp, #108]	; 0x6c
 800d404:	785b      	ldrb	r3, [r3, #1]
 800d406:	4608      	mov	r0, r1
 800d408:	e7c9      	b.n	800d39e <_strtod_l+0x1d6>
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	e7d3      	b.n	800d3b6 <_strtod_l+0x1ee>
 800d40e:	2908      	cmp	r1, #8
 800d410:	f101 0101 	add.w	r1, r1, #1
 800d414:	dc03      	bgt.n	800d41e <_strtod_l+0x256>
 800d416:	9b07      	ldr	r3, [sp, #28]
 800d418:	437b      	muls	r3, r7
 800d41a:	9307      	str	r3, [sp, #28]
 800d41c:	e7e1      	b.n	800d3e2 <_strtod_l+0x21a>
 800d41e:	2910      	cmp	r1, #16
 800d420:	bfd8      	it	le
 800d422:	437d      	mulle	r5, r7
 800d424:	e7dd      	b.n	800d3e2 <_strtod_l+0x21a>
 800d426:	2c10      	cmp	r4, #16
 800d428:	bfdc      	itt	le
 800d42a:	210a      	movle	r1, #10
 800d42c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d430:	e7e4      	b.n	800d3fc <_strtod_l+0x234>
 800d432:	2301      	movs	r3, #1
 800d434:	9304      	str	r3, [sp, #16]
 800d436:	e781      	b.n	800d33c <_strtod_l+0x174>
 800d438:	f04f 0c01 	mov.w	ip, #1
 800d43c:	1cb3      	adds	r3, r6, #2
 800d43e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d440:	78b3      	ldrb	r3, [r6, #2]
 800d442:	e78a      	b.n	800d35a <_strtod_l+0x192>
 800d444:	f04f 0c00 	mov.w	ip, #0
 800d448:	e7f8      	b.n	800d43c <_strtod_l+0x274>
 800d44a:	bf00      	nop
 800d44c:	08010b20 	.word	0x08010b20
 800d450:	7ff00000 	.word	0x7ff00000
 800d454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d456:	1c5f      	adds	r7, r3, #1
 800d458:	971b      	str	r7, [sp, #108]	; 0x6c
 800d45a:	785b      	ldrb	r3, [r3, #1]
 800d45c:	2b30      	cmp	r3, #48	; 0x30
 800d45e:	d0f9      	beq.n	800d454 <_strtod_l+0x28c>
 800d460:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d464:	2f08      	cmp	r7, #8
 800d466:	f63f af7d 	bhi.w	800d364 <_strtod_l+0x19c>
 800d46a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d46e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d470:	930a      	str	r3, [sp, #40]	; 0x28
 800d472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d474:	1c5f      	adds	r7, r3, #1
 800d476:	971b      	str	r7, [sp, #108]	; 0x6c
 800d478:	785b      	ldrb	r3, [r3, #1]
 800d47a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d47e:	f1b8 0f09 	cmp.w	r8, #9
 800d482:	d937      	bls.n	800d4f4 <_strtod_l+0x32c>
 800d484:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d486:	1a7f      	subs	r7, r7, r1
 800d488:	2f08      	cmp	r7, #8
 800d48a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d48e:	dc37      	bgt.n	800d500 <_strtod_l+0x338>
 800d490:	45be      	cmp	lr, r7
 800d492:	bfa8      	it	ge
 800d494:	46be      	movge	lr, r7
 800d496:	f1bc 0f00 	cmp.w	ip, #0
 800d49a:	d001      	beq.n	800d4a0 <_strtod_l+0x2d8>
 800d49c:	f1ce 0e00 	rsb	lr, lr, #0
 800d4a0:	2c00      	cmp	r4, #0
 800d4a2:	d151      	bne.n	800d548 <_strtod_l+0x380>
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	f47f aece 	bne.w	800d246 <_strtod_l+0x7e>
 800d4aa:	9a06      	ldr	r2, [sp, #24]
 800d4ac:	2a00      	cmp	r2, #0
 800d4ae:	f47f aeca 	bne.w	800d246 <_strtod_l+0x7e>
 800d4b2:	9a04      	ldr	r2, [sp, #16]
 800d4b4:	2a00      	cmp	r2, #0
 800d4b6:	f47f aee4 	bne.w	800d282 <_strtod_l+0xba>
 800d4ba:	2b4e      	cmp	r3, #78	; 0x4e
 800d4bc:	d027      	beq.n	800d50e <_strtod_l+0x346>
 800d4be:	dc21      	bgt.n	800d504 <_strtod_l+0x33c>
 800d4c0:	2b49      	cmp	r3, #73	; 0x49
 800d4c2:	f47f aede 	bne.w	800d282 <_strtod_l+0xba>
 800d4c6:	49a0      	ldr	r1, [pc, #640]	; (800d748 <_strtod_l+0x580>)
 800d4c8:	a81b      	add	r0, sp, #108	; 0x6c
 800d4ca:	f002 f811 	bl	800f4f0 <__match>
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f43f aed7 	beq.w	800d282 <_strtod_l+0xba>
 800d4d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4d6:	499d      	ldr	r1, [pc, #628]	; (800d74c <_strtod_l+0x584>)
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	a81b      	add	r0, sp, #108	; 0x6c
 800d4dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800d4de:	f002 f807 	bl	800f4f0 <__match>
 800d4e2:	b910      	cbnz	r0, 800d4ea <_strtod_l+0x322>
 800d4e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d4ea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d760 <_strtod_l+0x598>
 800d4ee:	f04f 0a00 	mov.w	sl, #0
 800d4f2:	e6a8      	b.n	800d246 <_strtod_l+0x7e>
 800d4f4:	210a      	movs	r1, #10
 800d4f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d4fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d4fe:	e7b8      	b.n	800d472 <_strtod_l+0x2aa>
 800d500:	46be      	mov	lr, r7
 800d502:	e7c8      	b.n	800d496 <_strtod_l+0x2ce>
 800d504:	2b69      	cmp	r3, #105	; 0x69
 800d506:	d0de      	beq.n	800d4c6 <_strtod_l+0x2fe>
 800d508:	2b6e      	cmp	r3, #110	; 0x6e
 800d50a:	f47f aeba 	bne.w	800d282 <_strtod_l+0xba>
 800d50e:	4990      	ldr	r1, [pc, #576]	; (800d750 <_strtod_l+0x588>)
 800d510:	a81b      	add	r0, sp, #108	; 0x6c
 800d512:	f001 ffed 	bl	800f4f0 <__match>
 800d516:	2800      	cmp	r0, #0
 800d518:	f43f aeb3 	beq.w	800d282 <_strtod_l+0xba>
 800d51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b28      	cmp	r3, #40	; 0x28
 800d522:	d10e      	bne.n	800d542 <_strtod_l+0x37a>
 800d524:	aa1e      	add	r2, sp, #120	; 0x78
 800d526:	498b      	ldr	r1, [pc, #556]	; (800d754 <_strtod_l+0x58c>)
 800d528:	a81b      	add	r0, sp, #108	; 0x6c
 800d52a:	f001 fff5 	bl	800f518 <__hexnan>
 800d52e:	2805      	cmp	r0, #5
 800d530:	d107      	bne.n	800d542 <_strtod_l+0x37a>
 800d532:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d534:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d538:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d53c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d540:	e681      	b.n	800d246 <_strtod_l+0x7e>
 800d542:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d768 <_strtod_l+0x5a0>
 800d546:	e7d2      	b.n	800d4ee <_strtod_l+0x326>
 800d548:	ebae 0302 	sub.w	r3, lr, r2
 800d54c:	9306      	str	r3, [sp, #24]
 800d54e:	9b05      	ldr	r3, [sp, #20]
 800d550:	9807      	ldr	r0, [sp, #28]
 800d552:	2b00      	cmp	r3, #0
 800d554:	bf08      	it	eq
 800d556:	4623      	moveq	r3, r4
 800d558:	2c10      	cmp	r4, #16
 800d55a:	9305      	str	r3, [sp, #20]
 800d55c:	46a0      	mov	r8, r4
 800d55e:	bfa8      	it	ge
 800d560:	f04f 0810 	movge.w	r8, #16
 800d564:	f7f2 ffce 	bl	8000504 <__aeabi_ui2d>
 800d568:	2c09      	cmp	r4, #9
 800d56a:	4682      	mov	sl, r0
 800d56c:	468b      	mov	fp, r1
 800d56e:	dc13      	bgt.n	800d598 <_strtod_l+0x3d0>
 800d570:	9b06      	ldr	r3, [sp, #24]
 800d572:	2b00      	cmp	r3, #0
 800d574:	f43f ae67 	beq.w	800d246 <_strtod_l+0x7e>
 800d578:	9b06      	ldr	r3, [sp, #24]
 800d57a:	dd7a      	ble.n	800d672 <_strtod_l+0x4aa>
 800d57c:	2b16      	cmp	r3, #22
 800d57e:	dc61      	bgt.n	800d644 <_strtod_l+0x47c>
 800d580:	4a75      	ldr	r2, [pc, #468]	; (800d758 <_strtod_l+0x590>)
 800d582:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d586:	e9de 0100 	ldrd	r0, r1, [lr]
 800d58a:	4652      	mov	r2, sl
 800d58c:	465b      	mov	r3, fp
 800d58e:	f7f3 f833 	bl	80005f8 <__aeabi_dmul>
 800d592:	4682      	mov	sl, r0
 800d594:	468b      	mov	fp, r1
 800d596:	e656      	b.n	800d246 <_strtod_l+0x7e>
 800d598:	4b6f      	ldr	r3, [pc, #444]	; (800d758 <_strtod_l+0x590>)
 800d59a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d59e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d5a2:	f7f3 f829 	bl	80005f8 <__aeabi_dmul>
 800d5a6:	4606      	mov	r6, r0
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	460f      	mov	r7, r1
 800d5ac:	f7f2 ffaa 	bl	8000504 <__aeabi_ui2d>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	4639      	mov	r1, r7
 800d5b8:	f7f2 fe68 	bl	800028c <__adddf3>
 800d5bc:	2c0f      	cmp	r4, #15
 800d5be:	4682      	mov	sl, r0
 800d5c0:	468b      	mov	fp, r1
 800d5c2:	ddd5      	ble.n	800d570 <_strtod_l+0x3a8>
 800d5c4:	9b06      	ldr	r3, [sp, #24]
 800d5c6:	eba4 0808 	sub.w	r8, r4, r8
 800d5ca:	4498      	add	r8, r3
 800d5cc:	f1b8 0f00 	cmp.w	r8, #0
 800d5d0:	f340 8096 	ble.w	800d700 <_strtod_l+0x538>
 800d5d4:	f018 030f 	ands.w	r3, r8, #15
 800d5d8:	d00a      	beq.n	800d5f0 <_strtod_l+0x428>
 800d5da:	495f      	ldr	r1, [pc, #380]	; (800d758 <_strtod_l+0x590>)
 800d5dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d5e0:	4652      	mov	r2, sl
 800d5e2:	465b      	mov	r3, fp
 800d5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d5e8:	f7f3 f806 	bl	80005f8 <__aeabi_dmul>
 800d5ec:	4682      	mov	sl, r0
 800d5ee:	468b      	mov	fp, r1
 800d5f0:	f038 080f 	bics.w	r8, r8, #15
 800d5f4:	d073      	beq.n	800d6de <_strtod_l+0x516>
 800d5f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d5fa:	dd47      	ble.n	800d68c <_strtod_l+0x4c4>
 800d5fc:	2400      	movs	r4, #0
 800d5fe:	46a0      	mov	r8, r4
 800d600:	9407      	str	r4, [sp, #28]
 800d602:	9405      	str	r4, [sp, #20]
 800d604:	2322      	movs	r3, #34	; 0x22
 800d606:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d760 <_strtod_l+0x598>
 800d60a:	f8c9 3000 	str.w	r3, [r9]
 800d60e:	f04f 0a00 	mov.w	sl, #0
 800d612:	9b07      	ldr	r3, [sp, #28]
 800d614:	2b00      	cmp	r3, #0
 800d616:	f43f ae16 	beq.w	800d246 <_strtod_l+0x7e>
 800d61a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d61c:	4648      	mov	r0, r9
 800d61e:	f002 f8d1 	bl	800f7c4 <_Bfree>
 800d622:	9905      	ldr	r1, [sp, #20]
 800d624:	4648      	mov	r0, r9
 800d626:	f002 f8cd 	bl	800f7c4 <_Bfree>
 800d62a:	4641      	mov	r1, r8
 800d62c:	4648      	mov	r0, r9
 800d62e:	f002 f8c9 	bl	800f7c4 <_Bfree>
 800d632:	9907      	ldr	r1, [sp, #28]
 800d634:	4648      	mov	r0, r9
 800d636:	f002 f8c5 	bl	800f7c4 <_Bfree>
 800d63a:	4621      	mov	r1, r4
 800d63c:	4648      	mov	r0, r9
 800d63e:	f002 f8c1 	bl	800f7c4 <_Bfree>
 800d642:	e600      	b.n	800d246 <_strtod_l+0x7e>
 800d644:	9a06      	ldr	r2, [sp, #24]
 800d646:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d64a:	4293      	cmp	r3, r2
 800d64c:	dbba      	blt.n	800d5c4 <_strtod_l+0x3fc>
 800d64e:	4d42      	ldr	r5, [pc, #264]	; (800d758 <_strtod_l+0x590>)
 800d650:	f1c4 040f 	rsb	r4, r4, #15
 800d654:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d658:	4652      	mov	r2, sl
 800d65a:	465b      	mov	r3, fp
 800d65c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d660:	f7f2 ffca 	bl	80005f8 <__aeabi_dmul>
 800d664:	9b06      	ldr	r3, [sp, #24]
 800d666:	1b1c      	subs	r4, r3, r4
 800d668:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d66c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d670:	e78d      	b.n	800d58e <_strtod_l+0x3c6>
 800d672:	f113 0f16 	cmn.w	r3, #22
 800d676:	dba5      	blt.n	800d5c4 <_strtod_l+0x3fc>
 800d678:	4a37      	ldr	r2, [pc, #220]	; (800d758 <_strtod_l+0x590>)
 800d67a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d67e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d682:	4650      	mov	r0, sl
 800d684:	4659      	mov	r1, fp
 800d686:	f7f3 f8e1 	bl	800084c <__aeabi_ddiv>
 800d68a:	e782      	b.n	800d592 <_strtod_l+0x3ca>
 800d68c:	2300      	movs	r3, #0
 800d68e:	4e33      	ldr	r6, [pc, #204]	; (800d75c <_strtod_l+0x594>)
 800d690:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d694:	4650      	mov	r0, sl
 800d696:	4659      	mov	r1, fp
 800d698:	461d      	mov	r5, r3
 800d69a:	f1b8 0f01 	cmp.w	r8, #1
 800d69e:	dc21      	bgt.n	800d6e4 <_strtod_l+0x51c>
 800d6a0:	b10b      	cbz	r3, 800d6a6 <_strtod_l+0x4de>
 800d6a2:	4682      	mov	sl, r0
 800d6a4:	468b      	mov	fp, r1
 800d6a6:	4b2d      	ldr	r3, [pc, #180]	; (800d75c <_strtod_l+0x594>)
 800d6a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d6ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d6b0:	4652      	mov	r2, sl
 800d6b2:	465b      	mov	r3, fp
 800d6b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d6b8:	f7f2 ff9e 	bl	80005f8 <__aeabi_dmul>
 800d6bc:	4b28      	ldr	r3, [pc, #160]	; (800d760 <_strtod_l+0x598>)
 800d6be:	460a      	mov	r2, r1
 800d6c0:	400b      	ands	r3, r1
 800d6c2:	4928      	ldr	r1, [pc, #160]	; (800d764 <_strtod_l+0x59c>)
 800d6c4:	428b      	cmp	r3, r1
 800d6c6:	4682      	mov	sl, r0
 800d6c8:	d898      	bhi.n	800d5fc <_strtod_l+0x434>
 800d6ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d6ce:	428b      	cmp	r3, r1
 800d6d0:	bf86      	itte	hi
 800d6d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d76c <_strtod_l+0x5a4>
 800d6d6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d6da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d6de:	2300      	movs	r3, #0
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	e077      	b.n	800d7d4 <_strtod_l+0x60c>
 800d6e4:	f018 0f01 	tst.w	r8, #1
 800d6e8:	d006      	beq.n	800d6f8 <_strtod_l+0x530>
 800d6ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	f7f2 ff81 	bl	80005f8 <__aeabi_dmul>
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d6fe:	e7cc      	b.n	800d69a <_strtod_l+0x4d2>
 800d700:	d0ed      	beq.n	800d6de <_strtod_l+0x516>
 800d702:	f1c8 0800 	rsb	r8, r8, #0
 800d706:	f018 020f 	ands.w	r2, r8, #15
 800d70a:	d00a      	beq.n	800d722 <_strtod_l+0x55a>
 800d70c:	4b12      	ldr	r3, [pc, #72]	; (800d758 <_strtod_l+0x590>)
 800d70e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d712:	4650      	mov	r0, sl
 800d714:	4659      	mov	r1, fp
 800d716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d71a:	f7f3 f897 	bl	800084c <__aeabi_ddiv>
 800d71e:	4682      	mov	sl, r0
 800d720:	468b      	mov	fp, r1
 800d722:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d726:	d0da      	beq.n	800d6de <_strtod_l+0x516>
 800d728:	f1b8 0f1f 	cmp.w	r8, #31
 800d72c:	dd20      	ble.n	800d770 <_strtod_l+0x5a8>
 800d72e:	2400      	movs	r4, #0
 800d730:	46a0      	mov	r8, r4
 800d732:	9407      	str	r4, [sp, #28]
 800d734:	9405      	str	r4, [sp, #20]
 800d736:	2322      	movs	r3, #34	; 0x22
 800d738:	f04f 0a00 	mov.w	sl, #0
 800d73c:	f04f 0b00 	mov.w	fp, #0
 800d740:	f8c9 3000 	str.w	r3, [r9]
 800d744:	e765      	b.n	800d612 <_strtod_l+0x44a>
 800d746:	bf00      	nop
 800d748:	08010ae9 	.word	0x08010ae9
 800d74c:	08010b73 	.word	0x08010b73
 800d750:	08010af1 	.word	0x08010af1
 800d754:	08010b34 	.word	0x08010b34
 800d758:	08010c18 	.word	0x08010c18
 800d75c:	08010bf0 	.word	0x08010bf0
 800d760:	7ff00000 	.word	0x7ff00000
 800d764:	7ca00000 	.word	0x7ca00000
 800d768:	fff80000 	.word	0xfff80000
 800d76c:	7fefffff 	.word	0x7fefffff
 800d770:	f018 0310 	ands.w	r3, r8, #16
 800d774:	bf18      	it	ne
 800d776:	236a      	movne	r3, #106	; 0x6a
 800d778:	4da0      	ldr	r5, [pc, #640]	; (800d9fc <_strtod_l+0x834>)
 800d77a:	9304      	str	r3, [sp, #16]
 800d77c:	4650      	mov	r0, sl
 800d77e:	4659      	mov	r1, fp
 800d780:	2300      	movs	r3, #0
 800d782:	f1b8 0f00 	cmp.w	r8, #0
 800d786:	f300 810a 	bgt.w	800d99e <_strtod_l+0x7d6>
 800d78a:	b10b      	cbz	r3, 800d790 <_strtod_l+0x5c8>
 800d78c:	4682      	mov	sl, r0
 800d78e:	468b      	mov	fp, r1
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	b1bb      	cbz	r3, 800d7c4 <_strtod_l+0x5fc>
 800d794:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d798:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	4659      	mov	r1, fp
 800d7a0:	dd10      	ble.n	800d7c4 <_strtod_l+0x5fc>
 800d7a2:	2b1f      	cmp	r3, #31
 800d7a4:	f340 8107 	ble.w	800d9b6 <_strtod_l+0x7ee>
 800d7a8:	2b34      	cmp	r3, #52	; 0x34
 800d7aa:	bfde      	ittt	le
 800d7ac:	3b20      	suble	r3, #32
 800d7ae:	f04f 32ff 	movle.w	r2, #4294967295
 800d7b2:	fa02 f303 	lslle.w	r3, r2, r3
 800d7b6:	f04f 0a00 	mov.w	sl, #0
 800d7ba:	bfcc      	ite	gt
 800d7bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d7c0:	ea03 0b01 	andle.w	fp, r3, r1
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	4659      	mov	r1, fp
 800d7cc:	f7f3 f97c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d1ac      	bne.n	800d72e <_strtod_l+0x566>
 800d7d4:	9b07      	ldr	r3, [sp, #28]
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	9a05      	ldr	r2, [sp, #20]
 800d7da:	9908      	ldr	r1, [sp, #32]
 800d7dc:	4623      	mov	r3, r4
 800d7de:	4648      	mov	r0, r9
 800d7e0:	f002 f842 	bl	800f868 <__s2b>
 800d7e4:	9007      	str	r0, [sp, #28]
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	f43f af08 	beq.w	800d5fc <_strtod_l+0x434>
 800d7ec:	9a06      	ldr	r2, [sp, #24]
 800d7ee:	9b06      	ldr	r3, [sp, #24]
 800d7f0:	2a00      	cmp	r2, #0
 800d7f2:	f1c3 0300 	rsb	r3, r3, #0
 800d7f6:	bfa8      	it	ge
 800d7f8:	2300      	movge	r3, #0
 800d7fa:	930e      	str	r3, [sp, #56]	; 0x38
 800d7fc:	2400      	movs	r4, #0
 800d7fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d802:	9316      	str	r3, [sp, #88]	; 0x58
 800d804:	46a0      	mov	r8, r4
 800d806:	9b07      	ldr	r3, [sp, #28]
 800d808:	4648      	mov	r0, r9
 800d80a:	6859      	ldr	r1, [r3, #4]
 800d80c:	f001 ffa6 	bl	800f75c <_Balloc>
 800d810:	9005      	str	r0, [sp, #20]
 800d812:	2800      	cmp	r0, #0
 800d814:	f43f aef6 	beq.w	800d604 <_strtod_l+0x43c>
 800d818:	9b07      	ldr	r3, [sp, #28]
 800d81a:	691a      	ldr	r2, [r3, #16]
 800d81c:	3202      	adds	r2, #2
 800d81e:	f103 010c 	add.w	r1, r3, #12
 800d822:	0092      	lsls	r2, r2, #2
 800d824:	300c      	adds	r0, #12
 800d826:	f7fe fdbf 	bl	800c3a8 <memcpy>
 800d82a:	aa1e      	add	r2, sp, #120	; 0x78
 800d82c:	a91d      	add	r1, sp, #116	; 0x74
 800d82e:	ec4b ab10 	vmov	d0, sl, fp
 800d832:	4648      	mov	r0, r9
 800d834:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d838:	f002 fad2 	bl	800fde0 <__d2b>
 800d83c:	901c      	str	r0, [sp, #112]	; 0x70
 800d83e:	2800      	cmp	r0, #0
 800d840:	f43f aee0 	beq.w	800d604 <_strtod_l+0x43c>
 800d844:	2101      	movs	r1, #1
 800d846:	4648      	mov	r0, r9
 800d848:	f002 f89a 	bl	800f980 <__i2b>
 800d84c:	4680      	mov	r8, r0
 800d84e:	2800      	cmp	r0, #0
 800d850:	f43f aed8 	beq.w	800d604 <_strtod_l+0x43c>
 800d854:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d856:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d858:	2e00      	cmp	r6, #0
 800d85a:	bfab      	itete	ge
 800d85c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d85e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d860:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d862:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d864:	bfac      	ite	ge
 800d866:	18f7      	addge	r7, r6, r3
 800d868:	1b9d      	sublt	r5, r3, r6
 800d86a:	9b04      	ldr	r3, [sp, #16]
 800d86c:	1af6      	subs	r6, r6, r3
 800d86e:	4416      	add	r6, r2
 800d870:	4b63      	ldr	r3, [pc, #396]	; (800da00 <_strtod_l+0x838>)
 800d872:	3e01      	subs	r6, #1
 800d874:	429e      	cmp	r6, r3
 800d876:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d87a:	f280 80af 	bge.w	800d9dc <_strtod_l+0x814>
 800d87e:	1b9b      	subs	r3, r3, r6
 800d880:	2b1f      	cmp	r3, #31
 800d882:	eba2 0203 	sub.w	r2, r2, r3
 800d886:	f04f 0101 	mov.w	r1, #1
 800d88a:	f300 809b 	bgt.w	800d9c4 <_strtod_l+0x7fc>
 800d88e:	fa01 f303 	lsl.w	r3, r1, r3
 800d892:	930f      	str	r3, [sp, #60]	; 0x3c
 800d894:	2300      	movs	r3, #0
 800d896:	930a      	str	r3, [sp, #40]	; 0x28
 800d898:	18be      	adds	r6, r7, r2
 800d89a:	9b04      	ldr	r3, [sp, #16]
 800d89c:	42b7      	cmp	r7, r6
 800d89e:	4415      	add	r5, r2
 800d8a0:	441d      	add	r5, r3
 800d8a2:	463b      	mov	r3, r7
 800d8a4:	bfa8      	it	ge
 800d8a6:	4633      	movge	r3, r6
 800d8a8:	42ab      	cmp	r3, r5
 800d8aa:	bfa8      	it	ge
 800d8ac:	462b      	movge	r3, r5
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	bfc2      	ittt	gt
 800d8b2:	1af6      	subgt	r6, r6, r3
 800d8b4:	1aed      	subgt	r5, r5, r3
 800d8b6:	1aff      	subgt	r7, r7, r3
 800d8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ba:	b1bb      	cbz	r3, 800d8ec <_strtod_l+0x724>
 800d8bc:	4641      	mov	r1, r8
 800d8be:	461a      	mov	r2, r3
 800d8c0:	4648      	mov	r0, r9
 800d8c2:	f002 f8fd 	bl	800fac0 <__pow5mult>
 800d8c6:	4680      	mov	r8, r0
 800d8c8:	2800      	cmp	r0, #0
 800d8ca:	f43f ae9b 	beq.w	800d604 <_strtod_l+0x43c>
 800d8ce:	4601      	mov	r1, r0
 800d8d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d8d2:	4648      	mov	r0, r9
 800d8d4:	f002 f85d 	bl	800f992 <__multiply>
 800d8d8:	900c      	str	r0, [sp, #48]	; 0x30
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f43f ae92 	beq.w	800d604 <_strtod_l+0x43c>
 800d8e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8e2:	4648      	mov	r0, r9
 800d8e4:	f001 ff6e 	bl	800f7c4 <_Bfree>
 800d8e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ea:	931c      	str	r3, [sp, #112]	; 0x70
 800d8ec:	2e00      	cmp	r6, #0
 800d8ee:	dc7a      	bgt.n	800d9e6 <_strtod_l+0x81e>
 800d8f0:	9b06      	ldr	r3, [sp, #24]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	dd08      	ble.n	800d908 <_strtod_l+0x740>
 800d8f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8f8:	9905      	ldr	r1, [sp, #20]
 800d8fa:	4648      	mov	r0, r9
 800d8fc:	f002 f8e0 	bl	800fac0 <__pow5mult>
 800d900:	9005      	str	r0, [sp, #20]
 800d902:	2800      	cmp	r0, #0
 800d904:	f43f ae7e 	beq.w	800d604 <_strtod_l+0x43c>
 800d908:	2d00      	cmp	r5, #0
 800d90a:	dd08      	ble.n	800d91e <_strtod_l+0x756>
 800d90c:	462a      	mov	r2, r5
 800d90e:	9905      	ldr	r1, [sp, #20]
 800d910:	4648      	mov	r0, r9
 800d912:	f002 f923 	bl	800fb5c <__lshift>
 800d916:	9005      	str	r0, [sp, #20]
 800d918:	2800      	cmp	r0, #0
 800d91a:	f43f ae73 	beq.w	800d604 <_strtod_l+0x43c>
 800d91e:	2f00      	cmp	r7, #0
 800d920:	dd08      	ble.n	800d934 <_strtod_l+0x76c>
 800d922:	4641      	mov	r1, r8
 800d924:	463a      	mov	r2, r7
 800d926:	4648      	mov	r0, r9
 800d928:	f002 f918 	bl	800fb5c <__lshift>
 800d92c:	4680      	mov	r8, r0
 800d92e:	2800      	cmp	r0, #0
 800d930:	f43f ae68 	beq.w	800d604 <_strtod_l+0x43c>
 800d934:	9a05      	ldr	r2, [sp, #20]
 800d936:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d938:	4648      	mov	r0, r9
 800d93a:	f002 f97d 	bl	800fc38 <__mdiff>
 800d93e:	4604      	mov	r4, r0
 800d940:	2800      	cmp	r0, #0
 800d942:	f43f ae5f 	beq.w	800d604 <_strtod_l+0x43c>
 800d946:	68c3      	ldr	r3, [r0, #12]
 800d948:	930c      	str	r3, [sp, #48]	; 0x30
 800d94a:	2300      	movs	r3, #0
 800d94c:	60c3      	str	r3, [r0, #12]
 800d94e:	4641      	mov	r1, r8
 800d950:	f002 f958 	bl	800fc04 <__mcmp>
 800d954:	2800      	cmp	r0, #0
 800d956:	da55      	bge.n	800da04 <_strtod_l+0x83c>
 800d958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d95a:	b9e3      	cbnz	r3, 800d996 <_strtod_l+0x7ce>
 800d95c:	f1ba 0f00 	cmp.w	sl, #0
 800d960:	d119      	bne.n	800d996 <_strtod_l+0x7ce>
 800d962:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d966:	b9b3      	cbnz	r3, 800d996 <_strtod_l+0x7ce>
 800d968:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d96c:	0d1b      	lsrs	r3, r3, #20
 800d96e:	051b      	lsls	r3, r3, #20
 800d970:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d974:	d90f      	bls.n	800d996 <_strtod_l+0x7ce>
 800d976:	6963      	ldr	r3, [r4, #20]
 800d978:	b913      	cbnz	r3, 800d980 <_strtod_l+0x7b8>
 800d97a:	6923      	ldr	r3, [r4, #16]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	dd0a      	ble.n	800d996 <_strtod_l+0x7ce>
 800d980:	4621      	mov	r1, r4
 800d982:	2201      	movs	r2, #1
 800d984:	4648      	mov	r0, r9
 800d986:	f002 f8e9 	bl	800fb5c <__lshift>
 800d98a:	4641      	mov	r1, r8
 800d98c:	4604      	mov	r4, r0
 800d98e:	f002 f939 	bl	800fc04 <__mcmp>
 800d992:	2800      	cmp	r0, #0
 800d994:	dc67      	bgt.n	800da66 <_strtod_l+0x89e>
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d171      	bne.n	800da80 <_strtod_l+0x8b8>
 800d99c:	e63d      	b.n	800d61a <_strtod_l+0x452>
 800d99e:	f018 0f01 	tst.w	r8, #1
 800d9a2:	d004      	beq.n	800d9ae <_strtod_l+0x7e6>
 800d9a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9a8:	f7f2 fe26 	bl	80005f8 <__aeabi_dmul>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d9b2:	3508      	adds	r5, #8
 800d9b4:	e6e5      	b.n	800d782 <_strtod_l+0x5ba>
 800d9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d9be:	ea03 0a0a 	and.w	sl, r3, sl
 800d9c2:	e6ff      	b.n	800d7c4 <_strtod_l+0x5fc>
 800d9c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d9c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d9cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d9d0:	36e2      	adds	r6, #226	; 0xe2
 800d9d2:	fa01 f306 	lsl.w	r3, r1, r6
 800d9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9d8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d9da:	e75d      	b.n	800d898 <_strtod_l+0x6d0>
 800d9dc:	2300      	movs	r3, #0
 800d9de:	930a      	str	r3, [sp, #40]	; 0x28
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9e4:	e758      	b.n	800d898 <_strtod_l+0x6d0>
 800d9e6:	4632      	mov	r2, r6
 800d9e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d9ea:	4648      	mov	r0, r9
 800d9ec:	f002 f8b6 	bl	800fb5c <__lshift>
 800d9f0:	901c      	str	r0, [sp, #112]	; 0x70
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	f47f af7c 	bne.w	800d8f0 <_strtod_l+0x728>
 800d9f8:	e604      	b.n	800d604 <_strtod_l+0x43c>
 800d9fa:	bf00      	nop
 800d9fc:	08010b48 	.word	0x08010b48
 800da00:	fffffc02 	.word	0xfffffc02
 800da04:	465d      	mov	r5, fp
 800da06:	f040 8086 	bne.w	800db16 <_strtod_l+0x94e>
 800da0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da10:	b32a      	cbz	r2, 800da5e <_strtod_l+0x896>
 800da12:	4aaf      	ldr	r2, [pc, #700]	; (800dcd0 <_strtod_l+0xb08>)
 800da14:	4293      	cmp	r3, r2
 800da16:	d153      	bne.n	800dac0 <_strtod_l+0x8f8>
 800da18:	9b04      	ldr	r3, [sp, #16]
 800da1a:	4650      	mov	r0, sl
 800da1c:	b1d3      	cbz	r3, 800da54 <_strtod_l+0x88c>
 800da1e:	4aad      	ldr	r2, [pc, #692]	; (800dcd4 <_strtod_l+0xb0c>)
 800da20:	402a      	ands	r2, r5
 800da22:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800da26:	f04f 31ff 	mov.w	r1, #4294967295
 800da2a:	d816      	bhi.n	800da5a <_strtod_l+0x892>
 800da2c:	0d12      	lsrs	r2, r2, #20
 800da2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800da32:	fa01 f303 	lsl.w	r3, r1, r3
 800da36:	4298      	cmp	r0, r3
 800da38:	d142      	bne.n	800dac0 <_strtod_l+0x8f8>
 800da3a:	4ba7      	ldr	r3, [pc, #668]	; (800dcd8 <_strtod_l+0xb10>)
 800da3c:	429d      	cmp	r5, r3
 800da3e:	d102      	bne.n	800da46 <_strtod_l+0x87e>
 800da40:	3001      	adds	r0, #1
 800da42:	f43f addf 	beq.w	800d604 <_strtod_l+0x43c>
 800da46:	4ba3      	ldr	r3, [pc, #652]	; (800dcd4 <_strtod_l+0xb0c>)
 800da48:	402b      	ands	r3, r5
 800da4a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800da4e:	f04f 0a00 	mov.w	sl, #0
 800da52:	e7a0      	b.n	800d996 <_strtod_l+0x7ce>
 800da54:	f04f 33ff 	mov.w	r3, #4294967295
 800da58:	e7ed      	b.n	800da36 <_strtod_l+0x86e>
 800da5a:	460b      	mov	r3, r1
 800da5c:	e7eb      	b.n	800da36 <_strtod_l+0x86e>
 800da5e:	bb7b      	cbnz	r3, 800dac0 <_strtod_l+0x8f8>
 800da60:	f1ba 0f00 	cmp.w	sl, #0
 800da64:	d12c      	bne.n	800dac0 <_strtod_l+0x8f8>
 800da66:	9904      	ldr	r1, [sp, #16]
 800da68:	4a9a      	ldr	r2, [pc, #616]	; (800dcd4 <_strtod_l+0xb0c>)
 800da6a:	465b      	mov	r3, fp
 800da6c:	b1f1      	cbz	r1, 800daac <_strtod_l+0x8e4>
 800da6e:	ea02 010b 	and.w	r1, r2, fp
 800da72:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800da76:	dc19      	bgt.n	800daac <_strtod_l+0x8e4>
 800da78:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800da7c:	f77f ae5b 	ble.w	800d736 <_strtod_l+0x56e>
 800da80:	4a96      	ldr	r2, [pc, #600]	; (800dcdc <_strtod_l+0xb14>)
 800da82:	2300      	movs	r3, #0
 800da84:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800da88:	4650      	mov	r0, sl
 800da8a:	4659      	mov	r1, fp
 800da8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800da90:	f7f2 fdb2 	bl	80005f8 <__aeabi_dmul>
 800da94:	4682      	mov	sl, r0
 800da96:	468b      	mov	fp, r1
 800da98:	2900      	cmp	r1, #0
 800da9a:	f47f adbe 	bne.w	800d61a <_strtod_l+0x452>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	f47f adbb 	bne.w	800d61a <_strtod_l+0x452>
 800daa4:	2322      	movs	r3, #34	; 0x22
 800daa6:	f8c9 3000 	str.w	r3, [r9]
 800daaa:	e5b6      	b.n	800d61a <_strtod_l+0x452>
 800daac:	4013      	ands	r3, r2
 800daae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dab2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dab6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800daba:	f04f 3aff 	mov.w	sl, #4294967295
 800dabe:	e76a      	b.n	800d996 <_strtod_l+0x7ce>
 800dac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dac2:	b193      	cbz	r3, 800daea <_strtod_l+0x922>
 800dac4:	422b      	tst	r3, r5
 800dac6:	f43f af66 	beq.w	800d996 <_strtod_l+0x7ce>
 800daca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dacc:	9a04      	ldr	r2, [sp, #16]
 800dace:	4650      	mov	r0, sl
 800dad0:	4659      	mov	r1, fp
 800dad2:	b173      	cbz	r3, 800daf2 <_strtod_l+0x92a>
 800dad4:	f7ff fb5c 	bl	800d190 <sulp>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dae0:	f7f2 fbd4 	bl	800028c <__adddf3>
 800dae4:	4682      	mov	sl, r0
 800dae6:	468b      	mov	fp, r1
 800dae8:	e755      	b.n	800d996 <_strtod_l+0x7ce>
 800daea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800daec:	ea13 0f0a 	tst.w	r3, sl
 800daf0:	e7e9      	b.n	800dac6 <_strtod_l+0x8fe>
 800daf2:	f7ff fb4d 	bl	800d190 <sulp>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dafe:	f7f2 fbc3 	bl	8000288 <__aeabi_dsub>
 800db02:	2200      	movs	r2, #0
 800db04:	2300      	movs	r3, #0
 800db06:	4682      	mov	sl, r0
 800db08:	468b      	mov	fp, r1
 800db0a:	f7f2 ffdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800db0e:	2800      	cmp	r0, #0
 800db10:	f47f ae11 	bne.w	800d736 <_strtod_l+0x56e>
 800db14:	e73f      	b.n	800d996 <_strtod_l+0x7ce>
 800db16:	4641      	mov	r1, r8
 800db18:	4620      	mov	r0, r4
 800db1a:	f002 f9b0 	bl	800fe7e <__ratio>
 800db1e:	ec57 6b10 	vmov	r6, r7, d0
 800db22:	2200      	movs	r2, #0
 800db24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db28:	ee10 0a10 	vmov	r0, s0
 800db2c:	4639      	mov	r1, r7
 800db2e:	f7f2 ffdf 	bl	8000af0 <__aeabi_dcmple>
 800db32:	2800      	cmp	r0, #0
 800db34:	d077      	beq.n	800dc26 <_strtod_l+0xa5e>
 800db36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d04a      	beq.n	800dbd2 <_strtod_l+0xa0a>
 800db3c:	4b68      	ldr	r3, [pc, #416]	; (800dce0 <_strtod_l+0xb18>)
 800db3e:	2200      	movs	r2, #0
 800db40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800db44:	4f66      	ldr	r7, [pc, #408]	; (800dce0 <_strtod_l+0xb18>)
 800db46:	2600      	movs	r6, #0
 800db48:	4b62      	ldr	r3, [pc, #392]	; (800dcd4 <_strtod_l+0xb0c>)
 800db4a:	402b      	ands	r3, r5
 800db4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800db4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db50:	4b64      	ldr	r3, [pc, #400]	; (800dce4 <_strtod_l+0xb1c>)
 800db52:	429a      	cmp	r2, r3
 800db54:	f040 80ce 	bne.w	800dcf4 <_strtod_l+0xb2c>
 800db58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db60:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800db64:	ec4b ab10 	vmov	d0, sl, fp
 800db68:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800db6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800db70:	f002 f8c0 	bl	800fcf4 <__ulp>
 800db74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db78:	ec53 2b10 	vmov	r2, r3, d0
 800db7c:	f7f2 fd3c 	bl	80005f8 <__aeabi_dmul>
 800db80:	4652      	mov	r2, sl
 800db82:	465b      	mov	r3, fp
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	460b      	mov	r3, r1
 800db8a:	4952      	ldr	r1, [pc, #328]	; (800dcd4 <_strtod_l+0xb0c>)
 800db8c:	4a56      	ldr	r2, [pc, #344]	; (800dce8 <_strtod_l+0xb20>)
 800db8e:	4019      	ands	r1, r3
 800db90:	4291      	cmp	r1, r2
 800db92:	4682      	mov	sl, r0
 800db94:	d95b      	bls.n	800dc4e <_strtod_l+0xa86>
 800db96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db98:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d103      	bne.n	800dba8 <_strtod_l+0x9e0>
 800dba0:	9b08      	ldr	r3, [sp, #32]
 800dba2:	3301      	adds	r3, #1
 800dba4:	f43f ad2e 	beq.w	800d604 <_strtod_l+0x43c>
 800dba8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800dcd8 <_strtod_l+0xb10>
 800dbac:	f04f 3aff 	mov.w	sl, #4294967295
 800dbb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dbb2:	4648      	mov	r0, r9
 800dbb4:	f001 fe06 	bl	800f7c4 <_Bfree>
 800dbb8:	9905      	ldr	r1, [sp, #20]
 800dbba:	4648      	mov	r0, r9
 800dbbc:	f001 fe02 	bl	800f7c4 <_Bfree>
 800dbc0:	4641      	mov	r1, r8
 800dbc2:	4648      	mov	r0, r9
 800dbc4:	f001 fdfe 	bl	800f7c4 <_Bfree>
 800dbc8:	4621      	mov	r1, r4
 800dbca:	4648      	mov	r0, r9
 800dbcc:	f001 fdfa 	bl	800f7c4 <_Bfree>
 800dbd0:	e619      	b.n	800d806 <_strtod_l+0x63e>
 800dbd2:	f1ba 0f00 	cmp.w	sl, #0
 800dbd6:	d11a      	bne.n	800dc0e <_strtod_l+0xa46>
 800dbd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbdc:	b9eb      	cbnz	r3, 800dc1a <_strtod_l+0xa52>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	4b3f      	ldr	r3, [pc, #252]	; (800dce0 <_strtod_l+0xb18>)
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	f7f2 ff79 	bl	8000adc <__aeabi_dcmplt>
 800dbea:	b9c8      	cbnz	r0, 800dc20 <_strtod_l+0xa58>
 800dbec:	4630      	mov	r0, r6
 800dbee:	4639      	mov	r1, r7
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	4b3e      	ldr	r3, [pc, #248]	; (800dcec <_strtod_l+0xb24>)
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	460f      	mov	r7, r1
 800dbfc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800dc00:	9618      	str	r6, [sp, #96]	; 0x60
 800dc02:	9319      	str	r3, [sp, #100]	; 0x64
 800dc04:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800dc08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dc0c:	e79c      	b.n	800db48 <_strtod_l+0x980>
 800dc0e:	f1ba 0f01 	cmp.w	sl, #1
 800dc12:	d102      	bne.n	800dc1a <_strtod_l+0xa52>
 800dc14:	2d00      	cmp	r5, #0
 800dc16:	f43f ad8e 	beq.w	800d736 <_strtod_l+0x56e>
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	4b34      	ldr	r3, [pc, #208]	; (800dcf0 <_strtod_l+0xb28>)
 800dc1e:	e78f      	b.n	800db40 <_strtod_l+0x978>
 800dc20:	2600      	movs	r6, #0
 800dc22:	4f32      	ldr	r7, [pc, #200]	; (800dcec <_strtod_l+0xb24>)
 800dc24:	e7ea      	b.n	800dbfc <_strtod_l+0xa34>
 800dc26:	4b31      	ldr	r3, [pc, #196]	; (800dcec <_strtod_l+0xb24>)
 800dc28:	4630      	mov	r0, r6
 800dc2a:	4639      	mov	r1, r7
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f7f2 fce3 	bl	80005f8 <__aeabi_dmul>
 800dc32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc34:	4606      	mov	r6, r0
 800dc36:	460f      	mov	r7, r1
 800dc38:	b933      	cbnz	r3, 800dc48 <_strtod_l+0xa80>
 800dc3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc3e:	9010      	str	r0, [sp, #64]	; 0x40
 800dc40:	9311      	str	r3, [sp, #68]	; 0x44
 800dc42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dc46:	e7df      	b.n	800dc08 <_strtod_l+0xa40>
 800dc48:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800dc4c:	e7f9      	b.n	800dc42 <_strtod_l+0xa7a>
 800dc4e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dc52:	9b04      	ldr	r3, [sp, #16]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d1ab      	bne.n	800dbb0 <_strtod_l+0x9e8>
 800dc58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc5c:	0d1b      	lsrs	r3, r3, #20
 800dc5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc60:	051b      	lsls	r3, r3, #20
 800dc62:	429a      	cmp	r2, r3
 800dc64:	465d      	mov	r5, fp
 800dc66:	d1a3      	bne.n	800dbb0 <_strtod_l+0x9e8>
 800dc68:	4639      	mov	r1, r7
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	f7f2 ff74 	bl	8000b58 <__aeabi_d2iz>
 800dc70:	f7f2 fc58 	bl	8000524 <__aeabi_i2d>
 800dc74:	460b      	mov	r3, r1
 800dc76:	4602      	mov	r2, r0
 800dc78:	4639      	mov	r1, r7
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	f7f2 fb04 	bl	8000288 <__aeabi_dsub>
 800dc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc82:	4606      	mov	r6, r0
 800dc84:	460f      	mov	r7, r1
 800dc86:	b933      	cbnz	r3, 800dc96 <_strtod_l+0xace>
 800dc88:	f1ba 0f00 	cmp.w	sl, #0
 800dc8c:	d103      	bne.n	800dc96 <_strtod_l+0xace>
 800dc8e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800dc92:	2d00      	cmp	r5, #0
 800dc94:	d06d      	beq.n	800dd72 <_strtod_l+0xbaa>
 800dc96:	a30a      	add	r3, pc, #40	; (adr r3, 800dcc0 <_strtod_l+0xaf8>)
 800dc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	4639      	mov	r1, r7
 800dca0:	f7f2 ff1c 	bl	8000adc <__aeabi_dcmplt>
 800dca4:	2800      	cmp	r0, #0
 800dca6:	f47f acb8 	bne.w	800d61a <_strtod_l+0x452>
 800dcaa:	a307      	add	r3, pc, #28	; (adr r3, 800dcc8 <_strtod_l+0xb00>)
 800dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 ff30 	bl	8000b18 <__aeabi_dcmpgt>
 800dcb8:	2800      	cmp	r0, #0
 800dcba:	f43f af79 	beq.w	800dbb0 <_strtod_l+0x9e8>
 800dcbe:	e4ac      	b.n	800d61a <_strtod_l+0x452>
 800dcc0:	94a03595 	.word	0x94a03595
 800dcc4:	3fdfffff 	.word	0x3fdfffff
 800dcc8:	35afe535 	.word	0x35afe535
 800dccc:	3fe00000 	.word	0x3fe00000
 800dcd0:	000fffff 	.word	0x000fffff
 800dcd4:	7ff00000 	.word	0x7ff00000
 800dcd8:	7fefffff 	.word	0x7fefffff
 800dcdc:	39500000 	.word	0x39500000
 800dce0:	3ff00000 	.word	0x3ff00000
 800dce4:	7fe00000 	.word	0x7fe00000
 800dce8:	7c9fffff 	.word	0x7c9fffff
 800dcec:	3fe00000 	.word	0x3fe00000
 800dcf0:	bff00000 	.word	0xbff00000
 800dcf4:	9b04      	ldr	r3, [sp, #16]
 800dcf6:	b333      	cbz	r3, 800dd46 <_strtod_l+0xb7e>
 800dcf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcfa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dcfe:	d822      	bhi.n	800dd46 <_strtod_l+0xb7e>
 800dd00:	a327      	add	r3, pc, #156	; (adr r3, 800dda0 <_strtod_l+0xbd8>)
 800dd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd06:	4630      	mov	r0, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	f7f2 fef1 	bl	8000af0 <__aeabi_dcmple>
 800dd0e:	b1a0      	cbz	r0, 800dd3a <_strtod_l+0xb72>
 800dd10:	4639      	mov	r1, r7
 800dd12:	4630      	mov	r0, r6
 800dd14:	f7f2 ff48 	bl	8000ba8 <__aeabi_d2uiz>
 800dd18:	2800      	cmp	r0, #0
 800dd1a:	bf08      	it	eq
 800dd1c:	2001      	moveq	r0, #1
 800dd1e:	f7f2 fbf1 	bl	8000504 <__aeabi_ui2d>
 800dd22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd24:	4606      	mov	r6, r0
 800dd26:	460f      	mov	r7, r1
 800dd28:	bb03      	cbnz	r3, 800dd6c <_strtod_l+0xba4>
 800dd2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd2e:	9012      	str	r0, [sp, #72]	; 0x48
 800dd30:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dd36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dd3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd3e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dd42:	1a9b      	subs	r3, r3, r2
 800dd44:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd46:	ed9d 0b08 	vldr	d0, [sp, #32]
 800dd4a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dd4e:	f001 ffd1 	bl	800fcf4 <__ulp>
 800dd52:	4650      	mov	r0, sl
 800dd54:	ec53 2b10 	vmov	r2, r3, d0
 800dd58:	4659      	mov	r1, fp
 800dd5a:	f7f2 fc4d 	bl	80005f8 <__aeabi_dmul>
 800dd5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dd62:	f7f2 fa93 	bl	800028c <__adddf3>
 800dd66:	4682      	mov	sl, r0
 800dd68:	468b      	mov	fp, r1
 800dd6a:	e772      	b.n	800dc52 <_strtod_l+0xa8a>
 800dd6c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800dd70:	e7df      	b.n	800dd32 <_strtod_l+0xb6a>
 800dd72:	a30d      	add	r3, pc, #52	; (adr r3, 800dda8 <_strtod_l+0xbe0>)
 800dd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd78:	f7f2 feb0 	bl	8000adc <__aeabi_dcmplt>
 800dd7c:	e79c      	b.n	800dcb8 <_strtod_l+0xaf0>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	930d      	str	r3, [sp, #52]	; 0x34
 800dd82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dd84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	f7ff ba61 	b.w	800d24e <_strtod_l+0x86>
 800dd8c:	2b65      	cmp	r3, #101	; 0x65
 800dd8e:	f04f 0200 	mov.w	r2, #0
 800dd92:	f43f ab4e 	beq.w	800d432 <_strtod_l+0x26a>
 800dd96:	2101      	movs	r1, #1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	9104      	str	r1, [sp, #16]
 800dd9c:	f7ff bacb 	b.w	800d336 <_strtod_l+0x16e>
 800dda0:	ffc00000 	.word	0xffc00000
 800dda4:	41dfffff 	.word	0x41dfffff
 800dda8:	94a03595 	.word	0x94a03595
 800ddac:	3fcfffff 	.word	0x3fcfffff

0800ddb0 <_strtod_r>:
 800ddb0:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <_strtod_r+0x18>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	b410      	push	{r4}
 800ddb6:	6a1b      	ldr	r3, [r3, #32]
 800ddb8:	4c04      	ldr	r4, [pc, #16]	; (800ddcc <_strtod_r+0x1c>)
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bf08      	it	eq
 800ddbe:	4623      	moveq	r3, r4
 800ddc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc4:	f7ff ba00 	b.w	800d1c8 <_strtod_l>
 800ddc8:	20000040 	.word	0x20000040
 800ddcc:	200000a4 	.word	0x200000a4

0800ddd0 <_strtol_l.isra.0>:
 800ddd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddd4:	4680      	mov	r8, r0
 800ddd6:	4689      	mov	r9, r1
 800ddd8:	4692      	mov	sl, r2
 800ddda:	461e      	mov	r6, r3
 800dddc:	460f      	mov	r7, r1
 800ddde:	463d      	mov	r5, r7
 800dde0:	9808      	ldr	r0, [sp, #32]
 800dde2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dde6:	f001 fc27 	bl	800f638 <__locale_ctype_ptr_l>
 800ddea:	4420      	add	r0, r4
 800ddec:	7843      	ldrb	r3, [r0, #1]
 800ddee:	f013 0308 	ands.w	r3, r3, #8
 800ddf2:	d132      	bne.n	800de5a <_strtol_l.isra.0+0x8a>
 800ddf4:	2c2d      	cmp	r4, #45	; 0x2d
 800ddf6:	d132      	bne.n	800de5e <_strtol_l.isra.0+0x8e>
 800ddf8:	787c      	ldrb	r4, [r7, #1]
 800ddfa:	1cbd      	adds	r5, r7, #2
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	2e00      	cmp	r6, #0
 800de00:	d05d      	beq.n	800debe <_strtol_l.isra.0+0xee>
 800de02:	2e10      	cmp	r6, #16
 800de04:	d109      	bne.n	800de1a <_strtol_l.isra.0+0x4a>
 800de06:	2c30      	cmp	r4, #48	; 0x30
 800de08:	d107      	bne.n	800de1a <_strtol_l.isra.0+0x4a>
 800de0a:	782b      	ldrb	r3, [r5, #0]
 800de0c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de10:	2b58      	cmp	r3, #88	; 0x58
 800de12:	d14f      	bne.n	800deb4 <_strtol_l.isra.0+0xe4>
 800de14:	786c      	ldrb	r4, [r5, #1]
 800de16:	2610      	movs	r6, #16
 800de18:	3502      	adds	r5, #2
 800de1a:	2a00      	cmp	r2, #0
 800de1c:	bf14      	ite	ne
 800de1e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800de22:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800de26:	2700      	movs	r7, #0
 800de28:	fbb1 fcf6 	udiv	ip, r1, r6
 800de2c:	4638      	mov	r0, r7
 800de2e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800de32:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800de36:	2b09      	cmp	r3, #9
 800de38:	d817      	bhi.n	800de6a <_strtol_l.isra.0+0x9a>
 800de3a:	461c      	mov	r4, r3
 800de3c:	42a6      	cmp	r6, r4
 800de3e:	dd23      	ble.n	800de88 <_strtol_l.isra.0+0xb8>
 800de40:	1c7b      	adds	r3, r7, #1
 800de42:	d007      	beq.n	800de54 <_strtol_l.isra.0+0x84>
 800de44:	4584      	cmp	ip, r0
 800de46:	d31c      	bcc.n	800de82 <_strtol_l.isra.0+0xb2>
 800de48:	d101      	bne.n	800de4e <_strtol_l.isra.0+0x7e>
 800de4a:	45a6      	cmp	lr, r4
 800de4c:	db19      	blt.n	800de82 <_strtol_l.isra.0+0xb2>
 800de4e:	fb00 4006 	mla	r0, r0, r6, r4
 800de52:	2701      	movs	r7, #1
 800de54:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de58:	e7eb      	b.n	800de32 <_strtol_l.isra.0+0x62>
 800de5a:	462f      	mov	r7, r5
 800de5c:	e7bf      	b.n	800ddde <_strtol_l.isra.0+0xe>
 800de5e:	2c2b      	cmp	r4, #43	; 0x2b
 800de60:	bf04      	itt	eq
 800de62:	1cbd      	addeq	r5, r7, #2
 800de64:	787c      	ldrbeq	r4, [r7, #1]
 800de66:	461a      	mov	r2, r3
 800de68:	e7c9      	b.n	800ddfe <_strtol_l.isra.0+0x2e>
 800de6a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800de6e:	2b19      	cmp	r3, #25
 800de70:	d801      	bhi.n	800de76 <_strtol_l.isra.0+0xa6>
 800de72:	3c37      	subs	r4, #55	; 0x37
 800de74:	e7e2      	b.n	800de3c <_strtol_l.isra.0+0x6c>
 800de76:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800de7a:	2b19      	cmp	r3, #25
 800de7c:	d804      	bhi.n	800de88 <_strtol_l.isra.0+0xb8>
 800de7e:	3c57      	subs	r4, #87	; 0x57
 800de80:	e7dc      	b.n	800de3c <_strtol_l.isra.0+0x6c>
 800de82:	f04f 37ff 	mov.w	r7, #4294967295
 800de86:	e7e5      	b.n	800de54 <_strtol_l.isra.0+0x84>
 800de88:	1c7b      	adds	r3, r7, #1
 800de8a:	d108      	bne.n	800de9e <_strtol_l.isra.0+0xce>
 800de8c:	2322      	movs	r3, #34	; 0x22
 800de8e:	f8c8 3000 	str.w	r3, [r8]
 800de92:	4608      	mov	r0, r1
 800de94:	f1ba 0f00 	cmp.w	sl, #0
 800de98:	d107      	bne.n	800deaa <_strtol_l.isra.0+0xda>
 800de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de9e:	b102      	cbz	r2, 800dea2 <_strtol_l.isra.0+0xd2>
 800dea0:	4240      	negs	r0, r0
 800dea2:	f1ba 0f00 	cmp.w	sl, #0
 800dea6:	d0f8      	beq.n	800de9a <_strtol_l.isra.0+0xca>
 800dea8:	b10f      	cbz	r7, 800deae <_strtol_l.isra.0+0xde>
 800deaa:	f105 39ff 	add.w	r9, r5, #4294967295
 800deae:	f8ca 9000 	str.w	r9, [sl]
 800deb2:	e7f2      	b.n	800de9a <_strtol_l.isra.0+0xca>
 800deb4:	2430      	movs	r4, #48	; 0x30
 800deb6:	2e00      	cmp	r6, #0
 800deb8:	d1af      	bne.n	800de1a <_strtol_l.isra.0+0x4a>
 800deba:	2608      	movs	r6, #8
 800debc:	e7ad      	b.n	800de1a <_strtol_l.isra.0+0x4a>
 800debe:	2c30      	cmp	r4, #48	; 0x30
 800dec0:	d0a3      	beq.n	800de0a <_strtol_l.isra.0+0x3a>
 800dec2:	260a      	movs	r6, #10
 800dec4:	e7a9      	b.n	800de1a <_strtol_l.isra.0+0x4a>
	...

0800dec8 <_strtol_r>:
 800dec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deca:	4c06      	ldr	r4, [pc, #24]	; (800dee4 <_strtol_r+0x1c>)
 800decc:	4d06      	ldr	r5, [pc, #24]	; (800dee8 <_strtol_r+0x20>)
 800dece:	6824      	ldr	r4, [r4, #0]
 800ded0:	6a24      	ldr	r4, [r4, #32]
 800ded2:	2c00      	cmp	r4, #0
 800ded4:	bf08      	it	eq
 800ded6:	462c      	moveq	r4, r5
 800ded8:	9400      	str	r4, [sp, #0]
 800deda:	f7ff ff79 	bl	800ddd0 <_strtol_l.isra.0>
 800dede:	b003      	add	sp, #12
 800dee0:	bd30      	pop	{r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	20000040 	.word	0x20000040
 800dee8:	200000a4 	.word	0x200000a4

0800deec <__swbuf_r>:
 800deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deee:	460e      	mov	r6, r1
 800def0:	4614      	mov	r4, r2
 800def2:	4605      	mov	r5, r0
 800def4:	b118      	cbz	r0, 800defe <__swbuf_r+0x12>
 800def6:	6983      	ldr	r3, [r0, #24]
 800def8:	b90b      	cbnz	r3, 800defe <__swbuf_r+0x12>
 800defa:	f000 ffed 	bl	800eed8 <__sinit>
 800defe:	4b21      	ldr	r3, [pc, #132]	; (800df84 <__swbuf_r+0x98>)
 800df00:	429c      	cmp	r4, r3
 800df02:	d12a      	bne.n	800df5a <__swbuf_r+0x6e>
 800df04:	686c      	ldr	r4, [r5, #4]
 800df06:	69a3      	ldr	r3, [r4, #24]
 800df08:	60a3      	str	r3, [r4, #8]
 800df0a:	89a3      	ldrh	r3, [r4, #12]
 800df0c:	071a      	lsls	r2, r3, #28
 800df0e:	d52e      	bpl.n	800df6e <__swbuf_r+0x82>
 800df10:	6923      	ldr	r3, [r4, #16]
 800df12:	b363      	cbz	r3, 800df6e <__swbuf_r+0x82>
 800df14:	6923      	ldr	r3, [r4, #16]
 800df16:	6820      	ldr	r0, [r4, #0]
 800df18:	1ac0      	subs	r0, r0, r3
 800df1a:	6963      	ldr	r3, [r4, #20]
 800df1c:	b2f6      	uxtb	r6, r6
 800df1e:	4283      	cmp	r3, r0
 800df20:	4637      	mov	r7, r6
 800df22:	dc04      	bgt.n	800df2e <__swbuf_r+0x42>
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f000 ff6c 	bl	800ee04 <_fflush_r>
 800df2c:	bb28      	cbnz	r0, 800df7a <__swbuf_r+0x8e>
 800df2e:	68a3      	ldr	r3, [r4, #8]
 800df30:	3b01      	subs	r3, #1
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	6022      	str	r2, [r4, #0]
 800df3a:	701e      	strb	r6, [r3, #0]
 800df3c:	6963      	ldr	r3, [r4, #20]
 800df3e:	3001      	adds	r0, #1
 800df40:	4283      	cmp	r3, r0
 800df42:	d004      	beq.n	800df4e <__swbuf_r+0x62>
 800df44:	89a3      	ldrh	r3, [r4, #12]
 800df46:	07db      	lsls	r3, r3, #31
 800df48:	d519      	bpl.n	800df7e <__swbuf_r+0x92>
 800df4a:	2e0a      	cmp	r6, #10
 800df4c:	d117      	bne.n	800df7e <__swbuf_r+0x92>
 800df4e:	4621      	mov	r1, r4
 800df50:	4628      	mov	r0, r5
 800df52:	f000 ff57 	bl	800ee04 <_fflush_r>
 800df56:	b190      	cbz	r0, 800df7e <__swbuf_r+0x92>
 800df58:	e00f      	b.n	800df7a <__swbuf_r+0x8e>
 800df5a:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <__swbuf_r+0x9c>)
 800df5c:	429c      	cmp	r4, r3
 800df5e:	d101      	bne.n	800df64 <__swbuf_r+0x78>
 800df60:	68ac      	ldr	r4, [r5, #8]
 800df62:	e7d0      	b.n	800df06 <__swbuf_r+0x1a>
 800df64:	4b09      	ldr	r3, [pc, #36]	; (800df8c <__swbuf_r+0xa0>)
 800df66:	429c      	cmp	r4, r3
 800df68:	bf08      	it	eq
 800df6a:	68ec      	ldreq	r4, [r5, #12]
 800df6c:	e7cb      	b.n	800df06 <__swbuf_r+0x1a>
 800df6e:	4621      	mov	r1, r4
 800df70:	4628      	mov	r0, r5
 800df72:	f000 f80d 	bl	800df90 <__swsetup_r>
 800df76:	2800      	cmp	r0, #0
 800df78:	d0cc      	beq.n	800df14 <__swbuf_r+0x28>
 800df7a:	f04f 37ff 	mov.w	r7, #4294967295
 800df7e:	4638      	mov	r0, r7
 800df80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df82:	bf00      	nop
 800df84:	08010ba0 	.word	0x08010ba0
 800df88:	08010bc0 	.word	0x08010bc0
 800df8c:	08010b80 	.word	0x08010b80

0800df90 <__swsetup_r>:
 800df90:	4b32      	ldr	r3, [pc, #200]	; (800e05c <__swsetup_r+0xcc>)
 800df92:	b570      	push	{r4, r5, r6, lr}
 800df94:	681d      	ldr	r5, [r3, #0]
 800df96:	4606      	mov	r6, r0
 800df98:	460c      	mov	r4, r1
 800df9a:	b125      	cbz	r5, 800dfa6 <__swsetup_r+0x16>
 800df9c:	69ab      	ldr	r3, [r5, #24]
 800df9e:	b913      	cbnz	r3, 800dfa6 <__swsetup_r+0x16>
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	f000 ff99 	bl	800eed8 <__sinit>
 800dfa6:	4b2e      	ldr	r3, [pc, #184]	; (800e060 <__swsetup_r+0xd0>)
 800dfa8:	429c      	cmp	r4, r3
 800dfaa:	d10f      	bne.n	800dfcc <__swsetup_r+0x3c>
 800dfac:	686c      	ldr	r4, [r5, #4]
 800dfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	0715      	lsls	r5, r2, #28
 800dfb6:	d42c      	bmi.n	800e012 <__swsetup_r+0x82>
 800dfb8:	06d0      	lsls	r0, r2, #27
 800dfba:	d411      	bmi.n	800dfe0 <__swsetup_r+0x50>
 800dfbc:	2209      	movs	r2, #9
 800dfbe:	6032      	str	r2, [r6, #0]
 800dfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc4:	81a3      	strh	r3, [r4, #12]
 800dfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dfca:	e03e      	b.n	800e04a <__swsetup_r+0xba>
 800dfcc:	4b25      	ldr	r3, [pc, #148]	; (800e064 <__swsetup_r+0xd4>)
 800dfce:	429c      	cmp	r4, r3
 800dfd0:	d101      	bne.n	800dfd6 <__swsetup_r+0x46>
 800dfd2:	68ac      	ldr	r4, [r5, #8]
 800dfd4:	e7eb      	b.n	800dfae <__swsetup_r+0x1e>
 800dfd6:	4b24      	ldr	r3, [pc, #144]	; (800e068 <__swsetup_r+0xd8>)
 800dfd8:	429c      	cmp	r4, r3
 800dfda:	bf08      	it	eq
 800dfdc:	68ec      	ldreq	r4, [r5, #12]
 800dfde:	e7e6      	b.n	800dfae <__swsetup_r+0x1e>
 800dfe0:	0751      	lsls	r1, r2, #29
 800dfe2:	d512      	bpl.n	800e00a <__swsetup_r+0x7a>
 800dfe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfe6:	b141      	cbz	r1, 800dffa <__swsetup_r+0x6a>
 800dfe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfec:	4299      	cmp	r1, r3
 800dfee:	d002      	beq.n	800dff6 <__swsetup_r+0x66>
 800dff0:	4630      	mov	r0, r6
 800dff2:	f001 ffc1 	bl	800ff78 <_free_r>
 800dff6:	2300      	movs	r3, #0
 800dff8:	6363      	str	r3, [r4, #52]	; 0x34
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	2300      	movs	r3, #0
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	f043 0308 	orr.w	r3, r3, #8
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	6923      	ldr	r3, [r4, #16]
 800e014:	b94b      	cbnz	r3, 800e02a <__swsetup_r+0x9a>
 800e016:	89a3      	ldrh	r3, [r4, #12]
 800e018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e020:	d003      	beq.n	800e02a <__swsetup_r+0x9a>
 800e022:	4621      	mov	r1, r4
 800e024:	4630      	mov	r0, r6
 800e026:	f001 fb3f 	bl	800f6a8 <__smakebuf_r>
 800e02a:	89a2      	ldrh	r2, [r4, #12]
 800e02c:	f012 0301 	ands.w	r3, r2, #1
 800e030:	d00c      	beq.n	800e04c <__swsetup_r+0xbc>
 800e032:	2300      	movs	r3, #0
 800e034:	60a3      	str	r3, [r4, #8]
 800e036:	6963      	ldr	r3, [r4, #20]
 800e038:	425b      	negs	r3, r3
 800e03a:	61a3      	str	r3, [r4, #24]
 800e03c:	6923      	ldr	r3, [r4, #16]
 800e03e:	b953      	cbnz	r3, 800e056 <__swsetup_r+0xc6>
 800e040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e044:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e048:	d1ba      	bne.n	800dfc0 <__swsetup_r+0x30>
 800e04a:	bd70      	pop	{r4, r5, r6, pc}
 800e04c:	0792      	lsls	r2, r2, #30
 800e04e:	bf58      	it	pl
 800e050:	6963      	ldrpl	r3, [r4, #20]
 800e052:	60a3      	str	r3, [r4, #8]
 800e054:	e7f2      	b.n	800e03c <__swsetup_r+0xac>
 800e056:	2000      	movs	r0, #0
 800e058:	e7f7      	b.n	800e04a <__swsetup_r+0xba>
 800e05a:	bf00      	nop
 800e05c:	20000040 	.word	0x20000040
 800e060:	08010ba0 	.word	0x08010ba0
 800e064:	08010bc0 	.word	0x08010bc0
 800e068:	08010b80 	.word	0x08010b80

0800e06c <quorem>:
 800e06c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e070:	6903      	ldr	r3, [r0, #16]
 800e072:	690c      	ldr	r4, [r1, #16]
 800e074:	42a3      	cmp	r3, r4
 800e076:	4680      	mov	r8, r0
 800e078:	f2c0 8082 	blt.w	800e180 <quorem+0x114>
 800e07c:	3c01      	subs	r4, #1
 800e07e:	f101 0714 	add.w	r7, r1, #20
 800e082:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e086:	f100 0614 	add.w	r6, r0, #20
 800e08a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e08e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e092:	eb06 030c 	add.w	r3, r6, ip
 800e096:	3501      	adds	r5, #1
 800e098:	eb07 090c 	add.w	r9, r7, ip
 800e09c:	9301      	str	r3, [sp, #4]
 800e09e:	fbb0 f5f5 	udiv	r5, r0, r5
 800e0a2:	b395      	cbz	r5, 800e10a <quorem+0x9e>
 800e0a4:	f04f 0a00 	mov.w	sl, #0
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	46b6      	mov	lr, r6
 800e0ac:	46d3      	mov	fp, sl
 800e0ae:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0b2:	b293      	uxth	r3, r2
 800e0b4:	fb05 a303 	mla	r3, r5, r3, sl
 800e0b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	ebab 0303 	sub.w	r3, fp, r3
 800e0c2:	0c12      	lsrs	r2, r2, #16
 800e0c4:	f8de b000 	ldr.w	fp, [lr]
 800e0c8:	fb05 a202 	mla	r2, r5, r2, sl
 800e0cc:	fa13 f38b 	uxtah	r3, r3, fp
 800e0d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e0d4:	fa1f fb82 	uxth.w	fp, r2
 800e0d8:	f8de 2000 	ldr.w	r2, [lr]
 800e0dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e0e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0ea:	4581      	cmp	r9, r0
 800e0ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e0f0:	f84e 3b04 	str.w	r3, [lr], #4
 800e0f4:	d2db      	bcs.n	800e0ae <quorem+0x42>
 800e0f6:	f856 300c 	ldr.w	r3, [r6, ip]
 800e0fa:	b933      	cbnz	r3, 800e10a <quorem+0x9e>
 800e0fc:	9b01      	ldr	r3, [sp, #4]
 800e0fe:	3b04      	subs	r3, #4
 800e100:	429e      	cmp	r6, r3
 800e102:	461a      	mov	r2, r3
 800e104:	d330      	bcc.n	800e168 <quorem+0xfc>
 800e106:	f8c8 4010 	str.w	r4, [r8, #16]
 800e10a:	4640      	mov	r0, r8
 800e10c:	f001 fd7a 	bl	800fc04 <__mcmp>
 800e110:	2800      	cmp	r0, #0
 800e112:	db25      	blt.n	800e160 <quorem+0xf4>
 800e114:	3501      	adds	r5, #1
 800e116:	4630      	mov	r0, r6
 800e118:	f04f 0c00 	mov.w	ip, #0
 800e11c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e120:	f8d0 e000 	ldr.w	lr, [r0]
 800e124:	b293      	uxth	r3, r2
 800e126:	ebac 0303 	sub.w	r3, ip, r3
 800e12a:	0c12      	lsrs	r2, r2, #16
 800e12c:	fa13 f38e 	uxtah	r3, r3, lr
 800e130:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e138:	b29b      	uxth	r3, r3
 800e13a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e13e:	45b9      	cmp	r9, r7
 800e140:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e144:	f840 3b04 	str.w	r3, [r0], #4
 800e148:	d2e8      	bcs.n	800e11c <quorem+0xb0>
 800e14a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e14e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e152:	b92a      	cbnz	r2, 800e160 <quorem+0xf4>
 800e154:	3b04      	subs	r3, #4
 800e156:	429e      	cmp	r6, r3
 800e158:	461a      	mov	r2, r3
 800e15a:	d30b      	bcc.n	800e174 <quorem+0x108>
 800e15c:	f8c8 4010 	str.w	r4, [r8, #16]
 800e160:	4628      	mov	r0, r5
 800e162:	b003      	add	sp, #12
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e168:	6812      	ldr	r2, [r2, #0]
 800e16a:	3b04      	subs	r3, #4
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d1ca      	bne.n	800e106 <quorem+0x9a>
 800e170:	3c01      	subs	r4, #1
 800e172:	e7c5      	b.n	800e100 <quorem+0x94>
 800e174:	6812      	ldr	r2, [r2, #0]
 800e176:	3b04      	subs	r3, #4
 800e178:	2a00      	cmp	r2, #0
 800e17a:	d1ef      	bne.n	800e15c <quorem+0xf0>
 800e17c:	3c01      	subs	r4, #1
 800e17e:	e7ea      	b.n	800e156 <quorem+0xea>
 800e180:	2000      	movs	r0, #0
 800e182:	e7ee      	b.n	800e162 <quorem+0xf6>
 800e184:	0000      	movs	r0, r0
	...

0800e188 <_dtoa_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ec57 6b10 	vmov	r6, r7, d0
 800e190:	b097      	sub	sp, #92	; 0x5c
 800e192:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e194:	9106      	str	r1, [sp, #24]
 800e196:	4604      	mov	r4, r0
 800e198:	920b      	str	r2, [sp, #44]	; 0x2c
 800e19a:	9312      	str	r3, [sp, #72]	; 0x48
 800e19c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1a0:	e9cd 6700 	strd	r6, r7, [sp]
 800e1a4:	b93d      	cbnz	r5, 800e1b6 <_dtoa_r+0x2e>
 800e1a6:	2010      	movs	r0, #16
 800e1a8:	f001 fabe 	bl	800f728 <malloc>
 800e1ac:	6260      	str	r0, [r4, #36]	; 0x24
 800e1ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1b2:	6005      	str	r5, [r0, #0]
 800e1b4:	60c5      	str	r5, [r0, #12]
 800e1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1b8:	6819      	ldr	r1, [r3, #0]
 800e1ba:	b151      	cbz	r1, 800e1d2 <_dtoa_r+0x4a>
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	604a      	str	r2, [r1, #4]
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	4093      	lsls	r3, r2
 800e1c4:	608b      	str	r3, [r1, #8]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f001 fafc 	bl	800f7c4 <_Bfree>
 800e1cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	1e3b      	subs	r3, r7, #0
 800e1d4:	bfbb      	ittet	lt
 800e1d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e1da:	9301      	strlt	r3, [sp, #4]
 800e1dc:	2300      	movge	r3, #0
 800e1de:	2201      	movlt	r2, #1
 800e1e0:	bfac      	ite	ge
 800e1e2:	f8c8 3000 	strge.w	r3, [r8]
 800e1e6:	f8c8 2000 	strlt.w	r2, [r8]
 800e1ea:	4baf      	ldr	r3, [pc, #700]	; (800e4a8 <_dtoa_r+0x320>)
 800e1ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1f0:	ea33 0308 	bics.w	r3, r3, r8
 800e1f4:	d114      	bne.n	800e220 <_dtoa_r+0x98>
 800e1f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e1f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800e1fc:	6013      	str	r3, [r2, #0]
 800e1fe:	9b00      	ldr	r3, [sp, #0]
 800e200:	b923      	cbnz	r3, 800e20c <_dtoa_r+0x84>
 800e202:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e206:	2800      	cmp	r0, #0
 800e208:	f000 8542 	beq.w	800ec90 <_dtoa_r+0xb08>
 800e20c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e20e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e4bc <_dtoa_r+0x334>
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 8544 	beq.w	800eca0 <_dtoa_r+0xb18>
 800e218:	f10b 0303 	add.w	r3, fp, #3
 800e21c:	f000 bd3e 	b.w	800ec9c <_dtoa_r+0xb14>
 800e220:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e224:	2200      	movs	r2, #0
 800e226:	2300      	movs	r3, #0
 800e228:	4630      	mov	r0, r6
 800e22a:	4639      	mov	r1, r7
 800e22c:	f7f2 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e230:	4681      	mov	r9, r0
 800e232:	b168      	cbz	r0, 800e250 <_dtoa_r+0xc8>
 800e234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e236:	2301      	movs	r3, #1
 800e238:	6013      	str	r3, [r2, #0]
 800e23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 8524 	beq.w	800ec8a <_dtoa_r+0xb02>
 800e242:	4b9a      	ldr	r3, [pc, #616]	; (800e4ac <_dtoa_r+0x324>)
 800e244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e246:	f103 3bff 	add.w	fp, r3, #4294967295
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	f000 bd28 	b.w	800eca0 <_dtoa_r+0xb18>
 800e250:	aa14      	add	r2, sp, #80	; 0x50
 800e252:	a915      	add	r1, sp, #84	; 0x54
 800e254:	ec47 6b10 	vmov	d0, r6, r7
 800e258:	4620      	mov	r0, r4
 800e25a:	f001 fdc1 	bl	800fde0 <__d2b>
 800e25e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e262:	9004      	str	r0, [sp, #16]
 800e264:	2d00      	cmp	r5, #0
 800e266:	d07c      	beq.n	800e362 <_dtoa_r+0x1da>
 800e268:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e26c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e270:	46b2      	mov	sl, r6
 800e272:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e27a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e27e:	2200      	movs	r2, #0
 800e280:	4b8b      	ldr	r3, [pc, #556]	; (800e4b0 <_dtoa_r+0x328>)
 800e282:	4650      	mov	r0, sl
 800e284:	4659      	mov	r1, fp
 800e286:	f7f1 ffff 	bl	8000288 <__aeabi_dsub>
 800e28a:	a381      	add	r3, pc, #516	; (adr r3, 800e490 <_dtoa_r+0x308>)
 800e28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e290:	f7f2 f9b2 	bl	80005f8 <__aeabi_dmul>
 800e294:	a380      	add	r3, pc, #512	; (adr r3, 800e498 <_dtoa_r+0x310>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	f7f1 fff7 	bl	800028c <__adddf3>
 800e29e:	4606      	mov	r6, r0
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	460f      	mov	r7, r1
 800e2a4:	f7f2 f93e 	bl	8000524 <__aeabi_i2d>
 800e2a8:	a37d      	add	r3, pc, #500	; (adr r3, 800e4a0 <_dtoa_r+0x318>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f7f2 f9a3 	bl	80005f8 <__aeabi_dmul>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	4639      	mov	r1, r7
 800e2ba:	f7f1 ffe7 	bl	800028c <__adddf3>
 800e2be:	4606      	mov	r6, r0
 800e2c0:	460f      	mov	r7, r1
 800e2c2:	f7f2 fc49 	bl	8000b58 <__aeabi_d2iz>
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	4682      	mov	sl, r0
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	f7f2 fc04 	bl	8000adc <__aeabi_dcmplt>
 800e2d4:	b148      	cbz	r0, 800e2ea <_dtoa_r+0x162>
 800e2d6:	4650      	mov	r0, sl
 800e2d8:	f7f2 f924 	bl	8000524 <__aeabi_i2d>
 800e2dc:	4632      	mov	r2, r6
 800e2de:	463b      	mov	r3, r7
 800e2e0:	f7f2 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2e4:	b908      	cbnz	r0, 800e2ea <_dtoa_r+0x162>
 800e2e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2ea:	f1ba 0f16 	cmp.w	sl, #22
 800e2ee:	d859      	bhi.n	800e3a4 <_dtoa_r+0x21c>
 800e2f0:	4970      	ldr	r1, [pc, #448]	; (800e4b4 <_dtoa_r+0x32c>)
 800e2f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e2f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2fe:	f7f2 fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 800e302:	2800      	cmp	r0, #0
 800e304:	d050      	beq.n	800e3a8 <_dtoa_r+0x220>
 800e306:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e30a:	2300      	movs	r3, #0
 800e30c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e30e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e310:	1b5d      	subs	r5, r3, r5
 800e312:	f1b5 0801 	subs.w	r8, r5, #1
 800e316:	bf49      	itett	mi
 800e318:	f1c5 0301 	rsbmi	r3, r5, #1
 800e31c:	2300      	movpl	r3, #0
 800e31e:	9305      	strmi	r3, [sp, #20]
 800e320:	f04f 0800 	movmi.w	r8, #0
 800e324:	bf58      	it	pl
 800e326:	9305      	strpl	r3, [sp, #20]
 800e328:	f1ba 0f00 	cmp.w	sl, #0
 800e32c:	db3e      	blt.n	800e3ac <_dtoa_r+0x224>
 800e32e:	2300      	movs	r3, #0
 800e330:	44d0      	add	r8, sl
 800e332:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	9b06      	ldr	r3, [sp, #24]
 800e33a:	2b09      	cmp	r3, #9
 800e33c:	f200 8090 	bhi.w	800e460 <_dtoa_r+0x2d8>
 800e340:	2b05      	cmp	r3, #5
 800e342:	bfc4      	itt	gt
 800e344:	3b04      	subgt	r3, #4
 800e346:	9306      	strgt	r3, [sp, #24]
 800e348:	9b06      	ldr	r3, [sp, #24]
 800e34a:	f1a3 0302 	sub.w	r3, r3, #2
 800e34e:	bfcc      	ite	gt
 800e350:	2500      	movgt	r5, #0
 800e352:	2501      	movle	r5, #1
 800e354:	2b03      	cmp	r3, #3
 800e356:	f200 808f 	bhi.w	800e478 <_dtoa_r+0x2f0>
 800e35a:	e8df f003 	tbb	[pc, r3]
 800e35e:	7f7d      	.short	0x7f7d
 800e360:	7131      	.short	0x7131
 800e362:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e366:	441d      	add	r5, r3
 800e368:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e36c:	2820      	cmp	r0, #32
 800e36e:	dd13      	ble.n	800e398 <_dtoa_r+0x210>
 800e370:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e374:	9b00      	ldr	r3, [sp, #0]
 800e376:	fa08 f800 	lsl.w	r8, r8, r0
 800e37a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e37e:	fa23 f000 	lsr.w	r0, r3, r0
 800e382:	ea48 0000 	orr.w	r0, r8, r0
 800e386:	f7f2 f8bd 	bl	8000504 <__aeabi_ui2d>
 800e38a:	2301      	movs	r3, #1
 800e38c:	4682      	mov	sl, r0
 800e38e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e392:	3d01      	subs	r5, #1
 800e394:	9313      	str	r3, [sp, #76]	; 0x4c
 800e396:	e772      	b.n	800e27e <_dtoa_r+0xf6>
 800e398:	9b00      	ldr	r3, [sp, #0]
 800e39a:	f1c0 0020 	rsb	r0, r0, #32
 800e39e:	fa03 f000 	lsl.w	r0, r3, r0
 800e3a2:	e7f0      	b.n	800e386 <_dtoa_r+0x1fe>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e7b1      	b.n	800e30c <_dtoa_r+0x184>
 800e3a8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e3aa:	e7b0      	b.n	800e30e <_dtoa_r+0x186>
 800e3ac:	9b05      	ldr	r3, [sp, #20]
 800e3ae:	eba3 030a 	sub.w	r3, r3, sl
 800e3b2:	9305      	str	r3, [sp, #20]
 800e3b4:	f1ca 0300 	rsb	r3, sl, #0
 800e3b8:	9307      	str	r3, [sp, #28]
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	930e      	str	r3, [sp, #56]	; 0x38
 800e3be:	e7bb      	b.n	800e338 <_dtoa_r+0x1b0>
 800e3c0:	2301      	movs	r3, #1
 800e3c2:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	dd59      	ble.n	800e47e <_dtoa_r+0x2f6>
 800e3ca:	9302      	str	r3, [sp, #8]
 800e3cc:	4699      	mov	r9, r3
 800e3ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	6072      	str	r2, [r6, #4]
 800e3d4:	2204      	movs	r2, #4
 800e3d6:	f102 0014 	add.w	r0, r2, #20
 800e3da:	4298      	cmp	r0, r3
 800e3dc:	6871      	ldr	r1, [r6, #4]
 800e3de:	d953      	bls.n	800e488 <_dtoa_r+0x300>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f001 f9bb 	bl	800f75c <_Balloc>
 800e3e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3e8:	6030      	str	r0, [r6, #0]
 800e3ea:	f1b9 0f0e 	cmp.w	r9, #14
 800e3ee:	f8d3 b000 	ldr.w	fp, [r3]
 800e3f2:	f200 80e6 	bhi.w	800e5c2 <_dtoa_r+0x43a>
 800e3f6:	2d00      	cmp	r5, #0
 800e3f8:	f000 80e3 	beq.w	800e5c2 <_dtoa_r+0x43a>
 800e3fc:	ed9d 7b00 	vldr	d7, [sp]
 800e400:	f1ba 0f00 	cmp.w	sl, #0
 800e404:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e408:	dd74      	ble.n	800e4f4 <_dtoa_r+0x36c>
 800e40a:	4a2a      	ldr	r2, [pc, #168]	; (800e4b4 <_dtoa_r+0x32c>)
 800e40c:	f00a 030f 	and.w	r3, sl, #15
 800e410:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e414:	ed93 7b00 	vldr	d7, [r3]
 800e418:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e41c:	06f0      	lsls	r0, r6, #27
 800e41e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e422:	d565      	bpl.n	800e4f0 <_dtoa_r+0x368>
 800e424:	4b24      	ldr	r3, [pc, #144]	; (800e4b8 <_dtoa_r+0x330>)
 800e426:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e42a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e42e:	f7f2 fa0d 	bl	800084c <__aeabi_ddiv>
 800e432:	e9cd 0100 	strd	r0, r1, [sp]
 800e436:	f006 060f 	and.w	r6, r6, #15
 800e43a:	2503      	movs	r5, #3
 800e43c:	4f1e      	ldr	r7, [pc, #120]	; (800e4b8 <_dtoa_r+0x330>)
 800e43e:	e04c      	b.n	800e4da <_dtoa_r+0x352>
 800e440:	2301      	movs	r3, #1
 800e442:	930a      	str	r3, [sp, #40]	; 0x28
 800e444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e446:	4453      	add	r3, sl
 800e448:	f103 0901 	add.w	r9, r3, #1
 800e44c:	9302      	str	r3, [sp, #8]
 800e44e:	464b      	mov	r3, r9
 800e450:	2b01      	cmp	r3, #1
 800e452:	bfb8      	it	lt
 800e454:	2301      	movlt	r3, #1
 800e456:	e7ba      	b.n	800e3ce <_dtoa_r+0x246>
 800e458:	2300      	movs	r3, #0
 800e45a:	e7b2      	b.n	800e3c2 <_dtoa_r+0x23a>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e7f0      	b.n	800e442 <_dtoa_r+0x2ba>
 800e460:	2501      	movs	r5, #1
 800e462:	2300      	movs	r3, #0
 800e464:	9306      	str	r3, [sp, #24]
 800e466:	950a      	str	r5, [sp, #40]	; 0x28
 800e468:	f04f 33ff 	mov.w	r3, #4294967295
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	4699      	mov	r9, r3
 800e470:	2200      	movs	r2, #0
 800e472:	2312      	movs	r3, #18
 800e474:	920b      	str	r2, [sp, #44]	; 0x2c
 800e476:	e7aa      	b.n	800e3ce <_dtoa_r+0x246>
 800e478:	2301      	movs	r3, #1
 800e47a:	930a      	str	r3, [sp, #40]	; 0x28
 800e47c:	e7f4      	b.n	800e468 <_dtoa_r+0x2e0>
 800e47e:	2301      	movs	r3, #1
 800e480:	9302      	str	r3, [sp, #8]
 800e482:	4699      	mov	r9, r3
 800e484:	461a      	mov	r2, r3
 800e486:	e7f5      	b.n	800e474 <_dtoa_r+0x2ec>
 800e488:	3101      	adds	r1, #1
 800e48a:	6071      	str	r1, [r6, #4]
 800e48c:	0052      	lsls	r2, r2, #1
 800e48e:	e7a2      	b.n	800e3d6 <_dtoa_r+0x24e>
 800e490:	636f4361 	.word	0x636f4361
 800e494:	3fd287a7 	.word	0x3fd287a7
 800e498:	8b60c8b3 	.word	0x8b60c8b3
 800e49c:	3fc68a28 	.word	0x3fc68a28
 800e4a0:	509f79fb 	.word	0x509f79fb
 800e4a4:	3fd34413 	.word	0x3fd34413
 800e4a8:	7ff00000 	.word	0x7ff00000
 800e4ac:	08010af5 	.word	0x08010af5
 800e4b0:	3ff80000 	.word	0x3ff80000
 800e4b4:	08010c18 	.word	0x08010c18
 800e4b8:	08010bf0 	.word	0x08010bf0
 800e4bc:	08010b79 	.word	0x08010b79
 800e4c0:	07f1      	lsls	r1, r6, #31
 800e4c2:	d508      	bpl.n	800e4d6 <_dtoa_r+0x34e>
 800e4c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4cc:	f7f2 f894 	bl	80005f8 <__aeabi_dmul>
 800e4d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e4d4:	3501      	adds	r5, #1
 800e4d6:	1076      	asrs	r6, r6, #1
 800e4d8:	3708      	adds	r7, #8
 800e4da:	2e00      	cmp	r6, #0
 800e4dc:	d1f0      	bne.n	800e4c0 <_dtoa_r+0x338>
 800e4de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e4e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e4e6:	f7f2 f9b1 	bl	800084c <__aeabi_ddiv>
 800e4ea:	e9cd 0100 	strd	r0, r1, [sp]
 800e4ee:	e01a      	b.n	800e526 <_dtoa_r+0x39e>
 800e4f0:	2502      	movs	r5, #2
 800e4f2:	e7a3      	b.n	800e43c <_dtoa_r+0x2b4>
 800e4f4:	f000 80a0 	beq.w	800e638 <_dtoa_r+0x4b0>
 800e4f8:	f1ca 0600 	rsb	r6, sl, #0
 800e4fc:	4b9f      	ldr	r3, [pc, #636]	; (800e77c <_dtoa_r+0x5f4>)
 800e4fe:	4fa0      	ldr	r7, [pc, #640]	; (800e780 <_dtoa_r+0x5f8>)
 800e500:	f006 020f 	and.w	r2, r6, #15
 800e504:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e510:	f7f2 f872 	bl	80005f8 <__aeabi_dmul>
 800e514:	e9cd 0100 	strd	r0, r1, [sp]
 800e518:	1136      	asrs	r6, r6, #4
 800e51a:	2300      	movs	r3, #0
 800e51c:	2502      	movs	r5, #2
 800e51e:	2e00      	cmp	r6, #0
 800e520:	d17f      	bne.n	800e622 <_dtoa_r+0x49a>
 800e522:	2b00      	cmp	r3, #0
 800e524:	d1e1      	bne.n	800e4ea <_dtoa_r+0x362>
 800e526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 8087 	beq.w	800e63c <_dtoa_r+0x4b4>
 800e52e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e532:	2200      	movs	r2, #0
 800e534:	4b93      	ldr	r3, [pc, #588]	; (800e784 <_dtoa_r+0x5fc>)
 800e536:	4630      	mov	r0, r6
 800e538:	4639      	mov	r1, r7
 800e53a:	f7f2 facf 	bl	8000adc <__aeabi_dcmplt>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d07c      	beq.n	800e63c <_dtoa_r+0x4b4>
 800e542:	f1b9 0f00 	cmp.w	r9, #0
 800e546:	d079      	beq.n	800e63c <_dtoa_r+0x4b4>
 800e548:	9b02      	ldr	r3, [sp, #8]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	dd35      	ble.n	800e5ba <_dtoa_r+0x432>
 800e54e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e552:	9308      	str	r3, [sp, #32]
 800e554:	4639      	mov	r1, r7
 800e556:	2200      	movs	r2, #0
 800e558:	4b8b      	ldr	r3, [pc, #556]	; (800e788 <_dtoa_r+0x600>)
 800e55a:	4630      	mov	r0, r6
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	e9cd 0100 	strd	r0, r1, [sp]
 800e564:	9f02      	ldr	r7, [sp, #8]
 800e566:	3501      	adds	r5, #1
 800e568:	4628      	mov	r0, r5
 800e56a:	f7f1 ffdb 	bl	8000524 <__aeabi_i2d>
 800e56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e572:	f7f2 f841 	bl	80005f8 <__aeabi_dmul>
 800e576:	2200      	movs	r2, #0
 800e578:	4b84      	ldr	r3, [pc, #528]	; (800e78c <_dtoa_r+0x604>)
 800e57a:	f7f1 fe87 	bl	800028c <__adddf3>
 800e57e:	4605      	mov	r5, r0
 800e580:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e584:	2f00      	cmp	r7, #0
 800e586:	d15d      	bne.n	800e644 <_dtoa_r+0x4bc>
 800e588:	2200      	movs	r2, #0
 800e58a:	4b81      	ldr	r3, [pc, #516]	; (800e790 <_dtoa_r+0x608>)
 800e58c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e590:	f7f1 fe7a 	bl	8000288 <__aeabi_dsub>
 800e594:	462a      	mov	r2, r5
 800e596:	4633      	mov	r3, r6
 800e598:	e9cd 0100 	strd	r0, r1, [sp]
 800e59c:	f7f2 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 800e5a0:	2800      	cmp	r0, #0
 800e5a2:	f040 8288 	bne.w	800eab6 <_dtoa_r+0x92e>
 800e5a6:	462a      	mov	r2, r5
 800e5a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5b0:	f7f2 fa94 	bl	8000adc <__aeabi_dcmplt>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f040 827c 	bne.w	800eab2 <_dtoa_r+0x92a>
 800e5ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e5be:	e9cd 2300 	strd	r2, r3, [sp]
 800e5c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f2c0 8150 	blt.w	800e86a <_dtoa_r+0x6e2>
 800e5ca:	f1ba 0f0e 	cmp.w	sl, #14
 800e5ce:	f300 814c 	bgt.w	800e86a <_dtoa_r+0x6e2>
 800e5d2:	4b6a      	ldr	r3, [pc, #424]	; (800e77c <_dtoa_r+0x5f4>)
 800e5d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e5d8:	ed93 7b00 	vldr	d7, [r3]
 800e5dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e5e4:	f280 80d8 	bge.w	800e798 <_dtoa_r+0x610>
 800e5e8:	f1b9 0f00 	cmp.w	r9, #0
 800e5ec:	f300 80d4 	bgt.w	800e798 <_dtoa_r+0x610>
 800e5f0:	f040 825e 	bne.w	800eab0 <_dtoa_r+0x928>
 800e5f4:	2200      	movs	r2, #0
 800e5f6:	4b66      	ldr	r3, [pc, #408]	; (800e790 <_dtoa_r+0x608>)
 800e5f8:	ec51 0b17 	vmov	r0, r1, d7
 800e5fc:	f7f1 fffc 	bl	80005f8 <__aeabi_dmul>
 800e600:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e604:	f7f2 fa7e 	bl	8000b04 <__aeabi_dcmpge>
 800e608:	464f      	mov	r7, r9
 800e60a:	464e      	mov	r6, r9
 800e60c:	2800      	cmp	r0, #0
 800e60e:	f040 8234 	bne.w	800ea7a <_dtoa_r+0x8f2>
 800e612:	2331      	movs	r3, #49	; 0x31
 800e614:	f10b 0501 	add.w	r5, fp, #1
 800e618:	f88b 3000 	strb.w	r3, [fp]
 800e61c:	f10a 0a01 	add.w	sl, sl, #1
 800e620:	e22f      	b.n	800ea82 <_dtoa_r+0x8fa>
 800e622:	07f2      	lsls	r2, r6, #31
 800e624:	d505      	bpl.n	800e632 <_dtoa_r+0x4aa>
 800e626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e62a:	f7f1 ffe5 	bl	80005f8 <__aeabi_dmul>
 800e62e:	3501      	adds	r5, #1
 800e630:	2301      	movs	r3, #1
 800e632:	1076      	asrs	r6, r6, #1
 800e634:	3708      	adds	r7, #8
 800e636:	e772      	b.n	800e51e <_dtoa_r+0x396>
 800e638:	2502      	movs	r5, #2
 800e63a:	e774      	b.n	800e526 <_dtoa_r+0x39e>
 800e63c:	f8cd a020 	str.w	sl, [sp, #32]
 800e640:	464f      	mov	r7, r9
 800e642:	e791      	b.n	800e568 <_dtoa_r+0x3e0>
 800e644:	4b4d      	ldr	r3, [pc, #308]	; (800e77c <_dtoa_r+0x5f4>)
 800e646:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e64a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e650:	2b00      	cmp	r3, #0
 800e652:	d047      	beq.n	800e6e4 <_dtoa_r+0x55c>
 800e654:	4602      	mov	r2, r0
 800e656:	460b      	mov	r3, r1
 800e658:	2000      	movs	r0, #0
 800e65a:	494e      	ldr	r1, [pc, #312]	; (800e794 <_dtoa_r+0x60c>)
 800e65c:	f7f2 f8f6 	bl	800084c <__aeabi_ddiv>
 800e660:	462a      	mov	r2, r5
 800e662:	4633      	mov	r3, r6
 800e664:	f7f1 fe10 	bl	8000288 <__aeabi_dsub>
 800e668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e66c:	465d      	mov	r5, fp
 800e66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e672:	f7f2 fa71 	bl	8000b58 <__aeabi_d2iz>
 800e676:	4606      	mov	r6, r0
 800e678:	f7f1 ff54 	bl	8000524 <__aeabi_i2d>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e684:	f7f1 fe00 	bl	8000288 <__aeabi_dsub>
 800e688:	3630      	adds	r6, #48	; 0x30
 800e68a:	f805 6b01 	strb.w	r6, [r5], #1
 800e68e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e692:	e9cd 0100 	strd	r0, r1, [sp]
 800e696:	f7f2 fa21 	bl	8000adc <__aeabi_dcmplt>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d163      	bne.n	800e766 <_dtoa_r+0x5de>
 800e69e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	4937      	ldr	r1, [pc, #220]	; (800e784 <_dtoa_r+0x5fc>)
 800e6a6:	f7f1 fdef 	bl	8000288 <__aeabi_dsub>
 800e6aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e6ae:	f7f2 fa15 	bl	8000adc <__aeabi_dcmplt>
 800e6b2:	2800      	cmp	r0, #0
 800e6b4:	f040 80b7 	bne.w	800e826 <_dtoa_r+0x69e>
 800e6b8:	eba5 030b 	sub.w	r3, r5, fp
 800e6bc:	429f      	cmp	r7, r3
 800e6be:	f77f af7c 	ble.w	800e5ba <_dtoa_r+0x432>
 800e6c2:	2200      	movs	r2, #0
 800e6c4:	4b30      	ldr	r3, [pc, #192]	; (800e788 <_dtoa_r+0x600>)
 800e6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e6ca:	f7f1 ff95 	bl	80005f8 <__aeabi_dmul>
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e6d4:	4b2c      	ldr	r3, [pc, #176]	; (800e788 <_dtoa_r+0x600>)
 800e6d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6da:	f7f1 ff8d 	bl	80005f8 <__aeabi_dmul>
 800e6de:	e9cd 0100 	strd	r0, r1, [sp]
 800e6e2:	e7c4      	b.n	800e66e <_dtoa_r+0x4e6>
 800e6e4:	462a      	mov	r2, r5
 800e6e6:	4633      	mov	r3, r6
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e6f0:	eb0b 0507 	add.w	r5, fp, r7
 800e6f4:	465e      	mov	r6, fp
 800e6f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6fa:	f7f2 fa2d 	bl	8000b58 <__aeabi_d2iz>
 800e6fe:	4607      	mov	r7, r0
 800e700:	f7f1 ff10 	bl	8000524 <__aeabi_i2d>
 800e704:	3730      	adds	r7, #48	; 0x30
 800e706:	4602      	mov	r2, r0
 800e708:	460b      	mov	r3, r1
 800e70a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e70e:	f7f1 fdbb 	bl	8000288 <__aeabi_dsub>
 800e712:	f806 7b01 	strb.w	r7, [r6], #1
 800e716:	42ae      	cmp	r6, r5
 800e718:	e9cd 0100 	strd	r0, r1, [sp]
 800e71c:	f04f 0200 	mov.w	r2, #0
 800e720:	d126      	bne.n	800e770 <_dtoa_r+0x5e8>
 800e722:	4b1c      	ldr	r3, [pc, #112]	; (800e794 <_dtoa_r+0x60c>)
 800e724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e728:	f7f1 fdb0 	bl	800028c <__adddf3>
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e734:	f7f2 f9f0 	bl	8000b18 <__aeabi_dcmpgt>
 800e738:	2800      	cmp	r0, #0
 800e73a:	d174      	bne.n	800e826 <_dtoa_r+0x69e>
 800e73c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e740:	2000      	movs	r0, #0
 800e742:	4914      	ldr	r1, [pc, #80]	; (800e794 <_dtoa_r+0x60c>)
 800e744:	f7f1 fda0 	bl	8000288 <__aeabi_dsub>
 800e748:	4602      	mov	r2, r0
 800e74a:	460b      	mov	r3, r1
 800e74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e750:	f7f2 f9c4 	bl	8000adc <__aeabi_dcmplt>
 800e754:	2800      	cmp	r0, #0
 800e756:	f43f af30 	beq.w	800e5ba <_dtoa_r+0x432>
 800e75a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e75e:	2b30      	cmp	r3, #48	; 0x30
 800e760:	f105 32ff 	add.w	r2, r5, #4294967295
 800e764:	d002      	beq.n	800e76c <_dtoa_r+0x5e4>
 800e766:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e76a:	e04a      	b.n	800e802 <_dtoa_r+0x67a>
 800e76c:	4615      	mov	r5, r2
 800e76e:	e7f4      	b.n	800e75a <_dtoa_r+0x5d2>
 800e770:	4b05      	ldr	r3, [pc, #20]	; (800e788 <_dtoa_r+0x600>)
 800e772:	f7f1 ff41 	bl	80005f8 <__aeabi_dmul>
 800e776:	e9cd 0100 	strd	r0, r1, [sp]
 800e77a:	e7bc      	b.n	800e6f6 <_dtoa_r+0x56e>
 800e77c:	08010c18 	.word	0x08010c18
 800e780:	08010bf0 	.word	0x08010bf0
 800e784:	3ff00000 	.word	0x3ff00000
 800e788:	40240000 	.word	0x40240000
 800e78c:	401c0000 	.word	0x401c0000
 800e790:	40140000 	.word	0x40140000
 800e794:	3fe00000 	.word	0x3fe00000
 800e798:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e79c:	465d      	mov	r5, fp
 800e79e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	4639      	mov	r1, r7
 800e7a6:	f7f2 f851 	bl	800084c <__aeabi_ddiv>
 800e7aa:	f7f2 f9d5 	bl	8000b58 <__aeabi_d2iz>
 800e7ae:	4680      	mov	r8, r0
 800e7b0:	f7f1 feb8 	bl	8000524 <__aeabi_i2d>
 800e7b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7b8:	f7f1 ff1e 	bl	80005f8 <__aeabi_dmul>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e7c8:	f7f1 fd5e 	bl	8000288 <__aeabi_dsub>
 800e7cc:	f805 6b01 	strb.w	r6, [r5], #1
 800e7d0:	eba5 060b 	sub.w	r6, r5, fp
 800e7d4:	45b1      	cmp	r9, r6
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	460b      	mov	r3, r1
 800e7da:	d139      	bne.n	800e850 <_dtoa_r+0x6c8>
 800e7dc:	f7f1 fd56 	bl	800028c <__adddf3>
 800e7e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7e4:	4606      	mov	r6, r0
 800e7e6:	460f      	mov	r7, r1
 800e7e8:	f7f2 f996 	bl	8000b18 <__aeabi_dcmpgt>
 800e7ec:	b9c8      	cbnz	r0, 800e822 <_dtoa_r+0x69a>
 800e7ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7f2:	4630      	mov	r0, r6
 800e7f4:	4639      	mov	r1, r7
 800e7f6:	f7f2 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7fa:	b110      	cbz	r0, 800e802 <_dtoa_r+0x67a>
 800e7fc:	f018 0f01 	tst.w	r8, #1
 800e800:	d10f      	bne.n	800e822 <_dtoa_r+0x69a>
 800e802:	9904      	ldr	r1, [sp, #16]
 800e804:	4620      	mov	r0, r4
 800e806:	f000 ffdd 	bl	800f7c4 <_Bfree>
 800e80a:	2300      	movs	r3, #0
 800e80c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e80e:	702b      	strb	r3, [r5, #0]
 800e810:	f10a 0301 	add.w	r3, sl, #1
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 8241 	beq.w	800eca0 <_dtoa_r+0xb18>
 800e81e:	601d      	str	r5, [r3, #0]
 800e820:	e23e      	b.n	800eca0 <_dtoa_r+0xb18>
 800e822:	f8cd a020 	str.w	sl, [sp, #32]
 800e826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e82a:	2a39      	cmp	r2, #57	; 0x39
 800e82c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e830:	d108      	bne.n	800e844 <_dtoa_r+0x6bc>
 800e832:	459b      	cmp	fp, r3
 800e834:	d10a      	bne.n	800e84c <_dtoa_r+0x6c4>
 800e836:	9b08      	ldr	r3, [sp, #32]
 800e838:	3301      	adds	r3, #1
 800e83a:	9308      	str	r3, [sp, #32]
 800e83c:	2330      	movs	r3, #48	; 0x30
 800e83e:	f88b 3000 	strb.w	r3, [fp]
 800e842:	465b      	mov	r3, fp
 800e844:	781a      	ldrb	r2, [r3, #0]
 800e846:	3201      	adds	r2, #1
 800e848:	701a      	strb	r2, [r3, #0]
 800e84a:	e78c      	b.n	800e766 <_dtoa_r+0x5de>
 800e84c:	461d      	mov	r5, r3
 800e84e:	e7ea      	b.n	800e826 <_dtoa_r+0x69e>
 800e850:	2200      	movs	r2, #0
 800e852:	4b9b      	ldr	r3, [pc, #620]	; (800eac0 <_dtoa_r+0x938>)
 800e854:	f7f1 fed0 	bl	80005f8 <__aeabi_dmul>
 800e858:	2200      	movs	r2, #0
 800e85a:	2300      	movs	r3, #0
 800e85c:	4606      	mov	r6, r0
 800e85e:	460f      	mov	r7, r1
 800e860:	f7f2 f932 	bl	8000ac8 <__aeabi_dcmpeq>
 800e864:	2800      	cmp	r0, #0
 800e866:	d09a      	beq.n	800e79e <_dtoa_r+0x616>
 800e868:	e7cb      	b.n	800e802 <_dtoa_r+0x67a>
 800e86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e86c:	2a00      	cmp	r2, #0
 800e86e:	f000 808b 	beq.w	800e988 <_dtoa_r+0x800>
 800e872:	9a06      	ldr	r2, [sp, #24]
 800e874:	2a01      	cmp	r2, #1
 800e876:	dc6e      	bgt.n	800e956 <_dtoa_r+0x7ce>
 800e878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e87a:	2a00      	cmp	r2, #0
 800e87c:	d067      	beq.n	800e94e <_dtoa_r+0x7c6>
 800e87e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e882:	9f07      	ldr	r7, [sp, #28]
 800e884:	9d05      	ldr	r5, [sp, #20]
 800e886:	9a05      	ldr	r2, [sp, #20]
 800e888:	2101      	movs	r1, #1
 800e88a:	441a      	add	r2, r3
 800e88c:	4620      	mov	r0, r4
 800e88e:	9205      	str	r2, [sp, #20]
 800e890:	4498      	add	r8, r3
 800e892:	f001 f875 	bl	800f980 <__i2b>
 800e896:	4606      	mov	r6, r0
 800e898:	2d00      	cmp	r5, #0
 800e89a:	dd0c      	ble.n	800e8b6 <_dtoa_r+0x72e>
 800e89c:	f1b8 0f00 	cmp.w	r8, #0
 800e8a0:	dd09      	ble.n	800e8b6 <_dtoa_r+0x72e>
 800e8a2:	4545      	cmp	r5, r8
 800e8a4:	9a05      	ldr	r2, [sp, #20]
 800e8a6:	462b      	mov	r3, r5
 800e8a8:	bfa8      	it	ge
 800e8aa:	4643      	movge	r3, r8
 800e8ac:	1ad2      	subs	r2, r2, r3
 800e8ae:	9205      	str	r2, [sp, #20]
 800e8b0:	1aed      	subs	r5, r5, r3
 800e8b2:	eba8 0803 	sub.w	r8, r8, r3
 800e8b6:	9b07      	ldr	r3, [sp, #28]
 800e8b8:	b1eb      	cbz	r3, 800e8f6 <_dtoa_r+0x76e>
 800e8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d067      	beq.n	800e990 <_dtoa_r+0x808>
 800e8c0:	b18f      	cbz	r7, 800e8e6 <_dtoa_r+0x75e>
 800e8c2:	4631      	mov	r1, r6
 800e8c4:	463a      	mov	r2, r7
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f001 f8fa 	bl	800fac0 <__pow5mult>
 800e8cc:	9a04      	ldr	r2, [sp, #16]
 800e8ce:	4601      	mov	r1, r0
 800e8d0:	4606      	mov	r6, r0
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f001 f85d 	bl	800f992 <__multiply>
 800e8d8:	9904      	ldr	r1, [sp, #16]
 800e8da:	9008      	str	r0, [sp, #32]
 800e8dc:	4620      	mov	r0, r4
 800e8de:	f000 ff71 	bl	800f7c4 <_Bfree>
 800e8e2:	9b08      	ldr	r3, [sp, #32]
 800e8e4:	9304      	str	r3, [sp, #16]
 800e8e6:	9b07      	ldr	r3, [sp, #28]
 800e8e8:	1bda      	subs	r2, r3, r7
 800e8ea:	d004      	beq.n	800e8f6 <_dtoa_r+0x76e>
 800e8ec:	9904      	ldr	r1, [sp, #16]
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	f001 f8e6 	bl	800fac0 <__pow5mult>
 800e8f4:	9004      	str	r0, [sp, #16]
 800e8f6:	2101      	movs	r1, #1
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	f001 f841 	bl	800f980 <__i2b>
 800e8fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e900:	4607      	mov	r7, r0
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 81d0 	beq.w	800eca8 <_dtoa_r+0xb20>
 800e908:	461a      	mov	r2, r3
 800e90a:	4601      	mov	r1, r0
 800e90c:	4620      	mov	r0, r4
 800e90e:	f001 f8d7 	bl	800fac0 <__pow5mult>
 800e912:	9b06      	ldr	r3, [sp, #24]
 800e914:	2b01      	cmp	r3, #1
 800e916:	4607      	mov	r7, r0
 800e918:	dc40      	bgt.n	800e99c <_dtoa_r+0x814>
 800e91a:	9b00      	ldr	r3, [sp, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d139      	bne.n	800e994 <_dtoa_r+0x80c>
 800e920:	9b01      	ldr	r3, [sp, #4]
 800e922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e926:	2b00      	cmp	r3, #0
 800e928:	d136      	bne.n	800e998 <_dtoa_r+0x810>
 800e92a:	9b01      	ldr	r3, [sp, #4]
 800e92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e930:	0d1b      	lsrs	r3, r3, #20
 800e932:	051b      	lsls	r3, r3, #20
 800e934:	b12b      	cbz	r3, 800e942 <_dtoa_r+0x7ba>
 800e936:	9b05      	ldr	r3, [sp, #20]
 800e938:	3301      	adds	r3, #1
 800e93a:	9305      	str	r3, [sp, #20]
 800e93c:	f108 0801 	add.w	r8, r8, #1
 800e940:	2301      	movs	r3, #1
 800e942:	9307      	str	r3, [sp, #28]
 800e944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e946:	2b00      	cmp	r3, #0
 800e948:	d12a      	bne.n	800e9a0 <_dtoa_r+0x818>
 800e94a:	2001      	movs	r0, #1
 800e94c:	e030      	b.n	800e9b0 <_dtoa_r+0x828>
 800e94e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e950:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e954:	e795      	b.n	800e882 <_dtoa_r+0x6fa>
 800e956:	9b07      	ldr	r3, [sp, #28]
 800e958:	f109 37ff 	add.w	r7, r9, #4294967295
 800e95c:	42bb      	cmp	r3, r7
 800e95e:	bfbf      	itttt	lt
 800e960:	9b07      	ldrlt	r3, [sp, #28]
 800e962:	9707      	strlt	r7, [sp, #28]
 800e964:	1afa      	sublt	r2, r7, r3
 800e966:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e968:	bfbb      	ittet	lt
 800e96a:	189b      	addlt	r3, r3, r2
 800e96c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e96e:	1bdf      	subge	r7, r3, r7
 800e970:	2700      	movlt	r7, #0
 800e972:	f1b9 0f00 	cmp.w	r9, #0
 800e976:	bfb5      	itete	lt
 800e978:	9b05      	ldrlt	r3, [sp, #20]
 800e97a:	9d05      	ldrge	r5, [sp, #20]
 800e97c:	eba3 0509 	sublt.w	r5, r3, r9
 800e980:	464b      	movge	r3, r9
 800e982:	bfb8      	it	lt
 800e984:	2300      	movlt	r3, #0
 800e986:	e77e      	b.n	800e886 <_dtoa_r+0x6fe>
 800e988:	9f07      	ldr	r7, [sp, #28]
 800e98a:	9d05      	ldr	r5, [sp, #20]
 800e98c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e98e:	e783      	b.n	800e898 <_dtoa_r+0x710>
 800e990:	9a07      	ldr	r2, [sp, #28]
 800e992:	e7ab      	b.n	800e8ec <_dtoa_r+0x764>
 800e994:	2300      	movs	r3, #0
 800e996:	e7d4      	b.n	800e942 <_dtoa_r+0x7ba>
 800e998:	9b00      	ldr	r3, [sp, #0]
 800e99a:	e7d2      	b.n	800e942 <_dtoa_r+0x7ba>
 800e99c:	2300      	movs	r3, #0
 800e99e:	9307      	str	r3, [sp, #28]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e9a6:	6918      	ldr	r0, [r3, #16]
 800e9a8:	f000 ff9c 	bl	800f8e4 <__hi0bits>
 800e9ac:	f1c0 0020 	rsb	r0, r0, #32
 800e9b0:	4440      	add	r0, r8
 800e9b2:	f010 001f 	ands.w	r0, r0, #31
 800e9b6:	d047      	beq.n	800ea48 <_dtoa_r+0x8c0>
 800e9b8:	f1c0 0320 	rsb	r3, r0, #32
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	dd3b      	ble.n	800ea38 <_dtoa_r+0x8b0>
 800e9c0:	9b05      	ldr	r3, [sp, #20]
 800e9c2:	f1c0 001c 	rsb	r0, r0, #28
 800e9c6:	4403      	add	r3, r0
 800e9c8:	9305      	str	r3, [sp, #20]
 800e9ca:	4405      	add	r5, r0
 800e9cc:	4480      	add	r8, r0
 800e9ce:	9b05      	ldr	r3, [sp, #20]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	dd05      	ble.n	800e9e0 <_dtoa_r+0x858>
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	9904      	ldr	r1, [sp, #16]
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f001 f8bf 	bl	800fb5c <__lshift>
 800e9de:	9004      	str	r0, [sp, #16]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dd05      	ble.n	800e9f2 <_dtoa_r+0x86a>
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f001 f8b6 	bl	800fb5c <__lshift>
 800e9f0:	4607      	mov	r7, r0
 800e9f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9f4:	b353      	cbz	r3, 800ea4c <_dtoa_r+0x8c4>
 800e9f6:	4639      	mov	r1, r7
 800e9f8:	9804      	ldr	r0, [sp, #16]
 800e9fa:	f001 f903 	bl	800fc04 <__mcmp>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	da24      	bge.n	800ea4c <_dtoa_r+0x8c4>
 800ea02:	2300      	movs	r3, #0
 800ea04:	220a      	movs	r2, #10
 800ea06:	9904      	ldr	r1, [sp, #16]
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 fef2 	bl	800f7f2 <__multadd>
 800ea0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea10:	9004      	str	r0, [sp, #16]
 800ea12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 814d 	beq.w	800ecb6 <_dtoa_r+0xb2e>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4631      	mov	r1, r6
 800ea20:	220a      	movs	r2, #10
 800ea22:	4620      	mov	r0, r4
 800ea24:	f000 fee5 	bl	800f7f2 <__multadd>
 800ea28:	9b02      	ldr	r3, [sp, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	dc4f      	bgt.n	800ead0 <_dtoa_r+0x948>
 800ea30:	9b06      	ldr	r3, [sp, #24]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	dd4c      	ble.n	800ead0 <_dtoa_r+0x948>
 800ea36:	e011      	b.n	800ea5c <_dtoa_r+0x8d4>
 800ea38:	d0c9      	beq.n	800e9ce <_dtoa_r+0x846>
 800ea3a:	9a05      	ldr	r2, [sp, #20]
 800ea3c:	331c      	adds	r3, #28
 800ea3e:	441a      	add	r2, r3
 800ea40:	9205      	str	r2, [sp, #20]
 800ea42:	441d      	add	r5, r3
 800ea44:	4498      	add	r8, r3
 800ea46:	e7c2      	b.n	800e9ce <_dtoa_r+0x846>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	e7f6      	b.n	800ea3a <_dtoa_r+0x8b2>
 800ea4c:	f1b9 0f00 	cmp.w	r9, #0
 800ea50:	dc38      	bgt.n	800eac4 <_dtoa_r+0x93c>
 800ea52:	9b06      	ldr	r3, [sp, #24]
 800ea54:	2b02      	cmp	r3, #2
 800ea56:	dd35      	ble.n	800eac4 <_dtoa_r+0x93c>
 800ea58:	f8cd 9008 	str.w	r9, [sp, #8]
 800ea5c:	9b02      	ldr	r3, [sp, #8]
 800ea5e:	b963      	cbnz	r3, 800ea7a <_dtoa_r+0x8f2>
 800ea60:	4639      	mov	r1, r7
 800ea62:	2205      	movs	r2, #5
 800ea64:	4620      	mov	r0, r4
 800ea66:	f000 fec4 	bl	800f7f2 <__multadd>
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	4607      	mov	r7, r0
 800ea6e:	9804      	ldr	r0, [sp, #16]
 800ea70:	f001 f8c8 	bl	800fc04 <__mcmp>
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f73f adcc 	bgt.w	800e612 <_dtoa_r+0x48a>
 800ea7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea7c:	465d      	mov	r5, fp
 800ea7e:	ea6f 0a03 	mvn.w	sl, r3
 800ea82:	f04f 0900 	mov.w	r9, #0
 800ea86:	4639      	mov	r1, r7
 800ea88:	4620      	mov	r0, r4
 800ea8a:	f000 fe9b 	bl	800f7c4 <_Bfree>
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	f43f aeb7 	beq.w	800e802 <_dtoa_r+0x67a>
 800ea94:	f1b9 0f00 	cmp.w	r9, #0
 800ea98:	d005      	beq.n	800eaa6 <_dtoa_r+0x91e>
 800ea9a:	45b1      	cmp	r9, r6
 800ea9c:	d003      	beq.n	800eaa6 <_dtoa_r+0x91e>
 800ea9e:	4649      	mov	r1, r9
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 fe8f 	bl	800f7c4 <_Bfree>
 800eaa6:	4631      	mov	r1, r6
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 fe8b 	bl	800f7c4 <_Bfree>
 800eaae:	e6a8      	b.n	800e802 <_dtoa_r+0x67a>
 800eab0:	2700      	movs	r7, #0
 800eab2:	463e      	mov	r6, r7
 800eab4:	e7e1      	b.n	800ea7a <_dtoa_r+0x8f2>
 800eab6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800eaba:	463e      	mov	r6, r7
 800eabc:	e5a9      	b.n	800e612 <_dtoa_r+0x48a>
 800eabe:	bf00      	nop
 800eac0:	40240000 	.word	0x40240000
 800eac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eac6:	f8cd 9008 	str.w	r9, [sp, #8]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 80fa 	beq.w	800ecc4 <_dtoa_r+0xb3c>
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	dd05      	ble.n	800eae0 <_dtoa_r+0x958>
 800ead4:	4631      	mov	r1, r6
 800ead6:	462a      	mov	r2, r5
 800ead8:	4620      	mov	r0, r4
 800eada:	f001 f83f 	bl	800fb5c <__lshift>
 800eade:	4606      	mov	r6, r0
 800eae0:	9b07      	ldr	r3, [sp, #28]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d04c      	beq.n	800eb80 <_dtoa_r+0x9f8>
 800eae6:	6871      	ldr	r1, [r6, #4]
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fe37 	bl	800f75c <_Balloc>
 800eaee:	6932      	ldr	r2, [r6, #16]
 800eaf0:	3202      	adds	r2, #2
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	0092      	lsls	r2, r2, #2
 800eaf6:	f106 010c 	add.w	r1, r6, #12
 800eafa:	300c      	adds	r0, #12
 800eafc:	f7fd fc54 	bl	800c3a8 <memcpy>
 800eb00:	2201      	movs	r2, #1
 800eb02:	4629      	mov	r1, r5
 800eb04:	4620      	mov	r0, r4
 800eb06:	f001 f829 	bl	800fb5c <__lshift>
 800eb0a:	9b00      	ldr	r3, [sp, #0]
 800eb0c:	f8cd b014 	str.w	fp, [sp, #20]
 800eb10:	f003 0301 	and.w	r3, r3, #1
 800eb14:	46b1      	mov	r9, r6
 800eb16:	9307      	str	r3, [sp, #28]
 800eb18:	4606      	mov	r6, r0
 800eb1a:	4639      	mov	r1, r7
 800eb1c:	9804      	ldr	r0, [sp, #16]
 800eb1e:	f7ff faa5 	bl	800e06c <quorem>
 800eb22:	4649      	mov	r1, r9
 800eb24:	4605      	mov	r5, r0
 800eb26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eb2a:	9804      	ldr	r0, [sp, #16]
 800eb2c:	f001 f86a 	bl	800fc04 <__mcmp>
 800eb30:	4632      	mov	r2, r6
 800eb32:	9000      	str	r0, [sp, #0]
 800eb34:	4639      	mov	r1, r7
 800eb36:	4620      	mov	r0, r4
 800eb38:	f001 f87e 	bl	800fc38 <__mdiff>
 800eb3c:	68c3      	ldr	r3, [r0, #12]
 800eb3e:	4602      	mov	r2, r0
 800eb40:	bb03      	cbnz	r3, 800eb84 <_dtoa_r+0x9fc>
 800eb42:	4601      	mov	r1, r0
 800eb44:	9008      	str	r0, [sp, #32]
 800eb46:	9804      	ldr	r0, [sp, #16]
 800eb48:	f001 f85c 	bl	800fc04 <__mcmp>
 800eb4c:	9a08      	ldr	r2, [sp, #32]
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4611      	mov	r1, r2
 800eb52:	4620      	mov	r0, r4
 800eb54:	9308      	str	r3, [sp, #32]
 800eb56:	f000 fe35 	bl	800f7c4 <_Bfree>
 800eb5a:	9b08      	ldr	r3, [sp, #32]
 800eb5c:	b9a3      	cbnz	r3, 800eb88 <_dtoa_r+0xa00>
 800eb5e:	9a06      	ldr	r2, [sp, #24]
 800eb60:	b992      	cbnz	r2, 800eb88 <_dtoa_r+0xa00>
 800eb62:	9a07      	ldr	r2, [sp, #28]
 800eb64:	b982      	cbnz	r2, 800eb88 <_dtoa_r+0xa00>
 800eb66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eb6a:	d029      	beq.n	800ebc0 <_dtoa_r+0xa38>
 800eb6c:	9b00      	ldr	r3, [sp, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	dd01      	ble.n	800eb76 <_dtoa_r+0x9ee>
 800eb72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800eb76:	9b05      	ldr	r3, [sp, #20]
 800eb78:	1c5d      	adds	r5, r3, #1
 800eb7a:	f883 8000 	strb.w	r8, [r3]
 800eb7e:	e782      	b.n	800ea86 <_dtoa_r+0x8fe>
 800eb80:	4630      	mov	r0, r6
 800eb82:	e7c2      	b.n	800eb0a <_dtoa_r+0x982>
 800eb84:	2301      	movs	r3, #1
 800eb86:	e7e3      	b.n	800eb50 <_dtoa_r+0x9c8>
 800eb88:	9a00      	ldr	r2, [sp, #0]
 800eb8a:	2a00      	cmp	r2, #0
 800eb8c:	db04      	blt.n	800eb98 <_dtoa_r+0xa10>
 800eb8e:	d125      	bne.n	800ebdc <_dtoa_r+0xa54>
 800eb90:	9a06      	ldr	r2, [sp, #24]
 800eb92:	bb1a      	cbnz	r2, 800ebdc <_dtoa_r+0xa54>
 800eb94:	9a07      	ldr	r2, [sp, #28]
 800eb96:	bb0a      	cbnz	r2, 800ebdc <_dtoa_r+0xa54>
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	ddec      	ble.n	800eb76 <_dtoa_r+0x9ee>
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	9904      	ldr	r1, [sp, #16]
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 ffdb 	bl	800fb5c <__lshift>
 800eba6:	4639      	mov	r1, r7
 800eba8:	9004      	str	r0, [sp, #16]
 800ebaa:	f001 f82b 	bl	800fc04 <__mcmp>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	dc03      	bgt.n	800ebba <_dtoa_r+0xa32>
 800ebb2:	d1e0      	bne.n	800eb76 <_dtoa_r+0x9ee>
 800ebb4:	f018 0f01 	tst.w	r8, #1
 800ebb8:	d0dd      	beq.n	800eb76 <_dtoa_r+0x9ee>
 800ebba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ebbe:	d1d8      	bne.n	800eb72 <_dtoa_r+0x9ea>
 800ebc0:	9b05      	ldr	r3, [sp, #20]
 800ebc2:	9a05      	ldr	r2, [sp, #20]
 800ebc4:	1c5d      	adds	r5, r3, #1
 800ebc6:	2339      	movs	r3, #57	; 0x39
 800ebc8:	7013      	strb	r3, [r2, #0]
 800ebca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ebce:	2b39      	cmp	r3, #57	; 0x39
 800ebd0:	f105 32ff 	add.w	r2, r5, #4294967295
 800ebd4:	d04f      	beq.n	800ec76 <_dtoa_r+0xaee>
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	7013      	strb	r3, [r2, #0]
 800ebda:	e754      	b.n	800ea86 <_dtoa_r+0x8fe>
 800ebdc:	9a05      	ldr	r2, [sp, #20]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f102 0501 	add.w	r5, r2, #1
 800ebe4:	dd06      	ble.n	800ebf4 <_dtoa_r+0xa6c>
 800ebe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ebea:	d0e9      	beq.n	800ebc0 <_dtoa_r+0xa38>
 800ebec:	f108 0801 	add.w	r8, r8, #1
 800ebf0:	9b05      	ldr	r3, [sp, #20]
 800ebf2:	e7c2      	b.n	800eb7a <_dtoa_r+0x9f2>
 800ebf4:	9a02      	ldr	r2, [sp, #8]
 800ebf6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ebfa:	eba5 030b 	sub.w	r3, r5, fp
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d021      	beq.n	800ec46 <_dtoa_r+0xabe>
 800ec02:	2300      	movs	r3, #0
 800ec04:	220a      	movs	r2, #10
 800ec06:	9904      	ldr	r1, [sp, #16]
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fdf2 	bl	800f7f2 <__multadd>
 800ec0e:	45b1      	cmp	r9, r6
 800ec10:	9004      	str	r0, [sp, #16]
 800ec12:	f04f 0300 	mov.w	r3, #0
 800ec16:	f04f 020a 	mov.w	r2, #10
 800ec1a:	4649      	mov	r1, r9
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	d105      	bne.n	800ec2c <_dtoa_r+0xaa4>
 800ec20:	f000 fde7 	bl	800f7f2 <__multadd>
 800ec24:	4681      	mov	r9, r0
 800ec26:	4606      	mov	r6, r0
 800ec28:	9505      	str	r5, [sp, #20]
 800ec2a:	e776      	b.n	800eb1a <_dtoa_r+0x992>
 800ec2c:	f000 fde1 	bl	800f7f2 <__multadd>
 800ec30:	4631      	mov	r1, r6
 800ec32:	4681      	mov	r9, r0
 800ec34:	2300      	movs	r3, #0
 800ec36:	220a      	movs	r2, #10
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 fdda 	bl	800f7f2 <__multadd>
 800ec3e:	4606      	mov	r6, r0
 800ec40:	e7f2      	b.n	800ec28 <_dtoa_r+0xaa0>
 800ec42:	f04f 0900 	mov.w	r9, #0
 800ec46:	2201      	movs	r2, #1
 800ec48:	9904      	ldr	r1, [sp, #16]
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 ff86 	bl	800fb5c <__lshift>
 800ec50:	4639      	mov	r1, r7
 800ec52:	9004      	str	r0, [sp, #16]
 800ec54:	f000 ffd6 	bl	800fc04 <__mcmp>
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	dcb6      	bgt.n	800ebca <_dtoa_r+0xa42>
 800ec5c:	d102      	bne.n	800ec64 <_dtoa_r+0xadc>
 800ec5e:	f018 0f01 	tst.w	r8, #1
 800ec62:	d1b2      	bne.n	800ebca <_dtoa_r+0xa42>
 800ec64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ec68:	2b30      	cmp	r3, #48	; 0x30
 800ec6a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ec6e:	f47f af0a 	bne.w	800ea86 <_dtoa_r+0x8fe>
 800ec72:	4615      	mov	r5, r2
 800ec74:	e7f6      	b.n	800ec64 <_dtoa_r+0xadc>
 800ec76:	4593      	cmp	fp, r2
 800ec78:	d105      	bne.n	800ec86 <_dtoa_r+0xafe>
 800ec7a:	2331      	movs	r3, #49	; 0x31
 800ec7c:	f10a 0a01 	add.w	sl, sl, #1
 800ec80:	f88b 3000 	strb.w	r3, [fp]
 800ec84:	e6ff      	b.n	800ea86 <_dtoa_r+0x8fe>
 800ec86:	4615      	mov	r5, r2
 800ec88:	e79f      	b.n	800ebca <_dtoa_r+0xa42>
 800ec8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ecf0 <_dtoa_r+0xb68>
 800ec8e:	e007      	b.n	800eca0 <_dtoa_r+0xb18>
 800ec90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec92:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ecf4 <_dtoa_r+0xb6c>
 800ec96:	b11b      	cbz	r3, 800eca0 <_dtoa_r+0xb18>
 800ec98:	f10b 0308 	add.w	r3, fp, #8
 800ec9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	4658      	mov	r0, fp
 800eca2:	b017      	add	sp, #92	; 0x5c
 800eca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eca8:	9b06      	ldr	r3, [sp, #24]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	f77f ae35 	ble.w	800e91a <_dtoa_r+0x792>
 800ecb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ecb2:	9307      	str	r3, [sp, #28]
 800ecb4:	e649      	b.n	800e94a <_dtoa_r+0x7c2>
 800ecb6:	9b02      	ldr	r3, [sp, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	dc03      	bgt.n	800ecc4 <_dtoa_r+0xb3c>
 800ecbc:	9b06      	ldr	r3, [sp, #24]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	f73f aecc 	bgt.w	800ea5c <_dtoa_r+0x8d4>
 800ecc4:	465d      	mov	r5, fp
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	9804      	ldr	r0, [sp, #16]
 800ecca:	f7ff f9cf 	bl	800e06c <quorem>
 800ecce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ecd2:	f805 8b01 	strb.w	r8, [r5], #1
 800ecd6:	9a02      	ldr	r2, [sp, #8]
 800ecd8:	eba5 030b 	sub.w	r3, r5, fp
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	ddb0      	ble.n	800ec42 <_dtoa_r+0xaba>
 800ece0:	2300      	movs	r3, #0
 800ece2:	220a      	movs	r2, #10
 800ece4:	9904      	ldr	r1, [sp, #16]
 800ece6:	4620      	mov	r0, r4
 800ece8:	f000 fd83 	bl	800f7f2 <__multadd>
 800ecec:	9004      	str	r0, [sp, #16]
 800ecee:	e7ea      	b.n	800ecc6 <_dtoa_r+0xb3e>
 800ecf0:	08010af4 	.word	0x08010af4
 800ecf4:	08010b70 	.word	0x08010b70

0800ecf8 <__sflush_r>:
 800ecf8:	898a      	ldrh	r2, [r1, #12]
 800ecfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecfe:	4605      	mov	r5, r0
 800ed00:	0710      	lsls	r0, r2, #28
 800ed02:	460c      	mov	r4, r1
 800ed04:	d458      	bmi.n	800edb8 <__sflush_r+0xc0>
 800ed06:	684b      	ldr	r3, [r1, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	dc05      	bgt.n	800ed18 <__sflush_r+0x20>
 800ed0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dc02      	bgt.n	800ed18 <__sflush_r+0x20>
 800ed12:	2000      	movs	r0, #0
 800ed14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed1a:	2e00      	cmp	r6, #0
 800ed1c:	d0f9      	beq.n	800ed12 <__sflush_r+0x1a>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed24:	682f      	ldr	r7, [r5, #0]
 800ed26:	6a21      	ldr	r1, [r4, #32]
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	d032      	beq.n	800ed92 <__sflush_r+0x9a>
 800ed2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed2e:	89a3      	ldrh	r3, [r4, #12]
 800ed30:	075a      	lsls	r2, r3, #29
 800ed32:	d505      	bpl.n	800ed40 <__sflush_r+0x48>
 800ed34:	6863      	ldr	r3, [r4, #4]
 800ed36:	1ac0      	subs	r0, r0, r3
 800ed38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed3a:	b10b      	cbz	r3, 800ed40 <__sflush_r+0x48>
 800ed3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed3e:	1ac0      	subs	r0, r0, r3
 800ed40:	2300      	movs	r3, #0
 800ed42:	4602      	mov	r2, r0
 800ed44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed46:	6a21      	ldr	r1, [r4, #32]
 800ed48:	4628      	mov	r0, r5
 800ed4a:	47b0      	blx	r6
 800ed4c:	1c43      	adds	r3, r0, #1
 800ed4e:	89a3      	ldrh	r3, [r4, #12]
 800ed50:	d106      	bne.n	800ed60 <__sflush_r+0x68>
 800ed52:	6829      	ldr	r1, [r5, #0]
 800ed54:	291d      	cmp	r1, #29
 800ed56:	d848      	bhi.n	800edea <__sflush_r+0xf2>
 800ed58:	4a29      	ldr	r2, [pc, #164]	; (800ee00 <__sflush_r+0x108>)
 800ed5a:	40ca      	lsrs	r2, r1
 800ed5c:	07d6      	lsls	r6, r2, #31
 800ed5e:	d544      	bpl.n	800edea <__sflush_r+0xf2>
 800ed60:	2200      	movs	r2, #0
 800ed62:	6062      	str	r2, [r4, #4]
 800ed64:	04d9      	lsls	r1, r3, #19
 800ed66:	6922      	ldr	r2, [r4, #16]
 800ed68:	6022      	str	r2, [r4, #0]
 800ed6a:	d504      	bpl.n	800ed76 <__sflush_r+0x7e>
 800ed6c:	1c42      	adds	r2, r0, #1
 800ed6e:	d101      	bne.n	800ed74 <__sflush_r+0x7c>
 800ed70:	682b      	ldr	r3, [r5, #0]
 800ed72:	b903      	cbnz	r3, 800ed76 <__sflush_r+0x7e>
 800ed74:	6560      	str	r0, [r4, #84]	; 0x54
 800ed76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed78:	602f      	str	r7, [r5, #0]
 800ed7a:	2900      	cmp	r1, #0
 800ed7c:	d0c9      	beq.n	800ed12 <__sflush_r+0x1a>
 800ed7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed82:	4299      	cmp	r1, r3
 800ed84:	d002      	beq.n	800ed8c <__sflush_r+0x94>
 800ed86:	4628      	mov	r0, r5
 800ed88:	f001 f8f6 	bl	800ff78 <_free_r>
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	6360      	str	r0, [r4, #52]	; 0x34
 800ed90:	e7c0      	b.n	800ed14 <__sflush_r+0x1c>
 800ed92:	2301      	movs	r3, #1
 800ed94:	4628      	mov	r0, r5
 800ed96:	47b0      	blx	r6
 800ed98:	1c41      	adds	r1, r0, #1
 800ed9a:	d1c8      	bne.n	800ed2e <__sflush_r+0x36>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0c5      	beq.n	800ed2e <__sflush_r+0x36>
 800eda2:	2b1d      	cmp	r3, #29
 800eda4:	d001      	beq.n	800edaa <__sflush_r+0xb2>
 800eda6:	2b16      	cmp	r3, #22
 800eda8:	d101      	bne.n	800edae <__sflush_r+0xb6>
 800edaa:	602f      	str	r7, [r5, #0]
 800edac:	e7b1      	b.n	800ed12 <__sflush_r+0x1a>
 800edae:	89a3      	ldrh	r3, [r4, #12]
 800edb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edb4:	81a3      	strh	r3, [r4, #12]
 800edb6:	e7ad      	b.n	800ed14 <__sflush_r+0x1c>
 800edb8:	690f      	ldr	r7, [r1, #16]
 800edba:	2f00      	cmp	r7, #0
 800edbc:	d0a9      	beq.n	800ed12 <__sflush_r+0x1a>
 800edbe:	0793      	lsls	r3, r2, #30
 800edc0:	680e      	ldr	r6, [r1, #0]
 800edc2:	bf08      	it	eq
 800edc4:	694b      	ldreq	r3, [r1, #20]
 800edc6:	600f      	str	r7, [r1, #0]
 800edc8:	bf18      	it	ne
 800edca:	2300      	movne	r3, #0
 800edcc:	eba6 0807 	sub.w	r8, r6, r7
 800edd0:	608b      	str	r3, [r1, #8]
 800edd2:	f1b8 0f00 	cmp.w	r8, #0
 800edd6:	dd9c      	ble.n	800ed12 <__sflush_r+0x1a>
 800edd8:	4643      	mov	r3, r8
 800edda:	463a      	mov	r2, r7
 800eddc:	6a21      	ldr	r1, [r4, #32]
 800edde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ede0:	4628      	mov	r0, r5
 800ede2:	47b0      	blx	r6
 800ede4:	2800      	cmp	r0, #0
 800ede6:	dc06      	bgt.n	800edf6 <__sflush_r+0xfe>
 800ede8:	89a3      	ldrh	r3, [r4, #12]
 800edea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	f04f 30ff 	mov.w	r0, #4294967295
 800edf4:	e78e      	b.n	800ed14 <__sflush_r+0x1c>
 800edf6:	4407      	add	r7, r0
 800edf8:	eba8 0800 	sub.w	r8, r8, r0
 800edfc:	e7e9      	b.n	800edd2 <__sflush_r+0xda>
 800edfe:	bf00      	nop
 800ee00:	20400001 	.word	0x20400001

0800ee04 <_fflush_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	690b      	ldr	r3, [r1, #16]
 800ee08:	4605      	mov	r5, r0
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	b1db      	cbz	r3, 800ee46 <_fflush_r+0x42>
 800ee0e:	b118      	cbz	r0, 800ee18 <_fflush_r+0x14>
 800ee10:	6983      	ldr	r3, [r0, #24]
 800ee12:	b90b      	cbnz	r3, 800ee18 <_fflush_r+0x14>
 800ee14:	f000 f860 	bl	800eed8 <__sinit>
 800ee18:	4b0c      	ldr	r3, [pc, #48]	; (800ee4c <_fflush_r+0x48>)
 800ee1a:	429c      	cmp	r4, r3
 800ee1c:	d109      	bne.n	800ee32 <_fflush_r+0x2e>
 800ee1e:	686c      	ldr	r4, [r5, #4]
 800ee20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee24:	b17b      	cbz	r3, 800ee46 <_fflush_r+0x42>
 800ee26:	4621      	mov	r1, r4
 800ee28:	4628      	mov	r0, r5
 800ee2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee2e:	f7ff bf63 	b.w	800ecf8 <__sflush_r>
 800ee32:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <_fflush_r+0x4c>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	d101      	bne.n	800ee3c <_fflush_r+0x38>
 800ee38:	68ac      	ldr	r4, [r5, #8]
 800ee3a:	e7f1      	b.n	800ee20 <_fflush_r+0x1c>
 800ee3c:	4b05      	ldr	r3, [pc, #20]	; (800ee54 <_fflush_r+0x50>)
 800ee3e:	429c      	cmp	r4, r3
 800ee40:	bf08      	it	eq
 800ee42:	68ec      	ldreq	r4, [r5, #12]
 800ee44:	e7ec      	b.n	800ee20 <_fflush_r+0x1c>
 800ee46:	2000      	movs	r0, #0
 800ee48:	bd38      	pop	{r3, r4, r5, pc}
 800ee4a:	bf00      	nop
 800ee4c:	08010ba0 	.word	0x08010ba0
 800ee50:	08010bc0 	.word	0x08010bc0
 800ee54:	08010b80 	.word	0x08010b80

0800ee58 <std>:
 800ee58:	2300      	movs	r3, #0
 800ee5a:	b510      	push	{r4, lr}
 800ee5c:	4604      	mov	r4, r0
 800ee5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee62:	6083      	str	r3, [r0, #8]
 800ee64:	8181      	strh	r1, [r0, #12]
 800ee66:	6643      	str	r3, [r0, #100]	; 0x64
 800ee68:	81c2      	strh	r2, [r0, #14]
 800ee6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee6e:	6183      	str	r3, [r0, #24]
 800ee70:	4619      	mov	r1, r3
 800ee72:	2208      	movs	r2, #8
 800ee74:	305c      	adds	r0, #92	; 0x5c
 800ee76:	f7fd faa2 	bl	800c3be <memset>
 800ee7a:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <std+0x38>)
 800ee7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee7e:	4b05      	ldr	r3, [pc, #20]	; (800ee94 <std+0x3c>)
 800ee80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee82:	4b05      	ldr	r3, [pc, #20]	; (800ee98 <std+0x40>)
 800ee84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee86:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <std+0x44>)
 800ee88:	6224      	str	r4, [r4, #32]
 800ee8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	bf00      	nop
 800ee90:	0801060d 	.word	0x0801060d
 800ee94:	0801062f 	.word	0x0801062f
 800ee98:	08010667 	.word	0x08010667
 800ee9c:	0801068b 	.word	0x0801068b

0800eea0 <_cleanup_r>:
 800eea0:	4901      	ldr	r1, [pc, #4]	; (800eea8 <_cleanup_r+0x8>)
 800eea2:	f000 b885 	b.w	800efb0 <_fwalk_reent>
 800eea6:	bf00      	nop
 800eea8:	0800ee05 	.word	0x0800ee05

0800eeac <__sfmoreglue>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	1e4a      	subs	r2, r1, #1
 800eeb0:	2568      	movs	r5, #104	; 0x68
 800eeb2:	4355      	muls	r5, r2
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eeba:	f001 f8ab 	bl	8010014 <_malloc_r>
 800eebe:	4604      	mov	r4, r0
 800eec0:	b140      	cbz	r0, 800eed4 <__sfmoreglue+0x28>
 800eec2:	2100      	movs	r1, #0
 800eec4:	e9c0 1600 	strd	r1, r6, [r0]
 800eec8:	300c      	adds	r0, #12
 800eeca:	60a0      	str	r0, [r4, #8]
 800eecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eed0:	f7fd fa75 	bl	800c3be <memset>
 800eed4:	4620      	mov	r0, r4
 800eed6:	bd70      	pop	{r4, r5, r6, pc}

0800eed8 <__sinit>:
 800eed8:	6983      	ldr	r3, [r0, #24]
 800eeda:	b510      	push	{r4, lr}
 800eedc:	4604      	mov	r4, r0
 800eede:	bb33      	cbnz	r3, 800ef2e <__sinit+0x56>
 800eee0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800eee4:	6503      	str	r3, [r0, #80]	; 0x50
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <__sinit+0x58>)
 800eee8:	4a12      	ldr	r2, [pc, #72]	; (800ef34 <__sinit+0x5c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6282      	str	r2, [r0, #40]	; 0x28
 800eeee:	4298      	cmp	r0, r3
 800eef0:	bf04      	itt	eq
 800eef2:	2301      	moveq	r3, #1
 800eef4:	6183      	streq	r3, [r0, #24]
 800eef6:	f000 f81f 	bl	800ef38 <__sfp>
 800eefa:	6060      	str	r0, [r4, #4]
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 f81b 	bl	800ef38 <__sfp>
 800ef02:	60a0      	str	r0, [r4, #8]
 800ef04:	4620      	mov	r0, r4
 800ef06:	f000 f817 	bl	800ef38 <__sfp>
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	60e0      	str	r0, [r4, #12]
 800ef0e:	2104      	movs	r1, #4
 800ef10:	6860      	ldr	r0, [r4, #4]
 800ef12:	f7ff ffa1 	bl	800ee58 <std>
 800ef16:	2201      	movs	r2, #1
 800ef18:	2109      	movs	r1, #9
 800ef1a:	68a0      	ldr	r0, [r4, #8]
 800ef1c:	f7ff ff9c 	bl	800ee58 <std>
 800ef20:	2202      	movs	r2, #2
 800ef22:	2112      	movs	r1, #18
 800ef24:	68e0      	ldr	r0, [r4, #12]
 800ef26:	f7ff ff97 	bl	800ee58 <std>
 800ef2a:	2301      	movs	r3, #1
 800ef2c:	61a3      	str	r3, [r4, #24]
 800ef2e:	bd10      	pop	{r4, pc}
 800ef30:	08010ae0 	.word	0x08010ae0
 800ef34:	0800eea1 	.word	0x0800eea1

0800ef38 <__sfp>:
 800ef38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3a:	4b1b      	ldr	r3, [pc, #108]	; (800efa8 <__sfp+0x70>)
 800ef3c:	681e      	ldr	r6, [r3, #0]
 800ef3e:	69b3      	ldr	r3, [r6, #24]
 800ef40:	4607      	mov	r7, r0
 800ef42:	b913      	cbnz	r3, 800ef4a <__sfp+0x12>
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7ff ffc7 	bl	800eed8 <__sinit>
 800ef4a:	3648      	adds	r6, #72	; 0x48
 800ef4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef50:	3b01      	subs	r3, #1
 800ef52:	d503      	bpl.n	800ef5c <__sfp+0x24>
 800ef54:	6833      	ldr	r3, [r6, #0]
 800ef56:	b133      	cbz	r3, 800ef66 <__sfp+0x2e>
 800ef58:	6836      	ldr	r6, [r6, #0]
 800ef5a:	e7f7      	b.n	800ef4c <__sfp+0x14>
 800ef5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef60:	b16d      	cbz	r5, 800ef7e <__sfp+0x46>
 800ef62:	3468      	adds	r4, #104	; 0x68
 800ef64:	e7f4      	b.n	800ef50 <__sfp+0x18>
 800ef66:	2104      	movs	r1, #4
 800ef68:	4638      	mov	r0, r7
 800ef6a:	f7ff ff9f 	bl	800eeac <__sfmoreglue>
 800ef6e:	6030      	str	r0, [r6, #0]
 800ef70:	2800      	cmp	r0, #0
 800ef72:	d1f1      	bne.n	800ef58 <__sfp+0x20>
 800ef74:	230c      	movs	r3, #12
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	4604      	mov	r4, r0
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef7e:	4b0b      	ldr	r3, [pc, #44]	; (800efac <__sfp+0x74>)
 800ef80:	6665      	str	r5, [r4, #100]	; 0x64
 800ef82:	e9c4 5500 	strd	r5, r5, [r4]
 800ef86:	60a5      	str	r5, [r4, #8]
 800ef88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ef8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ef90:	2208      	movs	r2, #8
 800ef92:	4629      	mov	r1, r5
 800ef94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef98:	f7fd fa11 	bl	800c3be <memset>
 800ef9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efa4:	e7e9      	b.n	800ef7a <__sfp+0x42>
 800efa6:	bf00      	nop
 800efa8:	08010ae0 	.word	0x08010ae0
 800efac:	ffff0001 	.word	0xffff0001

0800efb0 <_fwalk_reent>:
 800efb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efb4:	4680      	mov	r8, r0
 800efb6:	4689      	mov	r9, r1
 800efb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efbc:	2600      	movs	r6, #0
 800efbe:	b914      	cbnz	r4, 800efc6 <_fwalk_reent+0x16>
 800efc0:	4630      	mov	r0, r6
 800efc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800efca:	3f01      	subs	r7, #1
 800efcc:	d501      	bpl.n	800efd2 <_fwalk_reent+0x22>
 800efce:	6824      	ldr	r4, [r4, #0]
 800efd0:	e7f5      	b.n	800efbe <_fwalk_reent+0xe>
 800efd2:	89ab      	ldrh	r3, [r5, #12]
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d907      	bls.n	800efe8 <_fwalk_reent+0x38>
 800efd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efdc:	3301      	adds	r3, #1
 800efde:	d003      	beq.n	800efe8 <_fwalk_reent+0x38>
 800efe0:	4629      	mov	r1, r5
 800efe2:	4640      	mov	r0, r8
 800efe4:	47c8      	blx	r9
 800efe6:	4306      	orrs	r6, r0
 800efe8:	3568      	adds	r5, #104	; 0x68
 800efea:	e7ee      	b.n	800efca <_fwalk_reent+0x1a>

0800efec <rshift>:
 800efec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efee:	6906      	ldr	r6, [r0, #16]
 800eff0:	114b      	asrs	r3, r1, #5
 800eff2:	429e      	cmp	r6, r3
 800eff4:	f100 0414 	add.w	r4, r0, #20
 800eff8:	dd30      	ble.n	800f05c <rshift+0x70>
 800effa:	f011 011f 	ands.w	r1, r1, #31
 800effe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f002:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f006:	d108      	bne.n	800f01a <rshift+0x2e>
 800f008:	4621      	mov	r1, r4
 800f00a:	42b2      	cmp	r2, r6
 800f00c:	460b      	mov	r3, r1
 800f00e:	d211      	bcs.n	800f034 <rshift+0x48>
 800f010:	f852 3b04 	ldr.w	r3, [r2], #4
 800f014:	f841 3b04 	str.w	r3, [r1], #4
 800f018:	e7f7      	b.n	800f00a <rshift+0x1e>
 800f01a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f01e:	f1c1 0c20 	rsb	ip, r1, #32
 800f022:	40cd      	lsrs	r5, r1
 800f024:	3204      	adds	r2, #4
 800f026:	4623      	mov	r3, r4
 800f028:	42b2      	cmp	r2, r6
 800f02a:	4617      	mov	r7, r2
 800f02c:	d30c      	bcc.n	800f048 <rshift+0x5c>
 800f02e:	601d      	str	r5, [r3, #0]
 800f030:	b105      	cbz	r5, 800f034 <rshift+0x48>
 800f032:	3304      	adds	r3, #4
 800f034:	1b1a      	subs	r2, r3, r4
 800f036:	42a3      	cmp	r3, r4
 800f038:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f03c:	bf08      	it	eq
 800f03e:	2300      	moveq	r3, #0
 800f040:	6102      	str	r2, [r0, #16]
 800f042:	bf08      	it	eq
 800f044:	6143      	streq	r3, [r0, #20]
 800f046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f048:	683f      	ldr	r7, [r7, #0]
 800f04a:	fa07 f70c 	lsl.w	r7, r7, ip
 800f04e:	433d      	orrs	r5, r7
 800f050:	f843 5b04 	str.w	r5, [r3], #4
 800f054:	f852 5b04 	ldr.w	r5, [r2], #4
 800f058:	40cd      	lsrs	r5, r1
 800f05a:	e7e5      	b.n	800f028 <rshift+0x3c>
 800f05c:	4623      	mov	r3, r4
 800f05e:	e7e9      	b.n	800f034 <rshift+0x48>

0800f060 <__hexdig_fun>:
 800f060:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f064:	2b09      	cmp	r3, #9
 800f066:	d802      	bhi.n	800f06e <__hexdig_fun+0xe>
 800f068:	3820      	subs	r0, #32
 800f06a:	b2c0      	uxtb	r0, r0
 800f06c:	4770      	bx	lr
 800f06e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f072:	2b05      	cmp	r3, #5
 800f074:	d801      	bhi.n	800f07a <__hexdig_fun+0x1a>
 800f076:	3847      	subs	r0, #71	; 0x47
 800f078:	e7f7      	b.n	800f06a <__hexdig_fun+0xa>
 800f07a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f07e:	2b05      	cmp	r3, #5
 800f080:	d801      	bhi.n	800f086 <__hexdig_fun+0x26>
 800f082:	3827      	subs	r0, #39	; 0x27
 800f084:	e7f1      	b.n	800f06a <__hexdig_fun+0xa>
 800f086:	2000      	movs	r0, #0
 800f088:	4770      	bx	lr

0800f08a <__gethex>:
 800f08a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f08e:	b08b      	sub	sp, #44	; 0x2c
 800f090:	468a      	mov	sl, r1
 800f092:	9002      	str	r0, [sp, #8]
 800f094:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f096:	9306      	str	r3, [sp, #24]
 800f098:	4690      	mov	r8, r2
 800f09a:	f000 fad0 	bl	800f63e <__localeconv_l>
 800f09e:	6803      	ldr	r3, [r0, #0]
 800f0a0:	9303      	str	r3, [sp, #12]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7f1 f894 	bl	80001d0 <strlen>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	9001      	str	r0, [sp, #4]
 800f0ac:	4403      	add	r3, r0
 800f0ae:	f04f 0b00 	mov.w	fp, #0
 800f0b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f0b6:	9307      	str	r3, [sp, #28]
 800f0b8:	f8da 3000 	ldr.w	r3, [sl]
 800f0bc:	3302      	adds	r3, #2
 800f0be:	461f      	mov	r7, r3
 800f0c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0c4:	2830      	cmp	r0, #48	; 0x30
 800f0c6:	d06c      	beq.n	800f1a2 <__gethex+0x118>
 800f0c8:	f7ff ffca 	bl	800f060 <__hexdig_fun>
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	2800      	cmp	r0, #0
 800f0d0:	d16a      	bne.n	800f1a8 <__gethex+0x11e>
 800f0d2:	9a01      	ldr	r2, [sp, #4]
 800f0d4:	9903      	ldr	r1, [sp, #12]
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f001 fadb 	bl	8010692 <strncmp>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d166      	bne.n	800f1ae <__gethex+0x124>
 800f0e0:	9b01      	ldr	r3, [sp, #4]
 800f0e2:	5cf8      	ldrb	r0, [r7, r3]
 800f0e4:	18fe      	adds	r6, r7, r3
 800f0e6:	f7ff ffbb 	bl	800f060 <__hexdig_fun>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d062      	beq.n	800f1b4 <__gethex+0x12a>
 800f0ee:	4633      	mov	r3, r6
 800f0f0:	7818      	ldrb	r0, [r3, #0]
 800f0f2:	2830      	cmp	r0, #48	; 0x30
 800f0f4:	461f      	mov	r7, r3
 800f0f6:	f103 0301 	add.w	r3, r3, #1
 800f0fa:	d0f9      	beq.n	800f0f0 <__gethex+0x66>
 800f0fc:	f7ff ffb0 	bl	800f060 <__hexdig_fun>
 800f100:	fab0 f580 	clz	r5, r0
 800f104:	096d      	lsrs	r5, r5, #5
 800f106:	4634      	mov	r4, r6
 800f108:	f04f 0b01 	mov.w	fp, #1
 800f10c:	463a      	mov	r2, r7
 800f10e:	4616      	mov	r6, r2
 800f110:	3201      	adds	r2, #1
 800f112:	7830      	ldrb	r0, [r6, #0]
 800f114:	f7ff ffa4 	bl	800f060 <__hexdig_fun>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d1f8      	bne.n	800f10e <__gethex+0x84>
 800f11c:	9a01      	ldr	r2, [sp, #4]
 800f11e:	9903      	ldr	r1, [sp, #12]
 800f120:	4630      	mov	r0, r6
 800f122:	f001 fab6 	bl	8010692 <strncmp>
 800f126:	b950      	cbnz	r0, 800f13e <__gethex+0xb4>
 800f128:	b954      	cbnz	r4, 800f140 <__gethex+0xb6>
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	18f4      	adds	r4, r6, r3
 800f12e:	4622      	mov	r2, r4
 800f130:	4616      	mov	r6, r2
 800f132:	3201      	adds	r2, #1
 800f134:	7830      	ldrb	r0, [r6, #0]
 800f136:	f7ff ff93 	bl	800f060 <__hexdig_fun>
 800f13a:	2800      	cmp	r0, #0
 800f13c:	d1f8      	bne.n	800f130 <__gethex+0xa6>
 800f13e:	b10c      	cbz	r4, 800f144 <__gethex+0xba>
 800f140:	1ba4      	subs	r4, r4, r6
 800f142:	00a4      	lsls	r4, r4, #2
 800f144:	7833      	ldrb	r3, [r6, #0]
 800f146:	2b50      	cmp	r3, #80	; 0x50
 800f148:	d001      	beq.n	800f14e <__gethex+0xc4>
 800f14a:	2b70      	cmp	r3, #112	; 0x70
 800f14c:	d140      	bne.n	800f1d0 <__gethex+0x146>
 800f14e:	7873      	ldrb	r3, [r6, #1]
 800f150:	2b2b      	cmp	r3, #43	; 0x2b
 800f152:	d031      	beq.n	800f1b8 <__gethex+0x12e>
 800f154:	2b2d      	cmp	r3, #45	; 0x2d
 800f156:	d033      	beq.n	800f1c0 <__gethex+0x136>
 800f158:	1c71      	adds	r1, r6, #1
 800f15a:	f04f 0900 	mov.w	r9, #0
 800f15e:	7808      	ldrb	r0, [r1, #0]
 800f160:	f7ff ff7e 	bl	800f060 <__hexdig_fun>
 800f164:	1e43      	subs	r3, r0, #1
 800f166:	b2db      	uxtb	r3, r3
 800f168:	2b18      	cmp	r3, #24
 800f16a:	d831      	bhi.n	800f1d0 <__gethex+0x146>
 800f16c:	f1a0 0210 	sub.w	r2, r0, #16
 800f170:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f174:	f7ff ff74 	bl	800f060 <__hexdig_fun>
 800f178:	1e43      	subs	r3, r0, #1
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	2b18      	cmp	r3, #24
 800f17e:	d922      	bls.n	800f1c6 <__gethex+0x13c>
 800f180:	f1b9 0f00 	cmp.w	r9, #0
 800f184:	d000      	beq.n	800f188 <__gethex+0xfe>
 800f186:	4252      	negs	r2, r2
 800f188:	4414      	add	r4, r2
 800f18a:	f8ca 1000 	str.w	r1, [sl]
 800f18e:	b30d      	cbz	r5, 800f1d4 <__gethex+0x14a>
 800f190:	f1bb 0f00 	cmp.w	fp, #0
 800f194:	bf0c      	ite	eq
 800f196:	2706      	moveq	r7, #6
 800f198:	2700      	movne	r7, #0
 800f19a:	4638      	mov	r0, r7
 800f19c:	b00b      	add	sp, #44	; 0x2c
 800f19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1a2:	f10b 0b01 	add.w	fp, fp, #1
 800f1a6:	e78a      	b.n	800f0be <__gethex+0x34>
 800f1a8:	2500      	movs	r5, #0
 800f1aa:	462c      	mov	r4, r5
 800f1ac:	e7ae      	b.n	800f10c <__gethex+0x82>
 800f1ae:	463e      	mov	r6, r7
 800f1b0:	2501      	movs	r5, #1
 800f1b2:	e7c7      	b.n	800f144 <__gethex+0xba>
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	e7fb      	b.n	800f1b0 <__gethex+0x126>
 800f1b8:	f04f 0900 	mov.w	r9, #0
 800f1bc:	1cb1      	adds	r1, r6, #2
 800f1be:	e7ce      	b.n	800f15e <__gethex+0xd4>
 800f1c0:	f04f 0901 	mov.w	r9, #1
 800f1c4:	e7fa      	b.n	800f1bc <__gethex+0x132>
 800f1c6:	230a      	movs	r3, #10
 800f1c8:	fb03 0202 	mla	r2, r3, r2, r0
 800f1cc:	3a10      	subs	r2, #16
 800f1ce:	e7cf      	b.n	800f170 <__gethex+0xe6>
 800f1d0:	4631      	mov	r1, r6
 800f1d2:	e7da      	b.n	800f18a <__gethex+0x100>
 800f1d4:	1bf3      	subs	r3, r6, r7
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	4629      	mov	r1, r5
 800f1da:	2b07      	cmp	r3, #7
 800f1dc:	dc49      	bgt.n	800f272 <__gethex+0x1e8>
 800f1de:	9802      	ldr	r0, [sp, #8]
 800f1e0:	f000 fabc 	bl	800f75c <_Balloc>
 800f1e4:	9b01      	ldr	r3, [sp, #4]
 800f1e6:	f100 0914 	add.w	r9, r0, #20
 800f1ea:	f04f 0b00 	mov.w	fp, #0
 800f1ee:	f1c3 0301 	rsb	r3, r3, #1
 800f1f2:	4605      	mov	r5, r0
 800f1f4:	f8cd 9010 	str.w	r9, [sp, #16]
 800f1f8:	46da      	mov	sl, fp
 800f1fa:	9308      	str	r3, [sp, #32]
 800f1fc:	42b7      	cmp	r7, r6
 800f1fe:	d33b      	bcc.n	800f278 <__gethex+0x1ee>
 800f200:	9804      	ldr	r0, [sp, #16]
 800f202:	f840 ab04 	str.w	sl, [r0], #4
 800f206:	eba0 0009 	sub.w	r0, r0, r9
 800f20a:	1080      	asrs	r0, r0, #2
 800f20c:	6128      	str	r0, [r5, #16]
 800f20e:	0147      	lsls	r7, r0, #5
 800f210:	4650      	mov	r0, sl
 800f212:	f000 fb67 	bl	800f8e4 <__hi0bits>
 800f216:	f8d8 6000 	ldr.w	r6, [r8]
 800f21a:	1a3f      	subs	r7, r7, r0
 800f21c:	42b7      	cmp	r7, r6
 800f21e:	dd64      	ble.n	800f2ea <__gethex+0x260>
 800f220:	1bbf      	subs	r7, r7, r6
 800f222:	4639      	mov	r1, r7
 800f224:	4628      	mov	r0, r5
 800f226:	f000 fe77 	bl	800ff18 <__any_on>
 800f22a:	4682      	mov	sl, r0
 800f22c:	b178      	cbz	r0, 800f24e <__gethex+0x1c4>
 800f22e:	1e7b      	subs	r3, r7, #1
 800f230:	1159      	asrs	r1, r3, #5
 800f232:	f003 021f 	and.w	r2, r3, #31
 800f236:	f04f 0a01 	mov.w	sl, #1
 800f23a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f23e:	fa0a f202 	lsl.w	r2, sl, r2
 800f242:	420a      	tst	r2, r1
 800f244:	d003      	beq.n	800f24e <__gethex+0x1c4>
 800f246:	4553      	cmp	r3, sl
 800f248:	dc46      	bgt.n	800f2d8 <__gethex+0x24e>
 800f24a:	f04f 0a02 	mov.w	sl, #2
 800f24e:	4639      	mov	r1, r7
 800f250:	4628      	mov	r0, r5
 800f252:	f7ff fecb 	bl	800efec <rshift>
 800f256:	443c      	add	r4, r7
 800f258:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f25c:	42a3      	cmp	r3, r4
 800f25e:	da52      	bge.n	800f306 <__gethex+0x27c>
 800f260:	4629      	mov	r1, r5
 800f262:	9802      	ldr	r0, [sp, #8]
 800f264:	f000 faae 	bl	800f7c4 <_Bfree>
 800f268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f26a:	2300      	movs	r3, #0
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	27a3      	movs	r7, #163	; 0xa3
 800f270:	e793      	b.n	800f19a <__gethex+0x110>
 800f272:	3101      	adds	r1, #1
 800f274:	105b      	asrs	r3, r3, #1
 800f276:	e7b0      	b.n	800f1da <__gethex+0x150>
 800f278:	1e73      	subs	r3, r6, #1
 800f27a:	9305      	str	r3, [sp, #20]
 800f27c:	9a07      	ldr	r2, [sp, #28]
 800f27e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f282:	4293      	cmp	r3, r2
 800f284:	d018      	beq.n	800f2b8 <__gethex+0x22e>
 800f286:	f1bb 0f20 	cmp.w	fp, #32
 800f28a:	d107      	bne.n	800f29c <__gethex+0x212>
 800f28c:	9b04      	ldr	r3, [sp, #16]
 800f28e:	f8c3 a000 	str.w	sl, [r3]
 800f292:	3304      	adds	r3, #4
 800f294:	f04f 0a00 	mov.w	sl, #0
 800f298:	9304      	str	r3, [sp, #16]
 800f29a:	46d3      	mov	fp, sl
 800f29c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2a0:	f7ff fede 	bl	800f060 <__hexdig_fun>
 800f2a4:	f000 000f 	and.w	r0, r0, #15
 800f2a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800f2ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800f2b0:	f10b 0b04 	add.w	fp, fp, #4
 800f2b4:	9b05      	ldr	r3, [sp, #20]
 800f2b6:	e00d      	b.n	800f2d4 <__gethex+0x24a>
 800f2b8:	9b05      	ldr	r3, [sp, #20]
 800f2ba:	9a08      	ldr	r2, [sp, #32]
 800f2bc:	4413      	add	r3, r2
 800f2be:	42bb      	cmp	r3, r7
 800f2c0:	d3e1      	bcc.n	800f286 <__gethex+0x1fc>
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	9a01      	ldr	r2, [sp, #4]
 800f2c6:	9903      	ldr	r1, [sp, #12]
 800f2c8:	9309      	str	r3, [sp, #36]	; 0x24
 800f2ca:	f001 f9e2 	bl	8010692 <strncmp>
 800f2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d1d8      	bne.n	800f286 <__gethex+0x1fc>
 800f2d4:	461e      	mov	r6, r3
 800f2d6:	e791      	b.n	800f1fc <__gethex+0x172>
 800f2d8:	1eb9      	subs	r1, r7, #2
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f000 fe1c 	bl	800ff18 <__any_on>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d0b2      	beq.n	800f24a <__gethex+0x1c0>
 800f2e4:	f04f 0a03 	mov.w	sl, #3
 800f2e8:	e7b1      	b.n	800f24e <__gethex+0x1c4>
 800f2ea:	da09      	bge.n	800f300 <__gethex+0x276>
 800f2ec:	1bf7      	subs	r7, r6, r7
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	463a      	mov	r2, r7
 800f2f2:	9802      	ldr	r0, [sp, #8]
 800f2f4:	f000 fc32 	bl	800fb5c <__lshift>
 800f2f8:	1be4      	subs	r4, r4, r7
 800f2fa:	4605      	mov	r5, r0
 800f2fc:	f100 0914 	add.w	r9, r0, #20
 800f300:	f04f 0a00 	mov.w	sl, #0
 800f304:	e7a8      	b.n	800f258 <__gethex+0x1ce>
 800f306:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f30a:	42a0      	cmp	r0, r4
 800f30c:	dd6a      	ble.n	800f3e4 <__gethex+0x35a>
 800f30e:	1b04      	subs	r4, r0, r4
 800f310:	42a6      	cmp	r6, r4
 800f312:	dc2e      	bgt.n	800f372 <__gethex+0x2e8>
 800f314:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	d022      	beq.n	800f362 <__gethex+0x2d8>
 800f31c:	2b03      	cmp	r3, #3
 800f31e:	d024      	beq.n	800f36a <__gethex+0x2e0>
 800f320:	2b01      	cmp	r3, #1
 800f322:	d115      	bne.n	800f350 <__gethex+0x2c6>
 800f324:	42a6      	cmp	r6, r4
 800f326:	d113      	bne.n	800f350 <__gethex+0x2c6>
 800f328:	2e01      	cmp	r6, #1
 800f32a:	dc0b      	bgt.n	800f344 <__gethex+0x2ba>
 800f32c:	9a06      	ldr	r2, [sp, #24]
 800f32e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f332:	6013      	str	r3, [r2, #0]
 800f334:	2301      	movs	r3, #1
 800f336:	612b      	str	r3, [r5, #16]
 800f338:	f8c9 3000 	str.w	r3, [r9]
 800f33c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f33e:	2762      	movs	r7, #98	; 0x62
 800f340:	601d      	str	r5, [r3, #0]
 800f342:	e72a      	b.n	800f19a <__gethex+0x110>
 800f344:	1e71      	subs	r1, r6, #1
 800f346:	4628      	mov	r0, r5
 800f348:	f000 fde6 	bl	800ff18 <__any_on>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d1ed      	bne.n	800f32c <__gethex+0x2a2>
 800f350:	4629      	mov	r1, r5
 800f352:	9802      	ldr	r0, [sp, #8]
 800f354:	f000 fa36 	bl	800f7c4 <_Bfree>
 800f358:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f35a:	2300      	movs	r3, #0
 800f35c:	6013      	str	r3, [r2, #0]
 800f35e:	2750      	movs	r7, #80	; 0x50
 800f360:	e71b      	b.n	800f19a <__gethex+0x110>
 800f362:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f364:	2b00      	cmp	r3, #0
 800f366:	d0e1      	beq.n	800f32c <__gethex+0x2a2>
 800f368:	e7f2      	b.n	800f350 <__gethex+0x2c6>
 800f36a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1dd      	bne.n	800f32c <__gethex+0x2a2>
 800f370:	e7ee      	b.n	800f350 <__gethex+0x2c6>
 800f372:	1e67      	subs	r7, r4, #1
 800f374:	f1ba 0f00 	cmp.w	sl, #0
 800f378:	d131      	bne.n	800f3de <__gethex+0x354>
 800f37a:	b127      	cbz	r7, 800f386 <__gethex+0x2fc>
 800f37c:	4639      	mov	r1, r7
 800f37e:	4628      	mov	r0, r5
 800f380:	f000 fdca 	bl	800ff18 <__any_on>
 800f384:	4682      	mov	sl, r0
 800f386:	117a      	asrs	r2, r7, #5
 800f388:	2301      	movs	r3, #1
 800f38a:	f007 071f 	and.w	r7, r7, #31
 800f38e:	fa03 f707 	lsl.w	r7, r3, r7
 800f392:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f396:	4621      	mov	r1, r4
 800f398:	421f      	tst	r7, r3
 800f39a:	4628      	mov	r0, r5
 800f39c:	bf18      	it	ne
 800f39e:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3a2:	1b36      	subs	r6, r6, r4
 800f3a4:	f7ff fe22 	bl	800efec <rshift>
 800f3a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f3ac:	2702      	movs	r7, #2
 800f3ae:	f1ba 0f00 	cmp.w	sl, #0
 800f3b2:	d048      	beq.n	800f446 <__gethex+0x3bc>
 800f3b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d015      	beq.n	800f3e8 <__gethex+0x35e>
 800f3bc:	2b03      	cmp	r3, #3
 800f3be:	d017      	beq.n	800f3f0 <__gethex+0x366>
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d109      	bne.n	800f3d8 <__gethex+0x34e>
 800f3c4:	f01a 0f02 	tst.w	sl, #2
 800f3c8:	d006      	beq.n	800f3d8 <__gethex+0x34e>
 800f3ca:	f8d9 3000 	ldr.w	r3, [r9]
 800f3ce:	ea4a 0a03 	orr.w	sl, sl, r3
 800f3d2:	f01a 0f01 	tst.w	sl, #1
 800f3d6:	d10e      	bne.n	800f3f6 <__gethex+0x36c>
 800f3d8:	f047 0710 	orr.w	r7, r7, #16
 800f3dc:	e033      	b.n	800f446 <__gethex+0x3bc>
 800f3de:	f04f 0a01 	mov.w	sl, #1
 800f3e2:	e7d0      	b.n	800f386 <__gethex+0x2fc>
 800f3e4:	2701      	movs	r7, #1
 800f3e6:	e7e2      	b.n	800f3ae <__gethex+0x324>
 800f3e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3ea:	f1c3 0301 	rsb	r3, r3, #1
 800f3ee:	9315      	str	r3, [sp, #84]	; 0x54
 800f3f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d0f0      	beq.n	800f3d8 <__gethex+0x34e>
 800f3f6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f3fa:	f105 0314 	add.w	r3, r5, #20
 800f3fe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f402:	eb03 010a 	add.w	r1, r3, sl
 800f406:	f04f 0c00 	mov.w	ip, #0
 800f40a:	4618      	mov	r0, r3
 800f40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f410:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f414:	d01c      	beq.n	800f450 <__gethex+0x3c6>
 800f416:	3201      	adds	r2, #1
 800f418:	6002      	str	r2, [r0, #0]
 800f41a:	2f02      	cmp	r7, #2
 800f41c:	f105 0314 	add.w	r3, r5, #20
 800f420:	d138      	bne.n	800f494 <__gethex+0x40a>
 800f422:	f8d8 2000 	ldr.w	r2, [r8]
 800f426:	3a01      	subs	r2, #1
 800f428:	42b2      	cmp	r2, r6
 800f42a:	d10a      	bne.n	800f442 <__gethex+0x3b8>
 800f42c:	1171      	asrs	r1, r6, #5
 800f42e:	2201      	movs	r2, #1
 800f430:	f006 061f 	and.w	r6, r6, #31
 800f434:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f438:	fa02 f606 	lsl.w	r6, r2, r6
 800f43c:	421e      	tst	r6, r3
 800f43e:	bf18      	it	ne
 800f440:	4617      	movne	r7, r2
 800f442:	f047 0720 	orr.w	r7, r7, #32
 800f446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f448:	601d      	str	r5, [r3, #0]
 800f44a:	9b06      	ldr	r3, [sp, #24]
 800f44c:	601c      	str	r4, [r3, #0]
 800f44e:	e6a4      	b.n	800f19a <__gethex+0x110>
 800f450:	4299      	cmp	r1, r3
 800f452:	f843 cc04 	str.w	ip, [r3, #-4]
 800f456:	d8d8      	bhi.n	800f40a <__gethex+0x380>
 800f458:	68ab      	ldr	r3, [r5, #8]
 800f45a:	4599      	cmp	r9, r3
 800f45c:	db12      	blt.n	800f484 <__gethex+0x3fa>
 800f45e:	6869      	ldr	r1, [r5, #4]
 800f460:	9802      	ldr	r0, [sp, #8]
 800f462:	3101      	adds	r1, #1
 800f464:	f000 f97a 	bl	800f75c <_Balloc>
 800f468:	692a      	ldr	r2, [r5, #16]
 800f46a:	3202      	adds	r2, #2
 800f46c:	f105 010c 	add.w	r1, r5, #12
 800f470:	4683      	mov	fp, r0
 800f472:	0092      	lsls	r2, r2, #2
 800f474:	300c      	adds	r0, #12
 800f476:	f7fc ff97 	bl	800c3a8 <memcpy>
 800f47a:	4629      	mov	r1, r5
 800f47c:	9802      	ldr	r0, [sp, #8]
 800f47e:	f000 f9a1 	bl	800f7c4 <_Bfree>
 800f482:	465d      	mov	r5, fp
 800f484:	692b      	ldr	r3, [r5, #16]
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f48c:	612a      	str	r2, [r5, #16]
 800f48e:	2201      	movs	r2, #1
 800f490:	615a      	str	r2, [r3, #20]
 800f492:	e7c2      	b.n	800f41a <__gethex+0x390>
 800f494:	692a      	ldr	r2, [r5, #16]
 800f496:	454a      	cmp	r2, r9
 800f498:	dd0b      	ble.n	800f4b2 <__gethex+0x428>
 800f49a:	2101      	movs	r1, #1
 800f49c:	4628      	mov	r0, r5
 800f49e:	f7ff fda5 	bl	800efec <rshift>
 800f4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4a6:	3401      	adds	r4, #1
 800f4a8:	42a3      	cmp	r3, r4
 800f4aa:	f6ff aed9 	blt.w	800f260 <__gethex+0x1d6>
 800f4ae:	2701      	movs	r7, #1
 800f4b0:	e7c7      	b.n	800f442 <__gethex+0x3b8>
 800f4b2:	f016 061f 	ands.w	r6, r6, #31
 800f4b6:	d0fa      	beq.n	800f4ae <__gethex+0x424>
 800f4b8:	449a      	add	sl, r3
 800f4ba:	f1c6 0620 	rsb	r6, r6, #32
 800f4be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f4c2:	f000 fa0f 	bl	800f8e4 <__hi0bits>
 800f4c6:	42b0      	cmp	r0, r6
 800f4c8:	dbe7      	blt.n	800f49a <__gethex+0x410>
 800f4ca:	e7f0      	b.n	800f4ae <__gethex+0x424>

0800f4cc <L_shift>:
 800f4cc:	f1c2 0208 	rsb	r2, r2, #8
 800f4d0:	0092      	lsls	r2, r2, #2
 800f4d2:	b570      	push	{r4, r5, r6, lr}
 800f4d4:	f1c2 0620 	rsb	r6, r2, #32
 800f4d8:	6843      	ldr	r3, [r0, #4]
 800f4da:	6804      	ldr	r4, [r0, #0]
 800f4dc:	fa03 f506 	lsl.w	r5, r3, r6
 800f4e0:	432c      	orrs	r4, r5
 800f4e2:	40d3      	lsrs	r3, r2
 800f4e4:	6004      	str	r4, [r0, #0]
 800f4e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4ea:	4288      	cmp	r0, r1
 800f4ec:	d3f4      	bcc.n	800f4d8 <L_shift+0xc>
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}

0800f4f0 <__match>:
 800f4f0:	b530      	push	{r4, r5, lr}
 800f4f2:	6803      	ldr	r3, [r0, #0]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4fa:	b914      	cbnz	r4, 800f502 <__match+0x12>
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	2001      	movs	r0, #1
 800f500:	bd30      	pop	{r4, r5, pc}
 800f502:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f506:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f50a:	2d19      	cmp	r5, #25
 800f50c:	bf98      	it	ls
 800f50e:	3220      	addls	r2, #32
 800f510:	42a2      	cmp	r2, r4
 800f512:	d0f0      	beq.n	800f4f6 <__match+0x6>
 800f514:	2000      	movs	r0, #0
 800f516:	e7f3      	b.n	800f500 <__match+0x10>

0800f518 <__hexnan>:
 800f518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f51c:	680b      	ldr	r3, [r1, #0]
 800f51e:	6801      	ldr	r1, [r0, #0]
 800f520:	115f      	asrs	r7, r3, #5
 800f522:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f526:	f013 031f 	ands.w	r3, r3, #31
 800f52a:	b087      	sub	sp, #28
 800f52c:	bf18      	it	ne
 800f52e:	3704      	addne	r7, #4
 800f530:	2500      	movs	r5, #0
 800f532:	1f3e      	subs	r6, r7, #4
 800f534:	4682      	mov	sl, r0
 800f536:	4690      	mov	r8, r2
 800f538:	9301      	str	r3, [sp, #4]
 800f53a:	f847 5c04 	str.w	r5, [r7, #-4]
 800f53e:	46b1      	mov	r9, r6
 800f540:	4634      	mov	r4, r6
 800f542:	9502      	str	r5, [sp, #8]
 800f544:	46ab      	mov	fp, r5
 800f546:	784a      	ldrb	r2, [r1, #1]
 800f548:	1c4b      	adds	r3, r1, #1
 800f54a:	9303      	str	r3, [sp, #12]
 800f54c:	b342      	cbz	r2, 800f5a0 <__hexnan+0x88>
 800f54e:	4610      	mov	r0, r2
 800f550:	9105      	str	r1, [sp, #20]
 800f552:	9204      	str	r2, [sp, #16]
 800f554:	f7ff fd84 	bl	800f060 <__hexdig_fun>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d143      	bne.n	800f5e4 <__hexnan+0xcc>
 800f55c:	9a04      	ldr	r2, [sp, #16]
 800f55e:	9905      	ldr	r1, [sp, #20]
 800f560:	2a20      	cmp	r2, #32
 800f562:	d818      	bhi.n	800f596 <__hexnan+0x7e>
 800f564:	9b02      	ldr	r3, [sp, #8]
 800f566:	459b      	cmp	fp, r3
 800f568:	dd13      	ble.n	800f592 <__hexnan+0x7a>
 800f56a:	454c      	cmp	r4, r9
 800f56c:	d206      	bcs.n	800f57c <__hexnan+0x64>
 800f56e:	2d07      	cmp	r5, #7
 800f570:	dc04      	bgt.n	800f57c <__hexnan+0x64>
 800f572:	462a      	mov	r2, r5
 800f574:	4649      	mov	r1, r9
 800f576:	4620      	mov	r0, r4
 800f578:	f7ff ffa8 	bl	800f4cc <L_shift>
 800f57c:	4544      	cmp	r4, r8
 800f57e:	d944      	bls.n	800f60a <__hexnan+0xf2>
 800f580:	2300      	movs	r3, #0
 800f582:	f1a4 0904 	sub.w	r9, r4, #4
 800f586:	f844 3c04 	str.w	r3, [r4, #-4]
 800f58a:	f8cd b008 	str.w	fp, [sp, #8]
 800f58e:	464c      	mov	r4, r9
 800f590:	461d      	mov	r5, r3
 800f592:	9903      	ldr	r1, [sp, #12]
 800f594:	e7d7      	b.n	800f546 <__hexnan+0x2e>
 800f596:	2a29      	cmp	r2, #41	; 0x29
 800f598:	d14a      	bne.n	800f630 <__hexnan+0x118>
 800f59a:	3102      	adds	r1, #2
 800f59c:	f8ca 1000 	str.w	r1, [sl]
 800f5a0:	f1bb 0f00 	cmp.w	fp, #0
 800f5a4:	d044      	beq.n	800f630 <__hexnan+0x118>
 800f5a6:	454c      	cmp	r4, r9
 800f5a8:	d206      	bcs.n	800f5b8 <__hexnan+0xa0>
 800f5aa:	2d07      	cmp	r5, #7
 800f5ac:	dc04      	bgt.n	800f5b8 <__hexnan+0xa0>
 800f5ae:	462a      	mov	r2, r5
 800f5b0:	4649      	mov	r1, r9
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f7ff ff8a 	bl	800f4cc <L_shift>
 800f5b8:	4544      	cmp	r4, r8
 800f5ba:	d928      	bls.n	800f60e <__hexnan+0xf6>
 800f5bc:	4643      	mov	r3, r8
 800f5be:	f854 2b04 	ldr.w	r2, [r4], #4
 800f5c2:	f843 2b04 	str.w	r2, [r3], #4
 800f5c6:	42a6      	cmp	r6, r4
 800f5c8:	d2f9      	bcs.n	800f5be <__hexnan+0xa6>
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	f843 2b04 	str.w	r2, [r3], #4
 800f5d0:	429e      	cmp	r6, r3
 800f5d2:	d2fb      	bcs.n	800f5cc <__hexnan+0xb4>
 800f5d4:	6833      	ldr	r3, [r6, #0]
 800f5d6:	b91b      	cbnz	r3, 800f5e0 <__hexnan+0xc8>
 800f5d8:	4546      	cmp	r6, r8
 800f5da:	d127      	bne.n	800f62c <__hexnan+0x114>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	6033      	str	r3, [r6, #0]
 800f5e0:	2005      	movs	r0, #5
 800f5e2:	e026      	b.n	800f632 <__hexnan+0x11a>
 800f5e4:	3501      	adds	r5, #1
 800f5e6:	2d08      	cmp	r5, #8
 800f5e8:	f10b 0b01 	add.w	fp, fp, #1
 800f5ec:	dd06      	ble.n	800f5fc <__hexnan+0xe4>
 800f5ee:	4544      	cmp	r4, r8
 800f5f0:	d9cf      	bls.n	800f592 <__hexnan+0x7a>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5f8:	2501      	movs	r5, #1
 800f5fa:	3c04      	subs	r4, #4
 800f5fc:	6822      	ldr	r2, [r4, #0]
 800f5fe:	f000 000f 	and.w	r0, r0, #15
 800f602:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f606:	6020      	str	r0, [r4, #0]
 800f608:	e7c3      	b.n	800f592 <__hexnan+0x7a>
 800f60a:	2508      	movs	r5, #8
 800f60c:	e7c1      	b.n	800f592 <__hexnan+0x7a>
 800f60e:	9b01      	ldr	r3, [sp, #4]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d0df      	beq.n	800f5d4 <__hexnan+0xbc>
 800f614:	f04f 32ff 	mov.w	r2, #4294967295
 800f618:	f1c3 0320 	rsb	r3, r3, #32
 800f61c:	fa22 f303 	lsr.w	r3, r2, r3
 800f620:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f624:	401a      	ands	r2, r3
 800f626:	f847 2c04 	str.w	r2, [r7, #-4]
 800f62a:	e7d3      	b.n	800f5d4 <__hexnan+0xbc>
 800f62c:	3e04      	subs	r6, #4
 800f62e:	e7d1      	b.n	800f5d4 <__hexnan+0xbc>
 800f630:	2004      	movs	r0, #4
 800f632:	b007      	add	sp, #28
 800f634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f638 <__locale_ctype_ptr_l>:
 800f638:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f63c:	4770      	bx	lr

0800f63e <__localeconv_l>:
 800f63e:	30f0      	adds	r0, #240	; 0xf0
 800f640:	4770      	bx	lr
	...

0800f644 <_localeconv_r>:
 800f644:	4b04      	ldr	r3, [pc, #16]	; (800f658 <_localeconv_r+0x14>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	6a18      	ldr	r0, [r3, #32]
 800f64a:	4b04      	ldr	r3, [pc, #16]	; (800f65c <_localeconv_r+0x18>)
 800f64c:	2800      	cmp	r0, #0
 800f64e:	bf08      	it	eq
 800f650:	4618      	moveq	r0, r3
 800f652:	30f0      	adds	r0, #240	; 0xf0
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	20000040 	.word	0x20000040
 800f65c:	200000a4 	.word	0x200000a4

0800f660 <__swhatbuf_r>:
 800f660:	b570      	push	{r4, r5, r6, lr}
 800f662:	460e      	mov	r6, r1
 800f664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f668:	2900      	cmp	r1, #0
 800f66a:	b096      	sub	sp, #88	; 0x58
 800f66c:	4614      	mov	r4, r2
 800f66e:	461d      	mov	r5, r3
 800f670:	da07      	bge.n	800f682 <__swhatbuf_r+0x22>
 800f672:	2300      	movs	r3, #0
 800f674:	602b      	str	r3, [r5, #0]
 800f676:	89b3      	ldrh	r3, [r6, #12]
 800f678:	061a      	lsls	r2, r3, #24
 800f67a:	d410      	bmi.n	800f69e <__swhatbuf_r+0x3e>
 800f67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f680:	e00e      	b.n	800f6a0 <__swhatbuf_r+0x40>
 800f682:	466a      	mov	r2, sp
 800f684:	f001 f846 	bl	8010714 <_fstat_r>
 800f688:	2800      	cmp	r0, #0
 800f68a:	dbf2      	blt.n	800f672 <__swhatbuf_r+0x12>
 800f68c:	9a01      	ldr	r2, [sp, #4]
 800f68e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f696:	425a      	negs	r2, r3
 800f698:	415a      	adcs	r2, r3
 800f69a:	602a      	str	r2, [r5, #0]
 800f69c:	e7ee      	b.n	800f67c <__swhatbuf_r+0x1c>
 800f69e:	2340      	movs	r3, #64	; 0x40
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	b016      	add	sp, #88	; 0x58
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}

0800f6a8 <__smakebuf_r>:
 800f6a8:	898b      	ldrh	r3, [r1, #12]
 800f6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6ac:	079d      	lsls	r5, r3, #30
 800f6ae:	4606      	mov	r6, r0
 800f6b0:	460c      	mov	r4, r1
 800f6b2:	d507      	bpl.n	800f6c4 <__smakebuf_r+0x1c>
 800f6b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6b8:	6023      	str	r3, [r4, #0]
 800f6ba:	6123      	str	r3, [r4, #16]
 800f6bc:	2301      	movs	r3, #1
 800f6be:	6163      	str	r3, [r4, #20]
 800f6c0:	b002      	add	sp, #8
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}
 800f6c4:	ab01      	add	r3, sp, #4
 800f6c6:	466a      	mov	r2, sp
 800f6c8:	f7ff ffca 	bl	800f660 <__swhatbuf_r>
 800f6cc:	9900      	ldr	r1, [sp, #0]
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f000 fc9f 	bl	8010014 <_malloc_r>
 800f6d6:	b948      	cbnz	r0, 800f6ec <__smakebuf_r+0x44>
 800f6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6dc:	059a      	lsls	r2, r3, #22
 800f6de:	d4ef      	bmi.n	800f6c0 <__smakebuf_r+0x18>
 800f6e0:	f023 0303 	bic.w	r3, r3, #3
 800f6e4:	f043 0302 	orr.w	r3, r3, #2
 800f6e8:	81a3      	strh	r3, [r4, #12]
 800f6ea:	e7e3      	b.n	800f6b4 <__smakebuf_r+0xc>
 800f6ec:	4b0d      	ldr	r3, [pc, #52]	; (800f724 <__smakebuf_r+0x7c>)
 800f6ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	6020      	str	r0, [r4, #0]
 800f6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6f8:	81a3      	strh	r3, [r4, #12]
 800f6fa:	9b00      	ldr	r3, [sp, #0]
 800f6fc:	6163      	str	r3, [r4, #20]
 800f6fe:	9b01      	ldr	r3, [sp, #4]
 800f700:	6120      	str	r0, [r4, #16]
 800f702:	b15b      	cbz	r3, 800f71c <__smakebuf_r+0x74>
 800f704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f708:	4630      	mov	r0, r6
 800f70a:	f001 f815 	bl	8010738 <_isatty_r>
 800f70e:	b128      	cbz	r0, 800f71c <__smakebuf_r+0x74>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	f023 0303 	bic.w	r3, r3, #3
 800f716:	f043 0301 	orr.w	r3, r3, #1
 800f71a:	81a3      	strh	r3, [r4, #12]
 800f71c:	89a3      	ldrh	r3, [r4, #12]
 800f71e:	431d      	orrs	r5, r3
 800f720:	81a5      	strh	r5, [r4, #12]
 800f722:	e7cd      	b.n	800f6c0 <__smakebuf_r+0x18>
 800f724:	0800eea1 	.word	0x0800eea1

0800f728 <malloc>:
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <malloc+0xc>)
 800f72a:	4601      	mov	r1, r0
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f000 bc71 	b.w	8010014 <_malloc_r>
 800f732:	bf00      	nop
 800f734:	20000040 	.word	0x20000040

0800f738 <__ascii_mbtowc>:
 800f738:	b082      	sub	sp, #8
 800f73a:	b901      	cbnz	r1, 800f73e <__ascii_mbtowc+0x6>
 800f73c:	a901      	add	r1, sp, #4
 800f73e:	b142      	cbz	r2, 800f752 <__ascii_mbtowc+0x1a>
 800f740:	b14b      	cbz	r3, 800f756 <__ascii_mbtowc+0x1e>
 800f742:	7813      	ldrb	r3, [r2, #0]
 800f744:	600b      	str	r3, [r1, #0]
 800f746:	7812      	ldrb	r2, [r2, #0]
 800f748:	1c10      	adds	r0, r2, #0
 800f74a:	bf18      	it	ne
 800f74c:	2001      	movne	r0, #1
 800f74e:	b002      	add	sp, #8
 800f750:	4770      	bx	lr
 800f752:	4610      	mov	r0, r2
 800f754:	e7fb      	b.n	800f74e <__ascii_mbtowc+0x16>
 800f756:	f06f 0001 	mvn.w	r0, #1
 800f75a:	e7f8      	b.n	800f74e <__ascii_mbtowc+0x16>

0800f75c <_Balloc>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f760:	4604      	mov	r4, r0
 800f762:	460e      	mov	r6, r1
 800f764:	b93d      	cbnz	r5, 800f776 <_Balloc+0x1a>
 800f766:	2010      	movs	r0, #16
 800f768:	f7ff ffde 	bl	800f728 <malloc>
 800f76c:	6260      	str	r0, [r4, #36]	; 0x24
 800f76e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f772:	6005      	str	r5, [r0, #0]
 800f774:	60c5      	str	r5, [r0, #12]
 800f776:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f778:	68eb      	ldr	r3, [r5, #12]
 800f77a:	b183      	cbz	r3, 800f79e <_Balloc+0x42>
 800f77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f784:	b9b8      	cbnz	r0, 800f7b6 <_Balloc+0x5a>
 800f786:	2101      	movs	r1, #1
 800f788:	fa01 f506 	lsl.w	r5, r1, r6
 800f78c:	1d6a      	adds	r2, r5, #5
 800f78e:	0092      	lsls	r2, r2, #2
 800f790:	4620      	mov	r0, r4
 800f792:	f000 fbe2 	bl	800ff5a <_calloc_r>
 800f796:	b160      	cbz	r0, 800f7b2 <_Balloc+0x56>
 800f798:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f79c:	e00e      	b.n	800f7bc <_Balloc+0x60>
 800f79e:	2221      	movs	r2, #33	; 0x21
 800f7a0:	2104      	movs	r1, #4
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 fbd9 	bl	800ff5a <_calloc_r>
 800f7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7aa:	60e8      	str	r0, [r5, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d1e4      	bne.n	800f77c <_Balloc+0x20>
 800f7b2:	2000      	movs	r0, #0
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	6802      	ldr	r2, [r0, #0]
 800f7b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7c2:	e7f7      	b.n	800f7b4 <_Balloc+0x58>

0800f7c4 <_Bfree>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f7c8:	4606      	mov	r6, r0
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	b93c      	cbnz	r4, 800f7de <_Bfree+0x1a>
 800f7ce:	2010      	movs	r0, #16
 800f7d0:	f7ff ffaa 	bl	800f728 <malloc>
 800f7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800f7d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7da:	6004      	str	r4, [r0, #0]
 800f7dc:	60c4      	str	r4, [r0, #12]
 800f7de:	b13d      	cbz	r5, 800f7f0 <_Bfree+0x2c>
 800f7e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f7e2:	686a      	ldr	r2, [r5, #4]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7ea:	6029      	str	r1, [r5, #0]
 800f7ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}

0800f7f2 <__multadd>:
 800f7f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f6:	690d      	ldr	r5, [r1, #16]
 800f7f8:	461f      	mov	r7, r3
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460c      	mov	r4, r1
 800f7fe:	f101 0c14 	add.w	ip, r1, #20
 800f802:	2300      	movs	r3, #0
 800f804:	f8dc 0000 	ldr.w	r0, [ip]
 800f808:	b281      	uxth	r1, r0
 800f80a:	fb02 7101 	mla	r1, r2, r1, r7
 800f80e:	0c0f      	lsrs	r7, r1, #16
 800f810:	0c00      	lsrs	r0, r0, #16
 800f812:	fb02 7000 	mla	r0, r2, r0, r7
 800f816:	b289      	uxth	r1, r1
 800f818:	3301      	adds	r3, #1
 800f81a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f81e:	429d      	cmp	r5, r3
 800f820:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f824:	f84c 1b04 	str.w	r1, [ip], #4
 800f828:	dcec      	bgt.n	800f804 <__multadd+0x12>
 800f82a:	b1d7      	cbz	r7, 800f862 <__multadd+0x70>
 800f82c:	68a3      	ldr	r3, [r4, #8]
 800f82e:	42ab      	cmp	r3, r5
 800f830:	dc12      	bgt.n	800f858 <__multadd+0x66>
 800f832:	6861      	ldr	r1, [r4, #4]
 800f834:	4630      	mov	r0, r6
 800f836:	3101      	adds	r1, #1
 800f838:	f7ff ff90 	bl	800f75c <_Balloc>
 800f83c:	6922      	ldr	r2, [r4, #16]
 800f83e:	3202      	adds	r2, #2
 800f840:	f104 010c 	add.w	r1, r4, #12
 800f844:	4680      	mov	r8, r0
 800f846:	0092      	lsls	r2, r2, #2
 800f848:	300c      	adds	r0, #12
 800f84a:	f7fc fdad 	bl	800c3a8 <memcpy>
 800f84e:	4621      	mov	r1, r4
 800f850:	4630      	mov	r0, r6
 800f852:	f7ff ffb7 	bl	800f7c4 <_Bfree>
 800f856:	4644      	mov	r4, r8
 800f858:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f85c:	3501      	adds	r5, #1
 800f85e:	615f      	str	r7, [r3, #20]
 800f860:	6125      	str	r5, [r4, #16]
 800f862:	4620      	mov	r0, r4
 800f864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f868 <__s2b>:
 800f868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f86c:	460c      	mov	r4, r1
 800f86e:	4615      	mov	r5, r2
 800f870:	461f      	mov	r7, r3
 800f872:	2209      	movs	r2, #9
 800f874:	3308      	adds	r3, #8
 800f876:	4606      	mov	r6, r0
 800f878:	fb93 f3f2 	sdiv	r3, r3, r2
 800f87c:	2100      	movs	r1, #0
 800f87e:	2201      	movs	r2, #1
 800f880:	429a      	cmp	r2, r3
 800f882:	db20      	blt.n	800f8c6 <__s2b+0x5e>
 800f884:	4630      	mov	r0, r6
 800f886:	f7ff ff69 	bl	800f75c <_Balloc>
 800f88a:	9b08      	ldr	r3, [sp, #32]
 800f88c:	6143      	str	r3, [r0, #20]
 800f88e:	2d09      	cmp	r5, #9
 800f890:	f04f 0301 	mov.w	r3, #1
 800f894:	6103      	str	r3, [r0, #16]
 800f896:	dd19      	ble.n	800f8cc <__s2b+0x64>
 800f898:	f104 0809 	add.w	r8, r4, #9
 800f89c:	46c1      	mov	r9, r8
 800f89e:	442c      	add	r4, r5
 800f8a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f8a4:	4601      	mov	r1, r0
 800f8a6:	3b30      	subs	r3, #48	; 0x30
 800f8a8:	220a      	movs	r2, #10
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f7ff ffa1 	bl	800f7f2 <__multadd>
 800f8b0:	45a1      	cmp	r9, r4
 800f8b2:	d1f5      	bne.n	800f8a0 <__s2b+0x38>
 800f8b4:	eb08 0405 	add.w	r4, r8, r5
 800f8b8:	3c08      	subs	r4, #8
 800f8ba:	1b2d      	subs	r5, r5, r4
 800f8bc:	1963      	adds	r3, r4, r5
 800f8be:	42bb      	cmp	r3, r7
 800f8c0:	db07      	blt.n	800f8d2 <__s2b+0x6a>
 800f8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c6:	0052      	lsls	r2, r2, #1
 800f8c8:	3101      	adds	r1, #1
 800f8ca:	e7d9      	b.n	800f880 <__s2b+0x18>
 800f8cc:	340a      	adds	r4, #10
 800f8ce:	2509      	movs	r5, #9
 800f8d0:	e7f3      	b.n	800f8ba <__s2b+0x52>
 800f8d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8d6:	4601      	mov	r1, r0
 800f8d8:	3b30      	subs	r3, #48	; 0x30
 800f8da:	220a      	movs	r2, #10
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f7ff ff88 	bl	800f7f2 <__multadd>
 800f8e2:	e7eb      	b.n	800f8bc <__s2b+0x54>

0800f8e4 <__hi0bits>:
 800f8e4:	0c02      	lsrs	r2, r0, #16
 800f8e6:	0412      	lsls	r2, r2, #16
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	b9b2      	cbnz	r2, 800f91a <__hi0bits+0x36>
 800f8ec:	0403      	lsls	r3, r0, #16
 800f8ee:	2010      	movs	r0, #16
 800f8f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f8f4:	bf04      	itt	eq
 800f8f6:	021b      	lsleq	r3, r3, #8
 800f8f8:	3008      	addeq	r0, #8
 800f8fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f8fe:	bf04      	itt	eq
 800f900:	011b      	lsleq	r3, r3, #4
 800f902:	3004      	addeq	r0, #4
 800f904:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f908:	bf04      	itt	eq
 800f90a:	009b      	lsleq	r3, r3, #2
 800f90c:	3002      	addeq	r0, #2
 800f90e:	2b00      	cmp	r3, #0
 800f910:	db06      	blt.n	800f920 <__hi0bits+0x3c>
 800f912:	005b      	lsls	r3, r3, #1
 800f914:	d503      	bpl.n	800f91e <__hi0bits+0x3a>
 800f916:	3001      	adds	r0, #1
 800f918:	4770      	bx	lr
 800f91a:	2000      	movs	r0, #0
 800f91c:	e7e8      	b.n	800f8f0 <__hi0bits+0xc>
 800f91e:	2020      	movs	r0, #32
 800f920:	4770      	bx	lr

0800f922 <__lo0bits>:
 800f922:	6803      	ldr	r3, [r0, #0]
 800f924:	f013 0207 	ands.w	r2, r3, #7
 800f928:	4601      	mov	r1, r0
 800f92a:	d00b      	beq.n	800f944 <__lo0bits+0x22>
 800f92c:	07da      	lsls	r2, r3, #31
 800f92e:	d423      	bmi.n	800f978 <__lo0bits+0x56>
 800f930:	0798      	lsls	r0, r3, #30
 800f932:	bf49      	itett	mi
 800f934:	085b      	lsrmi	r3, r3, #1
 800f936:	089b      	lsrpl	r3, r3, #2
 800f938:	2001      	movmi	r0, #1
 800f93a:	600b      	strmi	r3, [r1, #0]
 800f93c:	bf5c      	itt	pl
 800f93e:	600b      	strpl	r3, [r1, #0]
 800f940:	2002      	movpl	r0, #2
 800f942:	4770      	bx	lr
 800f944:	b298      	uxth	r0, r3
 800f946:	b9a8      	cbnz	r0, 800f974 <__lo0bits+0x52>
 800f948:	0c1b      	lsrs	r3, r3, #16
 800f94a:	2010      	movs	r0, #16
 800f94c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f950:	bf04      	itt	eq
 800f952:	0a1b      	lsreq	r3, r3, #8
 800f954:	3008      	addeq	r0, #8
 800f956:	071a      	lsls	r2, r3, #28
 800f958:	bf04      	itt	eq
 800f95a:	091b      	lsreq	r3, r3, #4
 800f95c:	3004      	addeq	r0, #4
 800f95e:	079a      	lsls	r2, r3, #30
 800f960:	bf04      	itt	eq
 800f962:	089b      	lsreq	r3, r3, #2
 800f964:	3002      	addeq	r0, #2
 800f966:	07da      	lsls	r2, r3, #31
 800f968:	d402      	bmi.n	800f970 <__lo0bits+0x4e>
 800f96a:	085b      	lsrs	r3, r3, #1
 800f96c:	d006      	beq.n	800f97c <__lo0bits+0x5a>
 800f96e:	3001      	adds	r0, #1
 800f970:	600b      	str	r3, [r1, #0]
 800f972:	4770      	bx	lr
 800f974:	4610      	mov	r0, r2
 800f976:	e7e9      	b.n	800f94c <__lo0bits+0x2a>
 800f978:	2000      	movs	r0, #0
 800f97a:	4770      	bx	lr
 800f97c:	2020      	movs	r0, #32
 800f97e:	4770      	bx	lr

0800f980 <__i2b>:
 800f980:	b510      	push	{r4, lr}
 800f982:	460c      	mov	r4, r1
 800f984:	2101      	movs	r1, #1
 800f986:	f7ff fee9 	bl	800f75c <_Balloc>
 800f98a:	2201      	movs	r2, #1
 800f98c:	6144      	str	r4, [r0, #20]
 800f98e:	6102      	str	r2, [r0, #16]
 800f990:	bd10      	pop	{r4, pc}

0800f992 <__multiply>:
 800f992:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f996:	4614      	mov	r4, r2
 800f998:	690a      	ldr	r2, [r1, #16]
 800f99a:	6923      	ldr	r3, [r4, #16]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	bfb8      	it	lt
 800f9a0:	460b      	movlt	r3, r1
 800f9a2:	4688      	mov	r8, r1
 800f9a4:	bfbc      	itt	lt
 800f9a6:	46a0      	movlt	r8, r4
 800f9a8:	461c      	movlt	r4, r3
 800f9aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f9ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f9b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f9ba:	eb07 0609 	add.w	r6, r7, r9
 800f9be:	42b3      	cmp	r3, r6
 800f9c0:	bfb8      	it	lt
 800f9c2:	3101      	addlt	r1, #1
 800f9c4:	f7ff feca 	bl	800f75c <_Balloc>
 800f9c8:	f100 0514 	add.w	r5, r0, #20
 800f9cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f9d0:	462b      	mov	r3, r5
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	4573      	cmp	r3, lr
 800f9d6:	d316      	bcc.n	800fa06 <__multiply+0x74>
 800f9d8:	f104 0214 	add.w	r2, r4, #20
 800f9dc:	f108 0114 	add.w	r1, r8, #20
 800f9e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f9e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f9e8:	9300      	str	r3, [sp, #0]
 800f9ea:	9b00      	ldr	r3, [sp, #0]
 800f9ec:	9201      	str	r2, [sp, #4]
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d80c      	bhi.n	800fa0c <__multiply+0x7a>
 800f9f2:	2e00      	cmp	r6, #0
 800f9f4:	dd03      	ble.n	800f9fe <__multiply+0x6c>
 800f9f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d05d      	beq.n	800faba <__multiply+0x128>
 800f9fe:	6106      	str	r6, [r0, #16]
 800fa00:	b003      	add	sp, #12
 800fa02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa06:	f843 2b04 	str.w	r2, [r3], #4
 800fa0a:	e7e3      	b.n	800f9d4 <__multiply+0x42>
 800fa0c:	f8b2 b000 	ldrh.w	fp, [r2]
 800fa10:	f1bb 0f00 	cmp.w	fp, #0
 800fa14:	d023      	beq.n	800fa5e <__multiply+0xcc>
 800fa16:	4689      	mov	r9, r1
 800fa18:	46ac      	mov	ip, r5
 800fa1a:	f04f 0800 	mov.w	r8, #0
 800fa1e:	f859 4b04 	ldr.w	r4, [r9], #4
 800fa22:	f8dc a000 	ldr.w	sl, [ip]
 800fa26:	b2a3      	uxth	r3, r4
 800fa28:	fa1f fa8a 	uxth.w	sl, sl
 800fa2c:	fb0b a303 	mla	r3, fp, r3, sl
 800fa30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fa34:	f8dc 4000 	ldr.w	r4, [ip]
 800fa38:	4443      	add	r3, r8
 800fa3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa3e:	fb0b 840a 	mla	r4, fp, sl, r8
 800fa42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fa46:	46e2      	mov	sl, ip
 800fa48:	b29b      	uxth	r3, r3
 800fa4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fa4e:	454f      	cmp	r7, r9
 800fa50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fa54:	f84a 3b04 	str.w	r3, [sl], #4
 800fa58:	d82b      	bhi.n	800fab2 <__multiply+0x120>
 800fa5a:	f8cc 8004 	str.w	r8, [ip, #4]
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fa64:	3204      	adds	r2, #4
 800fa66:	f1ba 0f00 	cmp.w	sl, #0
 800fa6a:	d020      	beq.n	800faae <__multiply+0x11c>
 800fa6c:	682b      	ldr	r3, [r5, #0]
 800fa6e:	4689      	mov	r9, r1
 800fa70:	46a8      	mov	r8, r5
 800fa72:	f04f 0b00 	mov.w	fp, #0
 800fa76:	f8b9 c000 	ldrh.w	ip, [r9]
 800fa7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fa7e:	fb0a 440c 	mla	r4, sl, ip, r4
 800fa82:	445c      	add	r4, fp
 800fa84:	46c4      	mov	ip, r8
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fa8c:	f84c 3b04 	str.w	r3, [ip], #4
 800fa90:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fa98:	0c1b      	lsrs	r3, r3, #16
 800fa9a:	fb0a b303 	mla	r3, sl, r3, fp
 800fa9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800faa2:	454f      	cmp	r7, r9
 800faa4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800faa8:	d805      	bhi.n	800fab6 <__multiply+0x124>
 800faaa:	f8c8 3004 	str.w	r3, [r8, #4]
 800faae:	3504      	adds	r5, #4
 800fab0:	e79b      	b.n	800f9ea <__multiply+0x58>
 800fab2:	46d4      	mov	ip, sl
 800fab4:	e7b3      	b.n	800fa1e <__multiply+0x8c>
 800fab6:	46e0      	mov	r8, ip
 800fab8:	e7dd      	b.n	800fa76 <__multiply+0xe4>
 800faba:	3e01      	subs	r6, #1
 800fabc:	e799      	b.n	800f9f2 <__multiply+0x60>
	...

0800fac0 <__pow5mult>:
 800fac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac4:	4615      	mov	r5, r2
 800fac6:	f012 0203 	ands.w	r2, r2, #3
 800faca:	4606      	mov	r6, r0
 800facc:	460f      	mov	r7, r1
 800face:	d007      	beq.n	800fae0 <__pow5mult+0x20>
 800fad0:	3a01      	subs	r2, #1
 800fad2:	4c21      	ldr	r4, [pc, #132]	; (800fb58 <__pow5mult+0x98>)
 800fad4:	2300      	movs	r3, #0
 800fad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fada:	f7ff fe8a 	bl	800f7f2 <__multadd>
 800fade:	4607      	mov	r7, r0
 800fae0:	10ad      	asrs	r5, r5, #2
 800fae2:	d035      	beq.n	800fb50 <__pow5mult+0x90>
 800fae4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fae6:	b93c      	cbnz	r4, 800faf8 <__pow5mult+0x38>
 800fae8:	2010      	movs	r0, #16
 800faea:	f7ff fe1d 	bl	800f728 <malloc>
 800faee:	6270      	str	r0, [r6, #36]	; 0x24
 800faf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800faf4:	6004      	str	r4, [r0, #0]
 800faf6:	60c4      	str	r4, [r0, #12]
 800faf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fafc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb00:	b94c      	cbnz	r4, 800fb16 <__pow5mult+0x56>
 800fb02:	f240 2171 	movw	r1, #625	; 0x271
 800fb06:	4630      	mov	r0, r6
 800fb08:	f7ff ff3a 	bl	800f980 <__i2b>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb12:	4604      	mov	r4, r0
 800fb14:	6003      	str	r3, [r0, #0]
 800fb16:	f04f 0800 	mov.w	r8, #0
 800fb1a:	07eb      	lsls	r3, r5, #31
 800fb1c:	d50a      	bpl.n	800fb34 <__pow5mult+0x74>
 800fb1e:	4639      	mov	r1, r7
 800fb20:	4622      	mov	r2, r4
 800fb22:	4630      	mov	r0, r6
 800fb24:	f7ff ff35 	bl	800f992 <__multiply>
 800fb28:	4639      	mov	r1, r7
 800fb2a:	4681      	mov	r9, r0
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	f7ff fe49 	bl	800f7c4 <_Bfree>
 800fb32:	464f      	mov	r7, r9
 800fb34:	106d      	asrs	r5, r5, #1
 800fb36:	d00b      	beq.n	800fb50 <__pow5mult+0x90>
 800fb38:	6820      	ldr	r0, [r4, #0]
 800fb3a:	b938      	cbnz	r0, 800fb4c <__pow5mult+0x8c>
 800fb3c:	4622      	mov	r2, r4
 800fb3e:	4621      	mov	r1, r4
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff ff26 	bl	800f992 <__multiply>
 800fb46:	6020      	str	r0, [r4, #0]
 800fb48:	f8c0 8000 	str.w	r8, [r0]
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	e7e4      	b.n	800fb1a <__pow5mult+0x5a>
 800fb50:	4638      	mov	r0, r7
 800fb52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb56:	bf00      	nop
 800fb58:	08010ce0 	.word	0x08010ce0

0800fb5c <__lshift>:
 800fb5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb60:	460c      	mov	r4, r1
 800fb62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	6849      	ldr	r1, [r1, #4]
 800fb6a:	eb0a 0903 	add.w	r9, sl, r3
 800fb6e:	68a3      	ldr	r3, [r4, #8]
 800fb70:	4607      	mov	r7, r0
 800fb72:	4616      	mov	r6, r2
 800fb74:	f109 0501 	add.w	r5, r9, #1
 800fb78:	42ab      	cmp	r3, r5
 800fb7a:	db32      	blt.n	800fbe2 <__lshift+0x86>
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	f7ff fded 	bl	800f75c <_Balloc>
 800fb82:	2300      	movs	r3, #0
 800fb84:	4680      	mov	r8, r0
 800fb86:	f100 0114 	add.w	r1, r0, #20
 800fb8a:	461a      	mov	r2, r3
 800fb8c:	4553      	cmp	r3, sl
 800fb8e:	db2b      	blt.n	800fbe8 <__lshift+0x8c>
 800fb90:	6920      	ldr	r0, [r4, #16]
 800fb92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb96:	f104 0314 	add.w	r3, r4, #20
 800fb9a:	f016 021f 	ands.w	r2, r6, #31
 800fb9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fba2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fba6:	d025      	beq.n	800fbf4 <__lshift+0x98>
 800fba8:	f1c2 0e20 	rsb	lr, r2, #32
 800fbac:	2000      	movs	r0, #0
 800fbae:	681e      	ldr	r6, [r3, #0]
 800fbb0:	468a      	mov	sl, r1
 800fbb2:	4096      	lsls	r6, r2
 800fbb4:	4330      	orrs	r0, r6
 800fbb6:	f84a 0b04 	str.w	r0, [sl], #4
 800fbba:	f853 0b04 	ldr.w	r0, [r3], #4
 800fbbe:	459c      	cmp	ip, r3
 800fbc0:	fa20 f00e 	lsr.w	r0, r0, lr
 800fbc4:	d814      	bhi.n	800fbf0 <__lshift+0x94>
 800fbc6:	6048      	str	r0, [r1, #4]
 800fbc8:	b108      	cbz	r0, 800fbce <__lshift+0x72>
 800fbca:	f109 0502 	add.w	r5, r9, #2
 800fbce:	3d01      	subs	r5, #1
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	f8c8 5010 	str.w	r5, [r8, #16]
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	f7ff fdf4 	bl	800f7c4 <_Bfree>
 800fbdc:	4640      	mov	r0, r8
 800fbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbe2:	3101      	adds	r1, #1
 800fbe4:	005b      	lsls	r3, r3, #1
 800fbe6:	e7c7      	b.n	800fb78 <__lshift+0x1c>
 800fbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fbec:	3301      	adds	r3, #1
 800fbee:	e7cd      	b.n	800fb8c <__lshift+0x30>
 800fbf0:	4651      	mov	r1, sl
 800fbf2:	e7dc      	b.n	800fbae <__lshift+0x52>
 800fbf4:	3904      	subs	r1, #4
 800fbf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbfe:	459c      	cmp	ip, r3
 800fc00:	d8f9      	bhi.n	800fbf6 <__lshift+0x9a>
 800fc02:	e7e4      	b.n	800fbce <__lshift+0x72>

0800fc04 <__mcmp>:
 800fc04:	6903      	ldr	r3, [r0, #16]
 800fc06:	690a      	ldr	r2, [r1, #16]
 800fc08:	1a9b      	subs	r3, r3, r2
 800fc0a:	b530      	push	{r4, r5, lr}
 800fc0c:	d10c      	bne.n	800fc28 <__mcmp+0x24>
 800fc0e:	0092      	lsls	r2, r2, #2
 800fc10:	3014      	adds	r0, #20
 800fc12:	3114      	adds	r1, #20
 800fc14:	1884      	adds	r4, r0, r2
 800fc16:	4411      	add	r1, r2
 800fc18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc20:	4295      	cmp	r5, r2
 800fc22:	d003      	beq.n	800fc2c <__mcmp+0x28>
 800fc24:	d305      	bcc.n	800fc32 <__mcmp+0x2e>
 800fc26:	2301      	movs	r3, #1
 800fc28:	4618      	mov	r0, r3
 800fc2a:	bd30      	pop	{r4, r5, pc}
 800fc2c:	42a0      	cmp	r0, r4
 800fc2e:	d3f3      	bcc.n	800fc18 <__mcmp+0x14>
 800fc30:	e7fa      	b.n	800fc28 <__mcmp+0x24>
 800fc32:	f04f 33ff 	mov.w	r3, #4294967295
 800fc36:	e7f7      	b.n	800fc28 <__mcmp+0x24>

0800fc38 <__mdiff>:
 800fc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3c:	460d      	mov	r5, r1
 800fc3e:	4607      	mov	r7, r0
 800fc40:	4611      	mov	r1, r2
 800fc42:	4628      	mov	r0, r5
 800fc44:	4614      	mov	r4, r2
 800fc46:	f7ff ffdd 	bl	800fc04 <__mcmp>
 800fc4a:	1e06      	subs	r6, r0, #0
 800fc4c:	d108      	bne.n	800fc60 <__mdiff+0x28>
 800fc4e:	4631      	mov	r1, r6
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff fd83 	bl	800f75c <_Balloc>
 800fc56:	2301      	movs	r3, #1
 800fc58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc60:	bfa4      	itt	ge
 800fc62:	4623      	movge	r3, r4
 800fc64:	462c      	movge	r4, r5
 800fc66:	4638      	mov	r0, r7
 800fc68:	6861      	ldr	r1, [r4, #4]
 800fc6a:	bfa6      	itte	ge
 800fc6c:	461d      	movge	r5, r3
 800fc6e:	2600      	movge	r6, #0
 800fc70:	2601      	movlt	r6, #1
 800fc72:	f7ff fd73 	bl	800f75c <_Balloc>
 800fc76:	692b      	ldr	r3, [r5, #16]
 800fc78:	60c6      	str	r6, [r0, #12]
 800fc7a:	6926      	ldr	r6, [r4, #16]
 800fc7c:	f105 0914 	add.w	r9, r5, #20
 800fc80:	f104 0214 	add.w	r2, r4, #20
 800fc84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fc88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fc8c:	f100 0514 	add.w	r5, r0, #20
 800fc90:	f04f 0e00 	mov.w	lr, #0
 800fc94:	f852 ab04 	ldr.w	sl, [r2], #4
 800fc98:	f859 4b04 	ldr.w	r4, [r9], #4
 800fc9c:	fa1e f18a 	uxtah	r1, lr, sl
 800fca0:	b2a3      	uxth	r3, r4
 800fca2:	1ac9      	subs	r1, r1, r3
 800fca4:	0c23      	lsrs	r3, r4, #16
 800fca6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fcaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fcae:	b289      	uxth	r1, r1
 800fcb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fcb4:	45c8      	cmp	r8, r9
 800fcb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fcba:	4694      	mov	ip, r2
 800fcbc:	f845 3b04 	str.w	r3, [r5], #4
 800fcc0:	d8e8      	bhi.n	800fc94 <__mdiff+0x5c>
 800fcc2:	45bc      	cmp	ip, r7
 800fcc4:	d304      	bcc.n	800fcd0 <__mdiff+0x98>
 800fcc6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fcca:	b183      	cbz	r3, 800fcee <__mdiff+0xb6>
 800fccc:	6106      	str	r6, [r0, #16]
 800fcce:	e7c5      	b.n	800fc5c <__mdiff+0x24>
 800fcd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fcd4:	fa1e f381 	uxtah	r3, lr, r1
 800fcd8:	141a      	asrs	r2, r3, #16
 800fcda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fce4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fce8:	f845 3b04 	str.w	r3, [r5], #4
 800fcec:	e7e9      	b.n	800fcc2 <__mdiff+0x8a>
 800fcee:	3e01      	subs	r6, #1
 800fcf0:	e7e9      	b.n	800fcc6 <__mdiff+0x8e>
	...

0800fcf4 <__ulp>:
 800fcf4:	4b12      	ldr	r3, [pc, #72]	; (800fd40 <__ulp+0x4c>)
 800fcf6:	ee10 2a90 	vmov	r2, s1
 800fcfa:	401a      	ands	r2, r3
 800fcfc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	dd04      	ble.n	800fd0e <__ulp+0x1a>
 800fd04:	2000      	movs	r0, #0
 800fd06:	4619      	mov	r1, r3
 800fd08:	ec41 0b10 	vmov	d0, r0, r1
 800fd0c:	4770      	bx	lr
 800fd0e:	425b      	negs	r3, r3
 800fd10:	151b      	asrs	r3, r3, #20
 800fd12:	2b13      	cmp	r3, #19
 800fd14:	f04f 0000 	mov.w	r0, #0
 800fd18:	f04f 0100 	mov.w	r1, #0
 800fd1c:	dc04      	bgt.n	800fd28 <__ulp+0x34>
 800fd1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fd22:	fa42 f103 	asr.w	r1, r2, r3
 800fd26:	e7ef      	b.n	800fd08 <__ulp+0x14>
 800fd28:	3b14      	subs	r3, #20
 800fd2a:	2b1e      	cmp	r3, #30
 800fd2c:	f04f 0201 	mov.w	r2, #1
 800fd30:	bfda      	itte	le
 800fd32:	f1c3 031f 	rsble	r3, r3, #31
 800fd36:	fa02 f303 	lslle.w	r3, r2, r3
 800fd3a:	4613      	movgt	r3, r2
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	e7e3      	b.n	800fd08 <__ulp+0x14>
 800fd40:	7ff00000 	.word	0x7ff00000

0800fd44 <__b2d>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	6905      	ldr	r5, [r0, #16]
 800fd48:	f100 0714 	add.w	r7, r0, #20
 800fd4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fd50:	1f2e      	subs	r6, r5, #4
 800fd52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7ff fdc4 	bl	800f8e4 <__hi0bits>
 800fd5c:	f1c0 0320 	rsb	r3, r0, #32
 800fd60:	280a      	cmp	r0, #10
 800fd62:	600b      	str	r3, [r1, #0]
 800fd64:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fddc <__b2d+0x98>
 800fd68:	dc14      	bgt.n	800fd94 <__b2d+0x50>
 800fd6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fd6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fd72:	42b7      	cmp	r7, r6
 800fd74:	ea41 030c 	orr.w	r3, r1, ip
 800fd78:	bf34      	ite	cc
 800fd7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fd7e:	2100      	movcs	r1, #0
 800fd80:	3015      	adds	r0, #21
 800fd82:	fa04 f000 	lsl.w	r0, r4, r0
 800fd86:	fa21 f10e 	lsr.w	r1, r1, lr
 800fd8a:	ea40 0201 	orr.w	r2, r0, r1
 800fd8e:	ec43 2b10 	vmov	d0, r2, r3
 800fd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd94:	42b7      	cmp	r7, r6
 800fd96:	bf3a      	itte	cc
 800fd98:	f1a5 0608 	subcc.w	r6, r5, #8
 800fd9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fda0:	2100      	movcs	r1, #0
 800fda2:	380b      	subs	r0, #11
 800fda4:	d015      	beq.n	800fdd2 <__b2d+0x8e>
 800fda6:	4084      	lsls	r4, r0
 800fda8:	f1c0 0520 	rsb	r5, r0, #32
 800fdac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fdb0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fdb4:	42be      	cmp	r6, r7
 800fdb6:	fa21 fc05 	lsr.w	ip, r1, r5
 800fdba:	ea44 030c 	orr.w	r3, r4, ip
 800fdbe:	bf8c      	ite	hi
 800fdc0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fdc4:	2400      	movls	r4, #0
 800fdc6:	fa01 f000 	lsl.w	r0, r1, r0
 800fdca:	40ec      	lsrs	r4, r5
 800fdcc:	ea40 0204 	orr.w	r2, r0, r4
 800fdd0:	e7dd      	b.n	800fd8e <__b2d+0x4a>
 800fdd2:	ea44 030c 	orr.w	r3, r4, ip
 800fdd6:	460a      	mov	r2, r1
 800fdd8:	e7d9      	b.n	800fd8e <__b2d+0x4a>
 800fdda:	bf00      	nop
 800fddc:	3ff00000 	.word	0x3ff00000

0800fde0 <__d2b>:
 800fde0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fde4:	460e      	mov	r6, r1
 800fde6:	2101      	movs	r1, #1
 800fde8:	ec59 8b10 	vmov	r8, r9, d0
 800fdec:	4615      	mov	r5, r2
 800fdee:	f7ff fcb5 	bl	800f75c <_Balloc>
 800fdf2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fdfc:	bb34      	cbnz	r4, 800fe4c <__d2b+0x6c>
 800fdfe:	9301      	str	r3, [sp, #4]
 800fe00:	f1b8 0300 	subs.w	r3, r8, #0
 800fe04:	d027      	beq.n	800fe56 <__d2b+0x76>
 800fe06:	a802      	add	r0, sp, #8
 800fe08:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fe0c:	f7ff fd89 	bl	800f922 <__lo0bits>
 800fe10:	9900      	ldr	r1, [sp, #0]
 800fe12:	b1f0      	cbz	r0, 800fe52 <__d2b+0x72>
 800fe14:	9a01      	ldr	r2, [sp, #4]
 800fe16:	f1c0 0320 	rsb	r3, r0, #32
 800fe1a:	fa02 f303 	lsl.w	r3, r2, r3
 800fe1e:	430b      	orrs	r3, r1
 800fe20:	40c2      	lsrs	r2, r0
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	9201      	str	r2, [sp, #4]
 800fe26:	9b01      	ldr	r3, [sp, #4]
 800fe28:	61bb      	str	r3, [r7, #24]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	bf14      	ite	ne
 800fe2e:	2102      	movne	r1, #2
 800fe30:	2101      	moveq	r1, #1
 800fe32:	6139      	str	r1, [r7, #16]
 800fe34:	b1c4      	cbz	r4, 800fe68 <__d2b+0x88>
 800fe36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fe3a:	4404      	add	r4, r0
 800fe3c:	6034      	str	r4, [r6, #0]
 800fe3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fe42:	6028      	str	r0, [r5, #0]
 800fe44:	4638      	mov	r0, r7
 800fe46:	b003      	add	sp, #12
 800fe48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fe4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe50:	e7d5      	b.n	800fdfe <__d2b+0x1e>
 800fe52:	6179      	str	r1, [r7, #20]
 800fe54:	e7e7      	b.n	800fe26 <__d2b+0x46>
 800fe56:	a801      	add	r0, sp, #4
 800fe58:	f7ff fd63 	bl	800f922 <__lo0bits>
 800fe5c:	9b01      	ldr	r3, [sp, #4]
 800fe5e:	617b      	str	r3, [r7, #20]
 800fe60:	2101      	movs	r1, #1
 800fe62:	6139      	str	r1, [r7, #16]
 800fe64:	3020      	adds	r0, #32
 800fe66:	e7e5      	b.n	800fe34 <__d2b+0x54>
 800fe68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fe6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fe70:	6030      	str	r0, [r6, #0]
 800fe72:	6918      	ldr	r0, [r3, #16]
 800fe74:	f7ff fd36 	bl	800f8e4 <__hi0bits>
 800fe78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fe7c:	e7e1      	b.n	800fe42 <__d2b+0x62>

0800fe7e <__ratio>:
 800fe7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe82:	4688      	mov	r8, r1
 800fe84:	4669      	mov	r1, sp
 800fe86:	4681      	mov	r9, r0
 800fe88:	f7ff ff5c 	bl	800fd44 <__b2d>
 800fe8c:	a901      	add	r1, sp, #4
 800fe8e:	4640      	mov	r0, r8
 800fe90:	ec57 6b10 	vmov	r6, r7, d0
 800fe94:	f7ff ff56 	bl	800fd44 <__b2d>
 800fe98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fe9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fea0:	eba3 0c02 	sub.w	ip, r3, r2
 800fea4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fea8:	1a9b      	subs	r3, r3, r2
 800feaa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800feae:	ec5b ab10 	vmov	sl, fp, d0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	bfce      	itee	gt
 800feb6:	463a      	movgt	r2, r7
 800feb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800febc:	465a      	movle	r2, fp
 800febe:	4659      	mov	r1, fp
 800fec0:	463d      	mov	r5, r7
 800fec2:	bfd4      	ite	le
 800fec4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fec8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fecc:	4630      	mov	r0, r6
 800fece:	ee10 2a10 	vmov	r2, s0
 800fed2:	460b      	mov	r3, r1
 800fed4:	4629      	mov	r1, r5
 800fed6:	f7f0 fcb9 	bl	800084c <__aeabi_ddiv>
 800feda:	ec41 0b10 	vmov	d0, r0, r1
 800fede:	b003      	add	sp, #12
 800fee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fee4 <__copybits>:
 800fee4:	3901      	subs	r1, #1
 800fee6:	b510      	push	{r4, lr}
 800fee8:	1149      	asrs	r1, r1, #5
 800feea:	6914      	ldr	r4, [r2, #16]
 800feec:	3101      	adds	r1, #1
 800feee:	f102 0314 	add.w	r3, r2, #20
 800fef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fefa:	42a3      	cmp	r3, r4
 800fefc:	4602      	mov	r2, r0
 800fefe:	d303      	bcc.n	800ff08 <__copybits+0x24>
 800ff00:	2300      	movs	r3, #0
 800ff02:	428a      	cmp	r2, r1
 800ff04:	d305      	bcc.n	800ff12 <__copybits+0x2e>
 800ff06:	bd10      	pop	{r4, pc}
 800ff08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff0c:	f840 2b04 	str.w	r2, [r0], #4
 800ff10:	e7f3      	b.n	800fefa <__copybits+0x16>
 800ff12:	f842 3b04 	str.w	r3, [r2], #4
 800ff16:	e7f4      	b.n	800ff02 <__copybits+0x1e>

0800ff18 <__any_on>:
 800ff18:	f100 0214 	add.w	r2, r0, #20
 800ff1c:	6900      	ldr	r0, [r0, #16]
 800ff1e:	114b      	asrs	r3, r1, #5
 800ff20:	4298      	cmp	r0, r3
 800ff22:	b510      	push	{r4, lr}
 800ff24:	db11      	blt.n	800ff4a <__any_on+0x32>
 800ff26:	dd0a      	ble.n	800ff3e <__any_on+0x26>
 800ff28:	f011 011f 	ands.w	r1, r1, #31
 800ff2c:	d007      	beq.n	800ff3e <__any_on+0x26>
 800ff2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ff32:	fa24 f001 	lsr.w	r0, r4, r1
 800ff36:	fa00 f101 	lsl.w	r1, r0, r1
 800ff3a:	428c      	cmp	r4, r1
 800ff3c:	d10b      	bne.n	800ff56 <__any_on+0x3e>
 800ff3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d803      	bhi.n	800ff4e <__any_on+0x36>
 800ff46:	2000      	movs	r0, #0
 800ff48:	bd10      	pop	{r4, pc}
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	e7f7      	b.n	800ff3e <__any_on+0x26>
 800ff4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff52:	2900      	cmp	r1, #0
 800ff54:	d0f5      	beq.n	800ff42 <__any_on+0x2a>
 800ff56:	2001      	movs	r0, #1
 800ff58:	e7f6      	b.n	800ff48 <__any_on+0x30>

0800ff5a <_calloc_r>:
 800ff5a:	b538      	push	{r3, r4, r5, lr}
 800ff5c:	fb02 f401 	mul.w	r4, r2, r1
 800ff60:	4621      	mov	r1, r4
 800ff62:	f000 f857 	bl	8010014 <_malloc_r>
 800ff66:	4605      	mov	r5, r0
 800ff68:	b118      	cbz	r0, 800ff72 <_calloc_r+0x18>
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	2100      	movs	r1, #0
 800ff6e:	f7fc fa26 	bl	800c3be <memset>
 800ff72:	4628      	mov	r0, r5
 800ff74:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ff78 <_free_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	2900      	cmp	r1, #0
 800ff7e:	d045      	beq.n	801000c <_free_r+0x94>
 800ff80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff84:	1f0c      	subs	r4, r1, #4
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	bfb8      	it	lt
 800ff8a:	18e4      	addlt	r4, r4, r3
 800ff8c:	f000 fc0f 	bl	80107ae <__malloc_lock>
 800ff90:	4a1f      	ldr	r2, [pc, #124]	; (8010010 <_free_r+0x98>)
 800ff92:	6813      	ldr	r3, [r2, #0]
 800ff94:	4610      	mov	r0, r2
 800ff96:	b933      	cbnz	r3, 800ffa6 <_free_r+0x2e>
 800ff98:	6063      	str	r3, [r4, #4]
 800ff9a:	6014      	str	r4, [r2, #0]
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffa2:	f000 bc05 	b.w	80107b0 <__malloc_unlock>
 800ffa6:	42a3      	cmp	r3, r4
 800ffa8:	d90c      	bls.n	800ffc4 <_free_r+0x4c>
 800ffaa:	6821      	ldr	r1, [r4, #0]
 800ffac:	1862      	adds	r2, r4, r1
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	bf04      	itt	eq
 800ffb2:	681a      	ldreq	r2, [r3, #0]
 800ffb4:	685b      	ldreq	r3, [r3, #4]
 800ffb6:	6063      	str	r3, [r4, #4]
 800ffb8:	bf04      	itt	eq
 800ffba:	1852      	addeq	r2, r2, r1
 800ffbc:	6022      	streq	r2, [r4, #0]
 800ffbe:	6004      	str	r4, [r0, #0]
 800ffc0:	e7ec      	b.n	800ff9c <_free_r+0x24>
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	685a      	ldr	r2, [r3, #4]
 800ffc6:	b10a      	cbz	r2, 800ffcc <_free_r+0x54>
 800ffc8:	42a2      	cmp	r2, r4
 800ffca:	d9fa      	bls.n	800ffc2 <_free_r+0x4a>
 800ffcc:	6819      	ldr	r1, [r3, #0]
 800ffce:	1858      	adds	r0, r3, r1
 800ffd0:	42a0      	cmp	r0, r4
 800ffd2:	d10b      	bne.n	800ffec <_free_r+0x74>
 800ffd4:	6820      	ldr	r0, [r4, #0]
 800ffd6:	4401      	add	r1, r0
 800ffd8:	1858      	adds	r0, r3, r1
 800ffda:	4282      	cmp	r2, r0
 800ffdc:	6019      	str	r1, [r3, #0]
 800ffde:	d1dd      	bne.n	800ff9c <_free_r+0x24>
 800ffe0:	6810      	ldr	r0, [r2, #0]
 800ffe2:	6852      	ldr	r2, [r2, #4]
 800ffe4:	605a      	str	r2, [r3, #4]
 800ffe6:	4401      	add	r1, r0
 800ffe8:	6019      	str	r1, [r3, #0]
 800ffea:	e7d7      	b.n	800ff9c <_free_r+0x24>
 800ffec:	d902      	bls.n	800fff4 <_free_r+0x7c>
 800ffee:	230c      	movs	r3, #12
 800fff0:	602b      	str	r3, [r5, #0]
 800fff2:	e7d3      	b.n	800ff9c <_free_r+0x24>
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	1821      	adds	r1, r4, r0
 800fff8:	428a      	cmp	r2, r1
 800fffa:	bf04      	itt	eq
 800fffc:	6811      	ldreq	r1, [r2, #0]
 800fffe:	6852      	ldreq	r2, [r2, #4]
 8010000:	6062      	str	r2, [r4, #4]
 8010002:	bf04      	itt	eq
 8010004:	1809      	addeq	r1, r1, r0
 8010006:	6021      	streq	r1, [r4, #0]
 8010008:	605c      	str	r4, [r3, #4]
 801000a:	e7c7      	b.n	800ff9c <_free_r+0x24>
 801000c:	bd38      	pop	{r3, r4, r5, pc}
 801000e:	bf00      	nop
 8010010:	20015f48 	.word	0x20015f48

08010014 <_malloc_r>:
 8010014:	b570      	push	{r4, r5, r6, lr}
 8010016:	1ccd      	adds	r5, r1, #3
 8010018:	f025 0503 	bic.w	r5, r5, #3
 801001c:	3508      	adds	r5, #8
 801001e:	2d0c      	cmp	r5, #12
 8010020:	bf38      	it	cc
 8010022:	250c      	movcc	r5, #12
 8010024:	2d00      	cmp	r5, #0
 8010026:	4606      	mov	r6, r0
 8010028:	db01      	blt.n	801002e <_malloc_r+0x1a>
 801002a:	42a9      	cmp	r1, r5
 801002c:	d903      	bls.n	8010036 <_malloc_r+0x22>
 801002e:	230c      	movs	r3, #12
 8010030:	6033      	str	r3, [r6, #0]
 8010032:	2000      	movs	r0, #0
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	f000 fbba 	bl	80107ae <__malloc_lock>
 801003a:	4a21      	ldr	r2, [pc, #132]	; (80100c0 <_malloc_r+0xac>)
 801003c:	6814      	ldr	r4, [r2, #0]
 801003e:	4621      	mov	r1, r4
 8010040:	b991      	cbnz	r1, 8010068 <_malloc_r+0x54>
 8010042:	4c20      	ldr	r4, [pc, #128]	; (80100c4 <_malloc_r+0xb0>)
 8010044:	6823      	ldr	r3, [r4, #0]
 8010046:	b91b      	cbnz	r3, 8010050 <_malloc_r+0x3c>
 8010048:	4630      	mov	r0, r6
 801004a:	f000 facf 	bl	80105ec <_sbrk_r>
 801004e:	6020      	str	r0, [r4, #0]
 8010050:	4629      	mov	r1, r5
 8010052:	4630      	mov	r0, r6
 8010054:	f000 faca 	bl	80105ec <_sbrk_r>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	d124      	bne.n	80100a6 <_malloc_r+0x92>
 801005c:	230c      	movs	r3, #12
 801005e:	6033      	str	r3, [r6, #0]
 8010060:	4630      	mov	r0, r6
 8010062:	f000 fba5 	bl	80107b0 <__malloc_unlock>
 8010066:	e7e4      	b.n	8010032 <_malloc_r+0x1e>
 8010068:	680b      	ldr	r3, [r1, #0]
 801006a:	1b5b      	subs	r3, r3, r5
 801006c:	d418      	bmi.n	80100a0 <_malloc_r+0x8c>
 801006e:	2b0b      	cmp	r3, #11
 8010070:	d90f      	bls.n	8010092 <_malloc_r+0x7e>
 8010072:	600b      	str	r3, [r1, #0]
 8010074:	50cd      	str	r5, [r1, r3]
 8010076:	18cc      	adds	r4, r1, r3
 8010078:	4630      	mov	r0, r6
 801007a:	f000 fb99 	bl	80107b0 <__malloc_unlock>
 801007e:	f104 000b 	add.w	r0, r4, #11
 8010082:	1d23      	adds	r3, r4, #4
 8010084:	f020 0007 	bic.w	r0, r0, #7
 8010088:	1ac3      	subs	r3, r0, r3
 801008a:	d0d3      	beq.n	8010034 <_malloc_r+0x20>
 801008c:	425a      	negs	r2, r3
 801008e:	50e2      	str	r2, [r4, r3]
 8010090:	e7d0      	b.n	8010034 <_malloc_r+0x20>
 8010092:	428c      	cmp	r4, r1
 8010094:	684b      	ldr	r3, [r1, #4]
 8010096:	bf16      	itet	ne
 8010098:	6063      	strne	r3, [r4, #4]
 801009a:	6013      	streq	r3, [r2, #0]
 801009c:	460c      	movne	r4, r1
 801009e:	e7eb      	b.n	8010078 <_malloc_r+0x64>
 80100a0:	460c      	mov	r4, r1
 80100a2:	6849      	ldr	r1, [r1, #4]
 80100a4:	e7cc      	b.n	8010040 <_malloc_r+0x2c>
 80100a6:	1cc4      	adds	r4, r0, #3
 80100a8:	f024 0403 	bic.w	r4, r4, #3
 80100ac:	42a0      	cmp	r0, r4
 80100ae:	d005      	beq.n	80100bc <_malloc_r+0xa8>
 80100b0:	1a21      	subs	r1, r4, r0
 80100b2:	4630      	mov	r0, r6
 80100b4:	f000 fa9a 	bl	80105ec <_sbrk_r>
 80100b8:	3001      	adds	r0, #1
 80100ba:	d0cf      	beq.n	801005c <_malloc_r+0x48>
 80100bc:	6025      	str	r5, [r4, #0]
 80100be:	e7db      	b.n	8010078 <_malloc_r+0x64>
 80100c0:	20015f48 	.word	0x20015f48
 80100c4:	20015f4c 	.word	0x20015f4c

080100c8 <__ssputs_r>:
 80100c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100cc:	688e      	ldr	r6, [r1, #8]
 80100ce:	429e      	cmp	r6, r3
 80100d0:	4682      	mov	sl, r0
 80100d2:	460c      	mov	r4, r1
 80100d4:	4690      	mov	r8, r2
 80100d6:	4699      	mov	r9, r3
 80100d8:	d837      	bhi.n	801014a <__ssputs_r+0x82>
 80100da:	898a      	ldrh	r2, [r1, #12]
 80100dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100e0:	d031      	beq.n	8010146 <__ssputs_r+0x7e>
 80100e2:	6825      	ldr	r5, [r4, #0]
 80100e4:	6909      	ldr	r1, [r1, #16]
 80100e6:	1a6f      	subs	r7, r5, r1
 80100e8:	6965      	ldr	r5, [r4, #20]
 80100ea:	2302      	movs	r3, #2
 80100ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80100f4:	f109 0301 	add.w	r3, r9, #1
 80100f8:	443b      	add	r3, r7
 80100fa:	429d      	cmp	r5, r3
 80100fc:	bf38      	it	cc
 80100fe:	461d      	movcc	r5, r3
 8010100:	0553      	lsls	r3, r2, #21
 8010102:	d530      	bpl.n	8010166 <__ssputs_r+0x9e>
 8010104:	4629      	mov	r1, r5
 8010106:	f7ff ff85 	bl	8010014 <_malloc_r>
 801010a:	4606      	mov	r6, r0
 801010c:	b950      	cbnz	r0, 8010124 <__ssputs_r+0x5c>
 801010e:	230c      	movs	r3, #12
 8010110:	f8ca 3000 	str.w	r3, [sl]
 8010114:	89a3      	ldrh	r3, [r4, #12]
 8010116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801011a:	81a3      	strh	r3, [r4, #12]
 801011c:	f04f 30ff 	mov.w	r0, #4294967295
 8010120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010124:	463a      	mov	r2, r7
 8010126:	6921      	ldr	r1, [r4, #16]
 8010128:	f7fc f93e 	bl	800c3a8 <memcpy>
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010136:	81a3      	strh	r3, [r4, #12]
 8010138:	6126      	str	r6, [r4, #16]
 801013a:	6165      	str	r5, [r4, #20]
 801013c:	443e      	add	r6, r7
 801013e:	1bed      	subs	r5, r5, r7
 8010140:	6026      	str	r6, [r4, #0]
 8010142:	60a5      	str	r5, [r4, #8]
 8010144:	464e      	mov	r6, r9
 8010146:	454e      	cmp	r6, r9
 8010148:	d900      	bls.n	801014c <__ssputs_r+0x84>
 801014a:	464e      	mov	r6, r9
 801014c:	4632      	mov	r2, r6
 801014e:	4641      	mov	r1, r8
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	f000 fb13 	bl	801077c <memmove>
 8010156:	68a3      	ldr	r3, [r4, #8]
 8010158:	1b9b      	subs	r3, r3, r6
 801015a:	60a3      	str	r3, [r4, #8]
 801015c:	6823      	ldr	r3, [r4, #0]
 801015e:	441e      	add	r6, r3
 8010160:	6026      	str	r6, [r4, #0]
 8010162:	2000      	movs	r0, #0
 8010164:	e7dc      	b.n	8010120 <__ssputs_r+0x58>
 8010166:	462a      	mov	r2, r5
 8010168:	f000 fb23 	bl	80107b2 <_realloc_r>
 801016c:	4606      	mov	r6, r0
 801016e:	2800      	cmp	r0, #0
 8010170:	d1e2      	bne.n	8010138 <__ssputs_r+0x70>
 8010172:	6921      	ldr	r1, [r4, #16]
 8010174:	4650      	mov	r0, sl
 8010176:	f7ff feff 	bl	800ff78 <_free_r>
 801017a:	e7c8      	b.n	801010e <__ssputs_r+0x46>

0801017c <_svfiprintf_r>:
 801017c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010180:	461d      	mov	r5, r3
 8010182:	898b      	ldrh	r3, [r1, #12]
 8010184:	061f      	lsls	r7, r3, #24
 8010186:	b09d      	sub	sp, #116	; 0x74
 8010188:	4680      	mov	r8, r0
 801018a:	460c      	mov	r4, r1
 801018c:	4616      	mov	r6, r2
 801018e:	d50f      	bpl.n	80101b0 <_svfiprintf_r+0x34>
 8010190:	690b      	ldr	r3, [r1, #16]
 8010192:	b96b      	cbnz	r3, 80101b0 <_svfiprintf_r+0x34>
 8010194:	2140      	movs	r1, #64	; 0x40
 8010196:	f7ff ff3d 	bl	8010014 <_malloc_r>
 801019a:	6020      	str	r0, [r4, #0]
 801019c:	6120      	str	r0, [r4, #16]
 801019e:	b928      	cbnz	r0, 80101ac <_svfiprintf_r+0x30>
 80101a0:	230c      	movs	r3, #12
 80101a2:	f8c8 3000 	str.w	r3, [r8]
 80101a6:	f04f 30ff 	mov.w	r0, #4294967295
 80101aa:	e0c8      	b.n	801033e <_svfiprintf_r+0x1c2>
 80101ac:	2340      	movs	r3, #64	; 0x40
 80101ae:	6163      	str	r3, [r4, #20]
 80101b0:	2300      	movs	r3, #0
 80101b2:	9309      	str	r3, [sp, #36]	; 0x24
 80101b4:	2320      	movs	r3, #32
 80101b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101ba:	2330      	movs	r3, #48	; 0x30
 80101bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101c0:	9503      	str	r5, [sp, #12]
 80101c2:	f04f 0b01 	mov.w	fp, #1
 80101c6:	4637      	mov	r7, r6
 80101c8:	463d      	mov	r5, r7
 80101ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80101ce:	b10b      	cbz	r3, 80101d4 <_svfiprintf_r+0x58>
 80101d0:	2b25      	cmp	r3, #37	; 0x25
 80101d2:	d13e      	bne.n	8010252 <_svfiprintf_r+0xd6>
 80101d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80101d8:	d00b      	beq.n	80101f2 <_svfiprintf_r+0x76>
 80101da:	4653      	mov	r3, sl
 80101dc:	4632      	mov	r2, r6
 80101de:	4621      	mov	r1, r4
 80101e0:	4640      	mov	r0, r8
 80101e2:	f7ff ff71 	bl	80100c8 <__ssputs_r>
 80101e6:	3001      	adds	r0, #1
 80101e8:	f000 80a4 	beq.w	8010334 <_svfiprintf_r+0x1b8>
 80101ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ee:	4453      	add	r3, sl
 80101f0:	9309      	str	r3, [sp, #36]	; 0x24
 80101f2:	783b      	ldrb	r3, [r7, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	f000 809d 	beq.w	8010334 <_svfiprintf_r+0x1b8>
 80101fa:	2300      	movs	r3, #0
 80101fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	9307      	str	r3, [sp, #28]
 8010208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801020c:	931a      	str	r3, [sp, #104]	; 0x68
 801020e:	462f      	mov	r7, r5
 8010210:	2205      	movs	r2, #5
 8010212:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010216:	4850      	ldr	r0, [pc, #320]	; (8010358 <_svfiprintf_r+0x1dc>)
 8010218:	f7ef ffe2 	bl	80001e0 <memchr>
 801021c:	9b04      	ldr	r3, [sp, #16]
 801021e:	b9d0      	cbnz	r0, 8010256 <_svfiprintf_r+0xda>
 8010220:	06d9      	lsls	r1, r3, #27
 8010222:	bf44      	itt	mi
 8010224:	2220      	movmi	r2, #32
 8010226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801022a:	071a      	lsls	r2, r3, #28
 801022c:	bf44      	itt	mi
 801022e:	222b      	movmi	r2, #43	; 0x2b
 8010230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010234:	782a      	ldrb	r2, [r5, #0]
 8010236:	2a2a      	cmp	r2, #42	; 0x2a
 8010238:	d015      	beq.n	8010266 <_svfiprintf_r+0xea>
 801023a:	9a07      	ldr	r2, [sp, #28]
 801023c:	462f      	mov	r7, r5
 801023e:	2000      	movs	r0, #0
 8010240:	250a      	movs	r5, #10
 8010242:	4639      	mov	r1, r7
 8010244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010248:	3b30      	subs	r3, #48	; 0x30
 801024a:	2b09      	cmp	r3, #9
 801024c:	d94d      	bls.n	80102ea <_svfiprintf_r+0x16e>
 801024e:	b1b8      	cbz	r0, 8010280 <_svfiprintf_r+0x104>
 8010250:	e00f      	b.n	8010272 <_svfiprintf_r+0xf6>
 8010252:	462f      	mov	r7, r5
 8010254:	e7b8      	b.n	80101c8 <_svfiprintf_r+0x4c>
 8010256:	4a40      	ldr	r2, [pc, #256]	; (8010358 <_svfiprintf_r+0x1dc>)
 8010258:	1a80      	subs	r0, r0, r2
 801025a:	fa0b f000 	lsl.w	r0, fp, r0
 801025e:	4318      	orrs	r0, r3
 8010260:	9004      	str	r0, [sp, #16]
 8010262:	463d      	mov	r5, r7
 8010264:	e7d3      	b.n	801020e <_svfiprintf_r+0x92>
 8010266:	9a03      	ldr	r2, [sp, #12]
 8010268:	1d11      	adds	r1, r2, #4
 801026a:	6812      	ldr	r2, [r2, #0]
 801026c:	9103      	str	r1, [sp, #12]
 801026e:	2a00      	cmp	r2, #0
 8010270:	db01      	blt.n	8010276 <_svfiprintf_r+0xfa>
 8010272:	9207      	str	r2, [sp, #28]
 8010274:	e004      	b.n	8010280 <_svfiprintf_r+0x104>
 8010276:	4252      	negs	r2, r2
 8010278:	f043 0302 	orr.w	r3, r3, #2
 801027c:	9207      	str	r2, [sp, #28]
 801027e:	9304      	str	r3, [sp, #16]
 8010280:	783b      	ldrb	r3, [r7, #0]
 8010282:	2b2e      	cmp	r3, #46	; 0x2e
 8010284:	d10c      	bne.n	80102a0 <_svfiprintf_r+0x124>
 8010286:	787b      	ldrb	r3, [r7, #1]
 8010288:	2b2a      	cmp	r3, #42	; 0x2a
 801028a:	d133      	bne.n	80102f4 <_svfiprintf_r+0x178>
 801028c:	9b03      	ldr	r3, [sp, #12]
 801028e:	1d1a      	adds	r2, r3, #4
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	9203      	str	r2, [sp, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	bfb8      	it	lt
 8010298:	f04f 33ff 	movlt.w	r3, #4294967295
 801029c:	3702      	adds	r7, #2
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	4d2e      	ldr	r5, [pc, #184]	; (801035c <_svfiprintf_r+0x1e0>)
 80102a2:	7839      	ldrb	r1, [r7, #0]
 80102a4:	2203      	movs	r2, #3
 80102a6:	4628      	mov	r0, r5
 80102a8:	f7ef ff9a 	bl	80001e0 <memchr>
 80102ac:	b138      	cbz	r0, 80102be <_svfiprintf_r+0x142>
 80102ae:	2340      	movs	r3, #64	; 0x40
 80102b0:	1b40      	subs	r0, r0, r5
 80102b2:	fa03 f000 	lsl.w	r0, r3, r0
 80102b6:	9b04      	ldr	r3, [sp, #16]
 80102b8:	4303      	orrs	r3, r0
 80102ba:	3701      	adds	r7, #1
 80102bc:	9304      	str	r3, [sp, #16]
 80102be:	7839      	ldrb	r1, [r7, #0]
 80102c0:	4827      	ldr	r0, [pc, #156]	; (8010360 <_svfiprintf_r+0x1e4>)
 80102c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102c6:	2206      	movs	r2, #6
 80102c8:	1c7e      	adds	r6, r7, #1
 80102ca:	f7ef ff89 	bl	80001e0 <memchr>
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d038      	beq.n	8010344 <_svfiprintf_r+0x1c8>
 80102d2:	4b24      	ldr	r3, [pc, #144]	; (8010364 <_svfiprintf_r+0x1e8>)
 80102d4:	bb13      	cbnz	r3, 801031c <_svfiprintf_r+0x1a0>
 80102d6:	9b03      	ldr	r3, [sp, #12]
 80102d8:	3307      	adds	r3, #7
 80102da:	f023 0307 	bic.w	r3, r3, #7
 80102de:	3308      	adds	r3, #8
 80102e0:	9303      	str	r3, [sp, #12]
 80102e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102e4:	444b      	add	r3, r9
 80102e6:	9309      	str	r3, [sp, #36]	; 0x24
 80102e8:	e76d      	b.n	80101c6 <_svfiprintf_r+0x4a>
 80102ea:	fb05 3202 	mla	r2, r5, r2, r3
 80102ee:	2001      	movs	r0, #1
 80102f0:	460f      	mov	r7, r1
 80102f2:	e7a6      	b.n	8010242 <_svfiprintf_r+0xc6>
 80102f4:	2300      	movs	r3, #0
 80102f6:	3701      	adds	r7, #1
 80102f8:	9305      	str	r3, [sp, #20]
 80102fa:	4619      	mov	r1, r3
 80102fc:	250a      	movs	r5, #10
 80102fe:	4638      	mov	r0, r7
 8010300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010304:	3a30      	subs	r2, #48	; 0x30
 8010306:	2a09      	cmp	r2, #9
 8010308:	d903      	bls.n	8010312 <_svfiprintf_r+0x196>
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0c8      	beq.n	80102a0 <_svfiprintf_r+0x124>
 801030e:	9105      	str	r1, [sp, #20]
 8010310:	e7c6      	b.n	80102a0 <_svfiprintf_r+0x124>
 8010312:	fb05 2101 	mla	r1, r5, r1, r2
 8010316:	2301      	movs	r3, #1
 8010318:	4607      	mov	r7, r0
 801031a:	e7f0      	b.n	80102fe <_svfiprintf_r+0x182>
 801031c:	ab03      	add	r3, sp, #12
 801031e:	9300      	str	r3, [sp, #0]
 8010320:	4622      	mov	r2, r4
 8010322:	4b11      	ldr	r3, [pc, #68]	; (8010368 <_svfiprintf_r+0x1ec>)
 8010324:	a904      	add	r1, sp, #16
 8010326:	4640      	mov	r0, r8
 8010328:	f7fc f8e6 	bl	800c4f8 <_printf_float>
 801032c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010330:	4681      	mov	r9, r0
 8010332:	d1d6      	bne.n	80102e2 <_svfiprintf_r+0x166>
 8010334:	89a3      	ldrh	r3, [r4, #12]
 8010336:	065b      	lsls	r3, r3, #25
 8010338:	f53f af35 	bmi.w	80101a6 <_svfiprintf_r+0x2a>
 801033c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801033e:	b01d      	add	sp, #116	; 0x74
 8010340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010344:	ab03      	add	r3, sp, #12
 8010346:	9300      	str	r3, [sp, #0]
 8010348:	4622      	mov	r2, r4
 801034a:	4b07      	ldr	r3, [pc, #28]	; (8010368 <_svfiprintf_r+0x1ec>)
 801034c:	a904      	add	r1, sp, #16
 801034e:	4640      	mov	r0, r8
 8010350:	f7fc fb88 	bl	800ca64 <_printf_i>
 8010354:	e7ea      	b.n	801032c <_svfiprintf_r+0x1b0>
 8010356:	bf00      	nop
 8010358:	08010cec 	.word	0x08010cec
 801035c:	08010cf2 	.word	0x08010cf2
 8010360:	08010cf6 	.word	0x08010cf6
 8010364:	0800c4f9 	.word	0x0800c4f9
 8010368:	080100c9 	.word	0x080100c9

0801036c <__sfputc_r>:
 801036c:	6893      	ldr	r3, [r2, #8]
 801036e:	3b01      	subs	r3, #1
 8010370:	2b00      	cmp	r3, #0
 8010372:	b410      	push	{r4}
 8010374:	6093      	str	r3, [r2, #8]
 8010376:	da08      	bge.n	801038a <__sfputc_r+0x1e>
 8010378:	6994      	ldr	r4, [r2, #24]
 801037a:	42a3      	cmp	r3, r4
 801037c:	db01      	blt.n	8010382 <__sfputc_r+0x16>
 801037e:	290a      	cmp	r1, #10
 8010380:	d103      	bne.n	801038a <__sfputc_r+0x1e>
 8010382:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010386:	f7fd bdb1 	b.w	800deec <__swbuf_r>
 801038a:	6813      	ldr	r3, [r2, #0]
 801038c:	1c58      	adds	r0, r3, #1
 801038e:	6010      	str	r0, [r2, #0]
 8010390:	7019      	strb	r1, [r3, #0]
 8010392:	4608      	mov	r0, r1
 8010394:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010398:	4770      	bx	lr

0801039a <__sfputs_r>:
 801039a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801039c:	4606      	mov	r6, r0
 801039e:	460f      	mov	r7, r1
 80103a0:	4614      	mov	r4, r2
 80103a2:	18d5      	adds	r5, r2, r3
 80103a4:	42ac      	cmp	r4, r5
 80103a6:	d101      	bne.n	80103ac <__sfputs_r+0x12>
 80103a8:	2000      	movs	r0, #0
 80103aa:	e007      	b.n	80103bc <__sfputs_r+0x22>
 80103ac:	463a      	mov	r2, r7
 80103ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103b2:	4630      	mov	r0, r6
 80103b4:	f7ff ffda 	bl	801036c <__sfputc_r>
 80103b8:	1c43      	adds	r3, r0, #1
 80103ba:	d1f3      	bne.n	80103a4 <__sfputs_r+0xa>
 80103bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103c0 <_vfiprintf_r>:
 80103c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c4:	460c      	mov	r4, r1
 80103c6:	b09d      	sub	sp, #116	; 0x74
 80103c8:	4617      	mov	r7, r2
 80103ca:	461d      	mov	r5, r3
 80103cc:	4606      	mov	r6, r0
 80103ce:	b118      	cbz	r0, 80103d8 <_vfiprintf_r+0x18>
 80103d0:	6983      	ldr	r3, [r0, #24]
 80103d2:	b90b      	cbnz	r3, 80103d8 <_vfiprintf_r+0x18>
 80103d4:	f7fe fd80 	bl	800eed8 <__sinit>
 80103d8:	4b7c      	ldr	r3, [pc, #496]	; (80105cc <_vfiprintf_r+0x20c>)
 80103da:	429c      	cmp	r4, r3
 80103dc:	d158      	bne.n	8010490 <_vfiprintf_r+0xd0>
 80103de:	6874      	ldr	r4, [r6, #4]
 80103e0:	89a3      	ldrh	r3, [r4, #12]
 80103e2:	0718      	lsls	r0, r3, #28
 80103e4:	d55e      	bpl.n	80104a4 <_vfiprintf_r+0xe4>
 80103e6:	6923      	ldr	r3, [r4, #16]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d05b      	beq.n	80104a4 <_vfiprintf_r+0xe4>
 80103ec:	2300      	movs	r3, #0
 80103ee:	9309      	str	r3, [sp, #36]	; 0x24
 80103f0:	2320      	movs	r3, #32
 80103f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103f6:	2330      	movs	r3, #48	; 0x30
 80103f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103fc:	9503      	str	r5, [sp, #12]
 80103fe:	f04f 0b01 	mov.w	fp, #1
 8010402:	46b8      	mov	r8, r7
 8010404:	4645      	mov	r5, r8
 8010406:	f815 3b01 	ldrb.w	r3, [r5], #1
 801040a:	b10b      	cbz	r3, 8010410 <_vfiprintf_r+0x50>
 801040c:	2b25      	cmp	r3, #37	; 0x25
 801040e:	d154      	bne.n	80104ba <_vfiprintf_r+0xfa>
 8010410:	ebb8 0a07 	subs.w	sl, r8, r7
 8010414:	d00b      	beq.n	801042e <_vfiprintf_r+0x6e>
 8010416:	4653      	mov	r3, sl
 8010418:	463a      	mov	r2, r7
 801041a:	4621      	mov	r1, r4
 801041c:	4630      	mov	r0, r6
 801041e:	f7ff ffbc 	bl	801039a <__sfputs_r>
 8010422:	3001      	adds	r0, #1
 8010424:	f000 80c2 	beq.w	80105ac <_vfiprintf_r+0x1ec>
 8010428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801042a:	4453      	add	r3, sl
 801042c:	9309      	str	r3, [sp, #36]	; 0x24
 801042e:	f898 3000 	ldrb.w	r3, [r8]
 8010432:	2b00      	cmp	r3, #0
 8010434:	f000 80ba 	beq.w	80105ac <_vfiprintf_r+0x1ec>
 8010438:	2300      	movs	r3, #0
 801043a:	f04f 32ff 	mov.w	r2, #4294967295
 801043e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010442:	9304      	str	r3, [sp, #16]
 8010444:	9307      	str	r3, [sp, #28]
 8010446:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801044a:	931a      	str	r3, [sp, #104]	; 0x68
 801044c:	46a8      	mov	r8, r5
 801044e:	2205      	movs	r2, #5
 8010450:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010454:	485e      	ldr	r0, [pc, #376]	; (80105d0 <_vfiprintf_r+0x210>)
 8010456:	f7ef fec3 	bl	80001e0 <memchr>
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	bb78      	cbnz	r0, 80104be <_vfiprintf_r+0xfe>
 801045e:	06d9      	lsls	r1, r3, #27
 8010460:	bf44      	itt	mi
 8010462:	2220      	movmi	r2, #32
 8010464:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010468:	071a      	lsls	r2, r3, #28
 801046a:	bf44      	itt	mi
 801046c:	222b      	movmi	r2, #43	; 0x2b
 801046e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010472:	782a      	ldrb	r2, [r5, #0]
 8010474:	2a2a      	cmp	r2, #42	; 0x2a
 8010476:	d02a      	beq.n	80104ce <_vfiprintf_r+0x10e>
 8010478:	9a07      	ldr	r2, [sp, #28]
 801047a:	46a8      	mov	r8, r5
 801047c:	2000      	movs	r0, #0
 801047e:	250a      	movs	r5, #10
 8010480:	4641      	mov	r1, r8
 8010482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010486:	3b30      	subs	r3, #48	; 0x30
 8010488:	2b09      	cmp	r3, #9
 801048a:	d969      	bls.n	8010560 <_vfiprintf_r+0x1a0>
 801048c:	b360      	cbz	r0, 80104e8 <_vfiprintf_r+0x128>
 801048e:	e024      	b.n	80104da <_vfiprintf_r+0x11a>
 8010490:	4b50      	ldr	r3, [pc, #320]	; (80105d4 <_vfiprintf_r+0x214>)
 8010492:	429c      	cmp	r4, r3
 8010494:	d101      	bne.n	801049a <_vfiprintf_r+0xda>
 8010496:	68b4      	ldr	r4, [r6, #8]
 8010498:	e7a2      	b.n	80103e0 <_vfiprintf_r+0x20>
 801049a:	4b4f      	ldr	r3, [pc, #316]	; (80105d8 <_vfiprintf_r+0x218>)
 801049c:	429c      	cmp	r4, r3
 801049e:	bf08      	it	eq
 80104a0:	68f4      	ldreq	r4, [r6, #12]
 80104a2:	e79d      	b.n	80103e0 <_vfiprintf_r+0x20>
 80104a4:	4621      	mov	r1, r4
 80104a6:	4630      	mov	r0, r6
 80104a8:	f7fd fd72 	bl	800df90 <__swsetup_r>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d09d      	beq.n	80103ec <_vfiprintf_r+0x2c>
 80104b0:	f04f 30ff 	mov.w	r0, #4294967295
 80104b4:	b01d      	add	sp, #116	; 0x74
 80104b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ba:	46a8      	mov	r8, r5
 80104bc:	e7a2      	b.n	8010404 <_vfiprintf_r+0x44>
 80104be:	4a44      	ldr	r2, [pc, #272]	; (80105d0 <_vfiprintf_r+0x210>)
 80104c0:	1a80      	subs	r0, r0, r2
 80104c2:	fa0b f000 	lsl.w	r0, fp, r0
 80104c6:	4318      	orrs	r0, r3
 80104c8:	9004      	str	r0, [sp, #16]
 80104ca:	4645      	mov	r5, r8
 80104cc:	e7be      	b.n	801044c <_vfiprintf_r+0x8c>
 80104ce:	9a03      	ldr	r2, [sp, #12]
 80104d0:	1d11      	adds	r1, r2, #4
 80104d2:	6812      	ldr	r2, [r2, #0]
 80104d4:	9103      	str	r1, [sp, #12]
 80104d6:	2a00      	cmp	r2, #0
 80104d8:	db01      	blt.n	80104de <_vfiprintf_r+0x11e>
 80104da:	9207      	str	r2, [sp, #28]
 80104dc:	e004      	b.n	80104e8 <_vfiprintf_r+0x128>
 80104de:	4252      	negs	r2, r2
 80104e0:	f043 0302 	orr.w	r3, r3, #2
 80104e4:	9207      	str	r2, [sp, #28]
 80104e6:	9304      	str	r3, [sp, #16]
 80104e8:	f898 3000 	ldrb.w	r3, [r8]
 80104ec:	2b2e      	cmp	r3, #46	; 0x2e
 80104ee:	d10e      	bne.n	801050e <_vfiprintf_r+0x14e>
 80104f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80104f4:	2b2a      	cmp	r3, #42	; 0x2a
 80104f6:	d138      	bne.n	801056a <_vfiprintf_r+0x1aa>
 80104f8:	9b03      	ldr	r3, [sp, #12]
 80104fa:	1d1a      	adds	r2, r3, #4
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	9203      	str	r2, [sp, #12]
 8010500:	2b00      	cmp	r3, #0
 8010502:	bfb8      	it	lt
 8010504:	f04f 33ff 	movlt.w	r3, #4294967295
 8010508:	f108 0802 	add.w	r8, r8, #2
 801050c:	9305      	str	r3, [sp, #20]
 801050e:	4d33      	ldr	r5, [pc, #204]	; (80105dc <_vfiprintf_r+0x21c>)
 8010510:	f898 1000 	ldrb.w	r1, [r8]
 8010514:	2203      	movs	r2, #3
 8010516:	4628      	mov	r0, r5
 8010518:	f7ef fe62 	bl	80001e0 <memchr>
 801051c:	b140      	cbz	r0, 8010530 <_vfiprintf_r+0x170>
 801051e:	2340      	movs	r3, #64	; 0x40
 8010520:	1b40      	subs	r0, r0, r5
 8010522:	fa03 f000 	lsl.w	r0, r3, r0
 8010526:	9b04      	ldr	r3, [sp, #16]
 8010528:	4303      	orrs	r3, r0
 801052a:	f108 0801 	add.w	r8, r8, #1
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	f898 1000 	ldrb.w	r1, [r8]
 8010534:	482a      	ldr	r0, [pc, #168]	; (80105e0 <_vfiprintf_r+0x220>)
 8010536:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801053a:	2206      	movs	r2, #6
 801053c:	f108 0701 	add.w	r7, r8, #1
 8010540:	f7ef fe4e 	bl	80001e0 <memchr>
 8010544:	2800      	cmp	r0, #0
 8010546:	d037      	beq.n	80105b8 <_vfiprintf_r+0x1f8>
 8010548:	4b26      	ldr	r3, [pc, #152]	; (80105e4 <_vfiprintf_r+0x224>)
 801054a:	bb1b      	cbnz	r3, 8010594 <_vfiprintf_r+0x1d4>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	3307      	adds	r3, #7
 8010550:	f023 0307 	bic.w	r3, r3, #7
 8010554:	3308      	adds	r3, #8
 8010556:	9303      	str	r3, [sp, #12]
 8010558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801055a:	444b      	add	r3, r9
 801055c:	9309      	str	r3, [sp, #36]	; 0x24
 801055e:	e750      	b.n	8010402 <_vfiprintf_r+0x42>
 8010560:	fb05 3202 	mla	r2, r5, r2, r3
 8010564:	2001      	movs	r0, #1
 8010566:	4688      	mov	r8, r1
 8010568:	e78a      	b.n	8010480 <_vfiprintf_r+0xc0>
 801056a:	2300      	movs	r3, #0
 801056c:	f108 0801 	add.w	r8, r8, #1
 8010570:	9305      	str	r3, [sp, #20]
 8010572:	4619      	mov	r1, r3
 8010574:	250a      	movs	r5, #10
 8010576:	4640      	mov	r0, r8
 8010578:	f810 2b01 	ldrb.w	r2, [r0], #1
 801057c:	3a30      	subs	r2, #48	; 0x30
 801057e:	2a09      	cmp	r2, #9
 8010580:	d903      	bls.n	801058a <_vfiprintf_r+0x1ca>
 8010582:	2b00      	cmp	r3, #0
 8010584:	d0c3      	beq.n	801050e <_vfiprintf_r+0x14e>
 8010586:	9105      	str	r1, [sp, #20]
 8010588:	e7c1      	b.n	801050e <_vfiprintf_r+0x14e>
 801058a:	fb05 2101 	mla	r1, r5, r1, r2
 801058e:	2301      	movs	r3, #1
 8010590:	4680      	mov	r8, r0
 8010592:	e7f0      	b.n	8010576 <_vfiprintf_r+0x1b6>
 8010594:	ab03      	add	r3, sp, #12
 8010596:	9300      	str	r3, [sp, #0]
 8010598:	4622      	mov	r2, r4
 801059a:	4b13      	ldr	r3, [pc, #76]	; (80105e8 <_vfiprintf_r+0x228>)
 801059c:	a904      	add	r1, sp, #16
 801059e:	4630      	mov	r0, r6
 80105a0:	f7fb ffaa 	bl	800c4f8 <_printf_float>
 80105a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80105a8:	4681      	mov	r9, r0
 80105aa:	d1d5      	bne.n	8010558 <_vfiprintf_r+0x198>
 80105ac:	89a3      	ldrh	r3, [r4, #12]
 80105ae:	065b      	lsls	r3, r3, #25
 80105b0:	f53f af7e 	bmi.w	80104b0 <_vfiprintf_r+0xf0>
 80105b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105b6:	e77d      	b.n	80104b4 <_vfiprintf_r+0xf4>
 80105b8:	ab03      	add	r3, sp, #12
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	4622      	mov	r2, r4
 80105be:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <_vfiprintf_r+0x228>)
 80105c0:	a904      	add	r1, sp, #16
 80105c2:	4630      	mov	r0, r6
 80105c4:	f7fc fa4e 	bl	800ca64 <_printf_i>
 80105c8:	e7ec      	b.n	80105a4 <_vfiprintf_r+0x1e4>
 80105ca:	bf00      	nop
 80105cc:	08010ba0 	.word	0x08010ba0
 80105d0:	08010cec 	.word	0x08010cec
 80105d4:	08010bc0 	.word	0x08010bc0
 80105d8:	08010b80 	.word	0x08010b80
 80105dc:	08010cf2 	.word	0x08010cf2
 80105e0:	08010cf6 	.word	0x08010cf6
 80105e4:	0800c4f9 	.word	0x0800c4f9
 80105e8:	0801039b 	.word	0x0801039b

080105ec <_sbrk_r>:
 80105ec:	b538      	push	{r3, r4, r5, lr}
 80105ee:	4c06      	ldr	r4, [pc, #24]	; (8010608 <_sbrk_r+0x1c>)
 80105f0:	2300      	movs	r3, #0
 80105f2:	4605      	mov	r5, r0
 80105f4:	4608      	mov	r0, r1
 80105f6:	6023      	str	r3, [r4, #0]
 80105f8:	f7f6 f854 	bl	80066a4 <_sbrk>
 80105fc:	1c43      	adds	r3, r0, #1
 80105fe:	d102      	bne.n	8010606 <_sbrk_r+0x1a>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	b103      	cbz	r3, 8010606 <_sbrk_r+0x1a>
 8010604:	602b      	str	r3, [r5, #0]
 8010606:	bd38      	pop	{r3, r4, r5, pc}
 8010608:	20016490 	.word	0x20016490

0801060c <__sread>:
 801060c:	b510      	push	{r4, lr}
 801060e:	460c      	mov	r4, r1
 8010610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010614:	f000 f8f4 	bl	8010800 <_read_r>
 8010618:	2800      	cmp	r0, #0
 801061a:	bfab      	itete	ge
 801061c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801061e:	89a3      	ldrhlt	r3, [r4, #12]
 8010620:	181b      	addge	r3, r3, r0
 8010622:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010626:	bfac      	ite	ge
 8010628:	6563      	strge	r3, [r4, #84]	; 0x54
 801062a:	81a3      	strhlt	r3, [r4, #12]
 801062c:	bd10      	pop	{r4, pc}

0801062e <__swrite>:
 801062e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010632:	461f      	mov	r7, r3
 8010634:	898b      	ldrh	r3, [r1, #12]
 8010636:	05db      	lsls	r3, r3, #23
 8010638:	4605      	mov	r5, r0
 801063a:	460c      	mov	r4, r1
 801063c:	4616      	mov	r6, r2
 801063e:	d505      	bpl.n	801064c <__swrite+0x1e>
 8010640:	2302      	movs	r3, #2
 8010642:	2200      	movs	r2, #0
 8010644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010648:	f000 f886 	bl	8010758 <_lseek_r>
 801064c:	89a3      	ldrh	r3, [r4, #12]
 801064e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010652:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010656:	81a3      	strh	r3, [r4, #12]
 8010658:	4632      	mov	r2, r6
 801065a:	463b      	mov	r3, r7
 801065c:	4628      	mov	r0, r5
 801065e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	f000 b835 	b.w	80106d0 <_write_r>

08010666 <__sseek>:
 8010666:	b510      	push	{r4, lr}
 8010668:	460c      	mov	r4, r1
 801066a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066e:	f000 f873 	bl	8010758 <_lseek_r>
 8010672:	1c43      	adds	r3, r0, #1
 8010674:	89a3      	ldrh	r3, [r4, #12]
 8010676:	bf15      	itete	ne
 8010678:	6560      	strne	r0, [r4, #84]	; 0x54
 801067a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801067e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010682:	81a3      	strheq	r3, [r4, #12]
 8010684:	bf18      	it	ne
 8010686:	81a3      	strhne	r3, [r4, #12]
 8010688:	bd10      	pop	{r4, pc}

0801068a <__sclose>:
 801068a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801068e:	f000 b831 	b.w	80106f4 <_close_r>

08010692 <strncmp>:
 8010692:	b510      	push	{r4, lr}
 8010694:	b16a      	cbz	r2, 80106b2 <strncmp+0x20>
 8010696:	3901      	subs	r1, #1
 8010698:	1884      	adds	r4, r0, r2
 801069a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801069e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d103      	bne.n	80106ae <strncmp+0x1c>
 80106a6:	42a0      	cmp	r0, r4
 80106a8:	d001      	beq.n	80106ae <strncmp+0x1c>
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1f5      	bne.n	801069a <strncmp+0x8>
 80106ae:	1a98      	subs	r0, r3, r2
 80106b0:	bd10      	pop	{r4, pc}
 80106b2:	4610      	mov	r0, r2
 80106b4:	e7fc      	b.n	80106b0 <strncmp+0x1e>

080106b6 <__ascii_wctomb>:
 80106b6:	b149      	cbz	r1, 80106cc <__ascii_wctomb+0x16>
 80106b8:	2aff      	cmp	r2, #255	; 0xff
 80106ba:	bf85      	ittet	hi
 80106bc:	238a      	movhi	r3, #138	; 0x8a
 80106be:	6003      	strhi	r3, [r0, #0]
 80106c0:	700a      	strbls	r2, [r1, #0]
 80106c2:	f04f 30ff 	movhi.w	r0, #4294967295
 80106c6:	bf98      	it	ls
 80106c8:	2001      	movls	r0, #1
 80106ca:	4770      	bx	lr
 80106cc:	4608      	mov	r0, r1
 80106ce:	4770      	bx	lr

080106d0 <_write_r>:
 80106d0:	b538      	push	{r3, r4, r5, lr}
 80106d2:	4c07      	ldr	r4, [pc, #28]	; (80106f0 <_write_r+0x20>)
 80106d4:	4605      	mov	r5, r0
 80106d6:	4608      	mov	r0, r1
 80106d8:	4611      	mov	r1, r2
 80106da:	2200      	movs	r2, #0
 80106dc:	6022      	str	r2, [r4, #0]
 80106de:	461a      	mov	r2, r3
 80106e0:	f7f5 ff8f 	bl	8006602 <_write>
 80106e4:	1c43      	adds	r3, r0, #1
 80106e6:	d102      	bne.n	80106ee <_write_r+0x1e>
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	b103      	cbz	r3, 80106ee <_write_r+0x1e>
 80106ec:	602b      	str	r3, [r5, #0]
 80106ee:	bd38      	pop	{r3, r4, r5, pc}
 80106f0:	20016490 	.word	0x20016490

080106f4 <_close_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	4c06      	ldr	r4, [pc, #24]	; (8010710 <_close_r+0x1c>)
 80106f8:	2300      	movs	r3, #0
 80106fa:	4605      	mov	r5, r0
 80106fc:	4608      	mov	r0, r1
 80106fe:	6023      	str	r3, [r4, #0]
 8010700:	f7f5 ff9b 	bl	800663a <_close>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	d102      	bne.n	801070e <_close_r+0x1a>
 8010708:	6823      	ldr	r3, [r4, #0]
 801070a:	b103      	cbz	r3, 801070e <_close_r+0x1a>
 801070c:	602b      	str	r3, [r5, #0]
 801070e:	bd38      	pop	{r3, r4, r5, pc}
 8010710:	20016490 	.word	0x20016490

08010714 <_fstat_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4c07      	ldr	r4, [pc, #28]	; (8010734 <_fstat_r+0x20>)
 8010718:	2300      	movs	r3, #0
 801071a:	4605      	mov	r5, r0
 801071c:	4608      	mov	r0, r1
 801071e:	4611      	mov	r1, r2
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	f7f5 ff96 	bl	8006652 <_fstat>
 8010726:	1c43      	adds	r3, r0, #1
 8010728:	d102      	bne.n	8010730 <_fstat_r+0x1c>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	b103      	cbz	r3, 8010730 <_fstat_r+0x1c>
 801072e:	602b      	str	r3, [r5, #0]
 8010730:	bd38      	pop	{r3, r4, r5, pc}
 8010732:	bf00      	nop
 8010734:	20016490 	.word	0x20016490

08010738 <_isatty_r>:
 8010738:	b538      	push	{r3, r4, r5, lr}
 801073a:	4c06      	ldr	r4, [pc, #24]	; (8010754 <_isatty_r+0x1c>)
 801073c:	2300      	movs	r3, #0
 801073e:	4605      	mov	r5, r0
 8010740:	4608      	mov	r0, r1
 8010742:	6023      	str	r3, [r4, #0]
 8010744:	f7f5 ff95 	bl	8006672 <_isatty>
 8010748:	1c43      	adds	r3, r0, #1
 801074a:	d102      	bne.n	8010752 <_isatty_r+0x1a>
 801074c:	6823      	ldr	r3, [r4, #0]
 801074e:	b103      	cbz	r3, 8010752 <_isatty_r+0x1a>
 8010750:	602b      	str	r3, [r5, #0]
 8010752:	bd38      	pop	{r3, r4, r5, pc}
 8010754:	20016490 	.word	0x20016490

08010758 <_lseek_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4c07      	ldr	r4, [pc, #28]	; (8010778 <_lseek_r+0x20>)
 801075c:	4605      	mov	r5, r0
 801075e:	4608      	mov	r0, r1
 8010760:	4611      	mov	r1, r2
 8010762:	2200      	movs	r2, #0
 8010764:	6022      	str	r2, [r4, #0]
 8010766:	461a      	mov	r2, r3
 8010768:	f7f5 ff8e 	bl	8006688 <_lseek>
 801076c:	1c43      	adds	r3, r0, #1
 801076e:	d102      	bne.n	8010776 <_lseek_r+0x1e>
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	b103      	cbz	r3, 8010776 <_lseek_r+0x1e>
 8010774:	602b      	str	r3, [r5, #0]
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	20016490 	.word	0x20016490

0801077c <memmove>:
 801077c:	4288      	cmp	r0, r1
 801077e:	b510      	push	{r4, lr}
 8010780:	eb01 0302 	add.w	r3, r1, r2
 8010784:	d807      	bhi.n	8010796 <memmove+0x1a>
 8010786:	1e42      	subs	r2, r0, #1
 8010788:	4299      	cmp	r1, r3
 801078a:	d00a      	beq.n	80107a2 <memmove+0x26>
 801078c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010790:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010794:	e7f8      	b.n	8010788 <memmove+0xc>
 8010796:	4283      	cmp	r3, r0
 8010798:	d9f5      	bls.n	8010786 <memmove+0xa>
 801079a:	1881      	adds	r1, r0, r2
 801079c:	1ad2      	subs	r2, r2, r3
 801079e:	42d3      	cmn	r3, r2
 80107a0:	d100      	bne.n	80107a4 <memmove+0x28>
 80107a2:	bd10      	pop	{r4, pc}
 80107a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80107ac:	e7f7      	b.n	801079e <memmove+0x22>

080107ae <__malloc_lock>:
 80107ae:	4770      	bx	lr

080107b0 <__malloc_unlock>:
 80107b0:	4770      	bx	lr

080107b2 <_realloc_r>:
 80107b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107b4:	4607      	mov	r7, r0
 80107b6:	4614      	mov	r4, r2
 80107b8:	460e      	mov	r6, r1
 80107ba:	b921      	cbnz	r1, 80107c6 <_realloc_r+0x14>
 80107bc:	4611      	mov	r1, r2
 80107be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80107c2:	f7ff bc27 	b.w	8010014 <_malloc_r>
 80107c6:	b922      	cbnz	r2, 80107d2 <_realloc_r+0x20>
 80107c8:	f7ff fbd6 	bl	800ff78 <_free_r>
 80107cc:	4625      	mov	r5, r4
 80107ce:	4628      	mov	r0, r5
 80107d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107d2:	f000 f827 	bl	8010824 <_malloc_usable_size_r>
 80107d6:	42a0      	cmp	r0, r4
 80107d8:	d20f      	bcs.n	80107fa <_realloc_r+0x48>
 80107da:	4621      	mov	r1, r4
 80107dc:	4638      	mov	r0, r7
 80107de:	f7ff fc19 	bl	8010014 <_malloc_r>
 80107e2:	4605      	mov	r5, r0
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d0f2      	beq.n	80107ce <_realloc_r+0x1c>
 80107e8:	4631      	mov	r1, r6
 80107ea:	4622      	mov	r2, r4
 80107ec:	f7fb fddc 	bl	800c3a8 <memcpy>
 80107f0:	4631      	mov	r1, r6
 80107f2:	4638      	mov	r0, r7
 80107f4:	f7ff fbc0 	bl	800ff78 <_free_r>
 80107f8:	e7e9      	b.n	80107ce <_realloc_r+0x1c>
 80107fa:	4635      	mov	r5, r6
 80107fc:	e7e7      	b.n	80107ce <_realloc_r+0x1c>
	...

08010800 <_read_r>:
 8010800:	b538      	push	{r3, r4, r5, lr}
 8010802:	4c07      	ldr	r4, [pc, #28]	; (8010820 <_read_r+0x20>)
 8010804:	4605      	mov	r5, r0
 8010806:	4608      	mov	r0, r1
 8010808:	4611      	mov	r1, r2
 801080a:	2200      	movs	r2, #0
 801080c:	6022      	str	r2, [r4, #0]
 801080e:	461a      	mov	r2, r3
 8010810:	f7f5 feda 	bl	80065c8 <_read>
 8010814:	1c43      	adds	r3, r0, #1
 8010816:	d102      	bne.n	801081e <_read_r+0x1e>
 8010818:	6823      	ldr	r3, [r4, #0]
 801081a:	b103      	cbz	r3, 801081e <_read_r+0x1e>
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	bd38      	pop	{r3, r4, r5, pc}
 8010820:	20016490 	.word	0x20016490

08010824 <_malloc_usable_size_r>:
 8010824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010828:	1f18      	subs	r0, r3, #4
 801082a:	2b00      	cmp	r3, #0
 801082c:	bfbc      	itt	lt
 801082e:	580b      	ldrlt	r3, [r1, r0]
 8010830:	18c0      	addlt	r0, r0, r3
 8010832:	4770      	bx	lr

08010834 <_init>:
 8010834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010836:	bf00      	nop
 8010838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801083a:	bc08      	pop	{r3}
 801083c:	469e      	mov	lr, r3
 801083e:	4770      	bx	lr

08010840 <_fini>:
 8010840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010842:	bf00      	nop
 8010844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010846:	bc08      	pop	{r3}
 8010848:	469e      	mov	lr, r3
 801084a:	4770      	bx	lr

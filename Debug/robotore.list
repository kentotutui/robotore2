
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800f168  0800f168  0001f168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f500  0800f500  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f500  0800f500  0001f500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f508  0800f508  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f508  0800f508  0001f508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f50c  0800f50c  0001f50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f6b4  20000210  0800f720  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001f8c4  0800f720  0002f8c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021827  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046d0  00000000  00000000  00041a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001918  00000000  00000000  00046138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001738  00000000  00000000  00047a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002466e  00000000  00000000  00049188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167b6  00000000  00000000  0006d7f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb253  00000000  00000000  00083fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a14  00000000  00000000  0014f27c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f14c 	.word	0x0800f14c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f14c 	.word	0x0800f14c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc05 	bl	80017b0 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fb8a 	bl	8009804 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fb86 	bl	8009804 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001f484 	.word	0x2001f484
 8001110:	2001f444 	.word	0x2001f444
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <updateEncoderCnt+0x160>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <updateEncoderCnt+0x164>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <updateEncoderCnt+0x168>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <updateEncoderCnt+0x16c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <updateEncoderCnt+0x170>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updateEncoderCnt+0x164>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <updateEncoderCnt+0x170>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <updateEncoderCnt+0x174>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <updateEncoderCnt+0x16c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <updateEncoderCnt+0x174>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <updateEncoderCnt+0x164>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <updateEncoderCnt+0x16c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <updateEncoderCnt+0x158>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <updateEncoderCnt+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <updateEncoderCnt+0x17c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <updateEncoderCnt+0x178>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <updateEncoderCnt+0x17c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <updateEncoderCnt+0x180>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <updateEncoderCnt+0x178>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <updateEncoderCnt+0x180>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <updateEncoderCnt+0x184>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <updateEncoderCnt+0x178>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <updateEncoderCnt+0x184>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <updateEncoderCnt+0x188>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <updateEncoderCnt+0x178>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <updateEncoderCnt+0x188>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <updateEncoderCnt+0x18c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateEncoderCnt+0x178>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <updateEncoderCnt+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <updateEncoderCnt+0x190>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <updateEncoderCnt+0x178>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <updateEncoderCnt+0x190>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <updateEncoderCnt+0x194>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateEncoderCnt+0x178>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <updateEncoderCnt+0x194>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <updateEncoderCnt+0x160>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <updateEncoderCnt+0x168>)
 800126a:	f242 7210 	movw	r2, #10000	; 0x2710
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001270:	bf00      	nop
 8001272:	bd98      	pop	{r3, r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	31e7b585 	.word	0x31e7b585
 800127c:	3f8e28c7 	.word	0x3f8e28c7
 8001280:	40000400 	.word	0x40000400
 8001284:	20000244 	.word	0x20000244
 8001288:	40000800 	.word	0x40000800
 800128c:	20000246 	.word	0x20000246
 8001290:	20000248 	.word	0x20000248
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000254 	.word	0x20000254
 80012a4:	20000258 	.word	0x20000258
 80012a8:	2000025c 	.word	0x2000025c
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000264 	.word	0x20000264
 80012b4:	20000268 	.word	0x20000268

080012b8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getEncoderCnt+0x2c>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getEncoderCnt+0x30>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000246 	.word	0x20000246

080012ec <getTotalDistance>:

float getTotalDistance(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return total_distance;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <getTotalDistance+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000258 	.word	0x20000258

08001308 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getGoalJudgeDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getSideLineJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <setTotalDistance>:

void setTotalDistance(float distance)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <setTotalDistance+0x1c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000258 	.word	0x20000258

08001360 <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <getCrossLineIgnoreDistance+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000264 	.word	0x20000264

0800137c <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	total_distance = 0;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <clearTotalDistance+0x18>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000258 	.word	0x20000258

08001398 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearGoalJudgeDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearSideLineJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearCrossLineIgnoreDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearSideLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <getDistance10mm+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000250 	.word	0x20000250

08001424 <clearDistance10mm>:

void clearDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <clearDistance10mm+0x18>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <getspeedcount>:

float getspeedcount(void){
 8001440:	b598      	push	{r3, r4, r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <getspeedcount+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db16      	blt.n	8001486 <getspeedcount+0x46>
		speed_cnt += 0.1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <getspeedcount+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	a30d      	add	r3, pc, #52	; (adr r3, 8001498 <getspeedcount+0x58>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7fe ff10 	bl	800028c <__adddf3>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <getspeedcount+0x64>)
 800147c:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <getspeedcount+0x60>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <getspeedcount+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	bd98      	pop	{r3, r4, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	20000254 	.word	0x20000254
 80014a4:	2000026c 	.word	0x2000026c

080014a8 <clearspeedcount>:

void clearspeedcount(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <clearspeedcount+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <clearspeedcount+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Unlock+0x20>)
 80014cc:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <FLASH_Unlock+0x24>)
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001510:	bf00      	nop
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <FLASH_WaitBusy+0x1c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <FLASH_WaitBusy+0x6>
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001536:	f006 f99d 	bl	8007874 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fa53 	bl	8007a04 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800155e:	f006 f9ab 	bl	80078b8 <HAL_FLASH_Lock>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001578:	f7ff ffa4 	bl	80014c4 <FLASH_Unlock>

	FLASH_WaitBusy();
 800157c:	f7ff ffc6 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_Write_Word_F+0x50>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800159e:	f7ff ffb5 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80015ae:	f7ff ff9d 	bl	80014ec <FLASH_Lock>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <initGyro>:
int16_t xg_, yg_, zg_;
float omega;
float theta_10mm;
float ang_average = 0;

uint8_t initGyro(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 80015c6:	f001 fe4b 	bl	8003260 <IMU_init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f005 f8b9 	bl	8006748 <HAL_Delay>

	return who_i_am;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <updateIMUValue>:

void updateIMUValue(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	read_gyro_data();
 80015e6:	f001 fe5f 	bl	80032a8 <read_gyro_data>
	zg_ = zg;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <updateIMUValue+0x148>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <updateIMUValue+0x14c>)
 80015f2:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <updateIMUValue+0x148>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <updateIMUValue+0x150>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa92 	bl	8000b58 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <updateIMUValue+0x14c>)
 800163a:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <updateIMUValue+0x14c>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <updateIMUValue+0x154>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <updateIMUValue+0x14c>)
 8001660:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <updateIMUValue+0x14c>)
 8001664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <updateIMUValue+0x150>)
 800166a:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <updateIMUValue+0x14c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	a322      	add	r3, pc, #136	; (adr r3, 8001710 <updateIMUValue+0x130>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	a320      	add	r3, pc, #128	; (adr r3, 8001718 <updateIMUValue+0x138>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <updateIMUValue+0x158>)
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_ddiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <updateIMUValue+0x15c>)
 80016c2:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <updateIMUValue+0x160>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <updateIMUValue+0x15c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a310      	add	r3, pc, #64	; (adr r3, 8001720 <updateIMUValue+0x140>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <updateIMUValue+0x160>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	40306666 	.word	0x40306666
 8001718:	54411744 	.word	0x54411744
 800171c:	400921fb 	.word	0x400921fb
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	2001f5a8 	.word	0x2001f5a8
 800172c:	2001f4c4 	.word	0x2001f4c4
 8001730:	20000274 	.word	0x20000274
 8001734:	20000270 	.word	0x20000270
 8001738:	40668000 	.word	0x40668000
 800173c:	2001f4d0 	.word	0x2001f4d0
 8001740:	2001f4cc 	.word	0x2001f4cc

08001744 <IMU_average>:

void IMU_average(){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	float average = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e015      	b.n	8001782 <IMU_average+0x3e>
		average = average+zg;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <IMU_average+0x60>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ed97 7a01 	vldr	s14, [r7, #4]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f004 ffe9 	bl	8006748 <HAL_Delay>
		setLED2('A');
 8001776:	2041      	movs	r0, #65	; 0x41
 8001778:	f000 f904 	bl	8001984 <setLED2>
	for(int i=0;i<=1000;i++){
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001788:	dde5      	ble.n	8001756 <IMU_average+0x12>
	}
	ang_average = average/1000;
 800178a:	ed97 7a01 	vldr	s14, [r7, #4]
 800178e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017a8 <IMU_average+0x64>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <IMU_average+0x68>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2001f5a8 	.word	0x2001f5a8
 80017a8:	447a0000 	.word	0x447a0000
 80017ac:	20000270 	.word	0x20000270

080017b0 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return theta_10mm;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <getTheta10mm+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	2001f4cc 	.word	0x2001f4cc

080017cc <clearTheta10mm>:

void clearTheta10mm()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <clearTheta10mm+0x18>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2001f4cc 	.word	0x2001f4cc

080017e8 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b52      	cmp	r3, #82	; 0x52
 80017f6:	d112      	bne.n	800181e <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <setLED+0x198>)
 8001800:	f006 fbd4 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <setLED+0x198>)
 800180c:	f006 fbce 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	485a      	ldr	r0, [pc, #360]	; (8001980 <setLED+0x198>)
 8001818:	f006 fbc8 	bl	8007fac <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800181c:	e0ab      	b.n	8001976 <setLED+0x18e>
	else if(color == 'G'){
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b47      	cmp	r3, #71	; 0x47
 8001822:	d112      	bne.n	800184a <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4855      	ldr	r0, [pc, #340]	; (8001980 <setLED+0x198>)
 800182c:	f006 fbbe 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	4852      	ldr	r0, [pc, #328]	; (8001980 <setLED+0x198>)
 8001838:	f006 fbb8 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	484f      	ldr	r0, [pc, #316]	; (8001980 <setLED+0x198>)
 8001844:	f006 fbb2 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001848:	e095      	b.n	8001976 <setLED+0x18e>
	else if(color == 'B'){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b42      	cmp	r3, #66	; 0x42
 800184e:	d112      	bne.n	8001876 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	484a      	ldr	r0, [pc, #296]	; (8001980 <setLED+0x198>)
 8001858:	f006 fba8 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <setLED+0x198>)
 8001864:	f006 fba2 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <setLED+0x198>)
 8001870:	f006 fb9c 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001874:	e07f      	b.n	8001976 <setLED+0x18e>
	else if(color == 'M'){
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b4d      	cmp	r3, #77	; 0x4d
 800187a:	d112      	bne.n	80018a2 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	483f      	ldr	r0, [pc, #252]	; (8001980 <setLED+0x198>)
 8001884:	f006 fb92 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <setLED+0x198>)
 8001890:	f006 fb8c 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	4839      	ldr	r0, [pc, #228]	; (8001980 <setLED+0x198>)
 800189c:	f006 fb86 	bl	8007fac <HAL_GPIO_WritePin>
}
 80018a0:	e069      	b.n	8001976 <setLED+0x18e>
	else if(color == 'Y'){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b59      	cmp	r3, #89	; 0x59
 80018a6:	d112      	bne.n	80018ce <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <setLED+0x198>)
 80018b0:	f006 fb7c 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ba:	4831      	ldr	r0, [pc, #196]	; (8001980 <setLED+0x198>)
 80018bc:	f006 fb76 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482e      	ldr	r0, [pc, #184]	; (8001980 <setLED+0x198>)
 80018c8:	f006 fb70 	bl	8007fac <HAL_GPIO_WritePin>
}
 80018cc:	e053      	b.n	8001976 <setLED+0x18e>
	else if(color == 'C'){
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b43      	cmp	r3, #67	; 0x43
 80018d2:	d112      	bne.n	80018fa <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <setLED+0x198>)
 80018dc:	f006 fb66 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <setLED+0x198>)
 80018e8:	f006 fb60 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <setLED+0x198>)
 80018f4:	f006 fb5a 	bl	8007fac <HAL_GPIO_WritePin>
}
 80018f8:	e03d      	b.n	8001976 <setLED+0x18e>
	else if(color == 'W'){
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b57      	cmp	r3, #87	; 0x57
 80018fe:	d112      	bne.n	8001926 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	481e      	ldr	r0, [pc, #120]	; (8001980 <setLED+0x198>)
 8001908:	f006 fb50 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <setLED+0x198>)
 8001914:	f006 fb4a 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	4818      	ldr	r0, [pc, #96]	; (8001980 <setLED+0x198>)
 8001920:	f006 fb44 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001924:	e027      	b.n	8001976 <setLED+0x18e>
	else if(color == 'N'){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b4e      	cmp	r3, #78	; 0x4e
 800192a:	d112      	bne.n	8001952 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <setLED+0x198>)
 8001934:	f006 fb3a 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <setLED+0x198>)
 8001940:	f006 fb34 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <setLED+0x198>)
 800194c:	f006 fb2e 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001950:	e011      	b.n	8001976 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <setLED+0x198>)
 800195a:	f006 fb27 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <setLED+0x198>)
 8001966:	f006 fb21 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <setLED+0x198>)
 8001972:	f006 fb1b 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020800 	.word	0x40020800

08001984 <setLED2>:

void setLED2(uint8_t color2)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b52      	cmp	r3, #82	; 0x52
 8001992:	d124      	bne.n	80019de <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	489d      	ldr	r0, [pc, #628]	; (8001c10 <setLED2+0x28c>)
 800199c:	f006 fb06 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	489b      	ldr	r0, [pc, #620]	; (8001c14 <setLED2+0x290>)
 80019a8:	f006 fb00 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	4898      	ldr	r0, [pc, #608]	; (8001c14 <setLED2+0x290>)
 80019b4:	f006 fafa 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4895      	ldr	r0, [pc, #596]	; (8001c14 <setLED2+0x290>)
 80019c0:	f006 faf4 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	4892      	ldr	r0, [pc, #584]	; (8001c14 <setLED2+0x290>)
 80019cc:	f006 faee 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	488f      	ldr	r0, [pc, #572]	; (8001c14 <setLED2+0x290>)
 80019d8:	f006 fae8 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 80019dc:	e113      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'G'){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b47      	cmp	r3, #71	; 0x47
 80019e2:	d124      	bne.n	8001a2e <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	4889      	ldr	r0, [pc, #548]	; (8001c10 <setLED2+0x28c>)
 80019ec:	f006 fade 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	4887      	ldr	r0, [pc, #540]	; (8001c14 <setLED2+0x290>)
 80019f8:	f006 fad8 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	4884      	ldr	r0, [pc, #528]	; (8001c14 <setLED2+0x290>)
 8001a04:	f006 fad2 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <setLED2+0x290>)
 8001a10:	f006 facc 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	487e      	ldr	r0, [pc, #504]	; (8001c14 <setLED2+0x290>)
 8001a1c:	f006 fac6 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a26:	487b      	ldr	r0, [pc, #492]	; (8001c14 <setLED2+0x290>)
 8001a28:	f006 fac0 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001a2c:	e0eb      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'B'){
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b42      	cmp	r3, #66	; 0x42
 8001a32:	d124      	bne.n	8001a7e <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3a:	4875      	ldr	r0, [pc, #468]	; (8001c10 <setLED2+0x28c>)
 8001a3c:	f006 fab6 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	4873      	ldr	r0, [pc, #460]	; (8001c14 <setLED2+0x290>)
 8001a48:	f006 fab0 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4870      	ldr	r0, [pc, #448]	; (8001c14 <setLED2+0x290>)
 8001a54:	f006 faaa 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5e:	486d      	ldr	r0, [pc, #436]	; (8001c14 <setLED2+0x290>)
 8001a60:	f006 faa4 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	486a      	ldr	r0, [pc, #424]	; (8001c14 <setLED2+0x290>)
 8001a6c:	f006 fa9e 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a76:	4867      	ldr	r0, [pc, #412]	; (8001c14 <setLED2+0x290>)
 8001a78:	f006 fa98 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001a7c:	e0c3      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'W'){
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b57      	cmp	r3, #87	; 0x57
 8001a82:	d124      	bne.n	8001ace <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8a:	4861      	ldr	r0, [pc, #388]	; (8001c10 <setLED2+0x28c>)
 8001a8c:	f006 fa8e 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a96:	485f      	ldr	r0, [pc, #380]	; (8001c14 <setLED2+0x290>)
 8001a98:	f006 fa88 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa2:	485c      	ldr	r0, [pc, #368]	; (8001c14 <setLED2+0x290>)
 8001aa4:	f006 fa82 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4859      	ldr	r0, [pc, #356]	; (8001c14 <setLED2+0x290>)
 8001ab0:	f006 fa7c 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	4856      	ldr	r0, [pc, #344]	; (8001c14 <setLED2+0x290>)
 8001abc:	f006 fa76 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	4853      	ldr	r0, [pc, #332]	; (8001c14 <setLED2+0x290>)
 8001ac8:	f006 fa70 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001acc:	e09b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'Y'){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b59      	cmp	r3, #89	; 0x59
 8001ad2:	d124      	bne.n	8001b1e <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ada:	484d      	ldr	r0, [pc, #308]	; (8001c10 <setLED2+0x28c>)
 8001adc:	f006 fa66 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	484b      	ldr	r0, [pc, #300]	; (8001c14 <setLED2+0x290>)
 8001ae8:	f006 fa60 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4848      	ldr	r0, [pc, #288]	; (8001c14 <setLED2+0x290>)
 8001af4:	f006 fa5a 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	4845      	ldr	r0, [pc, #276]	; (8001c14 <setLED2+0x290>)
 8001b00:	f006 fa54 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0a:	4842      	ldr	r0, [pc, #264]	; (8001c14 <setLED2+0x290>)
 8001b0c:	f006 fa4e 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b16:	483f      	ldr	r0, [pc, #252]	; (8001c14 <setLED2+0x290>)
 8001b18:	f006 fa48 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001b1c:	e073      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'X'){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b58      	cmp	r3, #88	; 0x58
 8001b22:	d124      	bne.n	8001b6e <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2a:	4839      	ldr	r0, [pc, #228]	; (8001c10 <setLED2+0x28c>)
 8001b2c:	f006 fa3e 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	4837      	ldr	r0, [pc, #220]	; (8001c14 <setLED2+0x290>)
 8001b38:	f006 fa38 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	4834      	ldr	r0, [pc, #208]	; (8001c14 <setLED2+0x290>)
 8001b44:	f006 fa32 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	4831      	ldr	r0, [pc, #196]	; (8001c14 <setLED2+0x290>)
 8001b50:	f006 fa2c 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	482e      	ldr	r0, [pc, #184]	; (8001c14 <setLED2+0x290>)
 8001b5c:	f006 fa26 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b66:	482b      	ldr	r0, [pc, #172]	; (8001c14 <setLED2+0x290>)
 8001b68:	f006 fa20 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001b6c:	e04b      	b.n	8001c06 <setLED2+0x282>
	else if(color2 == 'A'){
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b41      	cmp	r3, #65	; 0x41
 8001b72:	d124      	bne.n	8001bbe <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7a:	4825      	ldr	r0, [pc, #148]	; (8001c10 <setLED2+0x28c>)
 8001b7c:	f006 fa16 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <setLED2+0x290>)
 8001b88:	f006 fa10 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4820      	ldr	r0, [pc, #128]	; (8001c14 <setLED2+0x290>)
 8001b94:	f006 fa0a 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <setLED2+0x290>)
 8001ba0:	f006 fa04 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <setLED2+0x290>)
 8001bac:	f006 f9fe 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb6:	4817      	ldr	r0, [pc, #92]	; (8001c14 <setLED2+0x290>)
 8001bb8:	f006 f9f8 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001bbc:	e023      	b.n	8001c06 <setLED2+0x282>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <setLED2+0x28c>)
 8001bc6:	f006 f9f1 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <setLED2+0x290>)
 8001bd2:	f006 f9eb 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <setLED2+0x290>)
 8001bde:	f006 f9e5 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be8:	480a      	ldr	r0, [pc, #40]	; (8001c14 <setLED2+0x290>)
 8001bea:	f006 f9df 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bf4:	4807      	ldr	r0, [pc, #28]	; (8001c14 <setLED2+0x290>)
 8001bf6:	f006 f9d9 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <setLED2+0x290>)
 8001c02:	f006 f9d3 	bl	8007fac <HAL_GPIO_WritePin>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400

08001c18 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 4.5, kd = 0.045;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001c1e:	4b4c      	ldr	r3, [pc, #304]	; (8001d50 <calculateLineFollowingTermFlip+0x138>)
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <calculateLineFollowingTermFlip+0x13c>)
 8001c24:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001c2c:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <calculateLineFollowingTermFlip+0x140>)
 8001c2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 8081 	bne.w	8001d3a <calculateLineFollowingTermFlip+0x122>
		if(i_clear_flag == 1){
 8001c38:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <calculateLineFollowingTermFlip+0x36>
			i = 0;
 8001c40:	4b47      	ldr	r3, [pc, #284]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <calculateLineFollowingTermFlip+0x144>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 8001c4e:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b43      	ldr	r3, [pc, #268]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c60:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c68:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	4a3d      	ldr	r2, [pc, #244]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c70:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c78:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a3a      	ldr	r2, [pc, #232]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001c80:	fb82 1203 	smull	r1, r2, r2, r3
 8001c84:	17db      	asrs	r3, r3, #31
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4b34      	ldr	r3, [pc, #208]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001c96:	440b      	add	r3, r1
 8001c98:	4932      	ldr	r1, [pc, #200]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001c9a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	4930      	ldr	r1, [pc, #192]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001ca2:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001ca6:	440b      	add	r3, r1
 8001ca8:	492e      	ldr	r1, [pc, #184]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001caa:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8001cae:	440b      	add	r3, r1
 8001cb0:	492c      	ldr	r1, [pc, #176]	; (8001d64 <calculateLineFollowingTermFlip+0x14c>)
 8001cb2:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001cb6:	440b      	add	r3, r1
 8001cb8:	492b      	ldr	r1, [pc, #172]	; (8001d68 <calculateLineFollowingTermFlip+0x150>)
 8001cba:	fb81 0103 	smull	r0, r1, r1, r3
 8001cbe:	17db      	asrs	r3, r3, #31
 8001cc0:	1a5b      	subs	r3, r3, r1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ccc:	edc7 7a03 	vstr	s15, [r7, #12]

		p = kp * diff; //P制御
 8001cd0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cee:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf6:	ee17 0a90 	vmov	r0, s15
 8001cfa:	f7fe fc25 	bl	8000548 <__aeabi_f2d>
 8001cfe:	a312      	add	r3, pc, #72	; (adr r3, 8001d48 <calculateLineFollowingTermFlip+0x130>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fda2 	bl	800084c <__aeabi_ddiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff6a 	bl	8000be8 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <calculateLineFollowingTermFlip+0x148>)
 8001d1a:	ed93 7a00 	vldr	s14, [r3]
 8001d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d26:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <calculateLineFollowingTermFlip+0x158>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <calculateLineFollowingTermFlip+0x154>)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6013      	str	r3, [r2, #0]
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	f3af 8000 	nop.w
 8001d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d4c:	3f50624d 	.word	0x3f50624d
 8001d50:	40900000 	.word	0x40900000
 8001d54:	3d3851ec 	.word	0x3d3851ec
 8001d58:	20000276 	.word	0x20000276
 8001d5c:	20000277 	.word	0x20000277
 8001d60:	20000284 	.word	0x20000284
 8001d64:	2001f3f0 	.word	0x2001f3f0
 8001d68:	2aaaaaab 	.word	0x2aaaaaab
 8001d6c:	20000280 	.word	0x20000280
 8001d70:	20000278 	.word	0x20000278

08001d74 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8001d7a:	4b52      	ldr	r3, [pc, #328]	; (8001ec4 <lineTraceFlip+0x150>)
 8001d7c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	f040 8097 	bne.w	8001eb4 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8001d86:	f001 fb4b 	bl	8003420 <getVelocityControlTerm>
 8001d8a:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.8;
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <lineTraceFlip+0x154>)
 8001d90:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8001d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	db02      	blt.n	8001daa <lineTraceFlip+0x36>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e010      	b.n	8001dcc <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	d805      	bhi.n	8001dcc <lineTraceFlip+0x58>
 8001dc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc4:	eef1 7a67 	vneg.f32	s15, s15
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8001dd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ecc <lineTraceFlip+0x158>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ddc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de0:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ed0 <lineTraceFlip+0x15c>
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	db0d      	blt.n	8001e0a <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <lineTraceFlip+0x158>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001ed0 <lineTraceFlip+0x15c>
 8001e00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e04:	edc7 7a04 	vstr	s15, [r7, #16]
 8001e08:	e01a      	b.n	8001e40 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8001e0a:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <lineTraceFlip+0x158>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e18:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ed4 <lineTraceFlip+0x160>
 8001e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d80c      	bhi.n	8001e40 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <lineTraceFlip+0x158>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e34:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001ed4 <lineTraceFlip+0x160>
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8001e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <lineTraceFlip+0x158>)
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <lineTraceFlip+0x158>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <lineTraceFlip+0x158>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <lineTraceFlip+0x158>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e84:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 8001e88:	4a13      	ldr	r2, [pc, #76]	; (8001ed8 <lineTraceFlip+0x164>)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea4:	ee17 2a90 	vmov	r2, s15
 8001ea8:	b212      	sxth	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fd19 	bl	80048e4 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001eb2:	e003      	b.n	8001ebc <lineTraceFlip+0x148>
		setMotor(0, 0);
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f002 fd14 	bl	80048e4 <setMotor>
}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000276 	.word	0x20000276
 8001ec8:	44a7e666 	.word	0x44a7e666
 8001ecc:	20000278 	.word	0x20000278
 8001ed0:	44d1e000 	.word	0x44d1e000
 8001ed4:	c4d1e000 	.word	0xc4d1e000
 8001ed8:	2001f4d4 	.word	0x2001f4d4

08001edc <startLineTrace>:

void startLineTrace()
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <startLineTrace+0x1c>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <startLineTrace+0x20>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000276 	.word	0x20000276
 8001efc:	20000277 	.word	0x20000277

08001f00 <stopLineTrace>:

void stopLineTrace()
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <stopLineTrace+0x1c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <stopLineTrace+0x20>)
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000276 	.word	0x20000276
 8001f20:	20000278 	.word	0x20000278

08001f24 <checkCourseOut>:

void checkCourseOut(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f3c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f44:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a21      	ldr	r2, [pc, #132]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f54:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f5c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a1d      	ldr	r2, [pc, #116]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f64:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f6c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f74:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f7c:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a15      	ldr	r2, [pc, #84]	; (8001fd8 <checkCourseOut+0xb4>)
 8001f84:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001f88:	4413      	add	r3, r2
 8001f8a:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <checkCourseOut+0xb8>)
 8001f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f90:	1052      	asrs	r2, r2, #1
 8001f92:	17db      	asrs	r3, r3, #31
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001f9e:	d906      	bls.n	8001fae <checkCourseOut+0x8a>
		dark_cnt++;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <checkCourseOut+0xbc>)
 8001faa:	801a      	strh	r2, [r3, #0]
 8001fac:	e002      	b.n	8001fb4 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001fae:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <checkCourseOut+0xbc>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	2b13      	cmp	r3, #19
 8001fba:	d903      	bls.n	8001fc4 <checkCourseOut+0xa0>
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001fc2:	e002      	b.n	8001fca <checkCourseOut+0xa6>
	else dark_flag = false;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <checkCourseOut+0xc0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	2001f3f0 	.word	0x2001f3f0
 8001fdc:	2aaaaaab 	.word	0x2aaaaaab
 8001fe0:	20000288 	.word	0x20000288
 8001fe4:	2000027c 	.word	0x2000027c

08001fe8 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return dark_flag;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <getCouseOutFlag+0x14>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	2000027c 	.word	0x2000027c

08002000 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002004:	2202      	movs	r2, #2
 8002006:	4905      	ldr	r1, [pc, #20]	; (800201c <initADC+0x1c>)
 8002008:	4805      	ldr	r0, [pc, #20]	; (8002020 <initADC+0x20>)
 800200a:	f004 fc03 	bl	8006814 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800200e:	220c      	movs	r2, #12
 8002010:	4904      	ldr	r1, [pc, #16]	; (8002024 <initADC+0x24>)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <initADC+0x28>)
 8002014:	f004 fbfe 	bl	8006814 <HAL_ADC_Start_DMA>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200002a4 	.word	0x200002a4
 8002020:	2001f528 	.word	0x2001f528
 8002024:	2000028c 	.word	0x2000028c
 8002028:	2001f4d8 	.word	0x2001f4d8

0800202c <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002030:	4bc9      	ldr	r3, [pc, #804]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002032:	885b      	ldrh	r3, [r3, #2]
 8002034:	ee07 3a90 	vmov	s15, r3
 8002038:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800203c:	4bc7      	ldr	r3, [pc, #796]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800203e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002042:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002046:	4bc6      	ldr	r3, [pc, #792]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002048:	ed93 7a01 	vldr	s14, [r3, #4]
 800204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002050:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002058:	4bc3      	ldr	r3, [pc, #780]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002062:	ee17 3a90 	vmov	r3, s15
 8002066:	b219      	sxth	r1, r3
 8002068:	4bc0      	ldr	r3, [pc, #768]	; (800236c <storeAnalogSensorBuffer+0x340>)
 800206a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800206e:	4bba      	ldr	r3, [pc, #744]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207a:	4bb8      	ldr	r3, [pc, #736]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800207c:	edd3 7a00 	vldr	s15, [r3]
 8002080:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002084:	4bb6      	ldr	r3, [pc, #728]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002086:	ed93 7a00 	vldr	s14, [r3]
 800208a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002096:	4bb4      	ldr	r3, [pc, #720]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a0:	ee17 3a90 	vmov	r3, s15
 80020a4:	b219      	sxth	r1, r3
 80020a6:	4bb2      	ldr	r3, [pc, #712]	; (8002370 <storeAnalogSensorBuffer+0x344>)
 80020a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80020ac:	4baa      	ldr	r3, [pc, #680]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ae:	889b      	ldrh	r3, [r3, #4]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b8:	4ba8      	ldr	r3, [pc, #672]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80020be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c2:	4ba7      	ldr	r3, [pc, #668]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80020c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80020d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d4:	4ba4      	ldr	r3, [pc, #656]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020de:	ee17 3a90 	vmov	r3, s15
 80020e2:	b219      	sxth	r1, r3
 80020e4:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <storeAnalogSensorBuffer+0x348>)
 80020e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80020ea:	4b9b      	ldr	r3, [pc, #620]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80020ec:	88db      	ldrh	r3, [r3, #6]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020f6:	4b99      	ldr	r3, [pc, #612]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80020f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80020fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002100:	4b97      	ldr	r3, [pc, #604]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002102:	ed93 7a03 	vldr	s14, [r3, #12]
 8002106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	4b95      	ldr	r3, [pc, #596]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 3a90 	vmov	r3, s15
 8002120:	b219      	sxth	r1, r3
 8002122:	4b95      	ldr	r3, [pc, #596]	; (8002378 <storeAnalogSensorBuffer+0x34c>)
 8002124:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002128:	4b8b      	ldr	r3, [pc, #556]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800212a:	891b      	ldrh	r3, [r3, #8]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	4b89      	ldr	r3, [pc, #548]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002136:	edd3 7a04 	vldr	s15, [r3, #16]
 800213a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002140:	ed93 7a04 	vldr	s14, [r3, #16]
 8002144:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002148:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	b219      	sxth	r1, r3
 8002160:	4b86      	ldr	r3, [pc, #536]	; (800237c <storeAnalogSensorBuffer+0x350>)
 8002162:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002166:	4b7c      	ldr	r3, [pc, #496]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002168:	895b      	ldrh	r3, [r3, #10]
 800216a:	ee07 3a90 	vmov	s15, r3
 800216e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002172:	4b7a      	ldr	r3, [pc, #488]	; (800235c <storeAnalogSensorBuffer+0x330>)
 8002174:	edd3 7a05 	vldr	s15, [r3, #20]
 8002178:	ee77 6a67 	vsub.f32	s13, s14, s15
 800217c:	4b78      	ldr	r3, [pc, #480]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 800217e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002186:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800218a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	461a      	mov	r2, r3
 8002194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002198:	ee17 3a90 	vmov	r3, s15
 800219c:	b219      	sxth	r1, r3
 800219e:	4b78      	ldr	r3, [pc, #480]	; (8002380 <storeAnalogSensorBuffer+0x354>)
 80021a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021a6:	899b      	ldrh	r3, [r3, #12]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80021b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021ba:	4b69      	ldr	r3, [pc, #420]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80021c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80021c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021cc:	4b66      	ldr	r3, [pc, #408]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d6:	ee17 3a90 	vmov	r3, s15
 80021da:	b219      	sxth	r1, r3
 80021dc:	4b69      	ldr	r3, [pc, #420]	; (8002384 <storeAnalogSensorBuffer+0x358>)
 80021de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80021e2:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80021e4:	89db      	ldrh	r3, [r3, #14]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b5b      	ldr	r3, [pc, #364]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80021f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80021f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80021fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80021fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002202:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002206:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002214:	ee17 3a90 	vmov	r3, s15
 8002218:	b219      	sxth	r1, r3
 800221a:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <storeAnalogSensorBuffer+0x35c>)
 800221c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002220:	4b4d      	ldr	r3, [pc, #308]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002222:	8a1b      	ldrh	r3, [r3, #16]
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	4b4b      	ldr	r3, [pc, #300]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800222e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002232:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002238:	ed93 7a08 	vldr	s14, [r3, #32]
 800223c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002240:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002248:	4b47      	ldr	r3, [pc, #284]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002252:	ee17 3a90 	vmov	r3, s15
 8002256:	b219      	sxth	r1, r3
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <storeAnalogSensorBuffer+0x360>)
 800225a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800225e:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 8002260:	8a5b      	ldrh	r3, [r3, #18]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <storeAnalogSensorBuffer+0x330>)
 800226c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002270:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002274:	4b3a      	ldr	r3, [pc, #232]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 8002276:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002364 <storeAnalogSensorBuffer+0x338>
 8002282:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002286:	4b38      	ldr	r3, [pc, #224]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	b219      	sxth	r1, r3
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <storeAnalogSensorBuffer+0x364>)
 8002298:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800229c:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 800229e:	8a9b      	ldrh	r3, [r3, #20]
 80022a0:	ee07 3a90 	vmov	s15, r3
 80022a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80022ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022b4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80022b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022bc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ce:	ee17 3a90 	vmov	r3, s15
 80022d2:	b219      	sxth	r1, r3
 80022d4:	4b2f      	ldr	r3, [pc, #188]	; (8002394 <storeAnalogSensorBuffer+0x368>)
 80022d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80022da:	4b1f      	ldr	r3, [pc, #124]	; (8002358 <storeAnalogSensorBuffer+0x32c>)
 80022dc:	8adb      	ldrh	r3, [r3, #22]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <storeAnalogSensorBuffer+0x330>)
 80022e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80022ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <storeAnalogSensorBuffer+0x334>)
 80022f2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002364 <storeAnalogSensorBuffer+0x338>
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	4b19      	ldr	r3, [pc, #100]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230c:	ee17 3a90 	vmov	r3, s15
 8002310:	b219      	sxth	r1, r3
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <storeAnalogSensorBuffer+0x36c>)
 8002314:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <storeAnalogSensorBuffer+0x370>)
 800231a:	885b      	ldrh	r3, [r3, #2]
 800231c:	ee07 3a90 	vmov	s15, r3
 8002320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <storeAnalogSensorBuffer+0x374>)
 8002326:	edd3 7a01 	vldr	s15, [r3, #4]
 800232a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800232e:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <storeAnalogSensorBuffer+0x378>)
 8002330:	ed93 7a01 	vldr	s14, [r3, #4]
 8002334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002338:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002364 <storeAnalogSensorBuffer+0x338>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <storeAnalogSensorBuffer+0x33c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	b219      	sxth	r1, r3
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <storeAnalogSensorBuffer+0x37c>)
 8002352:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002356:	e029      	b.n	80023ac <storeAnalogSensorBuffer+0x380>
 8002358:	2000028c 	.word	0x2000028c
 800235c:	2001f3b0 	.word	0x2001f3b0
 8002360:	2001f414 	.word	0x2001f414
 8002364:	447a0000 	.word	0x447a0000
 8002368:	20000030 	.word	0x20000030
 800236c:	200002bc 	.word	0x200002bc
 8002370:	200002a8 	.word	0x200002a8
 8002374:	200002d0 	.word	0x200002d0
 8002378:	200002e4 	.word	0x200002e4
 800237c:	200002f8 	.word	0x200002f8
 8002380:	2000030c 	.word	0x2000030c
 8002384:	20000320 	.word	0x20000320
 8002388:	20000334 	.word	0x20000334
 800238c:	20000348 	.word	0x20000348
 8002390:	2000035c 	.word	0x2000035c
 8002394:	20000370 	.word	0x20000370
 8002398:	20000384 	.word	0x20000384
 800239c:	200002a4 	.word	0x200002a4
 80023a0:	2001f3a8 	.word	0x2001f3a8
 80023a4:	2001f3e8 	.word	0x2001f3e8
 80023a8:	20000398 	.word	0x20000398
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <storeAnalogSensorBuffer+0x3d4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <storeAnalogSensorBuffer+0x3d8>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <storeAnalogSensorBuffer+0x3dc>)
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023cc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800240c <storeAnalogSensorBuffer+0x3e0>
 80023d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d4:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	b219      	sxth	r1, r3
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <storeAnalogSensorBuffer+0x3e8>)
 80023e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <storeAnalogSensorBuffer+0x3e4>)
 80023f4:	701a      	strb	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	200002a4 	.word	0x200002a4
 8002404:	2001f3a8 	.word	0x2001f3a8
 8002408:	2001f3e8 	.word	0x2001f3e8
 800240c:	447a0000 	.word	0x447a0000
 8002410:	20000030 	.word	0x20000030
 8002414:	200003ac 	.word	0x200003ac

08002418 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800241e:	4bc9      	ldr	r3, [pc, #804]	; (8002744 <updateAnalogSensor+0x32c>)
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242a:	4bc7      	ldr	r3, [pc, #796]	; (8002748 <updateAnalogSensor+0x330>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002434:	4bc5      	ldr	r3, [pc, #788]	; (800274c <updateAnalogSensor+0x334>)
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800243e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002750 <updateAnalogSensor+0x338>
 8002442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244a:	ee17 3a90 	vmov	r3, s15
 800244e:	b21a      	sxth	r2, r3
 8002450:	4bc0      	ldr	r3, [pc, #768]	; (8002754 <updateAnalogSensor+0x33c>)
 8002452:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002454:	4bbb      	ldr	r3, [pc, #748]	; (8002744 <updateAnalogSensor+0x32c>)
 8002456:	885b      	ldrh	r3, [r3, #2]
 8002458:	ee07 3a90 	vmov	s15, r3
 800245c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002460:	4bb9      	ldr	r3, [pc, #740]	; (8002748 <updateAnalogSensor+0x330>)
 8002462:	edd3 7a01 	vldr	s15, [r3, #4]
 8002466:	ee77 6a67 	vsub.f32	s13, s14, s15
 800246a:	4bb8      	ldr	r3, [pc, #736]	; (800274c <updateAnalogSensor+0x334>)
 800246c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002474:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002750 <updateAnalogSensor+0x338>
 8002478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002480:	ee17 3a90 	vmov	r3, s15
 8002484:	b21a      	sxth	r2, r3
 8002486:	4bb3      	ldr	r3, [pc, #716]	; (8002754 <updateAnalogSensor+0x33c>)
 8002488:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800248a:	4bae      	ldr	r3, [pc, #696]	; (8002744 <updateAnalogSensor+0x32c>)
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4bac      	ldr	r3, [pc, #688]	; (8002748 <updateAnalogSensor+0x330>)
 8002498:	edd3 7a02 	vldr	s15, [r3, #8]
 800249c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024a0:	4baa      	ldr	r3, [pc, #680]	; (800274c <updateAnalogSensor+0x334>)
 80024a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002750 <updateAnalogSensor+0x338>
 80024ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b6:	ee17 3a90 	vmov	r3, s15
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	4ba5      	ldr	r3, [pc, #660]	; (8002754 <updateAnalogSensor+0x33c>)
 80024be:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80024c0:	4ba0      	ldr	r3, [pc, #640]	; (8002744 <updateAnalogSensor+0x32c>)
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b9e      	ldr	r3, [pc, #632]	; (8002748 <updateAnalogSensor+0x330>)
 80024ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b9d      	ldr	r3, [pc, #628]	; (800274c <updateAnalogSensor+0x334>)
 80024d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002750 <updateAnalogSensor+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ec:	ee17 3a90 	vmov	r3, s15
 80024f0:	b21a      	sxth	r2, r3
 80024f2:	4b98      	ldr	r3, [pc, #608]	; (8002754 <updateAnalogSensor+0x33c>)
 80024f4:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80024f6:	4b93      	ldr	r3, [pc, #588]	; (8002744 <updateAnalogSensor+0x32c>)
 80024f8:	891b      	ldrh	r3, [r3, #8]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	4b91      	ldr	r3, [pc, #580]	; (8002748 <updateAnalogSensor+0x330>)
 8002504:	edd3 7a04 	vldr	s15, [r3, #16]
 8002508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250c:	4b8f      	ldr	r3, [pc, #572]	; (800274c <updateAnalogSensor+0x334>)
 800250e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002750 <updateAnalogSensor+0x338>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002522:	ee17 3a90 	vmov	r3, s15
 8002526:	b21a      	sxth	r2, r3
 8002528:	4b8a      	ldr	r3, [pc, #552]	; (8002754 <updateAnalogSensor+0x33c>)
 800252a:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800252c:	4b85      	ldr	r3, [pc, #532]	; (8002744 <updateAnalogSensor+0x32c>)
 800252e:	895b      	ldrh	r3, [r3, #10]
 8002530:	ee07 3a90 	vmov	s15, r3
 8002534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002538:	4b83      	ldr	r3, [pc, #524]	; (8002748 <updateAnalogSensor+0x330>)
 800253a:	edd3 7a05 	vldr	s15, [r3, #20]
 800253e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002542:	4b82      	ldr	r3, [pc, #520]	; (800274c <updateAnalogSensor+0x334>)
 8002544:	ed93 7a05 	vldr	s14, [r3, #20]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002750 <updateAnalogSensor+0x338>
 8002550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002558:	ee17 3a90 	vmov	r3, s15
 800255c:	b21a      	sxth	r2, r3
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <updateAnalogSensor+0x33c>)
 8002560:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <updateAnalogSensor+0x32c>)
 8002564:	899b      	ldrh	r3, [r3, #12]
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256e:	4b76      	ldr	r3, [pc, #472]	; (8002748 <updateAnalogSensor+0x330>)
 8002570:	edd3 7a06 	vldr	s15, [r3, #24]
 8002574:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002578:	4b74      	ldr	r3, [pc, #464]	; (800274c <updateAnalogSensor+0x334>)
 800257a:	ed93 7a06 	vldr	s14, [r3, #24]
 800257e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002582:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002750 <updateAnalogSensor+0x338>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258e:	ee17 3a90 	vmov	r3, s15
 8002592:	b21a      	sxth	r2, r3
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <updateAnalogSensor+0x33c>)
 8002596:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <updateAnalogSensor+0x32c>)
 800259a:	89db      	ldrh	r3, [r3, #14]
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a4:	4b68      	ldr	r3, [pc, #416]	; (8002748 <updateAnalogSensor+0x330>)
 80025a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80025aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <updateAnalogSensor+0x334>)
 80025b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80025b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025b8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002750 <updateAnalogSensor+0x338>
 80025bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c4:	ee17 3a90 	vmov	r3, s15
 80025c8:	b21a      	sxth	r2, r3
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <updateAnalogSensor+0x33c>)
 80025cc:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80025ce:	4b5d      	ldr	r3, [pc, #372]	; (8002744 <updateAnalogSensor+0x32c>)
 80025d0:	8a1b      	ldrh	r3, [r3, #16]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <updateAnalogSensor+0x330>)
 80025dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80025e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <updateAnalogSensor+0x334>)
 80025e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ee:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002750 <updateAnalogSensor+0x338>
 80025f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025fa:	ee17 3a90 	vmov	r3, s15
 80025fe:	b21a      	sxth	r2, r3
 8002600:	4b54      	ldr	r3, [pc, #336]	; (8002754 <updateAnalogSensor+0x33c>)
 8002602:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <updateAnalogSensor+0x32c>)
 8002606:	8a5b      	ldrh	r3, [r3, #18]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002610:	4b4d      	ldr	r3, [pc, #308]	; (8002748 <updateAnalogSensor+0x330>)
 8002612:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800261a:	4b4c      	ldr	r3, [pc, #304]	; (800274c <updateAnalogSensor+0x334>)
 800261c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002750 <updateAnalogSensor+0x338>
 8002628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800262c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002630:	ee17 3a90 	vmov	r3, s15
 8002634:	b21a      	sxth	r2, r3
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <updateAnalogSensor+0x33c>)
 8002638:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800263a:	4b42      	ldr	r3, [pc, #264]	; (8002744 <updateAnalogSensor+0x32c>)
 800263c:	8a9b      	ldrh	r3, [r3, #20]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <updateAnalogSensor+0x330>)
 8002648:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800264c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002650:	4b3e      	ldr	r3, [pc, #248]	; (800274c <updateAnalogSensor+0x334>)
 8002652:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002750 <updateAnalogSensor+0x338>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b21a      	sxth	r2, r3
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <updateAnalogSensor+0x33c>)
 800266e:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <updateAnalogSensor+0x32c>)
 8002672:	8adb      	ldrh	r3, [r3, #22]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267c:	4b32      	ldr	r3, [pc, #200]	; (8002748 <updateAnalogSensor+0x330>)
 800267e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <updateAnalogSensor+0x334>)
 8002688:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800268c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002690:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002750 <updateAnalogSensor+0x338>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800269c:	ee17 3a90 	vmov	r3, s15
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <updateAnalogSensor+0x33c>)
 80026a4:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80026a6:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <updateAnalogSensor+0x340>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b2a      	ldr	r3, [pc, #168]	; (8002758 <updateAnalogSensor+0x340>)
 80026b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a28      	ldr	r2, [pc, #160]	; (8002758 <updateAnalogSensor+0x340>)
 80026b8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <updateAnalogSensor+0x340>)
 80026c0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a24      	ldr	r2, [pc, #144]	; (8002758 <updateAnalogSensor+0x340>)
 80026c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026cc:	4413      	add	r3, r2
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <updateAnalogSensor+0x340>)
 80026d0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a20      	ldr	r2, [pc, #128]	; (8002758 <updateAnalogSensor+0x340>)
 80026d8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <updateAnalogSensor+0x340>)
 80026e0:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80026e4:	4413      	add	r3, r2
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <updateAnalogSensor+0x340>)
 80026e8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <updateAnalogSensor+0x340>)
 80026f0:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <updateAnalogSensor+0x344>)
 80026f8:	fb82 1203 	smull	r1, r2, r2, r3
 80026fc:	1092      	asrs	r2, r2, #2
 80026fe:	17db      	asrs	r3, r3, #31
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b21a      	sxth	r2, r3
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <updateAnalogSensor+0x348>)
 8002706:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <updateAnalogSensor+0x34c>)
 800270a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270e:	461a      	mov	r2, r3
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <updateAnalogSensor+0x34c>)
 8002712:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002716:	4413      	add	r3, r2
 8002718:	4a12      	ldr	r2, [pc, #72]	; (8002764 <updateAnalogSensor+0x34c>)
 800271a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800271e:	4413      	add	r3, r2
 8002720:	4a10      	ldr	r2, [pc, #64]	; (8002764 <updateAnalogSensor+0x34c>)
 8002722:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002726:	4413      	add	r3, r2
 8002728:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <updateAnalogSensor+0x34c>)
 800272a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800272e:	4413      	add	r3, r2
 8002730:	4a0c      	ldr	r2, [pc, #48]	; (8002764 <updateAnalogSensor+0x34c>)
 8002732:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002736:	4413      	add	r3, r2
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <updateAnalogSensor+0x34c>)
 800273a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800273e:	4413      	add	r3, r2
 8002740:	e012      	b.n	8002768 <updateAnalogSensor+0x350>
 8002742:	bf00      	nop
 8002744:	2000028c 	.word	0x2000028c
 8002748:	2001f3b0 	.word	0x2001f3b0
 800274c:	2001f414 	.word	0x2001f414
 8002750:	447a0000 	.word	0x447a0000
 8002754:	2001f3f0 	.word	0x2001f3f0
 8002758:	20000398 	.word	0x20000398
 800275c:	66666667 	.word	0x66666667
 8002760:	2001f394 	.word	0x2001f394
 8002764:	200003ac 	.word	0x200003ac
 8002768:	4a1f      	ldr	r2, [pc, #124]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800276a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800276e:	4413      	add	r3, r2
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <updateAnalogSensor+0x3d0>)
 8002772:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002776:	4413      	add	r3, r2
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <updateAnalogSensor+0x3d0>)
 800277a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800277e:	4413      	add	r3, r2
 8002780:	4a1a      	ldr	r2, [pc, #104]	; (80027ec <updateAnalogSensor+0x3d4>)
 8002782:	fb82 1203 	smull	r1, r2, r2, r3
 8002786:	1092      	asrs	r2, r2, #2
 8002788:	17db      	asrs	r3, r3, #31
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b21a      	sxth	r2, r3
 800278e:	4b18      	ldr	r3, [pc, #96]	; (80027f0 <updateAnalogSensor+0x3d8>)
 8002790:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	e01a      	b.n	80027ce <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <updateAnalogSensor+0x3dc>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a4:	db05      	blt.n	80027b2 <updateAnalogSensor+0x39a>
 80027a6:	4a13      	ldr	r2, [pc, #76]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 80027b2:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	dc04      	bgt.n	80027c8 <updateAnalogSensor+0x3b0>
 80027be:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <updateAnalogSensor+0x3dc>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2100      	movs	r1, #0
 80027c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3301      	adds	r3, #1
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b0b      	cmp	r3, #11
 80027d2:	dde1      	ble.n	8002798 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <updateAnalogSensor+0x3e0>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003ac 	.word	0x200003ac
 80027ec:	66666667 	.word	0x66666667
 80027f0:	2001f40c 	.word	0x2001f40c
 80027f4:	2001f3f0 	.word	0x2001f3f0
 80027f8:	20000030 	.word	0x20000030

080027fc <sensorCalibration>:

void sensorCalibration()
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a0      	sub	sp, #128	; 0x80
 8002800:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002802:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002806:	2230      	movs	r2, #48	; 0x30
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f008 fa61 	bl	800acd2 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002810:	f107 0310 	add.w	r3, r7, #16
 8002814:	2230      	movs	r2, #48	; 0x30
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f008 fa5a 	bl	800acd2 <memset>
 800281e:	4bd8      	ldr	r3, [pc, #864]	; (8002b80 <sensorCalibration+0x384>)
 8002820:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002822:	2300      	movs	r3, #0
 8002824:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002828:	e026      	b.n	8002878 <sensorCalibration+0x7c>
		max_values[i] = 00;
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	4ad5      	ldr	r2, [pc, #852]	; (8002b84 <sensorCalibration+0x388>)
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 800283a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800283e:	4ad2      	ldr	r2, [pc, #840]	; (8002b88 <sensorCalibration+0x38c>)
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	4ad1      	ldr	r2, [pc, #836]	; (8002b8c <sensorCalibration+0x390>)
 8002846:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002848:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002852:	4413      	add	r3, r2
 8002854:	3b40      	subs	r3, #64	; 0x40
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 800285c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002866:	4413      	add	r3, r2
 8002868:	3b70      	subs	r3, #112	; 0x70
 800286a:	4ac8      	ldr	r2, [pc, #800]	; (8002b8c <sensorCalibration+0x390>)
 800286c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800286e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002872:	3301      	adds	r3, #1
 8002874:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002878:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800287c:	2b0b      	cmp	r3, #11
 800287e:	d9d4      	bls.n	800282a <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002886:	e013      	b.n	80028b0 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002888:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800288c:	4ac0      	ldr	r2, [pc, #768]	; (8002b90 <sensorCalibration+0x394>)
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	4abd      	ldr	r2, [pc, #756]	; (8002b94 <sensorCalibration+0x398>)
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	4aba      	ldr	r2, [pc, #744]	; (8002b8c <sensorCalibration+0x390>)
 80028a4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80028a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d9e7      	bls.n	8002888 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 80028b8:	e0f5      	b.n	8002aa6 <sensorCalibration+0x2aa>

		setLED2('X');
 80028ba:	2058      	movs	r0, #88	; 0x58
 80028bc:	f7ff f862 	bl	8001984 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028c6:	e06e      	b.n	80029a6 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 80028c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028cc:	4ab2      	ldr	r2, [pc, #712]	; (8002b98 <sensorCalibration+0x39c>)
 80028ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028d2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028d6:	ee07 2a90 	vmov	s15, r2
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028e4:	4413      	add	r3, r2
 80028e6:	3b40      	subs	r3, #64	; 0x40
 80028e8:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 80028ec:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f0:	4aa9      	ldr	r2, [pc, #676]	; (8002b98 <sensorCalibration+0x39c>)
 80028f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80028f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028fa:	ee07 2a90 	vmov	s15, r2
 80028fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002908:	4413      	add	r3, r2
 800290a:	3b70      	subs	r3, #112	; 0x70
 800290c:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002910:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800291a:	4413      	add	r3, r2
 800291c:	3b40      	subs	r3, #64	; 0x40
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002926:	4a97      	ldr	r2, [pc, #604]	; (8002b84 <sensorCalibration+0x388>)
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	dd0d      	ble.n	8002956 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 800293a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800293e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002942:	0092      	lsls	r2, r2, #2
 8002944:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002948:	440a      	add	r2, r1
 800294a:	3a40      	subs	r2, #64	; 0x40
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	498d      	ldr	r1, [pc, #564]	; (8002b84 <sensorCalibration+0x388>)
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002960:	4413      	add	r3, r2
 8002962:	3b70      	subs	r3, #112	; 0x70
 8002964:	ed93 7a00 	vldr	s14, [r3]
 8002968:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296c:	4a86      	ldr	r2, [pc, #536]	; (8002b88 <sensorCalibration+0x38c>)
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d50d      	bpl.n	800299c <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002980:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002984:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002988:	0092      	lsls	r2, r2, #2
 800298a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800298e:	440a      	add	r2, r1
 8002990:	3a70      	subs	r2, #112	; 0x70
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	497c      	ldr	r1, [pc, #496]	; (8002b88 <sensorCalibration+0x38c>)
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800299c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029aa:	2b0b      	cmp	r3, #11
 80029ac:	d98c      	bls.n	80028c8 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b4:	e073      	b.n	8002a9e <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 80029b6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ba:	4a78      	ldr	r2, [pc, #480]	; (8002b9c <sensorCalibration+0x3a0>)
 80029bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029c0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c4:	ee07 2a90 	vmov	s15, r2
 80029c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029d2:	4413      	add	r3, r2
 80029d4:	3b78      	subs	r3, #120	; 0x78
 80029d6:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029de:	4a6f      	ldr	r2, [pc, #444]	; (8002b9c <sensorCalibration+0x3a0>)
 80029e0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80029e4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029e8:	ee07 2a90 	vmov	s15, r2
 80029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029f6:	4413      	add	r3, r2
 80029f8:	3b80      	subs	r3, #128	; 0x80
 80029fa:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 80029fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b78      	subs	r3, #120	; 0x78
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a14:	4a5e      	ldr	r2, [pc, #376]	; (8002b90 <sensorCalibration+0x394>)
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a26:	dd10      	ble.n	8002a4a <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002a28:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a2c:	4a5b      	ldr	r2, [pc, #364]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a32:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a36:	ee07 2a90 	vmov	s15, r2
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <sensorCalibration+0x394>)
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	edc3 7a00 	vstr	s15, [r3]
 8002a48:	e024      	b.n	8002a94 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002a4a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a54:	4413      	add	r3, r2
 8002a56:	3b80      	subs	r3, #128	; 0x80
 8002a58:	ed93 7a00 	vldr	s14, [r3]
 8002a5c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a60:	4a4c      	ldr	r2, [pc, #304]	; (8002b94 <sensorCalibration+0x398>)
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a72:	d50f      	bpl.n	8002a94 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002a74:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <sensorCalibration+0x3a0>)
 8002a7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a7e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a82:	ee07 2a90 	vmov	s15, r2
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	4a42      	ldr	r2, [pc, #264]	; (8002b94 <sensorCalibration+0x398>)
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a94:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d987      	bls.n	80029b6 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002aa6:	204c      	movs	r0, #76	; 0x4c
 8002aa8:	f003 fcce 	bl	8006448 <getSwitchStatus>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f43f af03 	beq.w	80028ba <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002aba:	e01b      	b.n	8002af4 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002abc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <sensorCalibration+0x388>)
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	ed93 7a00 	vldr	s14, [r3]
 8002aca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ace:	4a2e      	ldr	r2, [pc, #184]	; (8002b88 <sensorCalibration+0x38c>)
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002adc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <sensorCalibration+0x3a4>)
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002aea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002aee:	3301      	adds	r3, #1
 8002af0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002af4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002af8:	2b0b      	cmp	r3, #11
 8002afa:	d9df      	bls.n	8002abc <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b02:	e010      	b.n	8002b26 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002b04:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002b08:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b0c:	491e      	ldr	r1, [pc, #120]	; (8002b88 <sensorCalibration+0x38c>)
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	440a      	add	r2, r1
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	4923      	ldr	r1, [pc, #140]	; (8002ba4 <sensorCalibration+0x3a8>)
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b1c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002b26:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002b2a:	2b0b      	cmp	r3, #11
 8002b2c:	d9ea      	bls.n	8002b04 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b34:	e01b      	b.n	8002b6e <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002b36:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <sensorCalibration+0x394>)
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	ed93 7a00 	vldr	s14, [r3]
 8002b44:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <sensorCalibration+0x398>)
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5a:	4a13      	ldr	r2, [pc, #76]	; (8002ba8 <sensorCalibration+0x3ac>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b64:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002b6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d9df      	bls.n	8002b36 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002b7c:	e027      	b.n	8002bce <sensorCalibration+0x3d2>
 8002b7e:	bf00      	nop
 8002b80:	447a0000 	.word	0x447a0000
 8002b84:	2001f570 	.word	0x2001f570
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	44bb8000 	.word	0x44bb8000
 8002b90:	2001f520 	.word	0x2001f520
 8002b94:	2001f5a0 	.word	0x2001f5a0
 8002b98:	2000028c 	.word	0x2000028c
 8002b9c:	200002a4 	.word	0x200002a4
 8002ba0:	2001f414 	.word	0x2001f414
 8002ba4:	2001f3b0 	.word	0x2001f3b0
 8002ba8:	2001f3e8 	.word	0x2001f3e8
		side_offset_values[i] = side_min_values[i];
 8002bac:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002bb0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bb4:	490a      	ldr	r1, [pc, #40]	; (8002be0 <sensorCalibration+0x3e4>)
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	440a      	add	r2, r1
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	4909      	ldr	r1, [pc, #36]	; (8002be4 <sensorCalibration+0x3e8>)
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bc8:	3301      	adds	r3, #1
 8002bca:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002bce:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d9ea      	bls.n	8002bac <sensorCalibration+0x3b0>
	}
}
 8002bd6:	bf00      	nop
 8002bd8:	3780      	adds	r7, #128	; 0x80
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2001f5a0 	.word	0x2001f5a0
 8002be4:	2001f3a8 	.word	0x2001f3a8

08002be8 <initLog>:
static float log_debug[12000];
static float log_distance[6000];
static float log_theta[6000];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <initLog+0x60>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <initLog+0x64>)
 8002bf2:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <initLog+0x68>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a16      	ldr	r2, [pc, #88]	; (8002c54 <initLog+0x6c>)
 8002bfa:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <initLog+0x70>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <initLog+0x74>)
 8002c02:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <initLog+0x78>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <initLog+0x7c>)
 8002c0a:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <initLog+0x80>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a16      	ldr	r2, [pc, #88]	; (8002c6c <initLog+0x84>)
 8002c12:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <initLog+0x60>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	; (8002c70 <initLog+0x88>)
 8002c1a:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <initLog+0x68>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a14      	ldr	r2, [pc, #80]	; (8002c74 <initLog+0x8c>)
 8002c22:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <initLog+0x70>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <initLog+0x90>)
 8002c2a:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <initLog+0x78>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a12      	ldr	r2, [pc, #72]	; (8002c7c <initLog+0x94>)
 8002c32:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <initLog+0x80>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <initLog+0x98>)
 8002c3a:	6013      	str	r3, [r2, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	0800f1ac 	.word	0x0800f1ac
 8002c4c:	2001f390 	.word	0x2001f390
 8002c50:	0800f1b0 	.word	0x0800f1b0
 8002c54:	2001f3e4 	.word	0x2001f3e4
 8002c58:	0800f1b4 	.word	0x0800f1b4
 8002c5c:	2001f3a0 	.word	0x2001f3a0
 8002c60:	0800f1b8 	.word	0x0800f1b8
 8002c64:	2001f38c 	.word	0x2001f38c
 8002c68:	0800f1bc 	.word	0x0800f1bc
 8002c6c:	2001f39c 	.word	0x2001f39c
 8002c70:	2001f398 	.word	0x2001f398
 8002c74:	2001f3a4 	.word	0x2001f3a4
 8002c78:	2001f410 	.word	0x2001f410
 8002c7c:	2001f408 	.word	0x2001f408
 8002c80:	2001f3e0 	.word	0x2001f3e0

08002c84 <saveDistance>:

void saveDistance(float distance){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <saveDistance+0x2c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	ed97 0a01 	vldr	s0, [r7, #4]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc68 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <saveDistance+0x2c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	4a03      	ldr	r2, [pc, #12]	; (8002cb0 <saveDistance+0x2c>)
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	2001f390 	.word	0x2001f390

08002cb4 <saveTheta>:

void saveTheta(float theta){
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <saveTheta+0x2c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe fc50 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <saveTheta+0x2c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <saveTheta+0x2c>)
 8002cd4:	6013      	str	r3, [r2, #0]
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2001f3e4 	.word	0x2001f3e4

08002ce4 <saveCross>:

void saveCross(float cross){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <saveCross+0x2c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fc38 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <saveCross+0x2c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4a03      	ldr	r2, [pc, #12]	; (8002d10 <saveCross+0x2c>)
 8002d04:	6013      	str	r3, [r2, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	2001f3a0 	.word	0x2001f3a0

08002d14 <saveSide>:

void saveSide(float side){
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <saveSide+0x2c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fc20 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <saveSide+0x2c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3304      	adds	r3, #4
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <saveSide+0x2c>)
 8002d34:	6013      	str	r3, [r2, #0]
}
 8002d36:	bf00      	nop
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	2001f38c 	.word	0x2001f38c

08002d44 <saveDebug>:

void saveDebug(float value){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <saveDebug+0x2c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fe fc08 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <saveDebug+0x2c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	3304      	adds	r3, #4
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <saveDebug+0x2c>)
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2001f39c 	.word	0x2001f39c

08002d74 <ereaseLog>:


void ereaseLog(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002d78:	2007      	movs	r0, #7
 8002d7a:	f7fe fbd7 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002d7e:	2008      	movs	r0, #8
 8002d80:	f7fe fbd4 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002d84:	2009      	movs	r0, #9
 8002d86:	f7fe fbd1 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002d8a:	200a      	movs	r0, #10
 8002d8c:	f7fe fbce 	bl	800152c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002d90:	200b      	movs	r0, #11
 8002d92:	f7fe fbcb 	bl	800152c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <ereaseLog+0x50>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <ereaseLog+0x54>)
 8002d9c:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <ereaseLog+0x58>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <ereaseLog+0x5c>)
 8002da4:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <ereaseLog+0x60>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a0b      	ldr	r2, [pc, #44]	; (8002dd8 <ereaseLog+0x64>)
 8002dac:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002dae:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <ereaseLog+0x68>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0b      	ldr	r2, [pc, #44]	; (8002de0 <ereaseLog+0x6c>)
 8002db4:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <ereaseLog+0x70>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <ereaseLog+0x74>)
 8002dbc:	6013      	str	r3, [r2, #0]
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	0800f1ac 	.word	0x0800f1ac
 8002dc8:	2001f390 	.word	0x2001f390
 8002dcc:	0800f1b0 	.word	0x0800f1b0
 8002dd0:	2001f3e4 	.word	0x2001f3e4
 8002dd4:	0800f1b4 	.word	0x0800f1b4
 8002dd8:	2001f3a0 	.word	0x2001f3a0
 8002ddc:	0800f1b8 	.word	0x0800f1b8
 8002de0:	2001f38c 	.word	0x2001f38c
 8002de4:	0800f1bc 	.word	0x0800f1bc
 8002de8:	2001f39c 	.word	0x2001f39c

08002dec <ereaseDebugLog>:

void ereaseDebugLog(){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002df0:	200b      	movs	r0, #11
 8002df2:	f7fe fb9b 	bl	800152c <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8002df6:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <ereaseDebugLog+0x18>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <ereaseDebugLog+0x1c>)
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	0800f1bc 	.word	0x0800f1bc
 8002e08:	2001f39c 	.word	0x2001f39c

08002e0c <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <getDistanceLogSize+0x14>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20017de0 	.word	0x20017de0

08002e24 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <getCrossLogSize+0x14>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20017de4 	.word	0x20017de4

08002e3c <getSideLogSize>:

uint16_t getSideLogSize(){
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <getSideLogSize+0x14>)
 8002e42:	881b      	ldrh	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20017de6 	.word	0x20017de6

08002e54 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <getDebugLogSize+0x14>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20017de8 	.word	0x20017de8

08002e6c <loadDistance>:


void loadDistance(){
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <loadDistance+0x6c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <loadDistance+0x70>)
 8002e7c:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <loadDistance+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <loadDistance+0x70>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4915      	ldr	r1, [pc, #84]	; (8002ee4 <loadDistance+0x78>)
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <loadDistance+0x78>)
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	edd3 7a00 	vldr	s15, [r3]
 8002ea2:	eef4 7a67 	vcmp.f32	s15, s15
 8002ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eaa:	d60e      	bvs.n	8002eca <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8002eac:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <loadDistance+0x74>)
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <loadDistance+0x74>)
 8002eb6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <loadDistance+0x70>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4a07      	ldr	r2, [pc, #28]	; (8002edc <loadDistance+0x70>)
 8002ec0:	6013      	str	r3, [r2, #0]
		i++;
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8002ec8:	e7dc      	b.n	8002e84 <loadDistance+0x18>
			break;
 8002eca:	bf00      	nop
	}
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	0800f1ac 	.word	0x0800f1ac
 8002edc:	2001f398 	.word	0x2001f398
 8002ee0:	20017de0 	.word	0x20017de0
 8002ee4:	2000c260 	.word	0x2000c260

08002ee8 <loadTheta>:

void loadTheta(){
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <loadTheta+0x6c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <loadTheta+0x70>)
 8002ef8:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <loadTheta+0x74>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <loadTheta+0x70>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	4915      	ldr	r1, [pc, #84]	; (8002f60 <loadTheta+0x78>)
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <loadTheta+0x78>)
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	edd3 7a00 	vldr	s15, [r3]
 8002f1e:	eef4 7a67 	vcmp.f32	s15, s15
 8002f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f26:	d60e      	bvs.n	8002f46 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <loadTheta+0x74>)
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <loadTheta+0x74>)
 8002f32:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <loadTheta+0x70>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4a07      	ldr	r2, [pc, #28]	; (8002f58 <loadTheta+0x70>)
 8002f3c:	6013      	str	r3, [r2, #0]
		i++;
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	3301      	adds	r3, #1
 8002f42:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8002f44:	e7dc      	b.n	8002f00 <loadTheta+0x18>
			break;
 8002f46:	bf00      	nop
	}
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	0800f1b0 	.word	0x0800f1b0
 8002f58:	2001f3a4 	.word	0x2001f3a4
 8002f5c:	20017de2 	.word	0x20017de2
 8002f60:	20012020 	.word	0x20012020

08002f64 <loadCross>:

void loadCross(){
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 8002f6e:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <loadCross+0x6c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <loadCross+0x70>)
 8002f74:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <loadCross+0x74>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8002f7c:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <loadCross+0x70>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	4915      	ldr	r1, [pc, #84]	; (8002fdc <loadCross+0x78>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4a12      	ldr	r2, [pc, #72]	; (8002fdc <loadCross+0x78>)
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	eef4 7a67 	vcmp.f32	s15, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d60e      	bvs.n	8002fc2 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <loadCross+0x74>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <loadCross+0x74>)
 8002fae:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <loadCross+0x70>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <loadCross+0x70>)
 8002fb8:	6013      	str	r3, [r2, #0]
		i++;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8002fc0:	e7dc      	b.n	8002f7c <loadCross+0x18>
			break;
 8002fc2:	bf00      	nop
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	0800f1b4 	.word	0x0800f1b4
 8002fd4:	2001f410 	.word	0x2001f410
 8002fd8:	20017de4 	.word	0x20017de4
 8002fdc:	200003c0 	.word	0x200003c0

08002fe0 <loadSide>:

void loadSide(){
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <loadSide+0x6c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <loadSide+0x70>)
 8002ff0:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <loadSide+0x74>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	; (8003050 <loadSide+0x70>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	4915      	ldr	r1, [pc, #84]	; (8003058 <loadSide+0x78>)
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <loadSide+0x78>)
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	edd3 7a00 	vldr	s15, [r3]
 8003016:	eef4 7a67 	vcmp.f32	s15, s15
 800301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301e:	d60e      	bvs.n	800303e <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <loadSide+0x74>)
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <loadSide+0x74>)
 800302a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 800302c:	4b08      	ldr	r3, [pc, #32]	; (8003050 <loadSide+0x70>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3304      	adds	r3, #4
 8003032:	4a07      	ldr	r2, [pc, #28]	; (8003050 <loadSide+0x70>)
 8003034:	6013      	str	r3, [r2, #0]
		i++;
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	3301      	adds	r3, #1
 800303a:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 800303c:	e7dc      	b.n	8002ff8 <loadSide+0x18>
			break;
 800303e:	bf00      	nop
	}
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	0800f1b8 	.word	0x0800f1b8
 8003050:	2001f408 	.word	0x2001f408
 8003054:	20017de6 	.word	0x20017de6
 8003058:	20000550 	.word	0x20000550

0800305c <loadDebug>:

void loadDebug(){
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <loadDebug+0x6c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <loadDebug+0x70>)
 800306c:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <loadDebug+0x74>)
 8003070:	2200      	movs	r2, #0
 8003072:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003074:	4b15      	ldr	r3, [pc, #84]	; (80030cc <loadDebug+0x70>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	4915      	ldr	r1, [pc, #84]	; (80030d4 <loadDebug+0x78>)
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <loadDebug+0x78>)
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	eef4 7a67 	vcmp.f32	s15, s15
 8003096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800309a:	d60e      	bvs.n	80030ba <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 800309c:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <loadDebug+0x74>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <loadDebug+0x74>)
 80030a6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <loadDebug+0x70>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3304      	adds	r3, #4
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <loadDebug+0x70>)
 80030b0:	6013      	str	r3, [r2, #0]
		i++;
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	3301      	adds	r3, #1
 80030b6:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80030b8:	e7dc      	b.n	8003074 <loadDebug+0x18>
			break;
 80030ba:	bf00      	nop
	}
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	0800f1bc 	.word	0x0800f1bc
 80030cc:	2001f3e0 	.word	0x2001f3e0
 80030d0:	20017de8 	.word	0x20017de8
 80030d4:	200006e0 	.word	0x200006e0

080030d8 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
	return log_distance;
 80030dc:	4b02      	ldr	r3, [pc, #8]	; (80030e8 <getDistanceArrayPointer+0x10>)
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	2000c260 	.word	0x2000c260

080030ec <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
	return log_theta;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <getThetaArrayPointer+0x10>)
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20012020 	.word	0x20012020

08003100 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4a06      	ldr	r2, [pc, #24]	; (8003128 <getDistanceLog+0x28>)
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	ee07 3a90 	vmov	s15, r3
}
 8003118:	eeb0 0a67 	vmov.f32	s0, s15
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	2000c260 	.word	0x2000c260

0800312c <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	4a06      	ldr	r2, [pc, #24]	; (8003154 <getCrossLog+0x28>)
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ee07 3a90 	vmov	s15, r3
}
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	200003c0 	.word	0x200003c0

08003158 <getSideLog>:

float getSideLog(uint16_t idx){
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4a06      	ldr	r2, [pc, #24]	; (8003180 <getSideLog+0x28>)
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	ee07 3a90 	vmov	s15, r3
}
 8003170:	eeb0 0a67 	vmov.f32	s0, s15
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000550 	.word	0x20000550

08003184 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	4a06      	ldr	r2, [pc, #24]	; (80031ac <getDebugLog+0x28>)
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	ee07 3a90 	vmov	s15, r3
}
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	200006e0 	.word	0x200006e0

080031b0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80031c4:	2200      	movs	r2, #0
 80031c6:	2104      	movs	r1, #4
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <read_byte+0x50>)
 80031ca:	f004 feef 	bl	8007fac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80031ce:	f107 010f 	add.w	r1, r7, #15
 80031d2:	2364      	movs	r3, #100	; 0x64
 80031d4:	2201      	movs	r2, #1
 80031d6:	480b      	ldr	r0, [pc, #44]	; (8003204 <read_byte+0x54>)
 80031d8:	f005 fcda 	bl	8008b90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80031dc:	f107 010e 	add.w	r1, r7, #14
 80031e0:	2364      	movs	r3, #100	; 0x64
 80031e2:	2201      	movs	r2, #1
 80031e4:	4807      	ldr	r0, [pc, #28]	; (8003204 <read_byte+0x54>)
 80031e6:	f005 fe07 	bl	8008df8 <HAL_SPI_Receive>
		CS_SET;
 80031ea:	2201      	movs	r2, #1
 80031ec:	2104      	movs	r1, #4
 80031ee:	4804      	ldr	r0, [pc, #16]	; (8003200 <read_byte+0x50>)
 80031f0:	f004 fedc 	bl	8007fac <HAL_GPIO_WritePin>

	return val;
 80031f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40020c00 	.word	0x40020c00
 8003204:	2001f66c 	.word	0x2001f66c

08003208 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	460a      	mov	r2, r1
 8003212:	71fb      	strb	r3, [r7, #7]
 8003214:	4613      	mov	r3, r2
 8003216:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321e:	b2db      	uxtb	r3, r3
 8003220:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003222:	2200      	movs	r2, #0
 8003224:	2104      	movs	r1, #4
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <write_byte+0x50>)
 8003228:	f004 fec0 	bl	8007fac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800322c:	f107 010f 	add.w	r1, r7, #15
 8003230:	2364      	movs	r3, #100	; 0x64
 8003232:	2201      	movs	r2, #1
 8003234:	4809      	ldr	r0, [pc, #36]	; (800325c <write_byte+0x54>)
 8003236:	f005 fcab 	bl	8008b90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800323a:	1db9      	adds	r1, r7, #6
 800323c:	2364      	movs	r3, #100	; 0x64
 800323e:	2201      	movs	r2, #1
 8003240:	4806      	ldr	r0, [pc, #24]	; (800325c <write_byte+0x54>)
 8003242:	f005 fdd9 	bl	8008df8 <HAL_SPI_Receive>
	CS_SET;
 8003246:	2201      	movs	r2, #1
 8003248:	2104      	movs	r1, #4
 800324a:	4803      	ldr	r0, [pc, #12]	; (8003258 <write_byte+0x50>)
 800324c:	f004 feae 	bl	8007fac <HAL_GPIO_WritePin>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40020c00 	.word	0x40020c00
 800325c:	2001f66c 	.word	0x2001f66c

08003260 <IMU_init>:

uint8_t IMU_init() {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800326a:	2075      	movs	r0, #117	; 0x75
 800326c:	f7ff ffa0 	bl	80031b0 <read_byte>
 8003270:	4603      	mov	r3, r0
 8003272:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	2b70      	cmp	r3, #112	; 0x70
 8003278:	d110      	bne.n	800329c <IMU_init+0x3c>
		ret = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800327e:	2100      	movs	r1, #0
 8003280:	206b      	movs	r0, #107	; 0x6b
 8003282:	f7ff ffc1 	bl	8003208 <write_byte>
		HAL_Delay(100);
 8003286:	2064      	movs	r0, #100	; 0x64
 8003288:	f003 fa5e 	bl	8006748 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800328c:	2100      	movs	r1, #0
 800328e:	201a      	movs	r0, #26
 8003290:	f7ff ffba 	bl	8003208 <write_byte>
		write_byte(0x1B, 0x18);
 8003294:	2118      	movs	r1, #24
 8003296:	201b      	movs	r0, #27
 8003298:	f7ff ffb6 	bl	8003208 <write_byte>
	}
	return ret;
 800329c:	79fb      	ldrb	r3, [r7, #7]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <read_gyro_data>:

void read_gyro_data() {
 80032a8:	b598      	push	{r3, r4, r7, lr}
 80032aa:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80032ac:	2047      	movs	r0, #71	; 0x47
 80032ae:	f7ff ff7f 	bl	80031b0 <read_byte>
 80032b2:	4603      	mov	r3, r0
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	b21c      	sxth	r4, r3
 80032b8:	2048      	movs	r0, #72	; 0x48
 80032ba:	f7ff ff79 	bl	80031b0 <read_byte>
 80032be:	4603      	mov	r3, r0
 80032c0:	b21b      	sxth	r3, r3
 80032c2:	4323      	orrs	r3, r4
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	4b02      	ldr	r3, [pc, #8]	; (80032d0 <read_gyro_data+0x28>)
 80032c8:	801a      	strh	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	bd98      	pop	{r3, r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2001f5a8 	.word	0x2001f5a8
 80032d4:	00000000 	.word	0x00000000

080032d8 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1550, ki = 20000, kd = 0.0;
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <calculateVelocityControlFlip+0x120>)
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	4b46      	ldr	r3, [pc, #280]	; (80033fc <calculateVelocityControlFlip+0x124>)
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80032ec:	f04f 0300 	mov.w	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80032f2:	f000 f8fd 	bl	80034f0 <getCurrentVelocity>
 80032f6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <calculateVelocityControlFlip+0x128>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d170      	bne.n	80033e4 <calculateVelocityControlFlip+0x10c>
		if(i_clear_flag == 1){
 8003302:	4b40      	ldr	r3, [pc, #256]	; (8003404 <calculateVelocityControlFlip+0x12c>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <calculateVelocityControlFlip+0x40>
			i = 0;
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <calculateVelocityControlFlip+0x130>)
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003312:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <calculateVelocityControlFlip+0x12c>)
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003318:	f000 f8b8 	bl	800348c <setvariablespeed>
 800331c:	eeb0 7a40 	vmov.f32	s14, s0
 8003320:	edd7 7a03 	vldr	s15, [r7, #12]
 8003324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003328:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 800332c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003330:	edd7 7a04 	vldr	s15, [r7, #16]
 8003334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003338:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <calculateVelocityControlFlip+0x130>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	4604      	mov	r4, r0
 8003348:	460d      	mov	r5, r1
 800334a:	ed97 7a06 	vldr	s14, [r7, #24]
 800334e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	ee17 0a90 	vmov	r0, s15
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	a324      	add	r3, pc, #144	; (adr r3, 80033f0 <calculateVelocityControlFlip+0x118>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f948 	bl	80005f8 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f7fc ff8c 	bl	800028c <__adddf3>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	4618      	mov	r0, r3
 800337a:	4621      	mov	r1, r4
 800337c:	f7fd fc34 	bl	8000be8 <__aeabi_d2f>
 8003380:	4602      	mov	r2, r0
 8003382:	4b21      	ldr	r3, [pc, #132]	; (8003408 <calculateVelocityControlFlip+0x130>)
 8003384:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		mon_p = p;
 8003386:	4a21      	ldr	r2, [pc, #132]	; (800340c <calculateVelocityControlFlip+0x134>)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6013      	str	r3, [r2, #0]
		mon_i = i;
 800338c:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <calculateVelocityControlFlip+0x130>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <calculateVelocityControlFlip+0x138>)
 8003392:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		if(mode == 1){
 8003394:	4b1f      	ldr	r3, [pc, #124]	; (8003414 <calculateVelocityControlFlip+0x13c>)
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10e      	bne.n	80033ba <calculateVelocityControlFlip+0xe2>
		    velocity_control_term = p + i + d;
 800339c:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <calculateVelocityControlFlip+0x130>)
 800339e:	ed93 7a00 	vldr	s14, [r3]
 80033a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b2:	4b19      	ldr	r3, [pc, #100]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80033b4:	edc3 7a00 	vstr	s15, [r3]
 80033b8:	e011      	b.n	80033de <calculateVelocityControlFlip+0x106>
		}
		else if(mode == 2){
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <calculateVelocityControlFlip+0x13c>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d10d      	bne.n	80033de <calculateVelocityControlFlip+0x106>
			//velocity_control_term = p + i + d + target_acceleration;
			velocity_control_term = p + i + d;
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <calculateVelocityControlFlip+0x130>)
 80033c4:	ed93 7a00 	vldr	s14, [r3]
 80033c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <calculateVelocityControlFlip+0x140>)
 80033da:	edc3 7a00 	vstr	s15, [r3]
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80033de:	4a0f      	ldr	r2, [pc, #60]	; (800341c <calculateVelocityControlFlip+0x144>)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6013      	str	r3, [r2, #0]

	}

}
 80033e4:	bf00      	nop
 80033e6:	3720      	adds	r7, #32
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bdb0      	pop	{r4, r5, r7, pc}
 80033ec:	f3af 8000 	nop.w
 80033f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033f4:	3f50624d 	.word	0x3f50624d
 80033f8:	44c1c000 	.word	0x44c1c000
 80033fc:	469c4000 	.word	0x469c4000
 8003400:	20017dea 	.word	0x20017dea
 8003404:	20017deb 	.word	0x20017deb
 8003408:	20017dfc 	.word	0x20017dfc
 800340c:	2001f5c4 	.word	0x2001f5c4
 8003410:	2001f5bc 	.word	0x2001f5bc
 8003414:	2001f5b4 	.word	0x2001f5b4
 8003418:	20017dec 	.word	0x20017dec
 800341c:	20017e00 	.word	0x20017e00

08003420 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <getVelocityControlTerm+0x18>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	ee07 3a90 	vmov	s15, r3
}
 800342c:	eeb0 0a67 	vmov.f32	s0, s15
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	20017dec 	.word	0x20017dec

0800343c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003446:	4a04      	ldr	r2, [pc, #16]	; (8003458 <setTargetVelocity+0x1c>)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	20017df0 	.word	0x20017df0

0800345c <setTargetAcceleration>:

void setTargetAcceleration(float acceleration)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	ed87 0a01 	vstr	s0, [r7, #4]
	target_acceleration = acceleration / 10000;
 8003466:	ed97 7a01 	vldr	s14, [r7, #4]
 800346a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8003484 <setTargetAcceleration+0x28>
 800346e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <setTargetAcceleration+0x2c>)
 8003474:	edc3 7a00 	vstr	s15, [r3]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	461c4000 	.word	0x461c4000
 8003488:	20017df4 	.word	0x20017df4

0800348c <setvariablespeed>:

float setvariablespeed(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003490:	f7fd ffd6 	bl	8001440 <getspeedcount>
 8003494:	eeb0 7a40 	vmov.f32	s14, s0
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <setvariablespeed+0x5c>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a6:	db04      	blt.n	80034b2 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <setvariablespeed+0x5c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <setvariablespeed+0x60>)
 80034ae:	6013      	str	r3, [r2, #0]
 80034b0:	e012      	b.n	80034d8 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 80034b2:	f7fd ffc5 	bl	8001440 <getspeedcount>
 80034b6:	eeb0 7a40 	vmov.f32	s14, s0
 80034ba:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <setvariablespeed+0x5c>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	d506      	bpl.n	80034d8 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 80034ca:	f7fd ffb9 	bl	8001440 <getspeedcount>
 80034ce:	eef0 7a40 	vmov.f32	s15, s0
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <setvariablespeed+0x60>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <setvariablespeed+0x60>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	ee07 3a90 	vmov	s15, r3
}
 80034e0:	eeb0 0a67 	vmov.f32	s0, s15
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20017df0 	.word	0x20017df0
 80034ec:	20017df8 	.word	0x20017df8

080034f0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	80fb      	strh	r3, [r7, #6]
 80034fa:	2300      	movs	r3, #0
 80034fc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80034fe:	1d3a      	adds	r2, r7, #4
 8003500:	1dbb      	adds	r3, r7, #6
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fed7 	bl	80012b8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 800350a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800350e:	461a      	mov	r2, r3
 8003510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	0fda      	lsrs	r2, r3, #31
 8003518:	4413      	add	r3, r2
 800351a:	105b      	asrs	r3, r3, #1
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003524:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7fd f80d 	bl	8000548 <__aeabi_f2d>
 800352e:	a30d      	add	r3, pc, #52	; (adr r3, 8003564 <getCurrentVelocity+0x74>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f860 	bl	80005f8 <__aeabi_dmul>
 8003538:	4603      	mov	r3, r0
 800353a:	460c      	mov	r4, r1
 800353c:	4618      	mov	r0, r3
 800353e:	4621      	mov	r1, r4
 8003540:	f7fd fb52 	bl	8000be8 <__aeabi_d2f>
 8003544:	4603      	mov	r3, r0
 8003546:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003548:	4a05      	ldr	r2, [pc, #20]	; (8003560 <getCurrentVelocity+0x70>)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	ee07 3a90 	vmov	s15, r3
}
 8003554:	eeb0 0a67 	vmov.f32	s0, s15
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	2001f5b8 	.word	0x2001f5b8
 8003564:	31e7b585 	.word	0x31e7b585
 8003568:	3f8e28c7 	.word	0x3f8e28c7

0800356c <getTargetVelocity>:

float getTargetVelocity()
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003570:	4b04      	ldr	r3, [pc, #16]	; (8003584 <getTargetVelocity+0x18>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	ee07 3a90 	vmov	s15, r3
}
 8003578:	eeb0 0a67 	vmov.f32	s0, s15
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	20017df0 	.word	0x20017df0

08003588 <startVelocityControl>:

void startVelocityControl(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <startVelocityControl+0x1c>)
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003592:	4b05      	ldr	r3, [pc, #20]	; (80035a8 <startVelocityControl+0x20>)
 8003594:	2201      	movs	r2, #1
 8003596:	701a      	strb	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	20017dea 	.word	0x20017dea
 80035a8:	20017deb 	.word	0x20017deb

080035ac <stopVelocityControl>:

void stopVelocityControl(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <stopVelocityControl+0x14>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	20017dea 	.word	0x20017dea

080035c4 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <setClearFlagOfVelocityControlI+0x14>)
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	20017deb 	.word	0x20017deb

080035dc <setrunmode>:

void setrunmode(uint16_t num){
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	80fb      	strh	r3, [r7, #6]
	mode = num;
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <setrunmode+0x1c>)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	8013      	strh	r3, [r2, #0]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	2001f5b4 	.word	0x2001f5b4

080035fc <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003604:	1d39      	adds	r1, r7, #4
 8003606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800360a:	2201      	movs	r2, #1
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <__io_putchar+0x20>)
 800360e:	f006 fecc 	bl	800a3aa <HAL_UART_Transmit>
	return ch;
 8003612:	687b      	ldr	r3, [r7, #4]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	2001f6c4 	.word	0x2001f6c4

08003620 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d121      	bne.n	8003676 <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800363a:	6013      	str	r3, [r2, #0]
      timer2++;
 800363c:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003644:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003646:	f7fd fd6b 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 800364a:	f7fd ffc9 	bl	80015e0 <updateIMUValue>
      updateAnalogSensor();
 800364e:	f7fe fee3 	bl	8002418 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003652:	f7fe fae1 	bl	8001c18 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003656:	f7ff fe3f 	bl	80032d8 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 800365a:	f7fd fc95 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 800365e:	f7fe fb89 	bl	8001d74 <lineTraceFlip>
      runningFlip();
 8003662:	f001 fb9b 	bl	8004d9c <runningFlip>
      motorCtrlFlip();
 8003666:	f001 f8c7 	bl	80047f8 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 800366a:	f001 f929 	bl	80048c0 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 800366e:	f001 f995 	bl	800499c <updateSideSensorStatus>

      checkCourseOut();
 8003672:	f7fe fc57 	bl	8001f24 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d106      	bne.n	800368e <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003688:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 800368a:	f7fe fccf 	bl	800202c <storeAnalogSensorBuffer>

   }
}
 800368e:	bf00      	nop
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40001000 	.word	0x40001000
 800369c:	2001f5c8 	.word	0x2001f5c8
 80036a0:	2001f610 	.word	0x2001f610
 80036a4:	40001400 	.word	0x40001400
 80036a8:	2001f7e8 	.word	0x2001f7e8

080036ac <init>:

void init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	  initADC();
 80036b0:	f7fe fca6 	bl	8002000 <initADC>
	  initEncoder();
 80036b4:	f7fd fd16 	bl	80010e4 <initEncoder>
	  initLog();
 80036b8:	f7ff fa96 	bl	8002be8 <initLog>
	  initGyro();
 80036bc:	f7fd ff80 	bl	80015c0 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <init+0x3c>)
 80036c2:	f005 ff80 	bl	80095c6 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 80036c6:	4809      	ldr	r0, [pc, #36]	; (80036ec <init+0x40>)
 80036c8:	f005 ff7d 	bl	80095c6 <HAL_TIM_Base_Start_IT>

	  initMotor();
 80036cc:	f001 f87c 	bl	80047c8 <initMotor>

	  setLED('R');
 80036d0:	2052      	movs	r0, #82	; 0x52
 80036d2:	f7fe f889 	bl	80017e8 <setLED>

	  sensorCalibration();
 80036d6:	f7ff f891 	bl	80027fc <sensorCalibration>

	  HAL_Delay(1000);
 80036da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036de:	f003 f833 	bl	8006748 <HAL_Delay>

}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2001f764 	.word	0x2001f764
 80036ec:	2001f84c 	.word	0x2001f84c

080036f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036f6:	f002 ffb5 	bl	8006664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036fa:	f000 fb13 	bl	8003d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036fe:	f000 ffa1 	bl	8004644 <MX_GPIO_Init>
  MX_DMA_Init();
 8003702:	f000 ff77 	bl	80045f4 <MX_DMA_Init>
  MX_TIM1_Init();
 8003706:	f000 fd27 	bl	8004158 <MX_TIM1_Init>
  MX_TIM3_Init();
 800370a:	f000 fda7 	bl	800425c <MX_TIM3_Init>
  MX_TIM4_Init();
 800370e:	f000 fdf9 	bl	8004304 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003712:	f000 feb5 	bl	8004480 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003716:	f000 fb6f 	bl	8003df8 <MX_ADC1_Init>
  MX_I2C1_Init();
 800371a:	f000 fcb9 	bl	8004090 <MX_I2C1_Init>
  MX_SPI3_Init();
 800371e:	f000 fce5 	bl	80040ec <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003722:	f000 ff3d 	bl	80045a0 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003726:	f000 fe41 	bl	80043ac <MX_TIM6_Init>
  MX_TIM7_Init();
 800372a:	f000 fe75 	bl	8004418 <MX_TIM7_Init>
  MX_ADC2_Init();
 800372e:	f000 fbc3 	bl	8003eb8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003732:	f7ff ffbb 	bl	80036ac <init>

  bool running_flag = false;
 8003736:	2300      	movs	r3, #0
 8003738:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 800373a:	204c      	movs	r0, #76	; 0x4c
 800373c:	f002 fe84 	bl	8006448 <getSwitchStatus>
 8003740:	4603      	mov	r3, r0
 8003742:	2b01      	cmp	r3, #1
 8003744:	d109      	bne.n	800375a <main+0x6a>
 8003746:	4bc5      	ldr	r3, [pc, #788]	; (8003a5c <main+0x36c>)
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d105      	bne.n	800375a <main+0x6a>
		  timer = 0;
 800374e:	4bc4      	ldr	r3, [pc, #784]	; (8003a60 <main+0x370>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003754:	4bc1      	ldr	r3, [pc, #772]	; (8003a5c <main+0x36c>)
 8003756:	2201      	movs	r2, #1
 8003758:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 800375a:	204c      	movs	r0, #76	; 0x4c
 800375c:	f002 fe74 	bl	8006448 <getSwitchStatus>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	d10a      	bne.n	800377c <main+0x8c>
 8003766:	4bbe      	ldr	r3, [pc, #760]	; (8003a60 <main+0x370>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2b14      	cmp	r3, #20
 800376c:	d906      	bls.n	800377c <main+0x8c>
 800376e:	4bbb      	ldr	r3, [pc, #748]	; (8003a5c <main+0x36c>)
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d102      	bne.n	800377c <main+0x8c>
		  sw = 2;
 8003776:	4bb9      	ldr	r3, [pc, #740]	; (8003a5c <main+0x36c>)
 8003778:	2202      	movs	r2, #2
 800377a:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 800377c:	4bb8      	ldr	r3, [pc, #736]	; (8003a60 <main+0x370>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b28      	cmp	r3, #40	; 0x28
 8003782:	d906      	bls.n	8003792 <main+0xa2>
 8003784:	4bb5      	ldr	r3, [pc, #724]	; (8003a5c <main+0x36c>)
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <main+0xa2>
		  sw = 0;
 800378c:	4bb3      	ldr	r3, [pc, #716]	; (8003a5c <main+0x36c>)
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003792:	204c      	movs	r0, #76	; 0x4c
 8003794:	f002 fe58 	bl	8006448 <getSwitchStatus>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <main+0xc8>
 800379e:	4baf      	ldr	r3, [pc, #700]	; (8003a5c <main+0x36c>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d108      	bne.n	80037b8 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80037a6:	4baf      	ldr	r3, [pc, #700]	; (8003a64 <main+0x374>)
 80037a8:	881b      	ldrh	r3, [r3, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	4bad      	ldr	r3, [pc, #692]	; (8003a64 <main+0x374>)
 80037b0:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 80037b2:	4baa      	ldr	r3, [pc, #680]	; (8003a5c <main+0x36c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 80037b8:	2052      	movs	r0, #82	; 0x52
 80037ba:	f002 fe45 	bl	8006448 <getSwitchStatus>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d109      	bne.n	80037d8 <main+0xe8>
 80037c4:	4ba8      	ldr	r3, [pc, #672]	; (8003a68 <main+0x378>)
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <main+0xe8>
	  	  timer = 0;
 80037cc:	4ba4      	ldr	r3, [pc, #656]	; (8003a60 <main+0x370>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 80037d2:	4ba5      	ldr	r3, [pc, #660]	; (8003a68 <main+0x378>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 80037d8:	2052      	movs	r0, #82	; 0x52
 80037da:	f002 fe35 	bl	8006448 <getSwitchStatus>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d10a      	bne.n	80037fa <main+0x10a>
 80037e4:	4b9e      	ldr	r3, [pc, #632]	; (8003a60 <main+0x370>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b14      	cmp	r3, #20
 80037ea:	d906      	bls.n	80037fa <main+0x10a>
 80037ec:	4b9e      	ldr	r3, [pc, #632]	; (8003a68 <main+0x378>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d102      	bne.n	80037fa <main+0x10a>
	  	  sw2 = 2;
 80037f4:	4b9c      	ldr	r3, [pc, #624]	; (8003a68 <main+0x378>)
 80037f6:	2202      	movs	r2, #2
 80037f8:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 80037fa:	4b99      	ldr	r3, [pc, #612]	; (8003a60 <main+0x370>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b28      	cmp	r3, #40	; 0x28
 8003800:	d906      	bls.n	8003810 <main+0x120>
 8003802:	4b99      	ldr	r3, [pc, #612]	; (8003a68 <main+0x378>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <main+0x120>
	  	  sw2 = 0;
 800380a:	4b97      	ldr	r3, [pc, #604]	; (8003a68 <main+0x378>)
 800380c:	2200      	movs	r2, #0
 800380e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003810:	2052      	movs	r0, #82	; 0x52
 8003812:	f002 fe19 	bl	8006448 <getSwitchStatus>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10c      	bne.n	8003836 <main+0x146>
 800381c:	4b92      	ldr	r3, [pc, #584]	; (8003a68 <main+0x378>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d108      	bne.n	8003836 <main+0x146>
	  	  cnt++;
 8003824:	4b91      	ldr	r3, [pc, #580]	; (8003a6c <main+0x37c>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b8f      	ldr	r3, [pc, #572]	; (8003a6c <main+0x37c>)
 800382e:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003830:	4b8d      	ldr	r3, [pc, #564]	; (8003a68 <main+0x378>)
 8003832:	2200      	movs	r2, #0
 8003834:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003836:	4b8d      	ldr	r3, [pc, #564]	; (8003a6c <main+0x37c>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d902      	bls.n	8003844 <main+0x154>
		  cnt = 0;
 800383e:	4b8b      	ldr	r3, [pc, #556]	; (8003a6c <main+0x37c>)
 8003840:	2200      	movs	r2, #0
 8003842:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003844:	4b89      	ldr	r3, [pc, #548]	; (8003a6c <main+0x37c>)
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <main+0x174>
		  HAL_Delay(1000);
 800384c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003850:	f002 ff7a 	bl	8006748 <HAL_Delay>
		  running_flag = true;
 8003854:	2301      	movs	r3, #1
 8003856:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003858:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <main+0x380>)
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 800385e:	4b83      	ldr	r3, [pc, #524]	; (8003a6c <main+0x37c>)
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f083 0301 	eor.w	r3, r3, #1
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <main+0x188>
		  stopLineTrace();
 8003870:	f7fe fb46 	bl	8001f00 <stopLineTrace>
		  stopVelocityControl();
 8003874:	f7ff fe9a 	bl	80035ac <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
 8003878:	f002 f9bc 	bl	8005bf4 <getgoalStatus>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <main+0x1a2>
		  running_flag = false;
 8003882:	2300      	movs	r3, #0
 8003884:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8003886:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <main+0x37c>)
 8003888:	2200      	movs	r2, #0
 800388a:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 800388c:	2000      	movs	r0, #0
 800388e:	f001 f867 	bl	8004960 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 12){
 8003892:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <main+0x374>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	2b0b      	cmp	r3, #11
 8003898:	d902      	bls.n	80038a0 <main+0x1b0>
		  soiya = 0;
 800389a:	4b72      	ldr	r3, [pc, #456]	; (8003a64 <main+0x374>)
 800389c:	2200      	movs	r2, #0
 800389e:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <main+0x374>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	f200 821b 	bhi.w	8003ce0 <main+0x5f0>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <main+0x1c0>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	0800390b 	.word	0x0800390b
 80038b8:	0800393f 	.word	0x0800393f
 80038bc:	08003975 	.word	0x08003975
 80038c0:	080039b9 	.word	0x080039b9
 80038c4:	08003a03 	.word	0x08003a03
 80038c8:	08003a99 	.word	0x08003a99
 80038cc:	08003af3 	.word	0x08003af3
 80038d0:	08003b4d 	.word	0x08003b4d
 80038d4:	08003ba7 	.word	0x08003ba7
 80038d8:	08003bfb 	.word	0x08003bfb
 80038dc:	08003c4d 	.word	0x08003c4d

			  case 0:
				  setLED('W');
 80038e0:	2057      	movs	r0, #87	; 0x57
 80038e2:	f7fd ff81 	bl	80017e8 <setLED>
				  setLED2('R');
 80038e6:	2052      	movs	r0, #82	; 0x52
 80038e8:	f7fe f84c 	bl	8001984 <setLED2>
				  printf("0\r\n");
 80038ec:	4861      	ldr	r0, [pc, #388]	; (8003a74 <main+0x384>)
 80038ee:	f008 f8ab 	bl	800ba48 <puts>

				  if(running_flag == true){
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 81f5 	beq.w	8003ce4 <main+0x5f4>
					  setLED('G');
 80038fa:	2047      	movs	r0, #71	; 0x47
 80038fc:	f7fd ff74 	bl	80017e8 <setLED>

				  		  setsuctionMotor(400);
 8003900:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003904:	f001 f82c 	bl	8004960 <setsuctionMotor>

				  }

				  break;
 8003908:	e1ec      	b.n	8003ce4 <main+0x5f4>

			  case 1:
				  setLED('G');
 800390a:	2047      	movs	r0, #71	; 0x47
 800390c:	f7fd ff6c 	bl	80017e8 <setLED>
				  setLED2('G');
 8003910:	2047      	movs	r0, #71	; 0x47
 8003912:	f7fe f837 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 81e5 	beq.w	8003ce8 <main+0x5f8>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 800391e:	f7fd fdc3 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(0.0);
 8003922:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003a78 <main+0x388>
 8003926:	f7ff fd89 	bl	800343c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(0);
 800392a:	2000      	movs	r0, #0
 800392c:	f001 f818 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003934:	f002 ff08 	bl	8006748 <HAL_Delay>

						  running();
 8003938:	f001 f940 	bl	8004bbc <running>
				  }

				  break;
 800393c:	e1d4      	b.n	8003ce8 <main+0x5f8>

			  case 2:
				  setLED('B');
 800393e:	2042      	movs	r0, #66	; 0x42
 8003940:	f7fd ff52 	bl	80017e8 <setLED>
				  setLED2('B');
 8003944:	2042      	movs	r0, #66	; 0x42
 8003946:	f7fe f81d 	bl	8001984 <setLED2>

				  if(running_flag == true){
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 81cd 	beq.w	8003cec <main+0x5fc>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003952:	f7fd fda9 	bl	80014a8 <clearspeedcount>

						  setTargetVelocity(1.5);
 8003956:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800395a:	f7ff fd6f 	bl	800343c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 800395e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003962:	f000 fffd 	bl	8004960 <setsuctionMotor>
						  HAL_Delay(1000);
 8003966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800396a:	f002 feed 	bl	8006748 <HAL_Delay>

						  running();
 800396e:	f001 f925 	bl	8004bbc <running>
				  }

				  break;
 8003972:	e1bb      	b.n	8003cec <main+0x5fc>

			  case 3:
				  setLED('Y');
 8003974:	2059      	movs	r0, #89	; 0x59
 8003976:	f7fd ff37 	bl	80017e8 <setLED>
				  setLED2('R');
 800397a:	2052      	movs	r0, #82	; 0x52
 800397c:	f7fe f802 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 81b4 	beq.w	8003cf0 <main+0x600>
						  //startLineTrace();

					      clearspeedcount();
 8003988:	f7fd fd8e 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 800398c:	f7fd feda 	bl	8001744 <IMU_average>

					      setRunMode(1);
 8003990:	2001      	movs	r0, #1
 8003992:	f001 f82d 	bl	80049f0 <setRunMode>

					      setVelocityRange(1.4, 1.4);
 8003996:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003a7c <main+0x38c>
 800399a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003a7c <main+0x38c>
 800399e:	f002 f935 	bl	8005c0c <setVelocityRange>

						  setsuctionMotor(350);
 80039a2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80039a6:	f000 ffdb 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 80039aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ae:	f002 fecb 	bl	8006748 <HAL_Delay>

						  running();
 80039b2:	f001 f903 	bl	8004bbc <running>
				  }

				  break;
 80039b6:	e19b      	b.n	8003cf0 <main+0x600>

			  case 4:
				  setLED('Y');
 80039b8:	2059      	movs	r0, #89	; 0x59
 80039ba:	f7fd ff15 	bl	80017e8 <setLED>
				  setLED2('G');
 80039be:	2047      	movs	r0, #71	; 0x47
 80039c0:	f7fd ffe0 	bl	8001984 <setLED2>

				  if(running_flag == true){
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8194 	beq.w	8003cf4 <main+0x604>
						  //startLineTrace();

						  clearspeedcount();
 80039cc:	f7fd fd6c 	bl	80014a8 <clearspeedcount>

						  IMU_average();
 80039d0:	f7fd feb8 	bl	8001744 <IMU_average>

						  setRunMode(1);
 80039d4:	2001      	movs	r0, #1
 80039d6:	f001 f80b 	bl	80049f0 <setRunMode>
						  setrunmode(1);
 80039da:	2001      	movs	r0, #1
 80039dc:	f7ff fdfe 	bl	80035dc <setrunmode>

						  setVelocityRange(1.8, 1.8);
 80039e0:	eddf 0a27 	vldr	s1, [pc, #156]	; 8003a80 <main+0x390>
 80039e4:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8003a80 <main+0x390>
 80039e8:	f002 f910 	bl	8005c0c <setVelocityRange>

						  setsuctionMotor(350);
 80039ec:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80039f0:	f000 ffb6 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 80039f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f8:	f002 fea6 	bl	8006748 <HAL_Delay>

						  running();
 80039fc:	f001 f8de 	bl	8004bbc <running>
				  }

				  break;
 8003a00:	e178      	b.n	8003cf4 <main+0x604>

			  case 5:
				  setLED('C');
 8003a02:	2043      	movs	r0, #67	; 0x43
 8003a04:	f7fd fef0 	bl	80017e8 <setLED>
				  setLED2('R');
 8003a08:	2052      	movs	r0, #82	; 0x52
 8003a0a:	f7fd ffbb 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8171 	beq.w	8003cf8 <main+0x608>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003a16:	f7fd fd47 	bl	80014a8 <clearspeedcount>

					      setRunMode(2);
 8003a1a:	2002      	movs	r0, #2
 8003a1c:	f000 ffe8 	bl	80049f0 <setRunMode>
					      setrunmode(2);
 8003a20:	2002      	movs	r0, #2
 8003a22:	f7ff fddb 	bl	80035dc <setrunmode>

					      setVelocityRange(1.6, 5.0);
 8003a26:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003a2a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003a84 <main+0x394>
 8003a2e:	f002 f8ed 	bl	8005c0c <setVelocityRange>
					      setAccDec(4, 2);
 8003a32:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003a36:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8003a3a:	f002 f8ff 	bl	8005c3c <setAccDec>
					      setStraightRadius(1000); //Do Not Change
 8003a3e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003a94 <main+0x3a4>
 8003a42:	f002 f913 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003a46:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003a4a:	f000 ff89 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003a4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a52:	f002 fe79 	bl	8006748 <HAL_Delay>

						  running();
 8003a56:	f001 f8b1 	bl	8004bbc <running>
				  }

				  break;
 8003a5a:	e14d      	b.n	8003cf8 <main+0x608>
 8003a5c:	2001f7e4 	.word	0x2001f7e4
 8003a60:	2001f5c8 	.word	0x2001f5c8
 8003a64:	20017e06 	.word	0x20017e06
 8003a68:	20017e04 	.word	0x20017e04
 8003a6c:	2001f668 	.word	0x2001f668
 8003a70:	2001f610 	.word	0x2001f610
 8003a74:	0800f168 	.word	0x0800f168
 8003a78:	00000000 	.word	0x00000000
 8003a7c:	3fb33333 	.word	0x3fb33333
 8003a80:	3fe66666 	.word	0x3fe66666
 8003a84:	3fcccccd 	.word	0x3fcccccd
 8003a88:	400ccccd 	.word	0x400ccccd
 8003a8c:	40133333 	.word	0x40133333
 8003a90:	40066666 	.word	0x40066666
 8003a94:	447a0000 	.word	0x447a0000

			  case 6:
				  setLED('C');
 8003a98:	2043      	movs	r0, #67	; 0x43
 8003a9a:	f7fd fea5 	bl	80017e8 <setLED>
				  setLED2('G');
 8003a9e:	2047      	movs	r0, #71	; 0x47
 8003aa0:	f7fd ff70 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8128 	beq.w	8003cfc <main+0x60c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003aac:	f7fd fcfc 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003ab0:	2002      	movs	r0, #2
 8003ab2:	f000 ff9d 	bl	80049f0 <setRunMode>
						  setrunmode(2);
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f7ff fd90 	bl	80035dc <setrunmode>

						  setVelocityRange(2.0, 5.0);
 8003abc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003ac0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003ac4:	f002 f8a2 	bl	8005c0c <setVelocityRange>
						  setAccDec(3, 2);
 8003ac8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003acc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003ad0:	f002 f8b4 	bl	8005c3c <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003ad4:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8003a94 <main+0x3a4>
 8003ad8:	f002 f8c8 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003adc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003ae0:	f000 ff3e 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003ae4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ae8:	f002 fe2e 	bl	8006748 <HAL_Delay>

						  running();
 8003aec:	f001 f866 	bl	8004bbc <running>
				  }

				  break;
 8003af0:	e104      	b.n	8003cfc <main+0x60c>

			  case 7:
				  setLED('C');
 8003af2:	2043      	movs	r0, #67	; 0x43
 8003af4:	f7fd fe78 	bl	80017e8 <setLED>
				  setLED2('B');
 8003af8:	2042      	movs	r0, #66	; 0x42
 8003afa:	f7fd ff43 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80fd 	beq.w	8003d00 <main+0x610>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003b06:	f7fd fccf 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003b0a:	2002      	movs	r0, #2
 8003b0c:	f000 ff70 	bl	80049f0 <setRunMode>
						  setrunmode(2);
 8003b10:	2002      	movs	r0, #2
 8003b12:	f7ff fd63 	bl	80035dc <setrunmode>

						  setVelocityRange(2.2, 4.5);
 8003b16:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 8003b1a:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 8003a88 <main+0x398>
 8003b1e:	f002 f875 	bl	8005c0c <setVelocityRange>
						  setAccDec(5, 1);
 8003b22:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003b26:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b2a:	f002 f887 	bl	8005c3c <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b2e:	ed1f 0a27 	vldr	s0, [pc, #-156]	; 8003a94 <main+0x3a4>
 8003b32:	f002 f89b 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003b36:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003b3a:	f000 ff11 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003b3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b42:	f002 fe01 	bl	8006748 <HAL_Delay>

						  running();
 8003b46:	f001 f839 	bl	8004bbc <running>
				  }

				  break;
 8003b4a:	e0d9      	b.n	8003d00 <main+0x610>

			  case 8:
				  setLED('C');
 8003b4c:	2043      	movs	r0, #67	; 0x43
 8003b4e:	f7fd fe4b 	bl	80017e8 <setLED>
				  setLED2('W');
 8003b52:	2057      	movs	r0, #87	; 0x57
 8003b54:	f7fd ff16 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80d2 	beq.w	8003d04 <main+0x614>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003b60:	f7fd fca2 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003b64:	2002      	movs	r0, #2
 8003b66:	f000 ff43 	bl	80049f0 <setRunMode>
						  setrunmode(2);
 8003b6a:	2002      	movs	r0, #2
 8003b6c:	f7ff fd36 	bl	80035dc <setrunmode>

						  setVelocityRange(2.0, 6.5);
 8003b70:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8003b74:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003b78:	f002 f848 	bl	8005c0c <setVelocityRange>
						  setAccDec(5, 2);
 8003b7c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003b80:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b84:	f002 f85a 	bl	8005c3c <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003b88:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 8003a94 <main+0x3a4>
 8003b8c:	f002 f86e 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003b90:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003b94:	f000 fee4 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003b98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b9c:	f002 fdd4 	bl	8006748 <HAL_Delay>

						  running();
 8003ba0:	f001 f80c 	bl	8004bbc <running>
				  }

				  break;
 8003ba4:	e0ae      	b.n	8003d04 <main+0x614>

			  case 9:
				  setLED('C');
 8003ba6:	2043      	movs	r0, #67	; 0x43
 8003ba8:	f7fd fe1e 	bl	80017e8 <setLED>
				  setLED2('Y');
 8003bac:	2059      	movs	r0, #89	; 0x59
 8003bae:	f7fd fee9 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a7 	beq.w	8003d08 <main+0x618>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003bba:	f7fd fc75 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	f000 ff16 	bl	80049f0 <setRunMode>

						  setVelocityRange(2.3, 8.0);
 8003bc4:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 8003bc8:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 8003a8c <main+0x39c>
 8003bcc:	f002 f81e 	bl	8005c0c <setVelocityRange>
						  setAccDec(10, 3);
 8003bd0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003bd4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003bd8:	f002 f830 	bl	8005c3c <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003bdc:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 8003a94 <main+0x3a4>
 8003be0:	f002 f844 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003be4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003be8:	f000 feba 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003bec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bf0:	f002 fdaa 	bl	8006748 <HAL_Delay>

						  running();
 8003bf4:	f000 ffe2 	bl	8004bbc <running>
				  }

			  	  break;
 8003bf8:	e086      	b.n	8003d08 <main+0x618>

			  case 10:
				  setLED('C');
 8003bfa:	2043      	movs	r0, #67	; 0x43
 8003bfc:	f7fd fdf4 	bl	80017e8 <setLED>
				  setLED2('X');
 8003c00:	2058      	movs	r0, #88	; 0x58
 8003c02:	f7fd febf 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d07f      	beq.n	8003d0c <main+0x61c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003c0c:	f7fd fc4c 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003c10:	2002      	movs	r0, #2
 8003c12:	f000 feed 	bl	80049f0 <setRunMode>

						  setVelocityRange(2.1, 7.0);
 8003c16:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8003c1a:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8003a90 <main+0x3a0>
 8003c1e:	f001 fff5 	bl	8005c0c <setVelocityRange>
						  setAccDec(7, 2);
 8003c22:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003c26:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003c2a:	f002 f807 	bl	8005c3c <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003c2e:	ed1f 0a67 	vldr	s0, [pc, #-412]	; 8003a94 <main+0x3a4>
 8003c32:	f002 f81b 	bl	8005c6c <setStraightRadius>

						  setsuctionMotor(350);
 8003c36:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8003c3a:	f000 fe91 	bl	8004960 <setsuctionMotor>

						  HAL_Delay(1000);
 8003c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c42:	f002 fd81 	bl	8006748 <HAL_Delay>

						  running();
 8003c46:	f000 ffb9 	bl	8004bbc <running>
				  }

				  break;
 8003c4a:	e05f      	b.n	8003d0c <main+0x61c>

			  case 11:
				  setLED('W');
 8003c4c:	2057      	movs	r0, #87	; 0x57
 8003c4e:	f7fd fdcb 	bl	80017e8 <setLED>
				  setLED2('A');
 8003c52:	2041      	movs	r0, #65	; 0x41
 8003c54:	f7fd fe96 	bl	8001984 <setLED2>
				  printf("6\r\n");
 8003c58:	482e      	ldr	r0, [pc, #184]	; (8003d14 <main+0x624>)
 8003c5a:	f007 fef5 	bl	800ba48 <puts>

				  if(running_flag == true){
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d055      	beq.n	8003d10 <main+0x620>
					  loadDistance();
 8003c64:	f7ff f902 	bl	8002e6c <loadDistance>
					  loadTheta();
 8003c68:	f7ff f93e 	bl	8002ee8 <loadTheta>
					  loadCross();
 8003c6c:	f7ff f97a 	bl	8002f64 <loadCross>
					  loadSide();
 8003c70:	f7ff f9b6 	bl	8002fe0 <loadSide>
					  loadDebug();
 8003c74:	f7ff f9f2 	bl	800305c <loadDebug>
					  printf("Side\r\n");
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/

					  printf("TargetVelocity, CurrentVelocity\r\n");
 8003c78:	4827      	ldr	r0, [pc, #156]	; (8003d18 <main+0x628>)
 8003c7a:	f007 fee5 	bl	800ba48 <puts>
					  uint16_t size = getDebugLogSize();
 8003c7e:	f7ff f8e9 	bl	8002e54 <getDebugLogSize>
 8003c82:	4603      	mov	r3, r0
 8003c84:	807b      	strh	r3, [r7, #2]
					  for(uint16_t i = 0; i < size; i = i+2){
 8003c86:	2300      	movs	r3, #0
 8003c88:	80bb      	strh	r3, [r7, #4]
 8003c8a:	e021      	b.n	8003cd0 <main+0x5e0>
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
 8003c8c:	88bb      	ldrh	r3, [r7, #4]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fa78 	bl	8003184 <getDebugLog>
 8003c94:	ee10 3a10 	vmov	r3, s0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fc fc55 	bl	8000548 <__aeabi_f2d>
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	460e      	mov	r6, r1
 8003ca2:	88bb      	ldrh	r3, [r7, #4]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fa6b 	bl	8003184 <getDebugLog>
 8003cae:	ee10 3a10 	vmov	r3, s0
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fc fc48 	bl	8000548 <__aeabi_f2d>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	e9cd 3400 	strd	r3, r4, [sp]
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4633      	mov	r3, r6
 8003cc4:	4815      	ldr	r0, [pc, #84]	; (8003d1c <main+0x62c>)
 8003cc6:	f007 fe4b 	bl	800b960 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+2){
 8003cca:	88bb      	ldrh	r3, [r7, #4]
 8003ccc:	3302      	adds	r3, #2
 8003cce:	80bb      	strh	r3, [r7, #4]
 8003cd0:	88ba      	ldrh	r2, [r7, #4]
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d3d9      	bcc.n	8003c8c <main+0x59c>
					  }

					  printf("9999, 9999\r\n");
 8003cd8:	4811      	ldr	r0, [pc, #68]	; (8003d20 <main+0x630>)
 8003cda:	f007 feb5 	bl	800ba48 <puts>
				  }

				  break;
 8003cde:	e017      	b.n	8003d10 <main+0x620>

			  default:
				  break;
 8003ce0:	bf00      	nop
 8003ce2:	e52a      	b.n	800373a <main+0x4a>
				  break;
 8003ce4:	bf00      	nop
 8003ce6:	e528      	b.n	800373a <main+0x4a>
				  break;
 8003ce8:	bf00      	nop
 8003cea:	e526      	b.n	800373a <main+0x4a>
				  break;
 8003cec:	bf00      	nop
 8003cee:	e524      	b.n	800373a <main+0x4a>
				  break;
 8003cf0:	bf00      	nop
 8003cf2:	e522      	b.n	800373a <main+0x4a>
				  break;
 8003cf4:	bf00      	nop
 8003cf6:	e520      	b.n	800373a <main+0x4a>
				  break;
 8003cf8:	bf00      	nop
 8003cfa:	e51e      	b.n	800373a <main+0x4a>
				  break;
 8003cfc:	bf00      	nop
 8003cfe:	e51c      	b.n	800373a <main+0x4a>
				  break;
 8003d00:	bf00      	nop
 8003d02:	e51a      	b.n	800373a <main+0x4a>
				  break;
 8003d04:	bf00      	nop
 8003d06:	e518      	b.n	800373a <main+0x4a>
			  	  break;
 8003d08:	bf00      	nop
 8003d0a:	e516      	b.n	800373a <main+0x4a>
				  break;
 8003d0c:	bf00      	nop
 8003d0e:	e514      	b.n	800373a <main+0x4a>
				  break;
 8003d10:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003d12:	e512      	b.n	800373a <main+0x4a>
 8003d14:	0800f16c 	.word	0x0800f16c
 8003d18:	0800f170 	.word	0x0800f170
 8003d1c:	0800f194 	.word	0x0800f194
 8003d20:	0800f1a0 	.word	0x0800f1a0

08003d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b094      	sub	sp, #80	; 0x50
 8003d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d2a:	f107 0320 	add.w	r3, r7, #32
 8003d2e:	2230      	movs	r2, #48	; 0x30
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f006 ffcd 	bl	800acd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d38:	f107 030c 	add.w	r3, r7, #12
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	4b28      	ldr	r3, [pc, #160]	; (8003df0 <SystemClock_Config+0xcc>)
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <SystemClock_Config+0xcc>)
 8003d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6413      	str	r3, [r2, #64]	; 0x40
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <SystemClock_Config+0xcc>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	2300      	movs	r3, #0
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <SystemClock_Config+0xd0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <SystemClock_Config+0xd0>)
 8003d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <SystemClock_Config+0xd0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d80:	2302      	movs	r3, #2
 8003d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d88:	2310      	movs	r3, #16
 8003d8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d90:	2300      	movs	r3, #0
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d94:	2308      	movs	r3, #8
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003d98:	23a8      	movs	r3, #168	; 0xa8
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003da0:	2304      	movs	r3, #4
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003da4:	f107 0320 	add.w	r3, r7, #32
 8003da8:	4618      	mov	r0, r3
 8003daa:	f004 fa51 	bl	8008250 <HAL_RCC_OscConfig>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003db4:	f000 fd04 	bl	80047c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003db8:	230f      	movs	r3, #15
 8003dba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dc4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003dc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	2105      	movs	r1, #5
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 fcaa 	bl	8008730 <HAL_RCC_ClockConfig>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003de2:	f000 fced 	bl	80047c0 <Error_Handler>
  }
}
 8003de6:	bf00      	nop
 8003de8:	3750      	adds	r7, #80	; 0x50
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40007000 	.word	0x40007000

08003df8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003dfe:	463b      	mov	r3, r7
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003e0a:	4b28      	ldr	r3, [pc, #160]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e0c:	4a28      	ldr	r2, [pc, #160]	; (8003eb0 <MX_ADC1_Init+0xb8>)
 8003e0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003e10:	4b26      	ldr	r3, [pc, #152]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e18:	4b24      	ldr	r3, [pc, #144]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003e1e:	4b23      	ldr	r3, [pc, #140]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e3a:	4a1e      	ldr	r2, [pc, #120]	; (8003eb4 <MX_ADC1_Init+0xbc>)
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e46:	2202      	movs	r2, #2
 8003e48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003e4a:	4b18      	ldr	r3, [pc, #96]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e52:	4b16      	ldr	r3, [pc, #88]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e58:	4814      	ldr	r0, [pc, #80]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e5a:	f002 fc97 	bl	800678c <HAL_ADC_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e64:	f000 fcac 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e68:	230c      	movs	r3, #12
 8003e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003e70:	2307      	movs	r3, #7
 8003e72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e74:	463b      	mov	r3, r7
 8003e76:	4619      	mov	r1, r3
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e7a:	f002 fddb 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e84:	f000 fc9c 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003e88:	230d      	movs	r3, #13
 8003e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e90:	463b      	mov	r3, r7
 8003e92:	4619      	mov	r1, r3
 8003e94:	4805      	ldr	r0, [pc, #20]	; (8003eac <MX_ADC1_Init+0xb4>)
 8003e96:	f002 fdcd 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003ea0:	f000 fc8e 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	2001f528 	.word	0x2001f528
 8003eb0:	40012000 	.word	0x40012000
 8003eb4:	0f000001 	.word	0x0f000001

08003eb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003ebe:	463b      	mov	r3, r7
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
 8003ec8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003eca:	4b6e      	ldr	r3, [pc, #440]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ecc:	4a6e      	ldr	r2, [pc, #440]	; (8004088 <MX_ADC2_Init+0x1d0>)
 8003ece:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ed2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ed6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003ed8:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003ede:	4b69      	ldr	r3, [pc, #420]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003ee4:	4b67      	ldr	r3, [pc, #412]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003eea:	4b66      	ldr	r3, [pc, #408]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003ef2:	4b64      	ldr	r3, [pc, #400]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ef8:	4b62      	ldr	r3, [pc, #392]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003efa:	4a64      	ldr	r2, [pc, #400]	; (800408c <MX_ADC2_Init+0x1d4>)
 8003efc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003efe:	4b61      	ldr	r3, [pc, #388]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003f04:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f06:	220c      	movs	r2, #12
 8003f08:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003f0a:	4b5e      	ldr	r3, [pc, #376]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003f12:	4b5c      	ldr	r3, [pc, #368]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f18:	485a      	ldr	r0, [pc, #360]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f1a:	f002 fc37 	bl	800678c <HAL_ADC_Init>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003f24:	f000 fc4c 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003f30:	2307      	movs	r3, #7
 8003f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f34:	463b      	mov	r3, r7
 8003f36:	4619      	mov	r1, r3
 8003f38:	4852      	ldr	r0, [pc, #328]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f3a:	f002 fd7b 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003f44:	f000 fc3c 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f50:	463b      	mov	r3, r7
 8003f52:	4619      	mov	r1, r3
 8003f54:	484b      	ldr	r0, [pc, #300]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f56:	f002 fd6d 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003f60:	f000 fc2e 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003f64:	2302      	movs	r3, #2
 8003f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4844      	ldr	r0, [pc, #272]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f72:	f002 fd5f 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003f7c:	f000 fc20 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003f80:	2303      	movs	r3, #3
 8003f82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003f84:	2304      	movs	r3, #4
 8003f86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f88:	463b      	mov	r3, r7
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	483d      	ldr	r0, [pc, #244]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003f8e:	f002 fd51 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003f98:	f000 fc12 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003f9c:	2304      	movs	r3, #4
 8003f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003fa0:	2305      	movs	r3, #5
 8003fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4836      	ldr	r0, [pc, #216]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003faa:	f002 fd43 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003fb4:	f000 fc04 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003fb8:	2305      	movs	r3, #5
 8003fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003fbc:	2306      	movs	r3, #6
 8003fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	482f      	ldr	r0, [pc, #188]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003fc6:	f002 fd35 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003fd0:	f000 fbf6 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003fd4:	2306      	movs	r3, #6
 8003fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003fd8:	2307      	movs	r3, #7
 8003fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003fdc:	463b      	mov	r3, r7
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4828      	ldr	r0, [pc, #160]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003fe2:	f002 fd27 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003fec:	f000 fbe8 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003ff0:	2307      	movs	r3, #7
 8003ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003ff4:	2308      	movs	r3, #8
 8003ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4821      	ldr	r0, [pc, #132]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8003ffe:	f002 fd19 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004008:	f000 fbda 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800400c:	2308      	movs	r3, #8
 800400e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004010:	2309      	movs	r3, #9
 8004012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004014:	463b      	mov	r3, r7
 8004016:	4619      	mov	r1, r3
 8004018:	481a      	ldr	r0, [pc, #104]	; (8004084 <MX_ADC2_Init+0x1cc>)
 800401a:	f002 fd0b 	bl	8006a34 <HAL_ADC_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004024:	f000 fbcc 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004028:	2309      	movs	r3, #9
 800402a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800402c:	230a      	movs	r3, #10
 800402e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004030:	463b      	mov	r3, r7
 8004032:	4619      	mov	r1, r3
 8004034:	4813      	ldr	r0, [pc, #76]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8004036:	f002 fcfd 	bl	8006a34 <HAL_ADC_ConfigChannel>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004040:	f000 fbbe 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004044:	230e      	movs	r3, #14
 8004046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004048:	230b      	movs	r3, #11
 800404a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800404c:	463b      	mov	r3, r7
 800404e:	4619      	mov	r1, r3
 8004050:	480c      	ldr	r0, [pc, #48]	; (8004084 <MX_ADC2_Init+0x1cc>)
 8004052:	f002 fcef 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 800405c:	f000 fbb0 	bl	80047c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004060:	230f      	movs	r3, #15
 8004062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004064:	230c      	movs	r3, #12
 8004066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004068:	463b      	mov	r3, r7
 800406a:	4619      	mov	r1, r3
 800406c:	4805      	ldr	r0, [pc, #20]	; (8004084 <MX_ADC2_Init+0x1cc>)
 800406e:	f002 fce1 	bl	8006a34 <HAL_ADC_ConfigChannel>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004078:	f000 fba2 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	2001f4d8 	.word	0x2001f4d8
 8004088:	40012100 	.word	0x40012100
 800408c:	0f000001 	.word	0x0f000001

08004090 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004094:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <MX_I2C1_Init+0x50>)
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <MX_I2C1_Init+0x54>)
 8004098:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_I2C1_Init+0x50>)
 800409c:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <MX_I2C1_Init+0x58>)
 800409e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040bc:	2200      	movs	r2, #0
 80040be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80040cc:	4804      	ldr	r0, [pc, #16]	; (80040e0 <MX_I2C1_Init+0x50>)
 80040ce:	f003 ff87 	bl	8007fe0 <HAL_I2C_Init>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80040d8:	f000 fb72 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	2001f614 	.word	0x2001f614
 80040e4:	40005400 	.word	0x40005400
 80040e8:	000186a0 	.word	0x000186a0

080040ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <MX_SPI3_Init+0x64>)
 80040f2:	4a18      	ldr	r2, [pc, #96]	; (8004154 <MX_SPI3_Init+0x68>)
 80040f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <MX_SPI3_Init+0x64>)
 80040f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <MX_SPI3_Init+0x64>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <MX_SPI3_Init+0x64>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <MX_SPI3_Init+0x64>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <MX_SPI3_Init+0x64>)
 8004112:	2200      	movs	r2, #0
 8004114:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004116:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <MX_SPI3_Init+0x64>)
 8004118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800411e:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <MX_SPI3_Init+0x64>)
 8004120:	2228      	movs	r2, #40	; 0x28
 8004122:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <MX_SPI3_Init+0x64>)
 8004126:	2200      	movs	r2, #0
 8004128:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <MX_SPI3_Init+0x64>)
 800412c:	2200      	movs	r2, #0
 800412e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <MX_SPI3_Init+0x64>)
 8004132:	2200      	movs	r2, #0
 8004134:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <MX_SPI3_Init+0x64>)
 8004138:	220a      	movs	r2, #10
 800413a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800413c:	4804      	ldr	r0, [pc, #16]	; (8004150 <MX_SPI3_Init+0x64>)
 800413e:	f004 fcc3 	bl	8008ac8 <HAL_SPI_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004148:	f000 fb3a 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	2001f66c 	.word	0x2001f66c
 8004154:	40003c00 	.word	0x40003c00

08004158 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b092      	sub	sp, #72	; 0x48
 800415c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	615a      	str	r2, [r3, #20]
 800417a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2220      	movs	r2, #32
 8004180:	2100      	movs	r1, #0
 8004182:	4618      	mov	r0, r3
 8004184:	f006 fda5 	bl	800acd2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004188:	4b32      	ldr	r3, [pc, #200]	; (8004254 <MX_TIM1_Init+0xfc>)
 800418a:	4a33      	ldr	r2, [pc, #204]	; (8004258 <MX_TIM1_Init+0x100>)
 800418c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <MX_TIM1_Init+0xfc>)
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <MX_TIM1_Init+0xfc>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 800419a:	4b2e      	ldr	r3, [pc, #184]	; (8004254 <MX_TIM1_Init+0xfc>)
 800419c:	f240 3247 	movw	r2, #839	; 0x347
 80041a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <MX_TIM1_Init+0xfc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041a8:	4b2a      	ldr	r3, [pc, #168]	; (8004254 <MX_TIM1_Init+0xfc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ae:	4b29      	ldr	r3, [pc, #164]	; (8004254 <MX_TIM1_Init+0xfc>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80041b4:	4827      	ldr	r0, [pc, #156]	; (8004254 <MX_TIM1_Init+0xfc>)
 80041b6:	f005 fa2a 	bl	800960e <HAL_TIM_PWM_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80041c0:	f000 fafe 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041d0:	4619      	mov	r1, r3
 80041d2:	4820      	ldr	r0, [pc, #128]	; (8004254 <MX_TIM1_Init+0xfc>)
 80041d4:	f005 ffba 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80041de:	f000 faef 	bl	80047c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e2:	2360      	movs	r3, #96	; 0x60
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041fe:	220c      	movs	r2, #12
 8004200:	4619      	mov	r1, r3
 8004202:	4814      	ldr	r0, [pc, #80]	; (8004254 <MX_TIM1_Init+0xfc>)
 8004204:	f005 fc3e 	bl	8009a84 <HAL_TIM_PWM_ConfigChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800420e:	f000 fad7 	bl	80047c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004226:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800422a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4807      	ldr	r0, [pc, #28]	; (8004254 <MX_TIM1_Init+0xfc>)
 8004236:	f006 f805 	bl	800a244 <HAL_TIMEx_ConfigBreakDeadTime>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004240:	f000 fabe 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004244:	4803      	ldr	r0, [pc, #12]	; (8004254 <MX_TIM1_Init+0xfc>)
 8004246:	f002 f801 	bl	800624c <HAL_TIM_MspPostInit>

}
 800424a:	bf00      	nop
 800424c:	3748      	adds	r7, #72	; 0x48
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2001f7a4 	.word	0x2001f7a4
 8004258:	40010000 	.word	0x40010000

0800425c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	2224      	movs	r2, #36	; 0x24
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f006 fd31 	bl	800acd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004278:	4b20      	ldr	r3, [pc, #128]	; (80042fc <MX_TIM3_Init+0xa0>)
 800427a:	4a21      	ldr	r2, [pc, #132]	; (8004300 <MX_TIM3_Init+0xa4>)
 800427c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <MX_TIM3_Init+0xa0>)
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004284:	4b1d      	ldr	r3, [pc, #116]	; (80042fc <MX_TIM3_Init+0xa0>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800428a:	4b1c      	ldr	r3, [pc, #112]	; (80042fc <MX_TIM3_Init+0xa0>)
 800428c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004290:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004292:	4b1a      	ldr	r3, [pc, #104]	; (80042fc <MX_TIM3_Init+0xa0>)
 8004294:	2200      	movs	r2, #0
 8004296:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004298:	4b18      	ldr	r3, [pc, #96]	; (80042fc <MX_TIM3_Init+0xa0>)
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800429e:	2301      	movs	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80042a6:	2301      	movs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80042b2:	2300      	movs	r3, #0
 80042b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80042b6:	2301      	movs	r3, #1
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80042c2:	f107 030c 	add.w	r3, r7, #12
 80042c6:	4619      	mov	r1, r3
 80042c8:	480c      	ldr	r0, [pc, #48]	; (80042fc <MX_TIM3_Init+0xa0>)
 80042ca:	f005 fa09 	bl	80096e0 <HAL_TIM_Encoder_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80042d4:	f000 fa74 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d8:	2300      	movs	r3, #0
 80042da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042e0:	1d3b      	adds	r3, r7, #4
 80042e2:	4619      	mov	r1, r3
 80042e4:	4805      	ldr	r0, [pc, #20]	; (80042fc <MX_TIM3_Init+0xa0>)
 80042e6:	f005 ff31 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80042f0:	f000 fa66 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042f4:	bf00      	nop
 80042f6:	3730      	adds	r7, #48	; 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	2001f484 	.word	0x2001f484
 8004300:	40000400 	.word	0x40000400

08004304 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b08c      	sub	sp, #48	; 0x30
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f006 fcdd 	bl	800acd2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004320:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <MX_TIM4_Init+0xa0>)
 8004322:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <MX_TIM4_Init+0xa4>)
 8004324:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004326:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <MX_TIM4_Init+0xa0>)
 8004328:	2200      	movs	r2, #0
 800432a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <MX_TIM4_Init+0xa0>)
 800432e:	2200      	movs	r2, #0
 8004330:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <MX_TIM4_Init+0xa0>)
 8004334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004338:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800433a:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <MX_TIM4_Init+0xa0>)
 800433c:	2200      	movs	r2, #0
 800433e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004340:	4b18      	ldr	r3, [pc, #96]	; (80043a4 <MX_TIM4_Init+0xa0>)
 8004342:	2200      	movs	r2, #0
 8004344:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004346:	2301      	movs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800434e:	2301      	movs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800435a:	2300      	movs	r3, #0
 800435c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800435e:	2301      	movs	r3, #1
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004362:	2300      	movs	r3, #0
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	4619      	mov	r1, r3
 8004370:	480c      	ldr	r0, [pc, #48]	; (80043a4 <MX_TIM4_Init+0xa0>)
 8004372:	f005 f9b5 	bl	80096e0 <HAL_TIM_Encoder_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800437c:	f000 fa20 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4805      	ldr	r0, [pc, #20]	; (80043a4 <MX_TIM4_Init+0xa0>)
 800438e:	f005 fedd 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004398:	f000 fa12 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800439c:	bf00      	nop
 800439e:	3730      	adds	r7, #48	; 0x30
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	2001f444 	.word	0x2001f444
 80043a8:	40000800 	.word	0x40000800

080043ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b2:	463b      	mov	r3, r7
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043ba:	4b15      	ldr	r3, [pc, #84]	; (8004410 <MX_TIM6_Init+0x64>)
 80043bc:	4a15      	ldr	r2, [pc, #84]	; (8004414 <MX_TIM6_Init+0x68>)
 80043be:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <MX_TIM6_Init+0x64>)
 80043c2:	2253      	movs	r2, #83	; 0x53
 80043c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <MX_TIM6_Init+0x64>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <MX_TIM6_Init+0x64>)
 80043ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80043d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043d4:	4b0e      	ldr	r3, [pc, #56]	; (8004410 <MX_TIM6_Init+0x64>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80043da:	480d      	ldr	r0, [pc, #52]	; (8004410 <MX_TIM6_Init+0x64>)
 80043dc:	f005 f8c8 	bl	8009570 <HAL_TIM_Base_Init>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80043e6:	f000 f9eb 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80043f2:	463b      	mov	r3, r7
 80043f4:	4619      	mov	r1, r3
 80043f6:	4806      	ldr	r0, [pc, #24]	; (8004410 <MX_TIM6_Init+0x64>)
 80043f8:	f005 fea8 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004402:	f000 f9dd 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	2001f764 	.word	0x2001f764
 8004414:	40001000 	.word	0x40001000

08004418 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800441e:	463b      	mov	r3, r7
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <MX_TIM7_Init+0x60>)
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <MX_TIM7_Init+0x64>)
 800442a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <MX_TIM7_Init+0x60>)
 800442e:	2253      	movs	r2, #83	; 0x53
 8004430:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <MX_TIM7_Init+0x60>)
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <MX_TIM7_Init+0x60>)
 800443a:	2263      	movs	r2, #99	; 0x63
 800443c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <MX_TIM7_Init+0x60>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <MX_TIM7_Init+0x60>)
 8004446:	f005 f893 	bl	8009570 <HAL_TIM_Base_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004450:	f000 f9b6 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800445c:	463b      	mov	r3, r7
 800445e:	4619      	mov	r1, r3
 8004460:	4805      	ldr	r0, [pc, #20]	; (8004478 <MX_TIM7_Init+0x60>)
 8004462:	f005 fe73 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 800446c:	f000 f9a8 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2001f84c 	.word	0x2001f84c
 800447c:	40001400 	.word	0x40001400

08004480 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b092      	sub	sp, #72	; 0x48
 8004484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80044a4:	1d3b      	adds	r3, r7, #4
 80044a6:	2220      	movs	r2, #32
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f006 fc11 	bl	800acd2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <MX_TIM8_Init+0x118>)
 80044b2:	4a3a      	ldr	r2, [pc, #232]	; (800459c <MX_TIM8_Init+0x11c>)
 80044b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <MX_TIM8_Init+0x118>)
 80044b8:	2203      	movs	r2, #3
 80044ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <MX_TIM8_Init+0x118>)
 80044be:	2200      	movs	r2, #0
 80044c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80044c2:	4b35      	ldr	r3, [pc, #212]	; (8004598 <MX_TIM8_Init+0x118>)
 80044c4:	f240 628f 	movw	r2, #1679	; 0x68f
 80044c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ca:	4b33      	ldr	r3, [pc, #204]	; (8004598 <MX_TIM8_Init+0x118>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044d0:	4b31      	ldr	r3, [pc, #196]	; (8004598 <MX_TIM8_Init+0x118>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <MX_TIM8_Init+0x118>)
 80044d8:	2200      	movs	r2, #0
 80044da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80044dc:	482e      	ldr	r0, [pc, #184]	; (8004598 <MX_TIM8_Init+0x118>)
 80044de:	f005 f896 	bl	800960e <HAL_TIM_PWM_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80044e8:	f000 f96a 	bl	80047c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044ec:	2300      	movs	r3, #0
 80044ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80044f8:	4619      	mov	r1, r3
 80044fa:	4827      	ldr	r0, [pc, #156]	; (8004598 <MX_TIM8_Init+0x118>)
 80044fc:	f005 fe26 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004506:	f000 f95b 	bl	80047c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800450a:	2360      	movs	r3, #96	; 0x60
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004516:	2300      	movs	r3, #0
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800451a:	2300      	movs	r3, #0
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004522:	2300      	movs	r3, #0
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800452a:	2200      	movs	r2, #0
 800452c:	4619      	mov	r1, r3
 800452e:	481a      	ldr	r0, [pc, #104]	; (8004598 <MX_TIM8_Init+0x118>)
 8004530:	f005 faa8 	bl	8009a84 <HAL_TIM_PWM_ConfigChannel>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800453a:	f000 f941 	bl	80047c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800453e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004542:	2208      	movs	r2, #8
 8004544:	4619      	mov	r1, r3
 8004546:	4814      	ldr	r0, [pc, #80]	; (8004598 <MX_TIM8_Init+0x118>)
 8004548:	f005 fa9c 	bl	8009a84 <HAL_TIM_PWM_ConfigChannel>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004552:	f000 f935 	bl	80047c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800456a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800456e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004570:	2300      	movs	r3, #0
 8004572:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004574:	1d3b      	adds	r3, r7, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <MX_TIM8_Init+0x118>)
 800457a:	f005 fe63 	bl	800a244 <HAL_TIMEx_ConfigBreakDeadTime>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004584:	f000 f91c 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004588:	4803      	ldr	r0, [pc, #12]	; (8004598 <MX_TIM8_Init+0x118>)
 800458a:	f001 fe5f 	bl	800624c <HAL_TIM_MspPostInit>

}
 800458e:	bf00      	nop
 8004590:	3748      	adds	r7, #72	; 0x48
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2001f5cc 	.word	0x2001f5cc
 800459c:	40010400 	.word	0x40010400

080045a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045a6:	4a12      	ldr	r2, [pc, #72]	; (80045f0 <MX_USART1_UART_Init+0x50>)
 80045a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80045b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045b2:	4b0e      	ldr	r3, [pc, #56]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045be:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045c4:	4b09      	ldr	r3, [pc, #36]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045c6:	220c      	movs	r2, #12
 80045c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045d0:	4b06      	ldr	r3, [pc, #24]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045d6:	4805      	ldr	r0, [pc, #20]	; (80045ec <MX_USART1_UART_Init+0x4c>)
 80045d8:	f005 fe9a 	bl	800a310 <HAL_UART_Init>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045e2:	f000 f8ed 	bl	80047c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045e6:	bf00      	nop
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	2001f6c4 	.word	0x2001f6c4
 80045f0:	40011000 	.word	0x40011000

080045f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	607b      	str	r3, [r7, #4]
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <MX_DMA_Init+0x4c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a0f      	ldr	r2, [pc, #60]	; (8004640 <MX_DMA_Init+0x4c>)
 8004604:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <MX_DMA_Init+0x4c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004616:	2200      	movs	r2, #0
 8004618:	2100      	movs	r1, #0
 800461a:	2038      	movs	r0, #56	; 0x38
 800461c:	f002 fd85 	bl	800712a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004620:	2038      	movs	r0, #56	; 0x38
 8004622:	f002 fd9e 	bl	8007162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	2100      	movs	r1, #0
 800462a:	203a      	movs	r0, #58	; 0x3a
 800462c:	f002 fd7d 	bl	800712a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004630:	203a      	movs	r0, #58	; 0x3a
 8004632:	f002 fd96 	bl	8007162 <HAL_NVIC_EnableIRQ>

}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800

08004644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464a:	f107 0314 	add.w	r3, r7, #20
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	605a      	str	r2, [r3, #4]
 8004654:	609a      	str	r2, [r3, #8]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	4b53      	ldr	r3, [pc, #332]	; (80047ac <MX_GPIO_Init+0x168>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a52      	ldr	r2, [pc, #328]	; (80047ac <MX_GPIO_Init+0x168>)
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b50      	ldr	r3, [pc, #320]	; (80047ac <MX_GPIO_Init+0x168>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <MX_GPIO_Init+0x168>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a4b      	ldr	r2, [pc, #300]	; (80047ac <MX_GPIO_Init+0x168>)
 8004680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004684:	6313      	str	r3, [r2, #48]	; 0x30
 8004686:	4b49      	ldr	r3, [pc, #292]	; (80047ac <MX_GPIO_Init+0x168>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b45      	ldr	r3, [pc, #276]	; (80047ac <MX_GPIO_Init+0x168>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	4a44      	ldr	r2, [pc, #272]	; (80047ac <MX_GPIO_Init+0x168>)
 800469c:	f043 0301 	orr.w	r3, r3, #1
 80046a0:	6313      	str	r3, [r2, #48]	; 0x30
 80046a2:	4b42      	ldr	r3, [pc, #264]	; (80047ac <MX_GPIO_Init+0x168>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	607b      	str	r3, [r7, #4]
 80046b2:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <MX_GPIO_Init+0x168>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <MX_GPIO_Init+0x168>)
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	6313      	str	r3, [r2, #48]	; 0x30
 80046be:	4b3b      	ldr	r3, [pc, #236]	; (80047ac <MX_GPIO_Init+0x168>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046ca:	2300      	movs	r3, #0
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <MX_GPIO_Init+0x168>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4a36      	ldr	r2, [pc, #216]	; (80047ac <MX_GPIO_Init+0x168>)
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	6313      	str	r3, [r2, #48]	; 0x30
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <MX_GPIO_Init+0x168>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f003 0308 	and.w	r3, r3, #8
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80046e6:	2200      	movs	r2, #0
 80046e8:	f24e 2180 	movw	r1, #57984	; 0xe280
 80046ec:	4830      	ldr	r0, [pc, #192]	; (80047b0 <MX_GPIO_Init+0x16c>)
 80046ee:	f003 fc5d 	bl	8007fac <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80046f2:	2200      	movs	r2, #0
 80046f4:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80046f8:	482e      	ldr	r0, [pc, #184]	; (80047b4 <MX_GPIO_Init+0x170>)
 80046fa:	f003 fc57 	bl	8007fac <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80046fe:	2200      	movs	r2, #0
 8004700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004704:	482c      	ldr	r0, [pc, #176]	; (80047b8 <MX_GPIO_Init+0x174>)
 8004706:	f003 fc51 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800470a:	2200      	movs	r2, #0
 800470c:	2104      	movs	r1, #4
 800470e:	482b      	ldr	r0, [pc, #172]	; (80047bc <MX_GPIO_Init+0x178>)
 8004710:	f003 fc4c 	bl	8007fac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004714:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004718:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004722:	2300      	movs	r3, #0
 8004724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	4820      	ldr	r0, [pc, #128]	; (80047b0 <MX_GPIO_Init+0x16c>)
 800472e:	f003 fa8b 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004732:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004736:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004738:	2301      	movs	r3, #1
 800473a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004740:	2300      	movs	r3, #0
 8004742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004744:	f107 0314 	add.w	r3, r7, #20
 8004748:	4619      	mov	r1, r3
 800474a:	481a      	ldr	r0, [pc, #104]	; (80047b4 <MX_GPIO_Init+0x170>)
 800474c:	f003 fa7c 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004750:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	4619      	mov	r1, r3
 8004764:	4814      	ldr	r0, [pc, #80]	; (80047b8 <MX_GPIO_Init+0x174>)
 8004766:	f003 fa6f 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004770:	2301      	movs	r3, #1
 8004772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477c:	f107 0314 	add.w	r3, r7, #20
 8004780:	4619      	mov	r1, r3
 8004782:	480d      	ldr	r0, [pc, #52]	; (80047b8 <MX_GPIO_Init+0x174>)
 8004784:	f003 fa60 	bl	8007c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004788:	2304      	movs	r3, #4
 800478a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800478c:	2301      	movs	r3, #1
 800478e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2300      	movs	r3, #0
 8004792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004798:	f107 0314 	add.w	r3, r7, #20
 800479c:	4619      	mov	r1, r3
 800479e:	4807      	ldr	r0, [pc, #28]	; (80047bc <MX_GPIO_Init+0x178>)
 80047a0:	f003 fa52 	bl	8007c48 <HAL_GPIO_Init>

}
 80047a4:	bf00      	nop
 80047a6:	3728      	adds	r7, #40	; 0x28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40020800 	.word	0x40020800
 80047b4:	40020400 	.word	0x40020400
 80047b8:	40020000 	.word	0x40020000
 80047bc:	40020c00 	.word	0x40020c00

080047c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047c6:	e7fe      	b.n	80047c6 <Error_Handler+0x6>

080047c8 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 80047cc:	2100      	movs	r1, #0
 80047ce:	4808      	ldr	r0, [pc, #32]	; (80047f0 <initMotor+0x28>)
 80047d0:	f004 ff48 	bl	8009664 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80047d4:	2108      	movs	r1, #8
 80047d6:	4806      	ldr	r0, [pc, #24]	; (80047f0 <initMotor+0x28>)
 80047d8:	f004 ff44 	bl	8009664 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80047dc:	210c      	movs	r1, #12
 80047de:	4805      	ldr	r0, [pc, #20]	; (80047f4 <initMotor+0x2c>)
 80047e0:	f004 ff40 	bl	8009664 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 80047e4:	2064      	movs	r0, #100	; 0x64
 80047e6:	f001 ffaf 	bl	8006748 <HAL_Delay>
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	2001f5cc 	.word	0x2001f5cc
 80047f4:	2001f7a4 	.word	0x2001f7a4

080047f8 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 80047fe:	4b2a      	ldr	r3, [pc, #168]	; (80048a8 <motorCtrlFlip+0xb0>)
 8004800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db0d      	blt.n	8004824 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <motorCtrlFlip+0xb0>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800480e:	4b27      	ldr	r3, [pc, #156]	; (80048ac <motorCtrlFlip+0xb4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004816:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004818:	2201      	movs	r2, #1
 800481a:	2180      	movs	r1, #128	; 0x80
 800481c:	4824      	ldr	r0, [pc, #144]	; (80048b0 <motorCtrlFlip+0xb8>)
 800481e:	f003 fbc5 	bl	8007fac <HAL_GPIO_WritePin>
 8004822:	e010      	b.n	8004846 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8004824:	4b20      	ldr	r3, [pc, #128]	; (80048a8 <motorCtrlFlip+0xb0>)
 8004826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800482a:	b29b      	uxth	r3, r3
 800482c:	425b      	negs	r3, r3
 800482e:	b29b      	uxth	r3, r3
 8004830:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <motorCtrlFlip+0xb4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800483a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800483c:	2200      	movs	r2, #0
 800483e:	2180      	movs	r1, #128	; 0x80
 8004840:	481b      	ldr	r0, [pc, #108]	; (80048b0 <motorCtrlFlip+0xb8>)
 8004842:	f003 fbb3 	bl	8007fac <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <motorCtrlFlip+0xbc>)
 8004848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800484c:	2b00      	cmp	r3, #0
 800484e:	db0e      	blt.n	800486e <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8004850:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <motorCtrlFlip+0xbc>)
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <motorCtrlFlip+0xb4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004860:	2201      	movs	r2, #1
 8004862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004866:	4812      	ldr	r0, [pc, #72]	; (80048b0 <motorCtrlFlip+0xb8>)
 8004868:	f003 fba0 	bl	8007fac <HAL_GPIO_WritePin>
 800486c:	e011      	b.n	8004892 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <motorCtrlFlip+0xbc>)
 8004870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004874:	b29b      	uxth	r3, r3
 8004876:	425b      	negs	r3, r3
 8004878:	b29b      	uxth	r3, r3
 800487a:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <motorCtrlFlip+0xb4>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004884:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004886:	2200      	movs	r2, #0
 8004888:	f44f 7100 	mov.w	r1, #512	; 0x200
 800488c:	4808      	ldr	r0, [pc, #32]	; (80048b0 <motorCtrlFlip+0xb8>)
 800488e:	f003 fb8d 	bl	8007fac <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <motorCtrlFlip+0xc0>)
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8004898:	4a08      	ldr	r2, [pc, #32]	; (80048bc <motorCtrlFlip+0xc4>)
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	8013      	strh	r3, [r2, #0]
}
 800489e:	bf00      	nop
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20017e08 	.word	0x20017e08
 80048ac:	2001f5cc 	.word	0x2001f5cc
 80048b0:	40020800 	.word	0x40020800
 80048b4:	20017e0a 	.word	0x20017e0a
 80048b8:	2001f890 	.word	0x2001f890
 80048bc:	2001f88e 	.word	0x2001f88e

080048c0 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80048c4:	4b05      	ldr	r3, [pc, #20]	; (80048dc <suctionmotorCtrlFlip+0x1c>)
 80048c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <suctionmotorCtrlFlip+0x20>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20017e0c 	.word	0x20017e0c
 80048e0:	2001f7a4 	.word	0x2001f7a4

080048e4 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	460a      	mov	r2, r1
 80048ee:	80fb      	strh	r3, [r7, #6]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 80048f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048f8:	f240 628e 	movw	r2, #1678	; 0x68e
 80048fc:	4293      	cmp	r3, r2
 80048fe:	dd03      	ble.n	8004908 <setMotor+0x24>
 8004900:	f240 638f 	movw	r3, #1679	; 0x68f
 8004904:	80fb      	strh	r3, [r7, #6]
 8004906:	e007      	b.n	8004918 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8004908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800490c:	4a11      	ldr	r2, [pc, #68]	; (8004954 <setMotor+0x70>)
 800490e:	4293      	cmp	r3, r2
 8004910:	da02      	bge.n	8004918 <setMotor+0x34>
 8004912:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004916:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8004918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800491c:	f240 628e 	movw	r2, #1678	; 0x68e
 8004920:	4293      	cmp	r3, r2
 8004922:	dd03      	ble.n	800492c <setMotor+0x48>
 8004924:	f240 638f 	movw	r3, #1679	; 0x68f
 8004928:	80bb      	strh	r3, [r7, #4]
 800492a:	e007      	b.n	800493c <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 800492c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <setMotor+0x70>)
 8004932:	4293      	cmp	r3, r2
 8004934:	da02      	bge.n	800493c <setMotor+0x58>
 8004936:	f64f 1371 	movw	r3, #63857	; 0xf971
 800493a:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 800493c:	4a06      	ldr	r2, [pc, #24]	; (8004958 <setMotor+0x74>)
 800493e:	88fb      	ldrh	r3, [r7, #6]
 8004940:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8004942:	4a06      	ldr	r2, [pc, #24]	; (800495c <setMotor+0x78>)
 8004944:	88bb      	ldrh	r3, [r7, #4]
 8004946:	8013      	strh	r3, [r2, #0]
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	fffff972 	.word	0xfffff972
 8004958:	20017e08 	.word	0x20017e08
 800495c:	20017e0a 	.word	0x20017e0a

08004960 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 800496a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496e:	2b00      	cmp	r3, #0
 8004970:	bfb8      	it	lt
 8004972:	425b      	neglt	r3, r3
 8004974:	b21a      	sxth	r2, r3
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <setsuctionMotor+0x38>)
 8004978:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 800497a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497e:	f240 3246 	movw	r2, #838	; 0x346
 8004982:	4293      	cmp	r3, r2
 8004984:	dd02      	ble.n	800498c <setsuctionMotor+0x2c>
 8004986:	f240 3347 	movw	r3, #839	; 0x347
 800498a:	80fb      	strh	r3, [r7, #6]
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20017e0c 	.word	0x20017e0c

0800499c <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static float V_motor;

void updateSideSensorStatus(){
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 80049a0:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <updateSideSensorStatus+0x44>)
 80049a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049aa:	dc03      	bgt.n	80049b4 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 80049ac:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <updateSideSensorStatus+0x48>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e002      	b.n	80049ba <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <updateSideSensorStatus+0x48>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <updateSideSensorStatus+0x4c>)
 80049bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049c4:	dc03      	bgt.n	80049ce <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <updateSideSensorStatus+0x50>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 80049cc:	e002      	b.n	80049d4 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <updateSideSensorStatus+0x50>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	2001f40c 	.word	0x2001f40c
 80049e4:	2001f34c 	.word	0x2001f34c
 80049e8:	2001f394 	.word	0x2001f394
 80049ec:	2001f34d 	.word	0x2001f34d

080049f0 <setRunMode>:

void setRunMode(uint16_t num){
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
	mode = num;
 80049fa:	4a04      	ldr	r2, [pc, #16]	; (8004a0c <setRunMode+0x1c>)
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	8013      	strh	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	2001f5b4 	.word	0x2001f5b4

08004a10 <isCrossLine>:

bool isCrossLine()
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <isCrossLine+0x88>)
 8004a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a24:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8004a28:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <isCrossLine+0x88>)
 8004a2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a36:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8004a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004a9c <isCrossLine+0x8c>
 8004a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	d50f      	bpl.n	8004a6c <isCrossLine+0x5c>
 8004a4c:	edd7 7a00 	vldr	s15, [r7]
 8004a50:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004a9c <isCrossLine+0x8c>
 8004a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	d506      	bpl.n	8004a6c <isCrossLine+0x5c>
		cnt++;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <isCrossLine+0x90>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	3301      	adds	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <isCrossLine+0x90>)
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	e002      	b.n	8004a72 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <isCrossLine+0x90>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <isCrossLine+0x90>)
 8004a74:	881b      	ldrh	r3, [r3, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d903      	bls.n	8004a82 <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <isCrossLine+0x94>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e002      	b.n	8004a88 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <isCrossLine+0x94>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <isCrossLine+0x94>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	2001f3f0 	.word	0x2001f3f0
 8004a9c:	442f0000 	.word	0x442f0000
 8004aa0:	2001f370 	.word	0x2001f370
 8004aa4:	2001f372 	.word	0x2001f372

08004aa8 <isContinuousCurvature>:

bool isContinuousCurvature()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	ed2d 8b02 	vpush	{d8}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8004ab6:	4b2e      	ldr	r3, [pc, #184]	; (8004b70 <isContinuousCurvature+0xc8>)
 8004ab8:	ed93 8a00 	vldr	s16, [r3]
 8004abc:	f7fc fe78 	bl	80017b0 <getTheta10mm>
 8004ac0:	eef0 7a40 	vmov.f32	s15, s0
 8004ac4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004ac8:	eef0 7ae7 	vabs.f32	s15, s15
 8004acc:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <isContinuousCurvature+0xcc>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <isContinuousCurvature+0xcc>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8004ae6:	6838      	ldr	r0, [r7, #0]
 8004ae8:	f7fb fd2e 	bl	8000548 <__aeabi_f2d>
 8004aec:	a31e      	add	r3, pc, #120	; (adr r3, 8004b68 <isContinuousCurvature+0xc0>)
 8004aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af2:	f7fb fffd 	bl	8000af0 <__aeabi_dcmple>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <isContinuousCurvature+0x6a>
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004afe:	edd3 7a00 	vldr	s15, [r3]
 8004b02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004b0c:	edc3 7a00 	vstr	s15, [r3]
 8004b10:	e003      	b.n	8004b1a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8004b12:	4b19      	ldr	r3, [pc, #100]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8004b1a:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004b1c:	edd3 7a00 	vldr	s15, [r3]
 8004b20:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004b7c <isContinuousCurvature+0xd4>
 8004b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	db01      	blt.n	8004b32 <isContinuousCurvature+0x8a>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004b34:	edd3 7a00 	vldr	s15, [r3]
 8004b38:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004b80 <isContinuousCurvature+0xd8>
 8004b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b44:	db02      	blt.n	8004b4c <isContinuousCurvature+0xa4>
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <isContinuousCurvature+0xd0>)
 8004b48:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <isContinuousCurvature+0xdc>)
 8004b4a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8004b4c:	f7fc fe30 	bl	80017b0 <getTheta10mm>
 8004b50:	eef0 7a40 	vmov.f32	s15, s0
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <isContinuousCurvature+0xc8>)
 8004b56:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	ecbd 8b02 	vpop	{d8}
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	47ae147b 	.word	0x47ae147b
 8004b6c:	3f947ae1 	.word	0x3f947ae1
 8004b70:	2001f374 	.word	0x2001f374
 8004b74:	2001f350 	.word	0x2001f350
 8004b78:	2001f378 	.word	0x2001f378
 8004b7c:	42200000 	.word	0x42200000
 8004b80:	447a0000 	.word	0x447a0000
 8004b84:	447a0000 	.word	0x447a0000

08004b88 <isTargetDistance>:

bool isTargetDistance(float target){
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8004b92:	2300      	movs	r3, #0
 8004b94:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8004b96:	f7fc fc37 	bl	8001408 <getDistance10mm>
 8004b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004baa:	d801      	bhi.n	8004bb0 <isTargetDistance+0x28>
		ret = true;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <running>:

void running(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8004bc6:	f000 f9eb 	bl	8004fa0 <runningInit>
	startLineTrace();
 8004bca:	f7fd f987 	bl	8001edc <startLineTrace>
	startVelocityControl();
 8004bce:	f7fe fcdb 	bl	8003588 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8004bd2:	4b6b      	ldr	r3, [pc, #428]	; (8004d80 <running+0x1c4>)
 8004bd4:	edd3 7a00 	vldr	s15, [r3]
 8004bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004bdc:	f7fe fc2e 	bl	800343c <setTargetVelocity>

	while(goal_flag == false){
 8004be0:	e0c2      	b.n	8004d68 <running+0x1ac>
		switch(pattern){
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b14      	cmp	r3, #20
 8004be6:	f200 80b4 	bhi.w	8004d52 <running+0x196>
 8004bea:	a201      	add	r2, pc, #4	; (adr r2, 8004bf0 <running+0x34>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c45 	.word	0x08004c45
 8004bf4:	08004d53 	.word	0x08004d53
 8004bf8:	08004d53 	.word	0x08004d53
 8004bfc:	08004d53 	.word	0x08004d53
 8004c00:	08004d53 	.word	0x08004d53
 8004c04:	08004c7b 	.word	0x08004c7b
 8004c08:	08004d53 	.word	0x08004d53
 8004c0c:	08004d53 	.word	0x08004d53
 8004c10:	08004d53 	.word	0x08004d53
 8004c14:	08004d53 	.word	0x08004d53
 8004c18:	08004c8f 	.word	0x08004c8f
 8004c1c:	08004d53 	.word	0x08004d53
 8004c20:	08004d53 	.word	0x08004d53
 8004c24:	08004d53 	.word	0x08004d53
 8004c28:	08004d53 	.word	0x08004d53
 8004c2c:	08004d53 	.word	0x08004d53
 8004c30:	08004d53 	.word	0x08004d53
 8004c34:	08004d53 	.word	0x08004d53
 8004c38:	08004d53 	.word	0x08004d53
 8004c3c:	08004d53 	.word	0x08004d53
 8004c40:	08004d27 	.word	0x08004d27

				  case 0:
					  if(getSideSensorStatusR() == true){
 8004c44:	f001 f82e 	bl	8005ca4 <getSideSensorStatusR>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d07e      	beq.n	8004d4c <running+0x190>
						  start_goal_line_cnt++;
 8004c4e:	4b4d      	ldr	r3, [pc, #308]	; (8004d84 <running+0x1c8>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	3301      	adds	r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	4b4b      	ldr	r3, [pc, #300]	; (8004d84 <running+0x1c8>)
 8004c58:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 8004c5a:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <running+0x1cc>)
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d102      	bne.n	8004c68 <running+0xac>
 8004c62:	f000 fa13 	bl	800508c <startLogging>
 8004c66:	e001      	b.n	8004c6c <running+0xb0>
						  else startVelocityUpdate();
 8004c68:	f000 fa2c 	bl	80050c4 <startVelocityUpdate>

						  clearGoalJudgeDistance();
 8004c6c:	f7fc fb94 	bl	8001398 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8004c70:	f7fc fba0 	bl	80013b4 <clearSideLineJudgeDistance>
						  pattern = 5;
 8004c74:	2305      	movs	r3, #5
 8004c76:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8004c78:	e068      	b.n	8004d4c <running+0x190>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8004c7a:	f001 f813 	bl	8005ca4 <getSideSensorStatusR>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f083 0301 	eor.w	r3, r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <running+0xd2>
 8004c8a:	230a      	movs	r3, #10
 8004c8c:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8004c8e:	f000 fffd 	bl	8005c8c <getSideSensorStatusL>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <running+0xe6>
						  goal_judge_flag = false;
 8004c98:	4b3c      	ldr	r3, [pc, #240]	; (8004d8c <running+0x1d0>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004c9e:	f7fc fb7b 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <running+0x1d0>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f083 0301 	eor.w	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <running+0x120>
 8004cb0:	f000 fff8 	bl	8005ca4 <getSideSensorStatusR>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <running+0x120>
 8004cba:	f7fc fb25 	bl	8001308 <getGoalJudgeDistance>
 8004cbe:	eeb0 7a40 	vmov.f32	s14, s0
 8004cc2:	eddf 7a33 	vldr	s15, [pc, #204]	; 8004d90 <running+0x1d4>
 8004cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	db05      	blt.n	8004cdc <running+0x120>
						  goal_judge_flag = true;
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <running+0x1d0>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004cd6:	f7fc fb5f 	bl	8001398 <clearGoalJudgeDistance>
 8004cda:	e019      	b.n	8004d10 <running+0x154>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8004cdc:	4b2b      	ldr	r3, [pc, #172]	; (8004d8c <running+0x1d0>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d015      	beq.n	8004d10 <running+0x154>
 8004ce4:	f7fc fb10 	bl	8001308 <getGoalJudgeDistance>
 8004ce8:	eeb0 7a40 	vmov.f32	s14, s0
 8004cec:	eddf 7a28 	vldr	s15, [pc, #160]	; 8004d90 <running+0x1d4>
 8004cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	db0a      	blt.n	8004d10 <running+0x154>
						  start_goal_line_cnt++;
 8004cfa:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <running+0x1c8>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b20      	ldr	r3, [pc, #128]	; (8004d84 <running+0x1c8>)
 8004d04:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8004d06:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <running+0x1d0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004d0c:	f7fc fb44 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8004d10:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <running+0x1c8>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d91b      	bls.n	8004d50 <running+0x194>
						  stopLogging();
 8004d18:	f000 f9c8 	bl	80050ac <stopLogging>
						  stopVelocityUpdate();
 8004d1c:	f000 f9f4 	bl	8005108 <stopVelocityUpdate>
						  pattern = 20;
 8004d20:	2314      	movs	r3, #20
 8004d22:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8004d24:	e014      	b.n	8004d50 <running+0x194>

				  case 20:

					  setTargetVelocity(1.0);
 8004d26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004d2a:	f7fe fb87 	bl	800343c <setTargetVelocity>
					  HAL_Delay(100);
 8004d2e:	2064      	movs	r0, #100	; 0x64
 8004d30:	f001 fd0a 	bl	8006748 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 8004d34:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8004d94 <running+0x1d8>
 8004d38:	f7fe fb80 	bl	800343c <setTargetVelocity>
					  HAL_Delay(500);
 8004d3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d40:	f001 fd02 	bl	8006748 <HAL_Delay>

					  goal_flag = true;
 8004d44:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <running+0x1dc>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]

					  break;
 8004d4a:	e002      	b.n	8004d52 <running+0x196>
					  break;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <running+0x196>
					  break;
 8004d50:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8004d52:	f7fd f949 	bl	8001fe8 <getCouseOutFlag>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <running+0x1ac>
		{
			stopLogging();
 8004d5c:	f000 f9a6 	bl	80050ac <stopLogging>
			stopVelocityUpdate();
 8004d60:	f000 f9d2 	bl	8005108 <stopVelocityUpdate>
		    pattern = 20;
 8004d64:	2314      	movs	r3, #20
 8004d66:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <running+0x1dc>)
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	f083 0301 	eor.w	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f47f af35 	bne.w	8004be2 <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2001f358 	.word	0x2001f358
 8004d84:	2001f340 	.word	0x2001f340
 8004d88:	2001f5b4 	.word	0x2001f5b4
 8004d8c:	2001f34f 	.word	0x2001f34f
 8004d90:	428c0000 	.word	0x428c0000
 8004d94:	00000000 	.word	0x00000000
 8004d98:	2001f34e 	.word	0x2001f34e

08004d9c <runningFlip>:

void runningFlip()
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8004da0:	4b75      	ldr	r3, [pc, #468]	; (8004f78 <runningFlip+0x1dc>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80e5 	beq.w	8004f74 <runningFlip+0x1d8>
		setLED('G');
 8004daa:	2047      	movs	r0, #71	; 0x47
 8004dac:	f7fc fd1c 	bl	80017e8 <setLED>
		updateTargetVelocity();
 8004db0:	f000 fcf4 	bl	800579c <updateTargetVelocity>

		if(isTargetDistance(10) == true){
 8004db4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004db8:	f7ff fee6 	bl	8004b88 <isTargetDistance>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00d      	beq.n	8004dde <runningFlip+0x42>
			saveLog();
 8004dc2:	f000 f931 	bl	8005028 <saveLog>

			if(isContinuousCurvature() == true){
 8004dc6:	f7ff fe6f 	bl	8004aa8 <isContinuousCurvature>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <runningFlip+0x3a>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8004dd0:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <runningFlip+0x1e0>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8004dd6:	f7fc fb25 	bl	8001424 <clearDistance10mm>
			clearTheta10mm();
 8004dda:	f7fc fcf7 	bl	80017cc <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8004dde:	f7ff fe17 	bl	8004a10 <isCrossLine>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d026      	beq.n	8004e36 <runningFlip+0x9a>
 8004de8:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <runningFlip+0x1e4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	f083 0301 	eor.w	r3, r3, #1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d01f      	beq.n	8004e36 <runningFlip+0x9a>
			cross_line_ignore_flag = true;
 8004df6:	4b62      	ldr	r3, [pc, #392]	; (8004f80 <runningFlip+0x1e4>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8004dfc:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <runningFlip+0x1e0>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8004e02:	f7fc fae5 	bl	80013d0 <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8004e06:	f7fc faf1 	bl	80013ec <clearSideLineIgnoreDistance>

			if(mode == 1){
 8004e0a:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <runningFlip+0x1e8>)
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10b      	bne.n	8004e2a <runningFlip+0x8e>
				correction_check_cnt_cross = 0;
 8004e12:	4b5d      	ldr	r3, [pc, #372]	; (8004f88 <runningFlip+0x1ec>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8004e18:	f7fc fa68 	bl	80012ec <getTotalDistance>
 8004e1c:	eef0 7a40 	vmov.f32	s15, s0
 8004e20:	eeb0 0a67 	vmov.f32	s0, s15
 8004e24:	f7fd ff5e 	bl	8002ce4 <saveCross>
			if(mode == 1){
 8004e28:	e017      	b.n	8004e5a <runningFlip+0xbe>
			}
			else{
				correction_check_cnt_cross = 0;
 8004e2a:	4b57      	ldr	r3, [pc, #348]	; (8004f88 <runningFlip+0x1ec>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8004e30:	f000 fd2a 	bl	8005888 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 8004e34:	e011      	b.n	8004e5a <runningFlip+0xbe>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 8004e36:	4b52      	ldr	r3, [pc, #328]	; (8004f80 <runningFlip+0x1e4>)
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <runningFlip+0xbe>
 8004e3e:	f7fc fa8f 	bl	8001360 <getCrossLineIgnoreDistance>
 8004e42:	eeb0 7a40 	vmov.f32	s14, s0
 8004e46:	eddf 7a51 	vldr	s15, [pc, #324]	; 8004f8c <runningFlip+0x1f0>
 8004e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	db02      	blt.n	8004e5a <runningFlip+0xbe>
			cross_line_ignore_flag = false;
 8004e54:	4b4a      	ldr	r3, [pc, #296]	; (8004f80 <runningFlip+0x1e4>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 8004e5a:	f000 ff23 	bl	8005ca4 <getSideSensorStatusR>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d004      	beq.n	8004e6e <runningFlip+0xd2>
			side_line_judge_flag = false;
 8004e64:	4b4a      	ldr	r3, [pc, #296]	; (8004f90 <runningFlip+0x1f4>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004e6a:	f7fc faa3 	bl	80013b4 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag== false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8004e6e:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <runningFlip+0x1f4>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f083 0301 	eor.w	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <runningFlip+0x10c>
 8004e7c:	f000 ff06 	bl	8005c8c <getSideSensorStatusL>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <runningFlip+0x10c>
 8004e86:	f7fc fa4d 	bl	8001324 <getSideLineJudgeDistance>
 8004e8a:	eeb0 7a40 	vmov.f32	s14, s0
 8004e8e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8004f94 <runningFlip+0x1f8>
 8004e92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9a:	db05      	blt.n	8004ea8 <runningFlip+0x10c>
			side_line_judge_flag= true;
 8004e9c:	4b3c      	ldr	r3, [pc, #240]	; (8004f90 <runningFlip+0x1f4>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8004ea2:	f7fc fa87 	bl	80013b4 <clearSideLineJudgeDistance>
 8004ea6:	e02f      	b.n	8004f08 <runningFlip+0x16c>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8004ea8:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <runningFlip+0x1f4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02b      	beq.n	8004f08 <runningFlip+0x16c>
 8004eb0:	f7fc fa38 	bl	8001324 <getSideLineJudgeDistance>
 8004eb4:	eeb0 7a40 	vmov.f32	s14, s0
 8004eb8:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004f94 <runningFlip+0x1f8>
 8004ebc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec4:	db20      	blt.n	8004f08 <runningFlip+0x16c>
			clearSideLineJudgeDistance();
 8004ec6:	f7fc fa75 	bl	80013b4 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8004eca:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <runningFlip+0x1f4>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <runningFlip+0x1e0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d017      	beq.n	8004f08 <runningFlip+0x16c>
				continuous_curve_flag = false;
 8004ed8:	4b28      	ldr	r3, [pc, #160]	; (8004f7c <runningFlip+0x1e0>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8004ede:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <runningFlip+0x1fc>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <runningFlip+0x1e8>)
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d10b      	bne.n	8004f04 <runningFlip+0x168>
					correction_check_cnt_side = 0;
 8004eec:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <runningFlip+0x200>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8004ef2:	f7fc f9fb 	bl	80012ec <getTotalDistance>
 8004ef6:	eef0 7a40 	vmov.f32	s15, s0
 8004efa:	eeb0 0a67 	vmov.f32	s0, s15
 8004efe:	f7fd ff09 	bl	8002d14 <saveSide>
 8004f02:	e001      	b.n	8004f08 <runningFlip+0x16c>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8004f04:	f000 fd16 	bl	8005934 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8004f08:	4b1f      	ldr	r3, [pc, #124]	; (8004f88 <runningFlip+0x1ec>)
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <runningFlip+0x1ec>)
 8004f12:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8004f14:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <runningFlip+0x200>)
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	4b1f      	ldr	r3, [pc, #124]	; (8004f9c <runningFlip+0x200>)
 8004f1e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8004f20:	4b19      	ldr	r3, [pc, #100]	; (8004f88 <runningFlip+0x1ec>)
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d903      	bls.n	8004f34 <runningFlip+0x198>
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <runningFlip+0x1ec>)
 8004f2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f32:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <runningFlip+0x200>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d903      	bls.n	8004f48 <runningFlip+0x1ac>
 8004f40:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <runningFlip+0x200>)
 8004f42:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f46:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <runningFlip+0x200>)
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	2b96      	cmp	r3, #150	; 0x96
 8004f4e:	d803      	bhi.n	8004f58 <runningFlip+0x1bc>
 8004f50:	2047      	movs	r0, #71	; 0x47
 8004f52:	f7fc fd17 	bl	8001984 <setLED2>
 8004f56:	e002      	b.n	8004f5e <runningFlip+0x1c2>
	    else setLED2('N');
 8004f58:	204e      	movs	r0, #78	; 0x4e
 8004f5a:	f7fc fd13 	bl	8001984 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <runningFlip+0x200>)
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2b96      	cmp	r3, #150	; 0x96
 8004f64:	d803      	bhi.n	8004f6e <runningFlip+0x1d2>
 8004f66:	2042      	movs	r0, #66	; 0x42
 8004f68:	f7fc fc3e 	bl	80017e8 <setLED>
	    else setLED('G');
	}
}
 8004f6c:	e002      	b.n	8004f74 <runningFlip+0x1d8>
	    else setLED('G');
 8004f6e:	2047      	movs	r0, #71	; 0x47
 8004f70:	f7fc fc3a 	bl	80017e8 <setLED>
}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2001f352 	.word	0x2001f352
 8004f7c:	2001f351 	.word	0x2001f351
 8004f80:	2001f34a 	.word	0x2001f34a
 8004f84:	2001f5b4 	.word	0x2001f5b4
 8004f88:	2001f346 	.word	0x2001f346
 8004f8c:	42480000 	.word	0x42480000
 8004f90:	2001f34b 	.word	0x2001f34b
 8004f94:	42700000 	.word	0x42700000
 8004f98:	2001f350 	.word	0x2001f350
 8004f9c:	2001f348 	.word	0x2001f348

08004fa0 <runningInit>:

void runningInit()
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
	if(mode == 1){
 8004fa4:	4b18      	ldr	r3, [pc, #96]	; (8005008 <runningInit+0x68>)
 8004fa6:	881b      	ldrh	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d105      	bne.n	8004fb8 <runningInit+0x18>
		setLED('W');
 8004fac:	2057      	movs	r0, #87	; 0x57
 8004fae:	f7fc fc1b 	bl	80017e8 <setLED>
		ereaseLog();
 8004fb2:	f7fd fedf 	bl	8002d74 <ereaseLog>
 8004fb6:	e00b      	b.n	8004fd0 <runningInit+0x30>
	}
	else
	{
		loadDistance();
 8004fb8:	f7fd ff58 	bl	8002e6c <loadDistance>
		loadTheta();
 8004fbc:	f7fd ff94 	bl	8002ee8 <loadTheta>
		loadCross();
 8004fc0:	f7fd ffd0 	bl	8002f64 <loadCross>
		loadSide();
 8004fc4:	f7fe f80c 	bl	8002fe0 <loadSide>
		createVelocityTable();
 8004fc8:	f000 f8aa 	bl	8005120 <createVelocityTable>

		ereaseDebugLog();
 8004fcc:	f7fd ff0e 	bl	8002dec <ereaseDebugLog>
	}

	clearCrossLineIgnoreDistance();
 8004fd0:	f7fc f9fe 	bl	80013d0 <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8004fd4:	f7fc fa0a 	bl	80013ec <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <runningInit+0x6c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <runningInit+0x70>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <runningInit+0x74>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8004fea:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <runningInit+0x78>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <runningInit+0x7c>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <runningInit+0x80>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <runningInit+0x84>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2001f5b4 	.word	0x2001f5b4
 800500c:	2001f340 	.word	0x2001f340
 8005010:	2001f34a 	.word	0x2001f34a
 8005014:	2001f34b 	.word	0x2001f34b
 8005018:	2001f34f 	.word	0x2001f34f
 800501c:	2001f350 	.word	0x2001f350
 8005020:	2001f351 	.word	0x2001f351
 8005024:	2001f352 	.word	0x2001f352

08005028 <saveLog>:

void saveLog(){
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 800502c:	4b15      	ldr	r3, [pc, #84]	; (8005084 <saveLog+0x5c>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005034:	f7fc f9e8 	bl	8001408 <getDistance10mm>
 8005038:	eef0 7a40 	vmov.f32	s15, s0
 800503c:	eeb0 0a67 	vmov.f32	s0, s15
 8005040:	f7fd fe20 	bl	8002c84 <saveDistance>
		saveTheta(getTheta10mm());
 8005044:	f7fc fbb4 	bl	80017b0 <getTheta10mm>
 8005048:	eef0 7a40 	vmov.f32	s15, s0
 800504c:	eeb0 0a67 	vmov.f32	s0, s15
 8005050:	f7fd fe30 	bl	8002cb4 <saveTheta>
	}
	else if(velocity_update_flag == true){
		saveDebug(getTargetVelocity());
		saveDebug(getCurrentVelocity());
	}
}
 8005054:	e013      	b.n	800507e <saveLog+0x56>
	else if(velocity_update_flag == true){
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <saveLog+0x60>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00f      	beq.n	800507e <saveLog+0x56>
		saveDebug(getTargetVelocity());
 800505e:	f7fe fa85 	bl	800356c <getTargetVelocity>
 8005062:	eef0 7a40 	vmov.f32	s15, s0
 8005066:	eeb0 0a67 	vmov.f32	s0, s15
 800506a:	f7fd fe6b 	bl	8002d44 <saveDebug>
		saveDebug(getCurrentVelocity());
 800506e:	f7fe fa3f 	bl	80034f0 <getCurrentVelocity>
 8005072:	eef0 7a40 	vmov.f32	s15, s0
 8005076:	eeb0 0a67 	vmov.f32	s0, s15
 800507a:	f7fd fe63 	bl	8002d44 <saveDebug>
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2001f353 	.word	0x2001f353
 8005088:	2001f354 	.word	0x2001f354

0800508c <startLogging>:

void startLogging(){
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005090:	f7fc f9c8 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 8005094:	f7fc fb9a 	bl	80017cc <clearTheta10mm>
	clearTotalDistance();
 8005098:	f7fc f970 	bl	800137c <clearTotalDistance>
	logging_flag = true;
 800509c:	4b02      	ldr	r3, [pc, #8]	; (80050a8 <startLogging+0x1c>)
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2001f353 	.word	0x2001f353

080050ac <stopLogging>:

void stopLogging()
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	logging_flag = false;
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <stopLogging+0x14>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
}
 80050b6:	bf00      	nop
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	2001f353 	.word	0x2001f353

080050c4 <startVelocityUpdate>:

void startVelocityUpdate(){
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80050c8:	f7fc f9ac 	bl	8001424 <clearDistance10mm>
	clearTotalDistance();
 80050cc:	f7fc f956 	bl	800137c <clearTotalDistance>
	velocity_table_idx = 0;
 80050d0:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <startVelocityUpdate+0x30>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <startVelocityUpdate+0x34>)
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 80050de:	4b07      	ldr	r3, [pc, #28]	; (80050fc <startVelocityUpdate+0x38>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <startVelocityUpdate+0x3c>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <startVelocityUpdate+0x40>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	801a      	strh	r2, [r3, #0]
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2001f898 	.word	0x2001f898
 80050f8:	2001f894 	.word	0x2001f894
 80050fc:	2001f354 	.word	0x2001f354
 8005100:	2001f342 	.word	0x2001f342
 8005104:	2001f344 	.word	0x2001f344

08005108 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <stopVelocityUpdate+0x14>)
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	2001f354 	.word	0x2001f354

08005120 <createVelocityTable>:

void createVelocityTable(){
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b08d      	sub	sp, #52	; 0x34
 8005124:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 8005126:	f7fd ffd7 	bl	80030d8 <getDistanceArrayPointer>
 800512a:	6178      	str	r0, [r7, #20]
	p_theta = getThetaArrayPointer();
 800512c:	f7fd ffde 	bl	80030ec <getThetaArrayPointer>
 8005130:	6138      	str	r0, [r7, #16]
	float temp_distance, temp_theta;

	uint16_t log_size = getDistanceLogSize();
 8005132:	f7fd fe6b 	bl	8002e0c <getDistanceLogSize>
 8005136:	4603      	mov	r3, r0
 8005138:	81fb      	strh	r3, [r7, #14]

	uint16_t crossline_idx = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	857b      	strh	r3, [r7, #42]	; 0x2a
	float total_distance = 0;
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i = 0; i < log_size; i++){
 8005144:	2300      	movs	r3, #0
 8005146:	847b      	strh	r3, [r7, #34]	; 0x22
 8005148:	e079      	b.n	800523e <createVelocityTable+0x11e>
		temp_distance = p_distance[i];
 800514a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8005156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_theta == 0) temp_theta = 0.00001;
 8005162:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005166:	eef5 7a40 	vcmp.f32	s15, #0.0
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	d101      	bne.n	8005174 <createVelocityTable+0x54>
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <createVelocityTable+0x190>)
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
		float radius = fabs(temp_distance / temp_theta);
 8005174:	edd7 6a02 	vldr	s13, [r7, #8]
 8005178:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800517c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005180:	eef0 7ae7 	vabs.f32	s15, s15
 8005184:	edc7 7a07 	vstr	s15, [r7, #28]
		if(radius >= straight_radius) radius = straight_radius;
 8005188:	4b4a      	ldr	r3, [pc, #296]	; (80052b4 <createVelocityTable+0x194>)
 800518a:	edd3 7a00 	vldr	s15, [r3]
 800518e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519a:	db02      	blt.n	80051a2 <createVelocityTable+0x82>
 800519c:	4b45      	ldr	r3, [pc, #276]	; (80052b4 <createVelocityTable+0x194>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	61fb      	str	r3, [r7, #28]
		velocity_table[i] = radius2Velocity(radius);
 80051a2:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80051a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80051a8:	f000 f896 	bl	80052d8 <radius2Velocity>
 80051ac:	eef0 7a40 	vmov.f32	s15, s0
 80051b0:	4a41      	ldr	r2, [pc, #260]	; (80052b8 <createVelocityTable+0x198>)
 80051b2:	00a3      	lsls	r3, r4, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	edc3 7a00 	vstr	s15, [r3]

		//Forced maximum speed on the crossline
		total_distance += temp_distance;
 80051ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051be:	edd7 7a02 	vldr	s15, [r7, #8]
 80051c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051c6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float crossline_distance = getCrossLog(crossline_idx);
 80051ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fd ffad 	bl	800312c <getCrossLog>
 80051d2:	ed87 0a01 	vstr	s0, [r7, #4]
		if(crossline_distance + 60 >= total_distance && total_distance >= crossline_distance - 60){
 80051d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80051da:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80052bc <createVelocityTable+0x19c>
 80051de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051e2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ee:	d813      	bhi.n	8005218 <createVelocityTable+0xf8>
 80051f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80051f4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80052bc <createVelocityTable+0x19c>
 80051f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005208:	db06      	blt.n	8005218 <createVelocityTable+0xf8>
			 velocity_table[i] = max_velocity;
 800520a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800520c:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <createVelocityTable+0x1a0>)
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	4929      	ldr	r1, [pc, #164]	; (80052b8 <createVelocityTable+0x198>)
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	440b      	add	r3, r1
 8005216:	601a      	str	r2, [r3, #0]
		}

		if(total_distance >= crossline_distance + 60){
 8005218:	edd7 7a01 	vldr	s15, [r7, #4]
 800521c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80052bc <createVelocityTable+0x19c>
 8005220:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005224:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005230:	db02      	blt.n	8005238 <createVelocityTable+0x118>
			crossline_idx++;
 8005232:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005234:	3301      	adds	r3, #1
 8005236:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t i = 0; i < log_size; i++){
 8005238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800523a:	3301      	adds	r3, #1
 800523c:	847b      	strh	r3, [r7, #34]	; 0x22
 800523e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005240:	89fb      	ldrh	r3, [r7, #14]
 8005242:	429a      	cmp	r2, r3
 8005244:	d381      	bcc.n	800514a <createVelocityTable+0x2a>
		}

	}
	for(uint16_t i = log_size; i < 6000; i++){
 8005246:	89fb      	ldrh	r3, [r7, #14]
 8005248:	837b      	strh	r3, [r7, #26]
 800524a:	e008      	b.n	800525e <createVelocityTable+0x13e>
		velocity_table[i] = 1.8;
 800524c:	8b7b      	ldrh	r3, [r7, #26]
 800524e:	4a1a      	ldr	r2, [pc, #104]	; (80052b8 <createVelocityTable+0x198>)
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <createVelocityTable+0x1a4>)
 8005256:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 6000; i++){
 8005258:	8b7b      	ldrh	r3, [r7, #26]
 800525a:	3301      	adds	r3, #1
 800525c:	837b      	strh	r3, [r7, #26]
 800525e:	8b7b      	ldrh	r3, [r7, #26]
 8005260:	f241 726f 	movw	r2, #5999	; 0x176f
 8005264:	4293      	cmp	r3, r2
 8005266:	d9f1      	bls.n	800524c <createVelocityTable+0x12c>
	}


	addDecelerationDistanceMergin(velocity_table, 15); //8
 8005268:	210f      	movs	r1, #15
 800526a:	4813      	ldr	r0, [pc, #76]	; (80052b8 <createVelocityTable+0x198>)
 800526c:	f000 f8b8 	bl	80053e0 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 8005270:	2105      	movs	r1, #5
 8005272:	4811      	ldr	r0, [pc, #68]	; (80052b8 <createVelocityTable+0x198>)
 8005274:	f000 f902 	bl	800547c <addAccelerationDistanceMergin>
	//shiftVelocityTable(velocity_table, 1);

	velocity_table[0] = min_velocity;
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <createVelocityTable+0x1a8>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <createVelocityTable+0x198>)
 800527e:	6013      	str	r3, [r2, #0]

	decelerateProcessing(deceleration, p_distance);
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <createVelocityTable+0x1ac>)
 8005282:	edd3 7a00 	vldr	s15, [r3]
 8005286:	6978      	ldr	r0, [r7, #20]
 8005288:	eeb0 0a67 	vmov.f32	s0, s15
 800528c:	f000 f948 	bl	8005520 <decelerateProcessing>
	accelerateProcessing(acceleration, p_distance);
 8005290:	4b0f      	ldr	r3, [pc, #60]	; (80052d0 <createVelocityTable+0x1b0>)
 8005292:	edd3 7a00 	vldr	s15, [r3]
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	eeb0 0a67 	vmov.f32	s0, s15
 800529c:	f000 f9e0 	bl	8005660 <accelerateProcessing>

	CreateAcceleration(p_distance);
 80052a0:	6978      	ldr	r0, [r7, #20]
 80052a2:	f000 fb9d 	bl	80059e0 <CreateAcceleration>

}
 80052a6:	bf00      	nop
 80052a8:	3734      	adds	r7, #52	; 0x34
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}
 80052ae:	bf00      	nop
 80052b0:	3727c5ac 	.word	0x3727c5ac
 80052b4:	2001f368 	.word	0x2001f368
 80052b8:	20017e10 	.word	0x20017e10
 80052bc:	42700000 	.word	0x42700000
 80052c0:	2001f35c 	.word	0x2001f35c
 80052c4:	3fe66666 	.word	0x3fe66666
 80052c8:	2001f358 	.word	0x2001f358
 80052cc:	2001f364 	.word	0x2001f364
 80052d0:	2001f360 	.word	0x2001f360
 80052d4:	00000000 	.word	0x00000000

080052d8 <radius2Velocity>:

float radius2Velocity(float radius){
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	ed87 0a01 	vstr	s0, [r7, #4]
	float velocity;

	if(mode == 2){
 80052e2:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <radius2Velocity+0xf8>)
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d118      	bne.n	800531c <radius2Velocity+0x44>
		velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 80052ea:	4b3a      	ldr	r3, [pc, #232]	; (80053d4 <radius2Velocity+0xfc>)
 80052ec:	ed93 7a00 	vldr	s14, [r3]
 80052f0:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <radius2Velocity+0x100>)
 80052f2:	edd3 7a00 	vldr	s15, [r3]
 80052f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80052fa:	4b38      	ldr	r3, [pc, #224]	; (80053dc <radius2Velocity+0x104>)
 80052fc:	edd3 7a00 	vldr	s15, [r3]
 8005300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005304:	edd7 7a01 	vldr	s15, [r7, #4]
 8005308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800530c:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <radius2Velocity+0x100>)
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005316:	edc7 7a03 	vstr	s15, [r7, #12]
 800531a:	e04a      	b.n	80053b2 <radius2Velocity+0xda>
	}
	else if(mode == 3){
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <radius2Velocity+0xf8>)
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d146      	bne.n	80053b2 <radius2Velocity+0xda>
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fb f90f 	bl	8000548 <__aeabi_f2d>
 800532a:	a327      	add	r3, pc, #156	; (adr r3, 80053c8 <radius2Velocity+0xf0>)
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f7fb f962 	bl	80005f8 <__aeabi_dmul>
 8005334:	4603      	mov	r3, r0
 8005336:	460c      	mov	r4, r1
 8005338:	4625      	mov	r5, r4
 800533a:	461c      	mov	r4, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fb f903 	bl	8000548 <__aeabi_f2d>
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f7fb f955 	bl	80005f8 <__aeabi_dmul>
 800534e:	4603      	mov	r3, r0
 8005350:	460c      	mov	r4, r1
 8005352:	4625      	mov	r5, r4
 8005354:	461c      	mov	r4, r3
 8005356:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <radius2Velocity+0xfc>)
 8005358:	ed93 7a00 	vldr	s14, [r3]
 800535c:	4b1e      	ldr	r3, [pc, #120]	; (80053d8 <radius2Velocity+0x100>)
 800535e:	edd3 7a00 	vldr	s15, [r3]
 8005362:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005366:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <radius2Velocity+0x104>)
 8005368:	edd3 7a00 	vldr	s15, [r3]
 800536c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005370:	ee16 0a90 	vmov	r0, s13
 8005374:	f7fb f8e8 	bl	8000548 <__aeabi_f2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4620      	mov	r0, r4
 800537e:	4629      	mov	r1, r5
 8005380:	f7fb f93a 	bl	80005f8 <__aeabi_dmul>
 8005384:	4603      	mov	r3, r0
 8005386:	460c      	mov	r4, r1
 8005388:	4625      	mov	r5, r4
 800538a:	461c      	mov	r4, r3
 800538c:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <radius2Velocity+0x100>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7fb f8d9 	bl	8000548 <__aeabi_f2d>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4620      	mov	r0, r4
 800539c:	4629      	mov	r1, r5
 800539e:	f7fa ff75 	bl	800028c <__adddf3>
 80053a2:	4603      	mov	r3, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	f7fb fc1d 	bl	8000be8 <__aeabi_d2f>
 80053ae:	4603      	mov	r3, r0
 80053b0:	60fb      	str	r3, [r7, #12]
	}

	return velocity;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	ee07 3a90 	vmov	s15, r3
}
 80053b8:	eeb0 0a67 	vmov.f32	s0, s15
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bdb0      	pop	{r4, r5, r7, pc}
 80053c2:	bf00      	nop
 80053c4:	f3af 8000 	nop.w
 80053c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80053cc:	3f50624d 	.word	0x3f50624d
 80053d0:	2001f5b4 	.word	0x2001f5b4
 80053d4:	2001f35c 	.word	0x2001f35c
 80053d8:	2001f358 	.word	0x2001f358
 80053dc:	2001f368 	.word	0x2001f368

080053e0 <addDecelerationDistanceMergin>:

void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 80053ec:	887b      	ldrh	r3, [r7, #2]
 80053ee:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 80053f0:	8afb      	ldrh	r3, [r7, #22]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4413      	add	r3, r2
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1){
 80053fc:	e033      	b.n	8005466 <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 80053fe:	8afb      	ldrh	r3, [r7, #22]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	edd3 7a00 	vldr	s15, [r3]
 800540a:	ed97 7a04 	vldr	s14, [r7, #16]
 800540e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	dd1d      	ble.n	8005454 <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 8005418:	8afb      	ldrh	r3, [r7, #22]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	4413      	add	r3, r2
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	8afa      	ldrh	r2, [r7, #22]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	81fb      	strh	r3, [r7, #14]
 800542c:	e008      	b.n	8005440 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 800542e:	89fb      	ldrh	r3, [r7, #14]
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	3301      	adds	r3, #1
 800543e:	81fb      	strh	r3, [r7, #14]
 8005440:	89fa      	ldrh	r2, [r7, #14]
 8005442:	8afb      	ldrh	r3, [r7, #22]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3f2      	bcc.n	800542e <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 8005448:	8afb      	ldrh	r3, [r7, #22]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 8005454:	8afb      	ldrh	r3, [r7, #22]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	4413      	add	r3, r2
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	613b      	str	r3, [r7, #16]

		idx++;
 8005460:	8afb      	ldrh	r3, [r7, #22]
 8005462:	3301      	adds	r3, #1
 8005464:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1){
 8005466:	8afb      	ldrh	r3, [r7, #22]
 8005468:	f241 726f 	movw	r2, #5999	; 0x176f
 800546c:	4293      	cmp	r3, r2
 800546e:	d9c6      	bls.n	80053fe <addDecelerationDistanceMergin+0x1e>
	}
}
 8005470:	bf00      	nop
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 800548c:	8afb      	ldrh	r3, [r7, #22]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1 - mergin_size){
 8005498:	e034      	b.n	8005504 <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 800549a:	8afb      	ldrh	r3, [r7, #22]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	4413      	add	r3, r2
 80054a2:	edd3 7a00 	vldr	s15, [r3]
 80054a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80054aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	d51e      	bpl.n	80054f2 <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	81fb      	strh	r3, [r7, #14]
 80054bc:	e008      	b.n	80054d0 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 80054be:	89fb      	ldrh	r3, [r7, #14]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	4413      	add	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80054ca:	89fb      	ldrh	r3, [r7, #14]
 80054cc:	3301      	adds	r3, #1
 80054ce:	81fb      	strh	r3, [r7, #14]
 80054d0:	89fa      	ldrh	r2, [r7, #14]
 80054d2:	8af9      	ldrh	r1, [r7, #22]
 80054d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054d8:	440b      	add	r3, r1
 80054da:	429a      	cmp	r2, r3
 80054dc:	dbef      	blt.n	80054be <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 80054de:	887a      	ldrh	r2, [r7, #2]
 80054e0:	8afb      	ldrh	r3, [r7, #22]
 80054e2:	4413      	add	r3, r2
 80054e4:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 80054e6:	8afb      	ldrh	r3, [r7, #22]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4413      	add	r3, r2
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	613b      	str	r3, [r7, #16]

		idx++;
 80054fe:	8afb      	ldrh	r3, [r7, #22]
 8005500:	3301      	adds	r3, #1
 8005502:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1 - mergin_size){
 8005504:	8afa      	ldrh	r2, [r7, #22]
 8005506:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800550a:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 800550e:	330f      	adds	r3, #15
 8005510:	429a      	cmp	r2, r3
 8005512:	ddc2      	ble.n	800549a <addAccelerationDistanceMergin+0x1e>
	}
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <decelerateProcessing>:

void decelerateProcessing(const float am, const float *p_distance){
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	ed87 0a01 	vstr	s0, [r7, #4]
 800552a:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 800552c:	f7fd fc6e 	bl	8002e0c <getDistanceLogSize>
 8005530:	4603      	mov	r3, r0
 8005532:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 8005534:	8abb      	ldrh	r3, [r7, #20]
 8005536:	3b01      	subs	r3, #1
 8005538:	82fb      	strh	r3, [r7, #22]
 800553a:	e07f      	b.n	800563c <decelerateProcessing+0x11c>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 800553c:	8afb      	ldrh	r3, [r7, #22]
 800553e:	3b01      	subs	r3, #1
 8005540:	4a45      	ldr	r2, [pc, #276]	; (8005658 <decelerateProcessing+0x138>)
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	ed93 7a00 	vldr	s14, [r3]
 800554a:	8afb      	ldrh	r3, [r7, #22]
 800554c:	4a42      	ldr	r2, [pc, #264]	; (8005658 <decelerateProcessing+0x138>)
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	edd3 7a00 	vldr	s15, [r3]
 8005556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555a:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 800555e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556a:	dd64      	ble.n	8005636 <decelerateProcessing+0x116>
			float t = p_distance[i]*1e-3 / v_diff;
 800556c:	8afb      	ldrh	r3, [r7, #22]
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	4413      	add	r3, r2
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fa ffe6 	bl	8000548 <__aeabi_f2d>
 800557c:	a334      	add	r3, pc, #208	; (adr r3, 8005650 <decelerateProcessing+0x130>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	f7fb f839 	bl	80005f8 <__aeabi_dmul>
 8005586:	4603      	mov	r3, r0
 8005588:	460c      	mov	r4, r1
 800558a:	4625      	mov	r5, r4
 800558c:	461c      	mov	r4, r3
 800558e:	6938      	ldr	r0, [r7, #16]
 8005590:	f7fa ffda 	bl	8000548 <__aeabi_f2d>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4620      	mov	r0, r4
 800559a:	4629      	mov	r1, r5
 800559c:	f7fb f956 	bl	800084c <__aeabi_ddiv>
 80055a0:	4603      	mov	r3, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	4618      	mov	r0, r3
 80055a6:	4621      	mov	r1, r4
 80055a8:	f7fb fb1e 	bl	8000be8 <__aeabi_d2f>
 80055ac:	4603      	mov	r3, r0
 80055ae:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80055b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80055b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80055b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055bc:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 80055c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80055c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80055c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d0:	dd31      	ble.n	8005636 <decelerateProcessing+0x116>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i]*1e-3;
 80055d2:	8afb      	ldrh	r3, [r7, #22]
 80055d4:	4a20      	ldr	r2, [pc, #128]	; (8005658 <decelerateProcessing+0x138>)
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fa ffb3 	bl	8000548 <__aeabi_f2d>
 80055e2:	4604      	mov	r4, r0
 80055e4:	460d      	mov	r5, r1
 80055e6:	8afb      	ldrh	r3, [r7, #22]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	ed93 7a00 	vldr	s14, [r3]
 80055f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	ee17 0a90 	vmov	r0, s15
 80055fe:	f7fa ffa3 	bl	8000548 <__aeabi_f2d>
 8005602:	a313      	add	r3, pc, #76	; (adr r3, 8005650 <decelerateProcessing+0x130>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fff6 	bl	80005f8 <__aeabi_dmul>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fe3a 	bl	800028c <__adddf3>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	4619      	mov	r1, r3
 800561e:	4622      	mov	r2, r4
 8005620:	8afb      	ldrh	r3, [r7, #22]
 8005622:	1e5c      	subs	r4, r3, #1
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	f7fb fade 	bl	8000be8 <__aeabi_d2f>
 800562c:	4601      	mov	r1, r0
 800562e:	4a0a      	ldr	r2, [pc, #40]	; (8005658 <decelerateProcessing+0x138>)
 8005630:	00a3      	lsls	r3, r4, #2
 8005632:	4413      	add	r3, r2
 8005634:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 8005636:	8afb      	ldrh	r3, [r7, #22]
 8005638:	3b01      	subs	r3, #1
 800563a:	82fb      	strh	r3, [r7, #22]
 800563c:	8afb      	ldrh	r3, [r7, #22]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f47f af7c 	bne.w	800553c <decelerateProcessing+0x1c>
			}
		}
	}
}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}
 800564c:	f3af 8000 	nop.w
 8005650:	d2f1a9fc 	.word	0xd2f1a9fc
 8005654:	3f50624d 	.word	0x3f50624d
 8005658:	20017e10 	.word	0x20017e10
 800565c:	00000000 	.word	0x00000000

08005660 <accelerateProcessing>:

void accelerateProcessing(const float am, const float *p_distance){
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	ed87 0a01 	vstr	s0, [r7, #4]
 800566a:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 800566c:	f7fd fbce 	bl	8002e0c <getDistanceLogSize>
 8005670:	4603      	mov	r3, r0
 8005672:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005674:	2300      	movs	r3, #0
 8005676:	82fb      	strh	r3, [r7, #22]
 8005678:	e07f      	b.n	800577a <accelerateProcessing+0x11a>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 800567a:	8afb      	ldrh	r3, [r7, #22]
 800567c:	3301      	adds	r3, #1
 800567e:	4a46      	ldr	r2, [pc, #280]	; (8005798 <accelerateProcessing+0x138>)
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	ed93 7a00 	vldr	s14, [r3]
 8005688:	8afb      	ldrh	r3, [r7, #22]
 800568a:	4a43      	ldr	r2, [pc, #268]	; (8005798 <accelerateProcessing+0x138>)
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	edd3 7a00 	vldr	s15, [r3]
 8005694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005698:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 800569c:	edd7 7a04 	vldr	s15, [r7, #16]
 80056a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80056a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056a8:	dd64      	ble.n	8005774 <accelerateProcessing+0x114>
			float t = p_distance[i]*1e-3 / v_diff;
 80056aa:	8afb      	ldrh	r3, [r7, #22]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fa ff47 	bl	8000548 <__aeabi_f2d>
 80056ba:	a335      	add	r3, pc, #212	; (adr r3, 8005790 <accelerateProcessing+0x130>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa ff9a 	bl	80005f8 <__aeabi_dmul>
 80056c4:	4603      	mov	r3, r0
 80056c6:	460c      	mov	r4, r1
 80056c8:	4625      	mov	r5, r4
 80056ca:	461c      	mov	r4, r3
 80056cc:	6938      	ldr	r0, [r7, #16]
 80056ce:	f7fa ff3b 	bl	8000548 <__aeabi_f2d>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4620      	mov	r0, r4
 80056d8:	4629      	mov	r1, r5
 80056da:	f7fb f8b7 	bl	800084c <__aeabi_ddiv>
 80056de:	4603      	mov	r3, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	4618      	mov	r0, r3
 80056e4:	4621      	mov	r1, r4
 80056e6:	f7fb fa7f 	bl	8000be8 <__aeabi_d2f>
 80056ea:	4603      	mov	r3, r0
 80056ec:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80056ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80056f2:	ed97 7a03 	vldr	s14, [r7, #12]
 80056f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056fa:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 80056fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8005702:	edd7 7a01 	vldr	s15, [r7, #4]
 8005706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800570a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800570e:	dd31      	ble.n	8005774 <accelerateProcessing+0x114>
				velocity_table[i+1] = velocity_table[i] + am * p_distance[i]*1e-3;
 8005710:	8afb      	ldrh	r3, [r7, #22]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <accelerateProcessing+0x138>)
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f7fa ff14 	bl	8000548 <__aeabi_f2d>
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	8afb      	ldrh	r3, [r7, #22]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	4413      	add	r3, r2
 800572c:	ed93 7a00 	vldr	s14, [r3]
 8005730:	edd7 7a01 	vldr	s15, [r7, #4]
 8005734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005738:	ee17 0a90 	vmov	r0, s15
 800573c:	f7fa ff04 	bl	8000548 <__aeabi_f2d>
 8005740:	a313      	add	r3, pc, #76	; (adr r3, 8005790 <accelerateProcessing+0x130>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa ff57 	bl	80005f8 <__aeabi_dmul>
 800574a:	4602      	mov	r2, r0
 800574c:	460b      	mov	r3, r1
 800574e:	4620      	mov	r0, r4
 8005750:	4629      	mov	r1, r5
 8005752:	f7fa fd9b 	bl	800028c <__adddf3>
 8005756:	4603      	mov	r3, r0
 8005758:	460c      	mov	r4, r1
 800575a:	4619      	mov	r1, r3
 800575c:	4622      	mov	r2, r4
 800575e:	8afb      	ldrh	r3, [r7, #22]
 8005760:	1c5c      	adds	r4, r3, #1
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	f7fb fa3f 	bl	8000be8 <__aeabi_d2f>
 800576a:	4601      	mov	r1, r0
 800576c:	4a0a      	ldr	r2, [pc, #40]	; (8005798 <accelerateProcessing+0x138>)
 800576e:	00a3      	lsls	r3, r4, #2
 8005770:	4413      	add	r3, r2
 8005772:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 8005774:	8afb      	ldrh	r3, [r7, #22]
 8005776:	3301      	adds	r3, #1
 8005778:	82fb      	strh	r3, [r7, #22]
 800577a:	8afa      	ldrh	r2, [r7, #22]
 800577c:	8abb      	ldrh	r3, [r7, #20]
 800577e:	3b01      	subs	r3, #1
 8005780:	429a      	cmp	r2, r3
 8005782:	f77f af7a 	ble.w	800567a <accelerateProcessing+0x1a>
			}
		}
	}
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bdb0      	pop	{r4, r5, r7, pc}
 800578e:	bf00      	nop
 8005790:	d2f1a9fc 	.word	0xd2f1a9fc
 8005794:	3f50624d 	.word	0x3f50624d
 8005798:	20017e10 	.word	0x20017e10

0800579c <updateTargetVelocity>:

void updateTargetVelocity(){
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 80057a0:	4b33      	ldr	r3, [pc, #204]	; (8005870 <updateTargetVelocity+0xd4>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d061      	beq.n	800586c <updateTargetVelocity+0xd0>
		if(getTotalDistance() >= ref_distance){
 80057a8:	f7fb fda0 	bl	80012ec <getTotalDistance>
 80057ac:	eeb0 7a40 	vmov.f32	s14, s0
 80057b0:	4b30      	ldr	r3, [pc, #192]	; (8005874 <updateTargetVelocity+0xd8>)
 80057b2:	edd3 7a00 	vldr	s15, [r3]
 80057b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057be:	db14      	blt.n	80057ea <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 80057c0:	4b2d      	ldr	r3, [pc, #180]	; (8005878 <updateTargetVelocity+0xdc>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fd fc9b 	bl	8003100 <getDistanceLog>
 80057ca:	eeb0 7a40 	vmov.f32	s14, s0
 80057ce:	4b29      	ldr	r3, [pc, #164]	; (8005874 <updateTargetVelocity+0xd8>)
 80057d0:	edd3 7a00 	vldr	s15, [r3]
 80057d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057d8:	4b26      	ldr	r3, [pc, #152]	; (8005874 <updateTargetVelocity+0xd8>)
 80057da:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 80057de:	4b26      	ldr	r3, [pc, #152]	; (8005878 <updateTargetVelocity+0xdc>)
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	4b24      	ldr	r3, [pc, #144]	; (8005878 <updateTargetVelocity+0xdc>)
 80057e8:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 80057ea:	f7fd fb0f 	bl	8002e0c <getDistanceLogSize>
 80057ee:	4603      	mov	r3, r0
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b21      	ldr	r3, [pc, #132]	; (8005878 <updateTargetVelocity+0xdc>)
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d806      	bhi.n	8005808 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 80057fa:	f7fd fb07 	bl	8002e0c <getDistanceLogSize>
 80057fe:	4603      	mov	r3, r0
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	4b1c      	ldr	r3, [pc, #112]	; (8005878 <updateTargetVelocity+0xdc>)
 8005806:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005808:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <updateTargetVelocity+0xdc>)
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	4a1b      	ldr	r2, [pc, #108]	; (800587c <updateTargetVelocity+0xe0>)
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	edd3 7a00 	vldr	s15, [r3]
 8005816:	eeb0 0a67 	vmov.f32	s0, s15
 800581a:	f7fd fe0f 	bl	800343c <setTargetVelocity>
		setTargetAcceleration(acceleration_table[velocity_table_idx]);
 800581e:	4b16      	ldr	r3, [pc, #88]	; (8005878 <updateTargetVelocity+0xdc>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <updateTargetVelocity+0xe4>)
 8005826:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800582a:	ee07 3a90 	vmov	s15, r3
 800582e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005832:	eeb0 0a67 	vmov.f32	s0, s15
 8005836:	f7fd fe11 	bl	800345c <setTargetAcceleration>

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <updateTargetVelocity+0xdc>)
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	4a0f      	ldr	r2, [pc, #60]	; (800587c <updateTargetVelocity+0xe0>)
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	ed93 7a00 	vldr	s14, [r3]
 8005848:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <updateTargetVelocity+0xe8>)
 800584a:	edd3 7a00 	vldr	s15, [r3]
 800584e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005856:	d501      	bpl.n	800585c <updateTargetVelocity+0xc0>
			setClearFlagOfVelocityControlI();
 8005858:	f7fd feb4 	bl	80035c4 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <updateTargetVelocity+0xdc>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	4a06      	ldr	r2, [pc, #24]	; (800587c <updateTargetVelocity+0xe0>)
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a06      	ldr	r2, [pc, #24]	; (8005884 <updateTargetVelocity+0xe8>)
 800586a:	6013      	str	r3, [r2, #0]
	}
}
 800586c:	bf00      	nop
 800586e:	bd80      	pop	{r7, pc}
 8005870:	2001f354 	.word	0x2001f354
 8005874:	2001f894 	.word	0x2001f894
 8005878:	2001f898 	.word	0x2001f898
 800587c:	20017e10 	.word	0x20017e10
 8005880:	2001cc30 	.word	0x2001cc30
 8005884:	2001f37c 	.word	0x2001f37c

08005888 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 800588e:	e03f      	b.n	8005910 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f7fd fc49 	bl	800312c <getCrossLog>
 800589a:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 800589e:	f7fb fd25 	bl	80012ec <getTotalDistance>
 80058a2:	eeb0 7a40 	vmov.f32	s14, s0
 80058a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80058aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058ae:	eef0 7ae7 	vabs.f32	s15, s15
 80058b2:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 80058b6:	edd7 7a00 	vldr	s15, [r7]
 80058ba:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800592c <correctionTotalDistanceFromCrossLine+0xa4>
 80058be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	d80d      	bhi.n	80058e4 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 80058c8:	4b19      	ldr	r3, [pc, #100]	; (8005930 <correctionTotalDistanceFromCrossLine+0xa8>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 80058ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80058d2:	f7fb fd35 	bl	8001340 <setTotalDistance>
			cross_line_idx++;
 80058d6:	4b14      	ldr	r3, [pc, #80]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	4b12      	ldr	r3, [pc, #72]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058e0:	801a      	strh	r2, [r3, #0]
			break;
 80058e2:	e01d      	b.n	8005920 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	3301      	adds	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058ee:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 80058f0:	f7fd fa98 	bl	8002e24 <getCrossLogSize>
 80058f4:	4603      	mov	r3, r0
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 80058fa:	881b      	ldrh	r3, [r3, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d807      	bhi.n	8005910 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005900:	f7fd fa90 	bl	8002e24 <getCrossLogSize>
 8005904:	4603      	mov	r3, r0
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	4b07      	ldr	r3, [pc, #28]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 800590c:	801a      	strh	r2, [r3, #0]
			break;
 800590e:	e007      	b.n	8005920 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005910:	f7fd fa88 	bl	8002e24 <getCrossLogSize>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	4b03      	ldr	r3, [pc, #12]	; (8005928 <correctionTotalDistanceFromCrossLine+0xa0>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d2b7      	bcs.n	8005890 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2001f342 	.word	0x2001f342
 800592c:	437a0000 	.word	0x437a0000
 8005930:	2001f346 	.word	0x2001f346

08005934 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 800593a:	e03f      	b.n	80059bc <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 800593c:	4b25      	ldr	r3, [pc, #148]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fd fc09 	bl	8003158 <getSideLog>
 8005946:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 800594a:	f7fb fccf 	bl	80012ec <getTotalDistance>
 800594e:	eeb0 7a40 	vmov.f32	s14, s0
 8005952:	edd7 7a01 	vldr	s15, [r7, #4]
 8005956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800595a:	eef0 7ae7 	vabs.f32	s15, s15
 800595e:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005962:	edd7 7a00 	vldr	s15, [r7]
 8005966:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80059d8 <correctionTotalDistanceFromSideLine+0xa4>
 800596a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800596e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005972:	d80d      	bhi.n	8005990 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005974:	4b19      	ldr	r3, [pc, #100]	; (80059dc <correctionTotalDistanceFromSideLine+0xa8>)
 8005976:	2200      	movs	r2, #0
 8005978:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 800597a:	ed97 0a01 	vldr	s0, [r7, #4]
 800597e:	f7fb fcdf 	bl	8001340 <setTotalDistance>
			side_line_idx++;
 8005982:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 800598c:	801a      	strh	r2, [r3, #0]
			break;
 800598e:	e01d      	b.n	80059cc <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005990:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	3301      	adds	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 800599a:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 800599c:	f7fd fa4e 	bl	8002e3c <getSideLogSize>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d807      	bhi.n	80059bc <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 80059ac:	f7fd fa46 	bl	8002e3c <getSideLogSize>
 80059b0:	4603      	mov	r3, r0
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059b8:	801a      	strh	r2, [r3, #0]
			break;
 80059ba:	e007      	b.n	80059cc <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 80059bc:	f7fd fa3e 	bl	8002e3c <getSideLogSize>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <correctionTotalDistanceFromSideLine+0xa0>)
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d2b7      	bcs.n	800593c <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	2001f344 	.word	0x2001f344
 80059d8:	437a0000 	.word	0x437a0000
 80059dc:	2001f348 	.word	0x2001f348

080059e0 <CreateAcceleration>:

void CreateAcceleration(const float *p_distance)
{
 80059e0:	b5b0      	push	{r4, r5, r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
	uint16_t log_size = getDistanceLogSize();
 80059e8:	f7fd fa10 	bl	8002e0c <getDistanceLogSize>
 80059ec:	4603      	mov	r3, r0
 80059ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
    for(uint16_t i = 0; i <= log_size - 1; i++){
 80059f0:	2300      	movs	r3, #0
 80059f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80059f4:	e0cd      	b.n	8005b92 <CreateAcceleration+0x1b2>
		float v_diff = velocity_table[i+1] - velocity_table[i];//目標速度ー今の速度
 80059f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80059f8:	3301      	adds	r3, #1
 80059fa:	4a79      	ldr	r2, [pc, #484]	; (8005be0 <CreateAcceleration+0x200>)
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	ed93 7a00 	vldr	s14, [r3]
 8005a04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a06:	4a76      	ldr	r2, [pc, #472]	; (8005be0 <CreateAcceleration+0x200>)
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	edd3 7a00 	vldr	s15, [r3]
 8005a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a14:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		float t = p_distance[i]*1e-3 / v_diff;//時間を求める
 8005a18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4413      	add	r3, r2
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fa fd90 	bl	8000548 <__aeabi_f2d>
 8005a28:	a35f      	add	r3, pc, #380	; (adr r3, 8005ba8 <CreateAcceleration+0x1c8>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f7fa fde3 	bl	80005f8 <__aeabi_dmul>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	4625      	mov	r5, r4
 8005a38:	461c      	mov	r4, r3
 8005a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3c:	f7fa fd84 	bl	8000548 <__aeabi_f2d>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4620      	mov	r0, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	f7fa ff00 	bl	800084c <__aeabi_ddiv>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	4618      	mov	r0, r3
 8005a52:	4621      	mov	r1, r4
 8005a54:	f7fb f8c8 	bl	8000be8 <__aeabi_d2f>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
		float a = v_diff / t;//加速度計算
 8005a5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005a60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a68:	edc7 7a08 	vstr	s15, [r7, #32]

		float n = (60*velocity_table[i]) / (2*PI*REDUCTION_RATIO*WHEEL_RADIUS);//回転数
 8005a6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005a6e:	4a5c      	ldr	r2, [pc, #368]	; (8005be0 <CreateAcceleration+0x200>)
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	edd3 7a00 	vldr	s15, [r3]
 8005a78:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005be4 <CreateAcceleration+0x204>
 8005a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a80:	ee17 0a90 	vmov	r0, s15
 8005a84:	f7fa fd60 	bl	8000548 <__aeabi_f2d>
 8005a88:	a349      	add	r3, pc, #292	; (adr r3, 8005bb0 <CreateAcceleration+0x1d0>)
 8005a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8e:	f7fa fedd 	bl	800084c <__aeabi_ddiv>
 8005a92:	4603      	mov	r3, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	4618      	mov	r0, r3
 8005a98:	4621      	mov	r1, r4
 8005a9a:	f7fb f8a5 	bl	8000be8 <__aeabi_d2f>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	61fb      	str	r3, [r7, #28]
		float E = BACK_EMF_CONSTANT * n;//逆起電力
 8005aa2:	69f8      	ldr	r0, [r7, #28]
 8005aa4:	f7fa fd50 	bl	8000548 <__aeabi_f2d>
 8005aa8:	a343      	add	r3, pc, #268	; (adr r3, 8005bb8 <CreateAcceleration+0x1d8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fda3 	bl	80005f8 <__aeabi_dmul>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f7fb f895 	bl	8000be8 <__aeabi_d2f>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	61bb      	str	r3, [r7, #24]
		float T = (AIRCRAFT_MASS * WHEEL_RADIUS * a) / 2 * REDUCTION_RATIO;//モータのトルク
 8005ac2:	6a38      	ldr	r0, [r7, #32]
 8005ac4:	f7fa fd40 	bl	8000548 <__aeabi_f2d>
 8005ac8:	a33d      	add	r3, pc, #244	; (adr r3, 8005bc0 <CreateAcceleration+0x1e0>)
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f7fa fd93 	bl	80005f8 <__aeabi_dmul>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f04f 0200 	mov.w	r2, #0
 8005ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ae2:	f7fa feb3 	bl	800084c <__aeabi_ddiv>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	460c      	mov	r4, r1
 8005aea:	4618      	mov	r0, r3
 8005aec:	4621      	mov	r1, r4
 8005aee:	a336      	add	r3, pc, #216	; (adr r3, 8005bc8 <CreateAcceleration+0x1e8>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fd80 	bl	80005f8 <__aeabi_dmul>
 8005af8:	4603      	mov	r3, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	4618      	mov	r0, r3
 8005afe:	4621      	mov	r1, r4
 8005b00:	f7fb f872 	bl	8000be8 <__aeabi_d2f>
 8005b04:	4603      	mov	r3, r0
 8005b06:	617b      	str	r3, [r7, #20]
		float I = TORQUE_CONSTANT * T;//電流
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f7fa fd1d 	bl	8000548 <__aeabi_f2d>
 8005b0e:	a330      	add	r3, pc, #192	; (adr r3, 8005bd0 <CreateAcceleration+0x1f0>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	4621      	mov	r1, r4
 8005b20:	f7fb f862 	bl	8000be8 <__aeabi_d2f>
 8005b24:	4603      	mov	r3, r0
 8005b26:	613b      	str	r3, [r7, #16]
		float V_mot = I * RWSISTANCE_BETWEEN_TERMINALS + E;//モータの出力に追加したい電圧
 8005b28:	6938      	ldr	r0, [r7, #16]
 8005b2a:	f7fa fd0d 	bl	8000548 <__aeabi_f2d>
 8005b2e:	a32a      	add	r3, pc, #168	; (adr r3, 8005bd8 <CreateAcceleration+0x1f8>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa fd60 	bl	80005f8 <__aeabi_dmul>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	4625      	mov	r5, r4
 8005b3e:	461c      	mov	r4, r3
 8005b40:	69b8      	ldr	r0, [r7, #24]
 8005b42:	f7fa fd01 	bl	8000548 <__aeabi_f2d>
 8005b46:	4602      	mov	r2, r0
 8005b48:	460b      	mov	r3, r1
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7fa fb9d 	bl	800028c <__adddf3>
 8005b52:	4603      	mov	r3, r0
 8005b54:	460c      	mov	r4, r1
 8005b56:	4618      	mov	r0, r3
 8005b58:	4621      	mov	r1, r4
 8005b5a:	f7fb f845 	bl	8000be8 <__aeabi_d2f>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	60fb      	str	r3, [r7, #12]

		V_motor = V_mot * 10000;
 8005b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b66:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8005be8 <CreateAcceleration+0x208>
 8005b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b6e:	4b1f      	ldr	r3, [pc, #124]	; (8005bec <CreateAcceleration+0x20c>)
 8005b70:	edc3 7a00 	vstr	s15, [r3]

		acceleration_table[i] = V_motor;
 8005b74:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <CreateAcceleration+0x20c>)
 8005b76:	edd3 7a00 	vldr	s15, [r3]
 8005b7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b80:	ee17 2a90 	vmov	r2, s15
 8005b84:	b211      	sxth	r1, r2
 8005b86:	4a1a      	ldr	r2, [pc, #104]	; (8005bf0 <CreateAcceleration+0x210>)
 8005b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005b8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b8e:	3301      	adds	r3, #1
 8005b90:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005b92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005b96:	3b01      	subs	r3, #1
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	f77f af2c 	ble.w	80059f6 <CreateAcceleration+0x16>
    }
}
 8005b9e:	bf00      	nop
 8005ba0:	3730      	adds	r7, #48	; 0x30
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005bac:	3f50624d 	.word	0x3f50624d
 8005bb0:	a7d6bdfa 	.word	0xa7d6bdfa
 8005bb4:	3f9ee213 	.word	0x3f9ee213
 8005bb8:	0994535f 	.word	0x0994535f
 8005bbc:	3f3845c7 	.word	0x3f3845c7
 8005bc0:	caea747e 	.word	0xcaea747e
 8005bc4:	3f5e7967 	.word	0x3f5e7967
 8005bc8:	9999999a 	.word	0x9999999a
 8005bcc:	3fd99999 	.word	0x3fd99999
 8005bd0:	9c38b04b 	.word	0x9c38b04b
 8005bd4:	3f6cd5f9 	.word	0x3f6cd5f9
 8005bd8:	33333333 	.word	0x33333333
 8005bdc:	40073333 	.word	0x40073333
 8005be0:	20017e10 	.word	0x20017e10
 8005be4:	42700000 	.word	0x42700000
 8005be8:	461c4000 	.word	0x461c4000
 8005bec:	2001f36c 	.word	0x2001f36c
 8005bf0:	2001cc30 	.word	0x2001cc30

08005bf4 <getgoalStatus>:

bool getgoalStatus()
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	return goal_flag;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <getgoalStatus+0x14>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	2001f34e 	.word	0x2001f34e

08005c0c <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c16:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005c1a:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <setVelocityRange+0x28>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005c20:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <setVelocityRange+0x2c>)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6013      	str	r3, [r2, #0]
}
 8005c26:	bf00      	nop
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	2001f358 	.word	0x2001f358
 8005c38:	2001f35c 	.word	0x2001f35c

08005c3c <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c46:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005c4a:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <setAccDec+0x28>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005c50:	4a05      	ldr	r2, [pc, #20]	; (8005c68 <setAccDec+0x2c>)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6013      	str	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2001f360 	.word	0x2001f360
 8005c68:	2001f364 	.word	0x2001f364

08005c6c <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005c76:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <setStraightRadius+0x1c>)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	2001f368 	.word	0x2001f368

08005c8c <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005c90:	4b03      	ldr	r3, [pc, #12]	; (8005ca0 <getSideSensorStatusL+0x14>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	2001f34c 	.word	0x2001f34c

08005ca4 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <getSideSensorStatusR+0x14>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2001f34d 	.word	0x2001f34d

08005cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_MspInit+0x4c>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cca:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_MspInit+0x4c>)
 8005ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_MspInit+0x4c>)
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <HAL_MspInit+0x4c>)
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <HAL_MspInit+0x4c>)
 8005ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cec:	6413      	str	r3, [r2, #64]	; 0x40
 8005cee:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <HAL_MspInit+0x4c>)
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40023800 	.word	0x40023800

08005d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	; 0x38
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	60da      	str	r2, [r3, #12]
 8005d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a79      	ldr	r2, [pc, #484]	; (8005f10 <HAL_ADC_MspInit+0x204>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d158      	bne.n	8005de0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d2e:	2300      	movs	r3, #0
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	4b78      	ldr	r3, [pc, #480]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d36:	4a77      	ldr	r2, [pc, #476]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d3e:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d46:	623b      	str	r3, [r7, #32]
 8005d48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	4b71      	ldr	r3, [pc, #452]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	4a70      	ldr	r2, [pc, #448]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d54:	f043 0304 	orr.w	r3, r3, #4
 8005d58:	6313      	str	r3, [r2, #48]	; 0x30
 8005d5a:	4b6e      	ldr	r3, [pc, #440]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005d66:	230e      	movs	r3, #14
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d76:	4619      	mov	r1, r3
 8005d78:	4867      	ldr	r0, [pc, #412]	; (8005f18 <HAL_ADC_MspInit+0x20c>)
 8005d7a:	f001 ff65 	bl	8007c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005d7e:	4b67      	ldr	r3, [pc, #412]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005d80:	4a67      	ldr	r2, [pc, #412]	; (8005f20 <HAL_ADC_MspInit+0x214>)
 8005d82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005d84:	4b65      	ldr	r3, [pc, #404]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d8a:	4b64      	ldr	r3, [pc, #400]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d90:	4b62      	ldr	r3, [pc, #392]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d96:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d9e:	4b5f      	ldr	r3, [pc, #380]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005da0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005da4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005da6:	4b5d      	ldr	r3, [pc, #372]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005da8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005dae:	4b5b      	ldr	r3, [pc, #364]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005db6:	4b59      	ldr	r3, [pc, #356]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005dbc:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005dc2:	4856      	ldr	r0, [pc, #344]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005dc4:	f001 f9e8 	bl	8007198 <HAL_DMA_Init>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005dce:	f7fe fcf7 	bl	80047c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a51      	ldr	r2, [pc, #324]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8005dd8:	4a50      	ldr	r2, [pc, #320]	; (8005f1c <HAL_ADC_MspInit+0x210>)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005dde:	e092      	b.n	8005f06 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a4f      	ldr	r2, [pc, #316]	; (8005f24 <HAL_ADC_MspInit+0x218>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	f040 808d 	bne.w	8005f06 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
 8005df0:	4b48      	ldr	r3, [pc, #288]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df4:	4a47      	ldr	r2, [pc, #284]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8005dfc:	4b45      	ldr	r3, [pc, #276]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	4b41      	ldr	r3, [pc, #260]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6313      	str	r3, [r2, #48]	; 0x30
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	4b3a      	ldr	r3, [pc, #232]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	4a39      	ldr	r2, [pc, #228]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e2e:	f043 0304 	orr.w	r3, r3, #4
 8005e32:	6313      	str	r3, [r2, #48]	; 0x30
 8005e34:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	613b      	str	r3, [r7, #16]
 8005e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	4a32      	ldr	r2, [pc, #200]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e4a:	f043 0302 	orr.w	r3, r3, #2
 8005e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e50:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <HAL_ADC_MspInit+0x208>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e5c:	23ff      	movs	r3, #255	; 0xff
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e60:	2303      	movs	r3, #3
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	482e      	ldr	r0, [pc, #184]	; (8005f28 <HAL_ADC_MspInit+0x21c>)
 8005e70:	f001 feea 	bl	8007c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e74:	2330      	movs	r3, #48	; 0x30
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e84:	4619      	mov	r1, r3
 8005e86:	4824      	ldr	r0, [pc, #144]	; (8005f18 <HAL_ADC_MspInit+0x20c>)
 8005e88:	f001 fede 	bl	8007c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e90:	2303      	movs	r3, #3
 8005e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4823      	ldr	r0, [pc, #140]	; (8005f2c <HAL_ADC_MspInit+0x220>)
 8005ea0:	f001 fed2 	bl	8007c48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005ea4:	4b22      	ldr	r3, [pc, #136]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ea6:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <HAL_ADC_MspInit+0x228>)
 8005ea8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005eaa:	4b21      	ldr	r3, [pc, #132]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eb0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005eb2:	4b1f      	ldr	r3, [pc, #124]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ec4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ecc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ece:	4b18      	ldr	r3, [pc, #96]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ed4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005ed6:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005edc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005ede:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005eea:	4811      	ldr	r0, [pc, #68]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005eec:	f001 f954 	bl	8007198 <HAL_DMA_Init>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005ef6:	f7fe fc63 	bl	80047c0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <HAL_ADC_MspInit+0x224>)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005f06:	bf00      	nop
 8005f08:	3738      	adds	r7, #56	; 0x38
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40012000 	.word	0x40012000
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40020800 	.word	0x40020800
 8005f1c:	2001f704 	.word	0x2001f704
 8005f20:	40026410 	.word	0x40026410
 8005f24:	40012100 	.word	0x40012100
 8005f28:	40020000 	.word	0x40020000
 8005f2c:	40020400 	.word	0x40020400
 8005f30:	2001f7ec 	.word	0x2001f7ec
 8005f34:	40026440 	.word	0x40026440

08005f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <HAL_I2C_MspInit+0x84>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d12c      	bne.n	8005fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	4b18      	ldr	r3, [pc, #96]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6a:	4b15      	ldr	r3, [pc, #84]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f7c:	2312      	movs	r3, #18
 8005f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f80:	2301      	movs	r3, #1
 8005f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f84:	2303      	movs	r3, #3
 8005f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f88:	2304      	movs	r3, #4
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f8c:	f107 0314 	add.w	r3, r7, #20
 8005f90:	4619      	mov	r1, r3
 8005f92:	480c      	ldr	r0, [pc, #48]	; (8005fc4 <HAL_I2C_MspInit+0x8c>)
 8005f94:	f001 fe58 	bl	8007c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	4b08      	ldr	r3, [pc, #32]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005fa2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_I2C_MspInit+0x88>)
 8005faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	60fb      	str	r3, [r7, #12]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005fb4:	bf00      	nop
 8005fb6:	3728      	adds	r7, #40	; 0x28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40005400 	.word	0x40005400
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40020400 	.word	0x40020400

08005fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_SPI_MspInit+0x84>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d12c      	bne.n	8006044 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <HAL_SPI_MspInit+0x88>)
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8006010:	f043 0304 	orr.w	r3, r3, #4
 8006014:	6313      	str	r3, [r2, #48]	; 0x30
 8006016:	4b0e      	ldr	r3, [pc, #56]	; (8006050 <HAL_SPI_MspInit+0x88>)
 8006018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006022:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006028:	2302      	movs	r3, #2
 800602a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006030:	2303      	movs	r3, #3
 8006032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006034:	2306      	movs	r3, #6
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006038:	f107 0314 	add.w	r3, r7, #20
 800603c:	4619      	mov	r1, r3
 800603e:	4805      	ldr	r0, [pc, #20]	; (8006054 <HAL_SPI_MspInit+0x8c>)
 8006040:	f001 fe02 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006044:	bf00      	nop
 8006046:	3728      	adds	r7, #40	; 0x28
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40003c00 	.word	0x40003c00
 8006050:	40023800 	.word	0x40023800
 8006054:	40020800 	.word	0x40020800

08006058 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_TIM_PWM_MspInit+0x64>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10e      	bne.n	8006088 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	4b14      	ldr	r3, [pc, #80]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	4a13      	ldr	r2, [pc, #76]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 8006074:	f043 0301 	orr.w	r3, r3, #1
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	4b11      	ldr	r3, [pc, #68]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006086:	e012      	b.n	80060ae <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a0d      	ldr	r2, [pc, #52]	; (80060c4 <HAL_TIM_PWM_MspInit+0x6c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10d      	bne.n	80060ae <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	60bb      	str	r3, [r7, #8]
 8006096:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 800609c:	f043 0302 	orr.w	r3, r3, #2
 80060a0:	6453      	str	r3, [r2, #68]	; 0x44
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <HAL_TIM_PWM_MspInit+0x68>)
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	60bb      	str	r3, [r7, #8]
 80060ac:	68bb      	ldr	r3, [r7, #8]
}
 80060ae:	bf00      	nop
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40010400 	.word	0x40010400

080060c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08c      	sub	sp, #48	; 0x30
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d0:	f107 031c 	add.w	r3, r7, #28
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	605a      	str	r2, [r3, #4]
 80060da:	609a      	str	r2, [r3, #8]
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a32      	ldr	r2, [pc, #200]	; (80061b0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d12c      	bne.n	8006144 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060ea:	2300      	movs	r3, #0
 80060ec:	61bb      	str	r3, [r7, #24]
 80060ee:	4b31      	ldr	r3, [pc, #196]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80060f4:	f043 0302 	orr.w	r3, r3, #2
 80060f8:	6413      	str	r3, [r2, #64]	; 0x40
 80060fa:	4b2e      	ldr	r3, [pc, #184]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610e:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	6313      	str	r3, [r2, #48]	; 0x30
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006122:	2330      	movs	r3, #48	; 0x30
 8006124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006132:	2302      	movs	r3, #2
 8006134:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	481e      	ldr	r0, [pc, #120]	; (80061b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 800613e:	f001 fd83 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006142:	e030      	b.n	80061a6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1c      	ldr	r2, [pc, #112]	; (80061bc <HAL_TIM_Encoder_MspInit+0xf4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d12b      	bne.n	80061a6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	4b18      	ldr	r3, [pc, #96]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	4a17      	ldr	r2, [pc, #92]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006158:	f043 0304 	orr.w	r3, r3, #4
 800615c:	6413      	str	r3, [r2, #64]	; 0x40
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	613b      	str	r3, [r7, #16]
 8006168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800616a:	2300      	movs	r3, #0
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	4a10      	ldr	r2, [pc, #64]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	6313      	str	r3, [r2, #48]	; 0x30
 800617a:	4b0e      	ldr	r3, [pc, #56]	; (80061b4 <HAL_TIM_Encoder_MspInit+0xec>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006186:	23c0      	movs	r3, #192	; 0xc0
 8006188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800618a:	2302      	movs	r3, #2
 800618c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618e:	2300      	movs	r3, #0
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006192:	2300      	movs	r3, #0
 8006194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006196:	2302      	movs	r3, #2
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800619a:	f107 031c 	add.w	r3, r7, #28
 800619e:	4619      	mov	r1, r3
 80061a0:	4805      	ldr	r0, [pc, #20]	; (80061b8 <HAL_TIM_Encoder_MspInit+0xf0>)
 80061a2:	f001 fd51 	bl	8007c48 <HAL_GPIO_Init>
}
 80061a6:	bf00      	nop
 80061a8:	3730      	adds	r7, #48	; 0x30
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40020400 	.word	0x40020400
 80061bc:	40000800 	.word	0x40000800

080061c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1c      	ldr	r2, [pc, #112]	; (8006240 <HAL_TIM_Base_MspInit+0x80>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d116      	bne.n	8006200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
 80061d6:	4b1b      	ldr	r3, [pc, #108]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a1a      	ldr	r2, [pc, #104]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
 80061e2:	4b18      	ldr	r3, [pc, #96]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	2036      	movs	r0, #54	; 0x36
 80061f4:	f000 ff99 	bl	800712a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80061f8:	2036      	movs	r0, #54	; 0x36
 80061fa:	f000 ffb2 	bl	8007162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80061fe:	e01a      	b.n	8006236 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a10      	ldr	r2, [pc, #64]	; (8006248 <HAL_TIM_Base_MspInit+0x88>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d115      	bne.n	8006236 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <HAL_TIM_Base_MspInit+0x84>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	2037      	movs	r0, #55	; 0x37
 800622c:	f000 ff7d 	bl	800712a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006230:	2037      	movs	r0, #55	; 0x37
 8006232:	f000 ff96 	bl	8007162 <HAL_NVIC_EnableIRQ>
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40001000 	.word	0x40001000
 8006244:	40023800 	.word	0x40023800
 8006248:	40001400 	.word	0x40001400

0800624c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	605a      	str	r2, [r3, #4]
 800625e:	609a      	str	r2, [r3, #8]
 8006260:	60da      	str	r2, [r3, #12]
 8006262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a25      	ldr	r2, [pc, #148]	; (8006300 <HAL_TIM_MspPostInit+0xb4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d11f      	bne.n	80062ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800626e:	2300      	movs	r3, #0
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	4b24      	ldr	r3, [pc, #144]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	4a23      	ldr	r2, [pc, #140]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 8006278:	f043 0301 	orr.w	r3, r3, #1
 800627c:	6313      	str	r3, [r2, #48]	; 0x30
 800627e:	4b21      	ldr	r3, [pc, #132]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800628a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800628e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006290:	2302      	movs	r3, #2
 8006292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006298:	2300      	movs	r3, #0
 800629a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800629c:	2301      	movs	r3, #1
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a0:	f107 0314 	add.w	r3, r7, #20
 80062a4:	4619      	mov	r1, r3
 80062a6:	4818      	ldr	r0, [pc, #96]	; (8006308 <HAL_TIM_MspPostInit+0xbc>)
 80062a8:	f001 fcce 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80062ac:	e023      	b.n	80062f6 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a16      	ldr	r2, [pc, #88]	; (800630c <HAL_TIM_MspPostInit+0xc0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d11e      	bne.n	80062f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	4a10      	ldr	r2, [pc, #64]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 80062c2:	f043 0304 	orr.w	r3, r3, #4
 80062c6:	6313      	str	r3, [r2, #48]	; 0x30
 80062c8:	4b0e      	ldr	r3, [pc, #56]	; (8006304 <HAL_TIM_MspPostInit+0xb8>)
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80062d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80062d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062da:	2302      	movs	r3, #2
 80062dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e2:	2300      	movs	r3, #0
 80062e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80062e6:	2303      	movs	r3, #3
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062ea:	f107 0314 	add.w	r3, r7, #20
 80062ee:	4619      	mov	r1, r3
 80062f0:	4807      	ldr	r0, [pc, #28]	; (8006310 <HAL_TIM_MspPostInit+0xc4>)
 80062f2:	f001 fca9 	bl	8007c48 <HAL_GPIO_Init>
}
 80062f6:	bf00      	nop
 80062f8:	3728      	adds	r7, #40	; 0x28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	40023800 	.word	0x40023800
 8006308:	40020000 	.word	0x40020000
 800630c:	40010400 	.word	0x40010400
 8006310:	40020800 	.word	0x40020800

08006314 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	609a      	str	r2, [r3, #8]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a19      	ldr	r2, [pc, #100]	; (8006398 <HAL_UART_MspInit+0x84>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d12c      	bne.n	8006390 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	4b18      	ldr	r3, [pc, #96]	; (800639c <HAL_UART_MspInit+0x88>)
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	4a17      	ldr	r2, [pc, #92]	; (800639c <HAL_UART_MspInit+0x88>)
 8006340:	f043 0310 	orr.w	r3, r3, #16
 8006344:	6453      	str	r3, [r2, #68]	; 0x44
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <HAL_UART_MspInit+0x88>)
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	f003 0310 	and.w	r3, r3, #16
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	60fb      	str	r3, [r7, #12]
 8006356:	4b11      	ldr	r3, [pc, #68]	; (800639c <HAL_UART_MspInit+0x88>)
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	4a10      	ldr	r2, [pc, #64]	; (800639c <HAL_UART_MspInit+0x88>)
 800635c:	f043 0301 	orr.w	r3, r3, #1
 8006360:	6313      	str	r3, [r2, #48]	; 0x30
 8006362:	4b0e      	ldr	r3, [pc, #56]	; (800639c <HAL_UART_MspInit+0x88>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800636e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006374:	2302      	movs	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006378:	2300      	movs	r3, #0
 800637a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800637c:	2303      	movs	r3, #3
 800637e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006380:	2307      	movs	r3, #7
 8006382:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006384:	f107 0314 	add.w	r3, r7, #20
 8006388:	4619      	mov	r1, r3
 800638a:	4805      	ldr	r0, [pc, #20]	; (80063a0 <HAL_UART_MspInit+0x8c>)
 800638c:	f001 fc5c 	bl	8007c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006390:	bf00      	nop
 8006392:	3728      	adds	r7, #40	; 0x28
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	40011000 	.word	0x40011000
 800639c:	40023800 	.word	0x40023800
 80063a0:	40020000 	.word	0x40020000

080063a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063a8:	e7fe      	b.n	80063a8 <NMI_Handler+0x4>

080063aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063ae:	e7fe      	b.n	80063ae <HardFault_Handler+0x4>

080063b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063b4:	e7fe      	b.n	80063b4 <MemManage_Handler+0x4>

080063b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063b6:	b480      	push	{r7}
 80063b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063ba:	e7fe      	b.n	80063ba <BusFault_Handler+0x4>

080063bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063c0:	e7fe      	b.n	80063c0 <UsageFault_Handler+0x4>

080063c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063c2:	b480      	push	{r7}
 80063c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063f0:	f000 f98a 	bl	8006708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063f4:	bf00      	nop
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80063fc:	4802      	ldr	r0, [pc, #8]	; (8006408 <TIM6_DAC_IRQHandler+0x10>)
 80063fe:	f003 fa38 	bl	8009872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	2001f764 	.word	0x2001f764

0800640c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006410:	4802      	ldr	r0, [pc, #8]	; (800641c <TIM7_IRQHandler+0x10>)
 8006412:	f003 fa2e 	bl	8009872 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	2001f84c 	.word	0x2001f84c

08006420 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006424:	4802      	ldr	r0, [pc, #8]	; (8006430 <DMA2_Stream0_IRQHandler+0x10>)
 8006426:	f000 ffbd 	bl	80073a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2001f704 	.word	0x2001f704

08006434 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006438:	4802      	ldr	r0, [pc, #8]	; (8006444 <DMA2_Stream2_IRQHandler+0x10>)
 800643a:	f000 ffb3 	bl	80073a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2001f7ec 	.word	0x2001f7ec

08006448 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 8006452:	2300      	movs	r3, #0
 8006454:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	2b52      	cmp	r3, #82	; 0x52
 800645a:	d10a      	bne.n	8006472 <getSwitchStatus+0x2a>
 800645c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006460:	480d      	ldr	r0, [pc, #52]	; (8006498 <getSwitchStatus+0x50>)
 8006462:	f001 fd8b 	bl	8007f7c <HAL_GPIO_ReadPin>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <getSwitchStatus+0x2a>
		ret = 1;
 800646c:	2301      	movs	r3, #1
 800646e:	81fb      	strh	r3, [r7, #14]
 8006470:	e00c      	b.n	800648c <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	2b4c      	cmp	r3, #76	; 0x4c
 8006476:	d109      	bne.n	800648c <getSwitchStatus+0x44>
 8006478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800647c:	4806      	ldr	r0, [pc, #24]	; (8006498 <getSwitchStatus+0x50>)
 800647e:	f001 fd7d 	bl	8007f7c <HAL_GPIO_ReadPin>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <getSwitchStatus+0x44>
		ret = 1;
 8006488:	2301      	movs	r3, #1
 800648a:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800648c:	89fb      	ldrh	r3, [r7, #14]

}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	40020000 	.word	0x40020000

0800649c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	617b      	str	r3, [r7, #20]
 80064ac:	e00a      	b.n	80064c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80064ae:	f3af 8000 	nop.w
 80064b2:	4601      	mov	r1, r0
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	60ba      	str	r2, [r7, #8]
 80064ba:	b2ca      	uxtb	r2, r1
 80064bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	3301      	adds	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	dbf0      	blt.n	80064ae <_read+0x12>
	}

return len;
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e009      	b.n	80064fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	60ba      	str	r2, [r7, #8]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd f883 	bl	80035fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	3301      	adds	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	dbf1      	blt.n	80064e8 <_write+0x12>
	}
	return len;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <_close>:

int _close(int file)
{
 800650e:	b480      	push	{r7}
 8006510:	b083      	sub	sp, #12
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
	return -1;
 8006516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006536:	605a      	str	r2, [r3, #4]
	return 0;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <_isatty>:

int _isatty(int file)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
	return 1;
 800654e:	2301      	movs	r3, #1
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
	return 0;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
	...

08006578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006580:	4a14      	ldr	r2, [pc, #80]	; (80065d4 <_sbrk+0x5c>)
 8006582:	4b15      	ldr	r3, [pc, #84]	; (80065d8 <_sbrk+0x60>)
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800658c:	4b13      	ldr	r3, [pc, #76]	; (80065dc <_sbrk+0x64>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006594:	4b11      	ldr	r3, [pc, #68]	; (80065dc <_sbrk+0x64>)
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <_sbrk+0x68>)
 8006598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800659a:	4b10      	ldr	r3, [pc, #64]	; (80065dc <_sbrk+0x64>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d207      	bcs.n	80065b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80065a8:	f004 fb5e 	bl	800ac68 <__errno>
 80065ac:	4602      	mov	r2, r0
 80065ae:	230c      	movs	r3, #12
 80065b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80065b2:	f04f 33ff 	mov.w	r3, #4294967295
 80065b6:	e009      	b.n	80065cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <_sbrk+0x64>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065be:	4b07      	ldr	r3, [pc, #28]	; (80065dc <_sbrk+0x64>)
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4413      	add	r3, r2
 80065c6:	4a05      	ldr	r2, [pc, #20]	; (80065dc <_sbrk+0x64>)
 80065c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065ca:	68fb      	ldr	r3, [r7, #12]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20020000 	.word	0x20020000
 80065d8:	00000400 	.word	0x00000400
 80065dc:	2001f380 	.word	0x2001f380
 80065e0:	2001f8c8 	.word	0x2001f8c8

080065e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065e8:	4b08      	ldr	r3, [pc, #32]	; (800660c <SystemInit+0x28>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	4a07      	ldr	r2, [pc, #28]	; (800660c <SystemInit+0x28>)
 80065f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <SystemInit+0x28>)
 80065fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065fe:	609a      	str	r2, [r3, #8]
#endif
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	e000ed00 	.word	0xe000ed00

08006610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006616:	e003      	b.n	8006620 <LoopCopyDataInit>

08006618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800661a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800661c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800661e:	3104      	adds	r1, #4

08006620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006620:	480b      	ldr	r0, [pc, #44]	; (8006650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006628:	d3f6      	bcc.n	8006618 <CopyDataInit>
  ldr  r2, =_sbss
 800662a:	4a0b      	ldr	r2, [pc, #44]	; (8006658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800662c:	e002      	b.n	8006634 <LoopFillZerobss>

0800662e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800662e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006630:	f842 3b04 	str.w	r3, [r2], #4

08006634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006634:	4b09      	ldr	r3, [pc, #36]	; (800665c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006638:	d3f9      	bcc.n	800662e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800663a:	f7ff ffd3 	bl	80065e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800663e:	f004 fb19 	bl	800ac74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006642:	f7fd f855 	bl	80036f0 <main>
  bx  lr    
 8006646:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006648:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800664c:	0800f510 	.word	0x0800f510
  ldr  r0, =_sdata
 8006650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006654:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006658:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800665c:	2001f8c4 	.word	0x2001f8c4

08006660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006660:	e7fe      	b.n	8006660 <ADC_IRQHandler>
	...

08006664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006668:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <HAL_Init+0x40>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a0d      	ldr	r2, [pc, #52]	; (80066a4 <HAL_Init+0x40>)
 800666e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_Init+0x40>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <HAL_Init+0x40>)
 800667a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800667e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <HAL_Init+0x40>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a07      	ldr	r2, [pc, #28]	; (80066a4 <HAL_Init+0x40>)
 8006686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800668a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800668c:	2003      	movs	r0, #3
 800668e:	f000 fd41 	bl	8007114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006692:	2000      	movs	r0, #0
 8006694:	f000 f808 	bl	80066a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006698:	f7ff fb10 	bl	8005cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40023c00 	.word	0x40023c00

080066a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_InitTick+0x54>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b12      	ldr	r3, [pc, #72]	; (8006700 <HAL_InitTick+0x58>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	4619      	mov	r1, r3
 80066ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066be:	fbb3 f3f1 	udiv	r3, r3, r1
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fd59 	bl	800717e <HAL_SYSTICK_Config>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e00e      	b.n	80066f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d80a      	bhi.n	80066f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066dc:	2200      	movs	r2, #0
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	f000 fd21 	bl	800712a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066e8:	4a06      	ldr	r2, [pc, #24]	; (8006704 <HAL_InitTick+0x5c>)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	e000      	b.n	80066f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3708      	adds	r7, #8
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000034 	.word	0x20000034
 8006700:	2000003c 	.word	0x2000003c
 8006704:	20000038 	.word	0x20000038

08006708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_IncTick+0x20>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	461a      	mov	r2, r3
 8006712:	4b06      	ldr	r3, [pc, #24]	; (800672c <HAL_IncTick+0x24>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4413      	add	r3, r2
 8006718:	4a04      	ldr	r2, [pc, #16]	; (800672c <HAL_IncTick+0x24>)
 800671a:	6013      	str	r3, [r2, #0]
}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	2000003c 	.word	0x2000003c
 800672c:	2001f89c 	.word	0x2001f89c

08006730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  return uwTick;
 8006734:	4b03      	ldr	r3, [pc, #12]	; (8006744 <HAL_GetTick+0x14>)
 8006736:	681b      	ldr	r3, [r3, #0]
}
 8006738:	4618      	mov	r0, r3
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2001f89c 	.word	0x2001f89c

08006748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006750:	f7ff ffee 	bl	8006730 <HAL_GetTick>
 8006754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006760:	d005      	beq.n	800676e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006762:	4b09      	ldr	r3, [pc, #36]	; (8006788 <HAL_Delay+0x40>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800676e:	bf00      	nop
 8006770:	f7ff ffde 	bl	8006730 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d8f7      	bhi.n	8006770 <HAL_Delay+0x28>
  {
  }
}
 8006780:	bf00      	nop
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	2000003c 	.word	0x2000003c

0800678c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e033      	b.n	800680a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d109      	bne.n	80067be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7ff faae 	bl	8005d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f003 0310 	and.w	r3, r3, #16
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d118      	bne.n	80067fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067d2:	f023 0302 	bic.w	r3, r3, #2
 80067d6:	f043 0202 	orr.w	r2, r3, #2
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa4a 	bl	8006c78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	f023 0303 	bic.w	r3, r3, #3
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	641a      	str	r2, [r3, #64]	; 0x40
 80067fa:	e001      	b.n	8006800 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_ADC_Start_DMA+0x1e>
 800682e:	2302      	movs	r3, #2
 8006830:	e0cc      	b.n	80069cc <HAL_ADC_Start_DMA+0x1b8>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b01      	cmp	r3, #1
 8006846:	d018      	beq.n	800687a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006858:	4b5e      	ldr	r3, [pc, #376]	; (80069d4 <HAL_ADC_Start_DMA+0x1c0>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5e      	ldr	r2, [pc, #376]	; (80069d8 <HAL_ADC_Start_DMA+0x1c4>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0c9a      	lsrs	r2, r3, #18
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800686c:	e002      	b.n	8006874 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3b01      	subs	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f9      	bne.n	800686e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	f040 80a0 	bne.w	80069ca <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d007      	beq.n	80068bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80068b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068c8:	d106      	bne.n	80068d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	f023 0206 	bic.w	r2, r3, #6
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	645a      	str	r2, [r3, #68]	; 0x44
 80068d6:	e002      	b.n	80068de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068e6:	4b3d      	ldr	r3, [pc, #244]	; (80069dc <HAL_ADC_Start_DMA+0x1c8>)
 80068e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	4a3c      	ldr	r2, [pc, #240]	; (80069e0 <HAL_ADC_Start_DMA+0x1cc>)
 80068f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	4a3b      	ldr	r2, [pc, #236]	; (80069e4 <HAL_ADC_Start_DMA+0x1d0>)
 80068f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	4a3a      	ldr	r2, [pc, #232]	; (80069e8 <HAL_ADC_Start_DMA+0x1d4>)
 8006900:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800690a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800691a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800692a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	334c      	adds	r3, #76	; 0x4c
 8006936:	4619      	mov	r1, r3
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f000 fcda 	bl	80072f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	2b00      	cmp	r3, #0
 800694a:	d12a      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_ADC_Start_DMA+0x1d8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d015      	beq.n	8006982 <HAL_ADC_Start_DMA+0x16e>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <HAL_ADC_Start_DMA+0x1dc>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d105      	bne.n	800696c <HAL_ADC_Start_DMA+0x158>
 8006960:	4b1e      	ldr	r3, [pc, #120]	; (80069dc <HAL_ADC_Start_DMA+0x1c8>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 031f 	and.w	r3, r3, #31
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00a      	beq.n	8006982 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <HAL_ADC_Start_DMA+0x1e0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d129      	bne.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <HAL_ADC_Start_DMA+0x1c8>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d823      	bhi.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d11c      	bne.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800699e:	609a      	str	r2, [r3, #8]
 80069a0:	e013      	b.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a11      	ldr	r2, [pc, #68]	; (80069ec <HAL_ADC_Start_DMA+0x1d8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10e      	bne.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d107      	bne.n	80069ca <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069c8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	20000034 	.word	0x20000034
 80069d8:	431bde83 	.word	0x431bde83
 80069dc:	40012300 	.word	0x40012300
 80069e0:	08006e71 	.word	0x08006e71
 80069e4:	08006f2b 	.word	0x08006f2b
 80069e8:	08006f47 	.word	0x08006f47
 80069ec:	40012000 	.word	0x40012000
 80069f0:	40012100 	.word	0x40012100
 80069f4:	40012200 	.word	0x40012200

080069f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e105      	b.n	8006c5c <HAL_ADC_ConfigChannel+0x228>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b09      	cmp	r3, #9
 8006a5e:	d925      	bls.n	8006aac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68d9      	ldr	r1, [r3, #12]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	3b1e      	subs	r3, #30
 8006a76:	2207      	movs	r2, #7
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	43da      	mvns	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	400a      	ands	r2, r1
 8006a84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68d9      	ldr	r1, [r3, #12]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4618      	mov	r0, r3
 8006a98:	4603      	mov	r3, r0
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	4403      	add	r3, r0
 8006a9e:	3b1e      	subs	r3, #30
 8006aa0:	409a      	lsls	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	60da      	str	r2, [r3, #12]
 8006aaa:	e022      	b.n	8006af2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6919      	ldr	r1, [r3, #16]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4613      	mov	r3, r2
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4413      	add	r3, r2
 8006ac0:	2207      	movs	r2, #7
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43da      	mvns	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	400a      	ands	r2, r1
 8006ace:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6919      	ldr	r1, [r3, #16]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4403      	add	r3, r0
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b06      	cmp	r3, #6
 8006af8:	d824      	bhi.n	8006b44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4413      	add	r3, r2
 8006b0a:	3b05      	subs	r3, #5
 8006b0c:	221f      	movs	r2, #31
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	43da      	mvns	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	400a      	ands	r2, r1
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4618      	mov	r0, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	3b05      	subs	r3, #5
 8006b36:	fa00 f203 	lsl.w	r2, r0, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	635a      	str	r2, [r3, #52]	; 0x34
 8006b42:	e04c      	b.n	8006bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	2b0c      	cmp	r3, #12
 8006b4a:	d824      	bhi.n	8006b96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3b23      	subs	r3, #35	; 0x23
 8006b5e:	221f      	movs	r2, #31
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	43da      	mvns	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	3b23      	subs	r3, #35	; 0x23
 8006b88:	fa00 f203 	lsl.w	r2, r0, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
 8006b94:	e023      	b.n	8006bde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3b41      	subs	r3, #65	; 0x41
 8006ba8:	221f      	movs	r2, #31
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43da      	mvns	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	3b41      	subs	r3, #65	; 0x41
 8006bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bde:	4b22      	ldr	r3, [pc, #136]	; (8006c68 <HAL_ADC_ConfigChannel+0x234>)
 8006be0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a21      	ldr	r2, [pc, #132]	; (8006c6c <HAL_ADC_ConfigChannel+0x238>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d109      	bne.n	8006c00 <HAL_ADC_ConfigChannel+0x1cc>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b12      	cmp	r3, #18
 8006bf2:	d105      	bne.n	8006c00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a19      	ldr	r2, [pc, #100]	; (8006c6c <HAL_ADC_ConfigChannel+0x238>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d123      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x21e>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d003      	beq.n	8006c1a <HAL_ADC_ConfigChannel+0x1e6>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b11      	cmp	r3, #17
 8006c18:	d11b      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b10      	cmp	r3, #16
 8006c2c:	d111      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <HAL_ADC_ConfigChannel+0x23c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a10      	ldr	r2, [pc, #64]	; (8006c74 <HAL_ADC_ConfigChannel+0x240>)
 8006c34:	fba2 2303 	umull	r2, r3, r2, r3
 8006c38:	0c9a      	lsrs	r2, r3, #18
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c44:	e002      	b.n	8006c4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1f9      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	40012300 	.word	0x40012300
 8006c6c:	40012000 	.word	0x40012000
 8006c70:	20000034 	.word	0x20000034
 8006c74:	431bde83 	.word	0x431bde83

08006c78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c80:	4b79      	ldr	r3, [pc, #484]	; (8006e68 <ADC_Init+0x1f0>)
 8006c82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6859      	ldr	r1, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	021a      	lsls	r2, r3, #8
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6899      	ldr	r1, [r3, #8]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	4a58      	ldr	r2, [pc, #352]	; (8006e6c <ADC_Init+0x1f4>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d022      	beq.n	8006d56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6899      	ldr	r1, [r3, #8]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	e00f      	b.n	8006d76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0202 	bic.w	r2, r2, #2
 8006d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6899      	ldr	r1, [r3, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	7e1b      	ldrb	r3, [r3, #24]
 8006d90:	005a      	lsls	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01b      	beq.n	8006ddc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006dc2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	035a      	lsls	r2, r3, #13
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	e007      	b.n	8006dec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	051a      	lsls	r2, r3, #20
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e2e:	025a      	lsls	r2, r3, #9
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6899      	ldr	r1, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	029a      	lsls	r2, r3, #10
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	40012300 	.word	0x40012300
 8006e6c:	0f000001 	.word	0x0f000001

08006e70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d13c      	bne.n	8006f04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d12b      	bne.n	8006efc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d127      	bne.n	8006efc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d006      	beq.n	8006ec8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d119      	bne.n	8006efc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0220 	bic.w	r2, r2, #32
 8006ed6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	f043 0201 	orr.w	r2, r3, #1
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff fd7b 	bl	80069f8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006f02:	e00e      	b.n	8006f22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fd85 	bl	8006a20 <HAL_ADC_ErrorCallback>
}
 8006f16:	e004      	b.n	8006f22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
}
 8006f22:	bf00      	nop
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff fd67 	bl	8006a0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2240      	movs	r2, #64	; 0x40
 8006f58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5e:	f043 0204 	orr.w	r2, r3, #4
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7ff fd5a 	bl	8006a20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f90:	4013      	ands	r3, r2
 8006f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fa6:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	60d3      	str	r3, [r2, #12]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	e000ed00 	.word	0xe000ed00

08006fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fc0:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	0a1b      	lsrs	r3, r3, #8
 8006fc6:	f003 0307 	and.w	r3, r3, #7
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr
 8006fd4:	e000ed00 	.word	0xe000ed00

08006fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	db0b      	blt.n	8007002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	f003 021f 	and.w	r2, r3, #31
 8006ff0:	4907      	ldr	r1, [pc, #28]	; (8007010 <__NVIC_EnableIRQ+0x38>)
 8006ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8006ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007002:	bf00      	nop
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	e000e100 	.word	0xe000e100

08007014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007024:	2b00      	cmp	r3, #0
 8007026:	db0a      	blt.n	800703e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	b2da      	uxtb	r2, r3
 800702c:	490c      	ldr	r1, [pc, #48]	; (8007060 <__NVIC_SetPriority+0x4c>)
 800702e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007032:	0112      	lsls	r2, r2, #4
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	440b      	add	r3, r1
 8007038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800703c:	e00a      	b.n	8007054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4908      	ldr	r1, [pc, #32]	; (8007064 <__NVIC_SetPriority+0x50>)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	3b04      	subs	r3, #4
 800704c:	0112      	lsls	r2, r2, #4
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	440b      	add	r3, r1
 8007052:	761a      	strb	r2, [r3, #24]
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	e000e100 	.word	0xe000e100
 8007064:	e000ed00 	.word	0xe000ed00

08007068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007068:	b480      	push	{r7}
 800706a:	b089      	sub	sp, #36	; 0x24
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	f1c3 0307 	rsb	r3, r3, #7
 8007082:	2b04      	cmp	r3, #4
 8007084:	bf28      	it	cs
 8007086:	2304      	movcs	r3, #4
 8007088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	3304      	adds	r3, #4
 800708e:	2b06      	cmp	r3, #6
 8007090:	d902      	bls.n	8007098 <NVIC_EncodePriority+0x30>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	3b03      	subs	r3, #3
 8007096:	e000      	b.n	800709a <NVIC_EncodePriority+0x32>
 8007098:	2300      	movs	r3, #0
 800709a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800709c:	f04f 32ff 	mov.w	r2, #4294967295
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	fa02 f303 	lsl.w	r3, r2, r3
 80070a6:	43da      	mvns	r2, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	401a      	ands	r2, r3
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070b0:	f04f 31ff 	mov.w	r1, #4294967295
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ba:	43d9      	mvns	r1, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070c0:	4313      	orrs	r3, r2
         );
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3724      	adds	r7, #36	; 0x24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
	...

080070d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3b01      	subs	r3, #1
 80070dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070e0:	d301      	bcc.n	80070e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070e2:	2301      	movs	r3, #1
 80070e4:	e00f      	b.n	8007106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070e6:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <SysTick_Config+0x40>)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070ee:	210f      	movs	r1, #15
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	f7ff ff8e 	bl	8007014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070f8:	4b05      	ldr	r3, [pc, #20]	; (8007110 <SysTick_Config+0x40>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <SysTick_Config+0x40>)
 8007100:	2207      	movs	r2, #7
 8007102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	e000e010 	.word	0xe000e010

08007114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ff29 	bl	8006f74 <__NVIC_SetPriorityGrouping>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800712a:	b580      	push	{r7, lr}
 800712c:	b086      	sub	sp, #24
 800712e:	af00      	add	r7, sp, #0
 8007130:	4603      	mov	r3, r0
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
 8007136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800713c:	f7ff ff3e 	bl	8006fbc <__NVIC_GetPriorityGrouping>
 8007140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	6978      	ldr	r0, [r7, #20]
 8007148:	f7ff ff8e 	bl	8007068 <NVIC_EncodePriority>
 800714c:	4602      	mov	r2, r0
 800714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007152:	4611      	mov	r1, r2
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff ff5d 	bl	8007014 <__NVIC_SetPriority>
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	4603      	mov	r3, r0
 800716a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800716c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007170:	4618      	mov	r0, r3
 8007172:	f7ff ff31 	bl	8006fd8 <__NVIC_EnableIRQ>
}
 8007176:	bf00      	nop
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b082      	sub	sp, #8
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff ffa2 	bl	80070d0 <SysTick_Config>
 800718c:	4603      	mov	r3, r0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80071a4:	f7ff fac4 	bl	8006730 <HAL_GetTick>
 80071a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e099      	b.n	80072e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071d4:	e00f      	b.n	80071f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071d6:	f7ff faab 	bl	8006730 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	d908      	bls.n	80071f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2220      	movs	r2, #32
 80071e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2203      	movs	r2, #3
 80071ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	e078      	b.n	80072e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e8      	bne.n	80071d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_DMA_Init+0x158>)
 8007210:	4013      	ands	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007222:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800722e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800723a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	2b04      	cmp	r3, #4
 800724e:	d107      	bne.n	8007260 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007258:	4313      	orrs	r3, r2
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0307 	bic.w	r3, r3, #7
 8007276:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b04      	cmp	r3, #4
 8007288:	d117      	bne.n	80072ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00e      	beq.n	80072ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fa6f 	bl	8007780 <DMA_CheckFifoParam>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d008      	beq.n	80072ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2240      	movs	r2, #64	; 0x40
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80072b6:	2301      	movs	r3, #1
 80072b8:	e016      	b.n	80072e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa26 	bl	8007714 <DMA_CalcBaseAndBitshift>
 80072c8:	4603      	mov	r3, r0
 80072ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d0:	223f      	movs	r2, #63	; 0x3f
 80072d2:	409a      	lsls	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	f010803f 	.word	0xf010803f

080072f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800730a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_DMA_Start_IT+0x26>
 8007316:	2302      	movs	r3, #2
 8007318:	e040      	b.n	800739c <HAL_DMA_Start_IT+0xa8>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b01      	cmp	r3, #1
 800732c:	d12f      	bne.n	800738e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 f9b8 	bl	80076b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800734c:	223f      	movs	r2, #63	; 0x3f
 800734e:	409a      	lsls	r2, r3
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0216 	orr.w	r2, r2, #22
 8007362:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d007      	beq.n	800737c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0208 	orr.w	r2, r2, #8
 800737a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e005      	b.n	800739a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007396:	2302      	movs	r3, #2
 8007398:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073b0:	4b92      	ldr	r3, [pc, #584]	; (80075fc <HAL_DMA_IRQHandler+0x258>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a92      	ldr	r2, [pc, #584]	; (8007600 <HAL_DMA_IRQHandler+0x25c>)
 80073b6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ba:	0a9b      	lsrs	r3, r3, #10
 80073bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ce:	2208      	movs	r2, #8
 80073d0:	409a      	lsls	r2, r3
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4013      	ands	r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d01a      	beq.n	8007410 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d013      	beq.n	8007410 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0204 	bic.w	r2, r2, #4
 80073f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073fc:	2208      	movs	r2, #8
 80073fe:	409a      	lsls	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007408:	f043 0201 	orr.w	r2, r3, #1
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007414:	2201      	movs	r2, #1
 8007416:	409a      	lsls	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	d012      	beq.n	8007446 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007432:	2201      	movs	r2, #1
 8007434:	409a      	lsls	r2, r3
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f043 0202 	orr.w	r2, r3, #2
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	2204      	movs	r2, #4
 800744c:	409a      	lsls	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d012      	beq.n	800747c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007468:	2204      	movs	r2, #4
 800746a:	409a      	lsls	r2, r3
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f043 0204 	orr.w	r2, r3, #4
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007480:	2210      	movs	r2, #16
 8007482:	409a      	lsls	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4013      	ands	r3, r2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d043      	beq.n	8007514 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d03c      	beq.n	8007514 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800749e:	2210      	movs	r2, #16
 80074a0:	409a      	lsls	r2, r3
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d018      	beq.n	80074e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d024      	beq.n	8007514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
 80074d2:	e01f      	b.n	8007514 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01b      	beq.n	8007514 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
 80074e4:	e016      	b.n	8007514 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0208 	bic.w	r2, r2, #8
 8007502:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d003      	beq.n	8007514 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007518:	2220      	movs	r2, #32
 800751a:	409a      	lsls	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 808e 	beq.w	8007642 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8086 	beq.w	8007642 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	2220      	movs	r2, #32
 800753c:	409a      	lsls	r2, r3
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b05      	cmp	r3, #5
 800754c:	d136      	bne.n	80075bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0216 	bic.w	r2, r2, #22
 800755c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695a      	ldr	r2, [r3, #20]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800756c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <HAL_DMA_IRQHandler+0x1da>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0208 	bic.w	r2, r2, #8
 800758c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	223f      	movs	r2, #63	; 0x3f
 8007594:	409a      	lsls	r2, r3
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d07d      	beq.n	80076ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
        }
        return;
 80075ba:	e078      	b.n	80076ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01c      	beq.n	8007604 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d108      	bne.n	80075ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d030      	beq.n	8007642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	4798      	blx	r3
 80075e8:	e02b      	b.n	8007642 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d027      	beq.n	8007642 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
 80075fa:	e022      	b.n	8007642 <HAL_DMA_IRQHandler+0x29e>
 80075fc:	20000034 	.word	0x20000034
 8007600:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10f      	bne.n	8007632 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 0210 	bic.w	r2, r2, #16
 8007620:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	2b00      	cmp	r3, #0
 8007648:	d032      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d022      	beq.n	800769c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2205      	movs	r2, #5
 800765a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3301      	adds	r3, #1
 8007672:	60bb      	str	r3, [r7, #8]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	429a      	cmp	r2, r3
 8007678:	d307      	bcc.n	800768a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0301 	and.w	r3, r3, #1
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1f2      	bne.n	800766e <HAL_DMA_IRQHandler+0x2ca>
 8007688:	e000      	b.n	800768c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800768a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
 80076ac:	e000      	b.n	80076b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80076ae:	bf00      	nop
    }
  }
}
 80076b0:	3718      	adds	r7, #24
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop

080076b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b40      	cmp	r3, #64	; 0x40
 80076e4:	d108      	bne.n	80076f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80076f6:	e007      	b.n	8007708 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	60da      	str	r2, [r3, #12]
}
 8007708:	bf00      	nop
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	3b10      	subs	r3, #16
 8007724:	4a14      	ldr	r2, [pc, #80]	; (8007778 <DMA_CalcBaseAndBitshift+0x64>)
 8007726:	fba2 2303 	umull	r2, r3, r2, r3
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800772e:	4a13      	ldr	r2, [pc, #76]	; (800777c <DMA_CalcBaseAndBitshift+0x68>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2b03      	cmp	r3, #3
 8007740:	d909      	bls.n	8007756 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800774a:	f023 0303 	bic.w	r3, r3, #3
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	659a      	str	r2, [r3, #88]	; 0x58
 8007754:	e007      	b.n	8007766 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	aaaaaaab 	.word	0xaaaaaaab
 800777c:	0800f1d8 	.word	0x0800f1d8

08007780 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d11f      	bne.n	80077da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d855      	bhi.n	800784c <DMA_CheckFifoParam+0xcc>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <DMA_CheckFifoParam+0x28>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077cb 	.word	0x080077cb
 80077b0:	080077b9 	.word	0x080077b9
 80077b4:	0800784d 	.word	0x0800784d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d045      	beq.n	8007850 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077c8:	e042      	b.n	8007850 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077d2:	d13f      	bne.n	8007854 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077d8:	e03c      	b.n	8007854 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	d121      	bne.n	8007828 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d836      	bhi.n	8007858 <DMA_CheckFifoParam+0xd8>
 80077ea:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <DMA_CheckFifoParam+0x70>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007807 	.word	0x08007807
 80077f8:	08007801 	.word	0x08007801
 80077fc:	08007819 	.word	0x08007819
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
      break;
 8007804:	e02f      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d024      	beq.n	800785c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007816:	e021      	b.n	800785c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007820:	d11e      	bne.n	8007860 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007826:	e01b      	b.n	8007860 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b02      	cmp	r3, #2
 800782c:	d902      	bls.n	8007834 <DMA_CheckFifoParam+0xb4>
 800782e:	2b03      	cmp	r3, #3
 8007830:	d003      	beq.n	800783a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007832:	e018      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	73fb      	strb	r3, [r7, #15]
      break;
 8007838:	e015      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00e      	beq.n	8007864 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	73fb      	strb	r3, [r7, #15]
      break;
 800784a:	e00b      	b.n	8007864 <DMA_CheckFifoParam+0xe4>
      break;
 800784c:	bf00      	nop
 800784e:	e00a      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;
 8007850:	bf00      	nop
 8007852:	e008      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;
 8007854:	bf00      	nop
 8007856:	e006      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;
 8007858:	bf00      	nop
 800785a:	e004      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;
 800785c:	bf00      	nop
 800785e:	e002      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;   
 8007860:	bf00      	nop
 8007862:	e000      	b.n	8007866 <DMA_CheckFifoParam+0xe6>
      break;
 8007864:	bf00      	nop
    }
  } 
  
  return status; 
 8007866:	7bfb      	ldrb	r3, [r7, #15]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <HAL_FLASH_Unlock+0x38>)
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	da0b      	bge.n	800789e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007886:	4b09      	ldr	r3, [pc, #36]	; (80078ac <HAL_FLASH_Unlock+0x38>)
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <HAL_FLASH_Unlock+0x3c>)
 800788a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800788c:	4b07      	ldr	r3, [pc, #28]	; (80078ac <HAL_FLASH_Unlock+0x38>)
 800788e:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <HAL_FLASH_Unlock+0x40>)
 8007890:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007892:	4b06      	ldr	r3, [pc, #24]	; (80078ac <HAL_FLASH_Unlock+0x38>)
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da01      	bge.n	800789e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800789e:	79fb      	ldrb	r3, [r7, #7]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	40023c00 	.word	0x40023c00
 80078b0:	45670123 	.word	0x45670123
 80078b4:	cdef89ab 	.word	0xcdef89ab

080078b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HAL_FLASH_Lock+0x1c>)
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_FLASH_Lock+0x1c>)
 80078c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr
 80078d4:	40023c00 	.word	0x40023c00

080078d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078e4:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <FLASH_WaitForLastOperation+0x78>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80078ea:	f7fe ff21 	bl	8006730 <HAL_GetTick>
 80078ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80078f0:	e010      	b.n	8007914 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d00c      	beq.n	8007914 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <FLASH_WaitForLastOperation+0x38>
 8007900:	f7fe ff16 	bl	8006730 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d201      	bcs.n	8007914 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e019      	b.n	8007948 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007914:	4b0f      	ldr	r3, [pc, #60]	; (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e8      	bne.n	80078f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <FLASH_WaitForLastOperation+0x7c>)
 800792e:	2201      	movs	r2, #1
 8007930:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <FLASH_WaitForLastOperation+0x7c>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800793e:	f000 f80b 	bl	8007958 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
  
}  
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	2001f8a0 	.word	0x2001f8a0
 8007954:	40023c00 	.word	0x40023c00

08007958 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800795c:	4b27      	ldr	r3, [pc, #156]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	f043 0310 	orr.w	r3, r3, #16
 8007970:	4a23      	ldr	r2, [pc, #140]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 8007972:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007974:	4b21      	ldr	r3, [pc, #132]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 8007976:	2210      	movs	r2, #16
 8007978:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800797a:	4b20      	ldr	r3, [pc, #128]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	d008      	beq.n	8007998 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007986:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f043 0308 	orr.w	r3, r3, #8
 800798e:	4a1c      	ldr	r2, [pc, #112]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 8007990:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007992:	4b1a      	ldr	r3, [pc, #104]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 8007994:	2220      	movs	r2, #32
 8007996:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007998:	4b18      	ldr	r3, [pc, #96]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80079a4:	4b16      	ldr	r3, [pc, #88]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079a6:	69db      	ldr	r3, [r3, #28]
 80079a8:	f043 0304 	orr.w	r3, r3, #4
 80079ac:	4a14      	ldr	r2, [pc, #80]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079ae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80079b0:	4b12      	ldr	r3, [pc, #72]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 80079b2:	2240      	movs	r2, #64	; 0x40
 80079b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80079b6:	4b11      	ldr	r3, [pc, #68]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d008      	beq.n	80079d4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80079c2:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	4a0d      	ldr	r2, [pc, #52]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079cc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80079ce:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 80079d0:	2280      	movs	r2, #128	; 0x80
 80079d2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80079d4:	4b09      	ldr	r3, [pc, #36]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d008      	beq.n	80079f2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80079e0:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f043 0320 	orr.w	r3, r3, #32
 80079e8:	4a05      	ldr	r2, [pc, #20]	; (8007a00 <FLASH_SetErrorCode+0xa8>)
 80079ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80079ec:	4b03      	ldr	r3, [pc, #12]	; (80079fc <FLASH_SetErrorCode+0xa4>)
 80079ee:	2202      	movs	r2, #2
 80079f0:	60da      	str	r2, [r3, #12]
  }
}
 80079f2:	bf00      	nop
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	40023c00 	.word	0x40023c00
 8007a00:	2001f8a0 	.word	0x2001f8a0

08007a04 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a16:	4b31      	ldr	r3, [pc, #196]	; (8007adc <HAL_FLASHEx_Erase+0xd8>)
 8007a18:	7e1b      	ldrb	r3, [r3, #24]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_FLASHEx_Erase+0x1e>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e058      	b.n	8007ad4 <HAL_FLASHEx_Erase+0xd0>
 8007a22:	4b2e      	ldr	r3, [pc, #184]	; (8007adc <HAL_FLASHEx_Erase+0xd8>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a2c:	f7ff ff54 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d148      	bne.n	8007acc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a40:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d115      	bne.n	8007a76 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	4619      	mov	r1, r3
 8007a56:	4610      	mov	r0, r2
 8007a58:	f000 f844 	bl	8007ae4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a60:	f7ff ff3a 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007a68:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <HAL_FLASHEx_Erase+0xdc>)
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <HAL_FLASHEx_Erase+0xdc>)
 8007a6e:	f023 0304 	bic.w	r3, r3, #4
 8007a72:	6113      	str	r3, [r2, #16]
 8007a74:	e028      	b.n	8007ac8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	60bb      	str	r3, [r7, #8]
 8007a7c:	e01c      	b.n	8007ab8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	68b8      	ldr	r0, [r7, #8]
 8007a88:	f000 f850 	bl	8007b2c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a90:	f7ff ff22 	bl	80078d8 <FLASH_WaitForLastOperation>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <HAL_FLASHEx_Erase+0xdc>)
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	4a10      	ldr	r2, [pc, #64]	; (8007ae0 <HAL_FLASHEx_Erase+0xdc>)
 8007a9e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007aa2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	601a      	str	r2, [r3, #0]
          break;
 8007ab0:	e00a      	b.n	8007ac8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	60bb      	str	r3, [r7, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d3da      	bcc.n	8007a7e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007ac8:	f000 f878 	bl	8007bbc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007acc:	4b03      	ldr	r3, [pc, #12]	; (8007adc <HAL_FLASHEx_Erase+0xd8>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	761a      	strb	r2, [r3, #24]

  return status;
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	2001f8a0 	.word	0x2001f8a0
 8007ae0:	40023c00 	.word	0x40023c00

08007ae4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007af0:	4b0d      	ldr	r3, [pc, #52]	; (8007b28 <FLASH_MassErase+0x44>)
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	4a0c      	ldr	r2, [pc, #48]	; (8007b28 <FLASH_MassErase+0x44>)
 8007af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007afa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007afc:	4b0a      	ldr	r3, [pc, #40]	; (8007b28 <FLASH_MassErase+0x44>)
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	4a09      	ldr	r2, [pc, #36]	; (8007b28 <FLASH_MassErase+0x44>)
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007b08:	4b07      	ldr	r3, [pc, #28]	; (8007b28 <FLASH_MassErase+0x44>)
 8007b0a:	691a      	ldr	r2, [r3, #16]
 8007b0c:	79fb      	ldrb	r3, [r7, #7]
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	4313      	orrs	r3, r2
 8007b12:	4a05      	ldr	r2, [pc, #20]	; (8007b28 <FLASH_MassErase+0x44>)
 8007b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b18:	6113      	str	r3, [r2, #16]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40023c00 	.word	0x40023c00

08007b2c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
 8007b46:	e010      	b.n	8007b6a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d103      	bne.n	8007b56 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e009      	b.n	8007b6a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d103      	bne.n	8007b64 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	e002      	b.n	8007b6a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007b64:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007b68:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b6a:	4b13      	ldr	r3, [pc, #76]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	4a12      	ldr	r2, [pc, #72]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007b76:	4b10      	ldr	r3, [pc, #64]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	490f      	ldr	r1, [pc, #60]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	4a0c      	ldr	r2, [pc, #48]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007b8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	00db      	lsls	r3, r3, #3
 8007b96:	4313      	orrs	r3, r2
 8007b98:	4a07      	ldr	r2, [pc, #28]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007b9a:	f043 0302 	orr.w	r3, r3, #2
 8007b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	4a04      	ldr	r2, [pc, #16]	; (8007bb8 <FLASH_Erase_Sector+0x8c>)
 8007ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007baa:	6113      	str	r3, [r2, #16]
}
 8007bac:	bf00      	nop
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40023c00 	.word	0x40023c00

08007bbc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007bc0:	4b20      	ldr	r3, [pc, #128]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d017      	beq.n	8007bfc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bd2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007bd8:	4b1a      	ldr	r3, [pc, #104]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a19      	ldr	r2, [pc, #100]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007be2:	6013      	str	r3, [r2, #0]
 8007be4:	4b17      	ldr	r3, [pc, #92]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a16      	ldr	r2, [pc, #88]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007bf0:	4b14      	ldr	r3, [pc, #80]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a13      	ldr	r2, [pc, #76]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bfa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007bfc:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d017      	beq.n	8007c38 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c12:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a0a      	ldr	r2, [pc, #40]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a07      	ldr	r2, [pc, #28]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a04      	ldr	r2, [pc, #16]	; (8007c44 <FLASH_FlushCaches+0x88>)
 8007c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c36:	6013      	str	r3, [r2, #0]
  }
}
 8007c38:	bf00      	nop
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40023c00 	.word	0x40023c00

08007c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b089      	sub	sp, #36	; 0x24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c52:	2300      	movs	r3, #0
 8007c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	e16b      	b.n	8007f3c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c64:	2201      	movs	r2, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4013      	ands	r3, r2
 8007c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f040 815a 	bne.w	8007f36 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d00b      	beq.n	8007ca2 <HAL_GPIO_Init+0x5a>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	d007      	beq.n	8007ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c96:	2b11      	cmp	r3, #17
 8007c98:	d003      	beq.n	8007ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b12      	cmp	r3, #18
 8007ca0:	d130      	bne.n	8007d04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	005b      	lsls	r3, r3, #1
 8007cac:	2203      	movs	r2, #3
 8007cae:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb2:	43db      	mvns	r3, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cd8:	2201      	movs	r2, #1
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	f003 0201 	and.w	r2, r3, #1
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	005b      	lsls	r3, r3, #1
 8007d0e:	2203      	movs	r2, #3
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	43db      	mvns	r3, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4013      	ands	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d003      	beq.n	8007d44 <HAL_GPIO_Init+0xfc>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	2b12      	cmp	r3, #18
 8007d42:	d123      	bne.n	8007d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	08da      	lsrs	r2, r3, #3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3208      	adds	r2, #8
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f003 0307 	and.w	r3, r3, #7
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	220f      	movs	r2, #15
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	43db      	mvns	r3, r3
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	4013      	ands	r3, r2
 8007d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	08da      	lsrs	r2, r3, #3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3208      	adds	r2, #8
 8007d86:	69b9      	ldr	r1, [r7, #24]
 8007d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	005b      	lsls	r3, r3, #1
 8007d96:	2203      	movs	r2, #3
 8007d98:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4013      	ands	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 0203 	and.w	r2, r3, #3
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	fa02 f303 	lsl.w	r3, r2, r3
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80b4 	beq.w	8007f36 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	4b5f      	ldr	r3, [pc, #380]	; (8007f50 <HAL_GPIO_Init+0x308>)
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	4a5e      	ldr	r2, [pc, #376]	; (8007f50 <HAL_GPIO_Init+0x308>)
 8007dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8007dde:	4b5c      	ldr	r3, [pc, #368]	; (8007f50 <HAL_GPIO_Init+0x308>)
 8007de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dea:	4a5a      	ldr	r2, [pc, #360]	; (8007f54 <HAL_GPIO_Init+0x30c>)
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	089b      	lsrs	r3, r3, #2
 8007df0:	3302      	adds	r3, #2
 8007df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	f003 0303 	and.w	r3, r3, #3
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	220f      	movs	r2, #15
 8007e02:	fa02 f303 	lsl.w	r3, r2, r3
 8007e06:	43db      	mvns	r3, r3
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a51      	ldr	r2, [pc, #324]	; (8007f58 <HAL_GPIO_Init+0x310>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02b      	beq.n	8007e6e <HAL_GPIO_Init+0x226>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a50      	ldr	r2, [pc, #320]	; (8007f5c <HAL_GPIO_Init+0x314>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d025      	beq.n	8007e6a <HAL_GPIO_Init+0x222>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a4f      	ldr	r2, [pc, #316]	; (8007f60 <HAL_GPIO_Init+0x318>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01f      	beq.n	8007e66 <HAL_GPIO_Init+0x21e>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a4e      	ldr	r2, [pc, #312]	; (8007f64 <HAL_GPIO_Init+0x31c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d019      	beq.n	8007e62 <HAL_GPIO_Init+0x21a>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a4d      	ldr	r2, [pc, #308]	; (8007f68 <HAL_GPIO_Init+0x320>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_GPIO_Init+0x216>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a4c      	ldr	r2, [pc, #304]	; (8007f6c <HAL_GPIO_Init+0x324>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00d      	beq.n	8007e5a <HAL_GPIO_Init+0x212>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a4b      	ldr	r2, [pc, #300]	; (8007f70 <HAL_GPIO_Init+0x328>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <HAL_GPIO_Init+0x20e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a4a      	ldr	r2, [pc, #296]	; (8007f74 <HAL_GPIO_Init+0x32c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d101      	bne.n	8007e52 <HAL_GPIO_Init+0x20a>
 8007e4e:	2307      	movs	r3, #7
 8007e50:	e00e      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e52:	2308      	movs	r3, #8
 8007e54:	e00c      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e56:	2306      	movs	r3, #6
 8007e58:	e00a      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e5a:	2305      	movs	r3, #5
 8007e5c:	e008      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e006      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e62:	2303      	movs	r3, #3
 8007e64:	e004      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e002      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_GPIO_Init+0x228>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	f002 0203 	and.w	r2, r2, #3
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	4093      	lsls	r3, r2
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e80:	4934      	ldr	r1, [pc, #208]	; (8007f54 <HAL_GPIO_Init+0x30c>)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	3302      	adds	r3, #2
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e8e:	4b3a      	ldr	r3, [pc, #232]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	43db      	mvns	r3, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007eb2:	4a31      	ldr	r2, [pc, #196]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007eb8:	4b2f      	ldr	r3, [pc, #188]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007edc:	4a26      	ldr	r2, [pc, #152]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007ee2:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007f0c:	4b1a      	ldr	r3, [pc, #104]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f30:	4a11      	ldr	r2, [pc, #68]	; (8007f78 <HAL_GPIO_Init+0x330>)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	f67f ae90 	bls.w	8007c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f44:	bf00      	nop
 8007f46:	3724      	adds	r7, #36	; 0x24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40013800 	.word	0x40013800
 8007f58:	40020000 	.word	0x40020000
 8007f5c:	40020400 	.word	0x40020400
 8007f60:	40020800 	.word	0x40020800
 8007f64:	40020c00 	.word	0x40020c00
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	40021400 	.word	0x40021400
 8007f70:	40021800 	.word	0x40021800
 8007f74:	40021c00 	.word	0x40021c00
 8007f78:	40013c00 	.word	0x40013c00

08007f7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f94:	2301      	movs	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	e001      	b.n	8007f9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fbc:	787b      	ldrb	r3, [r7, #1]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fc2:	887a      	ldrh	r2, [r7, #2]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fc8:	e003      	b.n	8007fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fca:	887b      	ldrh	r3, [r7, #2]
 8007fcc:	041a      	lsls	r2, r3, #16
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	619a      	str	r2, [r3, #24]
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d101      	bne.n	8007ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e11f      	b.n	8008232 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d106      	bne.n	800800c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fd ff96 	bl	8005f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2224      	movs	r2, #36	; 0x24
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0201 	bic.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008032:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008042:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008044:	f000 fd18 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 8008048:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4a7b      	ldr	r2, [pc, #492]	; (800823c <HAL_I2C_Init+0x25c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d807      	bhi.n	8008064 <HAL_I2C_Init+0x84>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4a7a      	ldr	r2, [pc, #488]	; (8008240 <HAL_I2C_Init+0x260>)
 8008058:	4293      	cmp	r3, r2
 800805a:	bf94      	ite	ls
 800805c:	2301      	movls	r3, #1
 800805e:	2300      	movhi	r3, #0
 8008060:	b2db      	uxtb	r3, r3
 8008062:	e006      	b.n	8008072 <HAL_I2C_Init+0x92>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4a77      	ldr	r2, [pc, #476]	; (8008244 <HAL_I2C_Init+0x264>)
 8008068:	4293      	cmp	r3, r2
 800806a:	bf94      	ite	ls
 800806c:	2301      	movls	r3, #1
 800806e:	2300      	movhi	r3, #0
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e0db      	b.n	8008232 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a72      	ldr	r2, [pc, #456]	; (8008248 <HAL_I2C_Init+0x268>)
 800807e:	fba2 2303 	umull	r2, r3, r2, r3
 8008082:	0c9b      	lsrs	r3, r3, #18
 8008084:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	430a      	orrs	r2, r1
 8008098:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4a64      	ldr	r2, [pc, #400]	; (800823c <HAL_I2C_Init+0x25c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d802      	bhi.n	80080b4 <HAL_I2C_Init+0xd4>
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	3301      	adds	r3, #1
 80080b2:	e009      	b.n	80080c8 <HAL_I2C_Init+0xe8>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	4a63      	ldr	r2, [pc, #396]	; (800824c <HAL_I2C_Init+0x26c>)
 80080c0:	fba2 2303 	umull	r2, r3, r2, r3
 80080c4:	099b      	lsrs	r3, r3, #6
 80080c6:	3301      	adds	r3, #1
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	430b      	orrs	r3, r1
 80080ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	4956      	ldr	r1, [pc, #344]	; (800823c <HAL_I2C_Init+0x25c>)
 80080e4:	428b      	cmp	r3, r1
 80080e6:	d80d      	bhi.n	8008104 <HAL_I2C_Init+0x124>
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	1e59      	subs	r1, r3, #1
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	bf38      	it	cc
 8008100:	2304      	movcc	r3, #4
 8008102:	e04f      	b.n	80081a4 <HAL_I2C_Init+0x1c4>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d111      	bne.n	8008130 <HAL_I2C_Init+0x150>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	1e58      	subs	r0, r3, #1
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6859      	ldr	r1, [r3, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	440b      	add	r3, r1
 800811a:	fbb0 f3f3 	udiv	r3, r0, r3
 800811e:	3301      	adds	r3, #1
 8008120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008124:	2b00      	cmp	r3, #0
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	e012      	b.n	8008156 <HAL_I2C_Init+0x176>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	1e58      	subs	r0, r3, #1
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6859      	ldr	r1, [r3, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	0099      	lsls	r1, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	fbb0 f3f3 	udiv	r3, r0, r3
 8008146:	3301      	adds	r3, #1
 8008148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800814c:	2b00      	cmp	r3, #0
 800814e:	bf0c      	ite	eq
 8008150:	2301      	moveq	r3, #1
 8008152:	2300      	movne	r3, #0
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <HAL_I2C_Init+0x17e>
 800815a:	2301      	movs	r3, #1
 800815c:	e022      	b.n	80081a4 <HAL_I2C_Init+0x1c4>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10e      	bne.n	8008184 <HAL_I2C_Init+0x1a4>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	1e58      	subs	r0, r3, #1
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6859      	ldr	r1, [r3, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	440b      	add	r3, r1
 8008174:	fbb0 f3f3 	udiv	r3, r0, r3
 8008178:	3301      	adds	r3, #1
 800817a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800817e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008182:	e00f      	b.n	80081a4 <HAL_I2C_Init+0x1c4>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	1e58      	subs	r0, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6859      	ldr	r1, [r3, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	440b      	add	r3, r1
 8008192:	0099      	lsls	r1, r3, #2
 8008194:	440b      	add	r3, r1
 8008196:	fbb0 f3f3 	udiv	r3, r0, r3
 800819a:	3301      	adds	r3, #1
 800819c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	6809      	ldr	r1, [r1, #0]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69da      	ldr	r2, [r3, #28]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	431a      	orrs	r2, r3
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6911      	ldr	r1, [r2, #16]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	68d2      	ldr	r2, [r2, #12]
 80081de:	4311      	orrs	r1, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	6812      	ldr	r2, [r2, #0]
 80081e4:	430b      	orrs	r3, r1
 80081e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695a      	ldr	r2, [r3, #20]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	000186a0 	.word	0x000186a0
 8008240:	001e847f 	.word	0x001e847f
 8008244:	003d08ff 	.word	0x003d08ff
 8008248:	431bde83 	.word	0x431bde83
 800824c:	10624dd3 	.word	0x10624dd3

08008250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e25b      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d075      	beq.n	800835a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800826e:	4ba3      	ldr	r3, [pc, #652]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	f003 030c 	and.w	r3, r3, #12
 8008276:	2b04      	cmp	r3, #4
 8008278:	d00c      	beq.n	8008294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800827a:	4ba0      	ldr	r3, [pc, #640]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008282:	2b08      	cmp	r3, #8
 8008284:	d112      	bne.n	80082ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008286:	4b9d      	ldr	r3, [pc, #628]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800828e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008292:	d10b      	bne.n	80082ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008294:	4b99      	ldr	r3, [pc, #612]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d05b      	beq.n	8008358 <HAL_RCC_OscConfig+0x108>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d157      	bne.n	8008358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e236      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b4:	d106      	bne.n	80082c4 <HAL_RCC_OscConfig+0x74>
 80082b6:	4b91      	ldr	r3, [pc, #580]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a90      	ldr	r2, [pc, #576]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e01d      	b.n	8008300 <HAL_RCC_OscConfig+0xb0>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082cc:	d10c      	bne.n	80082e8 <HAL_RCC_OscConfig+0x98>
 80082ce:	4b8b      	ldr	r3, [pc, #556]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a8a      	ldr	r2, [pc, #552]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082d8:	6013      	str	r3, [r2, #0]
 80082da:	4b88      	ldr	r3, [pc, #544]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a87      	ldr	r2, [pc, #540]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	e00b      	b.n	8008300 <HAL_RCC_OscConfig+0xb0>
 80082e8:	4b84      	ldr	r3, [pc, #528]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a83      	ldr	r2, [pc, #524]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082f2:	6013      	str	r3, [r2, #0]
 80082f4:	4b81      	ldr	r3, [pc, #516]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a80      	ldr	r2, [pc, #512]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80082fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d013      	beq.n	8008330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008308:	f7fe fa12 	bl	8006730 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800830e:	e008      	b.n	8008322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008310:	f7fe fa0e 	bl	8006730 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b64      	cmp	r3, #100	; 0x64
 800831c:	d901      	bls.n	8008322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e1fb      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008322:	4b76      	ldr	r3, [pc, #472]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0f0      	beq.n	8008310 <HAL_RCC_OscConfig+0xc0>
 800832e:	e014      	b.n	800835a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008330:	f7fe f9fe 	bl	8006730 <HAL_GetTick>
 8008334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008336:	e008      	b.n	800834a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008338:	f7fe f9fa 	bl	8006730 <HAL_GetTick>
 800833c:	4602      	mov	r2, r0
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	2b64      	cmp	r3, #100	; 0x64
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e1e7      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800834a:	4b6c      	ldr	r3, [pc, #432]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f0      	bne.n	8008338 <HAL_RCC_OscConfig+0xe8>
 8008356:	e000      	b.n	800835a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d063      	beq.n	800842e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008366:	4b65      	ldr	r3, [pc, #404]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f003 030c 	and.w	r3, r3, #12
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00b      	beq.n	800838a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008372:	4b62      	ldr	r3, [pc, #392]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800837a:	2b08      	cmp	r3, #8
 800837c:	d11c      	bne.n	80083b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800837e:	4b5f      	ldr	r3, [pc, #380]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d116      	bne.n	80083b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800838a:	4b5c      	ldr	r3, [pc, #368]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d005      	beq.n	80083a2 <HAL_RCC_OscConfig+0x152>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d001      	beq.n	80083a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e1bb      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083a2:	4b56      	ldr	r3, [pc, #344]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	4952      	ldr	r1, [pc, #328]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083b6:	e03a      	b.n	800842e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d020      	beq.n	8008402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083c0:	4b4f      	ldr	r3, [pc, #316]	; (8008500 <HAL_RCC_OscConfig+0x2b0>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c6:	f7fe f9b3 	bl	8006730 <HAL_GetTick>
 80083ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083ce:	f7fe f9af 	bl	8006730 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e19c      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083e0:	4b46      	ldr	r3, [pc, #280]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d0f0      	beq.n	80083ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ec:	4b43      	ldr	r3, [pc, #268]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	4940      	ldr	r1, [pc, #256]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	600b      	str	r3, [r1, #0]
 8008400:	e015      	b.n	800842e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008402:	4b3f      	ldr	r3, [pc, #252]	; (8008500 <HAL_RCC_OscConfig+0x2b0>)
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008408:	f7fe f992 	bl	8006730 <HAL_GetTick>
 800840c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800840e:	e008      	b.n	8008422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008410:	f7fe f98e 	bl	8006730 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b02      	cmp	r3, #2
 800841c:	d901      	bls.n	8008422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e17b      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008422:	4b36      	ldr	r3, [pc, #216]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1f0      	bne.n	8008410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d030      	beq.n	800849c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d016      	beq.n	8008470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008442:	4b30      	ldr	r3, [pc, #192]	; (8008504 <HAL_RCC_OscConfig+0x2b4>)
 8008444:	2201      	movs	r2, #1
 8008446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008448:	f7fe f972 	bl	8006730 <HAL_GetTick>
 800844c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800844e:	e008      	b.n	8008462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008450:	f7fe f96e 	bl	8006730 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b02      	cmp	r3, #2
 800845c:	d901      	bls.n	8008462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e15b      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008462:	4b26      	ldr	r3, [pc, #152]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d0f0      	beq.n	8008450 <HAL_RCC_OscConfig+0x200>
 800846e:	e015      	b.n	800849c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008470:	4b24      	ldr	r3, [pc, #144]	; (8008504 <HAL_RCC_OscConfig+0x2b4>)
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008476:	f7fe f95b 	bl	8006730 <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800847e:	f7fe f957 	bl	8006730 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e144      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008490:	4b1a      	ldr	r3, [pc, #104]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 8008492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1f0      	bne.n	800847e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a0 	beq.w	80085ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10f      	bne.n	80084da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	4b0f      	ldr	r3, [pc, #60]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	4a0e      	ldr	r2, [pc, #56]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80084c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084c8:	6413      	str	r3, [r2, #64]	; 0x40
 80084ca:	4b0c      	ldr	r3, [pc, #48]	; (80084fc <HAL_RCC_OscConfig+0x2ac>)
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d2:	60bb      	str	r3, [r7, #8]
 80084d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_RCC_OscConfig+0x2b8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d121      	bne.n	800852a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084e6:	4b08      	ldr	r3, [pc, #32]	; (8008508 <HAL_RCC_OscConfig+0x2b8>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a07      	ldr	r2, [pc, #28]	; (8008508 <HAL_RCC_OscConfig+0x2b8>)
 80084ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084f2:	f7fe f91d 	bl	8006730 <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f8:	e011      	b.n	800851e <HAL_RCC_OscConfig+0x2ce>
 80084fa:	bf00      	nop
 80084fc:	40023800 	.word	0x40023800
 8008500:	42470000 	.word	0x42470000
 8008504:	42470e80 	.word	0x42470e80
 8008508:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800850c:	f7fe f910 	bl	8006730 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	2b02      	cmp	r3, #2
 8008518:	d901      	bls.n	800851e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e0fd      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800851e:	4b81      	ldr	r3, [pc, #516]	; (8008724 <HAL_RCC_OscConfig+0x4d4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f0      	beq.n	800850c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d106      	bne.n	8008540 <HAL_RCC_OscConfig+0x2f0>
 8008532:	4b7d      	ldr	r3, [pc, #500]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008536:	4a7c      	ldr	r2, [pc, #496]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008538:	f043 0301 	orr.w	r3, r3, #1
 800853c:	6713      	str	r3, [r2, #112]	; 0x70
 800853e:	e01c      	b.n	800857a <HAL_RCC_OscConfig+0x32a>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	2b05      	cmp	r3, #5
 8008546:	d10c      	bne.n	8008562 <HAL_RCC_OscConfig+0x312>
 8008548:	4b77      	ldr	r3, [pc, #476]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 800854a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854c:	4a76      	ldr	r2, [pc, #472]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 800854e:	f043 0304 	orr.w	r3, r3, #4
 8008552:	6713      	str	r3, [r2, #112]	; 0x70
 8008554:	4b74      	ldr	r3, [pc, #464]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008558:	4a73      	ldr	r2, [pc, #460]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 800855a:	f043 0301 	orr.w	r3, r3, #1
 800855e:	6713      	str	r3, [r2, #112]	; 0x70
 8008560:	e00b      	b.n	800857a <HAL_RCC_OscConfig+0x32a>
 8008562:	4b71      	ldr	r3, [pc, #452]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	4a70      	ldr	r2, [pc, #448]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	6713      	str	r3, [r2, #112]	; 0x70
 800856e:	4b6e      	ldr	r3, [pc, #440]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	4a6d      	ldr	r2, [pc, #436]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008574:	f023 0304 	bic.w	r3, r3, #4
 8008578:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d015      	beq.n	80085ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008582:	f7fe f8d5 	bl	8006730 <HAL_GetTick>
 8008586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008588:	e00a      	b.n	80085a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800858a:	f7fe f8d1 	bl	8006730 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	f241 3288 	movw	r2, #5000	; 0x1388
 8008598:	4293      	cmp	r3, r2
 800859a:	d901      	bls.n	80085a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e0bc      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085a0:	4b61      	ldr	r3, [pc, #388]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80085a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a4:	f003 0302 	and.w	r3, r3, #2
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d0ee      	beq.n	800858a <HAL_RCC_OscConfig+0x33a>
 80085ac:	e014      	b.n	80085d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ae:	f7fe f8bf 	bl	8006730 <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085b4:	e00a      	b.n	80085cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085b6:	f7fe f8bb 	bl	8006730 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e0a6      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085cc:	4b56      	ldr	r3, [pc, #344]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80085ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1ee      	bne.n	80085b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d105      	bne.n	80085ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085de:	4b52      	ldr	r3, [pc, #328]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	4a51      	ldr	r2, [pc, #324]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80085e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8092 	beq.w	8008718 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085f4:	4b4c      	ldr	r3, [pc, #304]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f003 030c 	and.w	r3, r3, #12
 80085fc:	2b08      	cmp	r3, #8
 80085fe:	d05c      	beq.n	80086ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b02      	cmp	r3, #2
 8008606:	d141      	bne.n	800868c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008608:	4b48      	ldr	r3, [pc, #288]	; (800872c <HAL_RCC_OscConfig+0x4dc>)
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800860e:	f7fe f88f 	bl	8006730 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008614:	e008      	b.n	8008628 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008616:	f7fe f88b 	bl	8006730 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e078      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008628:	4b3f      	ldr	r3, [pc, #252]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1f0      	bne.n	8008616 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69da      	ldr	r2, [r3, #28]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	019b      	lsls	r3, r3, #6
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	085b      	lsrs	r3, r3, #1
 800864c:	3b01      	subs	r3, #1
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	061b      	lsls	r3, r3, #24
 8008658:	4933      	ldr	r1, [pc, #204]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 800865a:	4313      	orrs	r3, r2
 800865c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800865e:	4b33      	ldr	r3, [pc, #204]	; (800872c <HAL_RCC_OscConfig+0x4dc>)
 8008660:	2201      	movs	r2, #1
 8008662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008664:	f7fe f864 	bl	8006730 <HAL_GetTick>
 8008668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800866a:	e008      	b.n	800867e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800866c:	f7fe f860 	bl	8006730 <HAL_GetTick>
 8008670:	4602      	mov	r2, r0
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	1ad3      	subs	r3, r2, r3
 8008676:	2b02      	cmp	r3, #2
 8008678:	d901      	bls.n	800867e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800867a:	2303      	movs	r3, #3
 800867c:	e04d      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867e:	4b2a      	ldr	r3, [pc, #168]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0f0      	beq.n	800866c <HAL_RCC_OscConfig+0x41c>
 800868a:	e045      	b.n	8008718 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800868c:	4b27      	ldr	r3, [pc, #156]	; (800872c <HAL_RCC_OscConfig+0x4dc>)
 800868e:	2200      	movs	r2, #0
 8008690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008692:	f7fe f84d 	bl	8006730 <HAL_GetTick>
 8008696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800869a:	f7fe f849 	bl	8006730 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e036      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086ac:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <HAL_RCC_OscConfig+0x44a>
 80086b8:	e02e      	b.n	8008718 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d101      	bne.n	80086c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e029      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086c6:	4b18      	ldr	r3, [pc, #96]	; (8008728 <HAL_RCC_OscConfig+0x4d8>)
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d11c      	bne.n	8008714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d115      	bne.n	8008714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086ee:	4013      	ands	r3, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d10d      	bne.n	8008714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008702:	429a      	cmp	r2, r3
 8008704:	d106      	bne.n	8008714 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008710:	429a      	cmp	r2, r3
 8008712:	d001      	beq.n	8008718 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40007000 	.word	0x40007000
 8008728:	40023800 	.word	0x40023800
 800872c:	42470060 	.word	0x42470060

08008730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e0cc      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008744:	4b68      	ldr	r3, [pc, #416]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 030f 	and.w	r3, r3, #15
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	429a      	cmp	r2, r3
 8008750:	d90c      	bls.n	800876c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008752:	4b65      	ldr	r3, [pc, #404]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008754:	683a      	ldr	r2, [r7, #0]
 8008756:	b2d2      	uxtb	r2, r2
 8008758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800875a:	4b63      	ldr	r3, [pc, #396]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d001      	beq.n	800876c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e0b8      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d020      	beq.n	80087ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d005      	beq.n	8008790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008784:	4b59      	ldr	r3, [pc, #356]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4a58      	ldr	r2, [pc, #352]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 800878a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800878e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0308 	and.w	r3, r3, #8
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800879c:	4b53      	ldr	r3, [pc, #332]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	4a52      	ldr	r2, [pc, #328]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80087a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087a8:	4b50      	ldr	r3, [pc, #320]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	494d      	ldr	r1, [pc, #308]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d044      	beq.n	8008850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d107      	bne.n	80087de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ce:	4b47      	ldr	r3, [pc, #284]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d119      	bne.n	800880e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e07f      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d003      	beq.n	80087ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d107      	bne.n	80087fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ee:	4b3f      	ldr	r3, [pc, #252]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d109      	bne.n	800880e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e06f      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087fe:	4b3b      	ldr	r3, [pc, #236]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d101      	bne.n	800880e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e067      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800880e:	4b37      	ldr	r3, [pc, #220]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f023 0203 	bic.w	r2, r3, #3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	4934      	ldr	r1, [pc, #208]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 800881c:	4313      	orrs	r3, r2
 800881e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008820:	f7fd ff86 	bl	8006730 <HAL_GetTick>
 8008824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008826:	e00a      	b.n	800883e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008828:	f7fd ff82 	bl	8006730 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	f241 3288 	movw	r2, #5000	; 0x1388
 8008836:	4293      	cmp	r3, r2
 8008838:	d901      	bls.n	800883e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e04f      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800883e:	4b2b      	ldr	r3, [pc, #172]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 020c 	and.w	r2, r3, #12
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	429a      	cmp	r2, r3
 800884e:	d1eb      	bne.n	8008828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008850:	4b25      	ldr	r3, [pc, #148]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 030f 	and.w	r3, r3, #15
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d20c      	bcs.n	8008878 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800885e:	4b22      	ldr	r3, [pc, #136]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	b2d2      	uxtb	r2, r2
 8008864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008866:	4b20      	ldr	r3, [pc, #128]	; (80088e8 <HAL_RCC_ClockConfig+0x1b8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f003 030f 	and.w	r3, r3, #15
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	429a      	cmp	r2, r3
 8008872:	d001      	beq.n	8008878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e032      	b.n	80088de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b00      	cmp	r3, #0
 8008882:	d008      	beq.n	8008896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008884:	4b19      	ldr	r3, [pc, #100]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4916      	ldr	r1, [pc, #88]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 8008892:	4313      	orrs	r3, r2
 8008894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0308 	and.w	r3, r3, #8
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088a2:	4b12      	ldr	r3, [pc, #72]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	490e      	ldr	r1, [pc, #56]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088b6:	f000 f821 	bl	80088fc <HAL_RCC_GetSysClockFreq>
 80088ba:	4601      	mov	r1, r0
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_RCC_ClockConfig+0x1bc>)
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	091b      	lsrs	r3, r3, #4
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <HAL_RCC_ClockConfig+0x1c0>)
 80088c8:	5cd3      	ldrb	r3, [r2, r3]
 80088ca:	fa21 f303 	lsr.w	r3, r1, r3
 80088ce:	4a09      	ldr	r2, [pc, #36]	; (80088f4 <HAL_RCC_ClockConfig+0x1c4>)
 80088d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088d2:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <HAL_RCC_ClockConfig+0x1c8>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fd fee6 	bl	80066a8 <HAL_InitTick>

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40023c00 	.word	0x40023c00
 80088ec:	40023800 	.word	0x40023800
 80088f0:	0800f1c0 	.word	0x0800f1c0
 80088f4:	20000034 	.word	0x20000034
 80088f8:	20000038 	.word	0x20000038

080088fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	607b      	str	r3, [r7, #4]
 8008906:	2300      	movs	r3, #0
 8008908:	60fb      	str	r3, [r7, #12]
 800890a:	2300      	movs	r3, #0
 800890c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008912:	4b50      	ldr	r3, [pc, #320]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f003 030c 	and.w	r3, r3, #12
 800891a:	2b04      	cmp	r3, #4
 800891c:	d007      	beq.n	800892e <HAL_RCC_GetSysClockFreq+0x32>
 800891e:	2b08      	cmp	r3, #8
 8008920:	d008      	beq.n	8008934 <HAL_RCC_GetSysClockFreq+0x38>
 8008922:	2b00      	cmp	r3, #0
 8008924:	f040 808d 	bne.w	8008a42 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008928:	4b4b      	ldr	r3, [pc, #300]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x15c>)
 800892a:	60bb      	str	r3, [r7, #8]
       break;
 800892c:	e08c      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800892e:	4b4b      	ldr	r3, [pc, #300]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8008930:	60bb      	str	r3, [r7, #8]
      break;
 8008932:	e089      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008934:	4b47      	ldr	r3, [pc, #284]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800893c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800893e:	4b45      	ldr	r3, [pc, #276]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d023      	beq.n	8008992 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800894a:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	099b      	lsrs	r3, r3, #6
 8008950:	f04f 0400 	mov.w	r4, #0
 8008954:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	ea03 0501 	and.w	r5, r3, r1
 8008960:	ea04 0602 	and.w	r6, r4, r2
 8008964:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8008966:	fb02 f106 	mul.w	r1, r2, r6
 800896a:	2200      	movs	r2, #0
 800896c:	fb02 f205 	mul.w	r2, r2, r5
 8008970:	440a      	add	r2, r1
 8008972:	493a      	ldr	r1, [pc, #232]	; (8008a5c <HAL_RCC_GetSysClockFreq+0x160>)
 8008974:	fba5 0101 	umull	r0, r1, r5, r1
 8008978:	1853      	adds	r3, r2, r1
 800897a:	4619      	mov	r1, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f04f 0400 	mov.w	r4, #0
 8008982:	461a      	mov	r2, r3
 8008984:	4623      	mov	r3, r4
 8008986:	f7f8 f97f 	bl	8000c88 <__aeabi_uldivmod>
 800898a:	4603      	mov	r3, r0
 800898c:	460c      	mov	r4, r1
 800898e:	60fb      	str	r3, [r7, #12]
 8008990:	e049      	b.n	8008a26 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008992:	4b30      	ldr	r3, [pc, #192]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	099b      	lsrs	r3, r3, #6
 8008998:	f04f 0400 	mov.w	r4, #0
 800899c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089a0:	f04f 0200 	mov.w	r2, #0
 80089a4:	ea03 0501 	and.w	r5, r3, r1
 80089a8:	ea04 0602 	and.w	r6, r4, r2
 80089ac:	4629      	mov	r1, r5
 80089ae:	4632      	mov	r2, r6
 80089b0:	f04f 0300 	mov.w	r3, #0
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	0154      	lsls	r4, r2, #5
 80089ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80089be:	014b      	lsls	r3, r1, #5
 80089c0:	4619      	mov	r1, r3
 80089c2:	4622      	mov	r2, r4
 80089c4:	1b49      	subs	r1, r1, r5
 80089c6:	eb62 0206 	sbc.w	r2, r2, r6
 80089ca:	f04f 0300 	mov.w	r3, #0
 80089ce:	f04f 0400 	mov.w	r4, #0
 80089d2:	0194      	lsls	r4, r2, #6
 80089d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80089d8:	018b      	lsls	r3, r1, #6
 80089da:	1a5b      	subs	r3, r3, r1
 80089dc:	eb64 0402 	sbc.w	r4, r4, r2
 80089e0:	f04f 0100 	mov.w	r1, #0
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	00e2      	lsls	r2, r4, #3
 80089ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80089ee:	00d9      	lsls	r1, r3, #3
 80089f0:	460b      	mov	r3, r1
 80089f2:	4614      	mov	r4, r2
 80089f4:	195b      	adds	r3, r3, r5
 80089f6:	eb44 0406 	adc.w	r4, r4, r6
 80089fa:	f04f 0100 	mov.w	r1, #0
 80089fe:	f04f 0200 	mov.w	r2, #0
 8008a02:	02a2      	lsls	r2, r4, #10
 8008a04:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a08:	0299      	lsls	r1, r3, #10
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	4621      	mov	r1, r4
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f04f 0400 	mov.w	r4, #0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	f7f8 f934 	bl	8000c88 <__aeabi_uldivmod>
 8008a20:	4603      	mov	r3, r0
 8008a22:	460c      	mov	r4, r1
 8008a24:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <HAL_RCC_GetSysClockFreq+0x158>)
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	0c1b      	lsrs	r3, r3, #16
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	3301      	adds	r3, #1
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3e:	60bb      	str	r3, [r7, #8]
      break;
 8008a40:	e002      	b.n	8008a48 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a42:	4b05      	ldr	r3, [pc, #20]	; (8008a58 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a44:	60bb      	str	r3, [r7, #8]
      break;
 8008a46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a48:	68bb      	ldr	r3, [r7, #8]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40023800 	.word	0x40023800
 8008a58:	00f42400 	.word	0x00f42400
 8008a5c:	00bebc20 	.word	0x00bebc20

08008a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008a66:	681b      	ldr	r3, [r3, #0]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000034 	.word	0x20000034

08008a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a7c:	f7ff fff0 	bl	8008a60 <HAL_RCC_GetHCLKFreq>
 8008a80:	4601      	mov	r1, r0
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	0a9b      	lsrs	r3, r3, #10
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	4a03      	ldr	r2, [pc, #12]	; (8008a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a8e:	5cd3      	ldrb	r3, [r2, r3]
 8008a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	0800f1d0 	.word	0x0800f1d0

08008aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008aa4:	f7ff ffdc 	bl	8008a60 <HAL_RCC_GetHCLKFreq>
 8008aa8:	4601      	mov	r1, r0
 8008aaa:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	0b5b      	lsrs	r3, r3, #13
 8008ab0:	f003 0307 	and.w	r3, r3, #7
 8008ab4:	4a03      	ldr	r2, [pc, #12]	; (8008ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ab6:	5cd3      	ldrb	r3, [r2, r3]
 8008ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	0800f1d0 	.word	0x0800f1d0

08008ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e056      	b.n	8008b88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d106      	bne.n	8008afa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f7fd fa67 	bl	8005fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	ea42 0103 	orr.w	r1, r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	430a      	orrs	r2, r1
 8008b50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	f003 0104 	and.w	r1, r3, #4
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69da      	ldr	r2, [r3, #28]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_SPI_Transmit+0x22>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e11e      	b.n	8008df0 <HAL_SPI_Transmit+0x260>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bba:	f7fd fdb9 	bl	8006730 <HAL_GetTick>
 8008bbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008bc0:	88fb      	ldrh	r3, [r7, #6]
 8008bc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d002      	beq.n	8008bd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bd4:	e103      	b.n	8008dde <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_SPI_Transmit+0x52>
 8008bdc:	88fb      	ldrh	r3, [r7, #6]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008be6:	e0fa      	b.n	8008dde <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	88fa      	ldrh	r2, [r7, #6]
 8008c00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	88fa      	ldrh	r2, [r7, #6]
 8008c06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c2e:	d107      	bne.n	8008c40 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b40      	cmp	r3, #64	; 0x40
 8008c4c:	d007      	beq.n	8008c5e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c66:	d14b      	bne.n	8008d00 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d002      	beq.n	8008c76 <HAL_SPI_Transmit+0xe6>
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d13e      	bne.n	8008cf4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	881a      	ldrh	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	1c9a      	adds	r2, r3, #2
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	3b01      	subs	r3, #1
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c9a:	e02b      	b.n	8008cf4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d112      	bne.n	8008cd0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	881a      	ldrh	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	1c9a      	adds	r2, r3, #2
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	86da      	strh	r2, [r3, #54]	; 0x36
 8008cce:	e011      	b.n	8008cf4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd0:	f7fd fd2e 	bl	8006730 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d803      	bhi.n	8008ce8 <HAL_SPI_Transmit+0x158>
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce6:	d102      	bne.n	8008cee <HAL_SPI_Transmit+0x15e>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cf2:	e074      	b.n	8008dde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1ce      	bne.n	8008c9c <HAL_SPI_Transmit+0x10c>
 8008cfe:	e04c      	b.n	8008d9a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Transmit+0x17e>
 8008d08:	8afb      	ldrh	r3, [r7, #22]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d140      	bne.n	8008d90 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	330c      	adds	r3, #12
 8008d18:	7812      	ldrb	r2, [r2, #0]
 8008d1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d34:	e02c      	b.n	8008d90 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d113      	bne.n	8008d6c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	7812      	ldrb	r2, [r2, #0]
 8008d50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	1c5a      	adds	r2, r3, #1
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d6a:	e011      	b.n	8008d90 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d6c:	f7fd fce0 	bl	8006730 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d803      	bhi.n	8008d84 <HAL_SPI_Transmit+0x1f4>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d102      	bne.n	8008d8a <HAL_SPI_Transmit+0x1fa>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d102      	bne.n	8008d90 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d8e:	e026      	b.n	8008dde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1cd      	bne.n	8008d36 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fba4 	bl	80094ec <SPI_EndRxTxTransaction>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2220      	movs	r2, #32
 8008dae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008db8:	2300      	movs	r3, #0
 8008dba:	613b      	str	r3, [r7, #16]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68db      	ldr	r3, [r3, #12]
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	77fb      	strb	r3, [r7, #31]
 8008dda:	e000      	b.n	8008dde <HAL_SPI_Transmit+0x24e>
  }

error:
 8008ddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3720      	adds	r7, #32
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e14:	d112      	bne.n	8008e3c <HAL_SPI_Receive+0x44>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10e      	bne.n	8008e3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2204      	movs	r2, #4
 8008e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e26:	88fa      	ldrh	r2, [r7, #6]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	68ba      	ldr	r2, [r7, #8]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 f8e9 	bl	800900a <HAL_SPI_TransmitReceive>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e0e2      	b.n	8009002 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d101      	bne.n	8008e4a <HAL_SPI_Receive+0x52>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e0db      	b.n	8009002 <HAL_SPI_Receive+0x20a>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e52:	f7fd fc6d 	bl	8006730 <HAL_GetTick>
 8008e56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d002      	beq.n	8008e6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e64:	2302      	movs	r3, #2
 8008e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e68:	e0c2      	b.n	8008ff0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SPI_Receive+0x7e>
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e7a:	e0b9      	b.n	8008ff0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2204      	movs	r2, #4
 8008e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec2:	d107      	bne.n	8008ed4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ed2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d007      	beq.n	8008ef2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d162      	bne.n	8008fc0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008efa:	e02e      	b.n	8008f5a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d115      	bne.n	8008f36 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f103 020c 	add.w	r2, r3, #12
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f34:	e011      	b.n	8008f5a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f36:	f7fd fbfb 	bl	8006730 <HAL_GetTick>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d803      	bhi.n	8008f4e <HAL_SPI_Receive+0x156>
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d102      	bne.n	8008f54 <HAL_SPI_Receive+0x15c>
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d102      	bne.n	8008f5a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f58:	e04a      	b.n	8008ff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1cb      	bne.n	8008efc <HAL_SPI_Receive+0x104>
 8008f64:	e031      	b.n	8008fca <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d113      	bne.n	8008f9c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68da      	ldr	r2, [r3, #12]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7e:	b292      	uxth	r2, r2
 8008f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	1c9a      	adds	r2, r3, #2
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	3b01      	subs	r3, #1
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f9a:	e011      	b.n	8008fc0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f9c:	f7fd fbc8 	bl	8006730 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d803      	bhi.n	8008fb4 <HAL_SPI_Receive+0x1bc>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb2:	d102      	bne.n	8008fba <HAL_SPI_Receive+0x1c2>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d102      	bne.n	8008fc0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008fbe:	e017      	b.n	8008ff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1cd      	bne.n	8008f66 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	6839      	ldr	r1, [r7, #0]
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fa27 	bl	8009422 <SPI_EndRxTransaction>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	75fb      	strb	r3, [r7, #23]
 8008fec:	e000      	b.n	8008ff0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b08c      	sub	sp, #48	; 0x30
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
 8009016:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009018:	2301      	movs	r3, #1
 800901a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009028:	2b01      	cmp	r3, #1
 800902a:	d101      	bne.n	8009030 <HAL_SPI_TransmitReceive+0x26>
 800902c:	2302      	movs	r3, #2
 800902e:	e18a      	b.n	8009346 <HAL_SPI_TransmitReceive+0x33c>
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009038:	f7fd fb7a 	bl	8006730 <HAL_GetTick>
 800903c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009056:	2b01      	cmp	r3, #1
 8009058:	d00f      	beq.n	800907a <HAL_SPI_TransmitReceive+0x70>
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009060:	d107      	bne.n	8009072 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d103      	bne.n	8009072 <HAL_SPI_TransmitReceive+0x68>
 800906a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800906e:	2b04      	cmp	r3, #4
 8009070:	d003      	beq.n	800907a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009072:	2302      	movs	r3, #2
 8009074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009078:	e15b      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d005      	beq.n	800908c <HAL_SPI_TransmitReceive+0x82>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d002      	beq.n	800908c <HAL_SPI_TransmitReceive+0x82>
 8009086:	887b      	ldrh	r3, [r7, #2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009092:	e14e      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b04      	cmp	r3, #4
 800909e:	d003      	beq.n	80090a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2205      	movs	r2, #5
 80090a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	887a      	ldrh	r2, [r7, #2]
 80090b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	887a      	ldrh	r2, [r7, #2]
 80090be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	887a      	ldrh	r2, [r7, #2]
 80090ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	887a      	ldrh	r2, [r7, #2]
 80090d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2200      	movs	r2, #0
 80090d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e8:	2b40      	cmp	r3, #64	; 0x40
 80090ea:	d007      	beq.n	80090fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009104:	d178      	bne.n	80091f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_SPI_TransmitReceive+0x10a>
 800910e:	8b7b      	ldrh	r3, [r7, #26]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d166      	bne.n	80091e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	881a      	ldrh	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	1c9a      	adds	r2, r3, #2
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800912e:	b29b      	uxth	r3, r3
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009138:	e053      	b.n	80091e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 0302 	and.w	r3, r3, #2
 8009144:	2b02      	cmp	r3, #2
 8009146:	d11b      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x176>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	d016      	beq.n	8009180 <HAL_SPI_TransmitReceive+0x176>
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d113      	bne.n	8009180 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915c:	881a      	ldrh	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009168:	1c9a      	adds	r2, r3, #2
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b01      	cmp	r3, #1
 800918c:	d119      	bne.n	80091c2 <HAL_SPI_TransmitReceive+0x1b8>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009192:	b29b      	uxth	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d014      	beq.n	80091c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	b292      	uxth	r2, r2
 80091a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	1c9a      	adds	r2, r3, #2
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80091be:	2301      	movs	r3, #1
 80091c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80091c2:	f7fd fab5 	bl	8006730 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d807      	bhi.n	80091e2 <HAL_SPI_TransmitReceive+0x1d8>
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d8:	d003      	beq.n	80091e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091e0:	e0a7      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1a6      	bne.n	800913a <HAL_SPI_TransmitReceive+0x130>
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1a1      	bne.n	800913a <HAL_SPI_TransmitReceive+0x130>
 80091f6:	e07c      	b.n	80092f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <HAL_SPI_TransmitReceive+0x1fc>
 8009200:	8b7b      	ldrh	r3, [r7, #26]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d16b      	bne.n	80092de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	330c      	adds	r3, #12
 8009210:	7812      	ldrb	r2, [r2, #0]
 8009212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b01      	subs	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800922c:	e057      	b.n	80092de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 0302 	and.w	r3, r3, #2
 8009238:	2b02      	cmp	r3, #2
 800923a:	d11c      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x26c>
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009240:	b29b      	uxth	r3, r3
 8009242:	2b00      	cmp	r3, #0
 8009244:	d017      	beq.n	8009276 <HAL_SPI_TransmitReceive+0x26c>
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d114      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	1c5a      	adds	r2, r3, #1
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 0301 	and.w	r3, r3, #1
 8009280:	2b01      	cmp	r3, #1
 8009282:	d119      	bne.n	80092b8 <HAL_SPI_TransmitReceive+0x2ae>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d014      	beq.n	80092b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68da      	ldr	r2, [r3, #12]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092b4:	2301      	movs	r3, #1
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092b8:	f7fd fa3a 	bl	8006730 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d803      	bhi.n	80092d0 <HAL_SPI_TransmitReceive+0x2c6>
 80092c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d102      	bne.n	80092d6 <HAL_SPI_TransmitReceive+0x2cc>
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d103      	bne.n	80092de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092dc:	e029      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1a2      	bne.n	800922e <HAL_SPI_TransmitReceive+0x224>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d19d      	bne.n	800922e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f8f8 	bl	80094ec <SPI_EndRxTxTransaction>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d006      	beq.n	8009310 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2220      	movs	r2, #32
 800930c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800930e:	e010      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	617b      	str	r3, [r7, #20]
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	e000      	b.n	8009332 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009346:	4618      	mov	r0, r3
 8009348:	3730      	adds	r7, #48	; 0x30
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b084      	sub	sp, #16
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	603b      	str	r3, [r7, #0]
 800935a:	4613      	mov	r3, r2
 800935c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800935e:	e04c      	b.n	80093fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d048      	beq.n	80093fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009368:	f7fd f9e2 	bl	8006730 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	429a      	cmp	r2, r3
 8009376:	d902      	bls.n	800937e <SPI_WaitFlagStateUntilTimeout+0x30>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d13d      	bne.n	80093fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800938c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009396:	d111      	bne.n	80093bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093a0:	d004      	beq.n	80093ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093aa:	d107      	bne.n	80093bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093c4:	d10f      	bne.n	80093e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e00f      	b.n	800941a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	4013      	ands	r3, r2
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	bf0c      	ite	eq
 800940a:	2301      	moveq	r3, #1
 800940c:	2300      	movne	r3, #0
 800940e:	b2db      	uxtb	r3, r3
 8009410:	461a      	mov	r2, r3
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	429a      	cmp	r2, r3
 8009416:	d1a3      	bne.n	8009360 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b086      	sub	sp, #24
 8009426:	af02      	add	r7, sp, #8
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009436:	d111      	bne.n	800945c <SPI_EndRxTransaction+0x3a>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009440:	d004      	beq.n	800944c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800944a:	d107      	bne.n	800945c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800945a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009464:	d12a      	bne.n	80094bc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800946e:	d012      	beq.n	8009496 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	9300      	str	r3, [sp, #0]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	2200      	movs	r2, #0
 8009478:	2180      	movs	r1, #128	; 0x80
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff ff67 	bl	800934e <SPI_WaitFlagStateUntilTimeout>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d02d      	beq.n	80094e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948a:	f043 0220 	orr.w	r2, r3, #32
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e026      	b.n	80094e4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2200      	movs	r2, #0
 800949e:	2101      	movs	r1, #1
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f7ff ff54 	bl	800934e <SPI_WaitFlagStateUntilTimeout>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01a      	beq.n	80094e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	f043 0220 	orr.w	r2, r3, #32
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e013      	b.n	80094e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2200      	movs	r2, #0
 80094c4:	2101      	movs	r1, #1
 80094c6:	68f8      	ldr	r0, [r7, #12]
 80094c8:	f7ff ff41 	bl	800934e <SPI_WaitFlagStateUntilTimeout>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d007      	beq.n	80094e2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d6:	f043 0220 	orr.w	r2, r3, #32
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e000      	b.n	80094e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094f8:	4b1b      	ldr	r3, [pc, #108]	; (8009568 <SPI_EndRxTxTransaction+0x7c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a1b      	ldr	r2, [pc, #108]	; (800956c <SPI_EndRxTxTransaction+0x80>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	0d5b      	lsrs	r3, r3, #21
 8009504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009508:	fb02 f303 	mul.w	r3, r2, r3
 800950c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009516:	d112      	bne.n	800953e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2200      	movs	r2, #0
 8009520:	2180      	movs	r1, #128	; 0x80
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff ff13 	bl	800934e <SPI_WaitFlagStateUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d016      	beq.n	800955c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009532:	f043 0220 	orr.w	r2, r3, #32
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e00f      	b.n	800955e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3b01      	subs	r3, #1
 8009548:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009554:	2b80      	cmp	r3, #128	; 0x80
 8009556:	d0f2      	beq.n	800953e <SPI_EndRxTxTransaction+0x52>
 8009558:	e000      	b.n	800955c <SPI_EndRxTxTransaction+0x70>
        break;
 800955a:	bf00      	nop
  }

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20000034 	.word	0x20000034
 800956c:	165e9f81 	.word	0x165e9f81

08009570 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e01d      	b.n	80095be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fc fe12 	bl	80061c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2202      	movs	r2, #2
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f000 fb56 	bl	8009c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0201 	orr.w	r2, r2, #1
 80095dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b06      	cmp	r3, #6
 80095ee:	d007      	beq.n	8009600 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e01d      	b.n	800965c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fc fd0f 	bl	8006058 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2202      	movs	r2, #2
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3304      	adds	r3, #4
 800964a:	4619      	mov	r1, r3
 800964c:	4610      	mov	r0, r2
 800964e:	f000 fb07 	bl	8009c60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2201      	movs	r2, #1
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fd42 	bl	800a100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a15      	ldr	r2, [pc, #84]	; (80096d8 <HAL_TIM_PWM_Start+0x74>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d004      	beq.n	8009690 <HAL_TIM_PWM_Start+0x2c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a14      	ldr	r2, [pc, #80]	; (80096dc <HAL_TIM_PWM_Start+0x78>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d101      	bne.n	8009694 <HAL_TIM_PWM_Start+0x30>
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <HAL_TIM_PWM_Start+0x32>
 8009694:	2300      	movs	r3, #0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d007      	beq.n	80096aa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	f003 0307 	and.w	r3, r3, #7
 80096b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b06      	cmp	r3, #6
 80096ba:	d007      	beq.n	80096cc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f042 0201 	orr.w	r2, r2, #1
 80096ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	40010000 	.word	0x40010000
 80096dc:	40010400 	.word	0x40010400

080096e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e083      	b.n	80097fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d106      	bne.n	800970e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7fc fcdd 	bl	80060c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6812      	ldr	r2, [r2, #0]
 8009720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009724:	f023 0307 	bic.w	r3, r3, #7
 8009728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f000 fa93 	bl	8009c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	4313      	orrs	r3, r2
 800975a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009762:	f023 0303 	bic.w	r3, r3, #3
 8009766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	021b      	lsls	r3, r3, #8
 8009772:	4313      	orrs	r3, r2
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4313      	orrs	r3, r2
 8009778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009780:	f023 030c 	bic.w	r3, r3, #12
 8009784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800978c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	69db      	ldr	r3, [r3, #28]
 800979a:	021b      	lsls	r3, r3, #8
 800979c:	4313      	orrs	r3, r2
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	011a      	lsls	r2, r3, #4
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	031b      	lsls	r3, r3, #12
 80097b0:	4313      	orrs	r3, r2
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80097be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	4313      	orrs	r3, r2
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <HAL_TIM_Encoder_Start+0x16>
 8009814:	2b04      	cmp	r3, #4
 8009816:	d008      	beq.n	800982a <HAL_TIM_Encoder_Start+0x26>
 8009818:	e00f      	b.n	800983a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2201      	movs	r2, #1
 8009820:	2100      	movs	r1, #0
 8009822:	4618      	mov	r0, r3
 8009824:	f000 fc6c 	bl	800a100 <TIM_CCxChannelCmd>
      break;
 8009828:	e016      	b.n	8009858 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2201      	movs	r2, #1
 8009830:	2104      	movs	r1, #4
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fc64 	bl	800a100 <TIM_CCxChannelCmd>
      break;
 8009838:	e00e      	b.n	8009858 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2201      	movs	r2, #1
 8009840:	2100      	movs	r1, #0
 8009842:	4618      	mov	r0, r3
 8009844:	f000 fc5c 	bl	800a100 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2201      	movs	r2, #1
 800984e:	2104      	movs	r1, #4
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fc55 	bl	800a100 <TIM_CCxChannelCmd>
      break;
 8009856:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0302 	and.w	r3, r3, #2
 8009884:	2b02      	cmp	r3, #2
 8009886:	d122      	bne.n	80098ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b02      	cmp	r3, #2
 8009894:	d11b      	bne.n	80098ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f06f 0202 	mvn.w	r2, #2
 800989e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f9b5 	bl	8009c24 <HAL_TIM_IC_CaptureCallback>
 80098ba:	e005      	b.n	80098c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f9a7 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 f9b8 	bl	8009c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0304 	and.w	r3, r3, #4
 80098d8:	2b04      	cmp	r3, #4
 80098da:	d122      	bne.n	8009922 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0304 	and.w	r3, r3, #4
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d11b      	bne.n	8009922 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f06f 0204 	mvn.w	r2, #4
 80098f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2202      	movs	r2, #2
 80098f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009904:	2b00      	cmp	r3, #0
 8009906:	d003      	beq.n	8009910 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f98b 	bl	8009c24 <HAL_TIM_IC_CaptureCallback>
 800990e:	e005      	b.n	800991c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f97d 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f98e 	bl	8009c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d122      	bne.n	8009976 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0308 	and.w	r3, r3, #8
 800993a:	2b08      	cmp	r3, #8
 800993c:	d11b      	bne.n	8009976 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f06f 0208 	mvn.w	r2, #8
 8009946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2204      	movs	r2, #4
 800994c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f961 	bl	8009c24 <HAL_TIM_IC_CaptureCallback>
 8009962:	e005      	b.n	8009970 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f953 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f964 	bl	8009c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	f003 0310 	and.w	r3, r3, #16
 8009980:	2b10      	cmp	r3, #16
 8009982:	d122      	bne.n	80099ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b10      	cmp	r3, #16
 8009990:	d11b      	bne.n	80099ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f06f 0210 	mvn.w	r2, #16
 800999a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2208      	movs	r2, #8
 80099a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f937 	bl	8009c24 <HAL_TIM_IC_CaptureCallback>
 80099b6:	e005      	b.n	80099c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f929 	bl	8009c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f93a 	bl	8009c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d10e      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d107      	bne.n	80099f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f06f 0201 	mvn.w	r2, #1
 80099ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7f9 fe15 	bl	8003620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a00:	2b80      	cmp	r3, #128	; 0x80
 8009a02:	d10e      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0e:	2b80      	cmp	r3, #128	; 0x80
 8009a10:	d107      	bne.n	8009a22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fc6d 	bl	800a2fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b40      	cmp	r3, #64	; 0x40
 8009a2e:	d10e      	bne.n	8009a4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a3a:	2b40      	cmp	r3, #64	; 0x40
 8009a3c:	d107      	bne.n	8009a4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f8ff 	bl	8009c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b20      	cmp	r3, #32
 8009a5a:	d10e      	bne.n	8009a7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d107      	bne.n	8009a7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f06f 0220 	mvn.w	r2, #32
 8009a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fc37 	bl	800a2e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a7a:	bf00      	nop
 8009a7c:	3708      	adds	r7, #8
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
	...

08009a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d101      	bne.n	8009a9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009a9a:	2302      	movs	r3, #2
 8009a9c:	e0b4      	b.n	8009c08 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2202      	movs	r2, #2
 8009aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b0c      	cmp	r3, #12
 8009ab2:	f200 809f 	bhi.w	8009bf4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009ab6:	a201      	add	r2, pc, #4	; (adr r2, 8009abc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009af1 	.word	0x08009af1
 8009ac0:	08009bf5 	.word	0x08009bf5
 8009ac4:	08009bf5 	.word	0x08009bf5
 8009ac8:	08009bf5 	.word	0x08009bf5
 8009acc:	08009b31 	.word	0x08009b31
 8009ad0:	08009bf5 	.word	0x08009bf5
 8009ad4:	08009bf5 	.word	0x08009bf5
 8009ad8:	08009bf5 	.word	0x08009bf5
 8009adc:	08009b73 	.word	0x08009b73
 8009ae0:	08009bf5 	.word	0x08009bf5
 8009ae4:	08009bf5 	.word	0x08009bf5
 8009ae8:	08009bf5 	.word	0x08009bf5
 8009aec:	08009bb3 	.word	0x08009bb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68b9      	ldr	r1, [r7, #8]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 f952 	bl	8009da0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699a      	ldr	r2, [r3, #24]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0208 	orr.w	r2, r2, #8
 8009b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f022 0204 	bic.w	r2, r2, #4
 8009b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	6999      	ldr	r1, [r3, #24]
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	691a      	ldr	r2, [r3, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	619a      	str	r2, [r3, #24]
      break;
 8009b2e:	e062      	b.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68b9      	ldr	r1, [r7, #8]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 f9a2 	bl	8009e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	699a      	ldr	r2, [r3, #24]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6999      	ldr	r1, [r3, #24]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	021a      	lsls	r2, r3, #8
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	619a      	str	r2, [r3, #24]
      break;
 8009b70:	e041      	b.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f9f7 	bl	8009f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0208 	orr.w	r2, r2, #8
 8009b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f022 0204 	bic.w	r2, r2, #4
 8009b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	69d9      	ldr	r1, [r3, #28]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	61da      	str	r2, [r3, #28]
      break;
 8009bb0:	e021      	b.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 fa4b 	bl	800a054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69da      	ldr	r2, [r3, #28]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	69da      	ldr	r2, [r3, #28]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	69d9      	ldr	r1, [r3, #28]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	691b      	ldr	r3, [r3, #16]
 8009be8:	021a      	lsls	r2, r3, #8
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	61da      	str	r2, [r3, #28]
      break;
 8009bf2:	e000      	b.n	8009bf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009bf4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a40      	ldr	r2, [pc, #256]	; (8009d74 <TIM_Base_SetConfig+0x114>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a3d      	ldr	r2, [pc, #244]	; (8009d78 <TIM_Base_SetConfig+0x118>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00b      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a3c      	ldr	r2, [pc, #240]	; (8009d7c <TIM_Base_SetConfig+0x11c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a3b      	ldr	r2, [pc, #236]	; (8009d80 <TIM_Base_SetConfig+0x120>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_Base_SetConfig+0x40>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a3a      	ldr	r2, [pc, #232]	; (8009d84 <TIM_Base_SetConfig+0x124>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d108      	bne.n	8009cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a2f      	ldr	r2, [pc, #188]	; (8009d74 <TIM_Base_SetConfig+0x114>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d02b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc0:	d027      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a2c      	ldr	r2, [pc, #176]	; (8009d78 <TIM_Base_SetConfig+0x118>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d023      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a2b      	ldr	r2, [pc, #172]	; (8009d7c <TIM_Base_SetConfig+0x11c>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01f      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a2a      	ldr	r2, [pc, #168]	; (8009d80 <TIM_Base_SetConfig+0x120>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d01b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a29      	ldr	r2, [pc, #164]	; (8009d84 <TIM_Base_SetConfig+0x124>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d017      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a28      	ldr	r2, [pc, #160]	; (8009d88 <TIM_Base_SetConfig+0x128>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a27      	ldr	r2, [pc, #156]	; (8009d8c <TIM_Base_SetConfig+0x12c>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00f      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a26      	ldr	r2, [pc, #152]	; (8009d90 <TIM_Base_SetConfig+0x130>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00b      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a25      	ldr	r2, [pc, #148]	; (8009d94 <TIM_Base_SetConfig+0x134>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a24      	ldr	r2, [pc, #144]	; (8009d98 <TIM_Base_SetConfig+0x138>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a23      	ldr	r2, [pc, #140]	; (8009d9c <TIM_Base_SetConfig+0x13c>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d108      	bne.n	8009d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a0a      	ldr	r2, [pc, #40]	; (8009d74 <TIM_Base_SetConfig+0x114>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_Base_SetConfig+0xf8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0c      	ldr	r2, [pc, #48]	; (8009d84 <TIM_Base_SetConfig+0x124>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d103      	bne.n	8009d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	615a      	str	r2, [r3, #20]
}
 8009d66:	bf00      	nop
 8009d68:	3714      	adds	r7, #20
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	40010000 	.word	0x40010000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40010400 	.word	0x40010400
 8009d88:	40014000 	.word	0x40014000
 8009d8c:	40014400 	.word	0x40014400
 8009d90:	40014800 	.word	0x40014800
 8009d94:	40001800 	.word	0x40001800
 8009d98:	40001c00 	.word	0x40001c00
 8009d9c:	40002000 	.word	0x40002000

08009da0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	f023 0201 	bic.w	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f023 0302 	bic.w	r3, r3, #2
 8009de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a20      	ldr	r2, [pc, #128]	; (8009e78 <TIM_OC1_SetConfig+0xd8>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d003      	beq.n	8009e04 <TIM_OC1_SetConfig+0x64>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <TIM_OC1_SetConfig+0xdc>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10c      	bne.n	8009e1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0308 	bic.w	r3, r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 0304 	bic.w	r3, r3, #4
 8009e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a15      	ldr	r2, [pc, #84]	; (8009e78 <TIM_OC1_SetConfig+0xd8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d003      	beq.n	8009e2e <TIM_OC1_SetConfig+0x8e>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <TIM_OC1_SetConfig+0xdc>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d111      	bne.n	8009e52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	693a      	ldr	r2, [r7, #16]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685a      	ldr	r2, [r3, #4]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	621a      	str	r2, [r3, #32]
}
 8009e6c:	bf00      	nop
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	40010000 	.word	0x40010000
 8009e7c:	40010400 	.word	0x40010400

08009e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	f023 0210 	bic.w	r2, r3, #16
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	f023 0320 	bic.w	r3, r3, #32
 8009eca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a22      	ldr	r2, [pc, #136]	; (8009f64 <TIM_OC2_SetConfig+0xe4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_OC2_SetConfig+0x68>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a21      	ldr	r2, [pc, #132]	; (8009f68 <TIM_OC2_SetConfig+0xe8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d10d      	bne.n	8009f04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	011b      	lsls	r3, r3, #4
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a17      	ldr	r2, [pc, #92]	; (8009f64 <TIM_OC2_SetConfig+0xe4>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_OC2_SetConfig+0x94>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a16      	ldr	r2, [pc, #88]	; (8009f68 <TIM_OC2_SetConfig+0xe8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d113      	bne.n	8009f3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40010400 	.word	0x40010400

08009f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b087      	sub	sp, #28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1b      	ldr	r3, [r3, #32]
 8009f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	021b      	lsls	r3, r3, #8
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a21      	ldr	r2, [pc, #132]	; (800a04c <TIM_OC3_SetConfig+0xe0>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d003      	beq.n	8009fd2 <TIM_OC3_SetConfig+0x66>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a20      	ldr	r2, [pc, #128]	; (800a050 <TIM_OC3_SetConfig+0xe4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d10d      	bne.n	8009fee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	021b      	lsls	r3, r3, #8
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a16      	ldr	r2, [pc, #88]	; (800a04c <TIM_OC3_SetConfig+0xe0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC3_SetConfig+0x92>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a15      	ldr	r2, [pc, #84]	; (800a050 <TIM_OC3_SetConfig+0xe4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d113      	bne.n	800a026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4313      	orrs	r3, r2
 800a018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	011b      	lsls	r3, r3, #4
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	621a      	str	r2, [r3, #32]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	40010000 	.word	0x40010000
 800a050:	40010400 	.word	0x40010400

0800a054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	685b      	ldr	r3, [r3, #4]
 800a074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	021b      	lsls	r3, r3, #8
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	031b      	lsls	r3, r3, #12
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a12      	ldr	r2, [pc, #72]	; (800a0f8 <TIM_OC4_SetConfig+0xa4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC4_SetConfig+0x68>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a11      	ldr	r2, [pc, #68]	; (800a0fc <TIM_OC4_SetConfig+0xa8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d109      	bne.n	800a0d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	019b      	lsls	r3, r3, #6
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40010000 	.word	0x40010000
 800a0fc:	40010400 	.word	0x40010400

0800a100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f003 031f 	and.w	r3, r3, #31
 800a112:	2201      	movs	r2, #1
 800a114:	fa02 f303 	lsl.w	r3, r2, r3
 800a118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	43db      	mvns	r3, r3
 800a122:	401a      	ands	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	fa01 f303 	lsl.w	r3, r1, r3
 800a138:	431a      	orrs	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	621a      	str	r2, [r3, #32]
}
 800a13e:	bf00      	nop
 800a140:	371c      	adds	r7, #28
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
	...

0800a14c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a160:	2302      	movs	r3, #2
 800a162:	e05a      	b.n	800a21a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68fa      	ldr	r2, [r7, #12]
 800a19c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a21      	ldr	r2, [pc, #132]	; (800a228 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d022      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b0:	d01d      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a1d      	ldr	r2, [pc, #116]	; (800a22c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d018      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d013      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a1a      	ldr	r2, [pc, #104]	; (800a234 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00e      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a18      	ldr	r2, [pc, #96]	; (800a238 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d009      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a17      	ldr	r2, [pc, #92]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d004      	beq.n	800a1ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a15      	ldr	r2, [pc, #84]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d10c      	bne.n	800a208 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
 800a226:	bf00      	nop
 800a228:	40010000 	.word	0x40010000
 800a22c:	40000400 	.word	0x40000400
 800a230:	40000800 	.word	0x40000800
 800a234:	40000c00 	.word	0x40000c00
 800a238:	40010400 	.word	0x40010400
 800a23c:	40014000 	.word	0x40014000
 800a240:	40001800 	.word	0x40001800

0800a244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e03d      	b.n	800a2dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	e03f      	b.n	800a3a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d106      	bne.n	800a33c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fb ffec 	bl	8006314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2224      	movs	r2, #36	; 0x24
 800a340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68da      	ldr	r2, [r3, #12]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f90b 	bl	800a570 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	695a      	ldr	r2, [r3, #20]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2220      	movs	r2, #32
 800a394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2220      	movs	r2, #32
 800a39c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b088      	sub	sp, #32
 800a3ae:	af02      	add	r7, sp, #8
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	603b      	str	r3, [r7, #0]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f040 8083 	bne.w	800a4d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <HAL_UART_Transmit+0x2e>
 800a3d2:	88fb      	ldrh	r3, [r7, #6]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e07b      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Transmit+0x40>
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	e074      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2221      	movs	r2, #33	; 0x21
 800a3fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a400:	f7fc f996 	bl	8006730 <HAL_GetTick>
 800a404:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	88fa      	ldrh	r2, [r7, #6]
 800a40a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	88fa      	ldrh	r2, [r7, #6]
 800a410:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a41a:	e042      	b.n	800a4a2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a420:	b29b      	uxth	r3, r3
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a432:	d122      	bne.n	800a47a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2200      	movs	r2, #0
 800a43c:	2180      	movs	r1, #128	; 0x80
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 f84c 	bl	800a4dc <UART_WaitOnFlagUntilTimeout>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e042      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a460:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	691b      	ldr	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d103      	bne.n	800a472 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	3302      	adds	r3, #2
 800a46e:	60bb      	str	r3, [r7, #8]
 800a470:	e017      	b.n	800a4a2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3301      	adds	r3, #1
 800a476:	60bb      	str	r3, [r7, #8]
 800a478:	e013      	b.n	800a4a2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2200      	movs	r2, #0
 800a482:	2180      	movs	r1, #128	; 0x80
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f829 	bl	800a4dc <UART_WaitOnFlagUntilTimeout>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a490:	2303      	movs	r3, #3
 800a492:	e01f      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	1c5a      	adds	r2, r3, #1
 800a498:	60ba      	str	r2, [r7, #8]
 800a49a:	781a      	ldrb	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1b7      	bne.n	800a41c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2140      	movs	r1, #64	; 0x40
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f810 	bl	800a4dc <UART_WaitOnFlagUntilTimeout>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e006      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e000      	b.n	800a4d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a4d2:	2302      	movs	r3, #2
  }
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3718      	adds	r7, #24
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	603b      	str	r3, [r7, #0]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ec:	e02c      	b.n	800a548 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f4:	d028      	beq.n	800a548 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d007      	beq.n	800a50c <UART_WaitOnFlagUntilTimeout+0x30>
 800a4fc:	f7fc f918 	bl	8006730 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d21d      	bcs.n	800a548 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68da      	ldr	r2, [r3, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a51a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	695a      	ldr	r2, [r3, #20]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f022 0201 	bic.w	r2, r2, #1
 800a52a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a544:	2303      	movs	r3, #3
 800a546:	e00f      	b.n	800a568 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	4013      	ands	r3, r2
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	bf0c      	ite	eq
 800a558:	2301      	moveq	r3, #1
 800a55a:	2300      	movne	r3, #0
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	429a      	cmp	r2, r3
 800a564:	d0c3      	beq.n	800a4ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68da      	ldr	r2, [r3, #12]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	689a      	ldr	r2, [r3, #8]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	691b      	ldr	r3, [r3, #16]
 800a598:	431a      	orrs	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	69db      	ldr	r3, [r3, #28]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a5b2:	f023 030c 	bic.w	r3, r3, #12
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	6812      	ldr	r2, [r2, #0]
 800a5ba:	68f9      	ldr	r1, [r7, #12]
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	699a      	ldr	r2, [r3, #24]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5de:	f040 818b 	bne.w	800a8f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4ac1      	ldr	r2, [pc, #772]	; (800a8ec <UART_SetConfig+0x37c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d005      	beq.n	800a5f8 <UART_SetConfig+0x88>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4abf      	ldr	r2, [pc, #764]	; (800a8f0 <UART_SetConfig+0x380>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	f040 80bd 	bne.w	800a772 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5f8:	f7fe fa52 	bl	8008aa0 <HAL_RCC_GetPCLK2Freq>
 800a5fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	461d      	mov	r5, r3
 800a602:	f04f 0600 	mov.w	r6, #0
 800a606:	46a8      	mov	r8, r5
 800a608:	46b1      	mov	r9, r6
 800a60a:	eb18 0308 	adds.w	r3, r8, r8
 800a60e:	eb49 0409 	adc.w	r4, r9, r9
 800a612:	4698      	mov	r8, r3
 800a614:	46a1      	mov	r9, r4
 800a616:	eb18 0805 	adds.w	r8, r8, r5
 800a61a:	eb49 0906 	adc.w	r9, r9, r6
 800a61e:	f04f 0100 	mov.w	r1, #0
 800a622:	f04f 0200 	mov.w	r2, #0
 800a626:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a62a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a62e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a632:	4688      	mov	r8, r1
 800a634:	4691      	mov	r9, r2
 800a636:	eb18 0005 	adds.w	r0, r8, r5
 800a63a:	eb49 0106 	adc.w	r1, r9, r6
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	461d      	mov	r5, r3
 800a644:	f04f 0600 	mov.w	r6, #0
 800a648:	196b      	adds	r3, r5, r5
 800a64a:	eb46 0406 	adc.w	r4, r6, r6
 800a64e:	461a      	mov	r2, r3
 800a650:	4623      	mov	r3, r4
 800a652:	f7f6 fb19 	bl	8000c88 <__aeabi_uldivmod>
 800a656:	4603      	mov	r3, r0
 800a658:	460c      	mov	r4, r1
 800a65a:	461a      	mov	r2, r3
 800a65c:	4ba5      	ldr	r3, [pc, #660]	; (800a8f4 <UART_SetConfig+0x384>)
 800a65e:	fba3 2302 	umull	r2, r3, r3, r2
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	461d      	mov	r5, r3
 800a66c:	f04f 0600 	mov.w	r6, #0
 800a670:	46a9      	mov	r9, r5
 800a672:	46b2      	mov	sl, r6
 800a674:	eb19 0309 	adds.w	r3, r9, r9
 800a678:	eb4a 040a 	adc.w	r4, sl, sl
 800a67c:	4699      	mov	r9, r3
 800a67e:	46a2      	mov	sl, r4
 800a680:	eb19 0905 	adds.w	r9, r9, r5
 800a684:	eb4a 0a06 	adc.w	sl, sl, r6
 800a688:	f04f 0100 	mov.w	r1, #0
 800a68c:	f04f 0200 	mov.w	r2, #0
 800a690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a69c:	4689      	mov	r9, r1
 800a69e:	4692      	mov	sl, r2
 800a6a0:	eb19 0005 	adds.w	r0, r9, r5
 800a6a4:	eb4a 0106 	adc.w	r1, sl, r6
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	461d      	mov	r5, r3
 800a6ae:	f04f 0600 	mov.w	r6, #0
 800a6b2:	196b      	adds	r3, r5, r5
 800a6b4:	eb46 0406 	adc.w	r4, r6, r6
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	f7f6 fae4 	bl	8000c88 <__aeabi_uldivmod>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4b8b      	ldr	r3, [pc, #556]	; (800a8f4 <UART_SetConfig+0x384>)
 800a6c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a6cc:	095b      	lsrs	r3, r3, #5
 800a6ce:	2164      	movs	r1, #100	; 0x64
 800a6d0:	fb01 f303 	mul.w	r3, r1, r3
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	3332      	adds	r3, #50	; 0x32
 800a6da:	4a86      	ldr	r2, [pc, #536]	; (800a8f4 <UART_SetConfig+0x384>)
 800a6dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e0:	095b      	lsrs	r3, r3, #5
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6e8:	4498      	add	r8, r3
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	f04f 0600 	mov.w	r6, #0
 800a6f2:	46a9      	mov	r9, r5
 800a6f4:	46b2      	mov	sl, r6
 800a6f6:	eb19 0309 	adds.w	r3, r9, r9
 800a6fa:	eb4a 040a 	adc.w	r4, sl, sl
 800a6fe:	4699      	mov	r9, r3
 800a700:	46a2      	mov	sl, r4
 800a702:	eb19 0905 	adds.w	r9, r9, r5
 800a706:	eb4a 0a06 	adc.w	sl, sl, r6
 800a70a:	f04f 0100 	mov.w	r1, #0
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a716:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a71a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a71e:	4689      	mov	r9, r1
 800a720:	4692      	mov	sl, r2
 800a722:	eb19 0005 	adds.w	r0, r9, r5
 800a726:	eb4a 0106 	adc.w	r1, sl, r6
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	461d      	mov	r5, r3
 800a730:	f04f 0600 	mov.w	r6, #0
 800a734:	196b      	adds	r3, r5, r5
 800a736:	eb46 0406 	adc.w	r4, r6, r6
 800a73a:	461a      	mov	r2, r3
 800a73c:	4623      	mov	r3, r4
 800a73e:	f7f6 faa3 	bl	8000c88 <__aeabi_uldivmod>
 800a742:	4603      	mov	r3, r0
 800a744:	460c      	mov	r4, r1
 800a746:	461a      	mov	r2, r3
 800a748:	4b6a      	ldr	r3, [pc, #424]	; (800a8f4 <UART_SetConfig+0x384>)
 800a74a:	fba3 1302 	umull	r1, r3, r3, r2
 800a74e:	095b      	lsrs	r3, r3, #5
 800a750:	2164      	movs	r1, #100	; 0x64
 800a752:	fb01 f303 	mul.w	r3, r1, r3
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	3332      	adds	r3, #50	; 0x32
 800a75c:	4a65      	ldr	r2, [pc, #404]	; (800a8f4 <UART_SetConfig+0x384>)
 800a75e:	fba2 2303 	umull	r2, r3, r2, r3
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	f003 0207 	and.w	r2, r3, #7
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4442      	add	r2, r8
 800a76e:	609a      	str	r2, [r3, #8]
 800a770:	e26f      	b.n	800ac52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a772:	f7fe f981 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 800a776:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	461d      	mov	r5, r3
 800a77c:	f04f 0600 	mov.w	r6, #0
 800a780:	46a8      	mov	r8, r5
 800a782:	46b1      	mov	r9, r6
 800a784:	eb18 0308 	adds.w	r3, r8, r8
 800a788:	eb49 0409 	adc.w	r4, r9, r9
 800a78c:	4698      	mov	r8, r3
 800a78e:	46a1      	mov	r9, r4
 800a790:	eb18 0805 	adds.w	r8, r8, r5
 800a794:	eb49 0906 	adc.w	r9, r9, r6
 800a798:	f04f 0100 	mov.w	r1, #0
 800a79c:	f04f 0200 	mov.w	r2, #0
 800a7a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7ac:	4688      	mov	r8, r1
 800a7ae:	4691      	mov	r9, r2
 800a7b0:	eb18 0005 	adds.w	r0, r8, r5
 800a7b4:	eb49 0106 	adc.w	r1, r9, r6
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	461d      	mov	r5, r3
 800a7be:	f04f 0600 	mov.w	r6, #0
 800a7c2:	196b      	adds	r3, r5, r5
 800a7c4:	eb46 0406 	adc.w	r4, r6, r6
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	4623      	mov	r3, r4
 800a7cc:	f7f6 fa5c 	bl	8000c88 <__aeabi_uldivmod>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4b47      	ldr	r3, [pc, #284]	; (800a8f4 <UART_SetConfig+0x384>)
 800a7d8:	fba3 2302 	umull	r2, r3, r3, r2
 800a7dc:	095b      	lsrs	r3, r3, #5
 800a7de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	461d      	mov	r5, r3
 800a7e6:	f04f 0600 	mov.w	r6, #0
 800a7ea:	46a9      	mov	r9, r5
 800a7ec:	46b2      	mov	sl, r6
 800a7ee:	eb19 0309 	adds.w	r3, r9, r9
 800a7f2:	eb4a 040a 	adc.w	r4, sl, sl
 800a7f6:	4699      	mov	r9, r3
 800a7f8:	46a2      	mov	sl, r4
 800a7fa:	eb19 0905 	adds.w	r9, r9, r5
 800a7fe:	eb4a 0a06 	adc.w	sl, sl, r6
 800a802:	f04f 0100 	mov.w	r1, #0
 800a806:	f04f 0200 	mov.w	r2, #0
 800a80a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a80e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a812:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a816:	4689      	mov	r9, r1
 800a818:	4692      	mov	sl, r2
 800a81a:	eb19 0005 	adds.w	r0, r9, r5
 800a81e:	eb4a 0106 	adc.w	r1, sl, r6
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	461d      	mov	r5, r3
 800a828:	f04f 0600 	mov.w	r6, #0
 800a82c:	196b      	adds	r3, r5, r5
 800a82e:	eb46 0406 	adc.w	r4, r6, r6
 800a832:	461a      	mov	r2, r3
 800a834:	4623      	mov	r3, r4
 800a836:	f7f6 fa27 	bl	8000c88 <__aeabi_uldivmod>
 800a83a:	4603      	mov	r3, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	461a      	mov	r2, r3
 800a840:	4b2c      	ldr	r3, [pc, #176]	; (800a8f4 <UART_SetConfig+0x384>)
 800a842:	fba3 1302 	umull	r1, r3, r3, r2
 800a846:	095b      	lsrs	r3, r3, #5
 800a848:	2164      	movs	r1, #100	; 0x64
 800a84a:	fb01 f303 	mul.w	r3, r1, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	3332      	adds	r3, #50	; 0x32
 800a854:	4a27      	ldr	r2, [pc, #156]	; (800a8f4 <UART_SetConfig+0x384>)
 800a856:	fba2 2303 	umull	r2, r3, r2, r3
 800a85a:	095b      	lsrs	r3, r3, #5
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a862:	4498      	add	r8, r3
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	461d      	mov	r5, r3
 800a868:	f04f 0600 	mov.w	r6, #0
 800a86c:	46a9      	mov	r9, r5
 800a86e:	46b2      	mov	sl, r6
 800a870:	eb19 0309 	adds.w	r3, r9, r9
 800a874:	eb4a 040a 	adc.w	r4, sl, sl
 800a878:	4699      	mov	r9, r3
 800a87a:	46a2      	mov	sl, r4
 800a87c:	eb19 0905 	adds.w	r9, r9, r5
 800a880:	eb4a 0a06 	adc.w	sl, sl, r6
 800a884:	f04f 0100 	mov.w	r1, #0
 800a888:	f04f 0200 	mov.w	r2, #0
 800a88c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a890:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a894:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a898:	4689      	mov	r9, r1
 800a89a:	4692      	mov	sl, r2
 800a89c:	eb19 0005 	adds.w	r0, r9, r5
 800a8a0:	eb4a 0106 	adc.w	r1, sl, r6
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	461d      	mov	r5, r3
 800a8aa:	f04f 0600 	mov.w	r6, #0
 800a8ae:	196b      	adds	r3, r5, r5
 800a8b0:	eb46 0406 	adc.w	r4, r6, r6
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	f7f6 f9e6 	bl	8000c88 <__aeabi_uldivmod>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	460c      	mov	r4, r1
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	4b0c      	ldr	r3, [pc, #48]	; (800a8f4 <UART_SetConfig+0x384>)
 800a8c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	2164      	movs	r1, #100	; 0x64
 800a8cc:	fb01 f303 	mul.w	r3, r1, r3
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	00db      	lsls	r3, r3, #3
 800a8d4:	3332      	adds	r3, #50	; 0x32
 800a8d6:	4a07      	ldr	r2, [pc, #28]	; (800a8f4 <UART_SetConfig+0x384>)
 800a8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a8dc:	095b      	lsrs	r3, r3, #5
 800a8de:	f003 0207 	and.w	r2, r3, #7
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4442      	add	r2, r8
 800a8e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a8ea:	e1b2      	b.n	800ac52 <UART_SetConfig+0x6e2>
 800a8ec:	40011000 	.word	0x40011000
 800a8f0:	40011400 	.word	0x40011400
 800a8f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4ad7      	ldr	r2, [pc, #860]	; (800ac5c <UART_SetConfig+0x6ec>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d005      	beq.n	800a90e <UART_SetConfig+0x39e>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4ad6      	ldr	r2, [pc, #856]	; (800ac60 <UART_SetConfig+0x6f0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	f040 80d1 	bne.w	800aab0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a90e:	f7fe f8c7 	bl	8008aa0 <HAL_RCC_GetPCLK2Freq>
 800a912:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	469a      	mov	sl, r3
 800a918:	f04f 0b00 	mov.w	fp, #0
 800a91c:	46d0      	mov	r8, sl
 800a91e:	46d9      	mov	r9, fp
 800a920:	eb18 0308 	adds.w	r3, r8, r8
 800a924:	eb49 0409 	adc.w	r4, r9, r9
 800a928:	4698      	mov	r8, r3
 800a92a:	46a1      	mov	r9, r4
 800a92c:	eb18 080a 	adds.w	r8, r8, sl
 800a930:	eb49 090b 	adc.w	r9, r9, fp
 800a934:	f04f 0100 	mov.w	r1, #0
 800a938:	f04f 0200 	mov.w	r2, #0
 800a93c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a940:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a944:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a948:	4688      	mov	r8, r1
 800a94a:	4691      	mov	r9, r2
 800a94c:	eb1a 0508 	adds.w	r5, sl, r8
 800a950:	eb4b 0609 	adc.w	r6, fp, r9
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	4619      	mov	r1, r3
 800a95a:	f04f 0200 	mov.w	r2, #0
 800a95e:	f04f 0300 	mov.w	r3, #0
 800a962:	f04f 0400 	mov.w	r4, #0
 800a966:	0094      	lsls	r4, r2, #2
 800a968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a96c:	008b      	lsls	r3, r1, #2
 800a96e:	461a      	mov	r2, r3
 800a970:	4623      	mov	r3, r4
 800a972:	4628      	mov	r0, r5
 800a974:	4631      	mov	r1, r6
 800a976:	f7f6 f987 	bl	8000c88 <__aeabi_uldivmod>
 800a97a:	4603      	mov	r3, r0
 800a97c:	460c      	mov	r4, r1
 800a97e:	461a      	mov	r2, r3
 800a980:	4bb8      	ldr	r3, [pc, #736]	; (800ac64 <UART_SetConfig+0x6f4>)
 800a982:	fba3 2302 	umull	r2, r3, r3, r2
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	469b      	mov	fp, r3
 800a990:	f04f 0c00 	mov.w	ip, #0
 800a994:	46d9      	mov	r9, fp
 800a996:	46e2      	mov	sl, ip
 800a998:	eb19 0309 	adds.w	r3, r9, r9
 800a99c:	eb4a 040a 	adc.w	r4, sl, sl
 800a9a0:	4699      	mov	r9, r3
 800a9a2:	46a2      	mov	sl, r4
 800a9a4:	eb19 090b 	adds.w	r9, r9, fp
 800a9a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9ac:	f04f 0100 	mov.w	r1, #0
 800a9b0:	f04f 0200 	mov.w	r2, #0
 800a9b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9c0:	4689      	mov	r9, r1
 800a9c2:	4692      	mov	sl, r2
 800a9c4:	eb1b 0509 	adds.w	r5, fp, r9
 800a9c8:	eb4c 060a 	adc.w	r6, ip, sl
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f04f 0200 	mov.w	r2, #0
 800a9d6:	f04f 0300 	mov.w	r3, #0
 800a9da:	f04f 0400 	mov.w	r4, #0
 800a9de:	0094      	lsls	r4, r2, #2
 800a9e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9e4:	008b      	lsls	r3, r1, #2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	4623      	mov	r3, r4
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	f7f6 f94b 	bl	8000c88 <__aeabi_uldivmod>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4b9a      	ldr	r3, [pc, #616]	; (800ac64 <UART_SetConfig+0x6f4>)
 800a9fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a9fe:	095b      	lsrs	r3, r3, #5
 800aa00:	2164      	movs	r1, #100	; 0x64
 800aa02:	fb01 f303 	mul.w	r3, r1, r3
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	3332      	adds	r3, #50	; 0x32
 800aa0c:	4a95      	ldr	r2, [pc, #596]	; (800ac64 <UART_SetConfig+0x6f4>)
 800aa0e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa18:	4498      	add	r8, r3
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	469b      	mov	fp, r3
 800aa1e:	f04f 0c00 	mov.w	ip, #0
 800aa22:	46d9      	mov	r9, fp
 800aa24:	46e2      	mov	sl, ip
 800aa26:	eb19 0309 	adds.w	r3, r9, r9
 800aa2a:	eb4a 040a 	adc.w	r4, sl, sl
 800aa2e:	4699      	mov	r9, r3
 800aa30:	46a2      	mov	sl, r4
 800aa32:	eb19 090b 	adds.w	r9, r9, fp
 800aa36:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa3a:	f04f 0100 	mov.w	r1, #0
 800aa3e:	f04f 0200 	mov.w	r2, #0
 800aa42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa4e:	4689      	mov	r9, r1
 800aa50:	4692      	mov	sl, r2
 800aa52:	eb1b 0509 	adds.w	r5, fp, r9
 800aa56:	eb4c 060a 	adc.w	r6, ip, sl
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4619      	mov	r1, r3
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	f04f 0400 	mov.w	r4, #0
 800aa6c:	0094      	lsls	r4, r2, #2
 800aa6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa72:	008b      	lsls	r3, r1, #2
 800aa74:	461a      	mov	r2, r3
 800aa76:	4623      	mov	r3, r4
 800aa78:	4628      	mov	r0, r5
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	f7f6 f904 	bl	8000c88 <__aeabi_uldivmod>
 800aa80:	4603      	mov	r3, r0
 800aa82:	460c      	mov	r4, r1
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b77      	ldr	r3, [pc, #476]	; (800ac64 <UART_SetConfig+0x6f4>)
 800aa88:	fba3 1302 	umull	r1, r3, r3, r2
 800aa8c:	095b      	lsrs	r3, r3, #5
 800aa8e:	2164      	movs	r1, #100	; 0x64
 800aa90:	fb01 f303 	mul.w	r3, r1, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	3332      	adds	r3, #50	; 0x32
 800aa9a:	4a72      	ldr	r2, [pc, #456]	; (800ac64 <UART_SetConfig+0x6f4>)
 800aa9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa0:	095b      	lsrs	r3, r3, #5
 800aaa2:	f003 020f 	and.w	r2, r3, #15
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4442      	add	r2, r8
 800aaac:	609a      	str	r2, [r3, #8]
 800aaae:	e0d0      	b.n	800ac52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aab0:	f7fd ffe2 	bl	8008a78 <HAL_RCC_GetPCLK1Freq>
 800aab4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	469a      	mov	sl, r3
 800aaba:	f04f 0b00 	mov.w	fp, #0
 800aabe:	46d0      	mov	r8, sl
 800aac0:	46d9      	mov	r9, fp
 800aac2:	eb18 0308 	adds.w	r3, r8, r8
 800aac6:	eb49 0409 	adc.w	r4, r9, r9
 800aaca:	4698      	mov	r8, r3
 800aacc:	46a1      	mov	r9, r4
 800aace:	eb18 080a 	adds.w	r8, r8, sl
 800aad2:	eb49 090b 	adc.w	r9, r9, fp
 800aad6:	f04f 0100 	mov.w	r1, #0
 800aada:	f04f 0200 	mov.w	r2, #0
 800aade:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aae2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aae6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aaea:	4688      	mov	r8, r1
 800aaec:	4691      	mov	r9, r2
 800aaee:	eb1a 0508 	adds.w	r5, sl, r8
 800aaf2:	eb4b 0609 	adc.w	r6, fp, r9
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	4619      	mov	r1, r3
 800aafc:	f04f 0200 	mov.w	r2, #0
 800ab00:	f04f 0300 	mov.w	r3, #0
 800ab04:	f04f 0400 	mov.w	r4, #0
 800ab08:	0094      	lsls	r4, r2, #2
 800ab0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab0e:	008b      	lsls	r3, r1, #2
 800ab10:	461a      	mov	r2, r3
 800ab12:	4623      	mov	r3, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	4631      	mov	r1, r6
 800ab18:	f7f6 f8b6 	bl	8000c88 <__aeabi_uldivmod>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	460c      	mov	r4, r1
 800ab20:	461a      	mov	r2, r3
 800ab22:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <UART_SetConfig+0x6f4>)
 800ab24:	fba3 2302 	umull	r2, r3, r3, r2
 800ab28:	095b      	lsrs	r3, r3, #5
 800ab2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	469b      	mov	fp, r3
 800ab32:	f04f 0c00 	mov.w	ip, #0
 800ab36:	46d9      	mov	r9, fp
 800ab38:	46e2      	mov	sl, ip
 800ab3a:	eb19 0309 	adds.w	r3, r9, r9
 800ab3e:	eb4a 040a 	adc.w	r4, sl, sl
 800ab42:	4699      	mov	r9, r3
 800ab44:	46a2      	mov	sl, r4
 800ab46:	eb19 090b 	adds.w	r9, r9, fp
 800ab4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab4e:	f04f 0100 	mov.w	r1, #0
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab62:	4689      	mov	r9, r1
 800ab64:	4692      	mov	sl, r2
 800ab66:	eb1b 0509 	adds.w	r5, fp, r9
 800ab6a:	eb4c 060a 	adc.w	r6, ip, sl
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	4619      	mov	r1, r3
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	0094      	lsls	r4, r2, #2
 800ab82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab86:	008b      	lsls	r3, r1, #2
 800ab88:	461a      	mov	r2, r3
 800ab8a:	4623      	mov	r3, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	4631      	mov	r1, r6
 800ab90:	f7f6 f87a 	bl	8000c88 <__aeabi_uldivmod>
 800ab94:	4603      	mov	r3, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	461a      	mov	r2, r3
 800ab9a:	4b32      	ldr	r3, [pc, #200]	; (800ac64 <UART_SetConfig+0x6f4>)
 800ab9c:	fba3 1302 	umull	r1, r3, r3, r2
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	2164      	movs	r1, #100	; 0x64
 800aba4:	fb01 f303 	mul.w	r3, r1, r3
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	011b      	lsls	r3, r3, #4
 800abac:	3332      	adds	r3, #50	; 0x32
 800abae:	4a2d      	ldr	r2, [pc, #180]	; (800ac64 <UART_SetConfig+0x6f4>)
 800abb0:	fba2 2303 	umull	r2, r3, r2, r3
 800abb4:	095b      	lsrs	r3, r3, #5
 800abb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abba:	4498      	add	r8, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	469b      	mov	fp, r3
 800abc0:	f04f 0c00 	mov.w	ip, #0
 800abc4:	46d9      	mov	r9, fp
 800abc6:	46e2      	mov	sl, ip
 800abc8:	eb19 0309 	adds.w	r3, r9, r9
 800abcc:	eb4a 040a 	adc.w	r4, sl, sl
 800abd0:	4699      	mov	r9, r3
 800abd2:	46a2      	mov	sl, r4
 800abd4:	eb19 090b 	adds.w	r9, r9, fp
 800abd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abdc:	f04f 0100 	mov.w	r1, #0
 800abe0:	f04f 0200 	mov.w	r2, #0
 800abe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abf0:	4689      	mov	r9, r1
 800abf2:	4692      	mov	sl, r2
 800abf4:	eb1b 0509 	adds.w	r5, fp, r9
 800abf8:	eb4c 060a 	adc.w	r6, ip, sl
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4619      	mov	r1, r3
 800ac02:	f04f 0200 	mov.w	r2, #0
 800ac06:	f04f 0300 	mov.w	r3, #0
 800ac0a:	f04f 0400 	mov.w	r4, #0
 800ac0e:	0094      	lsls	r4, r2, #2
 800ac10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac14:	008b      	lsls	r3, r1, #2
 800ac16:	461a      	mov	r2, r3
 800ac18:	4623      	mov	r3, r4
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	f7f6 f833 	bl	8000c88 <__aeabi_uldivmod>
 800ac22:	4603      	mov	r3, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	461a      	mov	r2, r3
 800ac28:	4b0e      	ldr	r3, [pc, #56]	; (800ac64 <UART_SetConfig+0x6f4>)
 800ac2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	2164      	movs	r1, #100	; 0x64
 800ac32:	fb01 f303 	mul.w	r3, r1, r3
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	011b      	lsls	r3, r3, #4
 800ac3a:	3332      	adds	r3, #50	; 0x32
 800ac3c:	4a09      	ldr	r2, [pc, #36]	; (800ac64 <UART_SetConfig+0x6f4>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	095b      	lsrs	r3, r3, #5
 800ac44:	f003 020f 	and.w	r2, r3, #15
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4442      	add	r2, r8
 800ac4e:	609a      	str	r2, [r3, #8]
}
 800ac50:	e7ff      	b.n	800ac52 <UART_SetConfig+0x6e2>
 800ac52:	bf00      	nop
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac5c:	40011000 	.word	0x40011000
 800ac60:	40011400 	.word	0x40011400
 800ac64:	51eb851f 	.word	0x51eb851f

0800ac68 <__errno>:
 800ac68:	4b01      	ldr	r3, [pc, #4]	; (800ac70 <__errno+0x8>)
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	20000040 	.word	0x20000040

0800ac74 <__libc_init_array>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	4e0d      	ldr	r6, [pc, #52]	; (800acac <__libc_init_array+0x38>)
 800ac78:	4c0d      	ldr	r4, [pc, #52]	; (800acb0 <__libc_init_array+0x3c>)
 800ac7a:	1ba4      	subs	r4, r4, r6
 800ac7c:	10a4      	asrs	r4, r4, #2
 800ac7e:	2500      	movs	r5, #0
 800ac80:	42a5      	cmp	r5, r4
 800ac82:	d109      	bne.n	800ac98 <__libc_init_array+0x24>
 800ac84:	4e0b      	ldr	r6, [pc, #44]	; (800acb4 <__libc_init_array+0x40>)
 800ac86:	4c0c      	ldr	r4, [pc, #48]	; (800acb8 <__libc_init_array+0x44>)
 800ac88:	f004 fa60 	bl	800f14c <_init>
 800ac8c:	1ba4      	subs	r4, r4, r6
 800ac8e:	10a4      	asrs	r4, r4, #2
 800ac90:	2500      	movs	r5, #0
 800ac92:	42a5      	cmp	r5, r4
 800ac94:	d105      	bne.n	800aca2 <__libc_init_array+0x2e>
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ac9c:	4798      	blx	r3
 800ac9e:	3501      	adds	r5, #1
 800aca0:	e7ee      	b.n	800ac80 <__libc_init_array+0xc>
 800aca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800aca6:	4798      	blx	r3
 800aca8:	3501      	adds	r5, #1
 800acaa:	e7f2      	b.n	800ac92 <__libc_init_array+0x1e>
 800acac:	0800f508 	.word	0x0800f508
 800acb0:	0800f508 	.word	0x0800f508
 800acb4:	0800f508 	.word	0x0800f508
 800acb8:	0800f50c 	.word	0x0800f50c

0800acbc <memcpy>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	1e43      	subs	r3, r0, #1
 800acc0:	440a      	add	r2, r1
 800acc2:	4291      	cmp	r1, r2
 800acc4:	d100      	bne.n	800acc8 <memcpy+0xc>
 800acc6:	bd10      	pop	{r4, pc}
 800acc8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800accc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acd0:	e7f7      	b.n	800acc2 <memcpy+0x6>

0800acd2 <memset>:
 800acd2:	4402      	add	r2, r0
 800acd4:	4603      	mov	r3, r0
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d100      	bne.n	800acdc <memset+0xa>
 800acda:	4770      	bx	lr
 800acdc:	f803 1b01 	strb.w	r1, [r3], #1
 800ace0:	e7f9      	b.n	800acd6 <memset+0x4>

0800ace2 <__cvt>:
 800ace2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ace6:	ec55 4b10 	vmov	r4, r5, d0
 800acea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800acec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	460e      	mov	r6, r1
 800acf4:	4691      	mov	r9, r2
 800acf6:	4619      	mov	r1, r3
 800acf8:	bfb8      	it	lt
 800acfa:	4622      	movlt	r2, r4
 800acfc:	462b      	mov	r3, r5
 800acfe:	f027 0720 	bic.w	r7, r7, #32
 800ad02:	bfbb      	ittet	lt
 800ad04:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad08:	461d      	movlt	r5, r3
 800ad0a:	2300      	movge	r3, #0
 800ad0c:	232d      	movlt	r3, #45	; 0x2d
 800ad0e:	bfb8      	it	lt
 800ad10:	4614      	movlt	r4, r2
 800ad12:	2f46      	cmp	r7, #70	; 0x46
 800ad14:	700b      	strb	r3, [r1, #0]
 800ad16:	d004      	beq.n	800ad22 <__cvt+0x40>
 800ad18:	2f45      	cmp	r7, #69	; 0x45
 800ad1a:	d100      	bne.n	800ad1e <__cvt+0x3c>
 800ad1c:	3601      	adds	r6, #1
 800ad1e:	2102      	movs	r1, #2
 800ad20:	e000      	b.n	800ad24 <__cvt+0x42>
 800ad22:	2103      	movs	r1, #3
 800ad24:	ab03      	add	r3, sp, #12
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	ab02      	add	r3, sp, #8
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	4653      	mov	r3, sl
 800ad30:	ec45 4b10 	vmov	d0, r4, r5
 800ad34:	f001 feb4 	bl	800caa0 <_dtoa_r>
 800ad38:	2f47      	cmp	r7, #71	; 0x47
 800ad3a:	4680      	mov	r8, r0
 800ad3c:	d102      	bne.n	800ad44 <__cvt+0x62>
 800ad3e:	f019 0f01 	tst.w	r9, #1
 800ad42:	d026      	beq.n	800ad92 <__cvt+0xb0>
 800ad44:	2f46      	cmp	r7, #70	; 0x46
 800ad46:	eb08 0906 	add.w	r9, r8, r6
 800ad4a:	d111      	bne.n	800ad70 <__cvt+0x8e>
 800ad4c:	f898 3000 	ldrb.w	r3, [r8]
 800ad50:	2b30      	cmp	r3, #48	; 0x30
 800ad52:	d10a      	bne.n	800ad6a <__cvt+0x88>
 800ad54:	2200      	movs	r2, #0
 800ad56:	2300      	movs	r3, #0
 800ad58:	4620      	mov	r0, r4
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	f7f5 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad60:	b918      	cbnz	r0, 800ad6a <__cvt+0x88>
 800ad62:	f1c6 0601 	rsb	r6, r6, #1
 800ad66:	f8ca 6000 	str.w	r6, [sl]
 800ad6a:	f8da 3000 	ldr.w	r3, [sl]
 800ad6e:	4499      	add	r9, r3
 800ad70:	2200      	movs	r2, #0
 800ad72:	2300      	movs	r3, #0
 800ad74:	4620      	mov	r0, r4
 800ad76:	4629      	mov	r1, r5
 800ad78:	f7f5 fea6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad7c:	b938      	cbnz	r0, 800ad8e <__cvt+0xac>
 800ad7e:	2230      	movs	r2, #48	; 0x30
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	454b      	cmp	r3, r9
 800ad84:	d205      	bcs.n	800ad92 <__cvt+0xb0>
 800ad86:	1c59      	adds	r1, r3, #1
 800ad88:	9103      	str	r1, [sp, #12]
 800ad8a:	701a      	strb	r2, [r3, #0]
 800ad8c:	e7f8      	b.n	800ad80 <__cvt+0x9e>
 800ad8e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad96:	eba3 0308 	sub.w	r3, r3, r8
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	6013      	str	r3, [r2, #0]
 800ad9e:	b004      	add	sp, #16
 800ada0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ada4 <__exponent>:
 800ada4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ada6:	2900      	cmp	r1, #0
 800ada8:	4604      	mov	r4, r0
 800adaa:	bfba      	itte	lt
 800adac:	4249      	neglt	r1, r1
 800adae:	232d      	movlt	r3, #45	; 0x2d
 800adb0:	232b      	movge	r3, #43	; 0x2b
 800adb2:	2909      	cmp	r1, #9
 800adb4:	f804 2b02 	strb.w	r2, [r4], #2
 800adb8:	7043      	strb	r3, [r0, #1]
 800adba:	dd20      	ble.n	800adfe <__exponent+0x5a>
 800adbc:	f10d 0307 	add.w	r3, sp, #7
 800adc0:	461f      	mov	r7, r3
 800adc2:	260a      	movs	r6, #10
 800adc4:	fb91 f5f6 	sdiv	r5, r1, r6
 800adc8:	fb06 1115 	mls	r1, r6, r5, r1
 800adcc:	3130      	adds	r1, #48	; 0x30
 800adce:	2d09      	cmp	r5, #9
 800add0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800add4:	f103 32ff 	add.w	r2, r3, #4294967295
 800add8:	4629      	mov	r1, r5
 800adda:	dc09      	bgt.n	800adf0 <__exponent+0x4c>
 800addc:	3130      	adds	r1, #48	; 0x30
 800adde:	3b02      	subs	r3, #2
 800ade0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ade4:	42bb      	cmp	r3, r7
 800ade6:	4622      	mov	r2, r4
 800ade8:	d304      	bcc.n	800adf4 <__exponent+0x50>
 800adea:	1a10      	subs	r0, r2, r0
 800adec:	b003      	add	sp, #12
 800adee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adf0:	4613      	mov	r3, r2
 800adf2:	e7e7      	b.n	800adc4 <__exponent+0x20>
 800adf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adf8:	f804 2b01 	strb.w	r2, [r4], #1
 800adfc:	e7f2      	b.n	800ade4 <__exponent+0x40>
 800adfe:	2330      	movs	r3, #48	; 0x30
 800ae00:	4419      	add	r1, r3
 800ae02:	7083      	strb	r3, [r0, #2]
 800ae04:	1d02      	adds	r2, r0, #4
 800ae06:	70c1      	strb	r1, [r0, #3]
 800ae08:	e7ef      	b.n	800adea <__exponent+0x46>
	...

0800ae0c <_printf_float>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	b08d      	sub	sp, #52	; 0x34
 800ae12:	460c      	mov	r4, r1
 800ae14:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ae18:	4616      	mov	r6, r2
 800ae1a:	461f      	mov	r7, r3
 800ae1c:	4605      	mov	r5, r0
 800ae1e:	f003 f89d 	bl	800df5c <_localeconv_r>
 800ae22:	6803      	ldr	r3, [r0, #0]
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f5 f9d2 	bl	80001d0 <strlen>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae30:	f8d8 3000 	ldr.w	r3, [r8]
 800ae34:	9005      	str	r0, [sp, #20]
 800ae36:	3307      	adds	r3, #7
 800ae38:	f023 0307 	bic.w	r3, r3, #7
 800ae3c:	f103 0208 	add.w	r2, r3, #8
 800ae40:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae44:	f8d4 b000 	ldr.w	fp, [r4]
 800ae48:	f8c8 2000 	str.w	r2, [r8]
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae54:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae5c:	9307      	str	r3, [sp, #28]
 800ae5e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae62:	f04f 32ff 	mov.w	r2, #4294967295
 800ae66:	4ba7      	ldr	r3, [pc, #668]	; (800b104 <_printf_float+0x2f8>)
 800ae68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae6c:	f7f5 fe5e 	bl	8000b2c <__aeabi_dcmpun>
 800ae70:	bb70      	cbnz	r0, 800aed0 <_printf_float+0xc4>
 800ae72:	f04f 32ff 	mov.w	r2, #4294967295
 800ae76:	4ba3      	ldr	r3, [pc, #652]	; (800b104 <_printf_float+0x2f8>)
 800ae78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae7c:	f7f5 fe38 	bl	8000af0 <__aeabi_dcmple>
 800ae80:	bb30      	cbnz	r0, 800aed0 <_printf_float+0xc4>
 800ae82:	2200      	movs	r2, #0
 800ae84:	2300      	movs	r3, #0
 800ae86:	4640      	mov	r0, r8
 800ae88:	4649      	mov	r1, r9
 800ae8a:	f7f5 fe27 	bl	8000adc <__aeabi_dcmplt>
 800ae8e:	b110      	cbz	r0, 800ae96 <_printf_float+0x8a>
 800ae90:	232d      	movs	r3, #45	; 0x2d
 800ae92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae96:	4a9c      	ldr	r2, [pc, #624]	; (800b108 <_printf_float+0x2fc>)
 800ae98:	4b9c      	ldr	r3, [pc, #624]	; (800b10c <_printf_float+0x300>)
 800ae9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ae9e:	bf8c      	ite	hi
 800aea0:	4690      	movhi	r8, r2
 800aea2:	4698      	movls	r8, r3
 800aea4:	2303      	movs	r3, #3
 800aea6:	f02b 0204 	bic.w	r2, fp, #4
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	6022      	str	r2, [r4, #0]
 800aeae:	f04f 0900 	mov.w	r9, #0
 800aeb2:	9700      	str	r7, [sp, #0]
 800aeb4:	4633      	mov	r3, r6
 800aeb6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f9e6 	bl	800b28c <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	f040 808d 	bne.w	800afe0 <_printf_float+0x1d4>
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	b00d      	add	sp, #52	; 0x34
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed0:	4642      	mov	r2, r8
 800aed2:	464b      	mov	r3, r9
 800aed4:	4640      	mov	r0, r8
 800aed6:	4649      	mov	r1, r9
 800aed8:	f7f5 fe28 	bl	8000b2c <__aeabi_dcmpun>
 800aedc:	b110      	cbz	r0, 800aee4 <_printf_float+0xd8>
 800aede:	4a8c      	ldr	r2, [pc, #560]	; (800b110 <_printf_float+0x304>)
 800aee0:	4b8c      	ldr	r3, [pc, #560]	; (800b114 <_printf_float+0x308>)
 800aee2:	e7da      	b.n	800ae9a <_printf_float+0x8e>
 800aee4:	6861      	ldr	r1, [r4, #4]
 800aee6:	1c4b      	adds	r3, r1, #1
 800aee8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800aeec:	a80a      	add	r0, sp, #40	; 0x28
 800aeee:	d13e      	bne.n	800af6e <_printf_float+0x162>
 800aef0:	2306      	movs	r3, #6
 800aef2:	6063      	str	r3, [r4, #4]
 800aef4:	2300      	movs	r3, #0
 800aef6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800aefa:	ab09      	add	r3, sp, #36	; 0x24
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	ec49 8b10 	vmov	d0, r8, r9
 800af02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af06:	6022      	str	r2, [r4, #0]
 800af08:	f8cd a004 	str.w	sl, [sp, #4]
 800af0c:	6861      	ldr	r1, [r4, #4]
 800af0e:	4628      	mov	r0, r5
 800af10:	f7ff fee7 	bl	800ace2 <__cvt>
 800af14:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800af18:	2b47      	cmp	r3, #71	; 0x47
 800af1a:	4680      	mov	r8, r0
 800af1c:	d109      	bne.n	800af32 <_printf_float+0x126>
 800af1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af20:	1cd8      	adds	r0, r3, #3
 800af22:	db02      	blt.n	800af2a <_printf_float+0x11e>
 800af24:	6862      	ldr	r2, [r4, #4]
 800af26:	4293      	cmp	r3, r2
 800af28:	dd47      	ble.n	800afba <_printf_float+0x1ae>
 800af2a:	f1aa 0a02 	sub.w	sl, sl, #2
 800af2e:	fa5f fa8a 	uxtb.w	sl, sl
 800af32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800af36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af38:	d824      	bhi.n	800af84 <_printf_float+0x178>
 800af3a:	3901      	subs	r1, #1
 800af3c:	4652      	mov	r2, sl
 800af3e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af42:	9109      	str	r1, [sp, #36]	; 0x24
 800af44:	f7ff ff2e 	bl	800ada4 <__exponent>
 800af48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af4a:	1813      	adds	r3, r2, r0
 800af4c:	2a01      	cmp	r2, #1
 800af4e:	4681      	mov	r9, r0
 800af50:	6123      	str	r3, [r4, #16]
 800af52:	dc02      	bgt.n	800af5a <_printf_float+0x14e>
 800af54:	6822      	ldr	r2, [r4, #0]
 800af56:	07d1      	lsls	r1, r2, #31
 800af58:	d501      	bpl.n	800af5e <_printf_float+0x152>
 800af5a:	3301      	adds	r3, #1
 800af5c:	6123      	str	r3, [r4, #16]
 800af5e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af62:	2b00      	cmp	r3, #0
 800af64:	d0a5      	beq.n	800aeb2 <_printf_float+0xa6>
 800af66:	232d      	movs	r3, #45	; 0x2d
 800af68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af6c:	e7a1      	b.n	800aeb2 <_printf_float+0xa6>
 800af6e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800af72:	f000 8177 	beq.w	800b264 <_printf_float+0x458>
 800af76:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800af7a:	d1bb      	bne.n	800aef4 <_printf_float+0xe8>
 800af7c:	2900      	cmp	r1, #0
 800af7e:	d1b9      	bne.n	800aef4 <_printf_float+0xe8>
 800af80:	2301      	movs	r3, #1
 800af82:	e7b6      	b.n	800aef2 <_printf_float+0xe6>
 800af84:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800af88:	d119      	bne.n	800afbe <_printf_float+0x1b2>
 800af8a:	2900      	cmp	r1, #0
 800af8c:	6863      	ldr	r3, [r4, #4]
 800af8e:	dd0c      	ble.n	800afaa <_printf_float+0x19e>
 800af90:	6121      	str	r1, [r4, #16]
 800af92:	b913      	cbnz	r3, 800af9a <_printf_float+0x18e>
 800af94:	6822      	ldr	r2, [r4, #0]
 800af96:	07d2      	lsls	r2, r2, #31
 800af98:	d502      	bpl.n	800afa0 <_printf_float+0x194>
 800af9a:	3301      	adds	r3, #1
 800af9c:	440b      	add	r3, r1
 800af9e:	6123      	str	r3, [r4, #16]
 800afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afa2:	65a3      	str	r3, [r4, #88]	; 0x58
 800afa4:	f04f 0900 	mov.w	r9, #0
 800afa8:	e7d9      	b.n	800af5e <_printf_float+0x152>
 800afaa:	b913      	cbnz	r3, 800afb2 <_printf_float+0x1a6>
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	07d0      	lsls	r0, r2, #31
 800afb0:	d501      	bpl.n	800afb6 <_printf_float+0x1aa>
 800afb2:	3302      	adds	r3, #2
 800afb4:	e7f3      	b.n	800af9e <_printf_float+0x192>
 800afb6:	2301      	movs	r3, #1
 800afb8:	e7f1      	b.n	800af9e <_printf_float+0x192>
 800afba:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800afbe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800afc2:	4293      	cmp	r3, r2
 800afc4:	db05      	blt.n	800afd2 <_printf_float+0x1c6>
 800afc6:	6822      	ldr	r2, [r4, #0]
 800afc8:	6123      	str	r3, [r4, #16]
 800afca:	07d1      	lsls	r1, r2, #31
 800afcc:	d5e8      	bpl.n	800afa0 <_printf_float+0x194>
 800afce:	3301      	adds	r3, #1
 800afd0:	e7e5      	b.n	800af9e <_printf_float+0x192>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	bfd4      	ite	le
 800afd6:	f1c3 0302 	rsble	r3, r3, #2
 800afda:	2301      	movgt	r3, #1
 800afdc:	4413      	add	r3, r2
 800afde:	e7de      	b.n	800af9e <_printf_float+0x192>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	055a      	lsls	r2, r3, #21
 800afe4:	d407      	bmi.n	800aff6 <_printf_float+0x1ea>
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	4642      	mov	r2, r8
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	d12b      	bne.n	800b04c <_printf_float+0x240>
 800aff4:	e767      	b.n	800aec6 <_printf_float+0xba>
 800aff6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800affa:	f240 80dc 	bls.w	800b1b6 <_printf_float+0x3aa>
 800affe:	2200      	movs	r2, #0
 800b000:	2300      	movs	r3, #0
 800b002:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b006:	f7f5 fd5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d033      	beq.n	800b076 <_printf_float+0x26a>
 800b00e:	2301      	movs	r3, #1
 800b010:	4a41      	ldr	r2, [pc, #260]	; (800b118 <_printf_float+0x30c>)
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f af54 	beq.w	800aec6 <_printf_float+0xba>
 800b01e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b022:	429a      	cmp	r2, r3
 800b024:	db02      	blt.n	800b02c <_printf_float+0x220>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	07d8      	lsls	r0, r3, #31
 800b02a:	d50f      	bpl.n	800b04c <_printf_float+0x240>
 800b02c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b030:	4631      	mov	r1, r6
 800b032:	4628      	mov	r0, r5
 800b034:	47b8      	blx	r7
 800b036:	3001      	adds	r0, #1
 800b038:	f43f af45 	beq.w	800aec6 <_printf_float+0xba>
 800b03c:	f04f 0800 	mov.w	r8, #0
 800b040:	f104 091a 	add.w	r9, r4, #26
 800b044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b046:	3b01      	subs	r3, #1
 800b048:	4543      	cmp	r3, r8
 800b04a:	dc09      	bgt.n	800b060 <_printf_float+0x254>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	079b      	lsls	r3, r3, #30
 800b050:	f100 8103 	bmi.w	800b25a <_printf_float+0x44e>
 800b054:	68e0      	ldr	r0, [r4, #12]
 800b056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b058:	4298      	cmp	r0, r3
 800b05a:	bfb8      	it	lt
 800b05c:	4618      	movlt	r0, r3
 800b05e:	e734      	b.n	800aeca <_printf_float+0xbe>
 800b060:	2301      	movs	r3, #1
 800b062:	464a      	mov	r2, r9
 800b064:	4631      	mov	r1, r6
 800b066:	4628      	mov	r0, r5
 800b068:	47b8      	blx	r7
 800b06a:	3001      	adds	r0, #1
 800b06c:	f43f af2b 	beq.w	800aec6 <_printf_float+0xba>
 800b070:	f108 0801 	add.w	r8, r8, #1
 800b074:	e7e6      	b.n	800b044 <_printf_float+0x238>
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dc2b      	bgt.n	800b0d4 <_printf_float+0x2c8>
 800b07c:	2301      	movs	r3, #1
 800b07e:	4a26      	ldr	r2, [pc, #152]	; (800b118 <_printf_float+0x30c>)
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	f43f af1d 	beq.w	800aec6 <_printf_float+0xba>
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	b923      	cbnz	r3, 800b09a <_printf_float+0x28e>
 800b090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b092:	b913      	cbnz	r3, 800b09a <_printf_float+0x28e>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	07d9      	lsls	r1, r3, #31
 800b098:	d5d8      	bpl.n	800b04c <_printf_float+0x240>
 800b09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b09e:	4631      	mov	r1, r6
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b8      	blx	r7
 800b0a4:	3001      	adds	r0, #1
 800b0a6:	f43f af0e 	beq.w	800aec6 <_printf_float+0xba>
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	f104 0a1a 	add.w	sl, r4, #26
 800b0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	454b      	cmp	r3, r9
 800b0b8:	dc01      	bgt.n	800b0be <_printf_float+0x2b2>
 800b0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0bc:	e794      	b.n	800afe8 <_printf_float+0x1dc>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	47b8      	blx	r7
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f43f aefc 	beq.w	800aec6 <_printf_float+0xba>
 800b0ce:	f109 0901 	add.w	r9, r9, #1
 800b0d2:	e7ee      	b.n	800b0b2 <_printf_float+0x2a6>
 800b0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	bfa8      	it	ge
 800b0dc:	461a      	movge	r2, r3
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	4691      	mov	r9, r2
 800b0e2:	dd07      	ble.n	800b0f4 <_printf_float+0x2e8>
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f aee9 	beq.w	800aec6 <_printf_float+0xba>
 800b0f4:	f104 031a 	add.w	r3, r4, #26
 800b0f8:	f04f 0b00 	mov.w	fp, #0
 800b0fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b100:	9306      	str	r3, [sp, #24]
 800b102:	e015      	b.n	800b130 <_printf_float+0x324>
 800b104:	7fefffff 	.word	0x7fefffff
 800b108:	0800f1e8 	.word	0x0800f1e8
 800b10c:	0800f1e4 	.word	0x0800f1e4
 800b110:	0800f1f0 	.word	0x0800f1f0
 800b114:	0800f1ec 	.word	0x0800f1ec
 800b118:	0800f1f4 	.word	0x0800f1f4
 800b11c:	2301      	movs	r3, #1
 800b11e:	9a06      	ldr	r2, [sp, #24]
 800b120:	4631      	mov	r1, r6
 800b122:	4628      	mov	r0, r5
 800b124:	47b8      	blx	r7
 800b126:	3001      	adds	r0, #1
 800b128:	f43f aecd 	beq.w	800aec6 <_printf_float+0xba>
 800b12c:	f10b 0b01 	add.w	fp, fp, #1
 800b130:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b134:	ebaa 0309 	sub.w	r3, sl, r9
 800b138:	455b      	cmp	r3, fp
 800b13a:	dcef      	bgt.n	800b11c <_printf_float+0x310>
 800b13c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b140:	429a      	cmp	r2, r3
 800b142:	44d0      	add	r8, sl
 800b144:	db15      	blt.n	800b172 <_printf_float+0x366>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	07da      	lsls	r2, r3, #31
 800b14a:	d412      	bmi.n	800b172 <_printf_float+0x366>
 800b14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b14e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b150:	eba3 020a 	sub.w	r2, r3, sl
 800b154:	eba3 0a01 	sub.w	sl, r3, r1
 800b158:	4592      	cmp	sl, r2
 800b15a:	bfa8      	it	ge
 800b15c:	4692      	movge	sl, r2
 800b15e:	f1ba 0f00 	cmp.w	sl, #0
 800b162:	dc0e      	bgt.n	800b182 <_printf_float+0x376>
 800b164:	f04f 0800 	mov.w	r8, #0
 800b168:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b16c:	f104 091a 	add.w	r9, r4, #26
 800b170:	e019      	b.n	800b1a6 <_printf_float+0x39a>
 800b172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b176:	4631      	mov	r1, r6
 800b178:	4628      	mov	r0, r5
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	d1e5      	bne.n	800b14c <_printf_float+0x340>
 800b180:	e6a1      	b.n	800aec6 <_printf_float+0xba>
 800b182:	4653      	mov	r3, sl
 800b184:	4642      	mov	r2, r8
 800b186:	4631      	mov	r1, r6
 800b188:	4628      	mov	r0, r5
 800b18a:	47b8      	blx	r7
 800b18c:	3001      	adds	r0, #1
 800b18e:	d1e9      	bne.n	800b164 <_printf_float+0x358>
 800b190:	e699      	b.n	800aec6 <_printf_float+0xba>
 800b192:	2301      	movs	r3, #1
 800b194:	464a      	mov	r2, r9
 800b196:	4631      	mov	r1, r6
 800b198:	4628      	mov	r0, r5
 800b19a:	47b8      	blx	r7
 800b19c:	3001      	adds	r0, #1
 800b19e:	f43f ae92 	beq.w	800aec6 <_printf_float+0xba>
 800b1a2:	f108 0801 	add.w	r8, r8, #1
 800b1a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1aa:	1a9b      	subs	r3, r3, r2
 800b1ac:	eba3 030a 	sub.w	r3, r3, sl
 800b1b0:	4543      	cmp	r3, r8
 800b1b2:	dcee      	bgt.n	800b192 <_printf_float+0x386>
 800b1b4:	e74a      	b.n	800b04c <_printf_float+0x240>
 800b1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1b8:	2a01      	cmp	r2, #1
 800b1ba:	dc01      	bgt.n	800b1c0 <_printf_float+0x3b4>
 800b1bc:	07db      	lsls	r3, r3, #31
 800b1be:	d53a      	bpl.n	800b236 <_printf_float+0x42a>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	4642      	mov	r2, r8
 800b1c4:	4631      	mov	r1, r6
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	47b8      	blx	r7
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	f43f ae7b 	beq.w	800aec6 <_printf_float+0xba>
 800b1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	47b8      	blx	r7
 800b1da:	3001      	adds	r0, #1
 800b1dc:	f108 0801 	add.w	r8, r8, #1
 800b1e0:	f43f ae71 	beq.w	800aec6 <_printf_float+0xba>
 800b1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f103 3aff 	add.w	sl, r3, #4294967295
 800b1ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f7f5 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1f6:	b9c8      	cbnz	r0, 800b22c <_printf_float+0x420>
 800b1f8:	4653      	mov	r3, sl
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	d10e      	bne.n	800b224 <_printf_float+0x418>
 800b206:	e65e      	b.n	800aec6 <_printf_float+0xba>
 800b208:	2301      	movs	r3, #1
 800b20a:	4652      	mov	r2, sl
 800b20c:	4631      	mov	r1, r6
 800b20e:	4628      	mov	r0, r5
 800b210:	47b8      	blx	r7
 800b212:	3001      	adds	r0, #1
 800b214:	f43f ae57 	beq.w	800aec6 <_printf_float+0xba>
 800b218:	f108 0801 	add.w	r8, r8, #1
 800b21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b21e:	3b01      	subs	r3, #1
 800b220:	4543      	cmp	r3, r8
 800b222:	dcf1      	bgt.n	800b208 <_printf_float+0x3fc>
 800b224:	464b      	mov	r3, r9
 800b226:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b22a:	e6de      	b.n	800afea <_printf_float+0x1de>
 800b22c:	f04f 0800 	mov.w	r8, #0
 800b230:	f104 0a1a 	add.w	sl, r4, #26
 800b234:	e7f2      	b.n	800b21c <_printf_float+0x410>
 800b236:	2301      	movs	r3, #1
 800b238:	e7df      	b.n	800b1fa <_printf_float+0x3ee>
 800b23a:	2301      	movs	r3, #1
 800b23c:	464a      	mov	r2, r9
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f ae3e 	beq.w	800aec6 <_printf_float+0xba>
 800b24a:	f108 0801 	add.w	r8, r8, #1
 800b24e:	68e3      	ldr	r3, [r4, #12]
 800b250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b252:	1a9b      	subs	r3, r3, r2
 800b254:	4543      	cmp	r3, r8
 800b256:	dcf0      	bgt.n	800b23a <_printf_float+0x42e>
 800b258:	e6fc      	b.n	800b054 <_printf_float+0x248>
 800b25a:	f04f 0800 	mov.w	r8, #0
 800b25e:	f104 0919 	add.w	r9, r4, #25
 800b262:	e7f4      	b.n	800b24e <_printf_float+0x442>
 800b264:	2900      	cmp	r1, #0
 800b266:	f43f ae8b 	beq.w	800af80 <_printf_float+0x174>
 800b26a:	2300      	movs	r3, #0
 800b26c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b270:	ab09      	add	r3, sp, #36	; 0x24
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	ec49 8b10 	vmov	d0, r8, r9
 800b278:	6022      	str	r2, [r4, #0]
 800b27a:	f8cd a004 	str.w	sl, [sp, #4]
 800b27e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b282:	4628      	mov	r0, r5
 800b284:	f7ff fd2d 	bl	800ace2 <__cvt>
 800b288:	4680      	mov	r8, r0
 800b28a:	e648      	b.n	800af1e <_printf_float+0x112>

0800b28c <_printf_common>:
 800b28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b290:	4691      	mov	r9, r2
 800b292:	461f      	mov	r7, r3
 800b294:	688a      	ldr	r2, [r1, #8]
 800b296:	690b      	ldr	r3, [r1, #16]
 800b298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b29c:	4293      	cmp	r3, r2
 800b29e:	bfb8      	it	lt
 800b2a0:	4613      	movlt	r3, r2
 800b2a2:	f8c9 3000 	str.w	r3, [r9]
 800b2a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	b112      	cbz	r2, 800b2b6 <_printf_common+0x2a>
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	f8c9 3000 	str.w	r3, [r9]
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	0699      	lsls	r1, r3, #26
 800b2ba:	bf42      	ittt	mi
 800b2bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b2c0:	3302      	addmi	r3, #2
 800b2c2:	f8c9 3000 	strmi.w	r3, [r9]
 800b2c6:	6825      	ldr	r5, [r4, #0]
 800b2c8:	f015 0506 	ands.w	r5, r5, #6
 800b2cc:	d107      	bne.n	800b2de <_printf_common+0x52>
 800b2ce:	f104 0a19 	add.w	sl, r4, #25
 800b2d2:	68e3      	ldr	r3, [r4, #12]
 800b2d4:	f8d9 2000 	ldr.w	r2, [r9]
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	42ab      	cmp	r3, r5
 800b2dc:	dc28      	bgt.n	800b330 <_printf_common+0xa4>
 800b2de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b2e2:	6822      	ldr	r2, [r4, #0]
 800b2e4:	3300      	adds	r3, #0
 800b2e6:	bf18      	it	ne
 800b2e8:	2301      	movne	r3, #1
 800b2ea:	0692      	lsls	r2, r2, #26
 800b2ec:	d42d      	bmi.n	800b34a <_printf_common+0xbe>
 800b2ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2f2:	4639      	mov	r1, r7
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	47c0      	blx	r8
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	d020      	beq.n	800b33e <_printf_common+0xb2>
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	68e5      	ldr	r5, [r4, #12]
 800b300:	f8d9 2000 	ldr.w	r2, [r9]
 800b304:	f003 0306 	and.w	r3, r3, #6
 800b308:	2b04      	cmp	r3, #4
 800b30a:	bf08      	it	eq
 800b30c:	1aad      	subeq	r5, r5, r2
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	6922      	ldr	r2, [r4, #16]
 800b312:	bf0c      	ite	eq
 800b314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b318:	2500      	movne	r5, #0
 800b31a:	4293      	cmp	r3, r2
 800b31c:	bfc4      	itt	gt
 800b31e:	1a9b      	subgt	r3, r3, r2
 800b320:	18ed      	addgt	r5, r5, r3
 800b322:	f04f 0900 	mov.w	r9, #0
 800b326:	341a      	adds	r4, #26
 800b328:	454d      	cmp	r5, r9
 800b32a:	d11a      	bne.n	800b362 <_printf_common+0xd6>
 800b32c:	2000      	movs	r0, #0
 800b32e:	e008      	b.n	800b342 <_printf_common+0xb6>
 800b330:	2301      	movs	r3, #1
 800b332:	4652      	mov	r2, sl
 800b334:	4639      	mov	r1, r7
 800b336:	4630      	mov	r0, r6
 800b338:	47c0      	blx	r8
 800b33a:	3001      	adds	r0, #1
 800b33c:	d103      	bne.n	800b346 <_printf_common+0xba>
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295
 800b342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b346:	3501      	adds	r5, #1
 800b348:	e7c3      	b.n	800b2d2 <_printf_common+0x46>
 800b34a:	18e1      	adds	r1, r4, r3
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	2030      	movs	r0, #48	; 0x30
 800b350:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b354:	4422      	add	r2, r4
 800b356:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b35a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b35e:	3302      	adds	r3, #2
 800b360:	e7c5      	b.n	800b2ee <_printf_common+0x62>
 800b362:	2301      	movs	r3, #1
 800b364:	4622      	mov	r2, r4
 800b366:	4639      	mov	r1, r7
 800b368:	4630      	mov	r0, r6
 800b36a:	47c0      	blx	r8
 800b36c:	3001      	adds	r0, #1
 800b36e:	d0e6      	beq.n	800b33e <_printf_common+0xb2>
 800b370:	f109 0901 	add.w	r9, r9, #1
 800b374:	e7d8      	b.n	800b328 <_printf_common+0x9c>
	...

0800b378 <_printf_i>:
 800b378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b37c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b380:	460c      	mov	r4, r1
 800b382:	7e09      	ldrb	r1, [r1, #24]
 800b384:	b085      	sub	sp, #20
 800b386:	296e      	cmp	r1, #110	; 0x6e
 800b388:	4617      	mov	r7, r2
 800b38a:	4606      	mov	r6, r0
 800b38c:	4698      	mov	r8, r3
 800b38e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b390:	f000 80b3 	beq.w	800b4fa <_printf_i+0x182>
 800b394:	d822      	bhi.n	800b3dc <_printf_i+0x64>
 800b396:	2963      	cmp	r1, #99	; 0x63
 800b398:	d036      	beq.n	800b408 <_printf_i+0x90>
 800b39a:	d80a      	bhi.n	800b3b2 <_printf_i+0x3a>
 800b39c:	2900      	cmp	r1, #0
 800b39e:	f000 80b9 	beq.w	800b514 <_printf_i+0x19c>
 800b3a2:	2958      	cmp	r1, #88	; 0x58
 800b3a4:	f000 8083 	beq.w	800b4ae <_printf_i+0x136>
 800b3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b3b0:	e032      	b.n	800b418 <_printf_i+0xa0>
 800b3b2:	2964      	cmp	r1, #100	; 0x64
 800b3b4:	d001      	beq.n	800b3ba <_printf_i+0x42>
 800b3b6:	2969      	cmp	r1, #105	; 0x69
 800b3b8:	d1f6      	bne.n	800b3a8 <_printf_i+0x30>
 800b3ba:	6820      	ldr	r0, [r4, #0]
 800b3bc:	6813      	ldr	r3, [r2, #0]
 800b3be:	0605      	lsls	r5, r0, #24
 800b3c0:	f103 0104 	add.w	r1, r3, #4
 800b3c4:	d52a      	bpl.n	800b41c <_printf_i+0xa4>
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6011      	str	r1, [r2, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	da03      	bge.n	800b3d6 <_printf_i+0x5e>
 800b3ce:	222d      	movs	r2, #45	; 0x2d
 800b3d0:	425b      	negs	r3, r3
 800b3d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b3d6:	486f      	ldr	r0, [pc, #444]	; (800b594 <_printf_i+0x21c>)
 800b3d8:	220a      	movs	r2, #10
 800b3da:	e039      	b.n	800b450 <_printf_i+0xd8>
 800b3dc:	2973      	cmp	r1, #115	; 0x73
 800b3de:	f000 809d 	beq.w	800b51c <_printf_i+0x1a4>
 800b3e2:	d808      	bhi.n	800b3f6 <_printf_i+0x7e>
 800b3e4:	296f      	cmp	r1, #111	; 0x6f
 800b3e6:	d020      	beq.n	800b42a <_printf_i+0xb2>
 800b3e8:	2970      	cmp	r1, #112	; 0x70
 800b3ea:	d1dd      	bne.n	800b3a8 <_printf_i+0x30>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	f043 0320 	orr.w	r3, r3, #32
 800b3f2:	6023      	str	r3, [r4, #0]
 800b3f4:	e003      	b.n	800b3fe <_printf_i+0x86>
 800b3f6:	2975      	cmp	r1, #117	; 0x75
 800b3f8:	d017      	beq.n	800b42a <_printf_i+0xb2>
 800b3fa:	2978      	cmp	r1, #120	; 0x78
 800b3fc:	d1d4      	bne.n	800b3a8 <_printf_i+0x30>
 800b3fe:	2378      	movs	r3, #120	; 0x78
 800b400:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b404:	4864      	ldr	r0, [pc, #400]	; (800b598 <_printf_i+0x220>)
 800b406:	e055      	b.n	800b4b4 <_printf_i+0x13c>
 800b408:	6813      	ldr	r3, [r2, #0]
 800b40a:	1d19      	adds	r1, r3, #4
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6011      	str	r1, [r2, #0]
 800b410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b418:	2301      	movs	r3, #1
 800b41a:	e08c      	b.n	800b536 <_printf_i+0x1be>
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6011      	str	r1, [r2, #0]
 800b420:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b424:	bf18      	it	ne
 800b426:	b21b      	sxthne	r3, r3
 800b428:	e7cf      	b.n	800b3ca <_printf_i+0x52>
 800b42a:	6813      	ldr	r3, [r2, #0]
 800b42c:	6825      	ldr	r5, [r4, #0]
 800b42e:	1d18      	adds	r0, r3, #4
 800b430:	6010      	str	r0, [r2, #0]
 800b432:	0628      	lsls	r0, r5, #24
 800b434:	d501      	bpl.n	800b43a <_printf_i+0xc2>
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	e002      	b.n	800b440 <_printf_i+0xc8>
 800b43a:	0668      	lsls	r0, r5, #25
 800b43c:	d5fb      	bpl.n	800b436 <_printf_i+0xbe>
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	4854      	ldr	r0, [pc, #336]	; (800b594 <_printf_i+0x21c>)
 800b442:	296f      	cmp	r1, #111	; 0x6f
 800b444:	bf14      	ite	ne
 800b446:	220a      	movne	r2, #10
 800b448:	2208      	moveq	r2, #8
 800b44a:	2100      	movs	r1, #0
 800b44c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b450:	6865      	ldr	r5, [r4, #4]
 800b452:	60a5      	str	r5, [r4, #8]
 800b454:	2d00      	cmp	r5, #0
 800b456:	f2c0 8095 	blt.w	800b584 <_printf_i+0x20c>
 800b45a:	6821      	ldr	r1, [r4, #0]
 800b45c:	f021 0104 	bic.w	r1, r1, #4
 800b460:	6021      	str	r1, [r4, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d13d      	bne.n	800b4e2 <_printf_i+0x16a>
 800b466:	2d00      	cmp	r5, #0
 800b468:	f040 808e 	bne.w	800b588 <_printf_i+0x210>
 800b46c:	4665      	mov	r5, ip
 800b46e:	2a08      	cmp	r2, #8
 800b470:	d10b      	bne.n	800b48a <_printf_i+0x112>
 800b472:	6823      	ldr	r3, [r4, #0]
 800b474:	07db      	lsls	r3, r3, #31
 800b476:	d508      	bpl.n	800b48a <_printf_i+0x112>
 800b478:	6923      	ldr	r3, [r4, #16]
 800b47a:	6862      	ldr	r2, [r4, #4]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfde      	ittt	le
 800b480:	2330      	movle	r3, #48	; 0x30
 800b482:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b486:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b48a:	ebac 0305 	sub.w	r3, ip, r5
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	f8cd 8000 	str.w	r8, [sp]
 800b494:	463b      	mov	r3, r7
 800b496:	aa03      	add	r2, sp, #12
 800b498:	4621      	mov	r1, r4
 800b49a:	4630      	mov	r0, r6
 800b49c:	f7ff fef6 	bl	800b28c <_printf_common>
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d14d      	bne.n	800b540 <_printf_i+0x1c8>
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	b005      	add	sp, #20
 800b4aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4ae:	4839      	ldr	r0, [pc, #228]	; (800b594 <_printf_i+0x21c>)
 800b4b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b4b4:	6813      	ldr	r3, [r2, #0]
 800b4b6:	6821      	ldr	r1, [r4, #0]
 800b4b8:	1d1d      	adds	r5, r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	6015      	str	r5, [r2, #0]
 800b4be:	060a      	lsls	r2, r1, #24
 800b4c0:	d50b      	bpl.n	800b4da <_printf_i+0x162>
 800b4c2:	07ca      	lsls	r2, r1, #31
 800b4c4:	bf44      	itt	mi
 800b4c6:	f041 0120 	orrmi.w	r1, r1, #32
 800b4ca:	6021      	strmi	r1, [r4, #0]
 800b4cc:	b91b      	cbnz	r3, 800b4d6 <_printf_i+0x15e>
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	f022 0220 	bic.w	r2, r2, #32
 800b4d4:	6022      	str	r2, [r4, #0]
 800b4d6:	2210      	movs	r2, #16
 800b4d8:	e7b7      	b.n	800b44a <_printf_i+0xd2>
 800b4da:	064d      	lsls	r5, r1, #25
 800b4dc:	bf48      	it	mi
 800b4de:	b29b      	uxthmi	r3, r3
 800b4e0:	e7ef      	b.n	800b4c2 <_printf_i+0x14a>
 800b4e2:	4665      	mov	r5, ip
 800b4e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4e8:	fb02 3311 	mls	r3, r2, r1, r3
 800b4ec:	5cc3      	ldrb	r3, [r0, r3]
 800b4ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	d1f5      	bne.n	800b4e4 <_printf_i+0x16c>
 800b4f8:	e7b9      	b.n	800b46e <_printf_i+0xf6>
 800b4fa:	6813      	ldr	r3, [r2, #0]
 800b4fc:	6825      	ldr	r5, [r4, #0]
 800b4fe:	6961      	ldr	r1, [r4, #20]
 800b500:	1d18      	adds	r0, r3, #4
 800b502:	6010      	str	r0, [r2, #0]
 800b504:	0628      	lsls	r0, r5, #24
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	d501      	bpl.n	800b50e <_printf_i+0x196>
 800b50a:	6019      	str	r1, [r3, #0]
 800b50c:	e002      	b.n	800b514 <_printf_i+0x19c>
 800b50e:	066a      	lsls	r2, r5, #25
 800b510:	d5fb      	bpl.n	800b50a <_printf_i+0x192>
 800b512:	8019      	strh	r1, [r3, #0]
 800b514:	2300      	movs	r3, #0
 800b516:	6123      	str	r3, [r4, #16]
 800b518:	4665      	mov	r5, ip
 800b51a:	e7b9      	b.n	800b490 <_printf_i+0x118>
 800b51c:	6813      	ldr	r3, [r2, #0]
 800b51e:	1d19      	adds	r1, r3, #4
 800b520:	6011      	str	r1, [r2, #0]
 800b522:	681d      	ldr	r5, [r3, #0]
 800b524:	6862      	ldr	r2, [r4, #4]
 800b526:	2100      	movs	r1, #0
 800b528:	4628      	mov	r0, r5
 800b52a:	f7f4 fe59 	bl	80001e0 <memchr>
 800b52e:	b108      	cbz	r0, 800b534 <_printf_i+0x1bc>
 800b530:	1b40      	subs	r0, r0, r5
 800b532:	6060      	str	r0, [r4, #4]
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	6123      	str	r3, [r4, #16]
 800b538:	2300      	movs	r3, #0
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53e:	e7a7      	b.n	800b490 <_printf_i+0x118>
 800b540:	6923      	ldr	r3, [r4, #16]
 800b542:	462a      	mov	r2, r5
 800b544:	4639      	mov	r1, r7
 800b546:	4630      	mov	r0, r6
 800b548:	47c0      	blx	r8
 800b54a:	3001      	adds	r0, #1
 800b54c:	d0aa      	beq.n	800b4a4 <_printf_i+0x12c>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	079b      	lsls	r3, r3, #30
 800b552:	d413      	bmi.n	800b57c <_printf_i+0x204>
 800b554:	68e0      	ldr	r0, [r4, #12]
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	4298      	cmp	r0, r3
 800b55a:	bfb8      	it	lt
 800b55c:	4618      	movlt	r0, r3
 800b55e:	e7a3      	b.n	800b4a8 <_printf_i+0x130>
 800b560:	2301      	movs	r3, #1
 800b562:	464a      	mov	r2, r9
 800b564:	4639      	mov	r1, r7
 800b566:	4630      	mov	r0, r6
 800b568:	47c0      	blx	r8
 800b56a:	3001      	adds	r0, #1
 800b56c:	d09a      	beq.n	800b4a4 <_printf_i+0x12c>
 800b56e:	3501      	adds	r5, #1
 800b570:	68e3      	ldr	r3, [r4, #12]
 800b572:	9a03      	ldr	r2, [sp, #12]
 800b574:	1a9b      	subs	r3, r3, r2
 800b576:	42ab      	cmp	r3, r5
 800b578:	dcf2      	bgt.n	800b560 <_printf_i+0x1e8>
 800b57a:	e7eb      	b.n	800b554 <_printf_i+0x1dc>
 800b57c:	2500      	movs	r5, #0
 800b57e:	f104 0919 	add.w	r9, r4, #25
 800b582:	e7f5      	b.n	800b570 <_printf_i+0x1f8>
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1ac      	bne.n	800b4e2 <_printf_i+0x16a>
 800b588:	7803      	ldrb	r3, [r0, #0]
 800b58a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b58e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b592:	e76c      	b.n	800b46e <_printf_i+0xf6>
 800b594:	0800f1f6 	.word	0x0800f1f6
 800b598:	0800f207 	.word	0x0800f207

0800b59c <_scanf_float>:
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	688b      	ldr	r3, [r1, #8]
 800b5a4:	4616      	mov	r6, r2
 800b5a6:	1e5a      	subs	r2, r3, #1
 800b5a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5ac:	b087      	sub	sp, #28
 800b5ae:	bf83      	ittte	hi
 800b5b0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b5b4:	189b      	addhi	r3, r3, r2
 800b5b6:	9301      	strhi	r3, [sp, #4]
 800b5b8:	2300      	movls	r3, #0
 800b5ba:	bf86      	itte	hi
 800b5bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5c0:	608b      	strhi	r3, [r1, #8]
 800b5c2:	9301      	strls	r3, [sp, #4]
 800b5c4:	680b      	ldr	r3, [r1, #0]
 800b5c6:	4688      	mov	r8, r1
 800b5c8:	f04f 0b00 	mov.w	fp, #0
 800b5cc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5d0:	f848 3b1c 	str.w	r3, [r8], #28
 800b5d4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b5d8:	4607      	mov	r7, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	4645      	mov	r5, r8
 800b5de:	465a      	mov	r2, fp
 800b5e0:	46d9      	mov	r9, fp
 800b5e2:	f8cd b008 	str.w	fp, [sp, #8]
 800b5e6:	68a1      	ldr	r1, [r4, #8]
 800b5e8:	b181      	cbz	r1, 800b60c <_scanf_float+0x70>
 800b5ea:	6833      	ldr	r3, [r6, #0]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	2b49      	cmp	r3, #73	; 0x49
 800b5f0:	d071      	beq.n	800b6d6 <_scanf_float+0x13a>
 800b5f2:	d84d      	bhi.n	800b690 <_scanf_float+0xf4>
 800b5f4:	2b39      	cmp	r3, #57	; 0x39
 800b5f6:	d840      	bhi.n	800b67a <_scanf_float+0xde>
 800b5f8:	2b31      	cmp	r3, #49	; 0x31
 800b5fa:	f080 8088 	bcs.w	800b70e <_scanf_float+0x172>
 800b5fe:	2b2d      	cmp	r3, #45	; 0x2d
 800b600:	f000 8090 	beq.w	800b724 <_scanf_float+0x188>
 800b604:	d815      	bhi.n	800b632 <_scanf_float+0x96>
 800b606:	2b2b      	cmp	r3, #43	; 0x2b
 800b608:	f000 808c 	beq.w	800b724 <_scanf_float+0x188>
 800b60c:	f1b9 0f00 	cmp.w	r9, #0
 800b610:	d003      	beq.n	800b61a <_scanf_float+0x7e>
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b618:	6023      	str	r3, [r4, #0]
 800b61a:	3a01      	subs	r2, #1
 800b61c:	2a01      	cmp	r2, #1
 800b61e:	f200 80ea 	bhi.w	800b7f6 <_scanf_float+0x25a>
 800b622:	4545      	cmp	r5, r8
 800b624:	f200 80dc 	bhi.w	800b7e0 <_scanf_float+0x244>
 800b628:	2601      	movs	r6, #1
 800b62a:	4630      	mov	r0, r6
 800b62c:	b007      	add	sp, #28
 800b62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b632:	2b2e      	cmp	r3, #46	; 0x2e
 800b634:	f000 809f 	beq.w	800b776 <_scanf_float+0x1da>
 800b638:	2b30      	cmp	r3, #48	; 0x30
 800b63a:	d1e7      	bne.n	800b60c <_scanf_float+0x70>
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b642:	d064      	beq.n	800b70e <_scanf_float+0x172>
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b64a:	6020      	str	r0, [r4, #0]
 800b64c:	f109 0901 	add.w	r9, r9, #1
 800b650:	b11b      	cbz	r3, 800b65a <_scanf_float+0xbe>
 800b652:	3b01      	subs	r3, #1
 800b654:	3101      	adds	r1, #1
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	60a1      	str	r1, [r4, #8]
 800b65a:	68a3      	ldr	r3, [r4, #8]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	60a3      	str	r3, [r4, #8]
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	3301      	adds	r3, #1
 800b664:	6123      	str	r3, [r4, #16]
 800b666:	6873      	ldr	r3, [r6, #4]
 800b668:	3b01      	subs	r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	6073      	str	r3, [r6, #4]
 800b66e:	f340 80ac 	ble.w	800b7ca <_scanf_float+0x22e>
 800b672:	6833      	ldr	r3, [r6, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	6033      	str	r3, [r6, #0]
 800b678:	e7b5      	b.n	800b5e6 <_scanf_float+0x4a>
 800b67a:	2b45      	cmp	r3, #69	; 0x45
 800b67c:	f000 8085 	beq.w	800b78a <_scanf_float+0x1ee>
 800b680:	2b46      	cmp	r3, #70	; 0x46
 800b682:	d06a      	beq.n	800b75a <_scanf_float+0x1be>
 800b684:	2b41      	cmp	r3, #65	; 0x41
 800b686:	d1c1      	bne.n	800b60c <_scanf_float+0x70>
 800b688:	2a01      	cmp	r2, #1
 800b68a:	d1bf      	bne.n	800b60c <_scanf_float+0x70>
 800b68c:	2202      	movs	r2, #2
 800b68e:	e046      	b.n	800b71e <_scanf_float+0x182>
 800b690:	2b65      	cmp	r3, #101	; 0x65
 800b692:	d07a      	beq.n	800b78a <_scanf_float+0x1ee>
 800b694:	d818      	bhi.n	800b6c8 <_scanf_float+0x12c>
 800b696:	2b54      	cmp	r3, #84	; 0x54
 800b698:	d066      	beq.n	800b768 <_scanf_float+0x1cc>
 800b69a:	d811      	bhi.n	800b6c0 <_scanf_float+0x124>
 800b69c:	2b4e      	cmp	r3, #78	; 0x4e
 800b69e:	d1b5      	bne.n	800b60c <_scanf_float+0x70>
 800b6a0:	2a00      	cmp	r2, #0
 800b6a2:	d146      	bne.n	800b732 <_scanf_float+0x196>
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	d145      	bne.n	800b736 <_scanf_float+0x19a>
 800b6aa:	6821      	ldr	r1, [r4, #0]
 800b6ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b6b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b6b4:	d13f      	bne.n	800b736 <_scanf_float+0x19a>
 800b6b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b6ba:	6021      	str	r1, [r4, #0]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	e02e      	b.n	800b71e <_scanf_float+0x182>
 800b6c0:	2b59      	cmp	r3, #89	; 0x59
 800b6c2:	d01e      	beq.n	800b702 <_scanf_float+0x166>
 800b6c4:	2b61      	cmp	r3, #97	; 0x61
 800b6c6:	e7de      	b.n	800b686 <_scanf_float+0xea>
 800b6c8:	2b6e      	cmp	r3, #110	; 0x6e
 800b6ca:	d0e9      	beq.n	800b6a0 <_scanf_float+0x104>
 800b6cc:	d815      	bhi.n	800b6fa <_scanf_float+0x15e>
 800b6ce:	2b66      	cmp	r3, #102	; 0x66
 800b6d0:	d043      	beq.n	800b75a <_scanf_float+0x1be>
 800b6d2:	2b69      	cmp	r3, #105	; 0x69
 800b6d4:	d19a      	bne.n	800b60c <_scanf_float+0x70>
 800b6d6:	f1bb 0f00 	cmp.w	fp, #0
 800b6da:	d138      	bne.n	800b74e <_scanf_float+0x1b2>
 800b6dc:	f1b9 0f00 	cmp.w	r9, #0
 800b6e0:	d197      	bne.n	800b612 <_scanf_float+0x76>
 800b6e2:	6821      	ldr	r1, [r4, #0]
 800b6e4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b6e8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b6ec:	d195      	bne.n	800b61a <_scanf_float+0x7e>
 800b6ee:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b6f2:	6021      	str	r1, [r4, #0]
 800b6f4:	f04f 0b01 	mov.w	fp, #1
 800b6f8:	e011      	b.n	800b71e <_scanf_float+0x182>
 800b6fa:	2b74      	cmp	r3, #116	; 0x74
 800b6fc:	d034      	beq.n	800b768 <_scanf_float+0x1cc>
 800b6fe:	2b79      	cmp	r3, #121	; 0x79
 800b700:	d184      	bne.n	800b60c <_scanf_float+0x70>
 800b702:	f1bb 0f07 	cmp.w	fp, #7
 800b706:	d181      	bne.n	800b60c <_scanf_float+0x70>
 800b708:	f04f 0b08 	mov.w	fp, #8
 800b70c:	e007      	b.n	800b71e <_scanf_float+0x182>
 800b70e:	eb12 0f0b 	cmn.w	r2, fp
 800b712:	f47f af7b 	bne.w	800b60c <_scanf_float+0x70>
 800b716:	6821      	ldr	r1, [r4, #0]
 800b718:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b71c:	6021      	str	r1, [r4, #0]
 800b71e:	702b      	strb	r3, [r5, #0]
 800b720:	3501      	adds	r5, #1
 800b722:	e79a      	b.n	800b65a <_scanf_float+0xbe>
 800b724:	6821      	ldr	r1, [r4, #0]
 800b726:	0608      	lsls	r0, r1, #24
 800b728:	f57f af70 	bpl.w	800b60c <_scanf_float+0x70>
 800b72c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b730:	e7f4      	b.n	800b71c <_scanf_float+0x180>
 800b732:	2a02      	cmp	r2, #2
 800b734:	d047      	beq.n	800b7c6 <_scanf_float+0x22a>
 800b736:	f1bb 0f01 	cmp.w	fp, #1
 800b73a:	d003      	beq.n	800b744 <_scanf_float+0x1a8>
 800b73c:	f1bb 0f04 	cmp.w	fp, #4
 800b740:	f47f af64 	bne.w	800b60c <_scanf_float+0x70>
 800b744:	f10b 0b01 	add.w	fp, fp, #1
 800b748:	fa5f fb8b 	uxtb.w	fp, fp
 800b74c:	e7e7      	b.n	800b71e <_scanf_float+0x182>
 800b74e:	f1bb 0f03 	cmp.w	fp, #3
 800b752:	d0f7      	beq.n	800b744 <_scanf_float+0x1a8>
 800b754:	f1bb 0f05 	cmp.w	fp, #5
 800b758:	e7f2      	b.n	800b740 <_scanf_float+0x1a4>
 800b75a:	f1bb 0f02 	cmp.w	fp, #2
 800b75e:	f47f af55 	bne.w	800b60c <_scanf_float+0x70>
 800b762:	f04f 0b03 	mov.w	fp, #3
 800b766:	e7da      	b.n	800b71e <_scanf_float+0x182>
 800b768:	f1bb 0f06 	cmp.w	fp, #6
 800b76c:	f47f af4e 	bne.w	800b60c <_scanf_float+0x70>
 800b770:	f04f 0b07 	mov.w	fp, #7
 800b774:	e7d3      	b.n	800b71e <_scanf_float+0x182>
 800b776:	6821      	ldr	r1, [r4, #0]
 800b778:	0588      	lsls	r0, r1, #22
 800b77a:	f57f af47 	bpl.w	800b60c <_scanf_float+0x70>
 800b77e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b782:	6021      	str	r1, [r4, #0]
 800b784:	f8cd 9008 	str.w	r9, [sp, #8]
 800b788:	e7c9      	b.n	800b71e <_scanf_float+0x182>
 800b78a:	6821      	ldr	r1, [r4, #0]
 800b78c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b790:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b794:	d006      	beq.n	800b7a4 <_scanf_float+0x208>
 800b796:	0548      	lsls	r0, r1, #21
 800b798:	f57f af38 	bpl.w	800b60c <_scanf_float+0x70>
 800b79c:	f1b9 0f00 	cmp.w	r9, #0
 800b7a0:	f43f af3b 	beq.w	800b61a <_scanf_float+0x7e>
 800b7a4:	0588      	lsls	r0, r1, #22
 800b7a6:	bf58      	it	pl
 800b7a8:	9802      	ldrpl	r0, [sp, #8]
 800b7aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b7ae:	bf58      	it	pl
 800b7b0:	eba9 0000 	subpl.w	r0, r9, r0
 800b7b4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b7b8:	bf58      	it	pl
 800b7ba:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b7be:	6021      	str	r1, [r4, #0]
 800b7c0:	f04f 0900 	mov.w	r9, #0
 800b7c4:	e7ab      	b.n	800b71e <_scanf_float+0x182>
 800b7c6:	2203      	movs	r2, #3
 800b7c8:	e7a9      	b.n	800b71e <_scanf_float+0x182>
 800b7ca:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b7ce:	9205      	str	r2, [sp, #20]
 800b7d0:	4631      	mov	r1, r6
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	4798      	blx	r3
 800b7d6:	9a05      	ldr	r2, [sp, #20]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f43f af04 	beq.w	800b5e6 <_scanf_float+0x4a>
 800b7de:	e715      	b.n	800b60c <_scanf_float+0x70>
 800b7e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b7e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	4798      	blx	r3
 800b7ee:	6923      	ldr	r3, [r4, #16]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	6123      	str	r3, [r4, #16]
 800b7f4:	e715      	b.n	800b622 <_scanf_float+0x86>
 800b7f6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800b7fa:	2b06      	cmp	r3, #6
 800b7fc:	d80a      	bhi.n	800b814 <_scanf_float+0x278>
 800b7fe:	f1bb 0f02 	cmp.w	fp, #2
 800b802:	d968      	bls.n	800b8d6 <_scanf_float+0x33a>
 800b804:	f1ab 0b03 	sub.w	fp, fp, #3
 800b808:	fa5f fb8b 	uxtb.w	fp, fp
 800b80c:	eba5 0b0b 	sub.w	fp, r5, fp
 800b810:	455d      	cmp	r5, fp
 800b812:	d14b      	bne.n	800b8ac <_scanf_float+0x310>
 800b814:	6823      	ldr	r3, [r4, #0]
 800b816:	05da      	lsls	r2, r3, #23
 800b818:	d51f      	bpl.n	800b85a <_scanf_float+0x2be>
 800b81a:	055b      	lsls	r3, r3, #21
 800b81c:	d468      	bmi.n	800b8f0 <_scanf_float+0x354>
 800b81e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	2965      	cmp	r1, #101	; 0x65
 800b826:	f103 33ff 	add.w	r3, r3, #4294967295
 800b82a:	f105 3bff 	add.w	fp, r5, #4294967295
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	d00d      	beq.n	800b84e <_scanf_float+0x2b2>
 800b832:	2945      	cmp	r1, #69	; 0x45
 800b834:	d00b      	beq.n	800b84e <_scanf_float+0x2b2>
 800b836:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b83a:	4632      	mov	r2, r6
 800b83c:	4638      	mov	r0, r7
 800b83e:	4798      	blx	r3
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b846:	3b01      	subs	r3, #1
 800b848:	f1a5 0b02 	sub.w	fp, r5, #2
 800b84c:	6123      	str	r3, [r4, #16]
 800b84e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b852:	4632      	mov	r2, r6
 800b854:	4638      	mov	r0, r7
 800b856:	4798      	blx	r3
 800b858:	465d      	mov	r5, fp
 800b85a:	6826      	ldr	r6, [r4, #0]
 800b85c:	f016 0610 	ands.w	r6, r6, #16
 800b860:	d17a      	bne.n	800b958 <_scanf_float+0x3bc>
 800b862:	702e      	strb	r6, [r5, #0]
 800b864:	6823      	ldr	r3, [r4, #0]
 800b866:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b86a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b86e:	d142      	bne.n	800b8f6 <_scanf_float+0x35a>
 800b870:	9b02      	ldr	r3, [sp, #8]
 800b872:	eba9 0303 	sub.w	r3, r9, r3
 800b876:	425a      	negs	r2, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d149      	bne.n	800b910 <_scanf_float+0x374>
 800b87c:	2200      	movs	r2, #0
 800b87e:	4641      	mov	r1, r8
 800b880:	4638      	mov	r0, r7
 800b882:	f000 ff21 	bl	800c6c8 <_strtod_r>
 800b886:	6825      	ldr	r5, [r4, #0]
 800b888:	f8da 3000 	ldr.w	r3, [sl]
 800b88c:	f015 0f02 	tst.w	r5, #2
 800b890:	f103 0204 	add.w	r2, r3, #4
 800b894:	ec59 8b10 	vmov	r8, r9, d0
 800b898:	f8ca 2000 	str.w	r2, [sl]
 800b89c:	d043      	beq.n	800b926 <_scanf_float+0x38a>
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	e9c3 8900 	strd	r8, r9, [r3]
 800b8a4:	68e3      	ldr	r3, [r4, #12]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	60e3      	str	r3, [r4, #12]
 800b8aa:	e6be      	b.n	800b62a <_scanf_float+0x8e>
 800b8ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8b4:	4632      	mov	r2, r6
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	4798      	blx	r3
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	6123      	str	r3, [r4, #16]
 800b8c0:	e7a6      	b.n	800b810 <_scanf_float+0x274>
 800b8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8c6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8ca:	4632      	mov	r2, r6
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	4798      	blx	r3
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	6123      	str	r3, [r4, #16]
 800b8d6:	4545      	cmp	r5, r8
 800b8d8:	d8f3      	bhi.n	800b8c2 <_scanf_float+0x326>
 800b8da:	e6a5      	b.n	800b628 <_scanf_float+0x8c>
 800b8dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4638      	mov	r0, r7
 800b8e8:	4798      	blx	r3
 800b8ea:	6923      	ldr	r3, [r4, #16]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	6123      	str	r3, [r4, #16]
 800b8f0:	4545      	cmp	r5, r8
 800b8f2:	d8f3      	bhi.n	800b8dc <_scanf_float+0x340>
 800b8f4:	e698      	b.n	800b628 <_scanf_float+0x8c>
 800b8f6:	9b03      	ldr	r3, [sp, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0bf      	beq.n	800b87c <_scanf_float+0x2e0>
 800b8fc:	9904      	ldr	r1, [sp, #16]
 800b8fe:	230a      	movs	r3, #10
 800b900:	4632      	mov	r2, r6
 800b902:	3101      	adds	r1, #1
 800b904:	4638      	mov	r0, r7
 800b906:	f000 ff6b 	bl	800c7e0 <_strtol_r>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	9d04      	ldr	r5, [sp, #16]
 800b90e:	1ac2      	subs	r2, r0, r3
 800b910:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b914:	429d      	cmp	r5, r3
 800b916:	bf28      	it	cs
 800b918:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b91c:	490f      	ldr	r1, [pc, #60]	; (800b95c <_scanf_float+0x3c0>)
 800b91e:	4628      	mov	r0, r5
 800b920:	f000 f8a0 	bl	800ba64 <siprintf>
 800b924:	e7aa      	b.n	800b87c <_scanf_float+0x2e0>
 800b926:	f015 0504 	ands.w	r5, r5, #4
 800b92a:	d1b8      	bne.n	800b89e <_scanf_float+0x302>
 800b92c:	681f      	ldr	r7, [r3, #0]
 800b92e:	ee10 2a10 	vmov	r2, s0
 800b932:	464b      	mov	r3, r9
 800b934:	ee10 0a10 	vmov	r0, s0
 800b938:	4649      	mov	r1, r9
 800b93a:	f7f5 f8f7 	bl	8000b2c <__aeabi_dcmpun>
 800b93e:	b128      	cbz	r0, 800b94c <_scanf_float+0x3b0>
 800b940:	4628      	mov	r0, r5
 800b942:	f000 f889 	bl	800ba58 <nanf>
 800b946:	ed87 0a00 	vstr	s0, [r7]
 800b94a:	e7ab      	b.n	800b8a4 <_scanf_float+0x308>
 800b94c:	4640      	mov	r0, r8
 800b94e:	4649      	mov	r1, r9
 800b950:	f7f5 f94a 	bl	8000be8 <__aeabi_d2f>
 800b954:	6038      	str	r0, [r7, #0]
 800b956:	e7a5      	b.n	800b8a4 <_scanf_float+0x308>
 800b958:	2600      	movs	r6, #0
 800b95a:	e666      	b.n	800b62a <_scanf_float+0x8e>
 800b95c:	0800f218 	.word	0x0800f218

0800b960 <iprintf>:
 800b960:	b40f      	push	{r0, r1, r2, r3}
 800b962:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <iprintf+0x2c>)
 800b964:	b513      	push	{r0, r1, r4, lr}
 800b966:	681c      	ldr	r4, [r3, #0]
 800b968:	b124      	cbz	r4, 800b974 <iprintf+0x14>
 800b96a:	69a3      	ldr	r3, [r4, #24]
 800b96c:	b913      	cbnz	r3, 800b974 <iprintf+0x14>
 800b96e:	4620      	mov	r0, r4
 800b970:	f001 ff3e 	bl	800d7f0 <__sinit>
 800b974:	ab05      	add	r3, sp, #20
 800b976:	9a04      	ldr	r2, [sp, #16]
 800b978:	68a1      	ldr	r1, [r4, #8]
 800b97a:	9301      	str	r3, [sp, #4]
 800b97c:	4620      	mov	r0, r4
 800b97e:	f003 f9ab 	bl	800ecd8 <_vfiprintf_r>
 800b982:	b002      	add	sp, #8
 800b984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b988:	b004      	add	sp, #16
 800b98a:	4770      	bx	lr
 800b98c:	20000040 	.word	0x20000040

0800b990 <_puts_r>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	460e      	mov	r6, r1
 800b994:	4605      	mov	r5, r0
 800b996:	b118      	cbz	r0, 800b9a0 <_puts_r+0x10>
 800b998:	6983      	ldr	r3, [r0, #24]
 800b99a:	b90b      	cbnz	r3, 800b9a0 <_puts_r+0x10>
 800b99c:	f001 ff28 	bl	800d7f0 <__sinit>
 800b9a0:	69ab      	ldr	r3, [r5, #24]
 800b9a2:	68ac      	ldr	r4, [r5, #8]
 800b9a4:	b913      	cbnz	r3, 800b9ac <_puts_r+0x1c>
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f001 ff22 	bl	800d7f0 <__sinit>
 800b9ac:	4b23      	ldr	r3, [pc, #140]	; (800ba3c <_puts_r+0xac>)
 800b9ae:	429c      	cmp	r4, r3
 800b9b0:	d117      	bne.n	800b9e2 <_puts_r+0x52>
 800b9b2:	686c      	ldr	r4, [r5, #4]
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	071b      	lsls	r3, r3, #28
 800b9b8:	d51d      	bpl.n	800b9f6 <_puts_r+0x66>
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	b1db      	cbz	r3, 800b9f6 <_puts_r+0x66>
 800b9be:	3e01      	subs	r6, #1
 800b9c0:	68a3      	ldr	r3, [r4, #8]
 800b9c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	60a3      	str	r3, [r4, #8]
 800b9ca:	b9e9      	cbnz	r1, 800ba08 <_puts_r+0x78>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	da2e      	bge.n	800ba2e <_puts_r+0x9e>
 800b9d0:	4622      	mov	r2, r4
 800b9d2:	210a      	movs	r1, #10
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	f000 ff15 	bl	800c804 <__swbuf_r>
 800b9da:	3001      	adds	r0, #1
 800b9dc:	d011      	beq.n	800ba02 <_puts_r+0x72>
 800b9de:	200a      	movs	r0, #10
 800b9e0:	e011      	b.n	800ba06 <_puts_r+0x76>
 800b9e2:	4b17      	ldr	r3, [pc, #92]	; (800ba40 <_puts_r+0xb0>)
 800b9e4:	429c      	cmp	r4, r3
 800b9e6:	d101      	bne.n	800b9ec <_puts_r+0x5c>
 800b9e8:	68ac      	ldr	r4, [r5, #8]
 800b9ea:	e7e3      	b.n	800b9b4 <_puts_r+0x24>
 800b9ec:	4b15      	ldr	r3, [pc, #84]	; (800ba44 <_puts_r+0xb4>)
 800b9ee:	429c      	cmp	r4, r3
 800b9f0:	bf08      	it	eq
 800b9f2:	68ec      	ldreq	r4, [r5, #12]
 800b9f4:	e7de      	b.n	800b9b4 <_puts_r+0x24>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f000 ff55 	bl	800c8a8 <__swsetup_r>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d0dd      	beq.n	800b9be <_puts_r+0x2e>
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	da04      	bge.n	800ba16 <_puts_r+0x86>
 800ba0c:	69a2      	ldr	r2, [r4, #24]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	dc06      	bgt.n	800ba20 <_puts_r+0x90>
 800ba12:	290a      	cmp	r1, #10
 800ba14:	d004      	beq.n	800ba20 <_puts_r+0x90>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	1c5a      	adds	r2, r3, #1
 800ba1a:	6022      	str	r2, [r4, #0]
 800ba1c:	7019      	strb	r1, [r3, #0]
 800ba1e:	e7cf      	b.n	800b9c0 <_puts_r+0x30>
 800ba20:	4622      	mov	r2, r4
 800ba22:	4628      	mov	r0, r5
 800ba24:	f000 feee 	bl	800c804 <__swbuf_r>
 800ba28:	3001      	adds	r0, #1
 800ba2a:	d1c9      	bne.n	800b9c0 <_puts_r+0x30>
 800ba2c:	e7e9      	b.n	800ba02 <_puts_r+0x72>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	200a      	movs	r0, #10
 800ba32:	1c5a      	adds	r2, r3, #1
 800ba34:	6022      	str	r2, [r4, #0]
 800ba36:	7018      	strb	r0, [r3, #0]
 800ba38:	e7e5      	b.n	800ba06 <_puts_r+0x76>
 800ba3a:	bf00      	nop
 800ba3c:	0800f2a0 	.word	0x0800f2a0
 800ba40:	0800f2c0 	.word	0x0800f2c0
 800ba44:	0800f280 	.word	0x0800f280

0800ba48 <puts>:
 800ba48:	4b02      	ldr	r3, [pc, #8]	; (800ba54 <puts+0xc>)
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	f7ff bf9f 	b.w	800b990 <_puts_r>
 800ba52:	bf00      	nop
 800ba54:	20000040 	.word	0x20000040

0800ba58 <nanf>:
 800ba58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba60 <nanf+0x8>
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	7fc00000 	.word	0x7fc00000

0800ba64 <siprintf>:
 800ba64:	b40e      	push	{r1, r2, r3}
 800ba66:	b500      	push	{lr}
 800ba68:	b09c      	sub	sp, #112	; 0x70
 800ba6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ba6c:	9002      	str	r0, [sp, #8]
 800ba6e:	9006      	str	r0, [sp, #24]
 800ba70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba74:	4809      	ldr	r0, [pc, #36]	; (800ba9c <siprintf+0x38>)
 800ba76:	9107      	str	r1, [sp, #28]
 800ba78:	9104      	str	r1, [sp, #16]
 800ba7a:	4909      	ldr	r1, [pc, #36]	; (800baa0 <siprintf+0x3c>)
 800ba7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba80:	9105      	str	r1, [sp, #20]
 800ba82:	6800      	ldr	r0, [r0, #0]
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	a902      	add	r1, sp, #8
 800ba88:	f003 f804 	bl	800ea94 <_svfiprintf_r>
 800ba8c:	9b02      	ldr	r3, [sp, #8]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	b01c      	add	sp, #112	; 0x70
 800ba94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba98:	b003      	add	sp, #12
 800ba9a:	4770      	bx	lr
 800ba9c:	20000040 	.word	0x20000040
 800baa0:	ffff0208 	.word	0xffff0208

0800baa4 <sulp>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	4604      	mov	r4, r0
 800baa8:	460d      	mov	r5, r1
 800baaa:	ec45 4b10 	vmov	d0, r4, r5
 800baae:	4616      	mov	r6, r2
 800bab0:	f002 fdac 	bl	800e60c <__ulp>
 800bab4:	ec51 0b10 	vmov	r0, r1, d0
 800bab8:	b17e      	cbz	r6, 800bada <sulp+0x36>
 800baba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800babe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dd09      	ble.n	800bada <sulp+0x36>
 800bac6:	051b      	lsls	r3, r3, #20
 800bac8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bacc:	2400      	movs	r4, #0
 800bace:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bad2:	4622      	mov	r2, r4
 800bad4:	462b      	mov	r3, r5
 800bad6:	f7f4 fd8f 	bl	80005f8 <__aeabi_dmul>
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	0000      	movs	r0, r0
	...

0800bae0 <_strtod_l>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	461f      	mov	r7, r3
 800bae6:	b0a1      	sub	sp, #132	; 0x84
 800bae8:	2300      	movs	r3, #0
 800baea:	4681      	mov	r9, r0
 800baec:	4638      	mov	r0, r7
 800baee:	460e      	mov	r6, r1
 800baf0:	9217      	str	r2, [sp, #92]	; 0x5c
 800baf2:	931c      	str	r3, [sp, #112]	; 0x70
 800baf4:	f002 fa2f 	bl	800df56 <__localeconv_l>
 800baf8:	4680      	mov	r8, r0
 800bafa:	6800      	ldr	r0, [r0, #0]
 800bafc:	f7f4 fb68 	bl	80001d0 <strlen>
 800bb00:	f04f 0a00 	mov.w	sl, #0
 800bb04:	4604      	mov	r4, r0
 800bb06:	f04f 0b00 	mov.w	fp, #0
 800bb0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb0e:	781a      	ldrb	r2, [r3, #0]
 800bb10:	2a0d      	cmp	r2, #13
 800bb12:	d832      	bhi.n	800bb7a <_strtod_l+0x9a>
 800bb14:	2a09      	cmp	r2, #9
 800bb16:	d236      	bcs.n	800bb86 <_strtod_l+0xa6>
 800bb18:	2a00      	cmp	r2, #0
 800bb1a:	d03e      	beq.n	800bb9a <_strtod_l+0xba>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bb22:	782b      	ldrb	r3, [r5, #0]
 800bb24:	2b30      	cmp	r3, #48	; 0x30
 800bb26:	f040 80ac 	bne.w	800bc82 <_strtod_l+0x1a2>
 800bb2a:	786b      	ldrb	r3, [r5, #1]
 800bb2c:	2b58      	cmp	r3, #88	; 0x58
 800bb2e:	d001      	beq.n	800bb34 <_strtod_l+0x54>
 800bb30:	2b78      	cmp	r3, #120	; 0x78
 800bb32:	d167      	bne.n	800bc04 <_strtod_l+0x124>
 800bb34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb36:	9301      	str	r3, [sp, #4]
 800bb38:	ab1c      	add	r3, sp, #112	; 0x70
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	9702      	str	r7, [sp, #8]
 800bb3e:	ab1d      	add	r3, sp, #116	; 0x74
 800bb40:	4a88      	ldr	r2, [pc, #544]	; (800bd64 <_strtod_l+0x284>)
 800bb42:	a91b      	add	r1, sp, #108	; 0x6c
 800bb44:	4648      	mov	r0, r9
 800bb46:	f001 ff2c 	bl	800d9a2 <__gethex>
 800bb4a:	f010 0407 	ands.w	r4, r0, #7
 800bb4e:	4606      	mov	r6, r0
 800bb50:	d005      	beq.n	800bb5e <_strtod_l+0x7e>
 800bb52:	2c06      	cmp	r4, #6
 800bb54:	d12b      	bne.n	800bbae <_strtod_l+0xce>
 800bb56:	3501      	adds	r5, #1
 800bb58:	2300      	movs	r3, #0
 800bb5a:	951b      	str	r5, [sp, #108]	; 0x6c
 800bb5c:	930d      	str	r3, [sp, #52]	; 0x34
 800bb5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f040 859a 	bne.w	800c69a <_strtod_l+0xbba>
 800bb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb68:	b1e3      	cbz	r3, 800bba4 <_strtod_l+0xc4>
 800bb6a:	4652      	mov	r2, sl
 800bb6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb70:	ec43 2b10 	vmov	d0, r2, r3
 800bb74:	b021      	add	sp, #132	; 0x84
 800bb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7a:	2a2b      	cmp	r2, #43	; 0x2b
 800bb7c:	d015      	beq.n	800bbaa <_strtod_l+0xca>
 800bb7e:	2a2d      	cmp	r2, #45	; 0x2d
 800bb80:	d004      	beq.n	800bb8c <_strtod_l+0xac>
 800bb82:	2a20      	cmp	r2, #32
 800bb84:	d1ca      	bne.n	800bb1c <_strtod_l+0x3c>
 800bb86:	3301      	adds	r3, #1
 800bb88:	931b      	str	r3, [sp, #108]	; 0x6c
 800bb8a:	e7bf      	b.n	800bb0c <_strtod_l+0x2c>
 800bb8c:	2201      	movs	r2, #1
 800bb8e:	920d      	str	r2, [sp, #52]	; 0x34
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	921b      	str	r2, [sp, #108]	; 0x6c
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1c2      	bne.n	800bb20 <_strtod_l+0x40>
 800bb9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb9c:	961b      	str	r6, [sp, #108]	; 0x6c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f040 8579 	bne.w	800c696 <_strtod_l+0xbb6>
 800bba4:	4652      	mov	r2, sl
 800bba6:	465b      	mov	r3, fp
 800bba8:	e7e2      	b.n	800bb70 <_strtod_l+0x90>
 800bbaa:	2200      	movs	r2, #0
 800bbac:	e7ef      	b.n	800bb8e <_strtod_l+0xae>
 800bbae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bbb0:	b13a      	cbz	r2, 800bbc2 <_strtod_l+0xe2>
 800bbb2:	2135      	movs	r1, #53	; 0x35
 800bbb4:	a81e      	add	r0, sp, #120	; 0x78
 800bbb6:	f002 fe21 	bl	800e7fc <__copybits>
 800bbba:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bbbc:	4648      	mov	r0, r9
 800bbbe:	f002 fa8d 	bl	800e0dc <_Bfree>
 800bbc2:	3c01      	subs	r4, #1
 800bbc4:	2c04      	cmp	r4, #4
 800bbc6:	d806      	bhi.n	800bbd6 <_strtod_l+0xf6>
 800bbc8:	e8df f004 	tbb	[pc, r4]
 800bbcc:	1714030a 	.word	0x1714030a
 800bbd0:	0a          	.byte	0x0a
 800bbd1:	00          	.byte	0x00
 800bbd2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800bbd6:	0730      	lsls	r0, r6, #28
 800bbd8:	d5c1      	bpl.n	800bb5e <_strtod_l+0x7e>
 800bbda:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bbde:	e7be      	b.n	800bb5e <_strtod_l+0x7e>
 800bbe0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800bbe4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bbe6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bbea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bbee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bbf2:	e7f0      	b.n	800bbd6 <_strtod_l+0xf6>
 800bbf4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bd68 <_strtod_l+0x288>
 800bbf8:	e7ed      	b.n	800bbd6 <_strtod_l+0xf6>
 800bbfa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bbfe:	f04f 3aff 	mov.w	sl, #4294967295
 800bc02:	e7e8      	b.n	800bbd6 <_strtod_l+0xf6>
 800bc04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc06:	1c5a      	adds	r2, r3, #1
 800bc08:	921b      	str	r2, [sp, #108]	; 0x6c
 800bc0a:	785b      	ldrb	r3, [r3, #1]
 800bc0c:	2b30      	cmp	r3, #48	; 0x30
 800bc0e:	d0f9      	beq.n	800bc04 <_strtod_l+0x124>
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0a4      	beq.n	800bb5e <_strtod_l+0x7e>
 800bc14:	2301      	movs	r3, #1
 800bc16:	2500      	movs	r5, #0
 800bc18:	9306      	str	r3, [sp, #24]
 800bc1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bc1c:	9308      	str	r3, [sp, #32]
 800bc1e:	9507      	str	r5, [sp, #28]
 800bc20:	9505      	str	r5, [sp, #20]
 800bc22:	220a      	movs	r2, #10
 800bc24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800bc26:	7807      	ldrb	r7, [r0, #0]
 800bc28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bc2c:	b2d9      	uxtb	r1, r3
 800bc2e:	2909      	cmp	r1, #9
 800bc30:	d929      	bls.n	800bc86 <_strtod_l+0x1a6>
 800bc32:	4622      	mov	r2, r4
 800bc34:	f8d8 1000 	ldr.w	r1, [r8]
 800bc38:	f003 f9b7 	bl	800efaa <strncmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d031      	beq.n	800bca4 <_strtod_l+0x1c4>
 800bc40:	2000      	movs	r0, #0
 800bc42:	9c05      	ldr	r4, [sp, #20]
 800bc44:	9004      	str	r0, [sp, #16]
 800bc46:	463b      	mov	r3, r7
 800bc48:	4602      	mov	r2, r0
 800bc4a:	2b65      	cmp	r3, #101	; 0x65
 800bc4c:	d001      	beq.n	800bc52 <_strtod_l+0x172>
 800bc4e:	2b45      	cmp	r3, #69	; 0x45
 800bc50:	d114      	bne.n	800bc7c <_strtod_l+0x19c>
 800bc52:	b924      	cbnz	r4, 800bc5e <_strtod_l+0x17e>
 800bc54:	b910      	cbnz	r0, 800bc5c <_strtod_l+0x17c>
 800bc56:	9b06      	ldr	r3, [sp, #24]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d09e      	beq.n	800bb9a <_strtod_l+0xba>
 800bc5c:	2400      	movs	r4, #0
 800bc5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bc60:	1c73      	adds	r3, r6, #1
 800bc62:	931b      	str	r3, [sp, #108]	; 0x6c
 800bc64:	7873      	ldrb	r3, [r6, #1]
 800bc66:	2b2b      	cmp	r3, #43	; 0x2b
 800bc68:	d078      	beq.n	800bd5c <_strtod_l+0x27c>
 800bc6a:	2b2d      	cmp	r3, #45	; 0x2d
 800bc6c:	d070      	beq.n	800bd50 <_strtod_l+0x270>
 800bc6e:	f04f 0c00 	mov.w	ip, #0
 800bc72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bc76:	2f09      	cmp	r7, #9
 800bc78:	d97c      	bls.n	800bd74 <_strtod_l+0x294>
 800bc7a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bc7c:	f04f 0e00 	mov.w	lr, #0
 800bc80:	e09a      	b.n	800bdb8 <_strtod_l+0x2d8>
 800bc82:	2300      	movs	r3, #0
 800bc84:	e7c7      	b.n	800bc16 <_strtod_l+0x136>
 800bc86:	9905      	ldr	r1, [sp, #20]
 800bc88:	2908      	cmp	r1, #8
 800bc8a:	bfdd      	ittte	le
 800bc8c:	9907      	ldrle	r1, [sp, #28]
 800bc8e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc92:	9307      	strle	r3, [sp, #28]
 800bc94:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bc98:	9b05      	ldr	r3, [sp, #20]
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	901b      	str	r0, [sp, #108]	; 0x6c
 800bca2:	e7bf      	b.n	800bc24 <_strtod_l+0x144>
 800bca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bca6:	191a      	adds	r2, r3, r4
 800bca8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcaa:	9a05      	ldr	r2, [sp, #20]
 800bcac:	5d1b      	ldrb	r3, [r3, r4]
 800bcae:	2a00      	cmp	r2, #0
 800bcb0:	d037      	beq.n	800bd22 <_strtod_l+0x242>
 800bcb2:	9c05      	ldr	r4, [sp, #20]
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bcba:	2909      	cmp	r1, #9
 800bcbc:	d913      	bls.n	800bce6 <_strtod_l+0x206>
 800bcbe:	2101      	movs	r1, #1
 800bcc0:	9104      	str	r1, [sp, #16]
 800bcc2:	e7c2      	b.n	800bc4a <_strtod_l+0x16a>
 800bcc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	921b      	str	r2, [sp, #108]	; 0x6c
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	3001      	adds	r0, #1
 800bcce:	2b30      	cmp	r3, #48	; 0x30
 800bcd0:	d0f8      	beq.n	800bcc4 <_strtod_l+0x1e4>
 800bcd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bcd6:	2a08      	cmp	r2, #8
 800bcd8:	f200 84e4 	bhi.w	800c6a4 <_strtod_l+0xbc4>
 800bcdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bcde:	9208      	str	r2, [sp, #32]
 800bce0:	4602      	mov	r2, r0
 800bce2:	2000      	movs	r0, #0
 800bce4:	4604      	mov	r4, r0
 800bce6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bcea:	f100 0101 	add.w	r1, r0, #1
 800bcee:	d012      	beq.n	800bd16 <_strtod_l+0x236>
 800bcf0:	440a      	add	r2, r1
 800bcf2:	eb00 0c04 	add.w	ip, r0, r4
 800bcf6:	4621      	mov	r1, r4
 800bcf8:	270a      	movs	r7, #10
 800bcfa:	458c      	cmp	ip, r1
 800bcfc:	d113      	bne.n	800bd26 <_strtod_l+0x246>
 800bcfe:	1821      	adds	r1, r4, r0
 800bd00:	2908      	cmp	r1, #8
 800bd02:	f104 0401 	add.w	r4, r4, #1
 800bd06:	4404      	add	r4, r0
 800bd08:	dc19      	bgt.n	800bd3e <_strtod_l+0x25e>
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	210a      	movs	r1, #10
 800bd0e:	fb01 e303 	mla	r3, r1, r3, lr
 800bd12:	9307      	str	r3, [sp, #28]
 800bd14:	2100      	movs	r1, #0
 800bd16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd18:	1c58      	adds	r0, r3, #1
 800bd1a:	901b      	str	r0, [sp, #108]	; 0x6c
 800bd1c:	785b      	ldrb	r3, [r3, #1]
 800bd1e:	4608      	mov	r0, r1
 800bd20:	e7c9      	b.n	800bcb6 <_strtod_l+0x1d6>
 800bd22:	9805      	ldr	r0, [sp, #20]
 800bd24:	e7d3      	b.n	800bcce <_strtod_l+0x1ee>
 800bd26:	2908      	cmp	r1, #8
 800bd28:	f101 0101 	add.w	r1, r1, #1
 800bd2c:	dc03      	bgt.n	800bd36 <_strtod_l+0x256>
 800bd2e:	9b07      	ldr	r3, [sp, #28]
 800bd30:	437b      	muls	r3, r7
 800bd32:	9307      	str	r3, [sp, #28]
 800bd34:	e7e1      	b.n	800bcfa <_strtod_l+0x21a>
 800bd36:	2910      	cmp	r1, #16
 800bd38:	bfd8      	it	le
 800bd3a:	437d      	mulle	r5, r7
 800bd3c:	e7dd      	b.n	800bcfa <_strtod_l+0x21a>
 800bd3e:	2c10      	cmp	r4, #16
 800bd40:	bfdc      	itt	le
 800bd42:	210a      	movle	r1, #10
 800bd44:	fb01 e505 	mlale	r5, r1, r5, lr
 800bd48:	e7e4      	b.n	800bd14 <_strtod_l+0x234>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	9304      	str	r3, [sp, #16]
 800bd4e:	e781      	b.n	800bc54 <_strtod_l+0x174>
 800bd50:	f04f 0c01 	mov.w	ip, #1
 800bd54:	1cb3      	adds	r3, r6, #2
 800bd56:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd58:	78b3      	ldrb	r3, [r6, #2]
 800bd5a:	e78a      	b.n	800bc72 <_strtod_l+0x192>
 800bd5c:	f04f 0c00 	mov.w	ip, #0
 800bd60:	e7f8      	b.n	800bd54 <_strtod_l+0x274>
 800bd62:	bf00      	nop
 800bd64:	0800f220 	.word	0x0800f220
 800bd68:	7ff00000 	.word	0x7ff00000
 800bd6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd6e:	1c5f      	adds	r7, r3, #1
 800bd70:	971b      	str	r7, [sp, #108]	; 0x6c
 800bd72:	785b      	ldrb	r3, [r3, #1]
 800bd74:	2b30      	cmp	r3, #48	; 0x30
 800bd76:	d0f9      	beq.n	800bd6c <_strtod_l+0x28c>
 800bd78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800bd7c:	2f08      	cmp	r7, #8
 800bd7e:	f63f af7d 	bhi.w	800bc7c <_strtod_l+0x19c>
 800bd82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bd86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd88:	930a      	str	r3, [sp, #40]	; 0x28
 800bd8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd8c:	1c5f      	adds	r7, r3, #1
 800bd8e:	971b      	str	r7, [sp, #108]	; 0x6c
 800bd90:	785b      	ldrb	r3, [r3, #1]
 800bd92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800bd96:	f1b8 0f09 	cmp.w	r8, #9
 800bd9a:	d937      	bls.n	800be0c <_strtod_l+0x32c>
 800bd9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bd9e:	1a7f      	subs	r7, r7, r1
 800bda0:	2f08      	cmp	r7, #8
 800bda2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bda6:	dc37      	bgt.n	800be18 <_strtod_l+0x338>
 800bda8:	45be      	cmp	lr, r7
 800bdaa:	bfa8      	it	ge
 800bdac:	46be      	movge	lr, r7
 800bdae:	f1bc 0f00 	cmp.w	ip, #0
 800bdb2:	d001      	beq.n	800bdb8 <_strtod_l+0x2d8>
 800bdb4:	f1ce 0e00 	rsb	lr, lr, #0
 800bdb8:	2c00      	cmp	r4, #0
 800bdba:	d151      	bne.n	800be60 <_strtod_l+0x380>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f47f aece 	bne.w	800bb5e <_strtod_l+0x7e>
 800bdc2:	9a06      	ldr	r2, [sp, #24]
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	f47f aeca 	bne.w	800bb5e <_strtod_l+0x7e>
 800bdca:	9a04      	ldr	r2, [sp, #16]
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	f47f aee4 	bne.w	800bb9a <_strtod_l+0xba>
 800bdd2:	2b4e      	cmp	r3, #78	; 0x4e
 800bdd4:	d027      	beq.n	800be26 <_strtod_l+0x346>
 800bdd6:	dc21      	bgt.n	800be1c <_strtod_l+0x33c>
 800bdd8:	2b49      	cmp	r3, #73	; 0x49
 800bdda:	f47f aede 	bne.w	800bb9a <_strtod_l+0xba>
 800bdde:	49a0      	ldr	r1, [pc, #640]	; (800c060 <_strtod_l+0x580>)
 800bde0:	a81b      	add	r0, sp, #108	; 0x6c
 800bde2:	f002 f811 	bl	800de08 <__match>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	f43f aed7 	beq.w	800bb9a <_strtod_l+0xba>
 800bdec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdee:	499d      	ldr	r1, [pc, #628]	; (800c064 <_strtod_l+0x584>)
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	a81b      	add	r0, sp, #108	; 0x6c
 800bdf4:	931b      	str	r3, [sp, #108]	; 0x6c
 800bdf6:	f002 f807 	bl	800de08 <__match>
 800bdfa:	b910      	cbnz	r0, 800be02 <_strtod_l+0x322>
 800bdfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bdfe:	3301      	adds	r3, #1
 800be00:	931b      	str	r3, [sp, #108]	; 0x6c
 800be02:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c078 <_strtod_l+0x598>
 800be06:	f04f 0a00 	mov.w	sl, #0
 800be0a:	e6a8      	b.n	800bb5e <_strtod_l+0x7e>
 800be0c:	210a      	movs	r1, #10
 800be0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800be12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800be16:	e7b8      	b.n	800bd8a <_strtod_l+0x2aa>
 800be18:	46be      	mov	lr, r7
 800be1a:	e7c8      	b.n	800bdae <_strtod_l+0x2ce>
 800be1c:	2b69      	cmp	r3, #105	; 0x69
 800be1e:	d0de      	beq.n	800bdde <_strtod_l+0x2fe>
 800be20:	2b6e      	cmp	r3, #110	; 0x6e
 800be22:	f47f aeba 	bne.w	800bb9a <_strtod_l+0xba>
 800be26:	4990      	ldr	r1, [pc, #576]	; (800c068 <_strtod_l+0x588>)
 800be28:	a81b      	add	r0, sp, #108	; 0x6c
 800be2a:	f001 ffed 	bl	800de08 <__match>
 800be2e:	2800      	cmp	r0, #0
 800be30:	f43f aeb3 	beq.w	800bb9a <_strtod_l+0xba>
 800be34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	2b28      	cmp	r3, #40	; 0x28
 800be3a:	d10e      	bne.n	800be5a <_strtod_l+0x37a>
 800be3c:	aa1e      	add	r2, sp, #120	; 0x78
 800be3e:	498b      	ldr	r1, [pc, #556]	; (800c06c <_strtod_l+0x58c>)
 800be40:	a81b      	add	r0, sp, #108	; 0x6c
 800be42:	f001 fff5 	bl	800de30 <__hexnan>
 800be46:	2805      	cmp	r0, #5
 800be48:	d107      	bne.n	800be5a <_strtod_l+0x37a>
 800be4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800be50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800be54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800be58:	e681      	b.n	800bb5e <_strtod_l+0x7e>
 800be5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c080 <_strtod_l+0x5a0>
 800be5e:	e7d2      	b.n	800be06 <_strtod_l+0x326>
 800be60:	ebae 0302 	sub.w	r3, lr, r2
 800be64:	9306      	str	r3, [sp, #24]
 800be66:	9b05      	ldr	r3, [sp, #20]
 800be68:	9807      	ldr	r0, [sp, #28]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bf08      	it	eq
 800be6e:	4623      	moveq	r3, r4
 800be70:	2c10      	cmp	r4, #16
 800be72:	9305      	str	r3, [sp, #20]
 800be74:	46a0      	mov	r8, r4
 800be76:	bfa8      	it	ge
 800be78:	f04f 0810 	movge.w	r8, #16
 800be7c:	f7f4 fb42 	bl	8000504 <__aeabi_ui2d>
 800be80:	2c09      	cmp	r4, #9
 800be82:	4682      	mov	sl, r0
 800be84:	468b      	mov	fp, r1
 800be86:	dc13      	bgt.n	800beb0 <_strtod_l+0x3d0>
 800be88:	9b06      	ldr	r3, [sp, #24]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	f43f ae67 	beq.w	800bb5e <_strtod_l+0x7e>
 800be90:	9b06      	ldr	r3, [sp, #24]
 800be92:	dd7a      	ble.n	800bf8a <_strtod_l+0x4aa>
 800be94:	2b16      	cmp	r3, #22
 800be96:	dc61      	bgt.n	800bf5c <_strtod_l+0x47c>
 800be98:	4a75      	ldr	r2, [pc, #468]	; (800c070 <_strtod_l+0x590>)
 800be9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800be9e:	e9de 0100 	ldrd	r0, r1, [lr]
 800bea2:	4652      	mov	r2, sl
 800bea4:	465b      	mov	r3, fp
 800bea6:	f7f4 fba7 	bl	80005f8 <__aeabi_dmul>
 800beaa:	4682      	mov	sl, r0
 800beac:	468b      	mov	fp, r1
 800beae:	e656      	b.n	800bb5e <_strtod_l+0x7e>
 800beb0:	4b6f      	ldr	r3, [pc, #444]	; (800c070 <_strtod_l+0x590>)
 800beb2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800beb6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800beba:	f7f4 fb9d 	bl	80005f8 <__aeabi_dmul>
 800bebe:	4606      	mov	r6, r0
 800bec0:	4628      	mov	r0, r5
 800bec2:	460f      	mov	r7, r1
 800bec4:	f7f4 fb1e 	bl	8000504 <__aeabi_ui2d>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	4630      	mov	r0, r6
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 f9dc 	bl	800028c <__adddf3>
 800bed4:	2c0f      	cmp	r4, #15
 800bed6:	4682      	mov	sl, r0
 800bed8:	468b      	mov	fp, r1
 800beda:	ddd5      	ble.n	800be88 <_strtod_l+0x3a8>
 800bedc:	9b06      	ldr	r3, [sp, #24]
 800bede:	eba4 0808 	sub.w	r8, r4, r8
 800bee2:	4498      	add	r8, r3
 800bee4:	f1b8 0f00 	cmp.w	r8, #0
 800bee8:	f340 8096 	ble.w	800c018 <_strtod_l+0x538>
 800beec:	f018 030f 	ands.w	r3, r8, #15
 800bef0:	d00a      	beq.n	800bf08 <_strtod_l+0x428>
 800bef2:	495f      	ldr	r1, [pc, #380]	; (800c070 <_strtod_l+0x590>)
 800bef4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bef8:	4652      	mov	r2, sl
 800befa:	465b      	mov	r3, fp
 800befc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf00:	f7f4 fb7a 	bl	80005f8 <__aeabi_dmul>
 800bf04:	4682      	mov	sl, r0
 800bf06:	468b      	mov	fp, r1
 800bf08:	f038 080f 	bics.w	r8, r8, #15
 800bf0c:	d073      	beq.n	800bff6 <_strtod_l+0x516>
 800bf0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bf12:	dd47      	ble.n	800bfa4 <_strtod_l+0x4c4>
 800bf14:	2400      	movs	r4, #0
 800bf16:	46a0      	mov	r8, r4
 800bf18:	9407      	str	r4, [sp, #28]
 800bf1a:	9405      	str	r4, [sp, #20]
 800bf1c:	2322      	movs	r3, #34	; 0x22
 800bf1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c078 <_strtod_l+0x598>
 800bf22:	f8c9 3000 	str.w	r3, [r9]
 800bf26:	f04f 0a00 	mov.w	sl, #0
 800bf2a:	9b07      	ldr	r3, [sp, #28]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f43f ae16 	beq.w	800bb5e <_strtod_l+0x7e>
 800bf32:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bf34:	4648      	mov	r0, r9
 800bf36:	f002 f8d1 	bl	800e0dc <_Bfree>
 800bf3a:	9905      	ldr	r1, [sp, #20]
 800bf3c:	4648      	mov	r0, r9
 800bf3e:	f002 f8cd 	bl	800e0dc <_Bfree>
 800bf42:	4641      	mov	r1, r8
 800bf44:	4648      	mov	r0, r9
 800bf46:	f002 f8c9 	bl	800e0dc <_Bfree>
 800bf4a:	9907      	ldr	r1, [sp, #28]
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f002 f8c5 	bl	800e0dc <_Bfree>
 800bf52:	4621      	mov	r1, r4
 800bf54:	4648      	mov	r0, r9
 800bf56:	f002 f8c1 	bl	800e0dc <_Bfree>
 800bf5a:	e600      	b.n	800bb5e <_strtod_l+0x7e>
 800bf5c:	9a06      	ldr	r2, [sp, #24]
 800bf5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800bf62:	4293      	cmp	r3, r2
 800bf64:	dbba      	blt.n	800bedc <_strtod_l+0x3fc>
 800bf66:	4d42      	ldr	r5, [pc, #264]	; (800c070 <_strtod_l+0x590>)
 800bf68:	f1c4 040f 	rsb	r4, r4, #15
 800bf6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800bf70:	4652      	mov	r2, sl
 800bf72:	465b      	mov	r3, fp
 800bf74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf78:	f7f4 fb3e 	bl	80005f8 <__aeabi_dmul>
 800bf7c:	9b06      	ldr	r3, [sp, #24]
 800bf7e:	1b1c      	subs	r4, r3, r4
 800bf80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800bf84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf88:	e78d      	b.n	800bea6 <_strtod_l+0x3c6>
 800bf8a:	f113 0f16 	cmn.w	r3, #22
 800bf8e:	dba5      	blt.n	800bedc <_strtod_l+0x3fc>
 800bf90:	4a37      	ldr	r2, [pc, #220]	; (800c070 <_strtod_l+0x590>)
 800bf92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800bf96:	e9d2 2300 	ldrd	r2, r3, [r2]
 800bf9a:	4650      	mov	r0, sl
 800bf9c:	4659      	mov	r1, fp
 800bf9e:	f7f4 fc55 	bl	800084c <__aeabi_ddiv>
 800bfa2:	e782      	b.n	800beaa <_strtod_l+0x3ca>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4e33      	ldr	r6, [pc, #204]	; (800c074 <_strtod_l+0x594>)
 800bfa8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bfac:	4650      	mov	r0, sl
 800bfae:	4659      	mov	r1, fp
 800bfb0:	461d      	mov	r5, r3
 800bfb2:	f1b8 0f01 	cmp.w	r8, #1
 800bfb6:	dc21      	bgt.n	800bffc <_strtod_l+0x51c>
 800bfb8:	b10b      	cbz	r3, 800bfbe <_strtod_l+0x4de>
 800bfba:	4682      	mov	sl, r0
 800bfbc:	468b      	mov	fp, r1
 800bfbe:	4b2d      	ldr	r3, [pc, #180]	; (800c074 <_strtod_l+0x594>)
 800bfc0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bfc4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bfc8:	4652      	mov	r2, sl
 800bfca:	465b      	mov	r3, fp
 800bfcc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	4b28      	ldr	r3, [pc, #160]	; (800c078 <_strtod_l+0x598>)
 800bfd6:	460a      	mov	r2, r1
 800bfd8:	400b      	ands	r3, r1
 800bfda:	4928      	ldr	r1, [pc, #160]	; (800c07c <_strtod_l+0x59c>)
 800bfdc:	428b      	cmp	r3, r1
 800bfde:	4682      	mov	sl, r0
 800bfe0:	d898      	bhi.n	800bf14 <_strtod_l+0x434>
 800bfe2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bfe6:	428b      	cmp	r3, r1
 800bfe8:	bf86      	itte	hi
 800bfea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c084 <_strtod_l+0x5a4>
 800bfee:	f04f 3aff 	movhi.w	sl, #4294967295
 800bff2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bff6:	2300      	movs	r3, #0
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	e077      	b.n	800c0ec <_strtod_l+0x60c>
 800bffc:	f018 0f01 	tst.w	r8, #1
 800c000:	d006      	beq.n	800c010 <_strtod_l+0x530>
 800c002:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 faf5 	bl	80005f8 <__aeabi_dmul>
 800c00e:	2301      	movs	r3, #1
 800c010:	3501      	adds	r5, #1
 800c012:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c016:	e7cc      	b.n	800bfb2 <_strtod_l+0x4d2>
 800c018:	d0ed      	beq.n	800bff6 <_strtod_l+0x516>
 800c01a:	f1c8 0800 	rsb	r8, r8, #0
 800c01e:	f018 020f 	ands.w	r2, r8, #15
 800c022:	d00a      	beq.n	800c03a <_strtod_l+0x55a>
 800c024:	4b12      	ldr	r3, [pc, #72]	; (800c070 <_strtod_l+0x590>)
 800c026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c02a:	4650      	mov	r0, sl
 800c02c:	4659      	mov	r1, fp
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 fc0b 	bl	800084c <__aeabi_ddiv>
 800c036:	4682      	mov	sl, r0
 800c038:	468b      	mov	fp, r1
 800c03a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c03e:	d0da      	beq.n	800bff6 <_strtod_l+0x516>
 800c040:	f1b8 0f1f 	cmp.w	r8, #31
 800c044:	dd20      	ble.n	800c088 <_strtod_l+0x5a8>
 800c046:	2400      	movs	r4, #0
 800c048:	46a0      	mov	r8, r4
 800c04a:	9407      	str	r4, [sp, #28]
 800c04c:	9405      	str	r4, [sp, #20]
 800c04e:	2322      	movs	r3, #34	; 0x22
 800c050:	f04f 0a00 	mov.w	sl, #0
 800c054:	f04f 0b00 	mov.w	fp, #0
 800c058:	f8c9 3000 	str.w	r3, [r9]
 800c05c:	e765      	b.n	800bf2a <_strtod_l+0x44a>
 800c05e:	bf00      	nop
 800c060:	0800f1e9 	.word	0x0800f1e9
 800c064:	0800f273 	.word	0x0800f273
 800c068:	0800f1f1 	.word	0x0800f1f1
 800c06c:	0800f234 	.word	0x0800f234
 800c070:	0800f318 	.word	0x0800f318
 800c074:	0800f2f0 	.word	0x0800f2f0
 800c078:	7ff00000 	.word	0x7ff00000
 800c07c:	7ca00000 	.word	0x7ca00000
 800c080:	fff80000 	.word	0xfff80000
 800c084:	7fefffff 	.word	0x7fefffff
 800c088:	f018 0310 	ands.w	r3, r8, #16
 800c08c:	bf18      	it	ne
 800c08e:	236a      	movne	r3, #106	; 0x6a
 800c090:	4da0      	ldr	r5, [pc, #640]	; (800c314 <_strtod_l+0x834>)
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	4650      	mov	r0, sl
 800c096:	4659      	mov	r1, fp
 800c098:	2300      	movs	r3, #0
 800c09a:	f1b8 0f00 	cmp.w	r8, #0
 800c09e:	f300 810a 	bgt.w	800c2b6 <_strtod_l+0x7d6>
 800c0a2:	b10b      	cbz	r3, 800c0a8 <_strtod_l+0x5c8>
 800c0a4:	4682      	mov	sl, r0
 800c0a6:	468b      	mov	fp, r1
 800c0a8:	9b04      	ldr	r3, [sp, #16]
 800c0aa:	b1bb      	cbz	r3, 800c0dc <_strtod_l+0x5fc>
 800c0ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c0b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	4659      	mov	r1, fp
 800c0b8:	dd10      	ble.n	800c0dc <_strtod_l+0x5fc>
 800c0ba:	2b1f      	cmp	r3, #31
 800c0bc:	f340 8107 	ble.w	800c2ce <_strtod_l+0x7ee>
 800c0c0:	2b34      	cmp	r3, #52	; 0x34
 800c0c2:	bfde      	ittt	le
 800c0c4:	3b20      	suble	r3, #32
 800c0c6:	f04f 32ff 	movle.w	r2, #4294967295
 800c0ca:	fa02 f303 	lslle.w	r3, r2, r3
 800c0ce:	f04f 0a00 	mov.w	sl, #0
 800c0d2:	bfcc      	ite	gt
 800c0d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c0d8:	ea03 0b01 	andle.w	fp, r3, r1
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	4659      	mov	r1, fp
 800c0e4:	f7f4 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d1ac      	bne.n	800c046 <_strtod_l+0x566>
 800c0ec:	9b07      	ldr	r3, [sp, #28]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	9a05      	ldr	r2, [sp, #20]
 800c0f2:	9908      	ldr	r1, [sp, #32]
 800c0f4:	4623      	mov	r3, r4
 800c0f6:	4648      	mov	r0, r9
 800c0f8:	f002 f842 	bl	800e180 <__s2b>
 800c0fc:	9007      	str	r0, [sp, #28]
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f43f af08 	beq.w	800bf14 <_strtod_l+0x434>
 800c104:	9a06      	ldr	r2, [sp, #24]
 800c106:	9b06      	ldr	r3, [sp, #24]
 800c108:	2a00      	cmp	r2, #0
 800c10a:	f1c3 0300 	rsb	r3, r3, #0
 800c10e:	bfa8      	it	ge
 800c110:	2300      	movge	r3, #0
 800c112:	930e      	str	r3, [sp, #56]	; 0x38
 800c114:	2400      	movs	r4, #0
 800c116:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c11a:	9316      	str	r3, [sp, #88]	; 0x58
 800c11c:	46a0      	mov	r8, r4
 800c11e:	9b07      	ldr	r3, [sp, #28]
 800c120:	4648      	mov	r0, r9
 800c122:	6859      	ldr	r1, [r3, #4]
 800c124:	f001 ffa6 	bl	800e074 <_Balloc>
 800c128:	9005      	str	r0, [sp, #20]
 800c12a:	2800      	cmp	r0, #0
 800c12c:	f43f aef6 	beq.w	800bf1c <_strtod_l+0x43c>
 800c130:	9b07      	ldr	r3, [sp, #28]
 800c132:	691a      	ldr	r2, [r3, #16]
 800c134:	3202      	adds	r2, #2
 800c136:	f103 010c 	add.w	r1, r3, #12
 800c13a:	0092      	lsls	r2, r2, #2
 800c13c:	300c      	adds	r0, #12
 800c13e:	f7fe fdbd 	bl	800acbc <memcpy>
 800c142:	aa1e      	add	r2, sp, #120	; 0x78
 800c144:	a91d      	add	r1, sp, #116	; 0x74
 800c146:	ec4b ab10 	vmov	d0, sl, fp
 800c14a:	4648      	mov	r0, r9
 800c14c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c150:	f002 fad2 	bl	800e6f8 <__d2b>
 800c154:	901c      	str	r0, [sp, #112]	; 0x70
 800c156:	2800      	cmp	r0, #0
 800c158:	f43f aee0 	beq.w	800bf1c <_strtod_l+0x43c>
 800c15c:	2101      	movs	r1, #1
 800c15e:	4648      	mov	r0, r9
 800c160:	f002 f89a 	bl	800e298 <__i2b>
 800c164:	4680      	mov	r8, r0
 800c166:	2800      	cmp	r0, #0
 800c168:	f43f aed8 	beq.w	800bf1c <_strtod_l+0x43c>
 800c16c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c16e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c170:	2e00      	cmp	r6, #0
 800c172:	bfab      	itete	ge
 800c174:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c176:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c178:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c17a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c17c:	bfac      	ite	ge
 800c17e:	18f7      	addge	r7, r6, r3
 800c180:	1b9d      	sublt	r5, r3, r6
 800c182:	9b04      	ldr	r3, [sp, #16]
 800c184:	1af6      	subs	r6, r6, r3
 800c186:	4416      	add	r6, r2
 800c188:	4b63      	ldr	r3, [pc, #396]	; (800c318 <_strtod_l+0x838>)
 800c18a:	3e01      	subs	r6, #1
 800c18c:	429e      	cmp	r6, r3
 800c18e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c192:	f280 80af 	bge.w	800c2f4 <_strtod_l+0x814>
 800c196:	1b9b      	subs	r3, r3, r6
 800c198:	2b1f      	cmp	r3, #31
 800c19a:	eba2 0203 	sub.w	r2, r2, r3
 800c19e:	f04f 0101 	mov.w	r1, #1
 800c1a2:	f300 809b 	bgt.w	800c2dc <_strtod_l+0x7fc>
 800c1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1aa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c1b0:	18be      	adds	r6, r7, r2
 800c1b2:	9b04      	ldr	r3, [sp, #16]
 800c1b4:	42b7      	cmp	r7, r6
 800c1b6:	4415      	add	r5, r2
 800c1b8:	441d      	add	r5, r3
 800c1ba:	463b      	mov	r3, r7
 800c1bc:	bfa8      	it	ge
 800c1be:	4633      	movge	r3, r6
 800c1c0:	42ab      	cmp	r3, r5
 800c1c2:	bfa8      	it	ge
 800c1c4:	462b      	movge	r3, r5
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bfc2      	ittt	gt
 800c1ca:	1af6      	subgt	r6, r6, r3
 800c1cc:	1aed      	subgt	r5, r5, r3
 800c1ce:	1aff      	subgt	r7, r7, r3
 800c1d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1d2:	b1bb      	cbz	r3, 800c204 <_strtod_l+0x724>
 800c1d4:	4641      	mov	r1, r8
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4648      	mov	r0, r9
 800c1da:	f002 f8fd 	bl	800e3d8 <__pow5mult>
 800c1de:	4680      	mov	r8, r0
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f43f ae9b 	beq.w	800bf1c <_strtod_l+0x43c>
 800c1e6:	4601      	mov	r1, r0
 800c1e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c1ea:	4648      	mov	r0, r9
 800c1ec:	f002 f85d 	bl	800e2aa <__multiply>
 800c1f0:	900c      	str	r0, [sp, #48]	; 0x30
 800c1f2:	2800      	cmp	r0, #0
 800c1f4:	f43f ae92 	beq.w	800bf1c <_strtod_l+0x43c>
 800c1f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1fa:	4648      	mov	r0, r9
 800c1fc:	f001 ff6e 	bl	800e0dc <_Bfree>
 800c200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c202:	931c      	str	r3, [sp, #112]	; 0x70
 800c204:	2e00      	cmp	r6, #0
 800c206:	dc7a      	bgt.n	800c2fe <_strtod_l+0x81e>
 800c208:	9b06      	ldr	r3, [sp, #24]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	dd08      	ble.n	800c220 <_strtod_l+0x740>
 800c20e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c210:	9905      	ldr	r1, [sp, #20]
 800c212:	4648      	mov	r0, r9
 800c214:	f002 f8e0 	bl	800e3d8 <__pow5mult>
 800c218:	9005      	str	r0, [sp, #20]
 800c21a:	2800      	cmp	r0, #0
 800c21c:	f43f ae7e 	beq.w	800bf1c <_strtod_l+0x43c>
 800c220:	2d00      	cmp	r5, #0
 800c222:	dd08      	ble.n	800c236 <_strtod_l+0x756>
 800c224:	462a      	mov	r2, r5
 800c226:	9905      	ldr	r1, [sp, #20]
 800c228:	4648      	mov	r0, r9
 800c22a:	f002 f923 	bl	800e474 <__lshift>
 800c22e:	9005      	str	r0, [sp, #20]
 800c230:	2800      	cmp	r0, #0
 800c232:	f43f ae73 	beq.w	800bf1c <_strtod_l+0x43c>
 800c236:	2f00      	cmp	r7, #0
 800c238:	dd08      	ble.n	800c24c <_strtod_l+0x76c>
 800c23a:	4641      	mov	r1, r8
 800c23c:	463a      	mov	r2, r7
 800c23e:	4648      	mov	r0, r9
 800c240:	f002 f918 	bl	800e474 <__lshift>
 800c244:	4680      	mov	r8, r0
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f ae68 	beq.w	800bf1c <_strtod_l+0x43c>
 800c24c:	9a05      	ldr	r2, [sp, #20]
 800c24e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c250:	4648      	mov	r0, r9
 800c252:	f002 f97d 	bl	800e550 <__mdiff>
 800c256:	4604      	mov	r4, r0
 800c258:	2800      	cmp	r0, #0
 800c25a:	f43f ae5f 	beq.w	800bf1c <_strtod_l+0x43c>
 800c25e:	68c3      	ldr	r3, [r0, #12]
 800c260:	930c      	str	r3, [sp, #48]	; 0x30
 800c262:	2300      	movs	r3, #0
 800c264:	60c3      	str	r3, [r0, #12]
 800c266:	4641      	mov	r1, r8
 800c268:	f002 f958 	bl	800e51c <__mcmp>
 800c26c:	2800      	cmp	r0, #0
 800c26e:	da55      	bge.n	800c31c <_strtod_l+0x83c>
 800c270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c272:	b9e3      	cbnz	r3, 800c2ae <_strtod_l+0x7ce>
 800c274:	f1ba 0f00 	cmp.w	sl, #0
 800c278:	d119      	bne.n	800c2ae <_strtod_l+0x7ce>
 800c27a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c27e:	b9b3      	cbnz	r3, 800c2ae <_strtod_l+0x7ce>
 800c280:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c284:	0d1b      	lsrs	r3, r3, #20
 800c286:	051b      	lsls	r3, r3, #20
 800c288:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c28c:	d90f      	bls.n	800c2ae <_strtod_l+0x7ce>
 800c28e:	6963      	ldr	r3, [r4, #20]
 800c290:	b913      	cbnz	r3, 800c298 <_strtod_l+0x7b8>
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	2b01      	cmp	r3, #1
 800c296:	dd0a      	ble.n	800c2ae <_strtod_l+0x7ce>
 800c298:	4621      	mov	r1, r4
 800c29a:	2201      	movs	r2, #1
 800c29c:	4648      	mov	r0, r9
 800c29e:	f002 f8e9 	bl	800e474 <__lshift>
 800c2a2:	4641      	mov	r1, r8
 800c2a4:	4604      	mov	r4, r0
 800c2a6:	f002 f939 	bl	800e51c <__mcmp>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	dc67      	bgt.n	800c37e <_strtod_l+0x89e>
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d171      	bne.n	800c398 <_strtod_l+0x8b8>
 800c2b4:	e63d      	b.n	800bf32 <_strtod_l+0x452>
 800c2b6:	f018 0f01 	tst.w	r8, #1
 800c2ba:	d004      	beq.n	800c2c6 <_strtod_l+0x7e6>
 800c2bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2ca:	3508      	adds	r5, #8
 800c2cc:	e6e5      	b.n	800c09a <_strtod_l+0x5ba>
 800c2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d6:	ea03 0a0a 	and.w	sl, r3, sl
 800c2da:	e6ff      	b.n	800c0dc <_strtod_l+0x5fc>
 800c2dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c2e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c2e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c2e8:	36e2      	adds	r6, #226	; 0xe2
 800c2ea:	fa01 f306 	lsl.w	r3, r1, r6
 800c2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c2f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800c2f2:	e75d      	b.n	800c1b0 <_strtod_l+0x6d0>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2fc:	e758      	b.n	800c1b0 <_strtod_l+0x6d0>
 800c2fe:	4632      	mov	r2, r6
 800c300:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c302:	4648      	mov	r0, r9
 800c304:	f002 f8b6 	bl	800e474 <__lshift>
 800c308:	901c      	str	r0, [sp, #112]	; 0x70
 800c30a:	2800      	cmp	r0, #0
 800c30c:	f47f af7c 	bne.w	800c208 <_strtod_l+0x728>
 800c310:	e604      	b.n	800bf1c <_strtod_l+0x43c>
 800c312:	bf00      	nop
 800c314:	0800f248 	.word	0x0800f248
 800c318:	fffffc02 	.word	0xfffffc02
 800c31c:	465d      	mov	r5, fp
 800c31e:	f040 8086 	bne.w	800c42e <_strtod_l+0x94e>
 800c322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c324:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c328:	b32a      	cbz	r2, 800c376 <_strtod_l+0x896>
 800c32a:	4aaf      	ldr	r2, [pc, #700]	; (800c5e8 <_strtod_l+0xb08>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d153      	bne.n	800c3d8 <_strtod_l+0x8f8>
 800c330:	9b04      	ldr	r3, [sp, #16]
 800c332:	4650      	mov	r0, sl
 800c334:	b1d3      	cbz	r3, 800c36c <_strtod_l+0x88c>
 800c336:	4aad      	ldr	r2, [pc, #692]	; (800c5ec <_strtod_l+0xb0c>)
 800c338:	402a      	ands	r2, r5
 800c33a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c33e:	f04f 31ff 	mov.w	r1, #4294967295
 800c342:	d816      	bhi.n	800c372 <_strtod_l+0x892>
 800c344:	0d12      	lsrs	r2, r2, #20
 800c346:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c34a:	fa01 f303 	lsl.w	r3, r1, r3
 800c34e:	4298      	cmp	r0, r3
 800c350:	d142      	bne.n	800c3d8 <_strtod_l+0x8f8>
 800c352:	4ba7      	ldr	r3, [pc, #668]	; (800c5f0 <_strtod_l+0xb10>)
 800c354:	429d      	cmp	r5, r3
 800c356:	d102      	bne.n	800c35e <_strtod_l+0x87e>
 800c358:	3001      	adds	r0, #1
 800c35a:	f43f addf 	beq.w	800bf1c <_strtod_l+0x43c>
 800c35e:	4ba3      	ldr	r3, [pc, #652]	; (800c5ec <_strtod_l+0xb0c>)
 800c360:	402b      	ands	r3, r5
 800c362:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c366:	f04f 0a00 	mov.w	sl, #0
 800c36a:	e7a0      	b.n	800c2ae <_strtod_l+0x7ce>
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295
 800c370:	e7ed      	b.n	800c34e <_strtod_l+0x86e>
 800c372:	460b      	mov	r3, r1
 800c374:	e7eb      	b.n	800c34e <_strtod_l+0x86e>
 800c376:	bb7b      	cbnz	r3, 800c3d8 <_strtod_l+0x8f8>
 800c378:	f1ba 0f00 	cmp.w	sl, #0
 800c37c:	d12c      	bne.n	800c3d8 <_strtod_l+0x8f8>
 800c37e:	9904      	ldr	r1, [sp, #16]
 800c380:	4a9a      	ldr	r2, [pc, #616]	; (800c5ec <_strtod_l+0xb0c>)
 800c382:	465b      	mov	r3, fp
 800c384:	b1f1      	cbz	r1, 800c3c4 <_strtod_l+0x8e4>
 800c386:	ea02 010b 	and.w	r1, r2, fp
 800c38a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c38e:	dc19      	bgt.n	800c3c4 <_strtod_l+0x8e4>
 800c390:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c394:	f77f ae5b 	ble.w	800c04e <_strtod_l+0x56e>
 800c398:	4a96      	ldr	r2, [pc, #600]	; (800c5f4 <_strtod_l+0xb14>)
 800c39a:	2300      	movs	r3, #0
 800c39c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c3a0:	4650      	mov	r0, sl
 800c3a2:	4659      	mov	r1, fp
 800c3a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c3a8:	f7f4 f926 	bl	80005f8 <__aeabi_dmul>
 800c3ac:	4682      	mov	sl, r0
 800c3ae:	468b      	mov	fp, r1
 800c3b0:	2900      	cmp	r1, #0
 800c3b2:	f47f adbe 	bne.w	800bf32 <_strtod_l+0x452>
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	f47f adbb 	bne.w	800bf32 <_strtod_l+0x452>
 800c3bc:	2322      	movs	r3, #34	; 0x22
 800c3be:	f8c9 3000 	str.w	r3, [r9]
 800c3c2:	e5b6      	b.n	800bf32 <_strtod_l+0x452>
 800c3c4:	4013      	ands	r3, r2
 800c3c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c3ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c3ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c3d2:	f04f 3aff 	mov.w	sl, #4294967295
 800c3d6:	e76a      	b.n	800c2ae <_strtod_l+0x7ce>
 800c3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3da:	b193      	cbz	r3, 800c402 <_strtod_l+0x922>
 800c3dc:	422b      	tst	r3, r5
 800c3de:	f43f af66 	beq.w	800c2ae <_strtod_l+0x7ce>
 800c3e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3e4:	9a04      	ldr	r2, [sp, #16]
 800c3e6:	4650      	mov	r0, sl
 800c3e8:	4659      	mov	r1, fp
 800c3ea:	b173      	cbz	r3, 800c40a <_strtod_l+0x92a>
 800c3ec:	f7ff fb5a 	bl	800baa4 <sulp>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	460b      	mov	r3, r1
 800c3f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	468b      	mov	fp, r1
 800c400:	e755      	b.n	800c2ae <_strtod_l+0x7ce>
 800c402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c404:	ea13 0f0a 	tst.w	r3, sl
 800c408:	e7e9      	b.n	800c3de <_strtod_l+0x8fe>
 800c40a:	f7ff fb4b 	bl	800baa4 <sulp>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c416:	f7f3 ff37 	bl	8000288 <__aeabi_dsub>
 800c41a:	2200      	movs	r2, #0
 800c41c:	2300      	movs	r3, #0
 800c41e:	4682      	mov	sl, r0
 800c420:	468b      	mov	fp, r1
 800c422:	f7f4 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 800c426:	2800      	cmp	r0, #0
 800c428:	f47f ae11 	bne.w	800c04e <_strtod_l+0x56e>
 800c42c:	e73f      	b.n	800c2ae <_strtod_l+0x7ce>
 800c42e:	4641      	mov	r1, r8
 800c430:	4620      	mov	r0, r4
 800c432:	f002 f9b0 	bl	800e796 <__ratio>
 800c436:	ec57 6b10 	vmov	r6, r7, d0
 800c43a:	2200      	movs	r2, #0
 800c43c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c440:	ee10 0a10 	vmov	r0, s0
 800c444:	4639      	mov	r1, r7
 800c446:	f7f4 fb53 	bl	8000af0 <__aeabi_dcmple>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	d077      	beq.n	800c53e <_strtod_l+0xa5e>
 800c44e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c450:	2b00      	cmp	r3, #0
 800c452:	d04a      	beq.n	800c4ea <_strtod_l+0xa0a>
 800c454:	4b68      	ldr	r3, [pc, #416]	; (800c5f8 <_strtod_l+0xb18>)
 800c456:	2200      	movs	r2, #0
 800c458:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c45c:	4f66      	ldr	r7, [pc, #408]	; (800c5f8 <_strtod_l+0xb18>)
 800c45e:	2600      	movs	r6, #0
 800c460:	4b62      	ldr	r3, [pc, #392]	; (800c5ec <_strtod_l+0xb0c>)
 800c462:	402b      	ands	r3, r5
 800c464:	930f      	str	r3, [sp, #60]	; 0x3c
 800c466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c468:	4b64      	ldr	r3, [pc, #400]	; (800c5fc <_strtod_l+0xb1c>)
 800c46a:	429a      	cmp	r2, r3
 800c46c:	f040 80ce 	bne.w	800c60c <_strtod_l+0xb2c>
 800c470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c474:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c478:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c47c:	ec4b ab10 	vmov	d0, sl, fp
 800c480:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c484:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c488:	f002 f8c0 	bl	800e60c <__ulp>
 800c48c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c490:	ec53 2b10 	vmov	r2, r3, d0
 800c494:	f7f4 f8b0 	bl	80005f8 <__aeabi_dmul>
 800c498:	4652      	mov	r2, sl
 800c49a:	465b      	mov	r3, fp
 800c49c:	f7f3 fef6 	bl	800028c <__adddf3>
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	4952      	ldr	r1, [pc, #328]	; (800c5ec <_strtod_l+0xb0c>)
 800c4a4:	4a56      	ldr	r2, [pc, #344]	; (800c600 <_strtod_l+0xb20>)
 800c4a6:	4019      	ands	r1, r3
 800c4a8:	4291      	cmp	r1, r2
 800c4aa:	4682      	mov	sl, r0
 800c4ac:	d95b      	bls.n	800c566 <_strtod_l+0xa86>
 800c4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d103      	bne.n	800c4c0 <_strtod_l+0x9e0>
 800c4b8:	9b08      	ldr	r3, [sp, #32]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	f43f ad2e 	beq.w	800bf1c <_strtod_l+0x43c>
 800c4c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c5f0 <_strtod_l+0xb10>
 800c4c4:	f04f 3aff 	mov.w	sl, #4294967295
 800c4c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4ca:	4648      	mov	r0, r9
 800c4cc:	f001 fe06 	bl	800e0dc <_Bfree>
 800c4d0:	9905      	ldr	r1, [sp, #20]
 800c4d2:	4648      	mov	r0, r9
 800c4d4:	f001 fe02 	bl	800e0dc <_Bfree>
 800c4d8:	4641      	mov	r1, r8
 800c4da:	4648      	mov	r0, r9
 800c4dc:	f001 fdfe 	bl	800e0dc <_Bfree>
 800c4e0:	4621      	mov	r1, r4
 800c4e2:	4648      	mov	r0, r9
 800c4e4:	f001 fdfa 	bl	800e0dc <_Bfree>
 800c4e8:	e619      	b.n	800c11e <_strtod_l+0x63e>
 800c4ea:	f1ba 0f00 	cmp.w	sl, #0
 800c4ee:	d11a      	bne.n	800c526 <_strtod_l+0xa46>
 800c4f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4f4:	b9eb      	cbnz	r3, 800c532 <_strtod_l+0xa52>
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4b3f      	ldr	r3, [pc, #252]	; (800c5f8 <_strtod_l+0xb18>)
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	4639      	mov	r1, r7
 800c4fe:	f7f4 faed 	bl	8000adc <__aeabi_dcmplt>
 800c502:	b9c8      	cbnz	r0, 800c538 <_strtod_l+0xa58>
 800c504:	4630      	mov	r0, r6
 800c506:	4639      	mov	r1, r7
 800c508:	2200      	movs	r2, #0
 800c50a:	4b3e      	ldr	r3, [pc, #248]	; (800c604 <_strtod_l+0xb24>)
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	4606      	mov	r6, r0
 800c512:	460f      	mov	r7, r1
 800c514:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c518:	9618      	str	r6, [sp, #96]	; 0x60
 800c51a:	9319      	str	r3, [sp, #100]	; 0x64
 800c51c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c520:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c524:	e79c      	b.n	800c460 <_strtod_l+0x980>
 800c526:	f1ba 0f01 	cmp.w	sl, #1
 800c52a:	d102      	bne.n	800c532 <_strtod_l+0xa52>
 800c52c:	2d00      	cmp	r5, #0
 800c52e:	f43f ad8e 	beq.w	800c04e <_strtod_l+0x56e>
 800c532:	2200      	movs	r2, #0
 800c534:	4b34      	ldr	r3, [pc, #208]	; (800c608 <_strtod_l+0xb28>)
 800c536:	e78f      	b.n	800c458 <_strtod_l+0x978>
 800c538:	2600      	movs	r6, #0
 800c53a:	4f32      	ldr	r7, [pc, #200]	; (800c604 <_strtod_l+0xb24>)
 800c53c:	e7ea      	b.n	800c514 <_strtod_l+0xa34>
 800c53e:	4b31      	ldr	r3, [pc, #196]	; (800c604 <_strtod_l+0xb24>)
 800c540:	4630      	mov	r0, r6
 800c542:	4639      	mov	r1, r7
 800c544:	2200      	movs	r2, #0
 800c546:	f7f4 f857 	bl	80005f8 <__aeabi_dmul>
 800c54a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c54c:	4606      	mov	r6, r0
 800c54e:	460f      	mov	r7, r1
 800c550:	b933      	cbnz	r3, 800c560 <_strtod_l+0xa80>
 800c552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c556:	9010      	str	r0, [sp, #64]	; 0x40
 800c558:	9311      	str	r3, [sp, #68]	; 0x44
 800c55a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c55e:	e7df      	b.n	800c520 <_strtod_l+0xa40>
 800c560:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c564:	e7f9      	b.n	800c55a <_strtod_l+0xa7a>
 800c566:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1ab      	bne.n	800c4c8 <_strtod_l+0x9e8>
 800c570:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c574:	0d1b      	lsrs	r3, r3, #20
 800c576:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c578:	051b      	lsls	r3, r3, #20
 800c57a:	429a      	cmp	r2, r3
 800c57c:	465d      	mov	r5, fp
 800c57e:	d1a3      	bne.n	800c4c8 <_strtod_l+0x9e8>
 800c580:	4639      	mov	r1, r7
 800c582:	4630      	mov	r0, r6
 800c584:	f7f4 fae8 	bl	8000b58 <__aeabi_d2iz>
 800c588:	f7f3 ffcc 	bl	8000524 <__aeabi_i2d>
 800c58c:	460b      	mov	r3, r1
 800c58e:	4602      	mov	r2, r0
 800c590:	4639      	mov	r1, r7
 800c592:	4630      	mov	r0, r6
 800c594:	f7f3 fe78 	bl	8000288 <__aeabi_dsub>
 800c598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c59a:	4606      	mov	r6, r0
 800c59c:	460f      	mov	r7, r1
 800c59e:	b933      	cbnz	r3, 800c5ae <_strtod_l+0xace>
 800c5a0:	f1ba 0f00 	cmp.w	sl, #0
 800c5a4:	d103      	bne.n	800c5ae <_strtod_l+0xace>
 800c5a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c5aa:	2d00      	cmp	r5, #0
 800c5ac:	d06d      	beq.n	800c68a <_strtod_l+0xbaa>
 800c5ae:	a30a      	add	r3, pc, #40	; (adr r3, 800c5d8 <_strtod_l+0xaf8>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	4639      	mov	r1, r7
 800c5b8:	f7f4 fa90 	bl	8000adc <__aeabi_dcmplt>
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	f47f acb8 	bne.w	800bf32 <_strtod_l+0x452>
 800c5c2:	a307      	add	r3, pc, #28	; (adr r3, 800c5e0 <_strtod_l+0xb00>)
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	f7f4 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	f43f af79 	beq.w	800c4c8 <_strtod_l+0x9e8>
 800c5d6:	e4ac      	b.n	800bf32 <_strtod_l+0x452>
 800c5d8:	94a03595 	.word	0x94a03595
 800c5dc:	3fdfffff 	.word	0x3fdfffff
 800c5e0:	35afe535 	.word	0x35afe535
 800c5e4:	3fe00000 	.word	0x3fe00000
 800c5e8:	000fffff 	.word	0x000fffff
 800c5ec:	7ff00000 	.word	0x7ff00000
 800c5f0:	7fefffff 	.word	0x7fefffff
 800c5f4:	39500000 	.word	0x39500000
 800c5f8:	3ff00000 	.word	0x3ff00000
 800c5fc:	7fe00000 	.word	0x7fe00000
 800c600:	7c9fffff 	.word	0x7c9fffff
 800c604:	3fe00000 	.word	0x3fe00000
 800c608:	bff00000 	.word	0xbff00000
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	b333      	cbz	r3, 800c65e <_strtod_l+0xb7e>
 800c610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c612:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c616:	d822      	bhi.n	800c65e <_strtod_l+0xb7e>
 800c618:	a327      	add	r3, pc, #156	; (adr r3, 800c6b8 <_strtod_l+0xbd8>)
 800c61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61e:	4630      	mov	r0, r6
 800c620:	4639      	mov	r1, r7
 800c622:	f7f4 fa65 	bl	8000af0 <__aeabi_dcmple>
 800c626:	b1a0      	cbz	r0, 800c652 <_strtod_l+0xb72>
 800c628:	4639      	mov	r1, r7
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7f4 fabc 	bl	8000ba8 <__aeabi_d2uiz>
 800c630:	2800      	cmp	r0, #0
 800c632:	bf08      	it	eq
 800c634:	2001      	moveq	r0, #1
 800c636:	f7f3 ff65 	bl	8000504 <__aeabi_ui2d>
 800c63a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c63c:	4606      	mov	r6, r0
 800c63e:	460f      	mov	r7, r1
 800c640:	bb03      	cbnz	r3, 800c684 <_strtod_l+0xba4>
 800c642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c646:	9012      	str	r0, [sp, #72]	; 0x48
 800c648:	9313      	str	r3, [sp, #76]	; 0x4c
 800c64a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c64e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c656:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c65a:	1a9b      	subs	r3, r3, r2
 800c65c:	930b      	str	r3, [sp, #44]	; 0x2c
 800c65e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c662:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c666:	f001 ffd1 	bl	800e60c <__ulp>
 800c66a:	4650      	mov	r0, sl
 800c66c:	ec53 2b10 	vmov	r2, r3, d0
 800c670:	4659      	mov	r1, fp
 800c672:	f7f3 ffc1 	bl	80005f8 <__aeabi_dmul>
 800c676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c67a:	f7f3 fe07 	bl	800028c <__adddf3>
 800c67e:	4682      	mov	sl, r0
 800c680:	468b      	mov	fp, r1
 800c682:	e772      	b.n	800c56a <_strtod_l+0xa8a>
 800c684:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c688:	e7df      	b.n	800c64a <_strtod_l+0xb6a>
 800c68a:	a30d      	add	r3, pc, #52	; (adr r3, 800c6c0 <_strtod_l+0xbe0>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f4 fa24 	bl	8000adc <__aeabi_dcmplt>
 800c694:	e79c      	b.n	800c5d0 <_strtod_l+0xaf0>
 800c696:	2300      	movs	r3, #0
 800c698:	930d      	str	r3, [sp, #52]	; 0x34
 800c69a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c69c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	f7ff ba61 	b.w	800bb66 <_strtod_l+0x86>
 800c6a4:	2b65      	cmp	r3, #101	; 0x65
 800c6a6:	f04f 0200 	mov.w	r2, #0
 800c6aa:	f43f ab4e 	beq.w	800bd4a <_strtod_l+0x26a>
 800c6ae:	2101      	movs	r1, #1
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	9104      	str	r1, [sp, #16]
 800c6b4:	f7ff bacb 	b.w	800bc4e <_strtod_l+0x16e>
 800c6b8:	ffc00000 	.word	0xffc00000
 800c6bc:	41dfffff 	.word	0x41dfffff
 800c6c0:	94a03595 	.word	0x94a03595
 800c6c4:	3fcfffff 	.word	0x3fcfffff

0800c6c8 <_strtod_r>:
 800c6c8:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <_strtod_r+0x18>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	b410      	push	{r4}
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	4c04      	ldr	r4, [pc, #16]	; (800c6e4 <_strtod_r+0x1c>)
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	bf08      	it	eq
 800c6d6:	4623      	moveq	r3, r4
 800c6d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6dc:	f7ff ba00 	b.w	800bae0 <_strtod_l>
 800c6e0:	20000040 	.word	0x20000040
 800c6e4:	200000a4 	.word	0x200000a4

0800c6e8 <_strtol_l.isra.0>:
 800c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ec:	4680      	mov	r8, r0
 800c6ee:	4689      	mov	r9, r1
 800c6f0:	4692      	mov	sl, r2
 800c6f2:	461e      	mov	r6, r3
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	463d      	mov	r5, r7
 800c6f8:	9808      	ldr	r0, [sp, #32]
 800c6fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c6fe:	f001 fc27 	bl	800df50 <__locale_ctype_ptr_l>
 800c702:	4420      	add	r0, r4
 800c704:	7843      	ldrb	r3, [r0, #1]
 800c706:	f013 0308 	ands.w	r3, r3, #8
 800c70a:	d132      	bne.n	800c772 <_strtol_l.isra.0+0x8a>
 800c70c:	2c2d      	cmp	r4, #45	; 0x2d
 800c70e:	d132      	bne.n	800c776 <_strtol_l.isra.0+0x8e>
 800c710:	787c      	ldrb	r4, [r7, #1]
 800c712:	1cbd      	adds	r5, r7, #2
 800c714:	2201      	movs	r2, #1
 800c716:	2e00      	cmp	r6, #0
 800c718:	d05d      	beq.n	800c7d6 <_strtol_l.isra.0+0xee>
 800c71a:	2e10      	cmp	r6, #16
 800c71c:	d109      	bne.n	800c732 <_strtol_l.isra.0+0x4a>
 800c71e:	2c30      	cmp	r4, #48	; 0x30
 800c720:	d107      	bne.n	800c732 <_strtol_l.isra.0+0x4a>
 800c722:	782b      	ldrb	r3, [r5, #0]
 800c724:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c728:	2b58      	cmp	r3, #88	; 0x58
 800c72a:	d14f      	bne.n	800c7cc <_strtol_l.isra.0+0xe4>
 800c72c:	786c      	ldrb	r4, [r5, #1]
 800c72e:	2610      	movs	r6, #16
 800c730:	3502      	adds	r5, #2
 800c732:	2a00      	cmp	r2, #0
 800c734:	bf14      	ite	ne
 800c736:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c73a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c73e:	2700      	movs	r7, #0
 800c740:	fbb1 fcf6 	udiv	ip, r1, r6
 800c744:	4638      	mov	r0, r7
 800c746:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c74a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c74e:	2b09      	cmp	r3, #9
 800c750:	d817      	bhi.n	800c782 <_strtol_l.isra.0+0x9a>
 800c752:	461c      	mov	r4, r3
 800c754:	42a6      	cmp	r6, r4
 800c756:	dd23      	ble.n	800c7a0 <_strtol_l.isra.0+0xb8>
 800c758:	1c7b      	adds	r3, r7, #1
 800c75a:	d007      	beq.n	800c76c <_strtol_l.isra.0+0x84>
 800c75c:	4584      	cmp	ip, r0
 800c75e:	d31c      	bcc.n	800c79a <_strtol_l.isra.0+0xb2>
 800c760:	d101      	bne.n	800c766 <_strtol_l.isra.0+0x7e>
 800c762:	45a6      	cmp	lr, r4
 800c764:	db19      	blt.n	800c79a <_strtol_l.isra.0+0xb2>
 800c766:	fb00 4006 	mla	r0, r0, r6, r4
 800c76a:	2701      	movs	r7, #1
 800c76c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c770:	e7eb      	b.n	800c74a <_strtol_l.isra.0+0x62>
 800c772:	462f      	mov	r7, r5
 800c774:	e7bf      	b.n	800c6f6 <_strtol_l.isra.0+0xe>
 800c776:	2c2b      	cmp	r4, #43	; 0x2b
 800c778:	bf04      	itt	eq
 800c77a:	1cbd      	addeq	r5, r7, #2
 800c77c:	787c      	ldrbeq	r4, [r7, #1]
 800c77e:	461a      	mov	r2, r3
 800c780:	e7c9      	b.n	800c716 <_strtol_l.isra.0+0x2e>
 800c782:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c786:	2b19      	cmp	r3, #25
 800c788:	d801      	bhi.n	800c78e <_strtol_l.isra.0+0xa6>
 800c78a:	3c37      	subs	r4, #55	; 0x37
 800c78c:	e7e2      	b.n	800c754 <_strtol_l.isra.0+0x6c>
 800c78e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c792:	2b19      	cmp	r3, #25
 800c794:	d804      	bhi.n	800c7a0 <_strtol_l.isra.0+0xb8>
 800c796:	3c57      	subs	r4, #87	; 0x57
 800c798:	e7dc      	b.n	800c754 <_strtol_l.isra.0+0x6c>
 800c79a:	f04f 37ff 	mov.w	r7, #4294967295
 800c79e:	e7e5      	b.n	800c76c <_strtol_l.isra.0+0x84>
 800c7a0:	1c7b      	adds	r3, r7, #1
 800c7a2:	d108      	bne.n	800c7b6 <_strtol_l.isra.0+0xce>
 800c7a4:	2322      	movs	r3, #34	; 0x22
 800c7a6:	f8c8 3000 	str.w	r3, [r8]
 800c7aa:	4608      	mov	r0, r1
 800c7ac:	f1ba 0f00 	cmp.w	sl, #0
 800c7b0:	d107      	bne.n	800c7c2 <_strtol_l.isra.0+0xda>
 800c7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b6:	b102      	cbz	r2, 800c7ba <_strtol_l.isra.0+0xd2>
 800c7b8:	4240      	negs	r0, r0
 800c7ba:	f1ba 0f00 	cmp.w	sl, #0
 800c7be:	d0f8      	beq.n	800c7b2 <_strtol_l.isra.0+0xca>
 800c7c0:	b10f      	cbz	r7, 800c7c6 <_strtol_l.isra.0+0xde>
 800c7c2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c7c6:	f8ca 9000 	str.w	r9, [sl]
 800c7ca:	e7f2      	b.n	800c7b2 <_strtol_l.isra.0+0xca>
 800c7cc:	2430      	movs	r4, #48	; 0x30
 800c7ce:	2e00      	cmp	r6, #0
 800c7d0:	d1af      	bne.n	800c732 <_strtol_l.isra.0+0x4a>
 800c7d2:	2608      	movs	r6, #8
 800c7d4:	e7ad      	b.n	800c732 <_strtol_l.isra.0+0x4a>
 800c7d6:	2c30      	cmp	r4, #48	; 0x30
 800c7d8:	d0a3      	beq.n	800c722 <_strtol_l.isra.0+0x3a>
 800c7da:	260a      	movs	r6, #10
 800c7dc:	e7a9      	b.n	800c732 <_strtol_l.isra.0+0x4a>
	...

0800c7e0 <_strtol_r>:
 800c7e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7e2:	4c06      	ldr	r4, [pc, #24]	; (800c7fc <_strtol_r+0x1c>)
 800c7e4:	4d06      	ldr	r5, [pc, #24]	; (800c800 <_strtol_r+0x20>)
 800c7e6:	6824      	ldr	r4, [r4, #0]
 800c7e8:	6a24      	ldr	r4, [r4, #32]
 800c7ea:	2c00      	cmp	r4, #0
 800c7ec:	bf08      	it	eq
 800c7ee:	462c      	moveq	r4, r5
 800c7f0:	9400      	str	r4, [sp, #0]
 800c7f2:	f7ff ff79 	bl	800c6e8 <_strtol_l.isra.0>
 800c7f6:	b003      	add	sp, #12
 800c7f8:	bd30      	pop	{r4, r5, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000040 	.word	0x20000040
 800c800:	200000a4 	.word	0x200000a4

0800c804 <__swbuf_r>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	460e      	mov	r6, r1
 800c808:	4614      	mov	r4, r2
 800c80a:	4605      	mov	r5, r0
 800c80c:	b118      	cbz	r0, 800c816 <__swbuf_r+0x12>
 800c80e:	6983      	ldr	r3, [r0, #24]
 800c810:	b90b      	cbnz	r3, 800c816 <__swbuf_r+0x12>
 800c812:	f000 ffed 	bl	800d7f0 <__sinit>
 800c816:	4b21      	ldr	r3, [pc, #132]	; (800c89c <__swbuf_r+0x98>)
 800c818:	429c      	cmp	r4, r3
 800c81a:	d12a      	bne.n	800c872 <__swbuf_r+0x6e>
 800c81c:	686c      	ldr	r4, [r5, #4]
 800c81e:	69a3      	ldr	r3, [r4, #24]
 800c820:	60a3      	str	r3, [r4, #8]
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	071a      	lsls	r2, r3, #28
 800c826:	d52e      	bpl.n	800c886 <__swbuf_r+0x82>
 800c828:	6923      	ldr	r3, [r4, #16]
 800c82a:	b363      	cbz	r3, 800c886 <__swbuf_r+0x82>
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	6820      	ldr	r0, [r4, #0]
 800c830:	1ac0      	subs	r0, r0, r3
 800c832:	6963      	ldr	r3, [r4, #20]
 800c834:	b2f6      	uxtb	r6, r6
 800c836:	4283      	cmp	r3, r0
 800c838:	4637      	mov	r7, r6
 800c83a:	dc04      	bgt.n	800c846 <__swbuf_r+0x42>
 800c83c:	4621      	mov	r1, r4
 800c83e:	4628      	mov	r0, r5
 800c840:	f000 ff6c 	bl	800d71c <_fflush_r>
 800c844:	bb28      	cbnz	r0, 800c892 <__swbuf_r+0x8e>
 800c846:	68a3      	ldr	r3, [r4, #8]
 800c848:	3b01      	subs	r3, #1
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	6022      	str	r2, [r4, #0]
 800c852:	701e      	strb	r6, [r3, #0]
 800c854:	6963      	ldr	r3, [r4, #20]
 800c856:	3001      	adds	r0, #1
 800c858:	4283      	cmp	r3, r0
 800c85a:	d004      	beq.n	800c866 <__swbuf_r+0x62>
 800c85c:	89a3      	ldrh	r3, [r4, #12]
 800c85e:	07db      	lsls	r3, r3, #31
 800c860:	d519      	bpl.n	800c896 <__swbuf_r+0x92>
 800c862:	2e0a      	cmp	r6, #10
 800c864:	d117      	bne.n	800c896 <__swbuf_r+0x92>
 800c866:	4621      	mov	r1, r4
 800c868:	4628      	mov	r0, r5
 800c86a:	f000 ff57 	bl	800d71c <_fflush_r>
 800c86e:	b190      	cbz	r0, 800c896 <__swbuf_r+0x92>
 800c870:	e00f      	b.n	800c892 <__swbuf_r+0x8e>
 800c872:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <__swbuf_r+0x9c>)
 800c874:	429c      	cmp	r4, r3
 800c876:	d101      	bne.n	800c87c <__swbuf_r+0x78>
 800c878:	68ac      	ldr	r4, [r5, #8]
 800c87a:	e7d0      	b.n	800c81e <__swbuf_r+0x1a>
 800c87c:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <__swbuf_r+0xa0>)
 800c87e:	429c      	cmp	r4, r3
 800c880:	bf08      	it	eq
 800c882:	68ec      	ldreq	r4, [r5, #12]
 800c884:	e7cb      	b.n	800c81e <__swbuf_r+0x1a>
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f000 f80d 	bl	800c8a8 <__swsetup_r>
 800c88e:	2800      	cmp	r0, #0
 800c890:	d0cc      	beq.n	800c82c <__swbuf_r+0x28>
 800c892:	f04f 37ff 	mov.w	r7, #4294967295
 800c896:	4638      	mov	r0, r7
 800c898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c89a:	bf00      	nop
 800c89c:	0800f2a0 	.word	0x0800f2a0
 800c8a0:	0800f2c0 	.word	0x0800f2c0
 800c8a4:	0800f280 	.word	0x0800f280

0800c8a8 <__swsetup_r>:
 800c8a8:	4b32      	ldr	r3, [pc, #200]	; (800c974 <__swsetup_r+0xcc>)
 800c8aa:	b570      	push	{r4, r5, r6, lr}
 800c8ac:	681d      	ldr	r5, [r3, #0]
 800c8ae:	4606      	mov	r6, r0
 800c8b0:	460c      	mov	r4, r1
 800c8b2:	b125      	cbz	r5, 800c8be <__swsetup_r+0x16>
 800c8b4:	69ab      	ldr	r3, [r5, #24]
 800c8b6:	b913      	cbnz	r3, 800c8be <__swsetup_r+0x16>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 ff99 	bl	800d7f0 <__sinit>
 800c8be:	4b2e      	ldr	r3, [pc, #184]	; (800c978 <__swsetup_r+0xd0>)
 800c8c0:	429c      	cmp	r4, r3
 800c8c2:	d10f      	bne.n	800c8e4 <__swsetup_r+0x3c>
 800c8c4:	686c      	ldr	r4, [r5, #4]
 800c8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	0715      	lsls	r5, r2, #28
 800c8ce:	d42c      	bmi.n	800c92a <__swsetup_r+0x82>
 800c8d0:	06d0      	lsls	r0, r2, #27
 800c8d2:	d411      	bmi.n	800c8f8 <__swsetup_r+0x50>
 800c8d4:	2209      	movs	r2, #9
 800c8d6:	6032      	str	r2, [r6, #0]
 800c8d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	e03e      	b.n	800c962 <__swsetup_r+0xba>
 800c8e4:	4b25      	ldr	r3, [pc, #148]	; (800c97c <__swsetup_r+0xd4>)
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	d101      	bne.n	800c8ee <__swsetup_r+0x46>
 800c8ea:	68ac      	ldr	r4, [r5, #8]
 800c8ec:	e7eb      	b.n	800c8c6 <__swsetup_r+0x1e>
 800c8ee:	4b24      	ldr	r3, [pc, #144]	; (800c980 <__swsetup_r+0xd8>)
 800c8f0:	429c      	cmp	r4, r3
 800c8f2:	bf08      	it	eq
 800c8f4:	68ec      	ldreq	r4, [r5, #12]
 800c8f6:	e7e6      	b.n	800c8c6 <__swsetup_r+0x1e>
 800c8f8:	0751      	lsls	r1, r2, #29
 800c8fa:	d512      	bpl.n	800c922 <__swsetup_r+0x7a>
 800c8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8fe:	b141      	cbz	r1, 800c912 <__swsetup_r+0x6a>
 800c900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c904:	4299      	cmp	r1, r3
 800c906:	d002      	beq.n	800c90e <__swsetup_r+0x66>
 800c908:	4630      	mov	r0, r6
 800c90a:	f001 ffc1 	bl	800e890 <_free_r>
 800c90e:	2300      	movs	r3, #0
 800c910:	6363      	str	r3, [r4, #52]	; 0x34
 800c912:	89a3      	ldrh	r3, [r4, #12]
 800c914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c918:	81a3      	strh	r3, [r4, #12]
 800c91a:	2300      	movs	r3, #0
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	89a3      	ldrh	r3, [r4, #12]
 800c924:	f043 0308 	orr.w	r3, r3, #8
 800c928:	81a3      	strh	r3, [r4, #12]
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	b94b      	cbnz	r3, 800c942 <__swsetup_r+0x9a>
 800c92e:	89a3      	ldrh	r3, [r4, #12]
 800c930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c938:	d003      	beq.n	800c942 <__swsetup_r+0x9a>
 800c93a:	4621      	mov	r1, r4
 800c93c:	4630      	mov	r0, r6
 800c93e:	f001 fb3f 	bl	800dfc0 <__smakebuf_r>
 800c942:	89a2      	ldrh	r2, [r4, #12]
 800c944:	f012 0301 	ands.w	r3, r2, #1
 800c948:	d00c      	beq.n	800c964 <__swsetup_r+0xbc>
 800c94a:	2300      	movs	r3, #0
 800c94c:	60a3      	str	r3, [r4, #8]
 800c94e:	6963      	ldr	r3, [r4, #20]
 800c950:	425b      	negs	r3, r3
 800c952:	61a3      	str	r3, [r4, #24]
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	b953      	cbnz	r3, 800c96e <__swsetup_r+0xc6>
 800c958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c95c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c960:	d1ba      	bne.n	800c8d8 <__swsetup_r+0x30>
 800c962:	bd70      	pop	{r4, r5, r6, pc}
 800c964:	0792      	lsls	r2, r2, #30
 800c966:	bf58      	it	pl
 800c968:	6963      	ldrpl	r3, [r4, #20]
 800c96a:	60a3      	str	r3, [r4, #8]
 800c96c:	e7f2      	b.n	800c954 <__swsetup_r+0xac>
 800c96e:	2000      	movs	r0, #0
 800c970:	e7f7      	b.n	800c962 <__swsetup_r+0xba>
 800c972:	bf00      	nop
 800c974:	20000040 	.word	0x20000040
 800c978:	0800f2a0 	.word	0x0800f2a0
 800c97c:	0800f2c0 	.word	0x0800f2c0
 800c980:	0800f280 	.word	0x0800f280

0800c984 <quorem>:
 800c984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c988:	6903      	ldr	r3, [r0, #16]
 800c98a:	690c      	ldr	r4, [r1, #16]
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	4680      	mov	r8, r0
 800c990:	f2c0 8082 	blt.w	800ca98 <quorem+0x114>
 800c994:	3c01      	subs	r4, #1
 800c996:	f101 0714 	add.w	r7, r1, #20
 800c99a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c99e:	f100 0614 	add.w	r6, r0, #20
 800c9a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c9a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c9aa:	eb06 030c 	add.w	r3, r6, ip
 800c9ae:	3501      	adds	r5, #1
 800c9b0:	eb07 090c 	add.w	r9, r7, ip
 800c9b4:	9301      	str	r3, [sp, #4]
 800c9b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800c9ba:	b395      	cbz	r5, 800ca22 <quorem+0x9e>
 800c9bc:	f04f 0a00 	mov.w	sl, #0
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	46b6      	mov	lr, r6
 800c9c4:	46d3      	mov	fp, sl
 800c9c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9ca:	b293      	uxth	r3, r2
 800c9cc:	fb05 a303 	mla	r3, r5, r3, sl
 800c9d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	ebab 0303 	sub.w	r3, fp, r3
 800c9da:	0c12      	lsrs	r2, r2, #16
 800c9dc:	f8de b000 	ldr.w	fp, [lr]
 800c9e0:	fb05 a202 	mla	r2, r5, r2, sl
 800c9e4:	fa13 f38b 	uxtah	r3, r3, fp
 800c9e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c9ec:	fa1f fb82 	uxth.w	fp, r2
 800c9f0:	f8de 2000 	ldr.w	r2, [lr]
 800c9f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c9f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca02:	4581      	cmp	r9, r0
 800ca04:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ca08:	f84e 3b04 	str.w	r3, [lr], #4
 800ca0c:	d2db      	bcs.n	800c9c6 <quorem+0x42>
 800ca0e:	f856 300c 	ldr.w	r3, [r6, ip]
 800ca12:	b933      	cbnz	r3, 800ca22 <quorem+0x9e>
 800ca14:	9b01      	ldr	r3, [sp, #4]
 800ca16:	3b04      	subs	r3, #4
 800ca18:	429e      	cmp	r6, r3
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	d330      	bcc.n	800ca80 <quorem+0xfc>
 800ca1e:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca22:	4640      	mov	r0, r8
 800ca24:	f001 fd7a 	bl	800e51c <__mcmp>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	db25      	blt.n	800ca78 <quorem+0xf4>
 800ca2c:	3501      	adds	r5, #1
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f04f 0c00 	mov.w	ip, #0
 800ca34:	f857 2b04 	ldr.w	r2, [r7], #4
 800ca38:	f8d0 e000 	ldr.w	lr, [r0]
 800ca3c:	b293      	uxth	r3, r2
 800ca3e:	ebac 0303 	sub.w	r3, ip, r3
 800ca42:	0c12      	lsrs	r2, r2, #16
 800ca44:	fa13 f38e 	uxtah	r3, r3, lr
 800ca48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca56:	45b9      	cmp	r9, r7
 800ca58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca5c:	f840 3b04 	str.w	r3, [r0], #4
 800ca60:	d2e8      	bcs.n	800ca34 <quorem+0xb0>
 800ca62:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ca66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ca6a:	b92a      	cbnz	r2, 800ca78 <quorem+0xf4>
 800ca6c:	3b04      	subs	r3, #4
 800ca6e:	429e      	cmp	r6, r3
 800ca70:	461a      	mov	r2, r3
 800ca72:	d30b      	bcc.n	800ca8c <quorem+0x108>
 800ca74:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca78:	4628      	mov	r0, r5
 800ca7a:	b003      	add	sp, #12
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	6812      	ldr	r2, [r2, #0]
 800ca82:	3b04      	subs	r3, #4
 800ca84:	2a00      	cmp	r2, #0
 800ca86:	d1ca      	bne.n	800ca1e <quorem+0x9a>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	e7c5      	b.n	800ca18 <quorem+0x94>
 800ca8c:	6812      	ldr	r2, [r2, #0]
 800ca8e:	3b04      	subs	r3, #4
 800ca90:	2a00      	cmp	r2, #0
 800ca92:	d1ef      	bne.n	800ca74 <quorem+0xf0>
 800ca94:	3c01      	subs	r4, #1
 800ca96:	e7ea      	b.n	800ca6e <quorem+0xea>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e7ee      	b.n	800ca7a <quorem+0xf6>
 800ca9c:	0000      	movs	r0, r0
	...

0800caa0 <_dtoa_r>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	ec57 6b10 	vmov	r6, r7, d0
 800caa8:	b097      	sub	sp, #92	; 0x5c
 800caaa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800caac:	9106      	str	r1, [sp, #24]
 800caae:	4604      	mov	r4, r0
 800cab0:	920b      	str	r2, [sp, #44]	; 0x2c
 800cab2:	9312      	str	r3, [sp, #72]	; 0x48
 800cab4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cab8:	e9cd 6700 	strd	r6, r7, [sp]
 800cabc:	b93d      	cbnz	r5, 800cace <_dtoa_r+0x2e>
 800cabe:	2010      	movs	r0, #16
 800cac0:	f001 fabe 	bl	800e040 <malloc>
 800cac4:	6260      	str	r0, [r4, #36]	; 0x24
 800cac6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800caca:	6005      	str	r5, [r0, #0]
 800cacc:	60c5      	str	r5, [r0, #12]
 800cace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cad0:	6819      	ldr	r1, [r3, #0]
 800cad2:	b151      	cbz	r1, 800caea <_dtoa_r+0x4a>
 800cad4:	685a      	ldr	r2, [r3, #4]
 800cad6:	604a      	str	r2, [r1, #4]
 800cad8:	2301      	movs	r3, #1
 800cada:	4093      	lsls	r3, r2
 800cadc:	608b      	str	r3, [r1, #8]
 800cade:	4620      	mov	r0, r4
 800cae0:	f001 fafc 	bl	800e0dc <_Bfree>
 800cae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae6:	2200      	movs	r2, #0
 800cae8:	601a      	str	r2, [r3, #0]
 800caea:	1e3b      	subs	r3, r7, #0
 800caec:	bfbb      	ittet	lt
 800caee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800caf2:	9301      	strlt	r3, [sp, #4]
 800caf4:	2300      	movge	r3, #0
 800caf6:	2201      	movlt	r2, #1
 800caf8:	bfac      	ite	ge
 800cafa:	f8c8 3000 	strge.w	r3, [r8]
 800cafe:	f8c8 2000 	strlt.w	r2, [r8]
 800cb02:	4baf      	ldr	r3, [pc, #700]	; (800cdc0 <_dtoa_r+0x320>)
 800cb04:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb08:	ea33 0308 	bics.w	r3, r3, r8
 800cb0c:	d114      	bne.n	800cb38 <_dtoa_r+0x98>
 800cb0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb10:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	9b00      	ldr	r3, [sp, #0]
 800cb18:	b923      	cbnz	r3, 800cb24 <_dtoa_r+0x84>
 800cb1a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	f000 8542 	beq.w	800d5a8 <_dtoa_r+0xb08>
 800cb24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb26:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cdd4 <_dtoa_r+0x334>
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 8544 	beq.w	800d5b8 <_dtoa_r+0xb18>
 800cb30:	f10b 0303 	add.w	r3, fp, #3
 800cb34:	f000 bd3e 	b.w	800d5b4 <_dtoa_r+0xb14>
 800cb38:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4630      	mov	r0, r6
 800cb42:	4639      	mov	r1, r7
 800cb44:	f7f3 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb48:	4681      	mov	r9, r0
 800cb4a:	b168      	cbz	r0, 800cb68 <_dtoa_r+0xc8>
 800cb4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb4e:	2301      	movs	r3, #1
 800cb50:	6013      	str	r3, [r2, #0]
 800cb52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 8524 	beq.w	800d5a2 <_dtoa_r+0xb02>
 800cb5a:	4b9a      	ldr	r3, [pc, #616]	; (800cdc4 <_dtoa_r+0x324>)
 800cb5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb5e:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb62:	6013      	str	r3, [r2, #0]
 800cb64:	f000 bd28 	b.w	800d5b8 <_dtoa_r+0xb18>
 800cb68:	aa14      	add	r2, sp, #80	; 0x50
 800cb6a:	a915      	add	r1, sp, #84	; 0x54
 800cb6c:	ec47 6b10 	vmov	d0, r6, r7
 800cb70:	4620      	mov	r0, r4
 800cb72:	f001 fdc1 	bl	800e6f8 <__d2b>
 800cb76:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cb7a:	9004      	str	r0, [sp, #16]
 800cb7c:	2d00      	cmp	r5, #0
 800cb7e:	d07c      	beq.n	800cc7a <_dtoa_r+0x1da>
 800cb80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb84:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cb88:	46b2      	mov	sl, r6
 800cb8a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cb8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb92:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cb96:	2200      	movs	r2, #0
 800cb98:	4b8b      	ldr	r3, [pc, #556]	; (800cdc8 <_dtoa_r+0x328>)
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	4659      	mov	r1, fp
 800cb9e:	f7f3 fb73 	bl	8000288 <__aeabi_dsub>
 800cba2:	a381      	add	r3, pc, #516	; (adr r3, 800cda8 <_dtoa_r+0x308>)
 800cba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	a380      	add	r3, pc, #512	; (adr r3, 800cdb0 <_dtoa_r+0x310>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	4628      	mov	r0, r5
 800cbba:	460f      	mov	r7, r1
 800cbbc:	f7f3 fcb2 	bl	8000524 <__aeabi_i2d>
 800cbc0:	a37d      	add	r3, pc, #500	; (adr r3, 800cdb8 <_dtoa_r+0x318>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	f7f3 fd17 	bl	80005f8 <__aeabi_dmul>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4639      	mov	r1, r7
 800cbd2:	f7f3 fb5b 	bl	800028c <__adddf3>
 800cbd6:	4606      	mov	r6, r0
 800cbd8:	460f      	mov	r7, r1
 800cbda:	f7f3 ffbd 	bl	8000b58 <__aeabi_d2iz>
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4682      	mov	sl, r0
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4630      	mov	r0, r6
 800cbe6:	4639      	mov	r1, r7
 800cbe8:	f7f3 ff78 	bl	8000adc <__aeabi_dcmplt>
 800cbec:	b148      	cbz	r0, 800cc02 <_dtoa_r+0x162>
 800cbee:	4650      	mov	r0, sl
 800cbf0:	f7f3 fc98 	bl	8000524 <__aeabi_i2d>
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	f7f3 ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbfc:	b908      	cbnz	r0, 800cc02 <_dtoa_r+0x162>
 800cbfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc02:	f1ba 0f16 	cmp.w	sl, #22
 800cc06:	d859      	bhi.n	800ccbc <_dtoa_r+0x21c>
 800cc08:	4970      	ldr	r1, [pc, #448]	; (800cdcc <_dtoa_r+0x32c>)
 800cc0a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cc0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc16:	f7f3 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d050      	beq.n	800ccc0 <_dtoa_r+0x220>
 800cc1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc22:	2300      	movs	r3, #0
 800cc24:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc28:	1b5d      	subs	r5, r3, r5
 800cc2a:	f1b5 0801 	subs.w	r8, r5, #1
 800cc2e:	bf49      	itett	mi
 800cc30:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc34:	2300      	movpl	r3, #0
 800cc36:	9305      	strmi	r3, [sp, #20]
 800cc38:	f04f 0800 	movmi.w	r8, #0
 800cc3c:	bf58      	it	pl
 800cc3e:	9305      	strpl	r3, [sp, #20]
 800cc40:	f1ba 0f00 	cmp.w	sl, #0
 800cc44:	db3e      	blt.n	800ccc4 <_dtoa_r+0x224>
 800cc46:	2300      	movs	r3, #0
 800cc48:	44d0      	add	r8, sl
 800cc4a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc4e:	9307      	str	r3, [sp, #28]
 800cc50:	9b06      	ldr	r3, [sp, #24]
 800cc52:	2b09      	cmp	r3, #9
 800cc54:	f200 8090 	bhi.w	800cd78 <_dtoa_r+0x2d8>
 800cc58:	2b05      	cmp	r3, #5
 800cc5a:	bfc4      	itt	gt
 800cc5c:	3b04      	subgt	r3, #4
 800cc5e:	9306      	strgt	r3, [sp, #24]
 800cc60:	9b06      	ldr	r3, [sp, #24]
 800cc62:	f1a3 0302 	sub.w	r3, r3, #2
 800cc66:	bfcc      	ite	gt
 800cc68:	2500      	movgt	r5, #0
 800cc6a:	2501      	movle	r5, #1
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	f200 808f 	bhi.w	800cd90 <_dtoa_r+0x2f0>
 800cc72:	e8df f003 	tbb	[pc, r3]
 800cc76:	7f7d      	.short	0x7f7d
 800cc78:	7131      	.short	0x7131
 800cc7a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cc7e:	441d      	add	r5, r3
 800cc80:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cc84:	2820      	cmp	r0, #32
 800cc86:	dd13      	ble.n	800ccb0 <_dtoa_r+0x210>
 800cc88:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cc8c:	9b00      	ldr	r3, [sp, #0]
 800cc8e:	fa08 f800 	lsl.w	r8, r8, r0
 800cc92:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cc96:	fa23 f000 	lsr.w	r0, r3, r0
 800cc9a:	ea48 0000 	orr.w	r0, r8, r0
 800cc9e:	f7f3 fc31 	bl	8000504 <__aeabi_ui2d>
 800cca2:	2301      	movs	r3, #1
 800cca4:	4682      	mov	sl, r0
 800cca6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ccaa:	3d01      	subs	r5, #1
 800ccac:	9313      	str	r3, [sp, #76]	; 0x4c
 800ccae:	e772      	b.n	800cb96 <_dtoa_r+0xf6>
 800ccb0:	9b00      	ldr	r3, [sp, #0]
 800ccb2:	f1c0 0020 	rsb	r0, r0, #32
 800ccb6:	fa03 f000 	lsl.w	r0, r3, r0
 800ccba:	e7f0      	b.n	800cc9e <_dtoa_r+0x1fe>
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e7b1      	b.n	800cc24 <_dtoa_r+0x184>
 800ccc0:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccc2:	e7b0      	b.n	800cc26 <_dtoa_r+0x186>
 800ccc4:	9b05      	ldr	r3, [sp, #20]
 800ccc6:	eba3 030a 	sub.w	r3, r3, sl
 800ccca:	9305      	str	r3, [sp, #20]
 800cccc:	f1ca 0300 	rsb	r3, sl, #0
 800ccd0:	9307      	str	r3, [sp, #28]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	930e      	str	r3, [sp, #56]	; 0x38
 800ccd6:	e7bb      	b.n	800cc50 <_dtoa_r+0x1b0>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	930a      	str	r3, [sp, #40]	; 0x28
 800ccdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	dd59      	ble.n	800cd96 <_dtoa_r+0x2f6>
 800cce2:	9302      	str	r3, [sp, #8]
 800cce4:	4699      	mov	r9, r3
 800cce6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cce8:	2200      	movs	r2, #0
 800ccea:	6072      	str	r2, [r6, #4]
 800ccec:	2204      	movs	r2, #4
 800ccee:	f102 0014 	add.w	r0, r2, #20
 800ccf2:	4298      	cmp	r0, r3
 800ccf4:	6871      	ldr	r1, [r6, #4]
 800ccf6:	d953      	bls.n	800cda0 <_dtoa_r+0x300>
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f001 f9bb 	bl	800e074 <_Balloc>
 800ccfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd00:	6030      	str	r0, [r6, #0]
 800cd02:	f1b9 0f0e 	cmp.w	r9, #14
 800cd06:	f8d3 b000 	ldr.w	fp, [r3]
 800cd0a:	f200 80e6 	bhi.w	800ceda <_dtoa_r+0x43a>
 800cd0e:	2d00      	cmp	r5, #0
 800cd10:	f000 80e3 	beq.w	800ceda <_dtoa_r+0x43a>
 800cd14:	ed9d 7b00 	vldr	d7, [sp]
 800cd18:	f1ba 0f00 	cmp.w	sl, #0
 800cd1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cd20:	dd74      	ble.n	800ce0c <_dtoa_r+0x36c>
 800cd22:	4a2a      	ldr	r2, [pc, #168]	; (800cdcc <_dtoa_r+0x32c>)
 800cd24:	f00a 030f 	and.w	r3, sl, #15
 800cd28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd2c:	ed93 7b00 	vldr	d7, [r3]
 800cd30:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cd34:	06f0      	lsls	r0, r6, #27
 800cd36:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cd3a:	d565      	bpl.n	800ce08 <_dtoa_r+0x368>
 800cd3c:	4b24      	ldr	r3, [pc, #144]	; (800cdd0 <_dtoa_r+0x330>)
 800cd3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd46:	f7f3 fd81 	bl	800084c <__aeabi_ddiv>
 800cd4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cd4e:	f006 060f 	and.w	r6, r6, #15
 800cd52:	2503      	movs	r5, #3
 800cd54:	4f1e      	ldr	r7, [pc, #120]	; (800cdd0 <_dtoa_r+0x330>)
 800cd56:	e04c      	b.n	800cdf2 <_dtoa_r+0x352>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5e:	4453      	add	r3, sl
 800cd60:	f103 0901 	add.w	r9, r3, #1
 800cd64:	9302      	str	r3, [sp, #8]
 800cd66:	464b      	mov	r3, r9
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	bfb8      	it	lt
 800cd6c:	2301      	movlt	r3, #1
 800cd6e:	e7ba      	b.n	800cce6 <_dtoa_r+0x246>
 800cd70:	2300      	movs	r3, #0
 800cd72:	e7b2      	b.n	800ccda <_dtoa_r+0x23a>
 800cd74:	2300      	movs	r3, #0
 800cd76:	e7f0      	b.n	800cd5a <_dtoa_r+0x2ba>
 800cd78:	2501      	movs	r5, #1
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	9306      	str	r3, [sp, #24]
 800cd7e:	950a      	str	r5, [sp, #40]	; 0x28
 800cd80:	f04f 33ff 	mov.w	r3, #4294967295
 800cd84:	9302      	str	r3, [sp, #8]
 800cd86:	4699      	mov	r9, r3
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2312      	movs	r3, #18
 800cd8c:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd8e:	e7aa      	b.n	800cce6 <_dtoa_r+0x246>
 800cd90:	2301      	movs	r3, #1
 800cd92:	930a      	str	r3, [sp, #40]	; 0x28
 800cd94:	e7f4      	b.n	800cd80 <_dtoa_r+0x2e0>
 800cd96:	2301      	movs	r3, #1
 800cd98:	9302      	str	r3, [sp, #8]
 800cd9a:	4699      	mov	r9, r3
 800cd9c:	461a      	mov	r2, r3
 800cd9e:	e7f5      	b.n	800cd8c <_dtoa_r+0x2ec>
 800cda0:	3101      	adds	r1, #1
 800cda2:	6071      	str	r1, [r6, #4]
 800cda4:	0052      	lsls	r2, r2, #1
 800cda6:	e7a2      	b.n	800ccee <_dtoa_r+0x24e>
 800cda8:	636f4361 	.word	0x636f4361
 800cdac:	3fd287a7 	.word	0x3fd287a7
 800cdb0:	8b60c8b3 	.word	0x8b60c8b3
 800cdb4:	3fc68a28 	.word	0x3fc68a28
 800cdb8:	509f79fb 	.word	0x509f79fb
 800cdbc:	3fd34413 	.word	0x3fd34413
 800cdc0:	7ff00000 	.word	0x7ff00000
 800cdc4:	0800f1f5 	.word	0x0800f1f5
 800cdc8:	3ff80000 	.word	0x3ff80000
 800cdcc:	0800f318 	.word	0x0800f318
 800cdd0:	0800f2f0 	.word	0x0800f2f0
 800cdd4:	0800f279 	.word	0x0800f279
 800cdd8:	07f1      	lsls	r1, r6, #31
 800cdda:	d508      	bpl.n	800cdee <_dtoa_r+0x34e>
 800cddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cde0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde4:	f7f3 fc08 	bl	80005f8 <__aeabi_dmul>
 800cde8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cdec:	3501      	adds	r5, #1
 800cdee:	1076      	asrs	r6, r6, #1
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	d1f0      	bne.n	800cdd8 <_dtoa_r+0x338>
 800cdf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cdfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdfe:	f7f3 fd25 	bl	800084c <__aeabi_ddiv>
 800ce02:	e9cd 0100 	strd	r0, r1, [sp]
 800ce06:	e01a      	b.n	800ce3e <_dtoa_r+0x39e>
 800ce08:	2502      	movs	r5, #2
 800ce0a:	e7a3      	b.n	800cd54 <_dtoa_r+0x2b4>
 800ce0c:	f000 80a0 	beq.w	800cf50 <_dtoa_r+0x4b0>
 800ce10:	f1ca 0600 	rsb	r6, sl, #0
 800ce14:	4b9f      	ldr	r3, [pc, #636]	; (800d094 <_dtoa_r+0x5f4>)
 800ce16:	4fa0      	ldr	r7, [pc, #640]	; (800d098 <_dtoa_r+0x5f8>)
 800ce18:	f006 020f 	and.w	r2, r6, #15
 800ce1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce28:	f7f3 fbe6 	bl	80005f8 <__aeabi_dmul>
 800ce2c:	e9cd 0100 	strd	r0, r1, [sp]
 800ce30:	1136      	asrs	r6, r6, #4
 800ce32:	2300      	movs	r3, #0
 800ce34:	2502      	movs	r5, #2
 800ce36:	2e00      	cmp	r6, #0
 800ce38:	d17f      	bne.n	800cf3a <_dtoa_r+0x49a>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d1e1      	bne.n	800ce02 <_dtoa_r+0x362>
 800ce3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f000 8087 	beq.w	800cf54 <_dtoa_r+0x4b4>
 800ce46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	4b93      	ldr	r3, [pc, #588]	; (800d09c <_dtoa_r+0x5fc>)
 800ce4e:	4630      	mov	r0, r6
 800ce50:	4639      	mov	r1, r7
 800ce52:	f7f3 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d07c      	beq.n	800cf54 <_dtoa_r+0x4b4>
 800ce5a:	f1b9 0f00 	cmp.w	r9, #0
 800ce5e:	d079      	beq.n	800cf54 <_dtoa_r+0x4b4>
 800ce60:	9b02      	ldr	r3, [sp, #8]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	dd35      	ble.n	800ced2 <_dtoa_r+0x432>
 800ce66:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce6a:	9308      	str	r3, [sp, #32]
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	2200      	movs	r2, #0
 800ce70:	4b8b      	ldr	r3, [pc, #556]	; (800d0a0 <_dtoa_r+0x600>)
 800ce72:	4630      	mov	r0, r6
 800ce74:	f7f3 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ce78:	e9cd 0100 	strd	r0, r1, [sp]
 800ce7c:	9f02      	ldr	r7, [sp, #8]
 800ce7e:	3501      	adds	r5, #1
 800ce80:	4628      	mov	r0, r5
 800ce82:	f7f3 fb4f 	bl	8000524 <__aeabi_i2d>
 800ce86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce8a:	f7f3 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	4b84      	ldr	r3, [pc, #528]	; (800d0a4 <_dtoa_r+0x604>)
 800ce92:	f7f3 f9fb 	bl	800028c <__adddf3>
 800ce96:	4605      	mov	r5, r0
 800ce98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ce9c:	2f00      	cmp	r7, #0
 800ce9e:	d15d      	bne.n	800cf5c <_dtoa_r+0x4bc>
 800cea0:	2200      	movs	r2, #0
 800cea2:	4b81      	ldr	r3, [pc, #516]	; (800d0a8 <_dtoa_r+0x608>)
 800cea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea8:	f7f3 f9ee 	bl	8000288 <__aeabi_dsub>
 800ceac:	462a      	mov	r2, r5
 800ceae:	4633      	mov	r3, r6
 800ceb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ceb4:	f7f3 fe30 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb8:	2800      	cmp	r0, #0
 800ceba:	f040 8288 	bne.w	800d3ce <_dtoa_r+0x92e>
 800cebe:	462a      	mov	r2, r5
 800cec0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cec8:	f7f3 fe08 	bl	8000adc <__aeabi_dcmplt>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f040 827c 	bne.w	800d3ca <_dtoa_r+0x92a>
 800ced2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ced6:	e9cd 2300 	strd	r2, r3, [sp]
 800ceda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cedc:	2b00      	cmp	r3, #0
 800cede:	f2c0 8150 	blt.w	800d182 <_dtoa_r+0x6e2>
 800cee2:	f1ba 0f0e 	cmp.w	sl, #14
 800cee6:	f300 814c 	bgt.w	800d182 <_dtoa_r+0x6e2>
 800ceea:	4b6a      	ldr	r3, [pc, #424]	; (800d094 <_dtoa_r+0x5f4>)
 800ceec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cef0:	ed93 7b00 	vldr	d7, [r3]
 800cef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cefc:	f280 80d8 	bge.w	800d0b0 <_dtoa_r+0x610>
 800cf00:	f1b9 0f00 	cmp.w	r9, #0
 800cf04:	f300 80d4 	bgt.w	800d0b0 <_dtoa_r+0x610>
 800cf08:	f040 825e 	bne.w	800d3c8 <_dtoa_r+0x928>
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	4b66      	ldr	r3, [pc, #408]	; (800d0a8 <_dtoa_r+0x608>)
 800cf10:	ec51 0b17 	vmov	r0, r1, d7
 800cf14:	f7f3 fb70 	bl	80005f8 <__aeabi_dmul>
 800cf18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf1c:	f7f3 fdf2 	bl	8000b04 <__aeabi_dcmpge>
 800cf20:	464f      	mov	r7, r9
 800cf22:	464e      	mov	r6, r9
 800cf24:	2800      	cmp	r0, #0
 800cf26:	f040 8234 	bne.w	800d392 <_dtoa_r+0x8f2>
 800cf2a:	2331      	movs	r3, #49	; 0x31
 800cf2c:	f10b 0501 	add.w	r5, fp, #1
 800cf30:	f88b 3000 	strb.w	r3, [fp]
 800cf34:	f10a 0a01 	add.w	sl, sl, #1
 800cf38:	e22f      	b.n	800d39a <_dtoa_r+0x8fa>
 800cf3a:	07f2      	lsls	r2, r6, #31
 800cf3c:	d505      	bpl.n	800cf4a <_dtoa_r+0x4aa>
 800cf3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf42:	f7f3 fb59 	bl	80005f8 <__aeabi_dmul>
 800cf46:	3501      	adds	r5, #1
 800cf48:	2301      	movs	r3, #1
 800cf4a:	1076      	asrs	r6, r6, #1
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	e772      	b.n	800ce36 <_dtoa_r+0x396>
 800cf50:	2502      	movs	r5, #2
 800cf52:	e774      	b.n	800ce3e <_dtoa_r+0x39e>
 800cf54:	f8cd a020 	str.w	sl, [sp, #32]
 800cf58:	464f      	mov	r7, r9
 800cf5a:	e791      	b.n	800ce80 <_dtoa_r+0x3e0>
 800cf5c:	4b4d      	ldr	r3, [pc, #308]	; (800d094 <_dtoa_r+0x5f4>)
 800cf5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf62:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cf66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d047      	beq.n	800cffc <_dtoa_r+0x55c>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	460b      	mov	r3, r1
 800cf70:	2000      	movs	r0, #0
 800cf72:	494e      	ldr	r1, [pc, #312]	; (800d0ac <_dtoa_r+0x60c>)
 800cf74:	f7f3 fc6a 	bl	800084c <__aeabi_ddiv>
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4633      	mov	r3, r6
 800cf7c:	f7f3 f984 	bl	8000288 <__aeabi_dsub>
 800cf80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf84:	465d      	mov	r5, fp
 800cf86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf8a:	f7f3 fde5 	bl	8000b58 <__aeabi_d2iz>
 800cf8e:	4606      	mov	r6, r0
 800cf90:	f7f3 fac8 	bl	8000524 <__aeabi_i2d>
 800cf94:	4602      	mov	r2, r0
 800cf96:	460b      	mov	r3, r1
 800cf98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf9c:	f7f3 f974 	bl	8000288 <__aeabi_dsub>
 800cfa0:	3630      	adds	r6, #48	; 0x30
 800cfa2:	f805 6b01 	strb.w	r6, [r5], #1
 800cfa6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfaa:	e9cd 0100 	strd	r0, r1, [sp]
 800cfae:	f7f3 fd95 	bl	8000adc <__aeabi_dcmplt>
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d163      	bne.n	800d07e <_dtoa_r+0x5de>
 800cfb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfba:	2000      	movs	r0, #0
 800cfbc:	4937      	ldr	r1, [pc, #220]	; (800d09c <_dtoa_r+0x5fc>)
 800cfbe:	f7f3 f963 	bl	8000288 <__aeabi_dsub>
 800cfc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfc6:	f7f3 fd89 	bl	8000adc <__aeabi_dcmplt>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	f040 80b7 	bne.w	800d13e <_dtoa_r+0x69e>
 800cfd0:	eba5 030b 	sub.w	r3, r5, fp
 800cfd4:	429f      	cmp	r7, r3
 800cfd6:	f77f af7c 	ble.w	800ced2 <_dtoa_r+0x432>
 800cfda:	2200      	movs	r2, #0
 800cfdc:	4b30      	ldr	r3, [pc, #192]	; (800d0a0 <_dtoa_r+0x600>)
 800cfde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfe2:	f7f3 fb09 	bl	80005f8 <__aeabi_dmul>
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cfec:	4b2c      	ldr	r3, [pc, #176]	; (800d0a0 <_dtoa_r+0x600>)
 800cfee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff2:	f7f3 fb01 	bl	80005f8 <__aeabi_dmul>
 800cff6:	e9cd 0100 	strd	r0, r1, [sp]
 800cffa:	e7c4      	b.n	800cf86 <_dtoa_r+0x4e6>
 800cffc:	462a      	mov	r2, r5
 800cffe:	4633      	mov	r3, r6
 800d000:	f7f3 fafa 	bl	80005f8 <__aeabi_dmul>
 800d004:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d008:	eb0b 0507 	add.w	r5, fp, r7
 800d00c:	465e      	mov	r6, fp
 800d00e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d012:	f7f3 fda1 	bl	8000b58 <__aeabi_d2iz>
 800d016:	4607      	mov	r7, r0
 800d018:	f7f3 fa84 	bl	8000524 <__aeabi_i2d>
 800d01c:	3730      	adds	r7, #48	; 0x30
 800d01e:	4602      	mov	r2, r0
 800d020:	460b      	mov	r3, r1
 800d022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d026:	f7f3 f92f 	bl	8000288 <__aeabi_dsub>
 800d02a:	f806 7b01 	strb.w	r7, [r6], #1
 800d02e:	42ae      	cmp	r6, r5
 800d030:	e9cd 0100 	strd	r0, r1, [sp]
 800d034:	f04f 0200 	mov.w	r2, #0
 800d038:	d126      	bne.n	800d088 <_dtoa_r+0x5e8>
 800d03a:	4b1c      	ldr	r3, [pc, #112]	; (800d0ac <_dtoa_r+0x60c>)
 800d03c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d040:	f7f3 f924 	bl	800028c <__adddf3>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d04c:	f7f3 fd64 	bl	8000b18 <__aeabi_dcmpgt>
 800d050:	2800      	cmp	r0, #0
 800d052:	d174      	bne.n	800d13e <_dtoa_r+0x69e>
 800d054:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d058:	2000      	movs	r0, #0
 800d05a:	4914      	ldr	r1, [pc, #80]	; (800d0ac <_dtoa_r+0x60c>)
 800d05c:	f7f3 f914 	bl	8000288 <__aeabi_dsub>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d068:	f7f3 fd38 	bl	8000adc <__aeabi_dcmplt>
 800d06c:	2800      	cmp	r0, #0
 800d06e:	f43f af30 	beq.w	800ced2 <_dtoa_r+0x432>
 800d072:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d076:	2b30      	cmp	r3, #48	; 0x30
 800d078:	f105 32ff 	add.w	r2, r5, #4294967295
 800d07c:	d002      	beq.n	800d084 <_dtoa_r+0x5e4>
 800d07e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d082:	e04a      	b.n	800d11a <_dtoa_r+0x67a>
 800d084:	4615      	mov	r5, r2
 800d086:	e7f4      	b.n	800d072 <_dtoa_r+0x5d2>
 800d088:	4b05      	ldr	r3, [pc, #20]	; (800d0a0 <_dtoa_r+0x600>)
 800d08a:	f7f3 fab5 	bl	80005f8 <__aeabi_dmul>
 800d08e:	e9cd 0100 	strd	r0, r1, [sp]
 800d092:	e7bc      	b.n	800d00e <_dtoa_r+0x56e>
 800d094:	0800f318 	.word	0x0800f318
 800d098:	0800f2f0 	.word	0x0800f2f0
 800d09c:	3ff00000 	.word	0x3ff00000
 800d0a0:	40240000 	.word	0x40240000
 800d0a4:	401c0000 	.word	0x401c0000
 800d0a8:	40140000 	.word	0x40140000
 800d0ac:	3fe00000 	.word	0x3fe00000
 800d0b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0b4:	465d      	mov	r5, fp
 800d0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 fbc5 	bl	800084c <__aeabi_ddiv>
 800d0c2:	f7f3 fd49 	bl	8000b58 <__aeabi_d2iz>
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	f7f3 fa2c 	bl	8000524 <__aeabi_i2d>
 800d0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0d0:	f7f3 fa92 	bl	80005f8 <__aeabi_dmul>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d0e0:	f7f3 f8d2 	bl	8000288 <__aeabi_dsub>
 800d0e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e8:	eba5 060b 	sub.w	r6, r5, fp
 800d0ec:	45b1      	cmp	r9, r6
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	d139      	bne.n	800d168 <_dtoa_r+0x6c8>
 800d0f4:	f7f3 f8ca 	bl	800028c <__adddf3>
 800d0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0fc:	4606      	mov	r6, r0
 800d0fe:	460f      	mov	r7, r1
 800d100:	f7f3 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 800d104:	b9c8      	cbnz	r0, 800d13a <_dtoa_r+0x69a>
 800d106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d10a:	4630      	mov	r0, r6
 800d10c:	4639      	mov	r1, r7
 800d10e:	f7f3 fcdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d112:	b110      	cbz	r0, 800d11a <_dtoa_r+0x67a>
 800d114:	f018 0f01 	tst.w	r8, #1
 800d118:	d10f      	bne.n	800d13a <_dtoa_r+0x69a>
 800d11a:	9904      	ldr	r1, [sp, #16]
 800d11c:	4620      	mov	r0, r4
 800d11e:	f000 ffdd 	bl	800e0dc <_Bfree>
 800d122:	2300      	movs	r3, #0
 800d124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d126:	702b      	strb	r3, [r5, #0]
 800d128:	f10a 0301 	add.w	r3, sl, #1
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 8241 	beq.w	800d5b8 <_dtoa_r+0xb18>
 800d136:	601d      	str	r5, [r3, #0]
 800d138:	e23e      	b.n	800d5b8 <_dtoa_r+0xb18>
 800d13a:	f8cd a020 	str.w	sl, [sp, #32]
 800d13e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d142:	2a39      	cmp	r2, #57	; 0x39
 800d144:	f105 33ff 	add.w	r3, r5, #4294967295
 800d148:	d108      	bne.n	800d15c <_dtoa_r+0x6bc>
 800d14a:	459b      	cmp	fp, r3
 800d14c:	d10a      	bne.n	800d164 <_dtoa_r+0x6c4>
 800d14e:	9b08      	ldr	r3, [sp, #32]
 800d150:	3301      	adds	r3, #1
 800d152:	9308      	str	r3, [sp, #32]
 800d154:	2330      	movs	r3, #48	; 0x30
 800d156:	f88b 3000 	strb.w	r3, [fp]
 800d15a:	465b      	mov	r3, fp
 800d15c:	781a      	ldrb	r2, [r3, #0]
 800d15e:	3201      	adds	r2, #1
 800d160:	701a      	strb	r2, [r3, #0]
 800d162:	e78c      	b.n	800d07e <_dtoa_r+0x5de>
 800d164:	461d      	mov	r5, r3
 800d166:	e7ea      	b.n	800d13e <_dtoa_r+0x69e>
 800d168:	2200      	movs	r2, #0
 800d16a:	4b9b      	ldr	r3, [pc, #620]	; (800d3d8 <_dtoa_r+0x938>)
 800d16c:	f7f3 fa44 	bl	80005f8 <__aeabi_dmul>
 800d170:	2200      	movs	r2, #0
 800d172:	2300      	movs	r3, #0
 800d174:	4606      	mov	r6, r0
 800d176:	460f      	mov	r7, r1
 800d178:	f7f3 fca6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d09a      	beq.n	800d0b6 <_dtoa_r+0x616>
 800d180:	e7cb      	b.n	800d11a <_dtoa_r+0x67a>
 800d182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d184:	2a00      	cmp	r2, #0
 800d186:	f000 808b 	beq.w	800d2a0 <_dtoa_r+0x800>
 800d18a:	9a06      	ldr	r2, [sp, #24]
 800d18c:	2a01      	cmp	r2, #1
 800d18e:	dc6e      	bgt.n	800d26e <_dtoa_r+0x7ce>
 800d190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d192:	2a00      	cmp	r2, #0
 800d194:	d067      	beq.n	800d266 <_dtoa_r+0x7c6>
 800d196:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d19a:	9f07      	ldr	r7, [sp, #28]
 800d19c:	9d05      	ldr	r5, [sp, #20]
 800d19e:	9a05      	ldr	r2, [sp, #20]
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	441a      	add	r2, r3
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	9205      	str	r2, [sp, #20]
 800d1a8:	4498      	add	r8, r3
 800d1aa:	f001 f875 	bl	800e298 <__i2b>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	2d00      	cmp	r5, #0
 800d1b2:	dd0c      	ble.n	800d1ce <_dtoa_r+0x72e>
 800d1b4:	f1b8 0f00 	cmp.w	r8, #0
 800d1b8:	dd09      	ble.n	800d1ce <_dtoa_r+0x72e>
 800d1ba:	4545      	cmp	r5, r8
 800d1bc:	9a05      	ldr	r2, [sp, #20]
 800d1be:	462b      	mov	r3, r5
 800d1c0:	bfa8      	it	ge
 800d1c2:	4643      	movge	r3, r8
 800d1c4:	1ad2      	subs	r2, r2, r3
 800d1c6:	9205      	str	r2, [sp, #20]
 800d1c8:	1aed      	subs	r5, r5, r3
 800d1ca:	eba8 0803 	sub.w	r8, r8, r3
 800d1ce:	9b07      	ldr	r3, [sp, #28]
 800d1d0:	b1eb      	cbz	r3, 800d20e <_dtoa_r+0x76e>
 800d1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d067      	beq.n	800d2a8 <_dtoa_r+0x808>
 800d1d8:	b18f      	cbz	r7, 800d1fe <_dtoa_r+0x75e>
 800d1da:	4631      	mov	r1, r6
 800d1dc:	463a      	mov	r2, r7
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f001 f8fa 	bl	800e3d8 <__pow5mult>
 800d1e4:	9a04      	ldr	r2, [sp, #16]
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f001 f85d 	bl	800e2aa <__multiply>
 800d1f0:	9904      	ldr	r1, [sp, #16]
 800d1f2:	9008      	str	r0, [sp, #32]
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 ff71 	bl	800e0dc <_Bfree>
 800d1fa:	9b08      	ldr	r3, [sp, #32]
 800d1fc:	9304      	str	r3, [sp, #16]
 800d1fe:	9b07      	ldr	r3, [sp, #28]
 800d200:	1bda      	subs	r2, r3, r7
 800d202:	d004      	beq.n	800d20e <_dtoa_r+0x76e>
 800d204:	9904      	ldr	r1, [sp, #16]
 800d206:	4620      	mov	r0, r4
 800d208:	f001 f8e6 	bl	800e3d8 <__pow5mult>
 800d20c:	9004      	str	r0, [sp, #16]
 800d20e:	2101      	movs	r1, #1
 800d210:	4620      	mov	r0, r4
 800d212:	f001 f841 	bl	800e298 <__i2b>
 800d216:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d218:	4607      	mov	r7, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 81d0 	beq.w	800d5c0 <_dtoa_r+0xb20>
 800d220:	461a      	mov	r2, r3
 800d222:	4601      	mov	r1, r0
 800d224:	4620      	mov	r0, r4
 800d226:	f001 f8d7 	bl	800e3d8 <__pow5mult>
 800d22a:	9b06      	ldr	r3, [sp, #24]
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	4607      	mov	r7, r0
 800d230:	dc40      	bgt.n	800d2b4 <_dtoa_r+0x814>
 800d232:	9b00      	ldr	r3, [sp, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d139      	bne.n	800d2ac <_dtoa_r+0x80c>
 800d238:	9b01      	ldr	r3, [sp, #4]
 800d23a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d136      	bne.n	800d2b0 <_dtoa_r+0x810>
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d248:	0d1b      	lsrs	r3, r3, #20
 800d24a:	051b      	lsls	r3, r3, #20
 800d24c:	b12b      	cbz	r3, 800d25a <_dtoa_r+0x7ba>
 800d24e:	9b05      	ldr	r3, [sp, #20]
 800d250:	3301      	adds	r3, #1
 800d252:	9305      	str	r3, [sp, #20]
 800d254:	f108 0801 	add.w	r8, r8, #1
 800d258:	2301      	movs	r3, #1
 800d25a:	9307      	str	r3, [sp, #28]
 800d25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d12a      	bne.n	800d2b8 <_dtoa_r+0x818>
 800d262:	2001      	movs	r0, #1
 800d264:	e030      	b.n	800d2c8 <_dtoa_r+0x828>
 800d266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d268:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d26c:	e795      	b.n	800d19a <_dtoa_r+0x6fa>
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	f109 37ff 	add.w	r7, r9, #4294967295
 800d274:	42bb      	cmp	r3, r7
 800d276:	bfbf      	itttt	lt
 800d278:	9b07      	ldrlt	r3, [sp, #28]
 800d27a:	9707      	strlt	r7, [sp, #28]
 800d27c:	1afa      	sublt	r2, r7, r3
 800d27e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d280:	bfbb      	ittet	lt
 800d282:	189b      	addlt	r3, r3, r2
 800d284:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d286:	1bdf      	subge	r7, r3, r7
 800d288:	2700      	movlt	r7, #0
 800d28a:	f1b9 0f00 	cmp.w	r9, #0
 800d28e:	bfb5      	itete	lt
 800d290:	9b05      	ldrlt	r3, [sp, #20]
 800d292:	9d05      	ldrge	r5, [sp, #20]
 800d294:	eba3 0509 	sublt.w	r5, r3, r9
 800d298:	464b      	movge	r3, r9
 800d29a:	bfb8      	it	lt
 800d29c:	2300      	movlt	r3, #0
 800d29e:	e77e      	b.n	800d19e <_dtoa_r+0x6fe>
 800d2a0:	9f07      	ldr	r7, [sp, #28]
 800d2a2:	9d05      	ldr	r5, [sp, #20]
 800d2a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d2a6:	e783      	b.n	800d1b0 <_dtoa_r+0x710>
 800d2a8:	9a07      	ldr	r2, [sp, #28]
 800d2aa:	e7ab      	b.n	800d204 <_dtoa_r+0x764>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e7d4      	b.n	800d25a <_dtoa_r+0x7ba>
 800d2b0:	9b00      	ldr	r3, [sp, #0]
 800d2b2:	e7d2      	b.n	800d25a <_dtoa_r+0x7ba>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9307      	str	r3, [sp, #28]
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d2be:	6918      	ldr	r0, [r3, #16]
 800d2c0:	f000 ff9c 	bl	800e1fc <__hi0bits>
 800d2c4:	f1c0 0020 	rsb	r0, r0, #32
 800d2c8:	4440      	add	r0, r8
 800d2ca:	f010 001f 	ands.w	r0, r0, #31
 800d2ce:	d047      	beq.n	800d360 <_dtoa_r+0x8c0>
 800d2d0:	f1c0 0320 	rsb	r3, r0, #32
 800d2d4:	2b04      	cmp	r3, #4
 800d2d6:	dd3b      	ble.n	800d350 <_dtoa_r+0x8b0>
 800d2d8:	9b05      	ldr	r3, [sp, #20]
 800d2da:	f1c0 001c 	rsb	r0, r0, #28
 800d2de:	4403      	add	r3, r0
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	4405      	add	r5, r0
 800d2e4:	4480      	add	r8, r0
 800d2e6:	9b05      	ldr	r3, [sp, #20]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	dd05      	ble.n	800d2f8 <_dtoa_r+0x858>
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	9904      	ldr	r1, [sp, #16]
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f001 f8bf 	bl	800e474 <__lshift>
 800d2f6:	9004      	str	r0, [sp, #16]
 800d2f8:	f1b8 0f00 	cmp.w	r8, #0
 800d2fc:	dd05      	ble.n	800d30a <_dtoa_r+0x86a>
 800d2fe:	4639      	mov	r1, r7
 800d300:	4642      	mov	r2, r8
 800d302:	4620      	mov	r0, r4
 800d304:	f001 f8b6 	bl	800e474 <__lshift>
 800d308:	4607      	mov	r7, r0
 800d30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d30c:	b353      	cbz	r3, 800d364 <_dtoa_r+0x8c4>
 800d30e:	4639      	mov	r1, r7
 800d310:	9804      	ldr	r0, [sp, #16]
 800d312:	f001 f903 	bl	800e51c <__mcmp>
 800d316:	2800      	cmp	r0, #0
 800d318:	da24      	bge.n	800d364 <_dtoa_r+0x8c4>
 800d31a:	2300      	movs	r3, #0
 800d31c:	220a      	movs	r2, #10
 800d31e:	9904      	ldr	r1, [sp, #16]
 800d320:	4620      	mov	r0, r4
 800d322:	f000 fef2 	bl	800e10a <__multadd>
 800d326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d328:	9004      	str	r0, [sp, #16]
 800d32a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 814d 	beq.w	800d5ce <_dtoa_r+0xb2e>
 800d334:	2300      	movs	r3, #0
 800d336:	4631      	mov	r1, r6
 800d338:	220a      	movs	r2, #10
 800d33a:	4620      	mov	r0, r4
 800d33c:	f000 fee5 	bl	800e10a <__multadd>
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	2b00      	cmp	r3, #0
 800d344:	4606      	mov	r6, r0
 800d346:	dc4f      	bgt.n	800d3e8 <_dtoa_r+0x948>
 800d348:	9b06      	ldr	r3, [sp, #24]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	dd4c      	ble.n	800d3e8 <_dtoa_r+0x948>
 800d34e:	e011      	b.n	800d374 <_dtoa_r+0x8d4>
 800d350:	d0c9      	beq.n	800d2e6 <_dtoa_r+0x846>
 800d352:	9a05      	ldr	r2, [sp, #20]
 800d354:	331c      	adds	r3, #28
 800d356:	441a      	add	r2, r3
 800d358:	9205      	str	r2, [sp, #20]
 800d35a:	441d      	add	r5, r3
 800d35c:	4498      	add	r8, r3
 800d35e:	e7c2      	b.n	800d2e6 <_dtoa_r+0x846>
 800d360:	4603      	mov	r3, r0
 800d362:	e7f6      	b.n	800d352 <_dtoa_r+0x8b2>
 800d364:	f1b9 0f00 	cmp.w	r9, #0
 800d368:	dc38      	bgt.n	800d3dc <_dtoa_r+0x93c>
 800d36a:	9b06      	ldr	r3, [sp, #24]
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	dd35      	ble.n	800d3dc <_dtoa_r+0x93c>
 800d370:	f8cd 9008 	str.w	r9, [sp, #8]
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	b963      	cbnz	r3, 800d392 <_dtoa_r+0x8f2>
 800d378:	4639      	mov	r1, r7
 800d37a:	2205      	movs	r2, #5
 800d37c:	4620      	mov	r0, r4
 800d37e:	f000 fec4 	bl	800e10a <__multadd>
 800d382:	4601      	mov	r1, r0
 800d384:	4607      	mov	r7, r0
 800d386:	9804      	ldr	r0, [sp, #16]
 800d388:	f001 f8c8 	bl	800e51c <__mcmp>
 800d38c:	2800      	cmp	r0, #0
 800d38e:	f73f adcc 	bgt.w	800cf2a <_dtoa_r+0x48a>
 800d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d394:	465d      	mov	r5, fp
 800d396:	ea6f 0a03 	mvn.w	sl, r3
 800d39a:	f04f 0900 	mov.w	r9, #0
 800d39e:	4639      	mov	r1, r7
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f000 fe9b 	bl	800e0dc <_Bfree>
 800d3a6:	2e00      	cmp	r6, #0
 800d3a8:	f43f aeb7 	beq.w	800d11a <_dtoa_r+0x67a>
 800d3ac:	f1b9 0f00 	cmp.w	r9, #0
 800d3b0:	d005      	beq.n	800d3be <_dtoa_r+0x91e>
 800d3b2:	45b1      	cmp	r9, r6
 800d3b4:	d003      	beq.n	800d3be <_dtoa_r+0x91e>
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 fe8f 	bl	800e0dc <_Bfree>
 800d3be:	4631      	mov	r1, r6
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 fe8b 	bl	800e0dc <_Bfree>
 800d3c6:	e6a8      	b.n	800d11a <_dtoa_r+0x67a>
 800d3c8:	2700      	movs	r7, #0
 800d3ca:	463e      	mov	r6, r7
 800d3cc:	e7e1      	b.n	800d392 <_dtoa_r+0x8f2>
 800d3ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d3d2:	463e      	mov	r6, r7
 800d3d4:	e5a9      	b.n	800cf2a <_dtoa_r+0x48a>
 800d3d6:	bf00      	nop
 800d3d8:	40240000 	.word	0x40240000
 800d3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3de:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	f000 80fa 	beq.w	800d5dc <_dtoa_r+0xb3c>
 800d3e8:	2d00      	cmp	r5, #0
 800d3ea:	dd05      	ble.n	800d3f8 <_dtoa_r+0x958>
 800d3ec:	4631      	mov	r1, r6
 800d3ee:	462a      	mov	r2, r5
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f001 f83f 	bl	800e474 <__lshift>
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	9b07      	ldr	r3, [sp, #28]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d04c      	beq.n	800d498 <_dtoa_r+0x9f8>
 800d3fe:	6871      	ldr	r1, [r6, #4]
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fe37 	bl	800e074 <_Balloc>
 800d406:	6932      	ldr	r2, [r6, #16]
 800d408:	3202      	adds	r2, #2
 800d40a:	4605      	mov	r5, r0
 800d40c:	0092      	lsls	r2, r2, #2
 800d40e:	f106 010c 	add.w	r1, r6, #12
 800d412:	300c      	adds	r0, #12
 800d414:	f7fd fc52 	bl	800acbc <memcpy>
 800d418:	2201      	movs	r2, #1
 800d41a:	4629      	mov	r1, r5
 800d41c:	4620      	mov	r0, r4
 800d41e:	f001 f829 	bl	800e474 <__lshift>
 800d422:	9b00      	ldr	r3, [sp, #0]
 800d424:	f8cd b014 	str.w	fp, [sp, #20]
 800d428:	f003 0301 	and.w	r3, r3, #1
 800d42c:	46b1      	mov	r9, r6
 800d42e:	9307      	str	r3, [sp, #28]
 800d430:	4606      	mov	r6, r0
 800d432:	4639      	mov	r1, r7
 800d434:	9804      	ldr	r0, [sp, #16]
 800d436:	f7ff faa5 	bl	800c984 <quorem>
 800d43a:	4649      	mov	r1, r9
 800d43c:	4605      	mov	r5, r0
 800d43e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d442:	9804      	ldr	r0, [sp, #16]
 800d444:	f001 f86a 	bl	800e51c <__mcmp>
 800d448:	4632      	mov	r2, r6
 800d44a:	9000      	str	r0, [sp, #0]
 800d44c:	4639      	mov	r1, r7
 800d44e:	4620      	mov	r0, r4
 800d450:	f001 f87e 	bl	800e550 <__mdiff>
 800d454:	68c3      	ldr	r3, [r0, #12]
 800d456:	4602      	mov	r2, r0
 800d458:	bb03      	cbnz	r3, 800d49c <_dtoa_r+0x9fc>
 800d45a:	4601      	mov	r1, r0
 800d45c:	9008      	str	r0, [sp, #32]
 800d45e:	9804      	ldr	r0, [sp, #16]
 800d460:	f001 f85c 	bl	800e51c <__mcmp>
 800d464:	9a08      	ldr	r2, [sp, #32]
 800d466:	4603      	mov	r3, r0
 800d468:	4611      	mov	r1, r2
 800d46a:	4620      	mov	r0, r4
 800d46c:	9308      	str	r3, [sp, #32]
 800d46e:	f000 fe35 	bl	800e0dc <_Bfree>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	b9a3      	cbnz	r3, 800d4a0 <_dtoa_r+0xa00>
 800d476:	9a06      	ldr	r2, [sp, #24]
 800d478:	b992      	cbnz	r2, 800d4a0 <_dtoa_r+0xa00>
 800d47a:	9a07      	ldr	r2, [sp, #28]
 800d47c:	b982      	cbnz	r2, 800d4a0 <_dtoa_r+0xa00>
 800d47e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d482:	d029      	beq.n	800d4d8 <_dtoa_r+0xa38>
 800d484:	9b00      	ldr	r3, [sp, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	dd01      	ble.n	800d48e <_dtoa_r+0x9ee>
 800d48a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d48e:	9b05      	ldr	r3, [sp, #20]
 800d490:	1c5d      	adds	r5, r3, #1
 800d492:	f883 8000 	strb.w	r8, [r3]
 800d496:	e782      	b.n	800d39e <_dtoa_r+0x8fe>
 800d498:	4630      	mov	r0, r6
 800d49a:	e7c2      	b.n	800d422 <_dtoa_r+0x982>
 800d49c:	2301      	movs	r3, #1
 800d49e:	e7e3      	b.n	800d468 <_dtoa_r+0x9c8>
 800d4a0:	9a00      	ldr	r2, [sp, #0]
 800d4a2:	2a00      	cmp	r2, #0
 800d4a4:	db04      	blt.n	800d4b0 <_dtoa_r+0xa10>
 800d4a6:	d125      	bne.n	800d4f4 <_dtoa_r+0xa54>
 800d4a8:	9a06      	ldr	r2, [sp, #24]
 800d4aa:	bb1a      	cbnz	r2, 800d4f4 <_dtoa_r+0xa54>
 800d4ac:	9a07      	ldr	r2, [sp, #28]
 800d4ae:	bb0a      	cbnz	r2, 800d4f4 <_dtoa_r+0xa54>
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	ddec      	ble.n	800d48e <_dtoa_r+0x9ee>
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	9904      	ldr	r1, [sp, #16]
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f000 ffdb 	bl	800e474 <__lshift>
 800d4be:	4639      	mov	r1, r7
 800d4c0:	9004      	str	r0, [sp, #16]
 800d4c2:	f001 f82b 	bl	800e51c <__mcmp>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	dc03      	bgt.n	800d4d2 <_dtoa_r+0xa32>
 800d4ca:	d1e0      	bne.n	800d48e <_dtoa_r+0x9ee>
 800d4cc:	f018 0f01 	tst.w	r8, #1
 800d4d0:	d0dd      	beq.n	800d48e <_dtoa_r+0x9ee>
 800d4d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4d6:	d1d8      	bne.n	800d48a <_dtoa_r+0x9ea>
 800d4d8:	9b05      	ldr	r3, [sp, #20]
 800d4da:	9a05      	ldr	r2, [sp, #20]
 800d4dc:	1c5d      	adds	r5, r3, #1
 800d4de:	2339      	movs	r3, #57	; 0x39
 800d4e0:	7013      	strb	r3, [r2, #0]
 800d4e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d4e6:	2b39      	cmp	r3, #57	; 0x39
 800d4e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800d4ec:	d04f      	beq.n	800d58e <_dtoa_r+0xaee>
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	7013      	strb	r3, [r2, #0]
 800d4f2:	e754      	b.n	800d39e <_dtoa_r+0x8fe>
 800d4f4:	9a05      	ldr	r2, [sp, #20]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	f102 0501 	add.w	r5, r2, #1
 800d4fc:	dd06      	ble.n	800d50c <_dtoa_r+0xa6c>
 800d4fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d502:	d0e9      	beq.n	800d4d8 <_dtoa_r+0xa38>
 800d504:	f108 0801 	add.w	r8, r8, #1
 800d508:	9b05      	ldr	r3, [sp, #20]
 800d50a:	e7c2      	b.n	800d492 <_dtoa_r+0x9f2>
 800d50c:	9a02      	ldr	r2, [sp, #8]
 800d50e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d512:	eba5 030b 	sub.w	r3, r5, fp
 800d516:	4293      	cmp	r3, r2
 800d518:	d021      	beq.n	800d55e <_dtoa_r+0xabe>
 800d51a:	2300      	movs	r3, #0
 800d51c:	220a      	movs	r2, #10
 800d51e:	9904      	ldr	r1, [sp, #16]
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fdf2 	bl	800e10a <__multadd>
 800d526:	45b1      	cmp	r9, r6
 800d528:	9004      	str	r0, [sp, #16]
 800d52a:	f04f 0300 	mov.w	r3, #0
 800d52e:	f04f 020a 	mov.w	r2, #10
 800d532:	4649      	mov	r1, r9
 800d534:	4620      	mov	r0, r4
 800d536:	d105      	bne.n	800d544 <_dtoa_r+0xaa4>
 800d538:	f000 fde7 	bl	800e10a <__multadd>
 800d53c:	4681      	mov	r9, r0
 800d53e:	4606      	mov	r6, r0
 800d540:	9505      	str	r5, [sp, #20]
 800d542:	e776      	b.n	800d432 <_dtoa_r+0x992>
 800d544:	f000 fde1 	bl	800e10a <__multadd>
 800d548:	4631      	mov	r1, r6
 800d54a:	4681      	mov	r9, r0
 800d54c:	2300      	movs	r3, #0
 800d54e:	220a      	movs	r2, #10
 800d550:	4620      	mov	r0, r4
 800d552:	f000 fdda 	bl	800e10a <__multadd>
 800d556:	4606      	mov	r6, r0
 800d558:	e7f2      	b.n	800d540 <_dtoa_r+0xaa0>
 800d55a:	f04f 0900 	mov.w	r9, #0
 800d55e:	2201      	movs	r2, #1
 800d560:	9904      	ldr	r1, [sp, #16]
 800d562:	4620      	mov	r0, r4
 800d564:	f000 ff86 	bl	800e474 <__lshift>
 800d568:	4639      	mov	r1, r7
 800d56a:	9004      	str	r0, [sp, #16]
 800d56c:	f000 ffd6 	bl	800e51c <__mcmp>
 800d570:	2800      	cmp	r0, #0
 800d572:	dcb6      	bgt.n	800d4e2 <_dtoa_r+0xa42>
 800d574:	d102      	bne.n	800d57c <_dtoa_r+0xadc>
 800d576:	f018 0f01 	tst.w	r8, #1
 800d57a:	d1b2      	bne.n	800d4e2 <_dtoa_r+0xa42>
 800d57c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d580:	2b30      	cmp	r3, #48	; 0x30
 800d582:	f105 32ff 	add.w	r2, r5, #4294967295
 800d586:	f47f af0a 	bne.w	800d39e <_dtoa_r+0x8fe>
 800d58a:	4615      	mov	r5, r2
 800d58c:	e7f6      	b.n	800d57c <_dtoa_r+0xadc>
 800d58e:	4593      	cmp	fp, r2
 800d590:	d105      	bne.n	800d59e <_dtoa_r+0xafe>
 800d592:	2331      	movs	r3, #49	; 0x31
 800d594:	f10a 0a01 	add.w	sl, sl, #1
 800d598:	f88b 3000 	strb.w	r3, [fp]
 800d59c:	e6ff      	b.n	800d39e <_dtoa_r+0x8fe>
 800d59e:	4615      	mov	r5, r2
 800d5a0:	e79f      	b.n	800d4e2 <_dtoa_r+0xa42>
 800d5a2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d608 <_dtoa_r+0xb68>
 800d5a6:	e007      	b.n	800d5b8 <_dtoa_r+0xb18>
 800d5a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5aa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d60c <_dtoa_r+0xb6c>
 800d5ae:	b11b      	cbz	r3, 800d5b8 <_dtoa_r+0xb18>
 800d5b0:	f10b 0308 	add.w	r3, fp, #8
 800d5b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	4658      	mov	r0, fp
 800d5ba:	b017      	add	sp, #92	; 0x5c
 800d5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c0:	9b06      	ldr	r3, [sp, #24]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	f77f ae35 	ble.w	800d232 <_dtoa_r+0x792>
 800d5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5ca:	9307      	str	r3, [sp, #28]
 800d5cc:	e649      	b.n	800d262 <_dtoa_r+0x7c2>
 800d5ce:	9b02      	ldr	r3, [sp, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	dc03      	bgt.n	800d5dc <_dtoa_r+0xb3c>
 800d5d4:	9b06      	ldr	r3, [sp, #24]
 800d5d6:	2b02      	cmp	r3, #2
 800d5d8:	f73f aecc 	bgt.w	800d374 <_dtoa_r+0x8d4>
 800d5dc:	465d      	mov	r5, fp
 800d5de:	4639      	mov	r1, r7
 800d5e0:	9804      	ldr	r0, [sp, #16]
 800d5e2:	f7ff f9cf 	bl	800c984 <quorem>
 800d5e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d5ea:	f805 8b01 	strb.w	r8, [r5], #1
 800d5ee:	9a02      	ldr	r2, [sp, #8]
 800d5f0:	eba5 030b 	sub.w	r3, r5, fp
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	ddb0      	ble.n	800d55a <_dtoa_r+0xaba>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	220a      	movs	r2, #10
 800d5fc:	9904      	ldr	r1, [sp, #16]
 800d5fe:	4620      	mov	r0, r4
 800d600:	f000 fd83 	bl	800e10a <__multadd>
 800d604:	9004      	str	r0, [sp, #16]
 800d606:	e7ea      	b.n	800d5de <_dtoa_r+0xb3e>
 800d608:	0800f1f4 	.word	0x0800f1f4
 800d60c:	0800f270 	.word	0x0800f270

0800d610 <__sflush_r>:
 800d610:	898a      	ldrh	r2, [r1, #12]
 800d612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d616:	4605      	mov	r5, r0
 800d618:	0710      	lsls	r0, r2, #28
 800d61a:	460c      	mov	r4, r1
 800d61c:	d458      	bmi.n	800d6d0 <__sflush_r+0xc0>
 800d61e:	684b      	ldr	r3, [r1, #4]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dc05      	bgt.n	800d630 <__sflush_r+0x20>
 800d624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d626:	2b00      	cmp	r3, #0
 800d628:	dc02      	bgt.n	800d630 <__sflush_r+0x20>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d632:	2e00      	cmp	r6, #0
 800d634:	d0f9      	beq.n	800d62a <__sflush_r+0x1a>
 800d636:	2300      	movs	r3, #0
 800d638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d63c:	682f      	ldr	r7, [r5, #0]
 800d63e:	6a21      	ldr	r1, [r4, #32]
 800d640:	602b      	str	r3, [r5, #0]
 800d642:	d032      	beq.n	800d6aa <__sflush_r+0x9a>
 800d644:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	075a      	lsls	r2, r3, #29
 800d64a:	d505      	bpl.n	800d658 <__sflush_r+0x48>
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	1ac0      	subs	r0, r0, r3
 800d650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d652:	b10b      	cbz	r3, 800d658 <__sflush_r+0x48>
 800d654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d656:	1ac0      	subs	r0, r0, r3
 800d658:	2300      	movs	r3, #0
 800d65a:	4602      	mov	r2, r0
 800d65c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d65e:	6a21      	ldr	r1, [r4, #32]
 800d660:	4628      	mov	r0, r5
 800d662:	47b0      	blx	r6
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	89a3      	ldrh	r3, [r4, #12]
 800d668:	d106      	bne.n	800d678 <__sflush_r+0x68>
 800d66a:	6829      	ldr	r1, [r5, #0]
 800d66c:	291d      	cmp	r1, #29
 800d66e:	d848      	bhi.n	800d702 <__sflush_r+0xf2>
 800d670:	4a29      	ldr	r2, [pc, #164]	; (800d718 <__sflush_r+0x108>)
 800d672:	40ca      	lsrs	r2, r1
 800d674:	07d6      	lsls	r6, r2, #31
 800d676:	d544      	bpl.n	800d702 <__sflush_r+0xf2>
 800d678:	2200      	movs	r2, #0
 800d67a:	6062      	str	r2, [r4, #4]
 800d67c:	04d9      	lsls	r1, r3, #19
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	6022      	str	r2, [r4, #0]
 800d682:	d504      	bpl.n	800d68e <__sflush_r+0x7e>
 800d684:	1c42      	adds	r2, r0, #1
 800d686:	d101      	bne.n	800d68c <__sflush_r+0x7c>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	b903      	cbnz	r3, 800d68e <__sflush_r+0x7e>
 800d68c:	6560      	str	r0, [r4, #84]	; 0x54
 800d68e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d690:	602f      	str	r7, [r5, #0]
 800d692:	2900      	cmp	r1, #0
 800d694:	d0c9      	beq.n	800d62a <__sflush_r+0x1a>
 800d696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d69a:	4299      	cmp	r1, r3
 800d69c:	d002      	beq.n	800d6a4 <__sflush_r+0x94>
 800d69e:	4628      	mov	r0, r5
 800d6a0:	f001 f8f6 	bl	800e890 <_free_r>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	6360      	str	r0, [r4, #52]	; 0x34
 800d6a8:	e7c0      	b.n	800d62c <__sflush_r+0x1c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b0      	blx	r6
 800d6b0:	1c41      	adds	r1, r0, #1
 800d6b2:	d1c8      	bne.n	800d646 <__sflush_r+0x36>
 800d6b4:	682b      	ldr	r3, [r5, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d0c5      	beq.n	800d646 <__sflush_r+0x36>
 800d6ba:	2b1d      	cmp	r3, #29
 800d6bc:	d001      	beq.n	800d6c2 <__sflush_r+0xb2>
 800d6be:	2b16      	cmp	r3, #22
 800d6c0:	d101      	bne.n	800d6c6 <__sflush_r+0xb6>
 800d6c2:	602f      	str	r7, [r5, #0]
 800d6c4:	e7b1      	b.n	800d62a <__sflush_r+0x1a>
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	e7ad      	b.n	800d62c <__sflush_r+0x1c>
 800d6d0:	690f      	ldr	r7, [r1, #16]
 800d6d2:	2f00      	cmp	r7, #0
 800d6d4:	d0a9      	beq.n	800d62a <__sflush_r+0x1a>
 800d6d6:	0793      	lsls	r3, r2, #30
 800d6d8:	680e      	ldr	r6, [r1, #0]
 800d6da:	bf08      	it	eq
 800d6dc:	694b      	ldreq	r3, [r1, #20]
 800d6de:	600f      	str	r7, [r1, #0]
 800d6e0:	bf18      	it	ne
 800d6e2:	2300      	movne	r3, #0
 800d6e4:	eba6 0807 	sub.w	r8, r6, r7
 800d6e8:	608b      	str	r3, [r1, #8]
 800d6ea:	f1b8 0f00 	cmp.w	r8, #0
 800d6ee:	dd9c      	ble.n	800d62a <__sflush_r+0x1a>
 800d6f0:	4643      	mov	r3, r8
 800d6f2:	463a      	mov	r2, r7
 800d6f4:	6a21      	ldr	r1, [r4, #32]
 800d6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b0      	blx	r6
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	dc06      	bgt.n	800d70e <__sflush_r+0xfe>
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	f04f 30ff 	mov.w	r0, #4294967295
 800d70c:	e78e      	b.n	800d62c <__sflush_r+0x1c>
 800d70e:	4407      	add	r7, r0
 800d710:	eba8 0800 	sub.w	r8, r8, r0
 800d714:	e7e9      	b.n	800d6ea <__sflush_r+0xda>
 800d716:	bf00      	nop
 800d718:	20400001 	.word	0x20400001

0800d71c <_fflush_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	690b      	ldr	r3, [r1, #16]
 800d720:	4605      	mov	r5, r0
 800d722:	460c      	mov	r4, r1
 800d724:	b1db      	cbz	r3, 800d75e <_fflush_r+0x42>
 800d726:	b118      	cbz	r0, 800d730 <_fflush_r+0x14>
 800d728:	6983      	ldr	r3, [r0, #24]
 800d72a:	b90b      	cbnz	r3, 800d730 <_fflush_r+0x14>
 800d72c:	f000 f860 	bl	800d7f0 <__sinit>
 800d730:	4b0c      	ldr	r3, [pc, #48]	; (800d764 <_fflush_r+0x48>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d109      	bne.n	800d74a <_fflush_r+0x2e>
 800d736:	686c      	ldr	r4, [r5, #4]
 800d738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d73c:	b17b      	cbz	r3, 800d75e <_fflush_r+0x42>
 800d73e:	4621      	mov	r1, r4
 800d740:	4628      	mov	r0, r5
 800d742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d746:	f7ff bf63 	b.w	800d610 <__sflush_r>
 800d74a:	4b07      	ldr	r3, [pc, #28]	; (800d768 <_fflush_r+0x4c>)
 800d74c:	429c      	cmp	r4, r3
 800d74e:	d101      	bne.n	800d754 <_fflush_r+0x38>
 800d750:	68ac      	ldr	r4, [r5, #8]
 800d752:	e7f1      	b.n	800d738 <_fflush_r+0x1c>
 800d754:	4b05      	ldr	r3, [pc, #20]	; (800d76c <_fflush_r+0x50>)
 800d756:	429c      	cmp	r4, r3
 800d758:	bf08      	it	eq
 800d75a:	68ec      	ldreq	r4, [r5, #12]
 800d75c:	e7ec      	b.n	800d738 <_fflush_r+0x1c>
 800d75e:	2000      	movs	r0, #0
 800d760:	bd38      	pop	{r3, r4, r5, pc}
 800d762:	bf00      	nop
 800d764:	0800f2a0 	.word	0x0800f2a0
 800d768:	0800f2c0 	.word	0x0800f2c0
 800d76c:	0800f280 	.word	0x0800f280

0800d770 <std>:
 800d770:	2300      	movs	r3, #0
 800d772:	b510      	push	{r4, lr}
 800d774:	4604      	mov	r4, r0
 800d776:	e9c0 3300 	strd	r3, r3, [r0]
 800d77a:	6083      	str	r3, [r0, #8]
 800d77c:	8181      	strh	r1, [r0, #12]
 800d77e:	6643      	str	r3, [r0, #100]	; 0x64
 800d780:	81c2      	strh	r2, [r0, #14]
 800d782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d786:	6183      	str	r3, [r0, #24]
 800d788:	4619      	mov	r1, r3
 800d78a:	2208      	movs	r2, #8
 800d78c:	305c      	adds	r0, #92	; 0x5c
 800d78e:	f7fd faa0 	bl	800acd2 <memset>
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <std+0x38>)
 800d794:	6263      	str	r3, [r4, #36]	; 0x24
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <std+0x3c>)
 800d798:	62a3      	str	r3, [r4, #40]	; 0x28
 800d79a:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <std+0x40>)
 800d79c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d79e:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <std+0x44>)
 800d7a0:	6224      	str	r4, [r4, #32]
 800d7a2:	6323      	str	r3, [r4, #48]	; 0x30
 800d7a4:	bd10      	pop	{r4, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0800ef25 	.word	0x0800ef25
 800d7ac:	0800ef47 	.word	0x0800ef47
 800d7b0:	0800ef7f 	.word	0x0800ef7f
 800d7b4:	0800efa3 	.word	0x0800efa3

0800d7b8 <_cleanup_r>:
 800d7b8:	4901      	ldr	r1, [pc, #4]	; (800d7c0 <_cleanup_r+0x8>)
 800d7ba:	f000 b885 	b.w	800d8c8 <_fwalk_reent>
 800d7be:	bf00      	nop
 800d7c0:	0800d71d 	.word	0x0800d71d

0800d7c4 <__sfmoreglue>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	1e4a      	subs	r2, r1, #1
 800d7c8:	2568      	movs	r5, #104	; 0x68
 800d7ca:	4355      	muls	r5, r2
 800d7cc:	460e      	mov	r6, r1
 800d7ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7d2:	f001 f8ab 	bl	800e92c <_malloc_r>
 800d7d6:	4604      	mov	r4, r0
 800d7d8:	b140      	cbz	r0, 800d7ec <__sfmoreglue+0x28>
 800d7da:	2100      	movs	r1, #0
 800d7dc:	e9c0 1600 	strd	r1, r6, [r0]
 800d7e0:	300c      	adds	r0, #12
 800d7e2:	60a0      	str	r0, [r4, #8]
 800d7e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7e8:	f7fd fa73 	bl	800acd2 <memset>
 800d7ec:	4620      	mov	r0, r4
 800d7ee:	bd70      	pop	{r4, r5, r6, pc}

0800d7f0 <__sinit>:
 800d7f0:	6983      	ldr	r3, [r0, #24]
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	bb33      	cbnz	r3, 800d846 <__sinit+0x56>
 800d7f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d7fc:	6503      	str	r3, [r0, #80]	; 0x50
 800d7fe:	4b12      	ldr	r3, [pc, #72]	; (800d848 <__sinit+0x58>)
 800d800:	4a12      	ldr	r2, [pc, #72]	; (800d84c <__sinit+0x5c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6282      	str	r2, [r0, #40]	; 0x28
 800d806:	4298      	cmp	r0, r3
 800d808:	bf04      	itt	eq
 800d80a:	2301      	moveq	r3, #1
 800d80c:	6183      	streq	r3, [r0, #24]
 800d80e:	f000 f81f 	bl	800d850 <__sfp>
 800d812:	6060      	str	r0, [r4, #4]
 800d814:	4620      	mov	r0, r4
 800d816:	f000 f81b 	bl	800d850 <__sfp>
 800d81a:	60a0      	str	r0, [r4, #8]
 800d81c:	4620      	mov	r0, r4
 800d81e:	f000 f817 	bl	800d850 <__sfp>
 800d822:	2200      	movs	r2, #0
 800d824:	60e0      	str	r0, [r4, #12]
 800d826:	2104      	movs	r1, #4
 800d828:	6860      	ldr	r0, [r4, #4]
 800d82a:	f7ff ffa1 	bl	800d770 <std>
 800d82e:	2201      	movs	r2, #1
 800d830:	2109      	movs	r1, #9
 800d832:	68a0      	ldr	r0, [r4, #8]
 800d834:	f7ff ff9c 	bl	800d770 <std>
 800d838:	2202      	movs	r2, #2
 800d83a:	2112      	movs	r1, #18
 800d83c:	68e0      	ldr	r0, [r4, #12]
 800d83e:	f7ff ff97 	bl	800d770 <std>
 800d842:	2301      	movs	r3, #1
 800d844:	61a3      	str	r3, [r4, #24]
 800d846:	bd10      	pop	{r4, pc}
 800d848:	0800f1e0 	.word	0x0800f1e0
 800d84c:	0800d7b9 	.word	0x0800d7b9

0800d850 <__sfp>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <__sfp+0x70>)
 800d854:	681e      	ldr	r6, [r3, #0]
 800d856:	69b3      	ldr	r3, [r6, #24]
 800d858:	4607      	mov	r7, r0
 800d85a:	b913      	cbnz	r3, 800d862 <__sfp+0x12>
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7ff ffc7 	bl	800d7f0 <__sinit>
 800d862:	3648      	adds	r6, #72	; 0x48
 800d864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d868:	3b01      	subs	r3, #1
 800d86a:	d503      	bpl.n	800d874 <__sfp+0x24>
 800d86c:	6833      	ldr	r3, [r6, #0]
 800d86e:	b133      	cbz	r3, 800d87e <__sfp+0x2e>
 800d870:	6836      	ldr	r6, [r6, #0]
 800d872:	e7f7      	b.n	800d864 <__sfp+0x14>
 800d874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d878:	b16d      	cbz	r5, 800d896 <__sfp+0x46>
 800d87a:	3468      	adds	r4, #104	; 0x68
 800d87c:	e7f4      	b.n	800d868 <__sfp+0x18>
 800d87e:	2104      	movs	r1, #4
 800d880:	4638      	mov	r0, r7
 800d882:	f7ff ff9f 	bl	800d7c4 <__sfmoreglue>
 800d886:	6030      	str	r0, [r6, #0]
 800d888:	2800      	cmp	r0, #0
 800d88a:	d1f1      	bne.n	800d870 <__sfp+0x20>
 800d88c:	230c      	movs	r3, #12
 800d88e:	603b      	str	r3, [r7, #0]
 800d890:	4604      	mov	r4, r0
 800d892:	4620      	mov	r0, r4
 800d894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d896:	4b0b      	ldr	r3, [pc, #44]	; (800d8c4 <__sfp+0x74>)
 800d898:	6665      	str	r5, [r4, #100]	; 0x64
 800d89a:	e9c4 5500 	strd	r5, r5, [r4]
 800d89e:	60a5      	str	r5, [r4, #8]
 800d8a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d8a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d8a8:	2208      	movs	r2, #8
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8b0:	f7fd fa0f 	bl	800acd2 <memset>
 800d8b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8bc:	e7e9      	b.n	800d892 <__sfp+0x42>
 800d8be:	bf00      	nop
 800d8c0:	0800f1e0 	.word	0x0800f1e0
 800d8c4:	ffff0001 	.word	0xffff0001

0800d8c8 <_fwalk_reent>:
 800d8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8cc:	4680      	mov	r8, r0
 800d8ce:	4689      	mov	r9, r1
 800d8d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8d4:	2600      	movs	r6, #0
 800d8d6:	b914      	cbnz	r4, 800d8de <_fwalk_reent+0x16>
 800d8d8:	4630      	mov	r0, r6
 800d8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d8e2:	3f01      	subs	r7, #1
 800d8e4:	d501      	bpl.n	800d8ea <_fwalk_reent+0x22>
 800d8e6:	6824      	ldr	r4, [r4, #0]
 800d8e8:	e7f5      	b.n	800d8d6 <_fwalk_reent+0xe>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d907      	bls.n	800d900 <_fwalk_reent+0x38>
 800d8f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	d003      	beq.n	800d900 <_fwalk_reent+0x38>
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	4640      	mov	r0, r8
 800d8fc:	47c8      	blx	r9
 800d8fe:	4306      	orrs	r6, r0
 800d900:	3568      	adds	r5, #104	; 0x68
 800d902:	e7ee      	b.n	800d8e2 <_fwalk_reent+0x1a>

0800d904 <rshift>:
 800d904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d906:	6906      	ldr	r6, [r0, #16]
 800d908:	114b      	asrs	r3, r1, #5
 800d90a:	429e      	cmp	r6, r3
 800d90c:	f100 0414 	add.w	r4, r0, #20
 800d910:	dd30      	ble.n	800d974 <rshift+0x70>
 800d912:	f011 011f 	ands.w	r1, r1, #31
 800d916:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d91a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800d91e:	d108      	bne.n	800d932 <rshift+0x2e>
 800d920:	4621      	mov	r1, r4
 800d922:	42b2      	cmp	r2, r6
 800d924:	460b      	mov	r3, r1
 800d926:	d211      	bcs.n	800d94c <rshift+0x48>
 800d928:	f852 3b04 	ldr.w	r3, [r2], #4
 800d92c:	f841 3b04 	str.w	r3, [r1], #4
 800d930:	e7f7      	b.n	800d922 <rshift+0x1e>
 800d932:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800d936:	f1c1 0c20 	rsb	ip, r1, #32
 800d93a:	40cd      	lsrs	r5, r1
 800d93c:	3204      	adds	r2, #4
 800d93e:	4623      	mov	r3, r4
 800d940:	42b2      	cmp	r2, r6
 800d942:	4617      	mov	r7, r2
 800d944:	d30c      	bcc.n	800d960 <rshift+0x5c>
 800d946:	601d      	str	r5, [r3, #0]
 800d948:	b105      	cbz	r5, 800d94c <rshift+0x48>
 800d94a:	3304      	adds	r3, #4
 800d94c:	1b1a      	subs	r2, r3, r4
 800d94e:	42a3      	cmp	r3, r4
 800d950:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d954:	bf08      	it	eq
 800d956:	2300      	moveq	r3, #0
 800d958:	6102      	str	r2, [r0, #16]
 800d95a:	bf08      	it	eq
 800d95c:	6143      	streq	r3, [r0, #20]
 800d95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d960:	683f      	ldr	r7, [r7, #0]
 800d962:	fa07 f70c 	lsl.w	r7, r7, ip
 800d966:	433d      	orrs	r5, r7
 800d968:	f843 5b04 	str.w	r5, [r3], #4
 800d96c:	f852 5b04 	ldr.w	r5, [r2], #4
 800d970:	40cd      	lsrs	r5, r1
 800d972:	e7e5      	b.n	800d940 <rshift+0x3c>
 800d974:	4623      	mov	r3, r4
 800d976:	e7e9      	b.n	800d94c <rshift+0x48>

0800d978 <__hexdig_fun>:
 800d978:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d97c:	2b09      	cmp	r3, #9
 800d97e:	d802      	bhi.n	800d986 <__hexdig_fun+0xe>
 800d980:	3820      	subs	r0, #32
 800d982:	b2c0      	uxtb	r0, r0
 800d984:	4770      	bx	lr
 800d986:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d98a:	2b05      	cmp	r3, #5
 800d98c:	d801      	bhi.n	800d992 <__hexdig_fun+0x1a>
 800d98e:	3847      	subs	r0, #71	; 0x47
 800d990:	e7f7      	b.n	800d982 <__hexdig_fun+0xa>
 800d992:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d996:	2b05      	cmp	r3, #5
 800d998:	d801      	bhi.n	800d99e <__hexdig_fun+0x26>
 800d99a:	3827      	subs	r0, #39	; 0x27
 800d99c:	e7f1      	b.n	800d982 <__hexdig_fun+0xa>
 800d99e:	2000      	movs	r0, #0
 800d9a0:	4770      	bx	lr

0800d9a2 <__gethex>:
 800d9a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a6:	b08b      	sub	sp, #44	; 0x2c
 800d9a8:	468a      	mov	sl, r1
 800d9aa:	9002      	str	r0, [sp, #8]
 800d9ac:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d9ae:	9306      	str	r3, [sp, #24]
 800d9b0:	4690      	mov	r8, r2
 800d9b2:	f000 fad0 	bl	800df56 <__localeconv_l>
 800d9b6:	6803      	ldr	r3, [r0, #0]
 800d9b8:	9303      	str	r3, [sp, #12]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7f2 fc08 	bl	80001d0 <strlen>
 800d9c0:	9b03      	ldr	r3, [sp, #12]
 800d9c2:	9001      	str	r0, [sp, #4]
 800d9c4:	4403      	add	r3, r0
 800d9c6:	f04f 0b00 	mov.w	fp, #0
 800d9ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d9ce:	9307      	str	r3, [sp, #28]
 800d9d0:	f8da 3000 	ldr.w	r3, [sl]
 800d9d4:	3302      	adds	r3, #2
 800d9d6:	461f      	mov	r7, r3
 800d9d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9dc:	2830      	cmp	r0, #48	; 0x30
 800d9de:	d06c      	beq.n	800daba <__gethex+0x118>
 800d9e0:	f7ff ffca 	bl	800d978 <__hexdig_fun>
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d16a      	bne.n	800dac0 <__gethex+0x11e>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	9903      	ldr	r1, [sp, #12]
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f001 fadb 	bl	800efaa <strncmp>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d166      	bne.n	800dac6 <__gethex+0x124>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	5cf8      	ldrb	r0, [r7, r3]
 800d9fc:	18fe      	adds	r6, r7, r3
 800d9fe:	f7ff ffbb 	bl	800d978 <__hexdig_fun>
 800da02:	2800      	cmp	r0, #0
 800da04:	d062      	beq.n	800dacc <__gethex+0x12a>
 800da06:	4633      	mov	r3, r6
 800da08:	7818      	ldrb	r0, [r3, #0]
 800da0a:	2830      	cmp	r0, #48	; 0x30
 800da0c:	461f      	mov	r7, r3
 800da0e:	f103 0301 	add.w	r3, r3, #1
 800da12:	d0f9      	beq.n	800da08 <__gethex+0x66>
 800da14:	f7ff ffb0 	bl	800d978 <__hexdig_fun>
 800da18:	fab0 f580 	clz	r5, r0
 800da1c:	096d      	lsrs	r5, r5, #5
 800da1e:	4634      	mov	r4, r6
 800da20:	f04f 0b01 	mov.w	fp, #1
 800da24:	463a      	mov	r2, r7
 800da26:	4616      	mov	r6, r2
 800da28:	3201      	adds	r2, #1
 800da2a:	7830      	ldrb	r0, [r6, #0]
 800da2c:	f7ff ffa4 	bl	800d978 <__hexdig_fun>
 800da30:	2800      	cmp	r0, #0
 800da32:	d1f8      	bne.n	800da26 <__gethex+0x84>
 800da34:	9a01      	ldr	r2, [sp, #4]
 800da36:	9903      	ldr	r1, [sp, #12]
 800da38:	4630      	mov	r0, r6
 800da3a:	f001 fab6 	bl	800efaa <strncmp>
 800da3e:	b950      	cbnz	r0, 800da56 <__gethex+0xb4>
 800da40:	b954      	cbnz	r4, 800da58 <__gethex+0xb6>
 800da42:	9b01      	ldr	r3, [sp, #4]
 800da44:	18f4      	adds	r4, r6, r3
 800da46:	4622      	mov	r2, r4
 800da48:	4616      	mov	r6, r2
 800da4a:	3201      	adds	r2, #1
 800da4c:	7830      	ldrb	r0, [r6, #0]
 800da4e:	f7ff ff93 	bl	800d978 <__hexdig_fun>
 800da52:	2800      	cmp	r0, #0
 800da54:	d1f8      	bne.n	800da48 <__gethex+0xa6>
 800da56:	b10c      	cbz	r4, 800da5c <__gethex+0xba>
 800da58:	1ba4      	subs	r4, r4, r6
 800da5a:	00a4      	lsls	r4, r4, #2
 800da5c:	7833      	ldrb	r3, [r6, #0]
 800da5e:	2b50      	cmp	r3, #80	; 0x50
 800da60:	d001      	beq.n	800da66 <__gethex+0xc4>
 800da62:	2b70      	cmp	r3, #112	; 0x70
 800da64:	d140      	bne.n	800dae8 <__gethex+0x146>
 800da66:	7873      	ldrb	r3, [r6, #1]
 800da68:	2b2b      	cmp	r3, #43	; 0x2b
 800da6a:	d031      	beq.n	800dad0 <__gethex+0x12e>
 800da6c:	2b2d      	cmp	r3, #45	; 0x2d
 800da6e:	d033      	beq.n	800dad8 <__gethex+0x136>
 800da70:	1c71      	adds	r1, r6, #1
 800da72:	f04f 0900 	mov.w	r9, #0
 800da76:	7808      	ldrb	r0, [r1, #0]
 800da78:	f7ff ff7e 	bl	800d978 <__hexdig_fun>
 800da7c:	1e43      	subs	r3, r0, #1
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b18      	cmp	r3, #24
 800da82:	d831      	bhi.n	800dae8 <__gethex+0x146>
 800da84:	f1a0 0210 	sub.w	r2, r0, #16
 800da88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800da8c:	f7ff ff74 	bl	800d978 <__hexdig_fun>
 800da90:	1e43      	subs	r3, r0, #1
 800da92:	b2db      	uxtb	r3, r3
 800da94:	2b18      	cmp	r3, #24
 800da96:	d922      	bls.n	800dade <__gethex+0x13c>
 800da98:	f1b9 0f00 	cmp.w	r9, #0
 800da9c:	d000      	beq.n	800daa0 <__gethex+0xfe>
 800da9e:	4252      	negs	r2, r2
 800daa0:	4414      	add	r4, r2
 800daa2:	f8ca 1000 	str.w	r1, [sl]
 800daa6:	b30d      	cbz	r5, 800daec <__gethex+0x14a>
 800daa8:	f1bb 0f00 	cmp.w	fp, #0
 800daac:	bf0c      	ite	eq
 800daae:	2706      	moveq	r7, #6
 800dab0:	2700      	movne	r7, #0
 800dab2:	4638      	mov	r0, r7
 800dab4:	b00b      	add	sp, #44	; 0x2c
 800dab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daba:	f10b 0b01 	add.w	fp, fp, #1
 800dabe:	e78a      	b.n	800d9d6 <__gethex+0x34>
 800dac0:	2500      	movs	r5, #0
 800dac2:	462c      	mov	r4, r5
 800dac4:	e7ae      	b.n	800da24 <__gethex+0x82>
 800dac6:	463e      	mov	r6, r7
 800dac8:	2501      	movs	r5, #1
 800daca:	e7c7      	b.n	800da5c <__gethex+0xba>
 800dacc:	4604      	mov	r4, r0
 800dace:	e7fb      	b.n	800dac8 <__gethex+0x126>
 800dad0:	f04f 0900 	mov.w	r9, #0
 800dad4:	1cb1      	adds	r1, r6, #2
 800dad6:	e7ce      	b.n	800da76 <__gethex+0xd4>
 800dad8:	f04f 0901 	mov.w	r9, #1
 800dadc:	e7fa      	b.n	800dad4 <__gethex+0x132>
 800dade:	230a      	movs	r3, #10
 800dae0:	fb03 0202 	mla	r2, r3, r2, r0
 800dae4:	3a10      	subs	r2, #16
 800dae6:	e7cf      	b.n	800da88 <__gethex+0xe6>
 800dae8:	4631      	mov	r1, r6
 800daea:	e7da      	b.n	800daa2 <__gethex+0x100>
 800daec:	1bf3      	subs	r3, r6, r7
 800daee:	3b01      	subs	r3, #1
 800daf0:	4629      	mov	r1, r5
 800daf2:	2b07      	cmp	r3, #7
 800daf4:	dc49      	bgt.n	800db8a <__gethex+0x1e8>
 800daf6:	9802      	ldr	r0, [sp, #8]
 800daf8:	f000 fabc 	bl	800e074 <_Balloc>
 800dafc:	9b01      	ldr	r3, [sp, #4]
 800dafe:	f100 0914 	add.w	r9, r0, #20
 800db02:	f04f 0b00 	mov.w	fp, #0
 800db06:	f1c3 0301 	rsb	r3, r3, #1
 800db0a:	4605      	mov	r5, r0
 800db0c:	f8cd 9010 	str.w	r9, [sp, #16]
 800db10:	46da      	mov	sl, fp
 800db12:	9308      	str	r3, [sp, #32]
 800db14:	42b7      	cmp	r7, r6
 800db16:	d33b      	bcc.n	800db90 <__gethex+0x1ee>
 800db18:	9804      	ldr	r0, [sp, #16]
 800db1a:	f840 ab04 	str.w	sl, [r0], #4
 800db1e:	eba0 0009 	sub.w	r0, r0, r9
 800db22:	1080      	asrs	r0, r0, #2
 800db24:	6128      	str	r0, [r5, #16]
 800db26:	0147      	lsls	r7, r0, #5
 800db28:	4650      	mov	r0, sl
 800db2a:	f000 fb67 	bl	800e1fc <__hi0bits>
 800db2e:	f8d8 6000 	ldr.w	r6, [r8]
 800db32:	1a3f      	subs	r7, r7, r0
 800db34:	42b7      	cmp	r7, r6
 800db36:	dd64      	ble.n	800dc02 <__gethex+0x260>
 800db38:	1bbf      	subs	r7, r7, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	4628      	mov	r0, r5
 800db3e:	f000 fe77 	bl	800e830 <__any_on>
 800db42:	4682      	mov	sl, r0
 800db44:	b178      	cbz	r0, 800db66 <__gethex+0x1c4>
 800db46:	1e7b      	subs	r3, r7, #1
 800db48:	1159      	asrs	r1, r3, #5
 800db4a:	f003 021f 	and.w	r2, r3, #31
 800db4e:	f04f 0a01 	mov.w	sl, #1
 800db52:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800db56:	fa0a f202 	lsl.w	r2, sl, r2
 800db5a:	420a      	tst	r2, r1
 800db5c:	d003      	beq.n	800db66 <__gethex+0x1c4>
 800db5e:	4553      	cmp	r3, sl
 800db60:	dc46      	bgt.n	800dbf0 <__gethex+0x24e>
 800db62:	f04f 0a02 	mov.w	sl, #2
 800db66:	4639      	mov	r1, r7
 800db68:	4628      	mov	r0, r5
 800db6a:	f7ff fecb 	bl	800d904 <rshift>
 800db6e:	443c      	add	r4, r7
 800db70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800db74:	42a3      	cmp	r3, r4
 800db76:	da52      	bge.n	800dc1e <__gethex+0x27c>
 800db78:	4629      	mov	r1, r5
 800db7a:	9802      	ldr	r0, [sp, #8]
 800db7c:	f000 faae 	bl	800e0dc <_Bfree>
 800db80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db82:	2300      	movs	r3, #0
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	27a3      	movs	r7, #163	; 0xa3
 800db88:	e793      	b.n	800dab2 <__gethex+0x110>
 800db8a:	3101      	adds	r1, #1
 800db8c:	105b      	asrs	r3, r3, #1
 800db8e:	e7b0      	b.n	800daf2 <__gethex+0x150>
 800db90:	1e73      	subs	r3, r6, #1
 800db92:	9305      	str	r3, [sp, #20]
 800db94:	9a07      	ldr	r2, [sp, #28]
 800db96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d018      	beq.n	800dbd0 <__gethex+0x22e>
 800db9e:	f1bb 0f20 	cmp.w	fp, #32
 800dba2:	d107      	bne.n	800dbb4 <__gethex+0x212>
 800dba4:	9b04      	ldr	r3, [sp, #16]
 800dba6:	f8c3 a000 	str.w	sl, [r3]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	f04f 0a00 	mov.w	sl, #0
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	46d3      	mov	fp, sl
 800dbb4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dbb8:	f7ff fede 	bl	800d978 <__hexdig_fun>
 800dbbc:	f000 000f 	and.w	r0, r0, #15
 800dbc0:	fa00 f00b 	lsl.w	r0, r0, fp
 800dbc4:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbc8:	f10b 0b04 	add.w	fp, fp, #4
 800dbcc:	9b05      	ldr	r3, [sp, #20]
 800dbce:	e00d      	b.n	800dbec <__gethex+0x24a>
 800dbd0:	9b05      	ldr	r3, [sp, #20]
 800dbd2:	9a08      	ldr	r2, [sp, #32]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	42bb      	cmp	r3, r7
 800dbd8:	d3e1      	bcc.n	800db9e <__gethex+0x1fc>
 800dbda:	4618      	mov	r0, r3
 800dbdc:	9a01      	ldr	r2, [sp, #4]
 800dbde:	9903      	ldr	r1, [sp, #12]
 800dbe0:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe2:	f001 f9e2 	bl	800efaa <strncmp>
 800dbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbe8:	2800      	cmp	r0, #0
 800dbea:	d1d8      	bne.n	800db9e <__gethex+0x1fc>
 800dbec:	461e      	mov	r6, r3
 800dbee:	e791      	b.n	800db14 <__gethex+0x172>
 800dbf0:	1eb9      	subs	r1, r7, #2
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	f000 fe1c 	bl	800e830 <__any_on>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	d0b2      	beq.n	800db62 <__gethex+0x1c0>
 800dbfc:	f04f 0a03 	mov.w	sl, #3
 800dc00:	e7b1      	b.n	800db66 <__gethex+0x1c4>
 800dc02:	da09      	bge.n	800dc18 <__gethex+0x276>
 800dc04:	1bf7      	subs	r7, r6, r7
 800dc06:	4629      	mov	r1, r5
 800dc08:	463a      	mov	r2, r7
 800dc0a:	9802      	ldr	r0, [sp, #8]
 800dc0c:	f000 fc32 	bl	800e474 <__lshift>
 800dc10:	1be4      	subs	r4, r4, r7
 800dc12:	4605      	mov	r5, r0
 800dc14:	f100 0914 	add.w	r9, r0, #20
 800dc18:	f04f 0a00 	mov.w	sl, #0
 800dc1c:	e7a8      	b.n	800db70 <__gethex+0x1ce>
 800dc1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dc22:	42a0      	cmp	r0, r4
 800dc24:	dd6a      	ble.n	800dcfc <__gethex+0x35a>
 800dc26:	1b04      	subs	r4, r0, r4
 800dc28:	42a6      	cmp	r6, r4
 800dc2a:	dc2e      	bgt.n	800dc8a <__gethex+0x2e8>
 800dc2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	d022      	beq.n	800dc7a <__gethex+0x2d8>
 800dc34:	2b03      	cmp	r3, #3
 800dc36:	d024      	beq.n	800dc82 <__gethex+0x2e0>
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d115      	bne.n	800dc68 <__gethex+0x2c6>
 800dc3c:	42a6      	cmp	r6, r4
 800dc3e:	d113      	bne.n	800dc68 <__gethex+0x2c6>
 800dc40:	2e01      	cmp	r6, #1
 800dc42:	dc0b      	bgt.n	800dc5c <__gethex+0x2ba>
 800dc44:	9a06      	ldr	r2, [sp, #24]
 800dc46:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dc4a:	6013      	str	r3, [r2, #0]
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	612b      	str	r3, [r5, #16]
 800dc50:	f8c9 3000 	str.w	r3, [r9]
 800dc54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc56:	2762      	movs	r7, #98	; 0x62
 800dc58:	601d      	str	r5, [r3, #0]
 800dc5a:	e72a      	b.n	800dab2 <__gethex+0x110>
 800dc5c:	1e71      	subs	r1, r6, #1
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f000 fde6 	bl	800e830 <__any_on>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d1ed      	bne.n	800dc44 <__gethex+0x2a2>
 800dc68:	4629      	mov	r1, r5
 800dc6a:	9802      	ldr	r0, [sp, #8]
 800dc6c:	f000 fa36 	bl	800e0dc <_Bfree>
 800dc70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc72:	2300      	movs	r3, #0
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	2750      	movs	r7, #80	; 0x50
 800dc78:	e71b      	b.n	800dab2 <__gethex+0x110>
 800dc7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0e1      	beq.n	800dc44 <__gethex+0x2a2>
 800dc80:	e7f2      	b.n	800dc68 <__gethex+0x2c6>
 800dc82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d1dd      	bne.n	800dc44 <__gethex+0x2a2>
 800dc88:	e7ee      	b.n	800dc68 <__gethex+0x2c6>
 800dc8a:	1e67      	subs	r7, r4, #1
 800dc8c:	f1ba 0f00 	cmp.w	sl, #0
 800dc90:	d131      	bne.n	800dcf6 <__gethex+0x354>
 800dc92:	b127      	cbz	r7, 800dc9e <__gethex+0x2fc>
 800dc94:	4639      	mov	r1, r7
 800dc96:	4628      	mov	r0, r5
 800dc98:	f000 fdca 	bl	800e830 <__any_on>
 800dc9c:	4682      	mov	sl, r0
 800dc9e:	117a      	asrs	r2, r7, #5
 800dca0:	2301      	movs	r3, #1
 800dca2:	f007 071f 	and.w	r7, r7, #31
 800dca6:	fa03 f707 	lsl.w	r7, r3, r7
 800dcaa:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800dcae:	4621      	mov	r1, r4
 800dcb0:	421f      	tst	r7, r3
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	bf18      	it	ne
 800dcb6:	f04a 0a02 	orrne.w	sl, sl, #2
 800dcba:	1b36      	subs	r6, r6, r4
 800dcbc:	f7ff fe22 	bl	800d904 <rshift>
 800dcc0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800dcc4:	2702      	movs	r7, #2
 800dcc6:	f1ba 0f00 	cmp.w	sl, #0
 800dcca:	d048      	beq.n	800dd5e <__gethex+0x3bc>
 800dccc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d015      	beq.n	800dd00 <__gethex+0x35e>
 800dcd4:	2b03      	cmp	r3, #3
 800dcd6:	d017      	beq.n	800dd08 <__gethex+0x366>
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d109      	bne.n	800dcf0 <__gethex+0x34e>
 800dcdc:	f01a 0f02 	tst.w	sl, #2
 800dce0:	d006      	beq.n	800dcf0 <__gethex+0x34e>
 800dce2:	f8d9 3000 	ldr.w	r3, [r9]
 800dce6:	ea4a 0a03 	orr.w	sl, sl, r3
 800dcea:	f01a 0f01 	tst.w	sl, #1
 800dcee:	d10e      	bne.n	800dd0e <__gethex+0x36c>
 800dcf0:	f047 0710 	orr.w	r7, r7, #16
 800dcf4:	e033      	b.n	800dd5e <__gethex+0x3bc>
 800dcf6:	f04f 0a01 	mov.w	sl, #1
 800dcfa:	e7d0      	b.n	800dc9e <__gethex+0x2fc>
 800dcfc:	2701      	movs	r7, #1
 800dcfe:	e7e2      	b.n	800dcc6 <__gethex+0x324>
 800dd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd02:	f1c3 0301 	rsb	r3, r3, #1
 800dd06:	9315      	str	r3, [sp, #84]	; 0x54
 800dd08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d0f0      	beq.n	800dcf0 <__gethex+0x34e>
 800dd0e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dd12:	f105 0314 	add.w	r3, r5, #20
 800dd16:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dd1a:	eb03 010a 	add.w	r1, r3, sl
 800dd1e:	f04f 0c00 	mov.w	ip, #0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd28:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dd2c:	d01c      	beq.n	800dd68 <__gethex+0x3c6>
 800dd2e:	3201      	adds	r2, #1
 800dd30:	6002      	str	r2, [r0, #0]
 800dd32:	2f02      	cmp	r7, #2
 800dd34:	f105 0314 	add.w	r3, r5, #20
 800dd38:	d138      	bne.n	800ddac <__gethex+0x40a>
 800dd3a:	f8d8 2000 	ldr.w	r2, [r8]
 800dd3e:	3a01      	subs	r2, #1
 800dd40:	42b2      	cmp	r2, r6
 800dd42:	d10a      	bne.n	800dd5a <__gethex+0x3b8>
 800dd44:	1171      	asrs	r1, r6, #5
 800dd46:	2201      	movs	r2, #1
 800dd48:	f006 061f 	and.w	r6, r6, #31
 800dd4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dd50:	fa02 f606 	lsl.w	r6, r2, r6
 800dd54:	421e      	tst	r6, r3
 800dd56:	bf18      	it	ne
 800dd58:	4617      	movne	r7, r2
 800dd5a:	f047 0720 	orr.w	r7, r7, #32
 800dd5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dd60:	601d      	str	r5, [r3, #0]
 800dd62:	9b06      	ldr	r3, [sp, #24]
 800dd64:	601c      	str	r4, [r3, #0]
 800dd66:	e6a4      	b.n	800dab2 <__gethex+0x110>
 800dd68:	4299      	cmp	r1, r3
 800dd6a:	f843 cc04 	str.w	ip, [r3, #-4]
 800dd6e:	d8d8      	bhi.n	800dd22 <__gethex+0x380>
 800dd70:	68ab      	ldr	r3, [r5, #8]
 800dd72:	4599      	cmp	r9, r3
 800dd74:	db12      	blt.n	800dd9c <__gethex+0x3fa>
 800dd76:	6869      	ldr	r1, [r5, #4]
 800dd78:	9802      	ldr	r0, [sp, #8]
 800dd7a:	3101      	adds	r1, #1
 800dd7c:	f000 f97a 	bl	800e074 <_Balloc>
 800dd80:	692a      	ldr	r2, [r5, #16]
 800dd82:	3202      	adds	r2, #2
 800dd84:	f105 010c 	add.w	r1, r5, #12
 800dd88:	4683      	mov	fp, r0
 800dd8a:	0092      	lsls	r2, r2, #2
 800dd8c:	300c      	adds	r0, #12
 800dd8e:	f7fc ff95 	bl	800acbc <memcpy>
 800dd92:	4629      	mov	r1, r5
 800dd94:	9802      	ldr	r0, [sp, #8]
 800dd96:	f000 f9a1 	bl	800e0dc <_Bfree>
 800dd9a:	465d      	mov	r5, fp
 800dd9c:	692b      	ldr	r3, [r5, #16]
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800dda4:	612a      	str	r2, [r5, #16]
 800dda6:	2201      	movs	r2, #1
 800dda8:	615a      	str	r2, [r3, #20]
 800ddaa:	e7c2      	b.n	800dd32 <__gethex+0x390>
 800ddac:	692a      	ldr	r2, [r5, #16]
 800ddae:	454a      	cmp	r2, r9
 800ddb0:	dd0b      	ble.n	800ddca <__gethex+0x428>
 800ddb2:	2101      	movs	r1, #1
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	f7ff fda5 	bl	800d904 <rshift>
 800ddba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ddbe:	3401      	adds	r4, #1
 800ddc0:	42a3      	cmp	r3, r4
 800ddc2:	f6ff aed9 	blt.w	800db78 <__gethex+0x1d6>
 800ddc6:	2701      	movs	r7, #1
 800ddc8:	e7c7      	b.n	800dd5a <__gethex+0x3b8>
 800ddca:	f016 061f 	ands.w	r6, r6, #31
 800ddce:	d0fa      	beq.n	800ddc6 <__gethex+0x424>
 800ddd0:	449a      	add	sl, r3
 800ddd2:	f1c6 0620 	rsb	r6, r6, #32
 800ddd6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ddda:	f000 fa0f 	bl	800e1fc <__hi0bits>
 800ddde:	42b0      	cmp	r0, r6
 800dde0:	dbe7      	blt.n	800ddb2 <__gethex+0x410>
 800dde2:	e7f0      	b.n	800ddc6 <__gethex+0x424>

0800dde4 <L_shift>:
 800dde4:	f1c2 0208 	rsb	r2, r2, #8
 800dde8:	0092      	lsls	r2, r2, #2
 800ddea:	b570      	push	{r4, r5, r6, lr}
 800ddec:	f1c2 0620 	rsb	r6, r2, #32
 800ddf0:	6843      	ldr	r3, [r0, #4]
 800ddf2:	6804      	ldr	r4, [r0, #0]
 800ddf4:	fa03 f506 	lsl.w	r5, r3, r6
 800ddf8:	432c      	orrs	r4, r5
 800ddfa:	40d3      	lsrs	r3, r2
 800ddfc:	6004      	str	r4, [r0, #0]
 800ddfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800de02:	4288      	cmp	r0, r1
 800de04:	d3f4      	bcc.n	800ddf0 <L_shift+0xc>
 800de06:	bd70      	pop	{r4, r5, r6, pc}

0800de08 <__match>:
 800de08:	b530      	push	{r4, r5, lr}
 800de0a:	6803      	ldr	r3, [r0, #0]
 800de0c:	3301      	adds	r3, #1
 800de0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de12:	b914      	cbnz	r4, 800de1a <__match+0x12>
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	2001      	movs	r0, #1
 800de18:	bd30      	pop	{r4, r5, pc}
 800de1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800de22:	2d19      	cmp	r5, #25
 800de24:	bf98      	it	ls
 800de26:	3220      	addls	r2, #32
 800de28:	42a2      	cmp	r2, r4
 800de2a:	d0f0      	beq.n	800de0e <__match+0x6>
 800de2c:	2000      	movs	r0, #0
 800de2e:	e7f3      	b.n	800de18 <__match+0x10>

0800de30 <__hexnan>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	680b      	ldr	r3, [r1, #0]
 800de36:	6801      	ldr	r1, [r0, #0]
 800de38:	115f      	asrs	r7, r3, #5
 800de3a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800de3e:	f013 031f 	ands.w	r3, r3, #31
 800de42:	b087      	sub	sp, #28
 800de44:	bf18      	it	ne
 800de46:	3704      	addne	r7, #4
 800de48:	2500      	movs	r5, #0
 800de4a:	1f3e      	subs	r6, r7, #4
 800de4c:	4682      	mov	sl, r0
 800de4e:	4690      	mov	r8, r2
 800de50:	9301      	str	r3, [sp, #4]
 800de52:	f847 5c04 	str.w	r5, [r7, #-4]
 800de56:	46b1      	mov	r9, r6
 800de58:	4634      	mov	r4, r6
 800de5a:	9502      	str	r5, [sp, #8]
 800de5c:	46ab      	mov	fp, r5
 800de5e:	784a      	ldrb	r2, [r1, #1]
 800de60:	1c4b      	adds	r3, r1, #1
 800de62:	9303      	str	r3, [sp, #12]
 800de64:	b342      	cbz	r2, 800deb8 <__hexnan+0x88>
 800de66:	4610      	mov	r0, r2
 800de68:	9105      	str	r1, [sp, #20]
 800de6a:	9204      	str	r2, [sp, #16]
 800de6c:	f7ff fd84 	bl	800d978 <__hexdig_fun>
 800de70:	2800      	cmp	r0, #0
 800de72:	d143      	bne.n	800defc <__hexnan+0xcc>
 800de74:	9a04      	ldr	r2, [sp, #16]
 800de76:	9905      	ldr	r1, [sp, #20]
 800de78:	2a20      	cmp	r2, #32
 800de7a:	d818      	bhi.n	800deae <__hexnan+0x7e>
 800de7c:	9b02      	ldr	r3, [sp, #8]
 800de7e:	459b      	cmp	fp, r3
 800de80:	dd13      	ble.n	800deaa <__hexnan+0x7a>
 800de82:	454c      	cmp	r4, r9
 800de84:	d206      	bcs.n	800de94 <__hexnan+0x64>
 800de86:	2d07      	cmp	r5, #7
 800de88:	dc04      	bgt.n	800de94 <__hexnan+0x64>
 800de8a:	462a      	mov	r2, r5
 800de8c:	4649      	mov	r1, r9
 800de8e:	4620      	mov	r0, r4
 800de90:	f7ff ffa8 	bl	800dde4 <L_shift>
 800de94:	4544      	cmp	r4, r8
 800de96:	d944      	bls.n	800df22 <__hexnan+0xf2>
 800de98:	2300      	movs	r3, #0
 800de9a:	f1a4 0904 	sub.w	r9, r4, #4
 800de9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dea2:	f8cd b008 	str.w	fp, [sp, #8]
 800dea6:	464c      	mov	r4, r9
 800dea8:	461d      	mov	r5, r3
 800deaa:	9903      	ldr	r1, [sp, #12]
 800deac:	e7d7      	b.n	800de5e <__hexnan+0x2e>
 800deae:	2a29      	cmp	r2, #41	; 0x29
 800deb0:	d14a      	bne.n	800df48 <__hexnan+0x118>
 800deb2:	3102      	adds	r1, #2
 800deb4:	f8ca 1000 	str.w	r1, [sl]
 800deb8:	f1bb 0f00 	cmp.w	fp, #0
 800debc:	d044      	beq.n	800df48 <__hexnan+0x118>
 800debe:	454c      	cmp	r4, r9
 800dec0:	d206      	bcs.n	800ded0 <__hexnan+0xa0>
 800dec2:	2d07      	cmp	r5, #7
 800dec4:	dc04      	bgt.n	800ded0 <__hexnan+0xa0>
 800dec6:	462a      	mov	r2, r5
 800dec8:	4649      	mov	r1, r9
 800deca:	4620      	mov	r0, r4
 800decc:	f7ff ff8a 	bl	800dde4 <L_shift>
 800ded0:	4544      	cmp	r4, r8
 800ded2:	d928      	bls.n	800df26 <__hexnan+0xf6>
 800ded4:	4643      	mov	r3, r8
 800ded6:	f854 2b04 	ldr.w	r2, [r4], #4
 800deda:	f843 2b04 	str.w	r2, [r3], #4
 800dede:	42a6      	cmp	r6, r4
 800dee0:	d2f9      	bcs.n	800ded6 <__hexnan+0xa6>
 800dee2:	2200      	movs	r2, #0
 800dee4:	f843 2b04 	str.w	r2, [r3], #4
 800dee8:	429e      	cmp	r6, r3
 800deea:	d2fb      	bcs.n	800dee4 <__hexnan+0xb4>
 800deec:	6833      	ldr	r3, [r6, #0]
 800deee:	b91b      	cbnz	r3, 800def8 <__hexnan+0xc8>
 800def0:	4546      	cmp	r6, r8
 800def2:	d127      	bne.n	800df44 <__hexnan+0x114>
 800def4:	2301      	movs	r3, #1
 800def6:	6033      	str	r3, [r6, #0]
 800def8:	2005      	movs	r0, #5
 800defa:	e026      	b.n	800df4a <__hexnan+0x11a>
 800defc:	3501      	adds	r5, #1
 800defe:	2d08      	cmp	r5, #8
 800df00:	f10b 0b01 	add.w	fp, fp, #1
 800df04:	dd06      	ble.n	800df14 <__hexnan+0xe4>
 800df06:	4544      	cmp	r4, r8
 800df08:	d9cf      	bls.n	800deaa <__hexnan+0x7a>
 800df0a:	2300      	movs	r3, #0
 800df0c:	f844 3c04 	str.w	r3, [r4, #-4]
 800df10:	2501      	movs	r5, #1
 800df12:	3c04      	subs	r4, #4
 800df14:	6822      	ldr	r2, [r4, #0]
 800df16:	f000 000f 	and.w	r0, r0, #15
 800df1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800df1e:	6020      	str	r0, [r4, #0]
 800df20:	e7c3      	b.n	800deaa <__hexnan+0x7a>
 800df22:	2508      	movs	r5, #8
 800df24:	e7c1      	b.n	800deaa <__hexnan+0x7a>
 800df26:	9b01      	ldr	r3, [sp, #4]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d0df      	beq.n	800deec <__hexnan+0xbc>
 800df2c:	f04f 32ff 	mov.w	r2, #4294967295
 800df30:	f1c3 0320 	rsb	r3, r3, #32
 800df34:	fa22 f303 	lsr.w	r3, r2, r3
 800df38:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800df3c:	401a      	ands	r2, r3
 800df3e:	f847 2c04 	str.w	r2, [r7, #-4]
 800df42:	e7d3      	b.n	800deec <__hexnan+0xbc>
 800df44:	3e04      	subs	r6, #4
 800df46:	e7d1      	b.n	800deec <__hexnan+0xbc>
 800df48:	2004      	movs	r0, #4
 800df4a:	b007      	add	sp, #28
 800df4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df50 <__locale_ctype_ptr_l>:
 800df50:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800df54:	4770      	bx	lr

0800df56 <__localeconv_l>:
 800df56:	30f0      	adds	r0, #240	; 0xf0
 800df58:	4770      	bx	lr
	...

0800df5c <_localeconv_r>:
 800df5c:	4b04      	ldr	r3, [pc, #16]	; (800df70 <_localeconv_r+0x14>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6a18      	ldr	r0, [r3, #32]
 800df62:	4b04      	ldr	r3, [pc, #16]	; (800df74 <_localeconv_r+0x18>)
 800df64:	2800      	cmp	r0, #0
 800df66:	bf08      	it	eq
 800df68:	4618      	moveq	r0, r3
 800df6a:	30f0      	adds	r0, #240	; 0xf0
 800df6c:	4770      	bx	lr
 800df6e:	bf00      	nop
 800df70:	20000040 	.word	0x20000040
 800df74:	200000a4 	.word	0x200000a4

0800df78 <__swhatbuf_r>:
 800df78:	b570      	push	{r4, r5, r6, lr}
 800df7a:	460e      	mov	r6, r1
 800df7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df80:	2900      	cmp	r1, #0
 800df82:	b096      	sub	sp, #88	; 0x58
 800df84:	4614      	mov	r4, r2
 800df86:	461d      	mov	r5, r3
 800df88:	da07      	bge.n	800df9a <__swhatbuf_r+0x22>
 800df8a:	2300      	movs	r3, #0
 800df8c:	602b      	str	r3, [r5, #0]
 800df8e:	89b3      	ldrh	r3, [r6, #12]
 800df90:	061a      	lsls	r2, r3, #24
 800df92:	d410      	bmi.n	800dfb6 <__swhatbuf_r+0x3e>
 800df94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df98:	e00e      	b.n	800dfb8 <__swhatbuf_r+0x40>
 800df9a:	466a      	mov	r2, sp
 800df9c:	f001 f846 	bl	800f02c <_fstat_r>
 800dfa0:	2800      	cmp	r0, #0
 800dfa2:	dbf2      	blt.n	800df8a <__swhatbuf_r+0x12>
 800dfa4:	9a01      	ldr	r2, [sp, #4]
 800dfa6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dfae:	425a      	negs	r2, r3
 800dfb0:	415a      	adcs	r2, r3
 800dfb2:	602a      	str	r2, [r5, #0]
 800dfb4:	e7ee      	b.n	800df94 <__swhatbuf_r+0x1c>
 800dfb6:	2340      	movs	r3, #64	; 0x40
 800dfb8:	2000      	movs	r0, #0
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	b016      	add	sp, #88	; 0x58
 800dfbe:	bd70      	pop	{r4, r5, r6, pc}

0800dfc0 <__smakebuf_r>:
 800dfc0:	898b      	ldrh	r3, [r1, #12]
 800dfc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfc4:	079d      	lsls	r5, r3, #30
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	460c      	mov	r4, r1
 800dfca:	d507      	bpl.n	800dfdc <__smakebuf_r+0x1c>
 800dfcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dfd0:	6023      	str	r3, [r4, #0]
 800dfd2:	6123      	str	r3, [r4, #16]
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	6163      	str	r3, [r4, #20]
 800dfd8:	b002      	add	sp, #8
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	ab01      	add	r3, sp, #4
 800dfde:	466a      	mov	r2, sp
 800dfe0:	f7ff ffca 	bl	800df78 <__swhatbuf_r>
 800dfe4:	9900      	ldr	r1, [sp, #0]
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 fc9f 	bl	800e92c <_malloc_r>
 800dfee:	b948      	cbnz	r0, 800e004 <__smakebuf_r+0x44>
 800dff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff4:	059a      	lsls	r2, r3, #22
 800dff6:	d4ef      	bmi.n	800dfd8 <__smakebuf_r+0x18>
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	f043 0302 	orr.w	r3, r3, #2
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	e7e3      	b.n	800dfcc <__smakebuf_r+0xc>
 800e004:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <__smakebuf_r+0x7c>)
 800e006:	62b3      	str	r3, [r6, #40]	; 0x28
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	6020      	str	r0, [r4, #0]
 800e00c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e010:	81a3      	strh	r3, [r4, #12]
 800e012:	9b00      	ldr	r3, [sp, #0]
 800e014:	6163      	str	r3, [r4, #20]
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	6120      	str	r0, [r4, #16]
 800e01a:	b15b      	cbz	r3, 800e034 <__smakebuf_r+0x74>
 800e01c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e020:	4630      	mov	r0, r6
 800e022:	f001 f815 	bl	800f050 <_isatty_r>
 800e026:	b128      	cbz	r0, 800e034 <__smakebuf_r+0x74>
 800e028:	89a3      	ldrh	r3, [r4, #12]
 800e02a:	f023 0303 	bic.w	r3, r3, #3
 800e02e:	f043 0301 	orr.w	r3, r3, #1
 800e032:	81a3      	strh	r3, [r4, #12]
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	431d      	orrs	r5, r3
 800e038:	81a5      	strh	r5, [r4, #12]
 800e03a:	e7cd      	b.n	800dfd8 <__smakebuf_r+0x18>
 800e03c:	0800d7b9 	.word	0x0800d7b9

0800e040 <malloc>:
 800e040:	4b02      	ldr	r3, [pc, #8]	; (800e04c <malloc+0xc>)
 800e042:	4601      	mov	r1, r0
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f000 bc71 	b.w	800e92c <_malloc_r>
 800e04a:	bf00      	nop
 800e04c:	20000040 	.word	0x20000040

0800e050 <__ascii_mbtowc>:
 800e050:	b082      	sub	sp, #8
 800e052:	b901      	cbnz	r1, 800e056 <__ascii_mbtowc+0x6>
 800e054:	a901      	add	r1, sp, #4
 800e056:	b142      	cbz	r2, 800e06a <__ascii_mbtowc+0x1a>
 800e058:	b14b      	cbz	r3, 800e06e <__ascii_mbtowc+0x1e>
 800e05a:	7813      	ldrb	r3, [r2, #0]
 800e05c:	600b      	str	r3, [r1, #0]
 800e05e:	7812      	ldrb	r2, [r2, #0]
 800e060:	1c10      	adds	r0, r2, #0
 800e062:	bf18      	it	ne
 800e064:	2001      	movne	r0, #1
 800e066:	b002      	add	sp, #8
 800e068:	4770      	bx	lr
 800e06a:	4610      	mov	r0, r2
 800e06c:	e7fb      	b.n	800e066 <__ascii_mbtowc+0x16>
 800e06e:	f06f 0001 	mvn.w	r0, #1
 800e072:	e7f8      	b.n	800e066 <__ascii_mbtowc+0x16>

0800e074 <_Balloc>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e078:	4604      	mov	r4, r0
 800e07a:	460e      	mov	r6, r1
 800e07c:	b93d      	cbnz	r5, 800e08e <_Balloc+0x1a>
 800e07e:	2010      	movs	r0, #16
 800e080:	f7ff ffde 	bl	800e040 <malloc>
 800e084:	6260      	str	r0, [r4, #36]	; 0x24
 800e086:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e08a:	6005      	str	r5, [r0, #0]
 800e08c:	60c5      	str	r5, [r0, #12]
 800e08e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e090:	68eb      	ldr	r3, [r5, #12]
 800e092:	b183      	cbz	r3, 800e0b6 <_Balloc+0x42>
 800e094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e09c:	b9b8      	cbnz	r0, 800e0ce <_Balloc+0x5a>
 800e09e:	2101      	movs	r1, #1
 800e0a0:	fa01 f506 	lsl.w	r5, r1, r6
 800e0a4:	1d6a      	adds	r2, r5, #5
 800e0a6:	0092      	lsls	r2, r2, #2
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 fbe2 	bl	800e872 <_calloc_r>
 800e0ae:	b160      	cbz	r0, 800e0ca <_Balloc+0x56>
 800e0b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e0b4:	e00e      	b.n	800e0d4 <_Balloc+0x60>
 800e0b6:	2221      	movs	r2, #33	; 0x21
 800e0b8:	2104      	movs	r1, #4
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f000 fbd9 	bl	800e872 <_calloc_r>
 800e0c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0c2:	60e8      	str	r0, [r5, #12]
 800e0c4:	68db      	ldr	r3, [r3, #12]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e4      	bne.n	800e094 <_Balloc+0x20>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	bd70      	pop	{r4, r5, r6, pc}
 800e0ce:	6802      	ldr	r2, [r0, #0]
 800e0d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0da:	e7f7      	b.n	800e0cc <_Balloc+0x58>

0800e0dc <_Bfree>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	b93c      	cbnz	r4, 800e0f6 <_Bfree+0x1a>
 800e0e6:	2010      	movs	r0, #16
 800e0e8:	f7ff ffaa 	bl	800e040 <malloc>
 800e0ec:	6270      	str	r0, [r6, #36]	; 0x24
 800e0ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e0f2:	6004      	str	r4, [r0, #0]
 800e0f4:	60c4      	str	r4, [r0, #12]
 800e0f6:	b13d      	cbz	r5, 800e108 <_Bfree+0x2c>
 800e0f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e0fa:	686a      	ldr	r2, [r5, #4]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e102:	6029      	str	r1, [r5, #0]
 800e104:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e108:	bd70      	pop	{r4, r5, r6, pc}

0800e10a <__multadd>:
 800e10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10e:	690d      	ldr	r5, [r1, #16]
 800e110:	461f      	mov	r7, r3
 800e112:	4606      	mov	r6, r0
 800e114:	460c      	mov	r4, r1
 800e116:	f101 0c14 	add.w	ip, r1, #20
 800e11a:	2300      	movs	r3, #0
 800e11c:	f8dc 0000 	ldr.w	r0, [ip]
 800e120:	b281      	uxth	r1, r0
 800e122:	fb02 7101 	mla	r1, r2, r1, r7
 800e126:	0c0f      	lsrs	r7, r1, #16
 800e128:	0c00      	lsrs	r0, r0, #16
 800e12a:	fb02 7000 	mla	r0, r2, r0, r7
 800e12e:	b289      	uxth	r1, r1
 800e130:	3301      	adds	r3, #1
 800e132:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e136:	429d      	cmp	r5, r3
 800e138:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e13c:	f84c 1b04 	str.w	r1, [ip], #4
 800e140:	dcec      	bgt.n	800e11c <__multadd+0x12>
 800e142:	b1d7      	cbz	r7, 800e17a <__multadd+0x70>
 800e144:	68a3      	ldr	r3, [r4, #8]
 800e146:	42ab      	cmp	r3, r5
 800e148:	dc12      	bgt.n	800e170 <__multadd+0x66>
 800e14a:	6861      	ldr	r1, [r4, #4]
 800e14c:	4630      	mov	r0, r6
 800e14e:	3101      	adds	r1, #1
 800e150:	f7ff ff90 	bl	800e074 <_Balloc>
 800e154:	6922      	ldr	r2, [r4, #16]
 800e156:	3202      	adds	r2, #2
 800e158:	f104 010c 	add.w	r1, r4, #12
 800e15c:	4680      	mov	r8, r0
 800e15e:	0092      	lsls	r2, r2, #2
 800e160:	300c      	adds	r0, #12
 800e162:	f7fc fdab 	bl	800acbc <memcpy>
 800e166:	4621      	mov	r1, r4
 800e168:	4630      	mov	r0, r6
 800e16a:	f7ff ffb7 	bl	800e0dc <_Bfree>
 800e16e:	4644      	mov	r4, r8
 800e170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e174:	3501      	adds	r5, #1
 800e176:	615f      	str	r7, [r3, #20]
 800e178:	6125      	str	r5, [r4, #16]
 800e17a:	4620      	mov	r0, r4
 800e17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e180 <__s2b>:
 800e180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e184:	460c      	mov	r4, r1
 800e186:	4615      	mov	r5, r2
 800e188:	461f      	mov	r7, r3
 800e18a:	2209      	movs	r2, #9
 800e18c:	3308      	adds	r3, #8
 800e18e:	4606      	mov	r6, r0
 800e190:	fb93 f3f2 	sdiv	r3, r3, r2
 800e194:	2100      	movs	r1, #0
 800e196:	2201      	movs	r2, #1
 800e198:	429a      	cmp	r2, r3
 800e19a:	db20      	blt.n	800e1de <__s2b+0x5e>
 800e19c:	4630      	mov	r0, r6
 800e19e:	f7ff ff69 	bl	800e074 <_Balloc>
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	6143      	str	r3, [r0, #20]
 800e1a6:	2d09      	cmp	r5, #9
 800e1a8:	f04f 0301 	mov.w	r3, #1
 800e1ac:	6103      	str	r3, [r0, #16]
 800e1ae:	dd19      	ble.n	800e1e4 <__s2b+0x64>
 800e1b0:	f104 0809 	add.w	r8, r4, #9
 800e1b4:	46c1      	mov	r9, r8
 800e1b6:	442c      	add	r4, r5
 800e1b8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e1bc:	4601      	mov	r1, r0
 800e1be:	3b30      	subs	r3, #48	; 0x30
 800e1c0:	220a      	movs	r2, #10
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f7ff ffa1 	bl	800e10a <__multadd>
 800e1c8:	45a1      	cmp	r9, r4
 800e1ca:	d1f5      	bne.n	800e1b8 <__s2b+0x38>
 800e1cc:	eb08 0405 	add.w	r4, r8, r5
 800e1d0:	3c08      	subs	r4, #8
 800e1d2:	1b2d      	subs	r5, r5, r4
 800e1d4:	1963      	adds	r3, r4, r5
 800e1d6:	42bb      	cmp	r3, r7
 800e1d8:	db07      	blt.n	800e1ea <__s2b+0x6a>
 800e1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1de:	0052      	lsls	r2, r2, #1
 800e1e0:	3101      	adds	r1, #1
 800e1e2:	e7d9      	b.n	800e198 <__s2b+0x18>
 800e1e4:	340a      	adds	r4, #10
 800e1e6:	2509      	movs	r5, #9
 800e1e8:	e7f3      	b.n	800e1d2 <__s2b+0x52>
 800e1ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1ee:	4601      	mov	r1, r0
 800e1f0:	3b30      	subs	r3, #48	; 0x30
 800e1f2:	220a      	movs	r2, #10
 800e1f4:	4630      	mov	r0, r6
 800e1f6:	f7ff ff88 	bl	800e10a <__multadd>
 800e1fa:	e7eb      	b.n	800e1d4 <__s2b+0x54>

0800e1fc <__hi0bits>:
 800e1fc:	0c02      	lsrs	r2, r0, #16
 800e1fe:	0412      	lsls	r2, r2, #16
 800e200:	4603      	mov	r3, r0
 800e202:	b9b2      	cbnz	r2, 800e232 <__hi0bits+0x36>
 800e204:	0403      	lsls	r3, r0, #16
 800e206:	2010      	movs	r0, #16
 800e208:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e20c:	bf04      	itt	eq
 800e20e:	021b      	lsleq	r3, r3, #8
 800e210:	3008      	addeq	r0, #8
 800e212:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e216:	bf04      	itt	eq
 800e218:	011b      	lsleq	r3, r3, #4
 800e21a:	3004      	addeq	r0, #4
 800e21c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e220:	bf04      	itt	eq
 800e222:	009b      	lsleq	r3, r3, #2
 800e224:	3002      	addeq	r0, #2
 800e226:	2b00      	cmp	r3, #0
 800e228:	db06      	blt.n	800e238 <__hi0bits+0x3c>
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	d503      	bpl.n	800e236 <__hi0bits+0x3a>
 800e22e:	3001      	adds	r0, #1
 800e230:	4770      	bx	lr
 800e232:	2000      	movs	r0, #0
 800e234:	e7e8      	b.n	800e208 <__hi0bits+0xc>
 800e236:	2020      	movs	r0, #32
 800e238:	4770      	bx	lr

0800e23a <__lo0bits>:
 800e23a:	6803      	ldr	r3, [r0, #0]
 800e23c:	f013 0207 	ands.w	r2, r3, #7
 800e240:	4601      	mov	r1, r0
 800e242:	d00b      	beq.n	800e25c <__lo0bits+0x22>
 800e244:	07da      	lsls	r2, r3, #31
 800e246:	d423      	bmi.n	800e290 <__lo0bits+0x56>
 800e248:	0798      	lsls	r0, r3, #30
 800e24a:	bf49      	itett	mi
 800e24c:	085b      	lsrmi	r3, r3, #1
 800e24e:	089b      	lsrpl	r3, r3, #2
 800e250:	2001      	movmi	r0, #1
 800e252:	600b      	strmi	r3, [r1, #0]
 800e254:	bf5c      	itt	pl
 800e256:	600b      	strpl	r3, [r1, #0]
 800e258:	2002      	movpl	r0, #2
 800e25a:	4770      	bx	lr
 800e25c:	b298      	uxth	r0, r3
 800e25e:	b9a8      	cbnz	r0, 800e28c <__lo0bits+0x52>
 800e260:	0c1b      	lsrs	r3, r3, #16
 800e262:	2010      	movs	r0, #16
 800e264:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e268:	bf04      	itt	eq
 800e26a:	0a1b      	lsreq	r3, r3, #8
 800e26c:	3008      	addeq	r0, #8
 800e26e:	071a      	lsls	r2, r3, #28
 800e270:	bf04      	itt	eq
 800e272:	091b      	lsreq	r3, r3, #4
 800e274:	3004      	addeq	r0, #4
 800e276:	079a      	lsls	r2, r3, #30
 800e278:	bf04      	itt	eq
 800e27a:	089b      	lsreq	r3, r3, #2
 800e27c:	3002      	addeq	r0, #2
 800e27e:	07da      	lsls	r2, r3, #31
 800e280:	d402      	bmi.n	800e288 <__lo0bits+0x4e>
 800e282:	085b      	lsrs	r3, r3, #1
 800e284:	d006      	beq.n	800e294 <__lo0bits+0x5a>
 800e286:	3001      	adds	r0, #1
 800e288:	600b      	str	r3, [r1, #0]
 800e28a:	4770      	bx	lr
 800e28c:	4610      	mov	r0, r2
 800e28e:	e7e9      	b.n	800e264 <__lo0bits+0x2a>
 800e290:	2000      	movs	r0, #0
 800e292:	4770      	bx	lr
 800e294:	2020      	movs	r0, #32
 800e296:	4770      	bx	lr

0800e298 <__i2b>:
 800e298:	b510      	push	{r4, lr}
 800e29a:	460c      	mov	r4, r1
 800e29c:	2101      	movs	r1, #1
 800e29e:	f7ff fee9 	bl	800e074 <_Balloc>
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	6144      	str	r4, [r0, #20]
 800e2a6:	6102      	str	r2, [r0, #16]
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <__multiply>:
 800e2aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ae:	4614      	mov	r4, r2
 800e2b0:	690a      	ldr	r2, [r1, #16]
 800e2b2:	6923      	ldr	r3, [r4, #16]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	bfb8      	it	lt
 800e2b8:	460b      	movlt	r3, r1
 800e2ba:	4688      	mov	r8, r1
 800e2bc:	bfbc      	itt	lt
 800e2be:	46a0      	movlt	r8, r4
 800e2c0:	461c      	movlt	r4, r3
 800e2c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e2c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e2ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e2d2:	eb07 0609 	add.w	r6, r7, r9
 800e2d6:	42b3      	cmp	r3, r6
 800e2d8:	bfb8      	it	lt
 800e2da:	3101      	addlt	r1, #1
 800e2dc:	f7ff feca 	bl	800e074 <_Balloc>
 800e2e0:	f100 0514 	add.w	r5, r0, #20
 800e2e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e2e8:	462b      	mov	r3, r5
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	4573      	cmp	r3, lr
 800e2ee:	d316      	bcc.n	800e31e <__multiply+0x74>
 800e2f0:	f104 0214 	add.w	r2, r4, #20
 800e2f4:	f108 0114 	add.w	r1, r8, #20
 800e2f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e2fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e300:	9300      	str	r3, [sp, #0]
 800e302:	9b00      	ldr	r3, [sp, #0]
 800e304:	9201      	str	r2, [sp, #4]
 800e306:	4293      	cmp	r3, r2
 800e308:	d80c      	bhi.n	800e324 <__multiply+0x7a>
 800e30a:	2e00      	cmp	r6, #0
 800e30c:	dd03      	ble.n	800e316 <__multiply+0x6c>
 800e30e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e312:	2b00      	cmp	r3, #0
 800e314:	d05d      	beq.n	800e3d2 <__multiply+0x128>
 800e316:	6106      	str	r6, [r0, #16]
 800e318:	b003      	add	sp, #12
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	f843 2b04 	str.w	r2, [r3], #4
 800e322:	e7e3      	b.n	800e2ec <__multiply+0x42>
 800e324:	f8b2 b000 	ldrh.w	fp, [r2]
 800e328:	f1bb 0f00 	cmp.w	fp, #0
 800e32c:	d023      	beq.n	800e376 <__multiply+0xcc>
 800e32e:	4689      	mov	r9, r1
 800e330:	46ac      	mov	ip, r5
 800e332:	f04f 0800 	mov.w	r8, #0
 800e336:	f859 4b04 	ldr.w	r4, [r9], #4
 800e33a:	f8dc a000 	ldr.w	sl, [ip]
 800e33e:	b2a3      	uxth	r3, r4
 800e340:	fa1f fa8a 	uxth.w	sl, sl
 800e344:	fb0b a303 	mla	r3, fp, r3, sl
 800e348:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e34c:	f8dc 4000 	ldr.w	r4, [ip]
 800e350:	4443      	add	r3, r8
 800e352:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e356:	fb0b 840a 	mla	r4, fp, sl, r8
 800e35a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e35e:	46e2      	mov	sl, ip
 800e360:	b29b      	uxth	r3, r3
 800e362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e366:	454f      	cmp	r7, r9
 800e368:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e36c:	f84a 3b04 	str.w	r3, [sl], #4
 800e370:	d82b      	bhi.n	800e3ca <__multiply+0x120>
 800e372:	f8cc 8004 	str.w	r8, [ip, #4]
 800e376:	9b01      	ldr	r3, [sp, #4]
 800e378:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e37c:	3204      	adds	r2, #4
 800e37e:	f1ba 0f00 	cmp.w	sl, #0
 800e382:	d020      	beq.n	800e3c6 <__multiply+0x11c>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	4689      	mov	r9, r1
 800e388:	46a8      	mov	r8, r5
 800e38a:	f04f 0b00 	mov.w	fp, #0
 800e38e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e392:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e396:	fb0a 440c 	mla	r4, sl, ip, r4
 800e39a:	445c      	add	r4, fp
 800e39c:	46c4      	mov	ip, r8
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e3a4:	f84c 3b04 	str.w	r3, [ip], #4
 800e3a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e3b0:	0c1b      	lsrs	r3, r3, #16
 800e3b2:	fb0a b303 	mla	r3, sl, r3, fp
 800e3b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e3ba:	454f      	cmp	r7, r9
 800e3bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e3c0:	d805      	bhi.n	800e3ce <__multiply+0x124>
 800e3c2:	f8c8 3004 	str.w	r3, [r8, #4]
 800e3c6:	3504      	adds	r5, #4
 800e3c8:	e79b      	b.n	800e302 <__multiply+0x58>
 800e3ca:	46d4      	mov	ip, sl
 800e3cc:	e7b3      	b.n	800e336 <__multiply+0x8c>
 800e3ce:	46e0      	mov	r8, ip
 800e3d0:	e7dd      	b.n	800e38e <__multiply+0xe4>
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	e799      	b.n	800e30a <__multiply+0x60>
	...

0800e3d8 <__pow5mult>:
 800e3d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3dc:	4615      	mov	r5, r2
 800e3de:	f012 0203 	ands.w	r2, r2, #3
 800e3e2:	4606      	mov	r6, r0
 800e3e4:	460f      	mov	r7, r1
 800e3e6:	d007      	beq.n	800e3f8 <__pow5mult+0x20>
 800e3e8:	3a01      	subs	r2, #1
 800e3ea:	4c21      	ldr	r4, [pc, #132]	; (800e470 <__pow5mult+0x98>)
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e3f2:	f7ff fe8a 	bl	800e10a <__multadd>
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	10ad      	asrs	r5, r5, #2
 800e3fa:	d035      	beq.n	800e468 <__pow5mult+0x90>
 800e3fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e3fe:	b93c      	cbnz	r4, 800e410 <__pow5mult+0x38>
 800e400:	2010      	movs	r0, #16
 800e402:	f7ff fe1d 	bl	800e040 <malloc>
 800e406:	6270      	str	r0, [r6, #36]	; 0x24
 800e408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e40c:	6004      	str	r4, [r0, #0]
 800e40e:	60c4      	str	r4, [r0, #12]
 800e410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e418:	b94c      	cbnz	r4, 800e42e <__pow5mult+0x56>
 800e41a:	f240 2171 	movw	r1, #625	; 0x271
 800e41e:	4630      	mov	r0, r6
 800e420:	f7ff ff3a 	bl	800e298 <__i2b>
 800e424:	2300      	movs	r3, #0
 800e426:	f8c8 0008 	str.w	r0, [r8, #8]
 800e42a:	4604      	mov	r4, r0
 800e42c:	6003      	str	r3, [r0, #0]
 800e42e:	f04f 0800 	mov.w	r8, #0
 800e432:	07eb      	lsls	r3, r5, #31
 800e434:	d50a      	bpl.n	800e44c <__pow5mult+0x74>
 800e436:	4639      	mov	r1, r7
 800e438:	4622      	mov	r2, r4
 800e43a:	4630      	mov	r0, r6
 800e43c:	f7ff ff35 	bl	800e2aa <__multiply>
 800e440:	4639      	mov	r1, r7
 800e442:	4681      	mov	r9, r0
 800e444:	4630      	mov	r0, r6
 800e446:	f7ff fe49 	bl	800e0dc <_Bfree>
 800e44a:	464f      	mov	r7, r9
 800e44c:	106d      	asrs	r5, r5, #1
 800e44e:	d00b      	beq.n	800e468 <__pow5mult+0x90>
 800e450:	6820      	ldr	r0, [r4, #0]
 800e452:	b938      	cbnz	r0, 800e464 <__pow5mult+0x8c>
 800e454:	4622      	mov	r2, r4
 800e456:	4621      	mov	r1, r4
 800e458:	4630      	mov	r0, r6
 800e45a:	f7ff ff26 	bl	800e2aa <__multiply>
 800e45e:	6020      	str	r0, [r4, #0]
 800e460:	f8c0 8000 	str.w	r8, [r0]
 800e464:	4604      	mov	r4, r0
 800e466:	e7e4      	b.n	800e432 <__pow5mult+0x5a>
 800e468:	4638      	mov	r0, r7
 800e46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e46e:	bf00      	nop
 800e470:	0800f3e0 	.word	0x0800f3e0

0800e474 <__lshift>:
 800e474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e478:	460c      	mov	r4, r1
 800e47a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e47e:	6923      	ldr	r3, [r4, #16]
 800e480:	6849      	ldr	r1, [r1, #4]
 800e482:	eb0a 0903 	add.w	r9, sl, r3
 800e486:	68a3      	ldr	r3, [r4, #8]
 800e488:	4607      	mov	r7, r0
 800e48a:	4616      	mov	r6, r2
 800e48c:	f109 0501 	add.w	r5, r9, #1
 800e490:	42ab      	cmp	r3, r5
 800e492:	db32      	blt.n	800e4fa <__lshift+0x86>
 800e494:	4638      	mov	r0, r7
 800e496:	f7ff fded 	bl	800e074 <_Balloc>
 800e49a:	2300      	movs	r3, #0
 800e49c:	4680      	mov	r8, r0
 800e49e:	f100 0114 	add.w	r1, r0, #20
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	4553      	cmp	r3, sl
 800e4a6:	db2b      	blt.n	800e500 <__lshift+0x8c>
 800e4a8:	6920      	ldr	r0, [r4, #16]
 800e4aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4ae:	f104 0314 	add.w	r3, r4, #20
 800e4b2:	f016 021f 	ands.w	r2, r6, #31
 800e4b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e4ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e4be:	d025      	beq.n	800e50c <__lshift+0x98>
 800e4c0:	f1c2 0e20 	rsb	lr, r2, #32
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	681e      	ldr	r6, [r3, #0]
 800e4c8:	468a      	mov	sl, r1
 800e4ca:	4096      	lsls	r6, r2
 800e4cc:	4330      	orrs	r0, r6
 800e4ce:	f84a 0b04 	str.w	r0, [sl], #4
 800e4d2:	f853 0b04 	ldr.w	r0, [r3], #4
 800e4d6:	459c      	cmp	ip, r3
 800e4d8:	fa20 f00e 	lsr.w	r0, r0, lr
 800e4dc:	d814      	bhi.n	800e508 <__lshift+0x94>
 800e4de:	6048      	str	r0, [r1, #4]
 800e4e0:	b108      	cbz	r0, 800e4e6 <__lshift+0x72>
 800e4e2:	f109 0502 	add.w	r5, r9, #2
 800e4e6:	3d01      	subs	r5, #1
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f8c8 5010 	str.w	r5, [r8, #16]
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	f7ff fdf4 	bl	800e0dc <_Bfree>
 800e4f4:	4640      	mov	r0, r8
 800e4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4fa:	3101      	adds	r1, #1
 800e4fc:	005b      	lsls	r3, r3, #1
 800e4fe:	e7c7      	b.n	800e490 <__lshift+0x1c>
 800e500:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e504:	3301      	adds	r3, #1
 800e506:	e7cd      	b.n	800e4a4 <__lshift+0x30>
 800e508:	4651      	mov	r1, sl
 800e50a:	e7dc      	b.n	800e4c6 <__lshift+0x52>
 800e50c:	3904      	subs	r1, #4
 800e50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e512:	f841 2f04 	str.w	r2, [r1, #4]!
 800e516:	459c      	cmp	ip, r3
 800e518:	d8f9      	bhi.n	800e50e <__lshift+0x9a>
 800e51a:	e7e4      	b.n	800e4e6 <__lshift+0x72>

0800e51c <__mcmp>:
 800e51c:	6903      	ldr	r3, [r0, #16]
 800e51e:	690a      	ldr	r2, [r1, #16]
 800e520:	1a9b      	subs	r3, r3, r2
 800e522:	b530      	push	{r4, r5, lr}
 800e524:	d10c      	bne.n	800e540 <__mcmp+0x24>
 800e526:	0092      	lsls	r2, r2, #2
 800e528:	3014      	adds	r0, #20
 800e52a:	3114      	adds	r1, #20
 800e52c:	1884      	adds	r4, r0, r2
 800e52e:	4411      	add	r1, r2
 800e530:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e534:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e538:	4295      	cmp	r5, r2
 800e53a:	d003      	beq.n	800e544 <__mcmp+0x28>
 800e53c:	d305      	bcc.n	800e54a <__mcmp+0x2e>
 800e53e:	2301      	movs	r3, #1
 800e540:	4618      	mov	r0, r3
 800e542:	bd30      	pop	{r4, r5, pc}
 800e544:	42a0      	cmp	r0, r4
 800e546:	d3f3      	bcc.n	800e530 <__mcmp+0x14>
 800e548:	e7fa      	b.n	800e540 <__mcmp+0x24>
 800e54a:	f04f 33ff 	mov.w	r3, #4294967295
 800e54e:	e7f7      	b.n	800e540 <__mcmp+0x24>

0800e550 <__mdiff>:
 800e550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e554:	460d      	mov	r5, r1
 800e556:	4607      	mov	r7, r0
 800e558:	4611      	mov	r1, r2
 800e55a:	4628      	mov	r0, r5
 800e55c:	4614      	mov	r4, r2
 800e55e:	f7ff ffdd 	bl	800e51c <__mcmp>
 800e562:	1e06      	subs	r6, r0, #0
 800e564:	d108      	bne.n	800e578 <__mdiff+0x28>
 800e566:	4631      	mov	r1, r6
 800e568:	4638      	mov	r0, r7
 800e56a:	f7ff fd83 	bl	800e074 <_Balloc>
 800e56e:	2301      	movs	r3, #1
 800e570:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e578:	bfa4      	itt	ge
 800e57a:	4623      	movge	r3, r4
 800e57c:	462c      	movge	r4, r5
 800e57e:	4638      	mov	r0, r7
 800e580:	6861      	ldr	r1, [r4, #4]
 800e582:	bfa6      	itte	ge
 800e584:	461d      	movge	r5, r3
 800e586:	2600      	movge	r6, #0
 800e588:	2601      	movlt	r6, #1
 800e58a:	f7ff fd73 	bl	800e074 <_Balloc>
 800e58e:	692b      	ldr	r3, [r5, #16]
 800e590:	60c6      	str	r6, [r0, #12]
 800e592:	6926      	ldr	r6, [r4, #16]
 800e594:	f105 0914 	add.w	r9, r5, #20
 800e598:	f104 0214 	add.w	r2, r4, #20
 800e59c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e5a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e5a4:	f100 0514 	add.w	r5, r0, #20
 800e5a8:	f04f 0e00 	mov.w	lr, #0
 800e5ac:	f852 ab04 	ldr.w	sl, [r2], #4
 800e5b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800e5b4:	fa1e f18a 	uxtah	r1, lr, sl
 800e5b8:	b2a3      	uxth	r3, r4
 800e5ba:	1ac9      	subs	r1, r1, r3
 800e5bc:	0c23      	lsrs	r3, r4, #16
 800e5be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e5c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e5c6:	b289      	uxth	r1, r1
 800e5c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e5cc:	45c8      	cmp	r8, r9
 800e5ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e5d2:	4694      	mov	ip, r2
 800e5d4:	f845 3b04 	str.w	r3, [r5], #4
 800e5d8:	d8e8      	bhi.n	800e5ac <__mdiff+0x5c>
 800e5da:	45bc      	cmp	ip, r7
 800e5dc:	d304      	bcc.n	800e5e8 <__mdiff+0x98>
 800e5de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e5e2:	b183      	cbz	r3, 800e606 <__mdiff+0xb6>
 800e5e4:	6106      	str	r6, [r0, #16]
 800e5e6:	e7c5      	b.n	800e574 <__mdiff+0x24>
 800e5e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e5ec:	fa1e f381 	uxtah	r3, lr, r1
 800e5f0:	141a      	asrs	r2, r3, #16
 800e5f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e600:	f845 3b04 	str.w	r3, [r5], #4
 800e604:	e7e9      	b.n	800e5da <__mdiff+0x8a>
 800e606:	3e01      	subs	r6, #1
 800e608:	e7e9      	b.n	800e5de <__mdiff+0x8e>
	...

0800e60c <__ulp>:
 800e60c:	4b12      	ldr	r3, [pc, #72]	; (800e658 <__ulp+0x4c>)
 800e60e:	ee10 2a90 	vmov	r2, s1
 800e612:	401a      	ands	r2, r3
 800e614:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dd04      	ble.n	800e626 <__ulp+0x1a>
 800e61c:	2000      	movs	r0, #0
 800e61e:	4619      	mov	r1, r3
 800e620:	ec41 0b10 	vmov	d0, r0, r1
 800e624:	4770      	bx	lr
 800e626:	425b      	negs	r3, r3
 800e628:	151b      	asrs	r3, r3, #20
 800e62a:	2b13      	cmp	r3, #19
 800e62c:	f04f 0000 	mov.w	r0, #0
 800e630:	f04f 0100 	mov.w	r1, #0
 800e634:	dc04      	bgt.n	800e640 <__ulp+0x34>
 800e636:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e63a:	fa42 f103 	asr.w	r1, r2, r3
 800e63e:	e7ef      	b.n	800e620 <__ulp+0x14>
 800e640:	3b14      	subs	r3, #20
 800e642:	2b1e      	cmp	r3, #30
 800e644:	f04f 0201 	mov.w	r2, #1
 800e648:	bfda      	itte	le
 800e64a:	f1c3 031f 	rsble	r3, r3, #31
 800e64e:	fa02 f303 	lslle.w	r3, r2, r3
 800e652:	4613      	movgt	r3, r2
 800e654:	4618      	mov	r0, r3
 800e656:	e7e3      	b.n	800e620 <__ulp+0x14>
 800e658:	7ff00000 	.word	0x7ff00000

0800e65c <__b2d>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	6905      	ldr	r5, [r0, #16]
 800e660:	f100 0714 	add.w	r7, r0, #20
 800e664:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e668:	1f2e      	subs	r6, r5, #4
 800e66a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e66e:	4620      	mov	r0, r4
 800e670:	f7ff fdc4 	bl	800e1fc <__hi0bits>
 800e674:	f1c0 0320 	rsb	r3, r0, #32
 800e678:	280a      	cmp	r0, #10
 800e67a:	600b      	str	r3, [r1, #0]
 800e67c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e6f4 <__b2d+0x98>
 800e680:	dc14      	bgt.n	800e6ac <__b2d+0x50>
 800e682:	f1c0 0e0b 	rsb	lr, r0, #11
 800e686:	fa24 f10e 	lsr.w	r1, r4, lr
 800e68a:	42b7      	cmp	r7, r6
 800e68c:	ea41 030c 	orr.w	r3, r1, ip
 800e690:	bf34      	ite	cc
 800e692:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e696:	2100      	movcs	r1, #0
 800e698:	3015      	adds	r0, #21
 800e69a:	fa04 f000 	lsl.w	r0, r4, r0
 800e69e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e6a2:	ea40 0201 	orr.w	r2, r0, r1
 800e6a6:	ec43 2b10 	vmov	d0, r2, r3
 800e6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6ac:	42b7      	cmp	r7, r6
 800e6ae:	bf3a      	itte	cc
 800e6b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800e6b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e6b8:	2100      	movcs	r1, #0
 800e6ba:	380b      	subs	r0, #11
 800e6bc:	d015      	beq.n	800e6ea <__b2d+0x8e>
 800e6be:	4084      	lsls	r4, r0
 800e6c0:	f1c0 0520 	rsb	r5, r0, #32
 800e6c4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e6c8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e6cc:	42be      	cmp	r6, r7
 800e6ce:	fa21 fc05 	lsr.w	ip, r1, r5
 800e6d2:	ea44 030c 	orr.w	r3, r4, ip
 800e6d6:	bf8c      	ite	hi
 800e6d8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e6dc:	2400      	movls	r4, #0
 800e6de:	fa01 f000 	lsl.w	r0, r1, r0
 800e6e2:	40ec      	lsrs	r4, r5
 800e6e4:	ea40 0204 	orr.w	r2, r0, r4
 800e6e8:	e7dd      	b.n	800e6a6 <__b2d+0x4a>
 800e6ea:	ea44 030c 	orr.w	r3, r4, ip
 800e6ee:	460a      	mov	r2, r1
 800e6f0:	e7d9      	b.n	800e6a6 <__b2d+0x4a>
 800e6f2:	bf00      	nop
 800e6f4:	3ff00000 	.word	0x3ff00000

0800e6f8 <__d2b>:
 800e6f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6fc:	460e      	mov	r6, r1
 800e6fe:	2101      	movs	r1, #1
 800e700:	ec59 8b10 	vmov	r8, r9, d0
 800e704:	4615      	mov	r5, r2
 800e706:	f7ff fcb5 	bl	800e074 <_Balloc>
 800e70a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e70e:	4607      	mov	r7, r0
 800e710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e714:	bb34      	cbnz	r4, 800e764 <__d2b+0x6c>
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	f1b8 0300 	subs.w	r3, r8, #0
 800e71c:	d027      	beq.n	800e76e <__d2b+0x76>
 800e71e:	a802      	add	r0, sp, #8
 800e720:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e724:	f7ff fd89 	bl	800e23a <__lo0bits>
 800e728:	9900      	ldr	r1, [sp, #0]
 800e72a:	b1f0      	cbz	r0, 800e76a <__d2b+0x72>
 800e72c:	9a01      	ldr	r2, [sp, #4]
 800e72e:	f1c0 0320 	rsb	r3, r0, #32
 800e732:	fa02 f303 	lsl.w	r3, r2, r3
 800e736:	430b      	orrs	r3, r1
 800e738:	40c2      	lsrs	r2, r0
 800e73a:	617b      	str	r3, [r7, #20]
 800e73c:	9201      	str	r2, [sp, #4]
 800e73e:	9b01      	ldr	r3, [sp, #4]
 800e740:	61bb      	str	r3, [r7, #24]
 800e742:	2b00      	cmp	r3, #0
 800e744:	bf14      	ite	ne
 800e746:	2102      	movne	r1, #2
 800e748:	2101      	moveq	r1, #1
 800e74a:	6139      	str	r1, [r7, #16]
 800e74c:	b1c4      	cbz	r4, 800e780 <__d2b+0x88>
 800e74e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e752:	4404      	add	r4, r0
 800e754:	6034      	str	r4, [r6, #0]
 800e756:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e75a:	6028      	str	r0, [r5, #0]
 800e75c:	4638      	mov	r0, r7
 800e75e:	b003      	add	sp, #12
 800e760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e764:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e768:	e7d5      	b.n	800e716 <__d2b+0x1e>
 800e76a:	6179      	str	r1, [r7, #20]
 800e76c:	e7e7      	b.n	800e73e <__d2b+0x46>
 800e76e:	a801      	add	r0, sp, #4
 800e770:	f7ff fd63 	bl	800e23a <__lo0bits>
 800e774:	9b01      	ldr	r3, [sp, #4]
 800e776:	617b      	str	r3, [r7, #20]
 800e778:	2101      	movs	r1, #1
 800e77a:	6139      	str	r1, [r7, #16]
 800e77c:	3020      	adds	r0, #32
 800e77e:	e7e5      	b.n	800e74c <__d2b+0x54>
 800e780:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e784:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e788:	6030      	str	r0, [r6, #0]
 800e78a:	6918      	ldr	r0, [r3, #16]
 800e78c:	f7ff fd36 	bl	800e1fc <__hi0bits>
 800e790:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e794:	e7e1      	b.n	800e75a <__d2b+0x62>

0800e796 <__ratio>:
 800e796:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e79a:	4688      	mov	r8, r1
 800e79c:	4669      	mov	r1, sp
 800e79e:	4681      	mov	r9, r0
 800e7a0:	f7ff ff5c 	bl	800e65c <__b2d>
 800e7a4:	a901      	add	r1, sp, #4
 800e7a6:	4640      	mov	r0, r8
 800e7a8:	ec57 6b10 	vmov	r6, r7, d0
 800e7ac:	f7ff ff56 	bl	800e65c <__b2d>
 800e7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e7b8:	eba3 0c02 	sub.w	ip, r3, r2
 800e7bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e7c0:	1a9b      	subs	r3, r3, r2
 800e7c2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e7c6:	ec5b ab10 	vmov	sl, fp, d0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	bfce      	itee	gt
 800e7ce:	463a      	movgt	r2, r7
 800e7d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7d4:	465a      	movle	r2, fp
 800e7d6:	4659      	mov	r1, fp
 800e7d8:	463d      	mov	r5, r7
 800e7da:	bfd4      	ite	le
 800e7dc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800e7e0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	ee10 2a10 	vmov	r2, s0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	4629      	mov	r1, r5
 800e7ee:	f7f2 f82d 	bl	800084c <__aeabi_ddiv>
 800e7f2:	ec41 0b10 	vmov	d0, r0, r1
 800e7f6:	b003      	add	sp, #12
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7fc <__copybits>:
 800e7fc:	3901      	subs	r1, #1
 800e7fe:	b510      	push	{r4, lr}
 800e800:	1149      	asrs	r1, r1, #5
 800e802:	6914      	ldr	r4, [r2, #16]
 800e804:	3101      	adds	r1, #1
 800e806:	f102 0314 	add.w	r3, r2, #20
 800e80a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e80e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e812:	42a3      	cmp	r3, r4
 800e814:	4602      	mov	r2, r0
 800e816:	d303      	bcc.n	800e820 <__copybits+0x24>
 800e818:	2300      	movs	r3, #0
 800e81a:	428a      	cmp	r2, r1
 800e81c:	d305      	bcc.n	800e82a <__copybits+0x2e>
 800e81e:	bd10      	pop	{r4, pc}
 800e820:	f853 2b04 	ldr.w	r2, [r3], #4
 800e824:	f840 2b04 	str.w	r2, [r0], #4
 800e828:	e7f3      	b.n	800e812 <__copybits+0x16>
 800e82a:	f842 3b04 	str.w	r3, [r2], #4
 800e82e:	e7f4      	b.n	800e81a <__copybits+0x1e>

0800e830 <__any_on>:
 800e830:	f100 0214 	add.w	r2, r0, #20
 800e834:	6900      	ldr	r0, [r0, #16]
 800e836:	114b      	asrs	r3, r1, #5
 800e838:	4298      	cmp	r0, r3
 800e83a:	b510      	push	{r4, lr}
 800e83c:	db11      	blt.n	800e862 <__any_on+0x32>
 800e83e:	dd0a      	ble.n	800e856 <__any_on+0x26>
 800e840:	f011 011f 	ands.w	r1, r1, #31
 800e844:	d007      	beq.n	800e856 <__any_on+0x26>
 800e846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e84a:	fa24 f001 	lsr.w	r0, r4, r1
 800e84e:	fa00 f101 	lsl.w	r1, r0, r1
 800e852:	428c      	cmp	r4, r1
 800e854:	d10b      	bne.n	800e86e <__any_on+0x3e>
 800e856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d803      	bhi.n	800e866 <__any_on+0x36>
 800e85e:	2000      	movs	r0, #0
 800e860:	bd10      	pop	{r4, pc}
 800e862:	4603      	mov	r3, r0
 800e864:	e7f7      	b.n	800e856 <__any_on+0x26>
 800e866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e86a:	2900      	cmp	r1, #0
 800e86c:	d0f5      	beq.n	800e85a <__any_on+0x2a>
 800e86e:	2001      	movs	r0, #1
 800e870:	e7f6      	b.n	800e860 <__any_on+0x30>

0800e872 <_calloc_r>:
 800e872:	b538      	push	{r3, r4, r5, lr}
 800e874:	fb02 f401 	mul.w	r4, r2, r1
 800e878:	4621      	mov	r1, r4
 800e87a:	f000 f857 	bl	800e92c <_malloc_r>
 800e87e:	4605      	mov	r5, r0
 800e880:	b118      	cbz	r0, 800e88a <_calloc_r+0x18>
 800e882:	4622      	mov	r2, r4
 800e884:	2100      	movs	r1, #0
 800e886:	f7fc fa24 	bl	800acd2 <memset>
 800e88a:	4628      	mov	r0, r5
 800e88c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e890 <_free_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4605      	mov	r5, r0
 800e894:	2900      	cmp	r1, #0
 800e896:	d045      	beq.n	800e924 <_free_r+0x94>
 800e898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e89c:	1f0c      	subs	r4, r1, #4
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	bfb8      	it	lt
 800e8a2:	18e4      	addlt	r4, r4, r3
 800e8a4:	f000 fc0f 	bl	800f0c6 <__malloc_lock>
 800e8a8:	4a1f      	ldr	r2, [pc, #124]	; (800e928 <_free_r+0x98>)
 800e8aa:	6813      	ldr	r3, [r2, #0]
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	b933      	cbnz	r3, 800e8be <_free_r+0x2e>
 800e8b0:	6063      	str	r3, [r4, #4]
 800e8b2:	6014      	str	r4, [r2, #0]
 800e8b4:	4628      	mov	r0, r5
 800e8b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ba:	f000 bc05 	b.w	800f0c8 <__malloc_unlock>
 800e8be:	42a3      	cmp	r3, r4
 800e8c0:	d90c      	bls.n	800e8dc <_free_r+0x4c>
 800e8c2:	6821      	ldr	r1, [r4, #0]
 800e8c4:	1862      	adds	r2, r4, r1
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	bf04      	itt	eq
 800e8ca:	681a      	ldreq	r2, [r3, #0]
 800e8cc:	685b      	ldreq	r3, [r3, #4]
 800e8ce:	6063      	str	r3, [r4, #4]
 800e8d0:	bf04      	itt	eq
 800e8d2:	1852      	addeq	r2, r2, r1
 800e8d4:	6022      	streq	r2, [r4, #0]
 800e8d6:	6004      	str	r4, [r0, #0]
 800e8d8:	e7ec      	b.n	800e8b4 <_free_r+0x24>
 800e8da:	4613      	mov	r3, r2
 800e8dc:	685a      	ldr	r2, [r3, #4]
 800e8de:	b10a      	cbz	r2, 800e8e4 <_free_r+0x54>
 800e8e0:	42a2      	cmp	r2, r4
 800e8e2:	d9fa      	bls.n	800e8da <_free_r+0x4a>
 800e8e4:	6819      	ldr	r1, [r3, #0]
 800e8e6:	1858      	adds	r0, r3, r1
 800e8e8:	42a0      	cmp	r0, r4
 800e8ea:	d10b      	bne.n	800e904 <_free_r+0x74>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	4401      	add	r1, r0
 800e8f0:	1858      	adds	r0, r3, r1
 800e8f2:	4282      	cmp	r2, r0
 800e8f4:	6019      	str	r1, [r3, #0]
 800e8f6:	d1dd      	bne.n	800e8b4 <_free_r+0x24>
 800e8f8:	6810      	ldr	r0, [r2, #0]
 800e8fa:	6852      	ldr	r2, [r2, #4]
 800e8fc:	605a      	str	r2, [r3, #4]
 800e8fe:	4401      	add	r1, r0
 800e900:	6019      	str	r1, [r3, #0]
 800e902:	e7d7      	b.n	800e8b4 <_free_r+0x24>
 800e904:	d902      	bls.n	800e90c <_free_r+0x7c>
 800e906:	230c      	movs	r3, #12
 800e908:	602b      	str	r3, [r5, #0]
 800e90a:	e7d3      	b.n	800e8b4 <_free_r+0x24>
 800e90c:	6820      	ldr	r0, [r4, #0]
 800e90e:	1821      	adds	r1, r4, r0
 800e910:	428a      	cmp	r2, r1
 800e912:	bf04      	itt	eq
 800e914:	6811      	ldreq	r1, [r2, #0]
 800e916:	6852      	ldreq	r2, [r2, #4]
 800e918:	6062      	str	r2, [r4, #4]
 800e91a:	bf04      	itt	eq
 800e91c:	1809      	addeq	r1, r1, r0
 800e91e:	6021      	streq	r1, [r4, #0]
 800e920:	605c      	str	r4, [r3, #4]
 800e922:	e7c7      	b.n	800e8b4 <_free_r+0x24>
 800e924:	bd38      	pop	{r3, r4, r5, pc}
 800e926:	bf00      	nop
 800e928:	2001f384 	.word	0x2001f384

0800e92c <_malloc_r>:
 800e92c:	b570      	push	{r4, r5, r6, lr}
 800e92e:	1ccd      	adds	r5, r1, #3
 800e930:	f025 0503 	bic.w	r5, r5, #3
 800e934:	3508      	adds	r5, #8
 800e936:	2d0c      	cmp	r5, #12
 800e938:	bf38      	it	cc
 800e93a:	250c      	movcc	r5, #12
 800e93c:	2d00      	cmp	r5, #0
 800e93e:	4606      	mov	r6, r0
 800e940:	db01      	blt.n	800e946 <_malloc_r+0x1a>
 800e942:	42a9      	cmp	r1, r5
 800e944:	d903      	bls.n	800e94e <_malloc_r+0x22>
 800e946:	230c      	movs	r3, #12
 800e948:	6033      	str	r3, [r6, #0]
 800e94a:	2000      	movs	r0, #0
 800e94c:	bd70      	pop	{r4, r5, r6, pc}
 800e94e:	f000 fbba 	bl	800f0c6 <__malloc_lock>
 800e952:	4a21      	ldr	r2, [pc, #132]	; (800e9d8 <_malloc_r+0xac>)
 800e954:	6814      	ldr	r4, [r2, #0]
 800e956:	4621      	mov	r1, r4
 800e958:	b991      	cbnz	r1, 800e980 <_malloc_r+0x54>
 800e95a:	4c20      	ldr	r4, [pc, #128]	; (800e9dc <_malloc_r+0xb0>)
 800e95c:	6823      	ldr	r3, [r4, #0]
 800e95e:	b91b      	cbnz	r3, 800e968 <_malloc_r+0x3c>
 800e960:	4630      	mov	r0, r6
 800e962:	f000 facf 	bl	800ef04 <_sbrk_r>
 800e966:	6020      	str	r0, [r4, #0]
 800e968:	4629      	mov	r1, r5
 800e96a:	4630      	mov	r0, r6
 800e96c:	f000 faca 	bl	800ef04 <_sbrk_r>
 800e970:	1c43      	adds	r3, r0, #1
 800e972:	d124      	bne.n	800e9be <_malloc_r+0x92>
 800e974:	230c      	movs	r3, #12
 800e976:	6033      	str	r3, [r6, #0]
 800e978:	4630      	mov	r0, r6
 800e97a:	f000 fba5 	bl	800f0c8 <__malloc_unlock>
 800e97e:	e7e4      	b.n	800e94a <_malloc_r+0x1e>
 800e980:	680b      	ldr	r3, [r1, #0]
 800e982:	1b5b      	subs	r3, r3, r5
 800e984:	d418      	bmi.n	800e9b8 <_malloc_r+0x8c>
 800e986:	2b0b      	cmp	r3, #11
 800e988:	d90f      	bls.n	800e9aa <_malloc_r+0x7e>
 800e98a:	600b      	str	r3, [r1, #0]
 800e98c:	50cd      	str	r5, [r1, r3]
 800e98e:	18cc      	adds	r4, r1, r3
 800e990:	4630      	mov	r0, r6
 800e992:	f000 fb99 	bl	800f0c8 <__malloc_unlock>
 800e996:	f104 000b 	add.w	r0, r4, #11
 800e99a:	1d23      	adds	r3, r4, #4
 800e99c:	f020 0007 	bic.w	r0, r0, #7
 800e9a0:	1ac3      	subs	r3, r0, r3
 800e9a2:	d0d3      	beq.n	800e94c <_malloc_r+0x20>
 800e9a4:	425a      	negs	r2, r3
 800e9a6:	50e2      	str	r2, [r4, r3]
 800e9a8:	e7d0      	b.n	800e94c <_malloc_r+0x20>
 800e9aa:	428c      	cmp	r4, r1
 800e9ac:	684b      	ldr	r3, [r1, #4]
 800e9ae:	bf16      	itet	ne
 800e9b0:	6063      	strne	r3, [r4, #4]
 800e9b2:	6013      	streq	r3, [r2, #0]
 800e9b4:	460c      	movne	r4, r1
 800e9b6:	e7eb      	b.n	800e990 <_malloc_r+0x64>
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	6849      	ldr	r1, [r1, #4]
 800e9bc:	e7cc      	b.n	800e958 <_malloc_r+0x2c>
 800e9be:	1cc4      	adds	r4, r0, #3
 800e9c0:	f024 0403 	bic.w	r4, r4, #3
 800e9c4:	42a0      	cmp	r0, r4
 800e9c6:	d005      	beq.n	800e9d4 <_malloc_r+0xa8>
 800e9c8:	1a21      	subs	r1, r4, r0
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f000 fa9a 	bl	800ef04 <_sbrk_r>
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d0cf      	beq.n	800e974 <_malloc_r+0x48>
 800e9d4:	6025      	str	r5, [r4, #0]
 800e9d6:	e7db      	b.n	800e990 <_malloc_r+0x64>
 800e9d8:	2001f384 	.word	0x2001f384
 800e9dc:	2001f388 	.word	0x2001f388

0800e9e0 <__ssputs_r>:
 800e9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9e4:	688e      	ldr	r6, [r1, #8]
 800e9e6:	429e      	cmp	r6, r3
 800e9e8:	4682      	mov	sl, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	4690      	mov	r8, r2
 800e9ee:	4699      	mov	r9, r3
 800e9f0:	d837      	bhi.n	800ea62 <__ssputs_r+0x82>
 800e9f2:	898a      	ldrh	r2, [r1, #12]
 800e9f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9f8:	d031      	beq.n	800ea5e <__ssputs_r+0x7e>
 800e9fa:	6825      	ldr	r5, [r4, #0]
 800e9fc:	6909      	ldr	r1, [r1, #16]
 800e9fe:	1a6f      	subs	r7, r5, r1
 800ea00:	6965      	ldr	r5, [r4, #20]
 800ea02:	2302      	movs	r3, #2
 800ea04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea08:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea0c:	f109 0301 	add.w	r3, r9, #1
 800ea10:	443b      	add	r3, r7
 800ea12:	429d      	cmp	r5, r3
 800ea14:	bf38      	it	cc
 800ea16:	461d      	movcc	r5, r3
 800ea18:	0553      	lsls	r3, r2, #21
 800ea1a:	d530      	bpl.n	800ea7e <__ssputs_r+0x9e>
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	f7ff ff85 	bl	800e92c <_malloc_r>
 800ea22:	4606      	mov	r6, r0
 800ea24:	b950      	cbnz	r0, 800ea3c <__ssputs_r+0x5c>
 800ea26:	230c      	movs	r3, #12
 800ea28:	f8ca 3000 	str.w	r3, [sl]
 800ea2c:	89a3      	ldrh	r3, [r4, #12]
 800ea2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	f04f 30ff 	mov.w	r0, #4294967295
 800ea38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea3c:	463a      	mov	r2, r7
 800ea3e:	6921      	ldr	r1, [r4, #16]
 800ea40:	f7fc f93c 	bl	800acbc <memcpy>
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea4e:	81a3      	strh	r3, [r4, #12]
 800ea50:	6126      	str	r6, [r4, #16]
 800ea52:	6165      	str	r5, [r4, #20]
 800ea54:	443e      	add	r6, r7
 800ea56:	1bed      	subs	r5, r5, r7
 800ea58:	6026      	str	r6, [r4, #0]
 800ea5a:	60a5      	str	r5, [r4, #8]
 800ea5c:	464e      	mov	r6, r9
 800ea5e:	454e      	cmp	r6, r9
 800ea60:	d900      	bls.n	800ea64 <__ssputs_r+0x84>
 800ea62:	464e      	mov	r6, r9
 800ea64:	4632      	mov	r2, r6
 800ea66:	4641      	mov	r1, r8
 800ea68:	6820      	ldr	r0, [r4, #0]
 800ea6a:	f000 fb13 	bl	800f094 <memmove>
 800ea6e:	68a3      	ldr	r3, [r4, #8]
 800ea70:	1b9b      	subs	r3, r3, r6
 800ea72:	60a3      	str	r3, [r4, #8]
 800ea74:	6823      	ldr	r3, [r4, #0]
 800ea76:	441e      	add	r6, r3
 800ea78:	6026      	str	r6, [r4, #0]
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	e7dc      	b.n	800ea38 <__ssputs_r+0x58>
 800ea7e:	462a      	mov	r2, r5
 800ea80:	f000 fb23 	bl	800f0ca <_realloc_r>
 800ea84:	4606      	mov	r6, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	d1e2      	bne.n	800ea50 <__ssputs_r+0x70>
 800ea8a:	6921      	ldr	r1, [r4, #16]
 800ea8c:	4650      	mov	r0, sl
 800ea8e:	f7ff feff 	bl	800e890 <_free_r>
 800ea92:	e7c8      	b.n	800ea26 <__ssputs_r+0x46>

0800ea94 <_svfiprintf_r>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	461d      	mov	r5, r3
 800ea9a:	898b      	ldrh	r3, [r1, #12]
 800ea9c:	061f      	lsls	r7, r3, #24
 800ea9e:	b09d      	sub	sp, #116	; 0x74
 800eaa0:	4680      	mov	r8, r0
 800eaa2:	460c      	mov	r4, r1
 800eaa4:	4616      	mov	r6, r2
 800eaa6:	d50f      	bpl.n	800eac8 <_svfiprintf_r+0x34>
 800eaa8:	690b      	ldr	r3, [r1, #16]
 800eaaa:	b96b      	cbnz	r3, 800eac8 <_svfiprintf_r+0x34>
 800eaac:	2140      	movs	r1, #64	; 0x40
 800eaae:	f7ff ff3d 	bl	800e92c <_malloc_r>
 800eab2:	6020      	str	r0, [r4, #0]
 800eab4:	6120      	str	r0, [r4, #16]
 800eab6:	b928      	cbnz	r0, 800eac4 <_svfiprintf_r+0x30>
 800eab8:	230c      	movs	r3, #12
 800eaba:	f8c8 3000 	str.w	r3, [r8]
 800eabe:	f04f 30ff 	mov.w	r0, #4294967295
 800eac2:	e0c8      	b.n	800ec56 <_svfiprintf_r+0x1c2>
 800eac4:	2340      	movs	r3, #64	; 0x40
 800eac6:	6163      	str	r3, [r4, #20]
 800eac8:	2300      	movs	r3, #0
 800eaca:	9309      	str	r3, [sp, #36]	; 0x24
 800eacc:	2320      	movs	r3, #32
 800eace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ead2:	2330      	movs	r3, #48	; 0x30
 800ead4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ead8:	9503      	str	r5, [sp, #12]
 800eada:	f04f 0b01 	mov.w	fp, #1
 800eade:	4637      	mov	r7, r6
 800eae0:	463d      	mov	r5, r7
 800eae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eae6:	b10b      	cbz	r3, 800eaec <_svfiprintf_r+0x58>
 800eae8:	2b25      	cmp	r3, #37	; 0x25
 800eaea:	d13e      	bne.n	800eb6a <_svfiprintf_r+0xd6>
 800eaec:	ebb7 0a06 	subs.w	sl, r7, r6
 800eaf0:	d00b      	beq.n	800eb0a <_svfiprintf_r+0x76>
 800eaf2:	4653      	mov	r3, sl
 800eaf4:	4632      	mov	r2, r6
 800eaf6:	4621      	mov	r1, r4
 800eaf8:	4640      	mov	r0, r8
 800eafa:	f7ff ff71 	bl	800e9e0 <__ssputs_r>
 800eafe:	3001      	adds	r0, #1
 800eb00:	f000 80a4 	beq.w	800ec4c <_svfiprintf_r+0x1b8>
 800eb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb06:	4453      	add	r3, sl
 800eb08:	9309      	str	r3, [sp, #36]	; 0x24
 800eb0a:	783b      	ldrb	r3, [r7, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	f000 809d 	beq.w	800ec4c <_svfiprintf_r+0x1b8>
 800eb12:	2300      	movs	r3, #0
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295
 800eb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb1c:	9304      	str	r3, [sp, #16]
 800eb1e:	9307      	str	r3, [sp, #28]
 800eb20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb24:	931a      	str	r3, [sp, #104]	; 0x68
 800eb26:	462f      	mov	r7, r5
 800eb28:	2205      	movs	r2, #5
 800eb2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb2e:	4850      	ldr	r0, [pc, #320]	; (800ec70 <_svfiprintf_r+0x1dc>)
 800eb30:	f7f1 fb56 	bl	80001e0 <memchr>
 800eb34:	9b04      	ldr	r3, [sp, #16]
 800eb36:	b9d0      	cbnz	r0, 800eb6e <_svfiprintf_r+0xda>
 800eb38:	06d9      	lsls	r1, r3, #27
 800eb3a:	bf44      	itt	mi
 800eb3c:	2220      	movmi	r2, #32
 800eb3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb42:	071a      	lsls	r2, r3, #28
 800eb44:	bf44      	itt	mi
 800eb46:	222b      	movmi	r2, #43	; 0x2b
 800eb48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb4c:	782a      	ldrb	r2, [r5, #0]
 800eb4e:	2a2a      	cmp	r2, #42	; 0x2a
 800eb50:	d015      	beq.n	800eb7e <_svfiprintf_r+0xea>
 800eb52:	9a07      	ldr	r2, [sp, #28]
 800eb54:	462f      	mov	r7, r5
 800eb56:	2000      	movs	r0, #0
 800eb58:	250a      	movs	r5, #10
 800eb5a:	4639      	mov	r1, r7
 800eb5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb60:	3b30      	subs	r3, #48	; 0x30
 800eb62:	2b09      	cmp	r3, #9
 800eb64:	d94d      	bls.n	800ec02 <_svfiprintf_r+0x16e>
 800eb66:	b1b8      	cbz	r0, 800eb98 <_svfiprintf_r+0x104>
 800eb68:	e00f      	b.n	800eb8a <_svfiprintf_r+0xf6>
 800eb6a:	462f      	mov	r7, r5
 800eb6c:	e7b8      	b.n	800eae0 <_svfiprintf_r+0x4c>
 800eb6e:	4a40      	ldr	r2, [pc, #256]	; (800ec70 <_svfiprintf_r+0x1dc>)
 800eb70:	1a80      	subs	r0, r0, r2
 800eb72:	fa0b f000 	lsl.w	r0, fp, r0
 800eb76:	4318      	orrs	r0, r3
 800eb78:	9004      	str	r0, [sp, #16]
 800eb7a:	463d      	mov	r5, r7
 800eb7c:	e7d3      	b.n	800eb26 <_svfiprintf_r+0x92>
 800eb7e:	9a03      	ldr	r2, [sp, #12]
 800eb80:	1d11      	adds	r1, r2, #4
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	9103      	str	r1, [sp, #12]
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	db01      	blt.n	800eb8e <_svfiprintf_r+0xfa>
 800eb8a:	9207      	str	r2, [sp, #28]
 800eb8c:	e004      	b.n	800eb98 <_svfiprintf_r+0x104>
 800eb8e:	4252      	negs	r2, r2
 800eb90:	f043 0302 	orr.w	r3, r3, #2
 800eb94:	9207      	str	r2, [sp, #28]
 800eb96:	9304      	str	r3, [sp, #16]
 800eb98:	783b      	ldrb	r3, [r7, #0]
 800eb9a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb9c:	d10c      	bne.n	800ebb8 <_svfiprintf_r+0x124>
 800eb9e:	787b      	ldrb	r3, [r7, #1]
 800eba0:	2b2a      	cmp	r3, #42	; 0x2a
 800eba2:	d133      	bne.n	800ec0c <_svfiprintf_r+0x178>
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	1d1a      	adds	r2, r3, #4
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	9203      	str	r2, [sp, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	bfb8      	it	lt
 800ebb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebb4:	3702      	adds	r7, #2
 800ebb6:	9305      	str	r3, [sp, #20]
 800ebb8:	4d2e      	ldr	r5, [pc, #184]	; (800ec74 <_svfiprintf_r+0x1e0>)
 800ebba:	7839      	ldrb	r1, [r7, #0]
 800ebbc:	2203      	movs	r2, #3
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f7f1 fb0e 	bl	80001e0 <memchr>
 800ebc4:	b138      	cbz	r0, 800ebd6 <_svfiprintf_r+0x142>
 800ebc6:	2340      	movs	r3, #64	; 0x40
 800ebc8:	1b40      	subs	r0, r0, r5
 800ebca:	fa03 f000 	lsl.w	r0, r3, r0
 800ebce:	9b04      	ldr	r3, [sp, #16]
 800ebd0:	4303      	orrs	r3, r0
 800ebd2:	3701      	adds	r7, #1
 800ebd4:	9304      	str	r3, [sp, #16]
 800ebd6:	7839      	ldrb	r1, [r7, #0]
 800ebd8:	4827      	ldr	r0, [pc, #156]	; (800ec78 <_svfiprintf_r+0x1e4>)
 800ebda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebde:	2206      	movs	r2, #6
 800ebe0:	1c7e      	adds	r6, r7, #1
 800ebe2:	f7f1 fafd 	bl	80001e0 <memchr>
 800ebe6:	2800      	cmp	r0, #0
 800ebe8:	d038      	beq.n	800ec5c <_svfiprintf_r+0x1c8>
 800ebea:	4b24      	ldr	r3, [pc, #144]	; (800ec7c <_svfiprintf_r+0x1e8>)
 800ebec:	bb13      	cbnz	r3, 800ec34 <_svfiprintf_r+0x1a0>
 800ebee:	9b03      	ldr	r3, [sp, #12]
 800ebf0:	3307      	adds	r3, #7
 800ebf2:	f023 0307 	bic.w	r3, r3, #7
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	9303      	str	r3, [sp, #12]
 800ebfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebfc:	444b      	add	r3, r9
 800ebfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ec00:	e76d      	b.n	800eade <_svfiprintf_r+0x4a>
 800ec02:	fb05 3202 	mla	r2, r5, r2, r3
 800ec06:	2001      	movs	r0, #1
 800ec08:	460f      	mov	r7, r1
 800ec0a:	e7a6      	b.n	800eb5a <_svfiprintf_r+0xc6>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	3701      	adds	r7, #1
 800ec10:	9305      	str	r3, [sp, #20]
 800ec12:	4619      	mov	r1, r3
 800ec14:	250a      	movs	r5, #10
 800ec16:	4638      	mov	r0, r7
 800ec18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec1c:	3a30      	subs	r2, #48	; 0x30
 800ec1e:	2a09      	cmp	r2, #9
 800ec20:	d903      	bls.n	800ec2a <_svfiprintf_r+0x196>
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0c8      	beq.n	800ebb8 <_svfiprintf_r+0x124>
 800ec26:	9105      	str	r1, [sp, #20]
 800ec28:	e7c6      	b.n	800ebb8 <_svfiprintf_r+0x124>
 800ec2a:	fb05 2101 	mla	r1, r5, r1, r2
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4607      	mov	r7, r0
 800ec32:	e7f0      	b.n	800ec16 <_svfiprintf_r+0x182>
 800ec34:	ab03      	add	r3, sp, #12
 800ec36:	9300      	str	r3, [sp, #0]
 800ec38:	4622      	mov	r2, r4
 800ec3a:	4b11      	ldr	r3, [pc, #68]	; (800ec80 <_svfiprintf_r+0x1ec>)
 800ec3c:	a904      	add	r1, sp, #16
 800ec3e:	4640      	mov	r0, r8
 800ec40:	f7fc f8e4 	bl	800ae0c <_printf_float>
 800ec44:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec48:	4681      	mov	r9, r0
 800ec4a:	d1d6      	bne.n	800ebfa <_svfiprintf_r+0x166>
 800ec4c:	89a3      	ldrh	r3, [r4, #12]
 800ec4e:	065b      	lsls	r3, r3, #25
 800ec50:	f53f af35 	bmi.w	800eabe <_svfiprintf_r+0x2a>
 800ec54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec56:	b01d      	add	sp, #116	; 0x74
 800ec58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5c:	ab03      	add	r3, sp, #12
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	4622      	mov	r2, r4
 800ec62:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <_svfiprintf_r+0x1ec>)
 800ec64:	a904      	add	r1, sp, #16
 800ec66:	4640      	mov	r0, r8
 800ec68:	f7fc fb86 	bl	800b378 <_printf_i>
 800ec6c:	e7ea      	b.n	800ec44 <_svfiprintf_r+0x1b0>
 800ec6e:	bf00      	nop
 800ec70:	0800f3ec 	.word	0x0800f3ec
 800ec74:	0800f3f2 	.word	0x0800f3f2
 800ec78:	0800f3f6 	.word	0x0800f3f6
 800ec7c:	0800ae0d 	.word	0x0800ae0d
 800ec80:	0800e9e1 	.word	0x0800e9e1

0800ec84 <__sfputc_r>:
 800ec84:	6893      	ldr	r3, [r2, #8]
 800ec86:	3b01      	subs	r3, #1
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	b410      	push	{r4}
 800ec8c:	6093      	str	r3, [r2, #8]
 800ec8e:	da08      	bge.n	800eca2 <__sfputc_r+0x1e>
 800ec90:	6994      	ldr	r4, [r2, #24]
 800ec92:	42a3      	cmp	r3, r4
 800ec94:	db01      	blt.n	800ec9a <__sfputc_r+0x16>
 800ec96:	290a      	cmp	r1, #10
 800ec98:	d103      	bne.n	800eca2 <__sfputc_r+0x1e>
 800ec9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec9e:	f7fd bdb1 	b.w	800c804 <__swbuf_r>
 800eca2:	6813      	ldr	r3, [r2, #0]
 800eca4:	1c58      	adds	r0, r3, #1
 800eca6:	6010      	str	r0, [r2, #0]
 800eca8:	7019      	strb	r1, [r3, #0]
 800ecaa:	4608      	mov	r0, r1
 800ecac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <__sfputs_r>:
 800ecb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb4:	4606      	mov	r6, r0
 800ecb6:	460f      	mov	r7, r1
 800ecb8:	4614      	mov	r4, r2
 800ecba:	18d5      	adds	r5, r2, r3
 800ecbc:	42ac      	cmp	r4, r5
 800ecbe:	d101      	bne.n	800ecc4 <__sfputs_r+0x12>
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	e007      	b.n	800ecd4 <__sfputs_r+0x22>
 800ecc4:	463a      	mov	r2, r7
 800ecc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecca:	4630      	mov	r0, r6
 800eccc:	f7ff ffda 	bl	800ec84 <__sfputc_r>
 800ecd0:	1c43      	adds	r3, r0, #1
 800ecd2:	d1f3      	bne.n	800ecbc <__sfputs_r+0xa>
 800ecd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecd8 <_vfiprintf_r>:
 800ecd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecdc:	460c      	mov	r4, r1
 800ecde:	b09d      	sub	sp, #116	; 0x74
 800ece0:	4617      	mov	r7, r2
 800ece2:	461d      	mov	r5, r3
 800ece4:	4606      	mov	r6, r0
 800ece6:	b118      	cbz	r0, 800ecf0 <_vfiprintf_r+0x18>
 800ece8:	6983      	ldr	r3, [r0, #24]
 800ecea:	b90b      	cbnz	r3, 800ecf0 <_vfiprintf_r+0x18>
 800ecec:	f7fe fd80 	bl	800d7f0 <__sinit>
 800ecf0:	4b7c      	ldr	r3, [pc, #496]	; (800eee4 <_vfiprintf_r+0x20c>)
 800ecf2:	429c      	cmp	r4, r3
 800ecf4:	d158      	bne.n	800eda8 <_vfiprintf_r+0xd0>
 800ecf6:	6874      	ldr	r4, [r6, #4]
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	0718      	lsls	r0, r3, #28
 800ecfc:	d55e      	bpl.n	800edbc <_vfiprintf_r+0xe4>
 800ecfe:	6923      	ldr	r3, [r4, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d05b      	beq.n	800edbc <_vfiprintf_r+0xe4>
 800ed04:	2300      	movs	r3, #0
 800ed06:	9309      	str	r3, [sp, #36]	; 0x24
 800ed08:	2320      	movs	r3, #32
 800ed0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed0e:	2330      	movs	r3, #48	; 0x30
 800ed10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed14:	9503      	str	r5, [sp, #12]
 800ed16:	f04f 0b01 	mov.w	fp, #1
 800ed1a:	46b8      	mov	r8, r7
 800ed1c:	4645      	mov	r5, r8
 800ed1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed22:	b10b      	cbz	r3, 800ed28 <_vfiprintf_r+0x50>
 800ed24:	2b25      	cmp	r3, #37	; 0x25
 800ed26:	d154      	bne.n	800edd2 <_vfiprintf_r+0xfa>
 800ed28:	ebb8 0a07 	subs.w	sl, r8, r7
 800ed2c:	d00b      	beq.n	800ed46 <_vfiprintf_r+0x6e>
 800ed2e:	4653      	mov	r3, sl
 800ed30:	463a      	mov	r2, r7
 800ed32:	4621      	mov	r1, r4
 800ed34:	4630      	mov	r0, r6
 800ed36:	f7ff ffbc 	bl	800ecb2 <__sfputs_r>
 800ed3a:	3001      	adds	r0, #1
 800ed3c:	f000 80c2 	beq.w	800eec4 <_vfiprintf_r+0x1ec>
 800ed40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed42:	4453      	add	r3, sl
 800ed44:	9309      	str	r3, [sp, #36]	; 0x24
 800ed46:	f898 3000 	ldrb.w	r3, [r8]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	f000 80ba 	beq.w	800eec4 <_vfiprintf_r+0x1ec>
 800ed50:	2300      	movs	r3, #0
 800ed52:	f04f 32ff 	mov.w	r2, #4294967295
 800ed56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed5a:	9304      	str	r3, [sp, #16]
 800ed5c:	9307      	str	r3, [sp, #28]
 800ed5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed62:	931a      	str	r3, [sp, #104]	; 0x68
 800ed64:	46a8      	mov	r8, r5
 800ed66:	2205      	movs	r2, #5
 800ed68:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ed6c:	485e      	ldr	r0, [pc, #376]	; (800eee8 <_vfiprintf_r+0x210>)
 800ed6e:	f7f1 fa37 	bl	80001e0 <memchr>
 800ed72:	9b04      	ldr	r3, [sp, #16]
 800ed74:	bb78      	cbnz	r0, 800edd6 <_vfiprintf_r+0xfe>
 800ed76:	06d9      	lsls	r1, r3, #27
 800ed78:	bf44      	itt	mi
 800ed7a:	2220      	movmi	r2, #32
 800ed7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ed80:	071a      	lsls	r2, r3, #28
 800ed82:	bf44      	itt	mi
 800ed84:	222b      	movmi	r2, #43	; 0x2b
 800ed86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ed8a:	782a      	ldrb	r2, [r5, #0]
 800ed8c:	2a2a      	cmp	r2, #42	; 0x2a
 800ed8e:	d02a      	beq.n	800ede6 <_vfiprintf_r+0x10e>
 800ed90:	9a07      	ldr	r2, [sp, #28]
 800ed92:	46a8      	mov	r8, r5
 800ed94:	2000      	movs	r0, #0
 800ed96:	250a      	movs	r5, #10
 800ed98:	4641      	mov	r1, r8
 800ed9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed9e:	3b30      	subs	r3, #48	; 0x30
 800eda0:	2b09      	cmp	r3, #9
 800eda2:	d969      	bls.n	800ee78 <_vfiprintf_r+0x1a0>
 800eda4:	b360      	cbz	r0, 800ee00 <_vfiprintf_r+0x128>
 800eda6:	e024      	b.n	800edf2 <_vfiprintf_r+0x11a>
 800eda8:	4b50      	ldr	r3, [pc, #320]	; (800eeec <_vfiprintf_r+0x214>)
 800edaa:	429c      	cmp	r4, r3
 800edac:	d101      	bne.n	800edb2 <_vfiprintf_r+0xda>
 800edae:	68b4      	ldr	r4, [r6, #8]
 800edb0:	e7a2      	b.n	800ecf8 <_vfiprintf_r+0x20>
 800edb2:	4b4f      	ldr	r3, [pc, #316]	; (800eef0 <_vfiprintf_r+0x218>)
 800edb4:	429c      	cmp	r4, r3
 800edb6:	bf08      	it	eq
 800edb8:	68f4      	ldreq	r4, [r6, #12]
 800edba:	e79d      	b.n	800ecf8 <_vfiprintf_r+0x20>
 800edbc:	4621      	mov	r1, r4
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7fd fd72 	bl	800c8a8 <__swsetup_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	d09d      	beq.n	800ed04 <_vfiprintf_r+0x2c>
 800edc8:	f04f 30ff 	mov.w	r0, #4294967295
 800edcc:	b01d      	add	sp, #116	; 0x74
 800edce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd2:	46a8      	mov	r8, r5
 800edd4:	e7a2      	b.n	800ed1c <_vfiprintf_r+0x44>
 800edd6:	4a44      	ldr	r2, [pc, #272]	; (800eee8 <_vfiprintf_r+0x210>)
 800edd8:	1a80      	subs	r0, r0, r2
 800edda:	fa0b f000 	lsl.w	r0, fp, r0
 800edde:	4318      	orrs	r0, r3
 800ede0:	9004      	str	r0, [sp, #16]
 800ede2:	4645      	mov	r5, r8
 800ede4:	e7be      	b.n	800ed64 <_vfiprintf_r+0x8c>
 800ede6:	9a03      	ldr	r2, [sp, #12]
 800ede8:	1d11      	adds	r1, r2, #4
 800edea:	6812      	ldr	r2, [r2, #0]
 800edec:	9103      	str	r1, [sp, #12]
 800edee:	2a00      	cmp	r2, #0
 800edf0:	db01      	blt.n	800edf6 <_vfiprintf_r+0x11e>
 800edf2:	9207      	str	r2, [sp, #28]
 800edf4:	e004      	b.n	800ee00 <_vfiprintf_r+0x128>
 800edf6:	4252      	negs	r2, r2
 800edf8:	f043 0302 	orr.w	r3, r3, #2
 800edfc:	9207      	str	r2, [sp, #28]
 800edfe:	9304      	str	r3, [sp, #16]
 800ee00:	f898 3000 	ldrb.w	r3, [r8]
 800ee04:	2b2e      	cmp	r3, #46	; 0x2e
 800ee06:	d10e      	bne.n	800ee26 <_vfiprintf_r+0x14e>
 800ee08:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ee0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee0e:	d138      	bne.n	800ee82 <_vfiprintf_r+0x1aa>
 800ee10:	9b03      	ldr	r3, [sp, #12]
 800ee12:	1d1a      	adds	r2, r3, #4
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	9203      	str	r2, [sp, #12]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	bfb8      	it	lt
 800ee1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee20:	f108 0802 	add.w	r8, r8, #2
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	4d33      	ldr	r5, [pc, #204]	; (800eef4 <_vfiprintf_r+0x21c>)
 800ee28:	f898 1000 	ldrb.w	r1, [r8]
 800ee2c:	2203      	movs	r2, #3
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f7f1 f9d6 	bl	80001e0 <memchr>
 800ee34:	b140      	cbz	r0, 800ee48 <_vfiprintf_r+0x170>
 800ee36:	2340      	movs	r3, #64	; 0x40
 800ee38:	1b40      	subs	r0, r0, r5
 800ee3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee3e:	9b04      	ldr	r3, [sp, #16]
 800ee40:	4303      	orrs	r3, r0
 800ee42:	f108 0801 	add.w	r8, r8, #1
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	f898 1000 	ldrb.w	r1, [r8]
 800ee4c:	482a      	ldr	r0, [pc, #168]	; (800eef8 <_vfiprintf_r+0x220>)
 800ee4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee52:	2206      	movs	r2, #6
 800ee54:	f108 0701 	add.w	r7, r8, #1
 800ee58:	f7f1 f9c2 	bl	80001e0 <memchr>
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d037      	beq.n	800eed0 <_vfiprintf_r+0x1f8>
 800ee60:	4b26      	ldr	r3, [pc, #152]	; (800eefc <_vfiprintf_r+0x224>)
 800ee62:	bb1b      	cbnz	r3, 800eeac <_vfiprintf_r+0x1d4>
 800ee64:	9b03      	ldr	r3, [sp, #12]
 800ee66:	3307      	adds	r3, #7
 800ee68:	f023 0307 	bic.w	r3, r3, #7
 800ee6c:	3308      	adds	r3, #8
 800ee6e:	9303      	str	r3, [sp, #12]
 800ee70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee72:	444b      	add	r3, r9
 800ee74:	9309      	str	r3, [sp, #36]	; 0x24
 800ee76:	e750      	b.n	800ed1a <_vfiprintf_r+0x42>
 800ee78:	fb05 3202 	mla	r2, r5, r2, r3
 800ee7c:	2001      	movs	r0, #1
 800ee7e:	4688      	mov	r8, r1
 800ee80:	e78a      	b.n	800ed98 <_vfiprintf_r+0xc0>
 800ee82:	2300      	movs	r3, #0
 800ee84:	f108 0801 	add.w	r8, r8, #1
 800ee88:	9305      	str	r3, [sp, #20]
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	250a      	movs	r5, #10
 800ee8e:	4640      	mov	r0, r8
 800ee90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee94:	3a30      	subs	r2, #48	; 0x30
 800ee96:	2a09      	cmp	r2, #9
 800ee98:	d903      	bls.n	800eea2 <_vfiprintf_r+0x1ca>
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d0c3      	beq.n	800ee26 <_vfiprintf_r+0x14e>
 800ee9e:	9105      	str	r1, [sp, #20]
 800eea0:	e7c1      	b.n	800ee26 <_vfiprintf_r+0x14e>
 800eea2:	fb05 2101 	mla	r1, r5, r1, r2
 800eea6:	2301      	movs	r3, #1
 800eea8:	4680      	mov	r8, r0
 800eeaa:	e7f0      	b.n	800ee8e <_vfiprintf_r+0x1b6>
 800eeac:	ab03      	add	r3, sp, #12
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	4622      	mov	r2, r4
 800eeb2:	4b13      	ldr	r3, [pc, #76]	; (800ef00 <_vfiprintf_r+0x228>)
 800eeb4:	a904      	add	r1, sp, #16
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f7fb ffa8 	bl	800ae0c <_printf_float>
 800eebc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eec0:	4681      	mov	r9, r0
 800eec2:	d1d5      	bne.n	800ee70 <_vfiprintf_r+0x198>
 800eec4:	89a3      	ldrh	r3, [r4, #12]
 800eec6:	065b      	lsls	r3, r3, #25
 800eec8:	f53f af7e 	bmi.w	800edc8 <_vfiprintf_r+0xf0>
 800eecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eece:	e77d      	b.n	800edcc <_vfiprintf_r+0xf4>
 800eed0:	ab03      	add	r3, sp, #12
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	4622      	mov	r2, r4
 800eed6:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <_vfiprintf_r+0x228>)
 800eed8:	a904      	add	r1, sp, #16
 800eeda:	4630      	mov	r0, r6
 800eedc:	f7fc fa4c 	bl	800b378 <_printf_i>
 800eee0:	e7ec      	b.n	800eebc <_vfiprintf_r+0x1e4>
 800eee2:	bf00      	nop
 800eee4:	0800f2a0 	.word	0x0800f2a0
 800eee8:	0800f3ec 	.word	0x0800f3ec
 800eeec:	0800f2c0 	.word	0x0800f2c0
 800eef0:	0800f280 	.word	0x0800f280
 800eef4:	0800f3f2 	.word	0x0800f3f2
 800eef8:	0800f3f6 	.word	0x0800f3f6
 800eefc:	0800ae0d 	.word	0x0800ae0d
 800ef00:	0800ecb3 	.word	0x0800ecb3

0800ef04 <_sbrk_r>:
 800ef04:	b538      	push	{r3, r4, r5, lr}
 800ef06:	4c06      	ldr	r4, [pc, #24]	; (800ef20 <_sbrk_r+0x1c>)
 800ef08:	2300      	movs	r3, #0
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	4608      	mov	r0, r1
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	f7f7 fb32 	bl	8006578 <_sbrk>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_sbrk_r+0x1a>
 800ef18:	6823      	ldr	r3, [r4, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_sbrk_r+0x1a>
 800ef1c:	602b      	str	r3, [r5, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	2001f8c0 	.word	0x2001f8c0

0800ef24 <__sread>:
 800ef24:	b510      	push	{r4, lr}
 800ef26:	460c      	mov	r4, r1
 800ef28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef2c:	f000 f8f4 	bl	800f118 <_read_r>
 800ef30:	2800      	cmp	r0, #0
 800ef32:	bfab      	itete	ge
 800ef34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef36:	89a3      	ldrhlt	r3, [r4, #12]
 800ef38:	181b      	addge	r3, r3, r0
 800ef3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef3e:	bfac      	ite	ge
 800ef40:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef42:	81a3      	strhlt	r3, [r4, #12]
 800ef44:	bd10      	pop	{r4, pc}

0800ef46 <__swrite>:
 800ef46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4a:	461f      	mov	r7, r3
 800ef4c:	898b      	ldrh	r3, [r1, #12]
 800ef4e:	05db      	lsls	r3, r3, #23
 800ef50:	4605      	mov	r5, r0
 800ef52:	460c      	mov	r4, r1
 800ef54:	4616      	mov	r6, r2
 800ef56:	d505      	bpl.n	800ef64 <__swrite+0x1e>
 800ef58:	2302      	movs	r3, #2
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef60:	f000 f886 	bl	800f070 <_lseek_r>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef6e:	81a3      	strh	r3, [r4, #12]
 800ef70:	4632      	mov	r2, r6
 800ef72:	463b      	mov	r3, r7
 800ef74:	4628      	mov	r0, r5
 800ef76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7a:	f000 b835 	b.w	800efe8 <_write_r>

0800ef7e <__sseek>:
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	460c      	mov	r4, r1
 800ef82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef86:	f000 f873 	bl	800f070 <_lseek_r>
 800ef8a:	1c43      	adds	r3, r0, #1
 800ef8c:	89a3      	ldrh	r3, [r4, #12]
 800ef8e:	bf15      	itete	ne
 800ef90:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef9a:	81a3      	strheq	r3, [r4, #12]
 800ef9c:	bf18      	it	ne
 800ef9e:	81a3      	strhne	r3, [r4, #12]
 800efa0:	bd10      	pop	{r4, pc}

0800efa2 <__sclose>:
 800efa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa6:	f000 b831 	b.w	800f00c <_close_r>

0800efaa <strncmp>:
 800efaa:	b510      	push	{r4, lr}
 800efac:	b16a      	cbz	r2, 800efca <strncmp+0x20>
 800efae:	3901      	subs	r1, #1
 800efb0:	1884      	adds	r4, r0, r2
 800efb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800efb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efba:	4293      	cmp	r3, r2
 800efbc:	d103      	bne.n	800efc6 <strncmp+0x1c>
 800efbe:	42a0      	cmp	r0, r4
 800efc0:	d001      	beq.n	800efc6 <strncmp+0x1c>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d1f5      	bne.n	800efb2 <strncmp+0x8>
 800efc6:	1a98      	subs	r0, r3, r2
 800efc8:	bd10      	pop	{r4, pc}
 800efca:	4610      	mov	r0, r2
 800efcc:	e7fc      	b.n	800efc8 <strncmp+0x1e>

0800efce <__ascii_wctomb>:
 800efce:	b149      	cbz	r1, 800efe4 <__ascii_wctomb+0x16>
 800efd0:	2aff      	cmp	r2, #255	; 0xff
 800efd2:	bf85      	ittet	hi
 800efd4:	238a      	movhi	r3, #138	; 0x8a
 800efd6:	6003      	strhi	r3, [r0, #0]
 800efd8:	700a      	strbls	r2, [r1, #0]
 800efda:	f04f 30ff 	movhi.w	r0, #4294967295
 800efde:	bf98      	it	ls
 800efe0:	2001      	movls	r0, #1
 800efe2:	4770      	bx	lr
 800efe4:	4608      	mov	r0, r1
 800efe6:	4770      	bx	lr

0800efe8 <_write_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4c07      	ldr	r4, [pc, #28]	; (800f008 <_write_r+0x20>)
 800efec:	4605      	mov	r5, r0
 800efee:	4608      	mov	r0, r1
 800eff0:	4611      	mov	r1, r2
 800eff2:	2200      	movs	r2, #0
 800eff4:	6022      	str	r2, [r4, #0]
 800eff6:	461a      	mov	r2, r3
 800eff8:	f7f7 fa6d 	bl	80064d6 <_write>
 800effc:	1c43      	adds	r3, r0, #1
 800effe:	d102      	bne.n	800f006 <_write_r+0x1e>
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	b103      	cbz	r3, 800f006 <_write_r+0x1e>
 800f004:	602b      	str	r3, [r5, #0]
 800f006:	bd38      	pop	{r3, r4, r5, pc}
 800f008:	2001f8c0 	.word	0x2001f8c0

0800f00c <_close_r>:
 800f00c:	b538      	push	{r3, r4, r5, lr}
 800f00e:	4c06      	ldr	r4, [pc, #24]	; (800f028 <_close_r+0x1c>)
 800f010:	2300      	movs	r3, #0
 800f012:	4605      	mov	r5, r0
 800f014:	4608      	mov	r0, r1
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	f7f7 fa79 	bl	800650e <_close>
 800f01c:	1c43      	adds	r3, r0, #1
 800f01e:	d102      	bne.n	800f026 <_close_r+0x1a>
 800f020:	6823      	ldr	r3, [r4, #0]
 800f022:	b103      	cbz	r3, 800f026 <_close_r+0x1a>
 800f024:	602b      	str	r3, [r5, #0]
 800f026:	bd38      	pop	{r3, r4, r5, pc}
 800f028:	2001f8c0 	.word	0x2001f8c0

0800f02c <_fstat_r>:
 800f02c:	b538      	push	{r3, r4, r5, lr}
 800f02e:	4c07      	ldr	r4, [pc, #28]	; (800f04c <_fstat_r+0x20>)
 800f030:	2300      	movs	r3, #0
 800f032:	4605      	mov	r5, r0
 800f034:	4608      	mov	r0, r1
 800f036:	4611      	mov	r1, r2
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	f7f7 fa74 	bl	8006526 <_fstat>
 800f03e:	1c43      	adds	r3, r0, #1
 800f040:	d102      	bne.n	800f048 <_fstat_r+0x1c>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	b103      	cbz	r3, 800f048 <_fstat_r+0x1c>
 800f046:	602b      	str	r3, [r5, #0]
 800f048:	bd38      	pop	{r3, r4, r5, pc}
 800f04a:	bf00      	nop
 800f04c:	2001f8c0 	.word	0x2001f8c0

0800f050 <_isatty_r>:
 800f050:	b538      	push	{r3, r4, r5, lr}
 800f052:	4c06      	ldr	r4, [pc, #24]	; (800f06c <_isatty_r+0x1c>)
 800f054:	2300      	movs	r3, #0
 800f056:	4605      	mov	r5, r0
 800f058:	4608      	mov	r0, r1
 800f05a:	6023      	str	r3, [r4, #0]
 800f05c:	f7f7 fa73 	bl	8006546 <_isatty>
 800f060:	1c43      	adds	r3, r0, #1
 800f062:	d102      	bne.n	800f06a <_isatty_r+0x1a>
 800f064:	6823      	ldr	r3, [r4, #0]
 800f066:	b103      	cbz	r3, 800f06a <_isatty_r+0x1a>
 800f068:	602b      	str	r3, [r5, #0]
 800f06a:	bd38      	pop	{r3, r4, r5, pc}
 800f06c:	2001f8c0 	.word	0x2001f8c0

0800f070 <_lseek_r>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	4c07      	ldr	r4, [pc, #28]	; (800f090 <_lseek_r+0x20>)
 800f074:	4605      	mov	r5, r0
 800f076:	4608      	mov	r0, r1
 800f078:	4611      	mov	r1, r2
 800f07a:	2200      	movs	r2, #0
 800f07c:	6022      	str	r2, [r4, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	f7f7 fa6c 	bl	800655c <_lseek>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_lseek_r+0x1e>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_lseek_r+0x1e>
 800f08c:	602b      	str	r3, [r5, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	2001f8c0 	.word	0x2001f8c0

0800f094 <memmove>:
 800f094:	4288      	cmp	r0, r1
 800f096:	b510      	push	{r4, lr}
 800f098:	eb01 0302 	add.w	r3, r1, r2
 800f09c:	d807      	bhi.n	800f0ae <memmove+0x1a>
 800f09e:	1e42      	subs	r2, r0, #1
 800f0a0:	4299      	cmp	r1, r3
 800f0a2:	d00a      	beq.n	800f0ba <memmove+0x26>
 800f0a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f0a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f0ac:	e7f8      	b.n	800f0a0 <memmove+0xc>
 800f0ae:	4283      	cmp	r3, r0
 800f0b0:	d9f5      	bls.n	800f09e <memmove+0xa>
 800f0b2:	1881      	adds	r1, r0, r2
 800f0b4:	1ad2      	subs	r2, r2, r3
 800f0b6:	42d3      	cmn	r3, r2
 800f0b8:	d100      	bne.n	800f0bc <memmove+0x28>
 800f0ba:	bd10      	pop	{r4, pc}
 800f0bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f0c4:	e7f7      	b.n	800f0b6 <memmove+0x22>

0800f0c6 <__malloc_lock>:
 800f0c6:	4770      	bx	lr

0800f0c8 <__malloc_unlock>:
 800f0c8:	4770      	bx	lr

0800f0ca <_realloc_r>:
 800f0ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0cc:	4607      	mov	r7, r0
 800f0ce:	4614      	mov	r4, r2
 800f0d0:	460e      	mov	r6, r1
 800f0d2:	b921      	cbnz	r1, 800f0de <_realloc_r+0x14>
 800f0d4:	4611      	mov	r1, r2
 800f0d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f0da:	f7ff bc27 	b.w	800e92c <_malloc_r>
 800f0de:	b922      	cbnz	r2, 800f0ea <_realloc_r+0x20>
 800f0e0:	f7ff fbd6 	bl	800e890 <_free_r>
 800f0e4:	4625      	mov	r5, r4
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ea:	f000 f827 	bl	800f13c <_malloc_usable_size_r>
 800f0ee:	42a0      	cmp	r0, r4
 800f0f0:	d20f      	bcs.n	800f112 <_realloc_r+0x48>
 800f0f2:	4621      	mov	r1, r4
 800f0f4:	4638      	mov	r0, r7
 800f0f6:	f7ff fc19 	bl	800e92c <_malloc_r>
 800f0fa:	4605      	mov	r5, r0
 800f0fc:	2800      	cmp	r0, #0
 800f0fe:	d0f2      	beq.n	800f0e6 <_realloc_r+0x1c>
 800f100:	4631      	mov	r1, r6
 800f102:	4622      	mov	r2, r4
 800f104:	f7fb fdda 	bl	800acbc <memcpy>
 800f108:	4631      	mov	r1, r6
 800f10a:	4638      	mov	r0, r7
 800f10c:	f7ff fbc0 	bl	800e890 <_free_r>
 800f110:	e7e9      	b.n	800f0e6 <_realloc_r+0x1c>
 800f112:	4635      	mov	r5, r6
 800f114:	e7e7      	b.n	800f0e6 <_realloc_r+0x1c>
	...

0800f118 <_read_r>:
 800f118:	b538      	push	{r3, r4, r5, lr}
 800f11a:	4c07      	ldr	r4, [pc, #28]	; (800f138 <_read_r+0x20>)
 800f11c:	4605      	mov	r5, r0
 800f11e:	4608      	mov	r0, r1
 800f120:	4611      	mov	r1, r2
 800f122:	2200      	movs	r2, #0
 800f124:	6022      	str	r2, [r4, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	f7f7 f9b8 	bl	800649c <_read>
 800f12c:	1c43      	adds	r3, r0, #1
 800f12e:	d102      	bne.n	800f136 <_read_r+0x1e>
 800f130:	6823      	ldr	r3, [r4, #0]
 800f132:	b103      	cbz	r3, 800f136 <_read_r+0x1e>
 800f134:	602b      	str	r3, [r5, #0]
 800f136:	bd38      	pop	{r3, r4, r5, pc}
 800f138:	2001f8c0 	.word	0x2001f8c0

0800f13c <_malloc_usable_size_r>:
 800f13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f140:	1f18      	subs	r0, r3, #4
 800f142:	2b00      	cmp	r3, #0
 800f144:	bfbc      	itt	lt
 800f146:	580b      	ldrlt	r3, [r1, r0]
 800f148:	18c0      	addlt	r0, r0, r3
 800f14a:	4770      	bx	lr

0800f14c <_init>:
 800f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14e:	bf00      	nop
 800f150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f152:	bc08      	pop	{r3}
 800f154:	469e      	mov	lr, r3
 800f156:	4770      	bx	lr

0800f158 <_fini>:
 800f158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15a:	bf00      	nop
 800f15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f15e:	bc08      	pop	{r3}
 800f160:	469e      	mov	lr, r3
 800f162:	4770      	bx	lr


robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  08011038  08011038  00021038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011978  08011978  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08011978  08011978  00021978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011980  08011980  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011980  08011980  00021980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011984  08011984  00021984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08011988  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a8d4  20000210  08011b98  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001aae4  08011b98  0003aae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d25  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004957  00000000  00000000  00052f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019d8  00000000  00000000  000578c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e8  00000000  00000000  00059298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005aa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000173b3  00000000  00000000  0007f50a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb5ab  00000000  00000000  000968bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161e68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080dc  00000000  00000000  00161ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801101c 	.word	0x0801101c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0801101c 	.word	0x0801101c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
//static float variable_Angle;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 8000, ki = 80000, kd = 0.0;
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc73 	bl	800188c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]
	float variable_Angle = getOutput_angularvelocity();
 8000faa:	f002 fedf 	bl	8003d6c <getOutput_angularvelocity>
 8000fae:	ed87 0a02 	vstr	s0, [r7, #8]
	//float variable_Angle = 0;

	if(Angle_control_enable_flag == 1){
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d16f      	bne.n	800109a <calculateAngleControlFlip+0x112>
		if(i_clear_flag == 1){
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <calculateAngleControlFlip+0x48>
			i = 0;
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
		}

		diff = variable_Angle - current_Angle;
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fe0:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff2:	edc7 7a01 	vstr	s15, [r7, #4]
		i += ki * diff * DELTA_T; //I制御
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff faa4 	bl	8000548 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	ed97 7a06 	vldr	s14, [r7, #24]
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	ee17 0a90 	vmov	r0, s15
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	a323      	add	r3, pc, #140	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faeb 	bl	80005f8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f92f 	bl	800028c <__adddf3>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	4618      	mov	r0, r3
 8001034:	4621      	mov	r1, r4
 8001036:	f7ff fdd7 	bl	8000be8 <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ed97 7a04 	vldr	s14, [r7, #16]
 800104a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	a312      	add	r3, pc, #72	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4618      	mov	r0, r3
 800106e:	4621      	mov	r1, r4
 8001070:	f7ff fdba 	bl	8000be8 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	603b      	str	r3, [r7, #0]

		Angle_control_term = p + i + d;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001086:	edd7 7a00 	vldr	s15, [r7]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <calculateAngleControlFlip+0x144>)
 8001090:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]
	}
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010ac:	3f50624d 	.word	0x3f50624d
 80010b0:	45fa0000 	.word	0x45fa0000
 80010b4:	479c4000 	.word	0x479c4000
 80010b8:	2000022c 	.word	0x2000022c
 80010bc:	2000022e 	.word	0x2000022e
 80010c0:	20000238 	.word	0x20000238
 80010c4:	20000230 	.word	0x20000230
 80010c8:	2000023c 	.word	0x2000023c
 80010cc:	20000234 	.word	0x20000234

080010d0 <getAngleControlTerm>:

float getAngleControlTerm(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return Angle_control_term;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <getAngleControlTerm+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000234 	.word	0x20000234

080010ec <startAngleControl>:

void startAngleControl(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 1;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <startAngleControl+0x1c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	801a      	strh	r2, [r3, #0]
	i_clear_flag = 1;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <startAngleControl+0x20>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000022c 	.word	0x2000022c
 800110c:	2000022e 	.word	0x2000022e

08001110 <stopAngleControl>:

void stopAngleControl(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 0;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <stopAngleControl+0x14>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	2000022c 	.word	0x2000022c

08001128 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 800112c:	213c      	movs	r1, #60	; 0x3c
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <initEncoder+0x28>)
 8001130:	f008 fcec 	bl	8009b0c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8001134:	213c      	movs	r1, #60	; 0x3c
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <initEncoder+0x2c>)
 8001138:	f008 fce8 	bl	8009b0c <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <initEncoder+0x30>)
 800113e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <initEncoder+0x34>)
 8001146:	f242 7210 	movw	r2, #10000	; 0x2710
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2001a698 	.word	0x2001a698
 8001154:	2001a658 	.word	0x2001a658
 8001158:	40000400 	.word	0x40000400
 800115c:	40000800 	.word	0x40000800

08001160 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001160:	b598      	push	{r3, r4, r7, lr}
 8001162:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <updateEncoderCnt+0x178>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	b29b      	uxth	r3, r3
 800116a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800116e:	3b10      	subs	r3, #16
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <updateEncoderCnt+0x17c>)
 8001176:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <updateEncoderCnt+0x180>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	b29b      	uxth	r3, r3
 800117e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001182:	3310      	adds	r3, #16
 8001184:	b29b      	uxth	r3, r3
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <updateEncoderCnt+0x184>)
 800118a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <updateEncoderCnt+0x188>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <updateEncoderCnt+0x17c>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <updateEncoderCnt+0x188>)
 80011a4:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <updateEncoderCnt+0x18c>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <updateEncoderCnt+0x184>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <updateEncoderCnt+0x18c>)
 80011be:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <updateEncoderCnt+0x17c>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <updateEncoderCnt+0x184>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9a7 	bl	8000524 <__aeabi_i2d>
 80011d6:	a33e      	add	r3, pc, #248	; (adr r3, 80012d0 <updateEncoderCnt+0x170>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4618      	mov	r0, r3
 80011e6:	4621      	mov	r1, r4
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	f7ff fb2c 	bl	800084c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4618      	mov	r0, r3
 80011fa:	4621      	mov	r1, r4
 80011fc:	f7ff fcf4 	bl	8000be8 <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <updateEncoderCnt+0x190>)
 8001204:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <updateEncoderCnt+0x194>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <updateEncoderCnt+0x190>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <updateEncoderCnt+0x194>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <updateEncoderCnt+0x198>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <updateEncoderCnt+0x190>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <updateEncoderCnt+0x198>)
 800122e:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <updateEncoderCnt+0x19c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <updateEncoderCnt+0x190>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <updateEncoderCnt+0x19c>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <updateEncoderCnt+0x1a0>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <updateEncoderCnt+0x190>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <updateEncoderCnt+0x1a0>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <updateEncoderCnt+0x190>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <updateEncoderCnt+0x190>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <updateEncoderCnt+0x1ac>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <updateEncoderCnt+0x190>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <updateEncoderCnt+0x1ac>)
 800129c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <updateEncoderCnt+0x190>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <updateEncoderCnt+0x178>)
 80012b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <updateEncoderCnt+0x180>)
 80012c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012c6:	bf00      	nop
 80012c8:	bd98      	pop	{r3, r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	bec93a2d 	.word	0xbec93a2d
 80012d4:	3f8c463a 	.word	0x3f8c463a
 80012d8:	40000400 	.word	0x40000400
 80012dc:	20000240 	.word	0x20000240
 80012e0:	40000800 	.word	0x40000800
 80012e4:	20000242 	.word	0x20000242
 80012e8:	20000244 	.word	0x20000244
 80012ec:	20000246 	.word	0x20000246
 80012f0:	20000248 	.word	0x20000248
 80012f4:	2000024c 	.word	0x2000024c
 80012f8:	20000250 	.word	0x20000250
 80012fc:	20000254 	.word	0x20000254
 8001300:	20000258 	.word	0x20000258
 8001304:	2000025c 	.word	0x2000025c
 8001308:	20000260 	.word	0x20000260
 800130c:	20000264 	.word	0x20000264
 8001310:	20000268 	.word	0x20000268

08001314 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <getEncoderCnt+0x2c>)
 8001320:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <getEncoderCnt+0x30>)
 800132a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	801a      	strh	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000240 	.word	0x20000240
 8001344:	20000242 	.word	0x20000242

08001348 <getTotalDistance>:

float getTotalDistance(){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return total_distance;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <getTotalDistance+0x18>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	ee07 3a90 	vmov	s15, r3
}
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000258 	.word	0x20000258

08001364 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <getGoalJudgeDistance+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	2000025c 	.word	0x2000025c

08001380 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <getSideLineJudgeDistance+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000260 	.word	0x20000260

0800139c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <setTotalDistance+0x1c>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000258 	.word	0x20000258

080013bc <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <getCrossLineIgnoreDistance+0x18>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
}
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20000264 	.word	0x20000264

080013d8 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	total_distance = 0;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <clearTotalDistance+0x18>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000258 	.word	0x20000258

080013f4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <clearGoalJudgeDistance+0x18>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	2000025c 	.word	0x2000025c

08001410 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <clearSideLineJudgeDistance+0x18>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000260 	.word	0x20000260

0800142c <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <clearCrossLineIgnoreDistance+0x18>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000264 	.word	0x20000264

08001448 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <clearSideLineIgnoreDistance+0x18>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000268 	.word	0x20000268

08001464 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <getDistance10mm+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	ee07 3a90 	vmov	s15, r3
}
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	2000024c 	.word	0x2000024c

08001480 <clearDistance10mm>:

void clearDistance10mm(void){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <clearDistance10mm+0x18>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	2000024c 	.word	0x2000024c

0800149c <getDistance30mm>:

float getDistance30mm(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	return distance_30mm;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <getDistance30mm+0x18>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	ee07 3a90 	vmov	s15, r3
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000250 	.word	0x20000250

080014b8 <clearDistance30mm>:

void clearDistance30mm(void){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <clearDistance30mm+0x18>)
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000250 	.word	0x20000250
 80014d4:	00000000 	.word	0x00000000

080014d8 <getspeedcount>:

float getspeedcount(void){
 80014d8:	b598      	push	{r3, r4, r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <getspeedcount+0x60>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	db16      	blt.n	800151e <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <getspeedcount+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001530 <getspeedcount+0x58>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe fec4 	bl	800028c <__adddf3>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff fb6c 	bl	8000be8 <__aeabi_d2f>
 8001510:	4602      	mov	r2, r0
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <getspeedcount+0x64>)
 8001514:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <getspeedcount+0x60>)
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <getspeedcount+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
}
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	bd98      	pop	{r3, r4, r7, pc}
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fb99999 	.word	0x3fb99999
 8001538:	20000254 	.word	0x20000254
 800153c:	2000026c 	.word	0x2000026c

08001540 <clearspeedcount>:

void clearspeedcount(void){
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <clearspeedcount+0x14>)
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <clearspeedcount+0x18>)
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	2000026c 	.word	0x2000026c
 8001558:	3dcccccd 	.word	0x3dcccccd

0800155c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <FLASH_Unlock+0x1c>)
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <FLASH_Unlock+0x20>)
 8001564:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <FLASH_Unlock+0x1c>)
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <FLASH_Unlock+0x24>)
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00
 800157c:	45670123 	.word	0x45670123
 8001580:	cdef89ab 	.word	0xcdef89ab

08001584 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <FLASH_Lock+0x1c>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <FLASH_Lock+0x1c>)
 800158e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001592:	6113      	str	r3, [r2, #16]

}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 80015a8:	bf00      	nop
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <FLASH_WaitBusy+0x1c>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <FLASH_WaitBusy+0x6>
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80015ce:	f006 fad5 	bl	8007b7c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fb8b 	bl	8007d0c <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015f6:	f006 fae3 	bl	8007bc0 <HAL_FLASH_Lock>
}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001610:	f7ff ffa4 	bl	800155c <FLASH_Unlock>

	FLASH_WaitBusy();
 8001614:	f7ff ffc6 	bl	80015a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_Write_Word_F+0x50>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8001636:	f7ff ffb5 	bl	80015a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <FLASH_Write_Word_F+0x50>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001646:	f7ff ff9d 	bl	8001584 <FLASH_Lock>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800165e:	f001 ff05 	bl	800346c <IMU_init>
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166a:	f005 f9f1 	bl	8006a50 <HAL_Delay>

	return who_i_am;
 800166e:	79fb      	ldrb	r3, [r7, #7]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <updateIMUValue>:

void updateIMUValue(){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800167e:	f001 ff19 	bl	80034b4 <read_gyro_data>
	zg_ = zg;
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <updateIMUValue+0x188>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <updateIMUValue+0x18c>)
 800168a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <updateIMUValue+0x188>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff46 	bl	8000524 <__aeabi_i2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <updateIMUValue+0x190>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_i2d>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f7fe ffa2 	bl	80005f8 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7fe fde6 	bl	800028c <__adddf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	f7ff fa46 	bl	8000b58 <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <updateIMUValue+0x18c>)
 80016d2:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <updateIMUValue+0x18c>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <updateIMUValue+0x194>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <updateIMUValue+0x18c>)
 80016f8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <updateIMUValue+0x18c>)
 80016fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <updateIMUValue+0x190>)
 8001702:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <updateIMUValue+0x18c>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001712:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a332      	add	r3, pc, #200	; (adr r3, 80017e8 <updateIMUValue+0x170>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	4618      	mov	r0, r3
 800172c:	4621      	mov	r1, r4
 800172e:	a330      	add	r3, pc, #192	; (adr r3, 80017f0 <updateIMUValue+0x178>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff60 	bl	80005f8 <__aeabi_dmul>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <updateIMUValue+0x198>)
 8001746:	f7ff f881 	bl	800084c <__aeabi_ddiv>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <updateIMUValue+0x19c>)
 800175a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <updateIMUValue+0x1a0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a320      	add	r3, pc, #128	; (adr r3, 80017f8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <updateIMUValue+0x1a0>)
 800179a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <updateIMUValue+0x1a4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <updateIMUValue+0x19c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	a310      	add	r3, pc, #64	; (adr r3, 80017f8 <updateIMUValue+0x180>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd61 	bl	800028c <__adddf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	4618      	mov	r0, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	f7ff fa09 	bl	8000be8 <__aeabi_d2f>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <updateIMUValue+0x1a4>)
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	66666666 	.word	0x66666666
 80017ec:	40306666 	.word	0x40306666
 80017f0:	54411744 	.word	0x54411744
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	2001a7c0 	.word	0x2001a7c0
 8001804:	2001a6d8 	.word	0x2001a6d8
 8001808:	20000274 	.word	0x20000274
 800180c:	20000270 	.word	0x20000270
 8001810:	40668000 	.word	0x40668000
 8001814:	2001a6e8 	.word	0x2001a6e8
 8001818:	2001a6e0 	.word	0x2001a6e0
 800181c:	2001a6e4 	.word	0x2001a6e4

08001820 <IMU_average>:

void IMU_average(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	float average = 0;
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++){
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	e015      	b.n	800185e <IMU_average+0x3e>
		average = average+zg;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <IMU_average+0x60>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b21b      	sxth	r3, r3
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001840:	ed97 7a01 	vldr	s14, [r7, #4]
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f005 f8ff 	bl	8006a50 <HAL_Delay>
		setLED2('A');
 8001852:	2041      	movs	r0, #65	; 0x41
 8001854:	f000 f920 	bl	8001a98 <setLED2>
	for(int i = 0; i <= 1000; i++){
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001864:	dde5      	ble.n	8001832 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001866:	ed97 7a01 	vldr	s14, [r7, #4]
 800186a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001884 <IMU_average+0x64>
 800186e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <IMU_average+0x68>)
 8001874:	edc3 7a00 	vstr	s15, [r3]
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2001a7c0 	.word	0x2001a7c0
 8001884:	447a0000 	.word	0x447a0000
 8001888:	20000270 	.word	0x20000270

0800188c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <getTheta10mm+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
}
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	2001a6e0 	.word	0x2001a6e0

080018a8 <clearTheta10mm>:

void clearTheta10mm()
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <clearTheta10mm+0x18>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2001a6e0 	.word	0x2001a6e0

080018c4 <getaddTheta>:

float getaddTheta()
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return add_theta;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <getaddTheta+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	ee07 3a90 	vmov	s15, r3
}
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	2001a6e4 	.word	0x2001a6e4

080018e0 <clearaddTheta>:

void clearaddTheta()
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <clearaddTheta+0x18>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2001a6e4 	.word	0x2001a6e4

080018fc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b52      	cmp	r3, #82	; 0x52
 800190a:	d112      	bne.n	8001932 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001912:	4860      	ldr	r0, [pc, #384]	; (8001a94 <setLED+0x198>)
 8001914:	f006 fcce 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	485d      	ldr	r0, [pc, #372]	; (8001a94 <setLED+0x198>)
 8001920:	f006 fcc8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	485a      	ldr	r0, [pc, #360]	; (8001a94 <setLED+0x198>)
 800192c:	f006 fcc2 	bl	80082b4 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8001930:	e0ab      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'G'){
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b47      	cmp	r3, #71	; 0x47
 8001936:	d112      	bne.n	800195e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	4855      	ldr	r0, [pc, #340]	; (8001a94 <setLED+0x198>)
 8001940:	f006 fcb8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194a:	4852      	ldr	r0, [pc, #328]	; (8001a94 <setLED+0x198>)
 800194c:	f006 fcb2 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001956:	484f      	ldr	r0, [pc, #316]	; (8001a94 <setLED+0x198>)
 8001958:	f006 fcac 	bl	80082b4 <HAL_GPIO_WritePin>
}
 800195c:	e095      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'B'){
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b42      	cmp	r3, #66	; 0x42
 8001962:	d112      	bne.n	800198a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	484a      	ldr	r0, [pc, #296]	; (8001a94 <setLED+0x198>)
 800196c:	f006 fca2 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001976:	4847      	ldr	r0, [pc, #284]	; (8001a94 <setLED+0x198>)
 8001978:	f006 fc9c 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001982:	4844      	ldr	r0, [pc, #272]	; (8001a94 <setLED+0x198>)
 8001984:	f006 fc96 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001988:	e07f      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'M'){
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b4d      	cmp	r3, #77	; 0x4d
 800198e:	d112      	bne.n	80019b6 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	483f      	ldr	r0, [pc, #252]	; (8001a94 <setLED+0x198>)
 8001998:	f006 fc8c 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	483c      	ldr	r0, [pc, #240]	; (8001a94 <setLED+0x198>)
 80019a4:	f006 fc86 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ae:	4839      	ldr	r0, [pc, #228]	; (8001a94 <setLED+0x198>)
 80019b0:	f006 fc80 	bl	80082b4 <HAL_GPIO_WritePin>
}
 80019b4:	e069      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'Y'){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b59      	cmp	r3, #89	; 0x59
 80019ba:	d112      	bne.n	80019e2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	4834      	ldr	r0, [pc, #208]	; (8001a94 <setLED+0x198>)
 80019c4:	f006 fc76 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ce:	4831      	ldr	r0, [pc, #196]	; (8001a94 <setLED+0x198>)
 80019d0:	f006 fc70 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019da:	482e      	ldr	r0, [pc, #184]	; (8001a94 <setLED+0x198>)
 80019dc:	f006 fc6a 	bl	80082b4 <HAL_GPIO_WritePin>
}
 80019e0:	e053      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'C'){
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b43      	cmp	r3, #67	; 0x43
 80019e6:	d112      	bne.n	8001a0e <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	4829      	ldr	r0, [pc, #164]	; (8001a94 <setLED+0x198>)
 80019f0:	f006 fc60 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fa:	4826      	ldr	r0, [pc, #152]	; (8001a94 <setLED+0x198>)
 80019fc:	f006 fc5a 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a06:	4823      	ldr	r0, [pc, #140]	; (8001a94 <setLED+0x198>)
 8001a08:	f006 fc54 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001a0c:	e03d      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'W'){
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b57      	cmp	r3, #87	; 0x57
 8001a12:	d112      	bne.n	8001a3a <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	481e      	ldr	r0, [pc, #120]	; (8001a94 <setLED+0x198>)
 8001a1c:	f006 fc4a 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	481b      	ldr	r0, [pc, #108]	; (8001a94 <setLED+0x198>)
 8001a28:	f006 fc44 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <setLED+0x198>)
 8001a34:	f006 fc3e 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001a38:	e027      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'N'){
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a3e:	d112      	bne.n	8001a66 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <setLED+0x198>)
 8001a48:	f006 fc34 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <setLED+0x198>)
 8001a54:	f006 fc2e 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <setLED+0x198>)
 8001a60:	f006 fc28 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001a64:	e011      	b.n	8001a8a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <setLED+0x198>)
 8001a6e:	f006 fc21 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <setLED+0x198>)
 8001a7a:	f006 fc1b 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <setLED+0x198>)
 8001a86:	f006 fc15 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020800 	.word	0x40020800

08001a98 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b52      	cmp	r3, #82	; 0x52
 8001aa6:	d124      	bne.n	8001af2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aae:	48c5      	ldr	r0, [pc, #788]	; (8001dc4 <setLED2+0x32c>)
 8001ab0:	f006 fc00 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	48c3      	ldr	r0, [pc, #780]	; (8001dc8 <setLED2+0x330>)
 8001abc:	f006 fbfa 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	48c0      	ldr	r0, [pc, #768]	; (8001dc8 <setLED2+0x330>)
 8001ac8:	f006 fbf4 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad2:	48bd      	ldr	r0, [pc, #756]	; (8001dc8 <setLED2+0x330>)
 8001ad4:	f006 fbee 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	48ba      	ldr	r0, [pc, #744]	; (8001dc8 <setLED2+0x330>)
 8001ae0:	f006 fbe8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aea:	48b7      	ldr	r0, [pc, #732]	; (8001dc8 <setLED2+0x330>)
 8001aec:	f006 fbe2 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001af0:	e163      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'G'){
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b47      	cmp	r3, #71	; 0x47
 8001af6:	d124      	bne.n	8001b42 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	48b1      	ldr	r0, [pc, #708]	; (8001dc4 <setLED2+0x32c>)
 8001b00:	f006 fbd8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	48af      	ldr	r0, [pc, #700]	; (8001dc8 <setLED2+0x330>)
 8001b0c:	f006 fbd2 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b16:	48ac      	ldr	r0, [pc, #688]	; (8001dc8 <setLED2+0x330>)
 8001b18:	f006 fbcc 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b22:	48a9      	ldr	r0, [pc, #676]	; (8001dc8 <setLED2+0x330>)
 8001b24:	f006 fbc6 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	48a6      	ldr	r0, [pc, #664]	; (8001dc8 <setLED2+0x330>)
 8001b30:	f006 fbc0 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3a:	48a3      	ldr	r0, [pc, #652]	; (8001dc8 <setLED2+0x330>)
 8001b3c:	f006 fbba 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001b40:	e13b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'B'){
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b42      	cmp	r3, #66	; 0x42
 8001b46:	d124      	bne.n	8001b92 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4e:	489d      	ldr	r0, [pc, #628]	; (8001dc4 <setLED2+0x32c>)
 8001b50:	f006 fbb0 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5a:	489b      	ldr	r0, [pc, #620]	; (8001dc8 <setLED2+0x330>)
 8001b5c:	f006 fbaa 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4898      	ldr	r0, [pc, #608]	; (8001dc8 <setLED2+0x330>)
 8001b68:	f006 fba4 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b72:	4895      	ldr	r0, [pc, #596]	; (8001dc8 <setLED2+0x330>)
 8001b74:	f006 fb9e 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7e:	4892      	ldr	r0, [pc, #584]	; (8001dc8 <setLED2+0x330>)
 8001b80:	f006 fb98 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b8a:	488f      	ldr	r0, [pc, #572]	; (8001dc8 <setLED2+0x330>)
 8001b8c:	f006 fb92 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001b90:	e113      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'W'){
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b57      	cmp	r3, #87	; 0x57
 8001b96:	d124      	bne.n	8001be2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	4889      	ldr	r0, [pc, #548]	; (8001dc4 <setLED2+0x32c>)
 8001ba0:	f006 fb88 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001baa:	4887      	ldr	r0, [pc, #540]	; (8001dc8 <setLED2+0x330>)
 8001bac:	f006 fb82 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	4884      	ldr	r0, [pc, #528]	; (8001dc8 <setLED2+0x330>)
 8001bb8:	f006 fb7c 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	4881      	ldr	r0, [pc, #516]	; (8001dc8 <setLED2+0x330>)
 8001bc4:	f006 fb76 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bce:	487e      	ldr	r0, [pc, #504]	; (8001dc8 <setLED2+0x330>)
 8001bd0:	f006 fb70 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bda:	487b      	ldr	r0, [pc, #492]	; (8001dc8 <setLED2+0x330>)
 8001bdc:	f006 fb6a 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001be0:	e0eb      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'Y'){
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b59      	cmp	r3, #89	; 0x59
 8001be6:	d124      	bne.n	8001c32 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4875      	ldr	r0, [pc, #468]	; (8001dc4 <setLED2+0x32c>)
 8001bf0:	f006 fb60 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfa:	4873      	ldr	r0, [pc, #460]	; (8001dc8 <setLED2+0x330>)
 8001bfc:	f006 fb5a 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	4870      	ldr	r0, [pc, #448]	; (8001dc8 <setLED2+0x330>)
 8001c08:	f006 fb54 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c12:	486d      	ldr	r0, [pc, #436]	; (8001dc8 <setLED2+0x330>)
 8001c14:	f006 fb4e 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1e:	486a      	ldr	r0, [pc, #424]	; (8001dc8 <setLED2+0x330>)
 8001c20:	f006 fb48 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	4867      	ldr	r0, [pc, #412]	; (8001dc8 <setLED2+0x330>)
 8001c2c:	f006 fb42 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001c30:	e0c3      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'X'){
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b58      	cmp	r3, #88	; 0x58
 8001c36:	d124      	bne.n	8001c82 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3e:	4861      	ldr	r0, [pc, #388]	; (8001dc4 <setLED2+0x32c>)
 8001c40:	f006 fb38 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4a:	485f      	ldr	r0, [pc, #380]	; (8001dc8 <setLED2+0x330>)
 8001c4c:	f006 fb32 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	485c      	ldr	r0, [pc, #368]	; (8001dc8 <setLED2+0x330>)
 8001c58:	f006 fb2c 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	4859      	ldr	r0, [pc, #356]	; (8001dc8 <setLED2+0x330>)
 8001c64:	f006 fb26 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6e:	4856      	ldr	r0, [pc, #344]	; (8001dc8 <setLED2+0x330>)
 8001c70:	f006 fb20 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c7a:	4853      	ldr	r0, [pc, #332]	; (8001dc8 <setLED2+0x330>)
 8001c7c:	f006 fb1a 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001c80:	e09b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'V'){
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b56      	cmp	r3, #86	; 0x56
 8001c86:	d124      	bne.n	8001cd2 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8e:	484d      	ldr	r0, [pc, #308]	; (8001dc4 <setLED2+0x32c>)
 8001c90:	f006 fb10 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <setLED2+0x330>)
 8001c9c:	f006 fb0a 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca6:	4848      	ldr	r0, [pc, #288]	; (8001dc8 <setLED2+0x330>)
 8001ca8:	f006 fb04 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb2:	4845      	ldr	r0, [pc, #276]	; (8001dc8 <setLED2+0x330>)
 8001cb4:	f006 fafe 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cbe:	4842      	ldr	r0, [pc, #264]	; (8001dc8 <setLED2+0x330>)
 8001cc0:	f006 faf8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cca:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <setLED2+0x330>)
 8001ccc:	f006 faf2 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001cd0:	e073      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'T'){
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b54      	cmp	r3, #84	; 0x54
 8001cd6:	d124      	bne.n	8001d22 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cde:	4839      	ldr	r0, [pc, #228]	; (8001dc4 <setLED2+0x32c>)
 8001ce0:	f006 fae8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cea:	4837      	ldr	r0, [pc, #220]	; (8001dc8 <setLED2+0x330>)
 8001cec:	f006 fae2 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf6:	4834      	ldr	r0, [pc, #208]	; (8001dc8 <setLED2+0x330>)
 8001cf8:	f006 fadc 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d02:	4831      	ldr	r0, [pc, #196]	; (8001dc8 <setLED2+0x330>)
 8001d04:	f006 fad6 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	482e      	ldr	r0, [pc, #184]	; (8001dc8 <setLED2+0x330>)
 8001d10:	f006 fad0 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1a:	482b      	ldr	r0, [pc, #172]	; (8001dc8 <setLED2+0x330>)
 8001d1c:	f006 faca 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001d20:	e04b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'A'){
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b41      	cmp	r3, #65	; 0x41
 8001d26:	d124      	bne.n	8001d72 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	4825      	ldr	r0, [pc, #148]	; (8001dc4 <setLED2+0x32c>)
 8001d30:	f006 fac0 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <setLED2+0x330>)
 8001d3c:	f006 faba 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d46:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <setLED2+0x330>)
 8001d48:	f006 fab4 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <setLED2+0x330>)
 8001d54:	f006 faae 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <setLED2+0x330>)
 8001d60:	f006 faa8 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <setLED2+0x330>)
 8001d6c:	f006 faa2 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001d70:	e023      	b.n	8001dba <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d78:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <setLED2+0x32c>)
 8001d7a:	f006 fa9b 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <setLED2+0x330>)
 8001d86:	f006 fa95 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <setLED2+0x330>)
 8001d92:	f006 fa8f 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <setLED2+0x330>)
 8001d9e:	f006 fa89 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <setLED2+0x330>)
 8001daa:	f006 fa83 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <setLED2+0x330>)
 8001db6:	f006 fa7d 	bl	80082b4 <HAL_GPIO_WritePin>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001dd8:	4bb3      	ldr	r3, [pc, #716]	; (80020a8 <calculateLineFollowingTermFlip+0x2d8>)
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	4bb3      	ldr	r3, [pc, #716]	; (80020ac <calculateLineFollowingTermFlip+0x2dc>)
 8001dde:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001de6:	4bb2      	ldr	r3, [pc, #712]	; (80020b0 <calculateLineFollowingTermFlip+0x2e0>)
 8001de8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	f040 8140 	bne.w	8002072 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001df2:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <calculateLineFollowingTermFlip+0x2e4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dfa:	4baf      	ldr	r3, [pc, #700]	; (80020b8 <calculateLineFollowingTermFlip+0x2e8>)
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001e02:	4bac      	ldr	r3, [pc, #688]	; (80020b4 <calculateLineFollowingTermFlip+0x2e4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001e08:	4bac      	ldr	r3, [pc, #688]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb88 	bl	8000524 <__aeabi_i2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4ba9      	ldr	r3, [pc, #676]	; (80020c0 <calculateLineFollowingTermFlip+0x2f0>)
 8001e1a:	f7fe fbed 	bl	80005f8 <__aeabi_dmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4625      	mov	r5, r4
 8001e24:	461c      	mov	r4, r3
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	a393      	add	r3, pc, #588	; (adr r3, 8002080 <calculateLineFollowingTermFlip+0x2b0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fa22 	bl	800028c <__adddf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	4625      	mov	r5, r4
 8001e4e:	461c      	mov	r4, r3
 8001e50:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb64 	bl	8000524 <__aeabi_i2d>
 8001e5c:	a38a      	add	r3, pc, #552	; (adr r3, 8002088 <calculateLineFollowingTermFlip+0x2b8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbc9 	bl	80005f8 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe fa0d 	bl	800028c <__adddf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	4625      	mov	r5, r4
 8001e78:	461c      	mov	r4, r3
 8001e7a:	4b90      	ldr	r3, [pc, #576]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	a382      	add	r3, pc, #520	; (adr r3, 8002090 <calculateLineFollowingTermFlip+0x2c0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbb4 	bl	80005f8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f9f8 	bl	800028c <__adddf3>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4625      	mov	r5, r4
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	4b85      	ldr	r3, [pc, #532]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb3a 	bl	8000524 <__aeabi_i2d>
 8001eb0:	a379      	add	r3, pc, #484	; (adr r3, 8002098 <calculateLineFollowingTermFlip+0x2c8>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fb9f 	bl	80005f8 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9e3 	bl	800028c <__adddf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	4625      	mov	r5, r4
 8001ecc:	461c      	mov	r4, r3
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001ed0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb25 	bl	8000524 <__aeabi_i2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe f9d3 	bl	800028c <__adddf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	4618      	mov	r0, r3
 8001eec:	4621      	mov	r1, r4
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <calculateLineFollowingTermFlip+0x2f4>)
 8001ef4:	f7fe fcaa 	bl	800084c <__aeabi_ddiv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4625      	mov	r5, r4
 8001efe:	461c      	mov	r4, r3
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f02:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb0c 	bl	8000524 <__aeabi_i2d>
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4689      	mov	r9, r1
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb04 	bl	8000524 <__aeabi_i2d>
 8001f1c:	a35e      	add	r3, pc, #376	; (adr r3, 8002098 <calculateLineFollowingTermFlip+0x2c8>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb69 	bl	80005f8 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4690      	mov	r8, r2
 8001f38:	4699      	mov	r9, r3
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f3c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	a352      	add	r3, pc, #328	; (adr r3, 8002090 <calculateLineFollowingTermFlip+0x2c0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fb54 	bl	80005f8 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4640      	mov	r0, r8
 8001f56:	4649      	mov	r1, r9
 8001f58:	f7fe f998 	bl	800028c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4690      	mov	r8, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	4b55      	ldr	r3, [pc, #340]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fada 	bl	8000524 <__aeabi_i2d>
 8001f70:	a345      	add	r3, pc, #276	; (adr r3, 8002088 <calculateLineFollowingTermFlip+0x2b8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb3f 	bl	80005f8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4640      	mov	r0, r8
 8001f80:	4649      	mov	r1, r9
 8001f82:	f7fe f983 	bl	800028c <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4690      	mov	r8, r2
 8001f8c:	4699      	mov	r9, r3
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fac5 	bl	8000524 <__aeabi_i2d>
 8001f9a:	a339      	add	r3, pc, #228	; (adr r3, 8002080 <calculateLineFollowingTermFlip+0x2b0>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe fb2a 	bl	80005f8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4640      	mov	r0, r8
 8001faa:	4649      	mov	r1, r9
 8001fac:	f7fe f96e 	bl	800028c <__adddf3>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4690      	mov	r8, r2
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001fba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <calculateLineFollowingTermFlip+0x2f0>)
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe f959 	bl	800028c <__adddf3>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <calculateLineFollowingTermFlip+0x2f4>)
 8001fe8:	f7fe fc30 	bl	800084c <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f948 	bl	8000288 <__aeabi_dsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f7fe fdf2 	bl	8000be8 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8002008:	ed97 7a05 	vldr	s14, [r7, #20]
 800200c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <calculateLineFollowingTermFlip+0x2f8>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002022:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002026:	edd7 7a04 	vldr	s15, [r7, #16]
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	ee17 0a90 	vmov	r0, s15
 8002032:	f7fe fa89 	bl	8000548 <__aeabi_f2d>
 8002036:	a31a      	add	r3, pc, #104	; (adr r3, 80020a0 <calculateLineFollowingTermFlip+0x2d0>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc06 	bl	800084c <__aeabi_ddiv>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	f7fe fdce 	bl	8000be8 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <calculateLineFollowingTermFlip+0x2e8>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7a02 	vldr	s15, [r7, #8]
 800205a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800205e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <calculateLineFollowingTermFlip+0x2fc>)
 8002068:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <calculateLineFollowingTermFlip+0x2f8>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6013      	str	r3, [r2, #0]
	}
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800207c:	f3af 8000 	nop.w
 8002080:	9999999a 	.word	0x9999999a
 8002084:	3ff99999 	.word	0x3ff99999
 8002088:	33333333 	.word	0x33333333
 800208c:	3ff73333 	.word	0x3ff73333
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	3ff4cccc 	.word	0x3ff4cccc
 8002098:	66666666 	.word	0x66666666
 800209c:	3ff26666 	.word	0x3ff26666
 80020a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020a4:	3f50624d 	.word	0x3f50624d
 80020a8:	40733333 	.word	0x40733333
 80020ac:	3ccccccd 	.word	0x3ccccccd
 80020b0:	20000276 	.word	0x20000276
 80020b4:	20000277 	.word	0x20000277
 80020b8:	20000284 	.word	0x20000284
 80020bc:	2001a604 	.word	0x2001a604
 80020c0:	3ffc0000 	.word	0x3ffc0000
 80020c4:	40180000 	.word	0x40180000
 80020c8:	20000280 	.word	0x20000280
 80020cc:	20000278 	.word	0x20000278

080020d0 <lineTraceFlip>:

void lineTraceFlip(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80020d6:	4b32      	ldr	r3, [pc, #200]	; (80021a0 <lineTraceFlip+0xd0>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d156      	bne.n	800218e <lineTraceFlip+0xbe>

		float motor_l;
		float motor_r;

		float velocity_control_term = getVelocityControlTerm();
 80020e0:	f001 fa96 	bl	8003610 <getVelocityControlTerm>
 80020e4:	ed87 0a01 	vstr	s0, [r7, #4]
		velocity_control_term -= exceeded;
		line_following_term += exceeded;*/



		if(getRunMode() == 1){
 80020e8:	f003 ff44 	bl	8005f74 <getRunMode>
 80020ec:	eeb0 7a40 	vmov.f32	s14, s0
 80020f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80020f4:	eeb4 7a67 	vcmp.f32	s14, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d112      	bne.n	8002124 <lineTraceFlip+0x54>
		    motor_l = velocity_control_term + line_following_term;//ライントレース時のモータ出力
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <lineTraceFlip+0xd4>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ed97 7a01 	vldr	s14, [r7, #4]
 8002108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210c:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term - line_following_term;
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <lineTraceFlip+0xd4>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ed97 7a01 	vldr	s14, [r7, #4]
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	edc7 7a02 	vstr	s15, [r7, #8]
 8002122:	e01e      	b.n	8002162 <lineTraceFlip+0x92>
		}
		else if(getRunMode() == 5)
 8002124:	f003 ff26 	bl	8005f74 <getRunMode>
 8002128:	eeb0 7a40 	vmov.f32	s14, s0
 800212c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8002130:	eeb4 7a67 	vcmp.f32	s14, s15
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	d113      	bne.n	8002162 <lineTraceFlip+0x92>
		{
			motor_l = velocity_control_term - getAngleControlTerm();
 800213a:	f7fe ffc9 	bl	80010d0 <getAngleControlTerm>
 800213e:	eeb0 7a40 	vmov.f32	s14, s0
 8002142:	edd7 7a01 	vldr	s15, [r7, #4]
 8002146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800214a:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term + getAngleControlTerm();
 800214e:	f7fe ffbf 	bl	80010d0 <getAngleControlTerm>
 8002152:	eeb0 7a40 	vmov.f32	s14, s0
 8002156:	edd7 7a01 	vldr	s15, [r7, #4]
 800215a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800215e:	edc7 7a02 	vstr	s15, [r7, #8]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <lineTraceFlip+0xd8>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002170:	ee17 3a90 	vmov	r3, s15
 8002174:	b21b      	sxth	r3, r3
 8002176:	edd7 7a02 	vldr	s15, [r7, #8]
 800217a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217e:	ee17 2a90 	vmov	r2, s15
 8002182:	b212      	sxth	r2, r2
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f003 f896 	bl	80052b8 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 800218c:	e003      	b.n	8002196 <lineTraceFlip+0xc6>
		setMotor(0, 0);
 800218e:	2100      	movs	r1, #0
 8002190:	2000      	movs	r0, #0
 8002192:	f003 f891 	bl	80052b8 <setMotor>
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000276 	.word	0x20000276
 80021a4:	20000278 	.word	0x20000278
 80021a8:	2001a6ec 	.word	0x2001a6ec

080021ac <startLineTrace>:

void startLineTrace()
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <startLineTrace+0x1c>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <startLineTrace+0x20>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000276 	.word	0x20000276
 80021cc:	20000277 	.word	0x20000277

080021d0 <stopLineTrace>:

void stopLineTrace()
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <stopLineTrace+0x1c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <stopLineTrace+0x20>)
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20000276 	.word	0x20000276
 80021f0:	20000278 	.word	0x20000278

080021f4 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return dark_flag;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <getCouseOutFlag+0x14>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000027c 	.word	0x2000027c

0800220c <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002210:	2202      	movs	r2, #2
 8002212:	4905      	ldr	r1, [pc, #20]	; (8002228 <initADC+0x1c>)
 8002214:	4805      	ldr	r0, [pc, #20]	; (800222c <initADC+0x20>)
 8002216:	f004 fc81 	bl	8006b1c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800221a:	220c      	movs	r2, #12
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <initADC+0x24>)
 800221e:	4805      	ldr	r0, [pc, #20]	; (8002234 <initADC+0x28>)
 8002220:	f004 fc7c 	bl	8006b1c <HAL_ADC_Start_DMA>
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200002a0 	.word	0x200002a0
 800222c:	2001a740 	.word	0x2001a740
 8002230:	20000288 	.word	0x20000288
 8002234:	2001a6f0 	.word	0x2001a6f0

08002238 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800223c:	4bc9      	ldr	r3, [pc, #804]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 800223e:	885b      	ldrh	r3, [r3, #2]
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002248:	4bc7      	ldr	r3, [pc, #796]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 800224a:	edd3 7a01 	vldr	s15, [r3, #4]
 800224e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002252:	4bc6      	ldr	r3, [pc, #792]	; (800256c <storeAnalogSensorBuffer+0x334>)
 8002254:	ed93 7a01 	vldr	s14, [r3, #4]
 8002258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	4bc3      	ldr	r3, [pc, #780]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800226e:	ee17 3a90 	vmov	r3, s15
 8002272:	b219      	sxth	r1, r3
 8002274:	4bc0      	ldr	r3, [pc, #768]	; (8002578 <storeAnalogSensorBuffer+0x340>)
 8002276:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800227a:	4bba      	ldr	r3, [pc, #744]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002286:	4bb8      	ldr	r3, [pc, #736]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002290:	4bb6      	ldr	r3, [pc, #728]	; (800256c <storeAnalogSensorBuffer+0x334>)
 8002292:	ed93 7a00 	vldr	s14, [r3]
 8002296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002570 <storeAnalogSensorBuffer+0x338>
 800229e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a2:	4bb4      	ldr	r3, [pc, #720]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ac:	ee17 3a90 	vmov	r3, s15
 80022b0:	b219      	sxth	r1, r3
 80022b2:	4bb2      	ldr	r3, [pc, #712]	; (800257c <storeAnalogSensorBuffer+0x344>)
 80022b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80022b8:	4baa      	ldr	r3, [pc, #680]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80022ba:	889b      	ldrh	r3, [r3, #4]
 80022bc:	ee07 3a90 	vmov	s15, r3
 80022c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c4:	4ba8      	ldr	r3, [pc, #672]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 80022c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022ce:	4ba7      	ldr	r3, [pc, #668]	; (800256c <storeAnalogSensorBuffer+0x334>)
 80022d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80022d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002570 <storeAnalogSensorBuffer+0x338>
 80022dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e0:	4ba4      	ldr	r3, [pc, #656]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ea:	ee17 3a90 	vmov	r3, s15
 80022ee:	b219      	sxth	r1, r3
 80022f0:	4ba3      	ldr	r3, [pc, #652]	; (8002580 <storeAnalogSensorBuffer+0x348>)
 80022f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80022f6:	4b9b      	ldr	r3, [pc, #620]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80022f8:	88db      	ldrh	r3, [r3, #6]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002302:	4b99      	ldr	r3, [pc, #612]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 8002304:	edd3 7a03 	vldr	s15, [r3, #12]
 8002308:	ee77 6a67 	vsub.f32	s13, s14, s15
 800230c:	4b97      	ldr	r3, [pc, #604]	; (800256c <storeAnalogSensorBuffer+0x334>)
 800230e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002316:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002570 <storeAnalogSensorBuffer+0x338>
 800231a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231e:	4b95      	ldr	r3, [pc, #596]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002328:	ee17 3a90 	vmov	r3, s15
 800232c:	b219      	sxth	r1, r3
 800232e:	4b95      	ldr	r3, [pc, #596]	; (8002584 <storeAnalogSensorBuffer+0x34c>)
 8002330:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002334:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 8002336:	891b      	ldrh	r3, [r3, #8]
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002340:	4b89      	ldr	r3, [pc, #548]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 8002342:	edd3 7a04 	vldr	s15, [r3, #16]
 8002346:	ee77 6a67 	vsub.f32	s13, s14, s15
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <storeAnalogSensorBuffer+0x334>)
 800234c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002354:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	4b85      	ldr	r3, [pc, #532]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002366:	ee17 3a90 	vmov	r3, s15
 800236a:	b219      	sxth	r1, r3
 800236c:	4b86      	ldr	r3, [pc, #536]	; (8002588 <storeAnalogSensorBuffer+0x350>)
 800236e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002372:	4b7c      	ldr	r3, [pc, #496]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 8002374:	895b      	ldrh	r3, [r3, #10]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237e:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 8002380:	edd3 7a05 	vldr	s15, [r3, #20]
 8002384:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002388:	4b78      	ldr	r3, [pc, #480]	; (800256c <storeAnalogSensorBuffer+0x334>)
 800238a:	ed93 7a05 	vldr	s14, [r3, #20]
 800238e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002392:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239a:	4b76      	ldr	r3, [pc, #472]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a4:	ee17 3a90 	vmov	r3, s15
 80023a8:	b219      	sxth	r1, r3
 80023aa:	4b78      	ldr	r3, [pc, #480]	; (800258c <storeAnalogSensorBuffer+0x354>)
 80023ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80023b0:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80023b2:	899b      	ldrh	r3, [r3, #12]
 80023b4:	ee07 3a90 	vmov	s15, r3
 80023b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023bc:	4b6a      	ldr	r3, [pc, #424]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 80023be:	edd3 7a06 	vldr	s15, [r3, #24]
 80023c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c6:	4b69      	ldr	r3, [pc, #420]	; (800256c <storeAnalogSensorBuffer+0x334>)
 80023c8:	ed93 7a06 	vldr	s14, [r3, #24]
 80023cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002570 <storeAnalogSensorBuffer+0x338>
 80023d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	461a      	mov	r2, r3
 80023de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e2:	ee17 3a90 	vmov	r3, s15
 80023e6:	b219      	sxth	r1, r3
 80023e8:	4b69      	ldr	r3, [pc, #420]	; (8002590 <storeAnalogSensorBuffer+0x358>)
 80023ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80023ee:	4b5d      	ldr	r3, [pc, #372]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80023f0:	89db      	ldrh	r3, [r3, #14]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 80023fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002400:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <storeAnalogSensorBuffer+0x334>)
 8002406:	ed93 7a07 	vldr	s14, [r3, #28]
 800240a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	b219      	sxth	r1, r3
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <storeAnalogSensorBuffer+0x35c>)
 8002428:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800242c:	4b4d      	ldr	r3, [pc, #308]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 800242e:	8a1b      	ldrh	r3, [r3, #16]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002438:	4b4b      	ldr	r3, [pc, #300]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 800243a:	edd3 7a08 	vldr	s15, [r3, #32]
 800243e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <storeAnalogSensorBuffer+0x334>)
 8002444:	ed93 7a08 	vldr	s14, [r3, #32]
 8002448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002454:	4b47      	ldr	r3, [pc, #284]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245e:	ee17 3a90 	vmov	r3, s15
 8002462:	b219      	sxth	r1, r3
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <storeAnalogSensorBuffer+0x360>)
 8002466:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800246a:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 800246c:	8a5b      	ldrh	r3, [r3, #18]
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 8002478:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800247c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <storeAnalogSensorBuffer+0x334>)
 8002482:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002570 <storeAnalogSensorBuffer+0x338>
 800248e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002492:	4b38      	ldr	r3, [pc, #224]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249c:	ee17 3a90 	vmov	r3, s15
 80024a0:	b219      	sxth	r1, r3
 80024a2:	4b3e      	ldr	r3, [pc, #248]	; (800259c <storeAnalogSensorBuffer+0x364>)
 80024a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80024a8:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80024aa:	8a9b      	ldrh	r3, [r3, #20]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b4:	4b2c      	ldr	r3, [pc, #176]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 80024b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024ba:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <storeAnalogSensorBuffer+0x334>)
 80024c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80024c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002570 <storeAnalogSensorBuffer+0x338>
 80024cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d0:	4b28      	ldr	r3, [pc, #160]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024da:	ee17 3a90 	vmov	r3, s15
 80024de:	b219      	sxth	r1, r3
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <storeAnalogSensorBuffer+0x368>)
 80024e2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <storeAnalogSensorBuffer+0x32c>)
 80024e8:	8adb      	ldrh	r3, [r3, #22]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f2:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <storeAnalogSensorBuffer+0x330>)
 80024f4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80024f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <storeAnalogSensorBuffer+0x334>)
 80024fe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002506:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002570 <storeAnalogSensorBuffer+0x338>
 800250a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002518:	ee17 3a90 	vmov	r3, s15
 800251c:	b219      	sxth	r1, r3
 800251e:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <storeAnalogSensorBuffer+0x36c>)
 8002520:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <storeAnalogSensorBuffer+0x370>)
 8002526:	885b      	ldrh	r3, [r3, #2]
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <storeAnalogSensorBuffer+0x374>)
 8002532:	edd3 7a01 	vldr	s15, [r3, #4]
 8002536:	ee77 6a67 	vsub.f32	s13, s14, s15
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <storeAnalogSensorBuffer+0x378>)
 800253c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002544:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002570 <storeAnalogSensorBuffer+0x338>
 8002548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <storeAnalogSensorBuffer+0x33c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	461a      	mov	r2, r3
 8002552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002556:	ee17 3a90 	vmov	r3, s15
 800255a:	b219      	sxth	r1, r3
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <storeAnalogSensorBuffer+0x37c>)
 800255e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002562:	e029      	b.n	80025b8 <storeAnalogSensorBuffer+0x380>
 8002564:	20000288 	.word	0x20000288
 8002568:	2001a5c4 	.word	0x2001a5c4
 800256c:	2001a628 	.word	0x2001a628
 8002570:	447a0000 	.word	0x447a0000
 8002574:	20000030 	.word	0x20000030
 8002578:	200002b8 	.word	0x200002b8
 800257c:	200002a4 	.word	0x200002a4
 8002580:	200002cc 	.word	0x200002cc
 8002584:	200002e0 	.word	0x200002e0
 8002588:	200002f4 	.word	0x200002f4
 800258c:	20000308 	.word	0x20000308
 8002590:	2000031c 	.word	0x2000031c
 8002594:	20000330 	.word	0x20000330
 8002598:	20000344 	.word	0x20000344
 800259c:	20000358 	.word	0x20000358
 80025a0:	2000036c 	.word	0x2000036c
 80025a4:	20000380 	.word	0x20000380
 80025a8:	200002a0 	.word	0x200002a0
 80025ac:	2001a5bc 	.word	0x2001a5bc
 80025b0:	2001a5fc 	.word	0x2001a5fc
 80025b4:	20000394 	.word	0x20000394
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <storeAnalogSensorBuffer+0x3d4>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c4:	4b12      	ldr	r3, [pc, #72]	; (8002610 <storeAnalogSensorBuffer+0x3d8>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <storeAnalogSensorBuffer+0x3dc>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002618 <storeAnalogSensorBuffer+0x3e0>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <storeAnalogSensorBuffer+0x3e4>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	b219      	sxth	r1, r3
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <storeAnalogSensorBuffer+0x3e8>)
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <storeAnalogSensorBuffer+0x3e4>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	3301      	adds	r3, #1
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <storeAnalogSensorBuffer+0x3e4>)
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	200002a0 	.word	0x200002a0
 8002610:	2001a5bc 	.word	0x2001a5bc
 8002614:	2001a5fc 	.word	0x2001a5fc
 8002618:	447a0000 	.word	0x447a0000
 800261c:	20000030 	.word	0x20000030
 8002620:	200003a8 	.word	0x200003a8

08002624 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800262a:	4bc9      	ldr	r3, [pc, #804]	; (8002950 <updateAnalogSensor+0x32c>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	ee07 3a90 	vmov	s15, r3
 8002632:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002636:	4bc7      	ldr	r3, [pc, #796]	; (8002954 <updateAnalogSensor+0x330>)
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002640:	4bc5      	ldr	r3, [pc, #788]	; (8002958 <updateAnalogSensor+0x334>)
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 800295c <updateAnalogSensor+0x338>
 800264e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002656:	ee17 3a90 	vmov	r3, s15
 800265a:	b21a      	sxth	r2, r3
 800265c:	4bc0      	ldr	r3, [pc, #768]	; (8002960 <updateAnalogSensor+0x33c>)
 800265e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002660:	4bbb      	ldr	r3, [pc, #748]	; (8002950 <updateAnalogSensor+0x32c>)
 8002662:	885b      	ldrh	r3, [r3, #2]
 8002664:	ee07 3a90 	vmov	s15, r3
 8002668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266c:	4bb9      	ldr	r3, [pc, #740]	; (8002954 <updateAnalogSensor+0x330>)
 800266e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002672:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002676:	4bb8      	ldr	r3, [pc, #736]	; (8002958 <updateAnalogSensor+0x334>)
 8002678:	ed93 7a01 	vldr	s14, [r3, #4]
 800267c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002680:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 800295c <updateAnalogSensor+0x338>
 8002684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268c:	ee17 3a90 	vmov	r3, s15
 8002690:	b21a      	sxth	r2, r3
 8002692:	4bb3      	ldr	r3, [pc, #716]	; (8002960 <updateAnalogSensor+0x33c>)
 8002694:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8002696:	4bae      	ldr	r3, [pc, #696]	; (8002950 <updateAnalogSensor+0x32c>)
 8002698:	889b      	ldrh	r3, [r3, #4]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a2:	4bac      	ldr	r3, [pc, #688]	; (8002954 <updateAnalogSensor+0x330>)
 80026a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026a8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026ac:	4baa      	ldr	r3, [pc, #680]	; (8002958 <updateAnalogSensor+0x334>)
 80026ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80026b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800295c <updateAnalogSensor+0x338>
 80026ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c2:	ee17 3a90 	vmov	r3, s15
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	4ba5      	ldr	r3, [pc, #660]	; (8002960 <updateAnalogSensor+0x33c>)
 80026ca:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80026cc:	4ba0      	ldr	r3, [pc, #640]	; (8002950 <updateAnalogSensor+0x32c>)
 80026ce:	88db      	ldrh	r3, [r3, #6]
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d8:	4b9e      	ldr	r3, [pc, #632]	; (8002954 <updateAnalogSensor+0x330>)
 80026da:	edd3 7a03 	vldr	s15, [r3, #12]
 80026de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026e2:	4b9d      	ldr	r3, [pc, #628]	; (8002958 <updateAnalogSensor+0x334>)
 80026e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80026e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ec:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800295c <updateAnalogSensor+0x338>
 80026f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f8:	ee17 3a90 	vmov	r3, s15
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b98      	ldr	r3, [pc, #608]	; (8002960 <updateAnalogSensor+0x33c>)
 8002700:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002702:	4b93      	ldr	r3, [pc, #588]	; (8002950 <updateAnalogSensor+0x32c>)
 8002704:	891b      	ldrh	r3, [r3, #8]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800270e:	4b91      	ldr	r3, [pc, #580]	; (8002954 <updateAnalogSensor+0x330>)
 8002710:	edd3 7a04 	vldr	s15, [r3, #16]
 8002714:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002718:	4b8f      	ldr	r3, [pc, #572]	; (8002958 <updateAnalogSensor+0x334>)
 800271a:	ed93 7a04 	vldr	s14, [r3, #16]
 800271e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002722:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800295c <updateAnalogSensor+0x338>
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272e:	ee17 3a90 	vmov	r3, s15
 8002732:	b21a      	sxth	r2, r3
 8002734:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <updateAnalogSensor+0x33c>)
 8002736:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002738:	4b85      	ldr	r3, [pc, #532]	; (8002950 <updateAnalogSensor+0x32c>)
 800273a:	895b      	ldrh	r3, [r3, #10]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002744:	4b83      	ldr	r3, [pc, #524]	; (8002954 <updateAnalogSensor+0x330>)
 8002746:	edd3 7a05 	vldr	s15, [r3, #20]
 800274a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <updateAnalogSensor+0x334>)
 8002750:	ed93 7a05 	vldr	s14, [r3, #20]
 8002754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002758:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800295c <updateAnalogSensor+0x338>
 800275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002764:	ee17 3a90 	vmov	r3, s15
 8002768:	b21a      	sxth	r2, r3
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <updateAnalogSensor+0x33c>)
 800276c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800276e:	4b78      	ldr	r3, [pc, #480]	; (8002950 <updateAnalogSensor+0x32c>)
 8002770:	899b      	ldrh	r3, [r3, #12]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277a:	4b76      	ldr	r3, [pc, #472]	; (8002954 <updateAnalogSensor+0x330>)
 800277c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002780:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002784:	4b74      	ldr	r3, [pc, #464]	; (8002958 <updateAnalogSensor+0x334>)
 8002786:	ed93 7a06 	vldr	s14, [r3, #24]
 800278a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800295c <updateAnalogSensor+0x338>
 8002792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279a:	ee17 3a90 	vmov	r3, s15
 800279e:	b21a      	sxth	r2, r3
 80027a0:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <updateAnalogSensor+0x33c>)
 80027a2:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80027a4:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <updateAnalogSensor+0x32c>)
 80027a6:	89db      	ldrh	r3, [r3, #14]
 80027a8:	ee07 3a90 	vmov	s15, r3
 80027ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b0:	4b68      	ldr	r3, [pc, #416]	; (8002954 <updateAnalogSensor+0x330>)
 80027b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80027b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <updateAnalogSensor+0x334>)
 80027bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80027c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800295c <updateAnalogSensor+0x338>
 80027c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d0:	ee17 3a90 	vmov	r3, s15
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <updateAnalogSensor+0x33c>)
 80027d8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80027da:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <updateAnalogSensor+0x32c>)
 80027dc:	8a1b      	ldrh	r3, [r3, #16]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <updateAnalogSensor+0x330>)
 80027e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f0:	4b59      	ldr	r3, [pc, #356]	; (8002958 <updateAnalogSensor+0x334>)
 80027f2:	ed93 7a08 	vldr	s14, [r3, #32]
 80027f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fa:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800295c <updateAnalogSensor+0x338>
 80027fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002806:	ee17 3a90 	vmov	r3, s15
 800280a:	b21a      	sxth	r2, r3
 800280c:	4b54      	ldr	r3, [pc, #336]	; (8002960 <updateAnalogSensor+0x33c>)
 800280e:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002810:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <updateAnalogSensor+0x32c>)
 8002812:	8a5b      	ldrh	r3, [r3, #18]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281c:	4b4d      	ldr	r3, [pc, #308]	; (8002954 <updateAnalogSensor+0x330>)
 800281e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002822:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002826:	4b4c      	ldr	r3, [pc, #304]	; (8002958 <updateAnalogSensor+0x334>)
 8002828:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800282c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002830:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800295c <updateAnalogSensor+0x338>
 8002834:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283c:	ee17 3a90 	vmov	r3, s15
 8002840:	b21a      	sxth	r2, r3
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <updateAnalogSensor+0x33c>)
 8002844:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002846:	4b42      	ldr	r3, [pc, #264]	; (8002950 <updateAnalogSensor+0x32c>)
 8002848:	8a9b      	ldrh	r3, [r3, #20]
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002852:	4b40      	ldr	r3, [pc, #256]	; (8002954 <updateAnalogSensor+0x330>)
 8002854:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002858:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285c:	4b3e      	ldr	r3, [pc, #248]	; (8002958 <updateAnalogSensor+0x334>)
 800285e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002866:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800295c <updateAnalogSensor+0x338>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002872:	ee17 3a90 	vmov	r3, s15
 8002876:	b21a      	sxth	r2, r3
 8002878:	4b39      	ldr	r3, [pc, #228]	; (8002960 <updateAnalogSensor+0x33c>)
 800287a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800287c:	4b34      	ldr	r3, [pc, #208]	; (8002950 <updateAnalogSensor+0x32c>)
 800287e:	8adb      	ldrh	r3, [r3, #22]
 8002880:	ee07 3a90 	vmov	s15, r3
 8002884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002888:	4b32      	ldr	r3, [pc, #200]	; (8002954 <updateAnalogSensor+0x330>)
 800288a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800288e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002892:	4b31      	ldr	r3, [pc, #196]	; (8002958 <updateAnalogSensor+0x334>)
 8002894:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800295c <updateAnalogSensor+0x338>
 80028a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a8:	ee17 3a90 	vmov	r3, s15
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <updateAnalogSensor+0x33c>)
 80028b0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <updateAnalogSensor+0x340>)
 80028b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b8:	461a      	mov	r2, r3
 80028ba:	4b2a      	ldr	r3, [pc, #168]	; (8002964 <updateAnalogSensor+0x340>)
 80028bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a28      	ldr	r2, [pc, #160]	; (8002964 <updateAnalogSensor+0x340>)
 80028c4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a26      	ldr	r2, [pc, #152]	; (8002964 <updateAnalogSensor+0x340>)
 80028cc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a24      	ldr	r2, [pc, #144]	; (8002964 <updateAnalogSensor+0x340>)
 80028d4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	4a22      	ldr	r2, [pc, #136]	; (8002964 <updateAnalogSensor+0x340>)
 80028dc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80028e0:	4413      	add	r3, r2
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <updateAnalogSensor+0x340>)
 80028e4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a1e      	ldr	r2, [pc, #120]	; (8002964 <updateAnalogSensor+0x340>)
 80028ec:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80028f0:	4413      	add	r3, r2
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <updateAnalogSensor+0x340>)
 80028f4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80028f8:	4413      	add	r3, r2
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <updateAnalogSensor+0x340>)
 80028fc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002900:	4413      	add	r3, r2
 8002902:	4a19      	ldr	r2, [pc, #100]	; (8002968 <updateAnalogSensor+0x344>)
 8002904:	fb82 1203 	smull	r1, r2, r2, r3
 8002908:	1092      	asrs	r2, r2, #2
 800290a:	17db      	asrs	r3, r3, #31
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	b21a      	sxth	r2, r3
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <updateAnalogSensor+0x348>)
 8002912:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002914:	4b16      	ldr	r3, [pc, #88]	; (8002970 <updateAnalogSensor+0x34c>)
 8002916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800291a:	461a      	mov	r2, r3
 800291c:	4b14      	ldr	r3, [pc, #80]	; (8002970 <updateAnalogSensor+0x34c>)
 800291e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002922:	4413      	add	r3, r2
 8002924:	4a12      	ldr	r2, [pc, #72]	; (8002970 <updateAnalogSensor+0x34c>)
 8002926:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800292a:	4413      	add	r3, r2
 800292c:	4a10      	ldr	r2, [pc, #64]	; (8002970 <updateAnalogSensor+0x34c>)
 800292e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002932:	4413      	add	r3, r2
 8002934:	4a0e      	ldr	r2, [pc, #56]	; (8002970 <updateAnalogSensor+0x34c>)
 8002936:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800293a:	4413      	add	r3, r2
 800293c:	4a0c      	ldr	r2, [pc, #48]	; (8002970 <updateAnalogSensor+0x34c>)
 800293e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002942:	4413      	add	r3, r2
 8002944:	4a0a      	ldr	r2, [pc, #40]	; (8002970 <updateAnalogSensor+0x34c>)
 8002946:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800294a:	4413      	add	r3, r2
 800294c:	e012      	b.n	8002974 <updateAnalogSensor+0x350>
 800294e:	bf00      	nop
 8002950:	20000288 	.word	0x20000288
 8002954:	2001a5c4 	.word	0x2001a5c4
 8002958:	2001a628 	.word	0x2001a628
 800295c:	447a0000 	.word	0x447a0000
 8002960:	2001a604 	.word	0x2001a604
 8002964:	20000394 	.word	0x20000394
 8002968:	66666667 	.word	0x66666667
 800296c:	2001a5a8 	.word	0x2001a5a8
 8002970:	200003a8 	.word	0x200003a8
 8002974:	4a1f      	ldr	r2, [pc, #124]	; (80029f4 <updateAnalogSensor+0x3d0>)
 8002976:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800297a:	4413      	add	r3, r2
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <updateAnalogSensor+0x3d0>)
 800297e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002982:	4413      	add	r3, r2
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <updateAnalogSensor+0x3d0>)
 8002986:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800298a:	4413      	add	r3, r2
 800298c:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <updateAnalogSensor+0x3d4>)
 800298e:	fb82 1203 	smull	r1, r2, r2, r3
 8002992:	1092      	asrs	r2, r2, #2
 8002994:	17db      	asrs	r3, r3, #31
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	b21a      	sxth	r2, r3
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <updateAnalogSensor+0x3d8>)
 800299c:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
 80029a2:	e01a      	b.n	80029da <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 80029a4:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <updateAnalogSensor+0x3dc>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b0:	db05      	blt.n	80029be <updateAnalogSensor+0x39a>
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <updateAnalogSensor+0x3dc>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <updateAnalogSensor+0x3dc>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	dc04      	bgt.n	80029d4 <updateAnalogSensor+0x3b0>
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <updateAnalogSensor+0x3dc>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2100      	movs	r1, #0
 80029d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0b      	cmp	r3, #11
 80029de:	dde1      	ble.n	80029a4 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <updateAnalogSensor+0x3e0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	701a      	strb	r2, [r3, #0]

}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	200003a8 	.word	0x200003a8
 80029f8:	66666667 	.word	0x66666667
 80029fc:	2001a620 	.word	0x2001a620
 8002a00:	2001a604 	.word	0x2001a604
 8002a04:	20000030 	.word	0x20000030

08002a08 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0a0      	sub	sp, #128	; 0x80
 8002a0c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002a0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a12:	2230      	movs	r2, #48	; 0x30
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f00a f8c3 	bl	800cba2 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002a1c:	f107 0310 	add.w	r3, r7, #16
 8002a20:	2230      	movs	r2, #48	; 0x30
 8002a22:	2100      	movs	r1, #0
 8002a24:	4618      	mov	r0, r3
 8002a26:	f00a f8bc 	bl	800cba2 <memset>
 8002a2a:	4bd8      	ldr	r3, [pc, #864]	; (8002d8c <sensorCalibration+0x384>)
 8002a2c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002a34:	e026      	b.n	8002a84 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002a36:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a3a:	4ad5      	ldr	r2, [pc, #852]	; (8002d90 <sensorCalibration+0x388>)
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002a46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a4a:	4ad2      	ldr	r2, [pc, #840]	; (8002d94 <sensorCalibration+0x38c>)
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	4ad1      	ldr	r2, [pc, #836]	; (8002d98 <sensorCalibration+0x390>)
 8002a52:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002a54:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b40      	subs	r3, #64	; 0x40
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002a68:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a72:	4413      	add	r3, r2
 8002a74:	3b70      	subs	r3, #112	; 0x70
 8002a76:	4ac8      	ldr	r2, [pc, #800]	; (8002d98 <sensorCalibration+0x390>)
 8002a78:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002a7a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002a84:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a88:	2b0b      	cmp	r3, #11
 8002a8a:	d9d4      	bls.n	8002a36 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002a92:	e013      	b.n	8002abc <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002a94:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002a98:	4ac0      	ldr	r2, [pc, #768]	; (8002d9c <sensorCalibration+0x394>)
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002aa4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002aa8:	4abd      	ldr	r2, [pc, #756]	; (8002da0 <sensorCalibration+0x398>)
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	4aba      	ldr	r2, [pc, #744]	; (8002d98 <sensorCalibration+0x390>)
 8002ab0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ab2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002abc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d9e7      	bls.n	8002a94 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002ac4:	e0f5      	b.n	8002cb2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002ac6:	2058      	movs	r0, #88	; 0x58
 8002ac8:	f7fe ffe6 	bl	8001a98 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002ad2:	e06e      	b.n	8002bb2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002ad4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ad8:	4ab2      	ldr	r2, [pc, #712]	; (8002da4 <sensorCalibration+0x39c>)
 8002ada:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ade:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ae2:	ee07 2a90 	vmov	s15, r2
 8002ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002af0:	4413      	add	r3, r2
 8002af2:	3b40      	subs	r3, #64	; 0x40
 8002af4:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002af8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002afc:	4aa9      	ldr	r2, [pc, #676]	; (8002da4 <sensorCalibration+0x39c>)
 8002afe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002b02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b06:	ee07 2a90 	vmov	s15, r2
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b14:	4413      	add	r3, r2
 8002b16:	3b70      	subs	r3, #112	; 0x70
 8002b18:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002b1c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b26:	4413      	add	r3, r2
 8002b28:	3b40      	subs	r3, #64	; 0x40
 8002b2a:	ed93 7a00 	vldr	s14, [r3]
 8002b2e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b32:	4a97      	ldr	r2, [pc, #604]	; (8002d90 <sensorCalibration+0x388>)
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	dd0d      	ble.n	8002b62 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002b46:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002b4a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b4e:	0092      	lsls	r2, r2, #2
 8002b50:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002b54:	440a      	add	r2, r1
 8002b56:	3a40      	subs	r2, #64	; 0x40
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	498d      	ldr	r1, [pc, #564]	; (8002d90 <sensorCalibration+0x388>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002b62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b70      	subs	r3, #112	; 0x70
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b78:	4a86      	ldr	r2, [pc, #536]	; (8002d94 <sensorCalibration+0x38c>)
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	d50d      	bpl.n	8002ba8 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002b8c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002b90:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002b9a:	440a      	add	r2, r1
 8002b9c:	3a70      	subs	r2, #112	; 0x70
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	497c      	ldr	r1, [pc, #496]	; (8002d94 <sensorCalibration+0x38c>)
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ba8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bac:	3301      	adds	r3, #1
 8002bae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002bb2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bb6:	2b0b      	cmp	r3, #11
 8002bb8:	d98c      	bls.n	8002ad4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002bc0:	e073      	b.n	8002caa <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002bc2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002bc6:	4a78      	ldr	r2, [pc, #480]	; (8002da8 <sensorCalibration+0x3a0>)
 8002bc8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bcc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002bd0:	ee07 2a90 	vmov	s15, r2
 8002bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002bde:	4413      	add	r3, r2
 8002be0:	3b78      	subs	r3, #120	; 0x78
 8002be2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002be6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002bea:	4a6f      	ldr	r2, [pc, #444]	; (8002da8 <sensorCalibration+0x3a0>)
 8002bec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bf0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002bf4:	ee07 2a90 	vmov	s15, r2
 8002bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c02:	4413      	add	r3, r2
 8002c04:	3b80      	subs	r3, #128	; 0x80
 8002c06:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002c0a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c14:	4413      	add	r3, r2
 8002c16:	3b78      	subs	r3, #120	; 0x78
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c20:	4a5e      	ldr	r2, [pc, #376]	; (8002d9c <sensorCalibration+0x394>)
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c32:	dd10      	ble.n	8002c56 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002c34:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c38:	4a5b      	ldr	r2, [pc, #364]	; (8002da8 <sensorCalibration+0x3a0>)
 8002c3a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c3e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c42:	ee07 2a90 	vmov	s15, r2
 8002c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4a:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <sensorCalibration+0x394>)
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	edc3 7a00 	vstr	s15, [r3]
 8002c54:	e024      	b.n	8002ca0 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002c56:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c60:	4413      	add	r3, r2
 8002c62:	3b80      	subs	r3, #128	; 0x80
 8002c64:	ed93 7a00 	vldr	s14, [r3]
 8002c68:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c6c:	4a4c      	ldr	r2, [pc, #304]	; (8002da0 <sensorCalibration+0x398>)
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7e:	d50f      	bpl.n	8002ca0 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002c80:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c84:	4a48      	ldr	r2, [pc, #288]	; (8002da8 <sensorCalibration+0x3a0>)
 8002c86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c8a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c8e:	ee07 2a90 	vmov	s15, r2
 8002c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c96:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <sensorCalibration+0x398>)
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ca0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002caa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d987      	bls.n	8002bc2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002cb2:	204c      	movs	r0, #76	; 0x4c
 8002cb4:	f003 fd4c 	bl	8006750 <getSwitchStatus>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f43f af03 	beq.w	8002ac6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002cc6:	e01b      	b.n	8002d00 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002cc8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ccc:	4a30      	ldr	r2, [pc, #192]	; (8002d90 <sensorCalibration+0x388>)
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	ed93 7a00 	vldr	s14, [r3]
 8002cd6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <sensorCalibration+0x38c>)
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cec:	4a2f      	ldr	r2, [pc, #188]	; (8002dac <sensorCalibration+0x3a4>)
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cf6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002d00:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d04:	2b0b      	cmp	r3, #11
 8002d06:	d9df      	bls.n	8002cc8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002d0e:	e010      	b.n	8002d32 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002d10:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002d14:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d18:	491e      	ldr	r1, [pc, #120]	; (8002d94 <sensorCalibration+0x38c>)
 8002d1a:	0092      	lsls	r2, r2, #2
 8002d1c:	440a      	add	r2, r1
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4923      	ldr	r1, [pc, #140]	; (8002db0 <sensorCalibration+0x3a8>)
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d28:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002d32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d36:	2b0b      	cmp	r3, #11
 8002d38:	d9ea      	bls.n	8002d10 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002d40:	e01b      	b.n	8002d7a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002d42:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <sensorCalibration+0x394>)
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	ed93 7a00 	vldr	s14, [r3]
 8002d50:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <sensorCalibration+0x398>)
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <sensorCalibration+0x3ac>)
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d70:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d74:	3301      	adds	r3, #1
 8002d76:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002d7a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d9df      	bls.n	8002d42 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002d88:	e027      	b.n	8002dda <sensorCalibration+0x3d2>
 8002d8a:	bf00      	nop
 8002d8c:	447a0000 	.word	0x447a0000
 8002d90:	2001a788 	.word	0x2001a788
 8002d94:	20000000 	.word	0x20000000
 8002d98:	44bb8000 	.word	0x44bb8000
 8002d9c:	2001a738 	.word	0x2001a738
 8002da0:	2001a7b8 	.word	0x2001a7b8
 8002da4:	20000288 	.word	0x20000288
 8002da8:	200002a0 	.word	0x200002a0
 8002dac:	2001a628 	.word	0x2001a628
 8002db0:	2001a5c4 	.word	0x2001a5c4
 8002db4:	2001a5fc 	.word	0x2001a5fc
		side_offset_values[i] = side_min_values[i];
 8002db8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002dbc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002dc0:	490a      	ldr	r1, [pc, #40]	; (8002dec <sensorCalibration+0x3e4>)
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	440a      	add	r2, r1
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4909      	ldr	r1, [pc, #36]	; (8002df0 <sensorCalibration+0x3e8>)
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002dd0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002dda:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d9ea      	bls.n	8002db8 <sensorCalibration+0x3b0>
	}
}
 8002de2:	bf00      	nop
 8002de4:	3780      	adds	r7, #128	; 0x80
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2001a7b8 	.word	0x2001a7b8
 8002df0:	2001a5bc 	.word	0x2001a5bc

08002df4 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <initLog+0x60>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	; (8002e58 <initLog+0x64>)
 8002dfe:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <initLog+0x68>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <initLog+0x6c>)
 8002e06:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <initLog+0x70>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <initLog+0x74>)
 8002e0e:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <initLog+0x78>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a16      	ldr	r2, [pc, #88]	; (8002e70 <initLog+0x7c>)
 8002e16:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <initLog+0x80>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a16      	ldr	r2, [pc, #88]	; (8002e78 <initLog+0x84>)
 8002e1e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <initLog+0x60>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <initLog+0x88>)
 8002e26:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <initLog+0x68>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <initLog+0x8c>)
 8002e2e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <initLog+0x70>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <initLog+0x90>)
 8002e36:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <initLog+0x78>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <initLog+0x94>)
 8002e3e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002e40:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <initLog+0x80>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <initLog+0x98>)
 8002e46:	6013      	str	r3, [r2, #0]
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	0801107c 	.word	0x0801107c
 8002e58:	2001a5a4 	.word	0x2001a5a4
 8002e5c:	08011080 	.word	0x08011080
 8002e60:	2001a5f8 	.word	0x2001a5f8
 8002e64:	08011084 	.word	0x08011084
 8002e68:	2001a5b4 	.word	0x2001a5b4
 8002e6c:	08011088 	.word	0x08011088
 8002e70:	2001a5a0 	.word	0x2001a5a0
 8002e74:	0801108c 	.word	0x0801108c
 8002e78:	2001a5b0 	.word	0x2001a5b0
 8002e7c:	2001a5ac 	.word	0x2001a5ac
 8002e80:	2001a5b8 	.word	0x2001a5b8
 8002e84:	2001a624 	.word	0x2001a624
 8002e88:	2001a61c 	.word	0x2001a61c
 8002e8c:	2001a5f4 	.word	0x2001a5f4

08002e90 <saveDistance>:

void saveDistance(float distance){
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	; (8002ebc <saveDistance+0x2c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fbae 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <saveDistance+0x2c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3304      	adds	r3, #4
 8002eae:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <saveDistance+0x2c>)
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	2001a5a4 	.word	0x2001a5a4

08002ec0 <saveTheta>:

void saveTheta(float theta){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <saveTheta+0x2c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe fb96 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <saveTheta+0x2c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4a03      	ldr	r2, [pc, #12]	; (8002eec <saveTheta+0x2c>)
 8002ee0:	6013      	str	r3, [r2, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2001a5f8 	.word	0x2001a5f8

08002ef0 <saveCross>:

void saveCross(float cross){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <saveCross+0x2c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fb7e 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <saveCross+0x2c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	4a03      	ldr	r2, [pc, #12]	; (8002f1c <saveCross+0x2c>)
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2001a5b4 	.word	0x2001a5b4

08002f20 <saveSide>:

void saveSide(float side){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <saveSide+0x2c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fe fb66 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <saveSide+0x2c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4a03      	ldr	r2, [pc, #12]	; (8002f4c <saveSide+0x2c>)
 8002f40:	6013      	str	r3, [r2, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	2001a5a0 	.word	0x2001a5a0

08002f50 <saveDebug>:

void saveDebug(float value){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <saveDebug+0x2c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fe fb4e 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <saveDebug+0x2c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3304      	adds	r3, #4
 8002f6e:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <saveDebug+0x2c>)
 8002f70:	6013      	str	r3, [r2, #0]
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	2001a5b0 	.word	0x2001a5b0

08002f80 <ereaseLog>:


void ereaseLog(){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002f84:	2007      	movs	r0, #7
 8002f86:	f7fe fb1d 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002f8a:	2008      	movs	r0, #8
 8002f8c:	f7fe fb1a 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002f90:	2009      	movs	r0, #9
 8002f92:	f7fe fb17 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002f96:	200a      	movs	r0, #10
 8002f98:	f7fe fb14 	bl	80015c4 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002f9c:	200b      	movs	r0, #11
 8002f9e:	f7fe fb11 	bl	80015c4 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002fa2:	4b0b      	ldr	r3, [pc, #44]	; (8002fd0 <ereaseLog+0x50>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <ereaseLog+0x54>)
 8002fa8:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <ereaseLog+0x58>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <ereaseLog+0x5c>)
 8002fb0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <ereaseLog+0x60>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <ereaseLog+0x64>)
 8002fb8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <ereaseLog+0x68>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <ereaseLog+0x6c>)
 8002fc0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <ereaseLog+0x70>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <ereaseLog+0x74>)
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	0801107c 	.word	0x0801107c
 8002fd4:	2001a5a4 	.word	0x2001a5a4
 8002fd8:	08011080 	.word	0x08011080
 8002fdc:	2001a5f8 	.word	0x2001a5f8
 8002fe0:	08011084 	.word	0x08011084
 8002fe4:	2001a5b4 	.word	0x2001a5b4
 8002fe8:	08011088 	.word	0x08011088
 8002fec:	2001a5a0 	.word	0x2001a5a0
 8002ff0:	0801108c 	.word	0x0801108c
 8002ff4:	2001a5b0 	.word	0x2001a5b0

08002ff8 <ereaseDebugLog>:

void ereaseDebugLog(){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002ffc:	200b      	movs	r0, #11
 8002ffe:	f7fe fae1 	bl	80015c4 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003002:	4b03      	ldr	r3, [pc, #12]	; (8003010 <ereaseDebugLog+0x18>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a03      	ldr	r2, [pc, #12]	; (8003014 <ereaseDebugLog+0x1c>)
 8003008:	6013      	str	r3, [r2, #0]
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	0801108c 	.word	0x0801108c
 8003014:	2001a5b0 	.word	0x2001a5b0

08003018 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <getDistanceLogSize+0x14>)
 800301e:	881b      	ldrh	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20016e3c 	.word	0x20016e3c

08003030 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <getCrossLogSize+0x14>)
 8003036:	881b      	ldrh	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20016e40 	.word	0x20016e40

08003048 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <getSideLogSize+0x14>)
 800304e:	881b      	ldrh	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20016e42 	.word	0x20016e42

08003060 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <getDebugLogSize+0x14>)
 8003066:	881b      	ldrh	r3, [r3, #0]
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	20016e44 	.word	0x20016e44

08003078 <loadDistance>:


void loadDistance(){
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003082:	4b18      	ldr	r3, [pc, #96]	; (80030e4 <loadDistance+0x6c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <loadDistance+0x70>)
 8003088:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800308a:	4b18      	ldr	r3, [pc, #96]	; (80030ec <loadDistance+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <loadDistance+0x70>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	4915      	ldr	r1, [pc, #84]	; (80030f0 <loadDistance+0x78>)
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <loadDistance+0x78>)
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eef4 7a67 	vcmp.f32	s15, s15
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	d60e      	bvs.n	80030d6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <loadDistance+0x74>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <loadDistance+0x74>)
 80030c2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <loadDistance+0x70>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <loadDistance+0x70>)
 80030cc:	6013      	str	r3, [r2, #0]
		i++;
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	3301      	adds	r3, #1
 80030d2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80030d4:	e7dc      	b.n	8003090 <loadDistance+0x18>
			break;
 80030d6:	bf00      	nop
	}
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	0801107c 	.word	0x0801107c
 80030e8:	2001a5ac 	.word	0x2001a5ac
 80030ec:	20016e3c 	.word	0x20016e3c
 80030f0:	2000c25c 	.word	0x2000c25c

080030f4 <loadTheta>:

void loadTheta(){
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <loadTheta+0x6c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <loadTheta+0x70>)
 8003104:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <loadTheta+0x74>)
 8003108:	2200      	movs	r2, #0
 800310a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 800310c:	4b15      	ldr	r3, [pc, #84]	; (8003164 <loadTheta+0x70>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4915      	ldr	r1, [pc, #84]	; (800316c <loadTheta+0x78>)
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800311e:	88fb      	ldrh	r3, [r7, #6]
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <loadTheta+0x78>)
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	eef4 7a67 	vcmp.f32	s15, s15
 800312e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003132:	d60e      	bvs.n	8003152 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003134:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <loadTheta+0x74>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <loadTheta+0x74>)
 800313e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <loadTheta+0x70>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3304      	adds	r3, #4
 8003146:	4a07      	ldr	r2, [pc, #28]	; (8003164 <loadTheta+0x70>)
 8003148:	6013      	str	r3, [r2, #0]
		i++;
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	3301      	adds	r3, #1
 800314e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003150:	e7dc      	b.n	800310c <loadTheta+0x18>
			break;
 8003152:	bf00      	nop
	}
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	08011080 	.word	0x08011080
 8003164:	2001a5b8 	.word	0x2001a5b8
 8003168:	20016e3e 	.word	0x20016e3e
 800316c:	2001184c 	.word	0x2001184c

08003170 <loadCross>:

void loadCross(){
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <loadCross+0x6c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <loadCross+0x70>)
 8003180:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003182:	4b18      	ldr	r3, [pc, #96]	; (80031e4 <loadCross+0x74>)
 8003184:	2200      	movs	r2, #0
 8003186:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <loadCross+0x70>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4915      	ldr	r1, [pc, #84]	; (80031e8 <loadCross+0x78>)
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <loadCross+0x78>)
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eef4 7a67 	vcmp.f32	s15, s15
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	d60e      	bvs.n	80031ce <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <loadCross+0x74>)
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <loadCross+0x74>)
 80031ba:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <loadCross+0x70>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3304      	adds	r3, #4
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <loadCross+0x70>)
 80031c4:	6013      	str	r3, [r2, #0]
		i++;
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	3301      	adds	r3, #1
 80031ca:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80031cc:	e7dc      	b.n	8003188 <loadCross+0x18>
			break;
 80031ce:	bf00      	nop
	}
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	08011084 	.word	0x08011084
 80031e0:	2001a624 	.word	0x2001a624
 80031e4:	20016e40 	.word	0x20016e40
 80031e8:	200003bc 	.word	0x200003bc

080031ec <loadSide>:

void loadSide(){
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <loadSide+0x6c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <loadSide+0x70>)
 80031fc:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <loadSide+0x74>)
 8003200:	2200      	movs	r2, #0
 8003202:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003204:	4b15      	ldr	r3, [pc, #84]	; (800325c <loadSide+0x70>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	4915      	ldr	r1, [pc, #84]	; (8003264 <loadSide+0x78>)
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4a12      	ldr	r2, [pc, #72]	; (8003264 <loadSide+0x78>)
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	eef4 7a67 	vcmp.f32	s15, s15
 8003226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322a:	d60e      	bvs.n	800324a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <loadSide+0x74>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <loadSide+0x74>)
 8003236:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <loadSide+0x70>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3304      	adds	r3, #4
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <loadSide+0x70>)
 8003240:	6013      	str	r3, [r2, #0]
		i++;
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	3301      	adds	r3, #1
 8003246:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003248:	e7dc      	b.n	8003204 <loadSide+0x18>
			break;
 800324a:	bf00      	nop
	}
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	08011088 	.word	0x08011088
 800325c:	2001a61c 	.word	0x2001a61c
 8003260:	20016e42 	.word	0x20016e42
 8003264:	2000054c 	.word	0x2000054c

08003268 <loadDebug>:

void loadDebug(){
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003272:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <loadDebug+0x6c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <loadDebug+0x70>)
 8003278:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <loadDebug+0x74>)
 800327c:	2200      	movs	r2, #0
 800327e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003280:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <loadDebug+0x70>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	4915      	ldr	r1, [pc, #84]	; (80032e0 <loadDebug+0x78>)
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <loadDebug+0x78>)
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	eef4 7a67 	vcmp.f32	s15, s15
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d60e      	bvs.n	80032c6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <loadDebug+0x74>)
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <loadDebug+0x74>)
 80032b2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <loadDebug+0x70>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <loadDebug+0x70>)
 80032bc:	6013      	str	r3, [r2, #0]
		i++;
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	3301      	adds	r3, #1
 80032c2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80032c4:	e7dc      	b.n	8003280 <loadDebug+0x18>
			break;
 80032c6:	bf00      	nop
	}
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	0801108c 	.word	0x0801108c
 80032d8:	2001a5f4 	.word	0x2001a5f4
 80032dc:	20016e44 	.word	0x20016e44
 80032e0:	200006dc 	.word	0x200006dc

080032e4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
	return log_distance;
 80032e8:	4b02      	ldr	r3, [pc, #8]	; (80032f4 <getDistanceArrayPointer+0x10>)
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	2000c25c 	.word	0x2000c25c

080032f8 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
	return log_theta;
 80032fc:	4b02      	ldr	r3, [pc, #8]	; (8003308 <getThetaArrayPointer+0x10>)
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	2001184c 	.word	0x2001184c

0800330c <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003316:	88fb      	ldrh	r3, [r7, #6]
 8003318:	4a06      	ldr	r2, [pc, #24]	; (8003334 <getDistanceLog+0x28>)
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	ee07 3a90 	vmov	s15, r3
}
 8003324:	eeb0 0a67 	vmov.f32	s0, s15
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	2000c25c 	.word	0x2000c25c

08003338 <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4a06      	ldr	r2, [pc, #24]	; (8003360 <getCrossLog+0x28>)
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	ee07 3a90 	vmov	s15, r3
}
 8003350:	eeb0 0a67 	vmov.f32	s0, s15
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	200003bc 	.word	0x200003bc

08003364 <getSideLog>:

float getSideLog(uint16_t idx){
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4a06      	ldr	r2, [pc, #24]	; (800338c <getSideLog+0x28>)
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	ee07 3a90 	vmov	s15, r3
}
 800337c:	eeb0 0a67 	vmov.f32	s0, s15
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	2000054c 	.word	0x2000054c

08003390 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800339a:	88fb      	ldrh	r3, [r7, #6]
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <getDebugLog+0x28>)
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	ee07 3a90 	vmov	s15, r3
}
 80033a8:	eeb0 0a67 	vmov.f32	s0, s15
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	200006dc 	.word	0x200006dc

080033bc <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80033d0:	2200      	movs	r2, #0
 80033d2:	2104      	movs	r1, #4
 80033d4:	480d      	ldr	r0, [pc, #52]	; (800340c <read_byte+0x50>)
 80033d6:	f004 ff6d 	bl	80082b4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80033da:	f107 010f 	add.w	r1, r7, #15
 80033de:	2364      	movs	r3, #100	; 0x64
 80033e0:	2201      	movs	r2, #1
 80033e2:	480b      	ldr	r0, [pc, #44]	; (8003410 <read_byte+0x54>)
 80033e4:	f005 fd58 	bl	8008e98 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80033e8:	f107 010e 	add.w	r1, r7, #14
 80033ec:	2364      	movs	r3, #100	; 0x64
 80033ee:	2201      	movs	r2, #1
 80033f0:	4807      	ldr	r0, [pc, #28]	; (8003410 <read_byte+0x54>)
 80033f2:	f005 fe85 	bl	8009100 <HAL_SPI_Receive>
		CS_SET;
 80033f6:	2201      	movs	r2, #1
 80033f8:	2104      	movs	r1, #4
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <read_byte+0x50>)
 80033fc:	f004 ff5a 	bl	80082b4 <HAL_GPIO_WritePin>

	return val;
 8003400:	7bbb      	ldrb	r3, [r7, #14]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40020c00 	.word	0x40020c00
 8003410:	2001a88c 	.word	0x2001a88c

08003414 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	460a      	mov	r2, r1
 800341e:	71fb      	strb	r3, [r7, #7]
 8003420:	4613      	mov	r3, r2
 8003422:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800342a:	b2db      	uxtb	r3, r3
 800342c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800342e:	2200      	movs	r2, #0
 8003430:	2104      	movs	r1, #4
 8003432:	480c      	ldr	r0, [pc, #48]	; (8003464 <write_byte+0x50>)
 8003434:	f004 ff3e 	bl	80082b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003438:	f107 010f 	add.w	r1, r7, #15
 800343c:	2364      	movs	r3, #100	; 0x64
 800343e:	2201      	movs	r2, #1
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <write_byte+0x54>)
 8003442:	f005 fd29 	bl	8008e98 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003446:	1db9      	adds	r1, r7, #6
 8003448:	2364      	movs	r3, #100	; 0x64
 800344a:	2201      	movs	r2, #1
 800344c:	4806      	ldr	r0, [pc, #24]	; (8003468 <write_byte+0x54>)
 800344e:	f005 fe57 	bl	8009100 <HAL_SPI_Receive>
	CS_SET;
 8003452:	2201      	movs	r2, #1
 8003454:	2104      	movs	r1, #4
 8003456:	4803      	ldr	r0, [pc, #12]	; (8003464 <write_byte+0x50>)
 8003458:	f004 ff2c 	bl	80082b4 <HAL_GPIO_WritePin>
}
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40020c00 	.word	0x40020c00
 8003468:	2001a88c 	.word	0x2001a88c

0800346c <IMU_init>:

uint8_t IMU_init() {
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8003476:	2075      	movs	r0, #117	; 0x75
 8003478:	f7ff ffa0 	bl	80033bc <read_byte>
 800347c:	4603      	mov	r3, r0
 800347e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003480:	79bb      	ldrb	r3, [r7, #6]
 8003482:	2b70      	cmp	r3, #112	; 0x70
 8003484:	d110      	bne.n	80034a8 <IMU_init+0x3c>
		ret = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800348a:	2100      	movs	r1, #0
 800348c:	206b      	movs	r0, #107	; 0x6b
 800348e:	f7ff ffc1 	bl	8003414 <write_byte>
		HAL_Delay(100);
 8003492:	2064      	movs	r0, #100	; 0x64
 8003494:	f003 fadc 	bl	8006a50 <HAL_Delay>
		write_byte(0x1A, 0x00);
 8003498:	2100      	movs	r1, #0
 800349a:	201a      	movs	r0, #26
 800349c:	f7ff ffba 	bl	8003414 <write_byte>
		write_byte(0x1B, 0x18);
 80034a0:	2118      	movs	r1, #24
 80034a2:	201b      	movs	r0, #27
 80034a4:	f7ff ffb6 	bl	8003414 <write_byte>
	}
	return ret;
 80034a8:	79fb      	ldrb	r3, [r7, #7]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <read_gyro_data>:

void read_gyro_data() {
 80034b4:	b598      	push	{r3, r4, r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80034b8:	2047      	movs	r0, #71	; 0x47
 80034ba:	f7ff ff7f 	bl	80033bc <read_byte>
 80034be:	4603      	mov	r3, r0
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	b21c      	sxth	r4, r3
 80034c4:	2048      	movs	r0, #72	; 0x48
 80034c6:	f7ff ff79 	bl	80033bc <read_byte>
 80034ca:	4603      	mov	r3, r0
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	4323      	orrs	r3, r4
 80034d0:	b21a      	sxth	r2, r3
 80034d2:	4b02      	ldr	r3, [pc, #8]	; (80034dc <read_gyro_data+0x28>)
 80034d4:	801a      	strh	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	bd98      	pop	{r3, r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	2001a7c0 	.word	0x2001a7c0

080034e0 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80034e0:	b5b0      	push	{r4, r5, r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1800, ki = 25000, kd = 0.0;
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <calculateVelocityControlFlip+0x108>)
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	4b40      	ldr	r3, [pc, #256]	; (80035ec <calculateVelocityControlFlip+0x10c>)
 80034ec:	61bb      	str	r3, [r7, #24]
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80034fa:	f000 f8d9 	bl	80036b0 <getCurrentVelocity>
 80034fe:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003502:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <calculateVelocityControlFlip+0x110>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d163      	bne.n	80035d2 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <calculateVelocityControlFlip+0x114>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d106      	bne.n	8003520 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <calculateVelocityControlFlip+0x114>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003520:	f000 f894 	bl	800364c <setvariablespeed>
 8003524:	eeb0 7a40 	vmov.f32	s14, s0
 8003528:	edd7 7a03 	vldr	s15, [r7, #12]
 800352c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003530:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003534:	ed97 7a07 	vldr	s14, [r7, #28]
 8003538:	edd7 7a04 	vldr	s15, [r7, #16]
 800353c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003540:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003544:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7fc fffd 	bl	8000548 <__aeabi_f2d>
 800354e:	4604      	mov	r4, r0
 8003550:	460d      	mov	r5, r1
 8003552:	ed97 7a06 	vldr	s14, [r7, #24]
 8003556:	edd7 7a04 	vldr	s15, [r7, #16]
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355e:	ee17 0a90 	vmov	r0, s15
 8003562:	f7fc fff1 	bl	8000548 <__aeabi_f2d>
 8003566:	a31e      	add	r3, pc, #120	; (adr r3, 80035e0 <calculateVelocityControlFlip+0x100>)
 8003568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356c:	f7fd f844 	bl	80005f8 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4620      	mov	r0, r4
 8003576:	4629      	mov	r1, r5
 8003578:	f7fc fe88 	bl	800028c <__adddf3>
 800357c:	4603      	mov	r3, r0
 800357e:	460c      	mov	r4, r1
 8003580:	4618      	mov	r0, r3
 8003582:	4621      	mov	r1, r4
 8003584:	f7fd fb30 	bl	8000be8 <__aeabi_d2f>
 8003588:	4602      	mov	r2, r0
 800358a:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 800358c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 8003590:	ed93 7a00 	vldr	s14, [r3]
 8003594:	edd7 7a02 	vldr	s15, [r7, #8]
 8003598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <calculateVelocityControlFlip+0x11c>)
 800359e:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <calculateVelocityControlFlip+0x120>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a15      	ldr	r2, [pc, #84]	; (8003604 <calculateVelocityControlFlip+0x124>)
 80035ae:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <calculateVelocityControlFlip+0x118>)
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035be:	edd7 7a01 	vldr	s15, [r7, #4]
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <calculateVelocityControlFlip+0x128>)
 80035c8:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80035cc:	4a0f      	ldr	r2, [pc, #60]	; (800360c <calculateVelocityControlFlip+0x12c>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6013      	str	r3, [r2, #0]

	}

}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bdb0      	pop	{r4, r5, r7, pc}
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w
 80035e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035e4:	3f50624d 	.word	0x3f50624d
 80035e8:	44e10000 	.word	0x44e10000
 80035ec:	46c35000 	.word	0x46c35000
 80035f0:	20016e46 	.word	0x20016e46
 80035f4:	20016e47 	.word	0x20016e47
 80035f8:	20016e54 	.word	0x20016e54
 80035fc:	2001a7cc 	.word	0x2001a7cc
 8003600:	2001a7dc 	.word	0x2001a7dc
 8003604:	2001a7d4 	.word	0x2001a7d4
 8003608:	20016e48 	.word	0x20016e48
 800360c:	20016e58 	.word	0x20016e58

08003610 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <getVelocityControlTerm+0x18>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	ee07 3a90 	vmov	s15, r3
}
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	20016e48 	.word	0x20016e48

0800362c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <setTargetVelocity+0x1c>)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	20016e4c 	.word	0x20016e4c

0800364c <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003650:	f7fd ff42 	bl	80014d8 <getspeedcount>
 8003654:	eeb0 7a40 	vmov.f32	s14, s0
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <setvariablespeed+0x5c>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	db04      	blt.n	8003672 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <setvariablespeed+0x5c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0f      	ldr	r2, [pc, #60]	; (80036ac <setvariablespeed+0x60>)
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	e012      	b.n	8003698 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003672:	f7fd ff31 	bl	80014d8 <getspeedcount>
 8003676:	eeb0 7a40 	vmov.f32	s14, s0
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <setvariablespeed+0x5c>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d506      	bpl.n	8003698 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800368a:	f7fd ff25 	bl	80014d8 <getspeedcount>
 800368e:	eef0 7a40 	vmov.f32	s15, s0
 8003692:	4b06      	ldr	r3, [pc, #24]	; (80036ac <setvariablespeed+0x60>)
 8003694:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <setvariablespeed+0x60>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	ee07 3a90 	vmov	s15, r3
}
 80036a0:	eeb0 0a67 	vmov.f32	s0, s15
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20016e4c 	.word	0x20016e4c
 80036ac:	20016e50 	.word	0x20016e50

080036b0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80036b0:	b590      	push	{r4, r7, lr}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	80fb      	strh	r3, [r7, #6]
 80036ba:	2300      	movs	r3, #0
 80036bc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80036be:	1d3a      	adds	r2, r7, #4
 80036c0:	1dbb      	adds	r3, r7, #6
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fd fe25 	bl	8001314 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80036ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	0fda      	lsrs	r2, r3, #31
 80036d8:	4413      	add	r3, r2
 80036da:	105b      	asrs	r3, r3, #1
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e4:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7fc ff2d 	bl	8000548 <__aeabi_f2d>
 80036ee:	a30d      	add	r3, pc, #52	; (adr r3, 8003724 <getCurrentVelocity+0x74>)
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f7fc ff80 	bl	80005f8 <__aeabi_dmul>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4618      	mov	r0, r3
 80036fe:	4621      	mov	r1, r4
 8003700:	f7fd fa72 	bl	8000be8 <__aeabi_d2f>
 8003704:	4603      	mov	r3, r0
 8003706:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003708:	4a05      	ldr	r2, [pc, #20]	; (8003720 <getCurrentVelocity+0x70>)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	ee07 3a90 	vmov	s15, r3
}
 8003714:	eeb0 0a67 	vmov.f32	s0, s15
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop
 8003720:	2001a7d0 	.word	0x2001a7d0
 8003724:	2df331e5 	.word	0x2df331e5
 8003728:	3f878fcc 	.word	0x3f878fcc

0800372c <getTargetVelocity>:

float getTargetVelocity()
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <getTargetVelocity+0x18>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	ee07 3a90 	vmov	s15, r3
}
 8003738:	eeb0 0a67 	vmov.f32	s0, s15
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	20016e4c 	.word	0x20016e4c

08003748 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <startVelocityControl+0x1c>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003752:	4b05      	ldr	r3, [pc, #20]	; (8003768 <startVelocityControl+0x20>)
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
}
 8003758:	bf00      	nop
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20016e46 	.word	0x20016e46
 8003768:	20016e47 	.word	0x20016e47

0800376c <stopVelocityControl>:

void stopVelocityControl(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <stopVelocityControl+0x14>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20016e46 	.word	0x20016e46

08003784 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003788:	4b03      	ldr	r3, [pc, #12]	; (8003798 <setClearFlagOfVelocityControlI+0x14>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20016e47 	.word	0x20016e47

0800379c <CreateXYcoordinates>:

static float Output_velocity;
static float Output_angularvelocity;

void CreateXYcoordinates()
{
 800379c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a0:	b08a      	sub	sp, #40	; 0x28
 80037a2:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80037a4:	f7ff fd9e 	bl	80032e4 <getDistanceArrayPointer>
 80037a8:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80037aa:	f7ff fda5 	bl	80032f8 <getThetaArrayPointer>
 80037ae:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 80037c2:	f7ff fc29 	bl	8003018 <getDistanceLogSize>
 80037c6:	4603      	mov	r3, r0
 80037c8:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 80037ca:	2300      	movs	r3, #0
 80037cc:	82fb      	strh	r3, [r7, #22]
 80037ce:	e09f      	b.n	8003910 <CreateXYcoordinates+0x174>
		temp_distance = p_distance[i];
 80037d0:	8afb      	ldrh	r3, [r7, #22]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 80037dc:	8afb      	ldrh	r3, [r7, #22]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	4413      	add	r3, r2
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 80037e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80037ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d101      	bne.n	80037fa <CreateXYcoordinates+0x5e>
 80037f6:	4b4b      	ldr	r3, [pc, #300]	; (8003924 <CreateXYcoordinates+0x188>)
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 80037fa:	6a38      	ldr	r0, [r7, #32]
 80037fc:	f7fc fea4 	bl	8000548 <__aeabi_f2d>
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fc fe9f 	bl	8000548 <__aeabi_f2d>
 800380a:	4680      	mov	r8, r0
 800380c:	4689      	mov	r9, r1
 800380e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003812:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003816:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800381a:	edd7 7a06 	vldr	s15, [r7, #24]
 800381e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003822:	ee17 0a90 	vmov	r0, s15
 8003826:	f7fc fe8f 	bl	8000548 <__aeabi_f2d>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	ec43 2b10 	vmov	d0, r2, r3
 8003832:	f007 fb9d 	bl	800af70 <cos>
 8003836:	ec53 2b10 	vmov	r2, r3, d0
 800383a:	4640      	mov	r0, r8
 800383c:	4649      	mov	r1, r9
 800383e:	f7fc fedb 	bl	80005f8 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4620      	mov	r0, r4
 8003848:	4629      	mov	r1, r5
 800384a:	f7fc fd1f 	bl	800028c <__adddf3>
 800384e:	4603      	mov	r3, r0
 8003850:	460c      	mov	r4, r1
 8003852:	4618      	mov	r0, r3
 8003854:	4621      	mov	r1, r4
 8003856:	f7fd f9c7 	bl	8000be8 <__aeabi_d2f>
 800385a:	4603      	mov	r3, r0
 800385c:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 800385e:	69f8      	ldr	r0, [r7, #28]
 8003860:	f7fc fe72 	bl	8000548 <__aeabi_f2d>
 8003864:	4604      	mov	r4, r0
 8003866:	460d      	mov	r5, r1
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7fc fe6d 	bl	8000548 <__aeabi_f2d>
 800386e:	4680      	mov	r8, r0
 8003870:	4689      	mov	r9, r1
 8003872:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003876:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800387a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800387e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003886:	ee17 0a90 	vmov	r0, s15
 800388a:	f7fc fe5d 	bl	8000548 <__aeabi_f2d>
 800388e:	4602      	mov	r2, r0
 8003890:	460b      	mov	r3, r1
 8003892:	ec43 2b10 	vmov	d0, r2, r3
 8003896:	f007 fbaf 	bl	800aff8 <sin>
 800389a:	ec53 2b10 	vmov	r2, r3, d0
 800389e:	4640      	mov	r0, r8
 80038a0:	4649      	mov	r1, r9
 80038a2:	f7fc fea9 	bl	80005f8 <__aeabi_dmul>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fc fced 	bl	800028c <__adddf3>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	4618      	mov	r0, r3
 80038b8:	4621      	mov	r1, r4
 80038ba:	f7fd f995 	bl	8000be8 <__aeabi_d2f>
 80038be:	4603      	mov	r3, r0
 80038c0:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 80038c2:	ed97 7a06 	vldr	s14, [r7, #24]
 80038c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ce:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <CreateXYcoordinates+0x18c>)
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 80038de:	8afb      	ldrh	r3, [r7, #22]
 80038e0:	4a12      	ldr	r2, [pc, #72]	; (800392c <CreateXYcoordinates+0x190>)
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	601a      	str	r2, [r3, #0]
		Theta_table[i] = th;
 80038ea:	8afb      	ldrh	r3, [r7, #22]
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <CreateXYcoordinates+0x194>)
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	601a      	str	r2, [r3, #0]

		Total_length_of_course = temp_distance + Total_length_of_course;
 80038f6:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <CreateXYcoordinates+0x198>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <CreateXYcoordinates+0x198>)
 8003906:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < log_size; i++){
 800390a:	8afb      	ldrh	r3, [r7, #22]
 800390c:	3301      	adds	r3, #1
 800390e:	82fb      	strh	r3, [r7, #22]
 8003910:	8afa      	ldrh	r2, [r7, #22]
 8003912:	897b      	ldrh	r3, [r7, #10]
 8003914:	429a      	cmp	r2, r3
 8003916:	f4ff af5b 	bcc.w	80037d0 <CreateXYcoordinates+0x34>
	}
}
 800391a:	bf00      	nop
 800391c:	3728      	adds	r7, #40	; 0x28
 800391e:	46bd      	mov	sp, r7
 8003920:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003924:	3727c5ac 	.word	0x3727c5ac
 8003928:	20016e5c 	.word	0x20016e5c
 800392c:	2001762c 	.word	0x2001762c
 8003930:	20017dfc 	.word	0x20017dfc
 8003934:	200185cc 	.word	0x200185cc

08003938 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 800394a:	f7fd fd8b 	bl	8001464 <getDistance10mm>
 800394e:	ed87 0a00 	vstr	s0, [r7]
	float now_X_theta = getTheta10mm();
 8003952:	f7fd ff9b 	bl	800188c <getTheta10mm>
 8003956:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_X_theta == 0) now_X_theta = 0.00001;
 800395a:	edd7 7a03 	vldr	s15, [r7, #12]
 800395e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003966:	d101      	bne.n	800396c <CurrentXcoordinates+0x34>
 8003968:	4b1a      	ldr	r3, [pc, #104]	; (80039d4 <CurrentXcoordinates+0x9c>)
 800396a:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cosf(pre_th + now_X_theta/2);
 800396c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003970:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003974:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003978:	4b17      	ldr	r3, [pc, #92]	; (80039d8 <CurrentXcoordinates+0xa0>)
 800397a:	edd3 7a00 	vldr	s15, [r3]
 800397e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003982:	eeb0 0a67 	vmov.f32	s0, s15
 8003986:	f007 fb7f 	bl	800b088 <cosf>
 800398a:	eeb0 7a40 	vmov.f32	s14, s0
 800398e:	edd7 7a00 	vldr	s15, [r7]
 8003992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <CurrentXcoordinates+0xa4>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a0:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_X_theta;
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <CurrentXcoordinates+0xa0>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039b2:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 80039b6:	4a09      	ldr	r2, [pc, #36]	; (80039dc <CurrentXcoordinates+0xa4>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	6013      	str	r3, [r2, #0]
	pre_th = th;
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <CurrentXcoordinates+0xa0>)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6013      	str	r3, [r2, #0]

	return x;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	ee07 3a90 	vmov	s15, r3
}
 80039c8:	eeb0 0a67 	vmov.f32	s0, s15
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	3727c5ac 	.word	0x3727c5ac
 80039d8:	200185f0 	.word	0x200185f0
 80039dc:	200185f4 	.word	0x200185f4

080039e0 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 80039f2:	f7fd fd37 	bl	8001464 <getDistance10mm>
 80039f6:	ed87 0a00 	vstr	s0, [r7]
	float now_Y_theta = getTheta10mm();
 80039fa:	f7fd ff47 	bl	800188c <getTheta10mm>
 80039fe:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_Y_theta == 0) now_Y_theta = 0.00001;
 8003a02:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0e:	d101      	bne.n	8003a14 <CurrentYcoordinates+0x34>
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <CurrentYcoordinates+0x9c>)
 8003a12:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sinf(pre_th + now_Y_theta/2);
 8003a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a18:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a20:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <CurrentYcoordinates+0xa0>)
 8003a22:	edd3 7a00 	vldr	s15, [r3]
 8003a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2e:	f007 fb6b 	bl	800b108 <sinf>
 8003a32:	eeb0 7a40 	vmov.f32	s14, s0
 8003a36:	edd7 7a00 	vldr	s15, [r7]
 8003a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <CurrentYcoordinates+0xa4>)
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a48:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_Y_theta;
 8003a4c:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <CurrentYcoordinates+0xa0>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a5a:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <CurrentYcoordinates+0xa4>)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003a64:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <CurrentYcoordinates+0xa0>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6013      	str	r3, [r2, #0]

	return y;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	ee07 3a90 	vmov	s15, r3
}
 8003a70:	eeb0 0a67 	vmov.f32	s0, s15
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	3727c5ac 	.word	0x3727c5ac
 8003a80:	200185f8 	.word	0x200185f8
 8003a84:	200185fc 	.word	0x200185fc

08003a88 <updateTargetpoint>:

void updateTargetpoint()
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	if(getTargetUpdateflag() == true){
 8003a8c:	f002 fa26 	bl	8005edc <getTargetUpdateflag>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d039      	beq.n	8003b0a <updateTargetpoint+0x82>
		}else if(getDistance30mm() >= 30){
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
			clearDistance30mm();
		}*/
		if(getDistance30mm() >= 10){
 8003a96:	f7fd fd01 	bl	800149c <getDistance30mm>
 8003a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8003a9e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	db07      	blt.n	8003abc <updateTargetpoint+0x34>
			//ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
 8003aac:	4b18      	ldr	r3, [pc, #96]	; (8003b10 <updateTargetpoint+0x88>)
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	4b16      	ldr	r3, [pc, #88]	; (8003b10 <updateTargetpoint+0x88>)
 8003ab6:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003ab8:	f7fd fcfe 	bl	80014b8 <clearDistance30mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize()){
 8003abc:	f7ff faac 	bl	8003018 <getDistanceLogSize>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <updateTargetpoint+0x88>)
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d806      	bhi.n	8003ada <updateTargetpoint+0x52>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8003acc:	f7ff faa4 	bl	8003018 <getDistanceLogSize>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	4b0e      	ldr	r3, [pc, #56]	; (8003b10 <updateTargetpoint+0x88>)
 8003ad8:	801a      	strh	r2, [r3, #0]
		}
		target_X_coordinate = X_table[targetpoint_table_idx];
 8003ada:	4b0d      	ldr	r3, [pc, #52]	; (8003b10 <updateTargetpoint+0x88>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <updateTargetpoint+0x8c>)
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0c      	ldr	r2, [pc, #48]	; (8003b18 <updateTargetpoint+0x90>)
 8003ae8:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[targetpoint_table_idx];
 8003aea:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <updateTargetpoint+0x88>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	4a0b      	ldr	r2, [pc, #44]	; (8003b1c <updateTargetpoint+0x94>)
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a0a      	ldr	r2, [pc, #40]	; (8003b20 <updateTargetpoint+0x98>)
 8003af8:	6013      	str	r3, [r2, #0]
		target_Theta = Theta_table[targetpoint_table_idx];
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <updateTargetpoint+0x88>)
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <updateTargetpoint+0x9c>)
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <updateTargetpoint+0xa0>)
 8003b08:	6013      	str	r3, [r2, #0]
	}
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	2001a7e4 	.word	0x2001a7e4
 8003b14:	20016e5c 	.word	0x20016e5c
 8003b18:	200185d0 	.word	0x200185d0
 8003b1c:	2001762c 	.word	0x2001762c
 8003b20:	200185d4 	.word	0x200185d4
 8003b24:	20017dfc 	.word	0x20017dfc
 8003b28:	200185d8 	.word	0x200185d8

08003b2c <Error_XY_Debug>:

void Error_XY_Debug(const float now_X, const float now_Y, const float now_Theta)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08a      	sub	sp, #40	; 0x28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b36:	edc7 0a02 	vstr	s1, [r7, #8]
 8003b3a:	ed87 1a01 	vstr	s2, [r7, #4]
	float X_e;
	float Y_e;
	float Theta_e;
	float sin_theta = sinf(now_Theta);
 8003b3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b42:	f007 fae1 	bl	800b108 <sinf>
 8003b46:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_theta = cosf(now_Theta);
 8003b4a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003b4e:	f007 fa9b 	bl	800b088 <cosf>
 8003b52:	ed87 0a08 	vstr	s0, [r7, #32]

	X_e = (target_X_coordinate - now_X) * cos_theta + (target_Y_coordinate - now_Y) * sin_theta;
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <Error_XY_Debug+0xdc>)
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b64:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <Error_XY_Debug+0xe0>)
 8003b6e:	edd3 6a00 	vldr	s13, [r3]
 8003b72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
	Y_e = -(target_X_coordinate - now_X) * sin_theta + (target_Y_coordinate - now_Y) * cos_theta;
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <Error_XY_Debug+0xdc>)
 8003b8c:	ed93 7a00 	vldr	s14, [r3]
 8003b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b98:	eeb1 7a67 	vneg.f32	s14, s15
 8003b9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ba4:	4b19      	ldr	r3, [pc, #100]	; (8003c0c <Error_XY_Debug+0xe0>)
 8003ba6:	edd3 6a00 	vldr	s13, [r3]
 8003baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bb2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bbe:	edc7 7a06 	vstr	s15, [r7, #24]
	Theta_e = target_Theta - now_Theta;
 8003bc2:	4b13      	ldr	r3, [pc, #76]	; (8003c10 <Error_XY_Debug+0xe4>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	edc7 7a05 	vstr	s15, [r7, #20]

	now_error_x = X_e;
 8003bd4:	4a0f      	ldr	r2, [pc, #60]	; (8003c14 <Error_XY_Debug+0xe8>)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	6013      	str	r3, [r2, #0]
	now_error_y = Y_e;
 8003bda:	4a0f      	ldr	r2, [pc, #60]	; (8003c18 <Error_XY_Debug+0xec>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6013      	str	r3, [r2, #0]
	now_error_theta = Theta_e;
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <Error_XY_Debug+0xf0>)
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6013      	str	r3, [r2, #0]

	saveDebug(X_e);
 8003be6:	ed97 0a07 	vldr	s0, [r7, #28]
 8003bea:	f7ff f9b1 	bl	8002f50 <saveDebug>
	saveDebug(Y_e);
 8003bee:	ed97 0a06 	vldr	s0, [r7, #24]
 8003bf2:	f7ff f9ad 	bl	8002f50 <saveDebug>
	saveDebug(Theta_e);
 8003bf6:	ed97 0a05 	vldr	s0, [r7, #20]
 8003bfa:	f7ff f9a9 	bl	8002f50 <saveDebug>
}
 8003bfe:	bf00      	nop
 8003c00:	3728      	adds	r7, #40	; 0x28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200185d0 	.word	0x200185d0
 8003c0c:	200185d4 	.word	0x200185d4
 8003c10:	200185d8 	.word	0x200185d8
 8003c14:	200185dc 	.word	0x200185dc
 8003c18:	200185e0 	.word	0x200185e0
 8003c1c:	200185e4 	.word	0x200185e4

08003c20 <Velocity_Angularvelocity>:

void Velocity_Angularvelocity(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	ed2d 8b02 	vpush	{d8}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
	float kx = 0.003, ky = 0.02, kt = 0.02;//Kanayama Control Methodゲイン値調整
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <Velocity_Angularvelocity+0xa4>)
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <Velocity_Angularvelocity+0xa8>)
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <Velocity_Angularvelocity+0xa8>)
 8003c34:	60fb      	str	r3, [r7, #12]

	float Target_velocity = getTargetVelocity();
 8003c36:	f7ff fd79 	bl	800372c <getTargetVelocity>
 8003c3a:	ed87 0a02 	vstr	s0, [r7, #8]
	float Target_angularvelocity = now_error_theta;
 8003c3e:	4b23      	ldr	r3, [pc, #140]	; (8003ccc <Velocity_Angularvelocity+0xac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	607b      	str	r3, [r7, #4]

	Output_velocity = Target_velocity * cosf(now_error_theta) + kx * now_error_x;//車速計算
 8003c44:	4b21      	ldr	r3, [pc, #132]	; (8003ccc <Velocity_Angularvelocity+0xac>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4e:	f007 fa1b 	bl	800b088 <cosf>
 8003c52:	eeb0 7a40 	vmov.f32	s14, s0
 8003c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c5e:	4b1c      	ldr	r3, [pc, #112]	; (8003cd0 <Velocity_Angularvelocity+0xb0>)
 8003c60:	edd3 6a00 	vldr	s13, [r3]
 8003c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <Velocity_Angularvelocity+0xb4>)
 8003c72:	edc3 7a00 	vstr	s15, [r3]
	Output_angularvelocity = Target_angularvelocity + Target_velocity * (ky * now_error_y + kt * sinf(now_error_theta));//車体の角速度計算
 8003c76:	4b18      	ldr	r3, [pc, #96]	; (8003cd8 <Velocity_Angularvelocity+0xb8>)
 8003c78:	ed93 7a00 	vldr	s14, [r3]
 8003c7c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c80:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <Velocity_Angularvelocity+0xac>)
 8003c86:	edd3 7a00 	vldr	s15, [r3]
 8003c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8e:	f007 fa3b 	bl	800b108 <sinf>
 8003c92:	eeb0 7a40 	vmov.f32	s14, s0
 8003c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8003ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003caa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <Velocity_Angularvelocity+0xbc>)
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
}
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	ecbd 8b02 	vpop	{d8}
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	3b449ba6 	.word	0x3b449ba6
 8003cc8:	3ca3d70a 	.word	0x3ca3d70a
 8003ccc:	200185e4 	.word	0x200185e4
 8003cd0:	200185dc 	.word	0x200185dc
 8003cd4:	200185e8 	.word	0x200185e8
 8003cd8:	200185e0 	.word	0x200185e0
 8003cdc:	200185ec 	.word	0x200185ec

08003ce0 <getTotal_length>:

float getTotal_length()
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
	return Total_length_of_course;
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <getTotal_length+0x18>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	ee07 3a90 	vmov	s15, r3
}
 8003cec:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	200185cc 	.word	0x200185cc

08003cfc <getTargetpoint_X>:

float getTargetpoint_X()
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	return target_X_coordinate;
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <getTargetpoint_X+0x18>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	ee07 3a90 	vmov	s15, r3
}
 8003d08:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	200185d0 	.word	0x200185d0

08003d18 <getTargetpoint_Y>:

float getTargetpoint_Y()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return target_Y_coordinate;
 8003d1c:	4b04      	ldr	r3, [pc, #16]	; (8003d30 <getTargetpoint_Y+0x18>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	ee07 3a90 	vmov	s15, r3
}
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	200185d4 	.word	0x200185d4

08003d34 <getTargetpoint_Theta>:

float getTargetpoint_Theta()
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	return target_Theta;
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <getTargetpoint_Theta+0x18>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	ee07 3a90 	vmov	s15, r3
}
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	200185d8 	.word	0x200185d8

08003d50 <getOutput_velocity>:

float getOutput_velocity()
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
	return Output_velocity;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <getOutput_velocity+0x18>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	ee07 3a90 	vmov	s15, r3
}
 8003d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	200185e8 	.word	0x200185e8

08003d6c <getOutput_angularvelocity>:

float getOutput_angularvelocity()
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
	return Output_angularvelocity;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <getOutput_angularvelocity+0x18>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	ee07 3a90 	vmov	s15, r3
}
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	200185ec 	.word	0x200185ec

08003d88 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003d90:	1d39      	adds	r1, r7, #4
 8003d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d96:	2201      	movs	r2, #1
 8003d98:	4803      	ldr	r0, [pc, #12]	; (8003da8 <__io_putchar+0x20>)
 8003d9a:	f006 fc8a 	bl	800a6b2 <HAL_UART_Transmit>
	return ch;
 8003d9e:	687b      	ldr	r3, [r7, #4]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	2001a8e4 	.word	0x2001a8e4

08003dac <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1a      	ldr	r2, [pc, #104]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d121      	bne.n	8003e02 <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003dc6:	6013      	str	r3, [r2, #0]
      timer2++;
 8003dc8:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003dd0:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003dd2:	f7fd f9c5 	bl	8001160 <updateEncoderCnt>
      updateIMUValue();
 8003dd6:	f7fd fc4f 	bl	8001678 <updateIMUValue>
      updateAnalogSensor();
 8003dda:	f7fe fc23 	bl	8002624 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003dde:	f7fd fff7 	bl	8001dd0 <calculateLineFollowingTermFlip>
      Velocity_Angularvelocity();
 8003de2:	f7ff ff1d 	bl	8003c20 <Velocity_Angularvelocity>
      calculateVelocityControlFlip();
 8003de6:	f7ff fb7b 	bl	80034e0 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003dea:	f7fd f8cd 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003dee:	f7fe f96f 	bl	80020d0 <lineTraceFlip>
      runningFlip();
 8003df2:	f001 fcf5 	bl	80057e0 <runningFlip>
      motorCtrlFlip();
 8003df6:	f001 f9e9 	bl	80051cc <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003dfa:	f001 fa4b 	bl	8005294 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003dfe:	f001 fab7 	bl	8005370 <updateSideSensorStatus>
      //checkCourseOut();

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d106      	bne.n	8003e1a <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3301      	adds	r3, #1
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003e14:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003e16:	f7fe fa0f 	bl	8002238 <storeAnalogSensorBuffer>

   }
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40001000 	.word	0x40001000
 8003e28:	2001a7e8 	.word	0x2001a7e8
 8003e2c:	2001a830 	.word	0x2001a830
 8003e30:	40001400 	.word	0x40001400
 8003e34:	2001aa08 	.word	0x2001aa08

08003e38 <init>:

void init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	  initADC();
 8003e3c:	f7fe f9e6 	bl	800220c <initADC>
	  initEncoder();
 8003e40:	f7fd f972 	bl	8001128 <initEncoder>
	  initLog();
 8003e44:	f7fe ffd6 	bl	8002df4 <initLog>
	  initGyro();
 8003e48:	f7fd fc06 	bl	8001658 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003e4c:	4809      	ldr	r0, [pc, #36]	; (8003e74 <init+0x3c>)
 8003e4e:	f005 fd3e 	bl	80098ce <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003e52:	4809      	ldr	r0, [pc, #36]	; (8003e78 <init+0x40>)
 8003e54:	f005 fd3b 	bl	80098ce <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003e58:	f001 f9a0 	bl	800519c <initMotor>

	  setLED('R');
 8003e5c:	2052      	movs	r0, #82	; 0x52
 8003e5e:	f7fd fd4d 	bl	80018fc <setLED>

	  sensorCalibration();
 8003e62:	f7fe fdd1 	bl	8002a08 <sensorCalibration>

	  HAL_Delay(1000);
 8003e66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e6a:	f002 fdf1 	bl	8006a50 <HAL_Delay>

}
 8003e6e:	bf00      	nop
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2001a984 	.word	0x2001a984
 8003e78:	2001aa6c 	.word	0x2001aa6c

08003e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	b0ad      	sub	sp, #180	; 0xb4
 8003e82:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e84:	f002 fd72 	bl	800696c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e88:	f000 fc36 	bl	80046f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e8c:	f001 f8c4 	bl	8005018 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e90:	f001 f89a 	bl	8004fc8 <MX_DMA_Init>
  MX_TIM1_Init();
 8003e94:	f000 fe4a 	bl	8004b2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8003e98:	f000 feca 	bl	8004c30 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e9c:	f000 ff1c 	bl	8004cd8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003ea0:	f000 ffd8 	bl	8004e54 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003ea4:	f000 fc92 	bl	80047cc <MX_ADC1_Init>
  MX_I2C1_Init();
 8003ea8:	f000 fddc 	bl	8004a64 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003eac:	f000 fe08 	bl	8004ac0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003eb0:	f001 f860 	bl	8004f74 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003eb4:	f000 ff64 	bl	8004d80 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003eb8:	f000 ff98 	bl	8004dec <MX_TIM7_Init>
  MX_ADC2_Init();
 8003ebc:	f000 fce6 	bl	800488c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003ec0:	f7ff ffba 	bl	8003e38 <init>

  bool running_flag = false;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003eca:	204c      	movs	r0, #76	; 0x4c
 8003ecc:	f002 fc40 	bl	8006750 <getSwitchStatus>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d109      	bne.n	8003eea <main+0x6e>
 8003ed6:	4bb5      	ldr	r3, [pc, #724]	; (80041ac <main+0x330>)
 8003ed8:	881b      	ldrh	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d105      	bne.n	8003eea <main+0x6e>
		  timer = 0;
 8003ede:	4bb4      	ldr	r3, [pc, #720]	; (80041b0 <main+0x334>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003ee4:	4bb1      	ldr	r3, [pc, #708]	; (80041ac <main+0x330>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003eea:	204c      	movs	r0, #76	; 0x4c
 8003eec:	f002 fc30 	bl	8006750 <getSwitchStatus>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d10a      	bne.n	8003f0c <main+0x90>
 8003ef6:	4bae      	ldr	r3, [pc, #696]	; (80041b0 <main+0x334>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b14      	cmp	r3, #20
 8003efc:	d906      	bls.n	8003f0c <main+0x90>
 8003efe:	4bab      	ldr	r3, [pc, #684]	; (80041ac <main+0x330>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <main+0x90>
		  sw = 2;
 8003f06:	4ba9      	ldr	r3, [pc, #676]	; (80041ac <main+0x330>)
 8003f08:	2202      	movs	r2, #2
 8003f0a:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003f0c:	4ba8      	ldr	r3, [pc, #672]	; (80041b0 <main+0x334>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b28      	cmp	r3, #40	; 0x28
 8003f12:	d906      	bls.n	8003f22 <main+0xa6>
 8003f14:	4ba5      	ldr	r3, [pc, #660]	; (80041ac <main+0x330>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <main+0xa6>
		  sw = 0;
 8003f1c:	4ba3      	ldr	r3, [pc, #652]	; (80041ac <main+0x330>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003f22:	204c      	movs	r0, #76	; 0x4c
 8003f24:	f002 fc14 	bl	8006750 <getSwitchStatus>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10c      	bne.n	8003f48 <main+0xcc>
 8003f2e:	4b9f      	ldr	r3, [pc, #636]	; (80041ac <main+0x330>)
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d108      	bne.n	8003f48 <main+0xcc>
		  //mode_selector++;
		  soiya++;
 8003f36:	4b9f      	ldr	r3, [pc, #636]	; (80041b4 <main+0x338>)
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b9d      	ldr	r3, [pc, #628]	; (80041b4 <main+0x338>)
 8003f40:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003f42:	4b9a      	ldr	r3, [pc, #616]	; (80041ac <main+0x330>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003f48:	2052      	movs	r0, #82	; 0x52
 8003f4a:	f002 fc01 	bl	8006750 <getSwitchStatus>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d109      	bne.n	8003f68 <main+0xec>
 8003f54:	4b98      	ldr	r3, [pc, #608]	; (80041b8 <main+0x33c>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <main+0xec>
	  	  timer = 0;
 8003f5c:	4b94      	ldr	r3, [pc, #592]	; (80041b0 <main+0x334>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003f62:	4b95      	ldr	r3, [pc, #596]	; (80041b8 <main+0x33c>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003f68:	2052      	movs	r0, #82	; 0x52
 8003f6a:	f002 fbf1 	bl	8006750 <getSwitchStatus>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d10a      	bne.n	8003f8a <main+0x10e>
 8003f74:	4b8e      	ldr	r3, [pc, #568]	; (80041b0 <main+0x334>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b14      	cmp	r3, #20
 8003f7a:	d906      	bls.n	8003f8a <main+0x10e>
 8003f7c:	4b8e      	ldr	r3, [pc, #568]	; (80041b8 <main+0x33c>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <main+0x10e>
	  	  sw2 = 2;
 8003f84:	4b8c      	ldr	r3, [pc, #560]	; (80041b8 <main+0x33c>)
 8003f86:	2202      	movs	r2, #2
 8003f88:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003f8a:	4b89      	ldr	r3, [pc, #548]	; (80041b0 <main+0x334>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b28      	cmp	r3, #40	; 0x28
 8003f90:	d906      	bls.n	8003fa0 <main+0x124>
 8003f92:	4b89      	ldr	r3, [pc, #548]	; (80041b8 <main+0x33c>)
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d102      	bne.n	8003fa0 <main+0x124>
	  	  sw2 = 0;
 8003f9a:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <main+0x33c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003fa0:	2052      	movs	r0, #82	; 0x52
 8003fa2:	f002 fbd5 	bl	8006750 <getSwitchStatus>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10c      	bne.n	8003fc6 <main+0x14a>
 8003fac:	4b82      	ldr	r3, [pc, #520]	; (80041b8 <main+0x33c>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d108      	bne.n	8003fc6 <main+0x14a>
	  	  cnt++;
 8003fb4:	4b81      	ldr	r3, [pc, #516]	; (80041bc <main+0x340>)
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	4b7f      	ldr	r3, [pc, #508]	; (80041bc <main+0x340>)
 8003fbe:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003fc0:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <main+0x33c>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003fc6:	4b7d      	ldr	r3, [pc, #500]	; (80041bc <main+0x340>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d902      	bls.n	8003fd4 <main+0x158>
		  cnt = 0;
 8003fce:	4b7b      	ldr	r3, [pc, #492]	; (80041bc <main+0x340>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003fd4:	4b79      	ldr	r3, [pc, #484]	; (80041bc <main+0x340>)
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <main+0x17a>
		  HAL_Delay(1000);
 8003fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fe0:	f002 fd36 	bl	8006a50 <HAL_Delay>
		  running_flag = true;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  timer2 = 0;
 8003fea:	4b75      	ldr	r3, [pc, #468]	; (80041c0 <main+0x344>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003ff0:	4b72      	ldr	r3, [pc, #456]	; (80041bc <main+0x340>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003ff6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ffa:	f083 0301 	eor.w	r3, r3, #1
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <main+0x190>
		  stopLineTrace();
 8004004:	f7fe f8e4 	bl	80021d0 <stopLineTrace>
		  stopVelocityControl();
 8004008:	f7ff fbb0 	bl	800376c <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 800400c:	f001 ff5a 	bl	8005ec4 <getgoalStatus>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <main+0x1ac>
		  running_flag = false;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  cnt = 0;
 800401c:	4b67      	ldr	r3, [pc, #412]	; (80041bc <main+0x340>)
 800401e:	2200      	movs	r2, #0
 8004020:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8004022:	2000      	movs	r0, #0
 8004024:	f001 f986 	bl	8005334 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 8004028:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <main+0x338>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	2b0d      	cmp	r3, #13
 800402e:	d902      	bls.n	8004036 <main+0x1ba>
		  soiya = 0;
 8004030:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <main+0x338>)
 8004032:	2200      	movs	r2, #0
 8004034:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8004036:	4b5f      	ldr	r3, [pc, #380]	; (80041b4 <main+0x338>)
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	2b0d      	cmp	r3, #13
 800403c:	f200 8333 	bhi.w	80046a6 <main+0x82a>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <main+0x1cc>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004081 	.word	0x08004081
 800404c:	080040a9 	.word	0x080040a9
 8004050:	080040d9 	.word	0x080040d9
 8004054:	0800411f 	.word	0x0800411f
 8004058:	08004165 	.word	0x08004165
 800405c:	080041d9 	.word	0x080041d9
 8004060:	0800422f 	.word	0x0800422f
 8004064:	08004285 	.word	0x08004285
 8004068:	080042db 	.word	0x080042db
 800406c:	08004331 	.word	0x08004331
 8004070:	08004387 	.word	0x08004387
 8004074:	080043dd 	.word	0x080043dd
 8004078:	08004433 	.word	0x08004433
 800407c:	08004489 	.word	0x08004489

			  case 0:
				  setLED('W');
 8004080:	2057      	movs	r0, #87	; 0x57
 8004082:	f7fd fc3b 	bl	80018fc <setLED>
				  setLED2('R');
 8004086:	2052      	movs	r0, #82	; 0x52
 8004088:	f7fd fd06 	bl	8001a98 <setLED2>
				  //printf("0\r\n");

				  if(running_flag == true){
 800408c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 830a 	beq.w	80046aa <main+0x82e>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 8004096:	2002      	movs	r0, #2
 8004098:	f001 f994 	bl	80053c4 <setRunMode>
						  runningInit();
 800409c:	f001 fca4 	bl	80059e8 <runningInit>
						  soiya = 13;
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <main+0x338>)
 80040a2:	220d      	movs	r2, #13
 80040a4:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 80040a6:	e300      	b.n	80046aa <main+0x82e>

			  case 1:
				  setLED('G');
 80040a8:	2047      	movs	r0, #71	; 0x47
 80040aa:	f7fd fc27 	bl	80018fc <setLED>
				  setLED2('G');
 80040ae:	2047      	movs	r0, #71	; 0x47
 80040b0:	f7fd fcf2 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80040b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 82f8 	beq.w	80046ae <main+0x832>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80040be:	f7fd fa3f 	bl	8001540 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 80040c2:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80041c4 <main+0x348>
 80040c6:	f7ff fab1 	bl	800362c <setTargetVelocity>
						  //startVelocityControl();

						  //setsuctionMotor(500);

						  HAL_Delay(1500);
 80040ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040ce:	f002 fcbf 	bl	8006a50 <HAL_Delay>

						  running();
 80040d2:	f001 fa5f 	bl	8005594 <running>
				  }

				  break;
 80040d6:	e2ea      	b.n	80046ae <main+0x832>

			  case 2:
				  setLED('Y');
 80040d8:	2059      	movs	r0, #89	; 0x59
 80040da:	f7fd fc0f 	bl	80018fc <setLED>
				  setLED2('R');
 80040de:	2052      	movs	r0, #82	; 0x52
 80040e0:	f7fd fcda 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80040e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 82e2 	beq.w	80046b2 <main+0x836>
						  //startLineTrace();

					      IMU_average();
 80040ee:	f7fd fb97 	bl	8001820 <IMU_average>

					      clearspeedcount();
 80040f2:	f7fd fa25 	bl	8001540 <clearspeedcount>

					      setRunMode(1);
 80040f6:	2001      	movs	r0, #1
 80040f8:	f001 f964 	bl	80053c4 <setRunMode>

					      setVelocityRange(0.5, 0.5);
 80040fc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8004100:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004104:	f001 fef6 	bl	8005ef4 <setVelocityRange>

						  setsuctionMotor(500);
 8004108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800410c:	f001 f912 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1000);
 8004110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004114:	f002 fc9c 	bl	8006a50 <HAL_Delay>

						  running();
 8004118:	f001 fa3c 	bl	8005594 <running>
				  }

				  break;
 800411c:	e2c9      	b.n	80046b2 <main+0x836>

			  case 3:
				  setLED('Y');
 800411e:	2059      	movs	r0, #89	; 0x59
 8004120:	f7fd fbec 	bl	80018fc <setLED>
				  setLED2('G');
 8004124:	2047      	movs	r0, #71	; 0x47
 8004126:	f7fd fcb7 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 800412a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 82c1 	beq.w	80046b6 <main+0x83a>
						  //startLineTrace();

						  clearspeedcount();
 8004134:	f7fd fa04 	bl	8001540 <clearspeedcount>

						  IMU_average();
 8004138:	f7fd fb72 	bl	8001820 <IMU_average>

						  setRunMode(1);
 800413c:	2001      	movs	r0, #1
 800413e:	f001 f941 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.2, 2.2);
 8004142:	eddf 0a21 	vldr	s1, [pc, #132]	; 80041c8 <main+0x34c>
 8004146:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80041c8 <main+0x34c>
 800414a:	f001 fed3 	bl	8005ef4 <setVelocityRange>

						  setsuctionMotor(500);
 800414e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004152:	f001 f8ef 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1000);
 8004156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800415a:	f002 fc79 	bl	8006a50 <HAL_Delay>

						  running();
 800415e:	f001 fa19 	bl	8005594 <running>
				  }

				  break;
 8004162:	e2a8      	b.n	80046b6 <main+0x83a>

			  case 4:
				  setLED('C');
 8004164:	2043      	movs	r0, #67	; 0x43
 8004166:	f7fd fbc9 	bl	80018fc <setLED>
				  setLED2('R');
 800416a:	2052      	movs	r0, #82	; 0x52
 800416c:	f7fd fc94 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 82a0 	beq.w	80046ba <main+0x83e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  IMU_average();
 800417a:	f7fd fb51 	bl	8001820 <IMU_average>

						  clearspeedcount();
 800417e:	f7fd f9df 	bl	8001540 <clearspeedcount>

						  setRunMode(5);
 8004182:	2005      	movs	r0, #5
 8004184:	f001 f91e 	bl	80053c4 <setRunMode>

						  setVelocityRange(0.5, 0.5);
 8004188:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800418c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8004190:	f001 feb0 	bl	8005ef4 <setVelocityRange>

						  setsuctionMotor(500);
 8004194:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004198:	f001 f8cc 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 800419c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80041a0:	f002 fc56 	bl	8006a50 <HAL_Delay>

						  running();
 80041a4:	f001 f9f6 	bl	8005594 <running>
				  }

				  break;
 80041a8:	e287      	b.n	80046ba <main+0x83e>
 80041aa:	bf00      	nop
 80041ac:	2001aa04 	.word	0x2001aa04
 80041b0:	2001a7e8 	.word	0x2001a7e8
 80041b4:	20018602 	.word	0x20018602
 80041b8:	20018600 	.word	0x20018600
 80041bc:	2001a888 	.word	0x2001a888
 80041c0:	2001a830 	.word	0x2001a830
 80041c4:	00000000 	.word	0x00000000
 80041c8:	400ccccd 	.word	0x400ccccd
 80041cc:	40133333 	.word	0x40133333
 80041d0:	40266666 	.word	0x40266666
 80041d4:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 80041d8:	2043      	movs	r0, #67	; 0x43
 80041da:	f7fd fb8f 	bl	80018fc <setLED>
				  setLED2('G');
 80041de:	2047      	movs	r0, #71	; 0x47
 80041e0:	f7fd fc5a 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80041e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8268 	beq.w	80046be <main+0x842>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80041ee:	f7fd f9a7 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 80041f2:	2002      	movs	r0, #2
 80041f4:	f001 f8e6 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.5, 5.0);
 80041f8:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80041fc:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004200:	f001 fe78 	bl	8005ef4 <setVelocityRange>
						  setAccDec(7, 3);
 8004204:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004208:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800420c:	f001 fe8a 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004210:	ed1f 0a10 	vldr	s0, [pc, #-64]	; 80041d4 <main+0x358>
 8004214:	f001 fe9e 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 8004218:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800421c:	f001 f88a 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 8004220:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004224:	f002 fc14 	bl	8006a50 <HAL_Delay>

						  running();
 8004228:	f001 f9b4 	bl	8005594 <running>
				  }

				  break;
 800422c:	e247      	b.n	80046be <main+0x842>

			  case 6:
				  setLED('C');
 800422e:	2043      	movs	r0, #67	; 0x43
 8004230:	f7fd fb64 	bl	80018fc <setLED>
				  setLED2('B');
 8004234:	2042      	movs	r0, #66	; 0x42
 8004236:	f7fd fc2f 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 800423a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 823f 	beq.w	80046c2 <main+0x846>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004244:	f7fd f97c 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 8004248:	2002      	movs	r0, #2
 800424a:	f001 f8bb 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.0, 6.0);
 800424e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004252:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004256:	f001 fe4d 	bl	8005ef4 <setVelocityRange>
						  setAccDec(8, 5);
 800425a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800425e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004262:	f001 fe5f 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004266:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 80041d4 <main+0x358>
 800426a:	f001 fe73 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 800426e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004272:	f001 f85f 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 8004276:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800427a:	f002 fbe9 	bl	8006a50 <HAL_Delay>

						  running();
 800427e:	f001 f989 	bl	8005594 <running>
				  }

				  break;
 8004282:	e21e      	b.n	80046c2 <main+0x846>

			  case 7:
				  setLED('C');
 8004284:	2043      	movs	r0, #67	; 0x43
 8004286:	f7fd fb39 	bl	80018fc <setLED>
				  setLED2('W');
 800428a:	2057      	movs	r0, #87	; 0x57
 800428c:	f7fd fc04 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004290:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8216 	beq.w	80046c6 <main+0x84a>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800429a:	f7fd f951 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 800429e:	2002      	movs	r0, #2
 80042a0:	f001 f890 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.5, 6.0);
 80042a4:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80042a8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80042ac:	f001 fe22 	bl	8005ef4 <setVelocityRange>
						  setAccDec(8, 5);
 80042b0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80042b4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80042b8:	f001 fe34 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80042bc:	ed1f 0a3b 	vldr	s0, [pc, #-236]	; 80041d4 <main+0x358>
 80042c0:	f001 fe48 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 80042c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042c8:	f001 f834 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 80042cc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042d0:	f002 fbbe 	bl	8006a50 <HAL_Delay>

						  running();
 80042d4:	f001 f95e 	bl	8005594 <running>
				  }

				  break;
 80042d8:	e1f5      	b.n	80046c6 <main+0x84a>

			  case 8:
				  setLED('C');
 80042da:	2043      	movs	r0, #67	; 0x43
 80042dc:	f7fd fb0e 	bl	80018fc <setLED>
				  setLED2('Y');
 80042e0:	2059      	movs	r0, #89	; 0x59
 80042e2:	f7fd fbd9 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80042e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 81ee 	beq.w	80046cc <main+0x850>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80042f0:	f7fd f926 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 80042f4:	2003      	movs	r0, #3
 80042f6:	f001 f865 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80042fa:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80042fe:	ed1f 0a4d 	vldr	s0, [pc, #-308]	; 80041cc <main+0x350>
 8004302:	f001 fdf7 	bl	8005ef4 <setVelocityRange>
						  setAccDec(7, 4);
 8004306:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800430a:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800430e:	f001 fe09 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004312:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 80041d4 <main+0x358>
 8004316:	f001 fe1d 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 800431a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800431e:	f001 f809 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 8004322:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004326:	f002 fb93 	bl	8006a50 <HAL_Delay>

						  running();
 800432a:	f001 f933 	bl	8005594 <running>
				  }

			  	  break;
 800432e:	e1cd      	b.n	80046cc <main+0x850>

			  case 9:
				  setLED('C');
 8004330:	2043      	movs	r0, #67	; 0x43
 8004332:	f7fd fae3 	bl	80018fc <setLED>
				  setLED2('X');
 8004336:	2058      	movs	r0, #88	; 0x58
 8004338:	f7fd fbae 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 800433c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 81c6 	beq.w	80046d2 <main+0x856>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004346:	f7fd f8fb 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 800434a:	2003      	movs	r0, #3
 800434c:	f001 f83a 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004350:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004354:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 80041cc <main+0x350>
 8004358:	f001 fdcc 	bl	8005ef4 <setVelocityRange>
						  setAccDec(8, 6);
 800435c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004360:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004364:	f001 fdde 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004368:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 80041d4 <main+0x358>
 800436c:	f001 fdf2 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 8004370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004374:	f000 ffde 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1500);
 8004378:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800437c:	f002 fb68 	bl	8006a50 <HAL_Delay>

						  running();
 8004380:	f001 f908 	bl	8005594 <running>
				  }

				  break;
 8004384:	e1a5      	b.n	80046d2 <main+0x856>

			  case 10:
				  setLED('C');
 8004386:	2043      	movs	r0, #67	; 0x43
 8004388:	f7fd fab8 	bl	80018fc <setLED>
				  setLED2('V');
 800438c:	2056      	movs	r0, #86	; 0x56
 800438e:	f7fd fb83 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004392:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 819e 	beq.w	80046d8 <main+0x85c>
						  //startLineTrace();

						  clearspeedcount();
 800439c:	f7fd f8d0 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 80043a0:	2002      	movs	r0, #2
 80043a2:	f001 f80f 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 80043a6:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 80043aa:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80043ae:	f001 fda1 	bl	8005ef4 <setVelocityRange>
						  setAccDec(7, 4);
 80043b2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80043b6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80043ba:	f001 fdb3 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043be:	ed1f 0a7b 	vldr	s0, [pc, #-492]	; 80041d4 <main+0x358>
 80043c2:	f001 fdc7 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 80043c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043ca:	f000 ffb3 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1000);
 80043ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043d2:	f002 fb3d 	bl	8006a50 <HAL_Delay>

						  running();
 80043d6:	f001 f8dd 	bl	8005594 <running>
				  }

				  break;
 80043da:	e17d      	b.n	80046d8 <main+0x85c>


			  case 11:
				  setLED('C');
 80043dc:	2043      	movs	r0, #67	; 0x43
 80043de:	f7fd fa8d 	bl	80018fc <setLED>
				  setLED2('T');
 80043e2:	2054      	movs	r0, #84	; 0x54
 80043e4:	f7fd fb58 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80043e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8176 	beq.w	80046de <main+0x862>
						  //startLineTrace();

						  clearspeedcount();
 80043f2:	f7fd f8a5 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 80043f6:	2003      	movs	r0, #3
 80043f8:	f000 ffe4 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 80043fc:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 8004400:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004404:	f001 fd76 	bl	8005ef4 <setVelocityRange>
						  setAccDec(10, 5);
 8004408:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800440c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004410:	f001 fd88 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004414:	ed1f 0a91 	vldr	s0, [pc, #-580]	; 80041d4 <main+0x358>
 8004418:	f001 fd9c 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 800441c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004420:	f000 ff88 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1000);
 8004424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004428:	f002 fb12 	bl	8006a50 <HAL_Delay>

						  running();
 800442c:	f001 f8b2 	bl	8005594 <running>
				  }

				  break;
 8004430:	e155      	b.n	80046de <main+0x862>

			  case 12:
				  setLED('C');
 8004432:	2043      	movs	r0, #67	; 0x43
 8004434:	f7fd fa62 	bl	80018fc <setLED>
				  setLED2('A');
 8004438:	2041      	movs	r0, #65	; 0x41
 800443a:	f7fd fb2d 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 800443e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 814e 	beq.w	80046e4 <main+0x868>
						  //startLineTrace();

						  clearspeedcount();
 8004448:	f7fd f87a 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 800444c:	2002      	movs	r0, #2
 800444e:	f000 ffb9 	bl	80053c4 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 8004452:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004456:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 80041d0 <main+0x354>
 800445a:	f001 fd4b 	bl	8005ef4 <setVelocityRange>
						  setAccDec(7, 4);
 800445e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004462:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004466:	f001 fd5d 	bl	8005f24 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800446a:	ed1f 0aa6 	vldr	s0, [pc, #-664]	; 80041d4 <main+0x358>
 800446e:	f001 fd71 	bl	8005f54 <setStraightRadius>

						  setsuctionMotor(500);
 8004472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004476:	f000 ff5d 	bl	8005334 <setsuctionMotor>

						  HAL_Delay(1000);
 800447a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800447e:	f002 fae7 	bl	8006a50 <HAL_Delay>

						  running();
 8004482:	f001 f887 	bl	8005594 <running>
				  }

				  break;
 8004486:	e12d      	b.n	80046e4 <main+0x868>

			  case 13:
				  setLED('M');
 8004488:	204d      	movs	r0, #77	; 0x4d
 800448a:	f7fd fa37 	bl	80018fc <setLED>
				  setLED2('A');
 800448e:	2041      	movs	r0, #65	; 0x41
 8004490:	f7fd fb02 	bl	8001a98 <setLED2>
				  //printf("6\r\n");

				  if(running_flag == true){
 8004494:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8126 	beq.w	80046ea <main+0x86e>
					  loadDistance();
 800449e:	f7fe fdeb 	bl	8003078 <loadDistance>
					  loadTheta();
 80044a2:	f7fe fe27 	bl	80030f4 <loadTheta>
					  loadCross();
 80044a6:	f7fe fe63 	bl	8003170 <loadCross>
					  loadSide();
 80044aa:	f7fe fe9f 	bl	80031ec <loadSide>
					  loadDebug();
 80044ae:	f7fe fedb 	bl	8003268 <loadDebug>
					  }*/


					  //printf("TargetVelocity, CurrentVelocity\r\n");
					  //printf("Target_X, Target_Y, Target_Theta, Now_X, Now_Y, Now_Theta, Error_X, Error_Y, Errr_Theta, Velocity, Angularvelocity\r\n");
					  uint16_t size = getDebugLogSize();
 80044b2:	f7fe fdd5 	bl	8003060 <getDebugLogSize>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

					  /*
					  for(uint16_t i = 0; i < size; i = i+9){
						 printf("%f, %f, %f, %f, %f, %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5), getDebugLog(i + 6), getDebugLog(i + 7), getDebugLog(i + 8));
					  }*/
					  for(uint16_t i = 0; i < size; i = i+13){
 80044bc:	2300      	movs	r3, #0
 80044be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80044c2:	e0e5      	b.n	8004690 <main+0x814>
						 printf("%f, %f, %f , %f, %f, %f , %f, %f, %f , %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5), getDebugLog(i + 6), getDebugLog(i + 7), getDebugLog(i + 8), getDebugLog(i + 9), getDebugLog(i + 10), getDebugLog(i + 11), getDebugLog(i + 12));
 80044c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe ff61 	bl	8003390 <getDebugLog>
 80044ce:	ee10 3a10 	vmov	r3, s0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fc f838 	bl	8000548 <__aeabi_f2d>
 80044d8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80044dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044e0:	3301      	adds	r3, #1
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fe ff53 	bl	8003390 <getDebugLog>
 80044ea:	ee10 3a10 	vmov	r3, s0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fc f82a 	bl	8000548 <__aeabi_f2d>
 80044f4:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 80044f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80044fc:	3302      	adds	r3, #2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe ff45 	bl	8003390 <getDebugLog>
 8004506:	ee10 3a10 	vmov	r3, s0
 800450a:	4618      	mov	r0, r3
 800450c:	f7fc f81c 	bl	8000548 <__aeabi_f2d>
 8004510:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004514:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004518:	3303      	adds	r3, #3
 800451a:	b29b      	uxth	r3, r3
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe ff37 	bl	8003390 <getDebugLog>
 8004522:	ee10 3a10 	vmov	r3, s0
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f80e 	bl	8000548 <__aeabi_f2d>
 800452c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004530:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004534:	3304      	adds	r3, #4
 8004536:	b29b      	uxth	r3, r3
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe ff29 	bl	8003390 <getDebugLog>
 800453e:	ee10 3a10 	vmov	r3, s0
 8004542:	4618      	mov	r0, r3
 8004544:	f7fc f800 	bl	8000548 <__aeabi_f2d>
 8004548:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800454c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004550:	3305      	adds	r3, #5
 8004552:	b29b      	uxth	r3, r3
 8004554:	4618      	mov	r0, r3
 8004556:	f7fe ff1b 	bl	8003390 <getDebugLog>
 800455a:	ee10 3a10 	vmov	r3, s0
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb fff2 	bl	8000548 <__aeabi_f2d>
 8004564:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004568:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800456c:	3306      	adds	r3, #6
 800456e:	b29b      	uxth	r3, r3
 8004570:	4618      	mov	r0, r3
 8004572:	f7fe ff0d 	bl	8003390 <getDebugLog>
 8004576:	ee10 3a10 	vmov	r3, s0
 800457a:	4618      	mov	r0, r3
 800457c:	f7fb ffe4 	bl	8000548 <__aeabi_f2d>
 8004580:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004584:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004588:	3307      	adds	r3, #7
 800458a:	b29b      	uxth	r3, r3
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe feff 	bl	8003390 <getDebugLog>
 8004592:	ee10 3a10 	vmov	r3, s0
 8004596:	4618      	mov	r0, r3
 8004598:	f7fb ffd6 	bl	8000548 <__aeabi_f2d>
 800459c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80045a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80045a4:	3308      	adds	r3, #8
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fef1 	bl	8003390 <getDebugLog>
 80045ae:	ee10 3a10 	vmov	r3, s0
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ffc8 	bl	8000548 <__aeabi_f2d>
 80045b8:	e9c7 0100 	strd	r0, r1, [r7]
 80045bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80045c0:	3309      	adds	r3, #9
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fee3 	bl	8003390 <getDebugLog>
 80045ca:	ee10 3a10 	vmov	r3, s0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fb ffba 	bl	8000548 <__aeabi_f2d>
 80045d4:	4682      	mov	sl, r0
 80045d6:	468b      	mov	fp, r1
 80045d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80045dc:	330a      	adds	r3, #10
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fe fed5 	bl	8003390 <getDebugLog>
 80045e6:	ee10 3a10 	vmov	r3, s0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fb ffac 	bl	8000548 <__aeabi_f2d>
 80045f0:	4680      	mov	r8, r0
 80045f2:	4689      	mov	r9, r1
 80045f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80045f8:	330b      	adds	r3, #11
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fec7 	bl	8003390 <getDebugLog>
 8004602:	ee10 3a10 	vmov	r3, s0
 8004606:	4618      	mov	r0, r3
 8004608:	f7fb ff9e 	bl	8000548 <__aeabi_f2d>
 800460c:	4605      	mov	r5, r0
 800460e:	460e      	mov	r6, r1
 8004610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004614:	330c      	adds	r3, #12
 8004616:	b29b      	uxth	r3, r3
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe feb9 	bl	8003390 <getDebugLog>
 800461e:	ee10 3a10 	vmov	r3, s0
 8004622:	4618      	mov	r0, r3
 8004624:	f7fb ff90 	bl	8000548 <__aeabi_f2d>
 8004628:	4603      	mov	r3, r0
 800462a:	460c      	mov	r4, r1
 800462c:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8004630:	e9cd 5614 	strd	r5, r6, [sp, #80]	; 0x50
 8004634:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004638:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 800463c:	ed97 7b00 	vldr	d7, [r7]
 8004640:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004644:	ed97 7b02 	vldr	d7, [r7, #8]
 8004648:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800464c:	ed97 7b04 	vldr	d7, [r7, #16]
 8004650:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004654:	ed97 7b06 	vldr	d7, [r7, #24]
 8004658:	ed8d 7b08 	vstr	d7, [sp, #32]
 800465c:	ed97 7b08 	vldr	d7, [r7, #32]
 8004660:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004664:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004668:	ed8d 7b04 	vstr	d7, [sp, #16]
 800466c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004670:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004674:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004678:	ed8d 7b00 	vstr	d7, [sp]
 800467c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004680:	481b      	ldr	r0, [pc, #108]	; (80046f0 <main+0x874>)
 8004682:	f009 f8d5 	bl	800d830 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+13){
 8004686:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800468a:	330d      	adds	r3, #13
 800468c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004690:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004694:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004698:	429a      	cmp	r2, r3
 800469a:	f4ff af13 	bcc.w	80044c4 <main+0x648>
					  /*
					  for(uint16_t i = 0; i < size; i = i+1){
						 printf("%f\r\n", getDebugLog(i));
					  }*/

					  printf("9999, 9999\r\n");
 800469e:	4815      	ldr	r0, [pc, #84]	; (80046f4 <main+0x878>)
 80046a0:	f009 f93a 	bl	800d918 <puts>
				  }

				  break;
 80046a4:	e021      	b.n	80046ea <main+0x86e>

			  default:
				  break;
 80046a6:	bf00      	nop
 80046a8:	e40f      	b.n	8003eca <main+0x4e>
				  break;
 80046aa:	bf00      	nop
 80046ac:	e40d      	b.n	8003eca <main+0x4e>
				  break;
 80046ae:	bf00      	nop
 80046b0:	e40b      	b.n	8003eca <main+0x4e>
				  break;
 80046b2:	bf00      	nop
 80046b4:	e409      	b.n	8003eca <main+0x4e>
				  break;
 80046b6:	bf00      	nop
 80046b8:	e407      	b.n	8003eca <main+0x4e>
				  break;
 80046ba:	bf00      	nop
 80046bc:	e405      	b.n	8003eca <main+0x4e>
				  break;
 80046be:	bf00      	nop
 80046c0:	e403      	b.n	8003eca <main+0x4e>
				  break;
 80046c2:	bf00      	nop
 80046c4:	e401      	b.n	8003eca <main+0x4e>
				  break;
 80046c6:	bf00      	nop
 80046c8:	f7ff bbff 	b.w	8003eca <main+0x4e>
			  	  break;
 80046cc:	bf00      	nop
 80046ce:	f7ff bbfc 	b.w	8003eca <main+0x4e>
				  break;
 80046d2:	bf00      	nop
 80046d4:	f7ff bbf9 	b.w	8003eca <main+0x4e>
				  break;
 80046d8:	bf00      	nop
 80046da:	f7ff bbf6 	b.w	8003eca <main+0x4e>
				  break;
 80046de:	bf00      	nop
 80046e0:	f7ff bbf3 	b.w	8003eca <main+0x4e>
				  break;
 80046e4:	bf00      	nop
 80046e6:	f7ff bbf0 	b.w	8003eca <main+0x4e>
				  break;
 80046ea:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 80046ec:	f7ff bbed 	b.w	8003eca <main+0x4e>
 80046f0:	08011038 	.word	0x08011038
 80046f4:	08011070 	.word	0x08011070

080046f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b094      	sub	sp, #80	; 0x50
 80046fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	2230      	movs	r2, #48	; 0x30
 8004704:	2100      	movs	r1, #0
 8004706:	4618      	mov	r0, r3
 8004708:	f008 fa4b 	bl	800cba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	2300      	movs	r3, #0
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <SystemClock_Config+0xcc>)
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <SystemClock_Config+0xcc>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	6413      	str	r3, [r2, #64]	; 0x40
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <SystemClock_Config+0xcc>)
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004738:	2300      	movs	r3, #0
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <SystemClock_Config+0xd0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <SystemClock_Config+0xd0>)
 8004742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <SystemClock_Config+0xd0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004754:	2302      	movs	r3, #2
 8004756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004758:	2301      	movs	r3, #1
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800475c:	2310      	movs	r3, #16
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004760:	2302      	movs	r3, #2
 8004762:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004764:	2300      	movs	r3, #0
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004768:	2308      	movs	r3, #8
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800476c:	23a8      	movs	r3, #168	; 0xa8
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004770:	2302      	movs	r3, #2
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004774:	2304      	movs	r3, #4
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004778:	f107 0320 	add.w	r3, r7, #32
 800477c:	4618      	mov	r0, r3
 800477e:	f003 feeb 	bl	8008558 <HAL_RCC_OscConfig>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004788:	f000 fd04 	bl	8005194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800478c:	230f      	movs	r3, #15
 800478e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004790:	2302      	movs	r3, #2
 8004792:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004798:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800479c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800479e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	2105      	movs	r1, #5
 80047aa:	4618      	mov	r0, r3
 80047ac:	f004 f944 	bl	8008a38 <HAL_RCC_ClockConfig>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80047b6:	f000 fced 	bl	8005194 <Error_Handler>
  }
}
 80047ba:	bf00      	nop
 80047bc:	3750      	adds	r7, #80	; 0x50
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40007000 	.word	0x40007000

080047cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80047d2:	463b      	mov	r3, r7
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	609a      	str	r2, [r3, #8]
 80047dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80047de:	4b28      	ldr	r3, [pc, #160]	; (8004880 <MX_ADC1_Init+0xb4>)
 80047e0:	4a28      	ldr	r2, [pc, #160]	; (8004884 <MX_ADC1_Init+0xb8>)
 80047e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80047e4:	4b26      	ldr	r3, [pc, #152]	; (8004880 <MX_ADC1_Init+0xb4>)
 80047e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80047ec:	4b24      	ldr	r3, [pc, #144]	; (8004880 <MX_ADC1_Init+0xb4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <MX_ADC1_Init+0xb4>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <MX_ADC1_Init+0xb4>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <MX_ADC1_Init+0xb4>)
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004806:	4b1e      	ldr	r3, [pc, #120]	; (8004880 <MX_ADC1_Init+0xb4>)
 8004808:	2200      	movs	r2, #0
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800480c:	4b1c      	ldr	r3, [pc, #112]	; (8004880 <MX_ADC1_Init+0xb4>)
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <MX_ADC1_Init+0xbc>)
 8004810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <MX_ADC1_Init+0xb4>)
 8004814:	2200      	movs	r2, #0
 8004816:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <MX_ADC1_Init+0xb4>)
 800481a:	2202      	movs	r2, #2
 800481c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <MX_ADC1_Init+0xb4>)
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004826:	4b16      	ldr	r3, [pc, #88]	; (8004880 <MX_ADC1_Init+0xb4>)
 8004828:	2201      	movs	r2, #1
 800482a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800482c:	4814      	ldr	r0, [pc, #80]	; (8004880 <MX_ADC1_Init+0xb4>)
 800482e:	f002 f931 	bl	8006a94 <HAL_ADC_Init>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004838:	f000 fcac 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800483c:	230c      	movs	r3, #12
 800483e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004840:	2301      	movs	r3, #1
 8004842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004844:	2307      	movs	r3, #7
 8004846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004848:	463b      	mov	r3, r7
 800484a:	4619      	mov	r1, r3
 800484c:	480c      	ldr	r0, [pc, #48]	; (8004880 <MX_ADC1_Init+0xb4>)
 800484e:	f002 fa75 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004858:	f000 fc9c 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800485c:	230d      	movs	r3, #13
 800485e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004860:	2302      	movs	r3, #2
 8004862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004864:	463b      	mov	r3, r7
 8004866:	4619      	mov	r1, r3
 8004868:	4805      	ldr	r0, [pc, #20]	; (8004880 <MX_ADC1_Init+0xb4>)
 800486a:	f002 fa67 	bl	8006d3c <HAL_ADC_ConfigChannel>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004874:	f000 fc8e 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004878:	bf00      	nop
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	2001a740 	.word	0x2001a740
 8004884:	40012000 	.word	0x40012000
 8004888:	0f000001 	.word	0x0f000001

0800488c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004892:	463b      	mov	r3, r7
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
 800489a:	609a      	str	r2, [r3, #8]
 800489c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800489e:	4b6e      	ldr	r3, [pc, #440]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048a0:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <MX_ADC2_Init+0x1d0>)
 80048a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80048a4:	4b6c      	ldr	r3, [pc, #432]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048aa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80048ac:	4b6a      	ldr	r3, [pc, #424]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80048b2:	4b69      	ldr	r3, [pc, #420]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80048b8:	4b67      	ldr	r3, [pc, #412]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80048be:	4b66      	ldr	r3, [pc, #408]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048c6:	4b64      	ldr	r3, [pc, #400]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048cc:	4b62      	ldr	r3, [pc, #392]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048ce:	4a64      	ldr	r2, [pc, #400]	; (8004a60 <MX_ADC2_Init+0x1d4>)
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048d2:	4b61      	ldr	r3, [pc, #388]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 80048d8:	4b5f      	ldr	r3, [pc, #380]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048da:	220c      	movs	r2, #12
 80048dc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80048de:	4b5e      	ldr	r3, [pc, #376]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048e6:	4b5c      	ldr	r3, [pc, #368]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80048ec:	485a      	ldr	r0, [pc, #360]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80048ee:	f002 f8d1 	bl	8006a94 <HAL_ADC_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80048f8:	f000 fc4c 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004900:	2301      	movs	r3, #1
 8004902:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004904:	2307      	movs	r3, #7
 8004906:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004908:	463b      	mov	r3, r7
 800490a:	4619      	mov	r1, r3
 800490c:	4852      	ldr	r0, [pc, #328]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 800490e:	f002 fa15 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004918:	f000 fc3c 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800491c:	2301      	movs	r3, #1
 800491e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004920:	2302      	movs	r3, #2
 8004922:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004924:	463b      	mov	r3, r7
 8004926:	4619      	mov	r1, r3
 8004928:	484b      	ldr	r0, [pc, #300]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 800492a:	f002 fa07 	bl	8006d3c <HAL_ADC_ConfigChannel>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004934:	f000 fc2e 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004938:	2302      	movs	r3, #2
 800493a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800493c:	2303      	movs	r3, #3
 800493e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004940:	463b      	mov	r3, r7
 8004942:	4619      	mov	r1, r3
 8004944:	4844      	ldr	r0, [pc, #272]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 8004946:	f002 f9f9 	bl	8006d3c <HAL_ADC_ConfigChannel>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004950:	f000 fc20 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004954:	2303      	movs	r3, #3
 8004956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004958:	2304      	movs	r3, #4
 800495a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800495c:	463b      	mov	r3, r7
 800495e:	4619      	mov	r1, r3
 8004960:	483d      	ldr	r0, [pc, #244]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 8004962:	f002 f9eb 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800496c:	f000 fc12 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004970:	2304      	movs	r3, #4
 8004972:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004974:	2305      	movs	r3, #5
 8004976:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004978:	463b      	mov	r3, r7
 800497a:	4619      	mov	r1, r3
 800497c:	4836      	ldr	r0, [pc, #216]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 800497e:	f002 f9dd 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004988:	f000 fc04 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800498c:	2305      	movs	r3, #5
 800498e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004990:	2306      	movs	r3, #6
 8004992:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004994:	463b      	mov	r3, r7
 8004996:	4619      	mov	r1, r3
 8004998:	482f      	ldr	r0, [pc, #188]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 800499a:	f002 f9cf 	bl	8006d3c <HAL_ADC_ConfigChannel>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80049a4:	f000 fbf6 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80049a8:	2306      	movs	r3, #6
 80049aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80049ac:	2307      	movs	r3, #7
 80049ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049b0:	463b      	mov	r3, r7
 80049b2:	4619      	mov	r1, r3
 80049b4:	4828      	ldr	r0, [pc, #160]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80049b6:	f002 f9c1 	bl	8006d3c <HAL_ADC_ConfigChannel>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80049c0:	f000 fbe8 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80049c4:	2307      	movs	r3, #7
 80049c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80049c8:	2308      	movs	r3, #8
 80049ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049cc:	463b      	mov	r3, r7
 80049ce:	4619      	mov	r1, r3
 80049d0:	4821      	ldr	r0, [pc, #132]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80049d2:	f002 f9b3 	bl	8006d3c <HAL_ADC_ConfigChannel>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80049dc:	f000 fbda 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80049e0:	2308      	movs	r3, #8
 80049e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80049e4:	2309      	movs	r3, #9
 80049e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80049e8:	463b      	mov	r3, r7
 80049ea:	4619      	mov	r1, r3
 80049ec:	481a      	ldr	r0, [pc, #104]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 80049ee:	f002 f9a5 	bl	8006d3c <HAL_ADC_ConfigChannel>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80049f8:	f000 fbcc 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80049fc:	2309      	movs	r3, #9
 80049fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004a00:	230a      	movs	r3, #10
 8004a02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a04:	463b      	mov	r3, r7
 8004a06:	4619      	mov	r1, r3
 8004a08:	4813      	ldr	r0, [pc, #76]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 8004a0a:	f002 f997 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004a14:	f000 fbbe 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004a18:	230e      	movs	r3, #14
 8004a1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004a1c:	230b      	movs	r3, #11
 8004a1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a20:	463b      	mov	r3, r7
 8004a22:	4619      	mov	r1, r3
 8004a24:	480c      	ldr	r0, [pc, #48]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 8004a26:	f002 f989 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004a30:	f000 fbb0 	bl	8005194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004a34:	230f      	movs	r3, #15
 8004a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004a38:	230c      	movs	r3, #12
 8004a3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a3c:	463b      	mov	r3, r7
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4805      	ldr	r0, [pc, #20]	; (8004a58 <MX_ADC2_Init+0x1cc>)
 8004a42:	f002 f97b 	bl	8006d3c <HAL_ADC_ConfigChannel>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004a4c:	f000 fba2 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	2001a6f0 	.word	0x2001a6f0
 8004a5c:	40012100 	.word	0x40012100
 8004a60:	0f000001 	.word	0x0f000001

08004a64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a6a:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <MX_I2C1_Init+0x54>)
 8004a6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004a6e:	4b11      	ldr	r3, [pc, #68]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <MX_I2C1_Init+0x58>)
 8004a72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004a7a:	4b0e      	ldr	r3, [pc, #56]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004a8e:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004a94:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004aa0:	4804      	ldr	r0, [pc, #16]	; (8004ab4 <MX_I2C1_Init+0x50>)
 8004aa2:	f003 fc21 	bl	80082e8 <HAL_I2C_Init>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004aac:	f000 fb72 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004ab0:	bf00      	nop
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2001a834 	.word	0x2001a834
 8004ab8:	40005400 	.word	0x40005400
 8004abc:	000186a0 	.word	0x000186a0

08004ac0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <MX_SPI3_Init+0x68>)
 8004ac8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ad0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004ad2:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004af4:	2228      	movs	r2, #40	; 0x28
 8004af6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b04:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004b0c:	220a      	movs	r2, #10
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b10:	4804      	ldr	r0, [pc, #16]	; (8004b24 <MX_SPI3_Init+0x64>)
 8004b12:	f004 f95d 	bl	8008dd0 <HAL_SPI_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004b1c:	f000 fb3a 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2001a88c 	.word	0x2001a88c
 8004b28:	40003c00 	.word	0x40003c00

08004b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b092      	sub	sp, #72	; 0x48
 8004b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	611a      	str	r2, [r3, #16]
 8004b4c:	615a      	str	r2, [r3, #20]
 8004b4e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	2220      	movs	r2, #32
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f008 f823 	bl	800cba2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b5e:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <MX_TIM1_Init+0x100>)
 8004b60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004b62:	4b31      	ldr	r3, [pc, #196]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b68:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004b6e:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b70:	f240 3247 	movw	r2, #839	; 0x347
 8004b74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b76:	4b2c      	ldr	r3, [pc, #176]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b88:	4827      	ldr	r0, [pc, #156]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004b8a:	f004 fec4 	bl	8009916 <HAL_TIM_PWM_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004b94:	f000 fafe 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ba0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4820      	ldr	r0, [pc, #128]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004ba8:	f005 fc54 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004bb2:	f000 faef 	bl	8005194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bb6:	2360      	movs	r3, #96	; 0x60
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bd2:	220c      	movs	r2, #12
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4814      	ldr	r0, [pc, #80]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004bd8:	f005 f8d8 	bl	8009d8c <HAL_TIM_PWM_ConfigChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004be2:	f000 fad7 	bl	8005194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c04:	1d3b      	adds	r3, r7, #4
 8004c06:	4619      	mov	r1, r3
 8004c08:	4807      	ldr	r0, [pc, #28]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004c0a:	f005 fc9f 	bl	800a54c <HAL_TIMEx_ConfigBreakDeadTime>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004c14:	f000 fabe 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004c18:	4803      	ldr	r0, [pc, #12]	; (8004c28 <MX_TIM1_Init+0xfc>)
 8004c1a:	f001 fc9b 	bl	8006554 <HAL_TIM_MspPostInit>

}
 8004c1e:	bf00      	nop
 8004c20:	3748      	adds	r7, #72	; 0x48
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2001a9c4 	.word	0x2001a9c4
 8004c2c:	40010000 	.word	0x40010000

08004c30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08c      	sub	sp, #48	; 0x30
 8004c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c36:	f107 030c 	add.w	r3, r7, #12
 8004c3a:	2224      	movs	r2, #36	; 0x24
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f007 ffaf 	bl	800cba2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c4e:	4a21      	ldr	r2, [pc, #132]	; (8004cd4 <MX_TIM3_Init+0xa4>)
 8004c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c52:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c58:	4b1d      	ldr	r3, [pc, #116]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c6c:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004c76:	2300      	movs	r3, #0
 8004c78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004c96:	f107 030c 	add.w	r3, r7, #12
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	480c      	ldr	r0, [pc, #48]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004c9e:	f004 fea3 	bl	80099e8 <HAL_TIM_Encoder_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004ca8:	f000 fa74 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004cb4:	1d3b      	adds	r3, r7, #4
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4805      	ldr	r0, [pc, #20]	; (8004cd0 <MX_TIM3_Init+0xa0>)
 8004cba:	f005 fbcb 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004cc4:	f000 fa66 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004cc8:	bf00      	nop
 8004cca:	3730      	adds	r7, #48	; 0x30
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	2001a698 	.word	0x2001a698
 8004cd4:	40000400 	.word	0x40000400

08004cd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08c      	sub	sp, #48	; 0x30
 8004cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004cde:	f107 030c 	add.w	r3, r7, #12
 8004ce2:	2224      	movs	r2, #36	; 0x24
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f007 ff5b 	bl	800cba2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004cf4:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004cf6:	4a21      	ldr	r2, [pc, #132]	; (8004d7c <MX_TIM4_Init+0xa4>)
 8004cf8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004cfa:	4b1f      	ldr	r3, [pc, #124]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004d06:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d0e:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d14:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d22:	2301      	movs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d32:	2301      	movs	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d36:	2300      	movs	r3, #0
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004d3e:	f107 030c 	add.w	r3, r7, #12
 8004d42:	4619      	mov	r1, r3
 8004d44:	480c      	ldr	r0, [pc, #48]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d46:	f004 fe4f 	bl	80099e8 <HAL_TIM_Encoder_Init>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004d50:	f000 fa20 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d54:	2300      	movs	r3, #0
 8004d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004d5c:	1d3b      	adds	r3, r7, #4
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4805      	ldr	r0, [pc, #20]	; (8004d78 <MX_TIM4_Init+0xa0>)
 8004d62:	f005 fb77 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004d6c:	f000 fa12 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004d70:	bf00      	nop
 8004d72:	3730      	adds	r7, #48	; 0x30
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	2001a658 	.word	0x2001a658
 8004d7c:	40000800 	.word	0x40000800

08004d80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d86:	463b      	mov	r3, r7
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004d90:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <MX_TIM6_Init+0x68>)
 8004d92:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004d96:	2253      	movs	r2, #83	; 0x53
 8004d98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004da6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004dae:	480d      	ldr	r0, [pc, #52]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004db0:	f004 fd62 	bl	8009878 <HAL_TIM_Base_Init>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004dba:	f000 f9eb 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	4619      	mov	r1, r3
 8004dca:	4806      	ldr	r0, [pc, #24]	; (8004de4 <MX_TIM6_Init+0x64>)
 8004dcc:	f005 fb42 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004dd6:	f000 f9dd 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2001a984 	.word	0x2001a984
 8004de8:	40001000 	.word	0x40001000

08004dec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004df2:	463b      	mov	r3, r7
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004dfc:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <MX_TIM7_Init+0x64>)
 8004dfe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004e00:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e02:	2253      	movs	r2, #83	; 0x53
 8004e04:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e06:	4b11      	ldr	r3, [pc, #68]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e0e:	2263      	movs	r2, #99	; 0x63
 8004e10:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e12:	4b0e      	ldr	r3, [pc, #56]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e18:	480c      	ldr	r0, [pc, #48]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e1a:	f004 fd2d 	bl	8009878 <HAL_TIM_Base_Init>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004e24:	f000 f9b6 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e30:	463b      	mov	r3, r7
 8004e32:	4619      	mov	r1, r3
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <MX_TIM7_Init+0x60>)
 8004e36:	f005 fb0d 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004e40:	f000 f9a8 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e44:	bf00      	nop
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2001aa6c 	.word	0x2001aa6c
 8004e50:	40001400 	.word	0x40001400

08004e54 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b092      	sub	sp, #72	; 0x48
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	611a      	str	r2, [r3, #16]
 8004e74:	615a      	str	r2, [r3, #20]
 8004e76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004e78:	1d3b      	adds	r3, r7, #4
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f007 fe8f 	bl	800cba2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004e84:	4b39      	ldr	r3, [pc, #228]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004e86:	4a3a      	ldr	r2, [pc, #232]	; (8004f70 <MX_TIM8_Init+0x11c>)
 8004e88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004e96:	4b35      	ldr	r3, [pc, #212]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004e98:	f240 628f 	movw	r2, #1679	; 0x68f
 8004e9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eaa:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004eb0:	482e      	ldr	r0, [pc, #184]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004eb2:	f004 fd30 	bl	8009916 <HAL_TIM_PWM_Init>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004ebc:	f000 f96a 	bl	8005194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4827      	ldr	r0, [pc, #156]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004ed0:	f005 fac0 	bl	800a454 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004eda:	f000 f95b 	bl	8005194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ede:	2360      	movs	r3, #96	; 0x60
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004eea:	2300      	movs	r3, #0
 8004eec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004efe:	2200      	movs	r2, #0
 8004f00:	4619      	mov	r1, r3
 8004f02:	481a      	ldr	r0, [pc, #104]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004f04:	f004 ff42 	bl	8009d8c <HAL_TIM_PWM_ConfigChannel>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004f0e:	f000 f941 	bl	8005194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f16:	2208      	movs	r2, #8
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4814      	ldr	r0, [pc, #80]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004f1c:	f004 ff36 	bl	8009d8c <HAL_TIM_PWM_ConfigChannel>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004f26:	f000 f935 	bl	8005194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004f48:	1d3b      	adds	r3, r7, #4
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4807      	ldr	r0, [pc, #28]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004f4e:	f005 fafd 	bl	800a54c <HAL_TIMEx_ConfigBreakDeadTime>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004f58:	f000 f91c 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004f5c:	4803      	ldr	r0, [pc, #12]	; (8004f6c <MX_TIM8_Init+0x118>)
 8004f5e:	f001 faf9 	bl	8006554 <HAL_TIM_MspPostInit>

}
 8004f62:	bf00      	nop
 8004f64:	3748      	adds	r7, #72	; 0x48
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2001a7ec 	.word	0x2001a7ec
 8004f70:	40010400 	.word	0x40010400

08004f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f7a:	4a12      	ldr	r2, [pc, #72]	; (8004fc4 <MX_USART1_UART_Init+0x50>)
 8004f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004f9a:	220c      	movs	r2, #12
 8004f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f9e:	4b08      	ldr	r3, [pc, #32]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004faa:	4805      	ldr	r0, [pc, #20]	; (8004fc0 <MX_USART1_UART_Init+0x4c>)
 8004fac:	f005 fb34 	bl	800a618 <HAL_UART_Init>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004fb6:	f000 f8ed 	bl	8005194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fba:	bf00      	nop
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	2001a8e4 	.word	0x2001a8e4
 8004fc4:	40011000 	.word	0x40011000

08004fc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	607b      	str	r3, [r7, #4]
 8004fd2:	4b10      	ldr	r3, [pc, #64]	; (8005014 <MX_DMA_Init+0x4c>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <MX_DMA_Init+0x4c>)
 8004fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <MX_DMA_Init+0x4c>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	2038      	movs	r0, #56	; 0x38
 8004ff0:	f002 fa1f 	bl	8007432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ff4:	2038      	movs	r0, #56	; 0x38
 8004ff6:	f002 fa38 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	203a      	movs	r0, #58	; 0x3a
 8005000:	f002 fa17 	bl	8007432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005004:	203a      	movs	r0, #58	; 0x3a
 8005006:	f002 fa30 	bl	800746a <HAL_NVIC_EnableIRQ>

}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800

08005018 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	; 0x28
 800501c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501e:	f107 0314 	add.w	r3, r7, #20
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	605a      	str	r2, [r3, #4]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	60da      	str	r2, [r3, #12]
 800502c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	4b53      	ldr	r3, [pc, #332]	; (8005180 <MX_GPIO_Init+0x168>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	4a52      	ldr	r2, [pc, #328]	; (8005180 <MX_GPIO_Init+0x168>)
 8005038:	f043 0304 	orr.w	r3, r3, #4
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
 800503e:	4b50      	ldr	r3, [pc, #320]	; (8005180 <MX_GPIO_Init+0x168>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	4b4c      	ldr	r3, [pc, #304]	; (8005180 <MX_GPIO_Init+0x168>)
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	4a4b      	ldr	r2, [pc, #300]	; (8005180 <MX_GPIO_Init+0x168>)
 8005054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005058:	6313      	str	r3, [r2, #48]	; 0x30
 800505a:	4b49      	ldr	r3, [pc, #292]	; (8005180 <MX_GPIO_Init+0x168>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
 800506a:	4b45      	ldr	r3, [pc, #276]	; (8005180 <MX_GPIO_Init+0x168>)
 800506c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506e:	4a44      	ldr	r2, [pc, #272]	; (8005180 <MX_GPIO_Init+0x168>)
 8005070:	f043 0301 	orr.w	r3, r3, #1
 8005074:	6313      	str	r3, [r2, #48]	; 0x30
 8005076:	4b42      	ldr	r3, [pc, #264]	; (8005180 <MX_GPIO_Init+0x168>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <MX_GPIO_Init+0x168>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	4a3d      	ldr	r2, [pc, #244]	; (8005180 <MX_GPIO_Init+0x168>)
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	6313      	str	r3, [r2, #48]	; 0x30
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <MX_GPIO_Init+0x168>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4b37      	ldr	r3, [pc, #220]	; (8005180 <MX_GPIO_Init+0x168>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	4a36      	ldr	r2, [pc, #216]	; (8005180 <MX_GPIO_Init+0x168>)
 80050a8:	f043 0308 	orr.w	r3, r3, #8
 80050ac:	6313      	str	r3, [r2, #48]	; 0x30
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <MX_GPIO_Init+0x168>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80050ba:	2200      	movs	r2, #0
 80050bc:	f24e 2180 	movw	r1, #57984	; 0xe280
 80050c0:	4830      	ldr	r0, [pc, #192]	; (8005184 <MX_GPIO_Init+0x16c>)
 80050c2:	f003 f8f7 	bl	80082b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80050c6:	2200      	movs	r2, #0
 80050c8:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 80050cc:	482e      	ldr	r0, [pc, #184]	; (8005188 <MX_GPIO_Init+0x170>)
 80050ce:	f003 f8f1 	bl	80082b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80050d2:	2200      	movs	r2, #0
 80050d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050d8:	482c      	ldr	r0, [pc, #176]	; (800518c <MX_GPIO_Init+0x174>)
 80050da:	f003 f8eb 	bl	80082b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80050de:	2200      	movs	r2, #0
 80050e0:	2104      	movs	r1, #4
 80050e2:	482b      	ldr	r0, [pc, #172]	; (8005190 <MX_GPIO_Init+0x178>)
 80050e4:	f003 f8e6 	bl	80082b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 80050e8:	f24e 2380 	movw	r3, #57984	; 0xe280
 80050ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050ee:	2301      	movs	r3, #1
 80050f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f6:	2300      	movs	r3, #0
 80050f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050fa:	f107 0314 	add.w	r3, r7, #20
 80050fe:	4619      	mov	r1, r3
 8005100:	4820      	ldr	r0, [pc, #128]	; (8005184 <MX_GPIO_Init+0x16c>)
 8005102:	f002 ff25 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005106:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800510a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800510c:	2301      	movs	r3, #1
 800510e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005114:	2300      	movs	r3, #0
 8005116:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	4619      	mov	r1, r3
 800511e:	481a      	ldr	r0, [pc, #104]	; (8005188 <MX_GPIO_Init+0x170>)
 8005120:	f002 ff16 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005124:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	4814      	ldr	r0, [pc, #80]	; (800518c <MX_GPIO_Init+0x174>)
 800513a:	f002 ff09 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800513e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005142:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005144:	2301      	movs	r3, #1
 8005146:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	f107 0314 	add.w	r3, r7, #20
 8005154:	4619      	mov	r1, r3
 8005156:	480d      	ldr	r0, [pc, #52]	; (800518c <MX_GPIO_Init+0x174>)
 8005158:	f002 fefa 	bl	8007f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800515c:	2304      	movs	r3, #4
 800515e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005160:	2301      	movs	r3, #1
 8005162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800516c:	f107 0314 	add.w	r3, r7, #20
 8005170:	4619      	mov	r1, r3
 8005172:	4807      	ldr	r0, [pc, #28]	; (8005190 <MX_GPIO_Init+0x178>)
 8005174:	f002 feec 	bl	8007f50 <HAL_GPIO_Init>

}
 8005178:	bf00      	nop
 800517a:	3728      	adds	r7, #40	; 0x28
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	40020800 	.word	0x40020800
 8005188:	40020400 	.word	0x40020400
 800518c:	40020000 	.word	0x40020000
 8005190:	40020c00 	.word	0x40020c00

08005194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005198:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800519a:	e7fe      	b.n	800519a <Error_Handler+0x6>

0800519c <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 80051a0:	2100      	movs	r1, #0
 80051a2:	4808      	ldr	r0, [pc, #32]	; (80051c4 <initMotor+0x28>)
 80051a4:	f004 fbe2 	bl	800996c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80051a8:	2108      	movs	r1, #8
 80051aa:	4806      	ldr	r0, [pc, #24]	; (80051c4 <initMotor+0x28>)
 80051ac:	f004 fbde 	bl	800996c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80051b0:	210c      	movs	r1, #12
 80051b2:	4805      	ldr	r0, [pc, #20]	; (80051c8 <initMotor+0x2c>)
 80051b4:	f004 fbda 	bl	800996c <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 80051b8:	2064      	movs	r0, #100	; 0x64
 80051ba:	f001 fc49 	bl	8006a50 <HAL_Delay>
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	2001a7ec 	.word	0x2001a7ec
 80051c8:	2001a9c4 	.word	0x2001a9c4

080051cc <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <motorCtrlFlip+0xb0>)
 80051d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db0d      	blt.n	80051f8 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 80051dc:	4b27      	ldr	r3, [pc, #156]	; (800527c <motorCtrlFlip+0xb0>)
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80051e2:	4b27      	ldr	r3, [pc, #156]	; (8005280 <motorCtrlFlip+0xb4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051ea:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80051ec:	2200      	movs	r2, #0
 80051ee:	2180      	movs	r1, #128	; 0x80
 80051f0:	4824      	ldr	r0, [pc, #144]	; (8005284 <motorCtrlFlip+0xb8>)
 80051f2:	f003 f85f 	bl	80082b4 <HAL_GPIO_WritePin>
 80051f6:	e010      	b.n	800521a <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 80051f8:	4b20      	ldr	r3, [pc, #128]	; (800527c <motorCtrlFlip+0xb0>)
 80051fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	425b      	negs	r3, r3
 8005202:	b29b      	uxth	r3, r3
 8005204:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8005206:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <motorCtrlFlip+0xb4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800520e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8005210:	2201      	movs	r2, #1
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	481b      	ldr	r0, [pc, #108]	; (8005284 <motorCtrlFlip+0xb8>)
 8005216:	f003 f84d 	bl	80082b4 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <motorCtrlFlip+0xbc>)
 800521c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005220:	2b00      	cmp	r3, #0
 8005222:	db0e      	blt.n	8005242 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <motorCtrlFlip+0xbc>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <motorCtrlFlip+0xb4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005232:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8005234:	2200      	movs	r2, #0
 8005236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800523a:	4812      	ldr	r0, [pc, #72]	; (8005284 <motorCtrlFlip+0xb8>)
 800523c:	f003 f83a 	bl	80082b4 <HAL_GPIO_WritePin>
 8005240:	e011      	b.n	8005266 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8005242:	4b11      	ldr	r3, [pc, #68]	; (8005288 <motorCtrlFlip+0xbc>)
 8005244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005248:	b29b      	uxth	r3, r3
 800524a:	425b      	negs	r3, r3
 800524c:	b29b      	uxth	r3, r3
 800524e:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8005250:	4b0b      	ldr	r3, [pc, #44]	; (8005280 <motorCtrlFlip+0xb4>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005258:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800525a:	2201      	movs	r2, #1
 800525c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005260:	4808      	ldr	r0, [pc, #32]	; (8005284 <motorCtrlFlip+0xb8>)
 8005262:	f003 f827 	bl	80082b4 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <motorCtrlFlip+0xc0>)
 8005268:	88fb      	ldrh	r3, [r7, #6]
 800526a:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <motorCtrlFlip+0xc4>)
 800526e:	88bb      	ldrh	r3, [r7, #4]
 8005270:	8013      	strh	r3, [r2, #0]
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20018604 	.word	0x20018604
 8005280:	2001a7ec 	.word	0x2001a7ec
 8005284:	40020800 	.word	0x40020800
 8005288:	20018606 	.word	0x20018606
 800528c:	2001aab0 	.word	0x2001aab0
 8005290:	2001aaae 	.word	0x2001aaae

08005294 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <suctionmotorCtrlFlip+0x1c>)
 800529a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <suctionmotorCtrlFlip+0x20>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20018608 	.word	0x20018608
 80052b4:	2001a9c4 	.word	0x2001a9c4

080052b8 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	460a      	mov	r2, r1
 80052c2:	80fb      	strh	r3, [r7, #6]
 80052c4:	4613      	mov	r3, r2
 80052c6:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 80052c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052cc:	f240 628e 	movw	r2, #1678	; 0x68e
 80052d0:	4293      	cmp	r3, r2
 80052d2:	dd03      	ble.n	80052dc <setMotor+0x24>
 80052d4:	f240 638f 	movw	r3, #1679	; 0x68f
 80052d8:	80fb      	strh	r3, [r7, #6]
 80052da:	e007      	b.n	80052ec <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 80052dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <setMotor+0x70>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	da02      	bge.n	80052ec <setMotor+0x34>
 80052e6:	f64f 1371 	movw	r3, #63857	; 0xf971
 80052ea:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 80052ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80052f0:	f240 628e 	movw	r2, #1678	; 0x68e
 80052f4:	4293      	cmp	r3, r2
 80052f6:	dd03      	ble.n	8005300 <setMotor+0x48>
 80052f8:	f240 638f 	movw	r3, #1679	; 0x68f
 80052fc:	80bb      	strh	r3, [r7, #4]
 80052fe:	e007      	b.n	8005310 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8005300:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005304:	4a08      	ldr	r2, [pc, #32]	; (8005328 <setMotor+0x70>)
 8005306:	4293      	cmp	r3, r2
 8005308:	da02      	bge.n	8005310 <setMotor+0x58>
 800530a:	f64f 1371 	movw	r3, #63857	; 0xf971
 800530e:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8005310:	4a06      	ldr	r2, [pc, #24]	; (800532c <setMotor+0x74>)
 8005312:	88fb      	ldrh	r3, [r7, #6]
 8005314:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8005316:	4a06      	ldr	r2, [pc, #24]	; (8005330 <setMotor+0x78>)
 8005318:	88bb      	ldrh	r3, [r7, #4]
 800531a:	8013      	strh	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	fffff972 	.word	0xfffff972
 800532c:	20018604 	.word	0x20018604
 8005330:	20018606 	.word	0x20018606

08005334 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 800533e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bfb8      	it	lt
 8005346:	425b      	neglt	r3, r3
 8005348:	b21a      	sxth	r2, r3
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <setsuctionMotor+0x38>)
 800534c:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 800534e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005352:	f240 3246 	movw	r2, #838	; 0x346
 8005356:	4293      	cmp	r3, r2
 8005358:	dd02      	ble.n	8005360 <setsuctionMotor+0x2c>
 800535a:	f240 3347 	movw	r3, #839	; 0x347
 800535e:	80fb      	strh	r3, [r7, #6]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20018608 	.word	0x20018608

08005370 <updateSideSensorStatus>:
static float debug_now_X;
static float debug_now_Y;
static float debug_now_Theta;
static int16_t V_motor;

void updateSideSensorStatus(){
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <updateSideSensorStatus+0x44>)
 8005376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800537a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800537e:	dc03      	bgt.n	8005388 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005380:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <updateSideSensorStatus+0x48>)
 8005382:	2201      	movs	r2, #1
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	e002      	b.n	800538e <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <updateSideSensorStatus+0x48>)
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <updateSideSensorStatus+0x4c>)
 8005390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005394:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005398:	dc03      	bgt.n	80053a2 <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <updateSideSensorStatus+0x50>)
 800539c:	2201      	movs	r2, #1
 800539e:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 80053a0:	e002      	b.n	80053a8 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <updateSideSensorStatus+0x50>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
}
 80053a8:	bf00      	nop
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	2001a620 	.word	0x2001a620
 80053b8:	2001a558 	.word	0x2001a558
 80053bc:	2001a5a8 	.word	0x2001a5a8
 80053c0:	2001a559 	.word	0x2001a559

080053c4 <setRunMode>:

void setRunMode(uint16_t num){
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	80fb      	strh	r3, [r7, #6]
	mode = num;
 80053ce:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <setRunMode+0x1c>)
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	8013      	strh	r3, [r2, #0]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	2001aab8 	.word	0x2001aab8

080053e4 <isCrossLine>:

bool isCrossLine()
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 80053ea:	4b20      	ldr	r3, [pc, #128]	; (800546c <isCrossLine+0x88>)
 80053ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053f8:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <isCrossLine+0x88>)
 80053fe:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540a:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 800540e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005412:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005470 <isCrossLine+0x8c>
 8005416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	d50f      	bpl.n	8005440 <isCrossLine+0x5c>
 8005420:	edd7 7a00 	vldr	s15, [r7]
 8005424:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005470 <isCrossLine+0x8c>
 8005428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d506      	bpl.n	8005440 <isCrossLine+0x5c>
		cnt++;
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <isCrossLine+0x90>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <isCrossLine+0x90>)
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e002      	b.n	8005446 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <isCrossLine+0x90>)
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <isCrossLine+0x90>)
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d903      	bls.n	8005456 <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 800544e:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <isCrossLine+0x94>)
 8005450:	2201      	movs	r2, #1
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	e002      	b.n	800545c <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <isCrossLine+0x94>)
 8005458:	2200      	movs	r2, #0
 800545a:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 800545c:	4b06      	ldr	r3, [pc, #24]	; (8005478 <isCrossLine+0x94>)
 800545e:	781b      	ldrb	r3, [r3, #0]
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	2001a604 	.word	0x2001a604
 8005470:	442f0000 	.word	0x442f0000
 8005474:	2001a584 	.word	0x2001a584
 8005478:	2001a586 	.word	0x2001a586
 800547c:	00000000 	.word	0x00000000

08005480 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005480:	b580      	push	{r7, lr}
 8005482:	ed2d 8b02 	vpush	{d8}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 800548a:	2300      	movs	r3, #0
 800548c:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 800548e:	4b2e      	ldr	r3, [pc, #184]	; (8005548 <isContinuousCurvature+0xc8>)
 8005490:	ed93 8a00 	vldr	s16, [r3]
 8005494:	f7fc f9fa 	bl	800188c <getTheta10mm>
 8005498:	eef0 7a40 	vmov.f32	s15, s0
 800549c:	ee78 7a67 	vsub.f32	s15, s16, s15
 80054a0:	eef0 7ae7 	vabs.f32	s15, s15
 80054a4:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <isContinuousCurvature+0xcc>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d006      	beq.n	80054be <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 80054b0:	4b26      	ldr	r3, [pc, #152]	; (800554c <isContinuousCurvature+0xcc>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 80054b6:	4b26      	ldr	r3, [pc, #152]	; (8005550 <isContinuousCurvature+0xd0>)
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f7fb f842 	bl	8000548 <__aeabi_f2d>
 80054c4:	a31e      	add	r3, pc, #120	; (adr r3, 8005540 <isContinuousCurvature+0xc0>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	f7fb fb11 	bl	8000af0 <__aeabi_dcmple>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <isContinuousCurvature+0x6a>
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <isContinuousCurvature+0xd0>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e2:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <isContinuousCurvature+0xd0>)
 80054e4:	edc3 7a00 	vstr	s15, [r3]
 80054e8:	e003      	b.n	80054f2 <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <isContinuousCurvature+0xd0>)
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <isContinuousCurvature+0xd0>)
 80054f4:	edd3 7a00 	vldr	s15, [r3]
 80054f8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005554 <isContinuousCurvature+0xd4>
 80054fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005504:	db01      	blt.n	800550a <isContinuousCurvature+0x8a>
 8005506:	2301      	movs	r3, #1
 8005508:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 800550a:	4b11      	ldr	r3, [pc, #68]	; (8005550 <isContinuousCurvature+0xd0>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005558 <isContinuousCurvature+0xd8>
 8005514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800551c:	db02      	blt.n	8005524 <isContinuousCurvature+0xa4>
 800551e:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <isContinuousCurvature+0xd0>)
 8005520:	4a0e      	ldr	r2, [pc, #56]	; (800555c <isContinuousCurvature+0xdc>)
 8005522:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8005524:	f7fc f9b2 	bl	800188c <getTheta10mm>
 8005528:	eef0 7a40 	vmov.f32	s15, s0
 800552c:	4b06      	ldr	r3, [pc, #24]	; (8005548 <isContinuousCurvature+0xc8>)
 800552e:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8005532:	79fb      	ldrb	r3, [r7, #7]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	ecbd 8b02 	vpop	{d8}
 800553e:	bd80      	pop	{r7, pc}
 8005540:	47ae147b 	.word	0x47ae147b
 8005544:	3f947ae1 	.word	0x3f947ae1
 8005548:	2001a588 	.word	0x2001a588
 800554c:	2001a55c 	.word	0x2001a55c
 8005550:	2001a58c 	.word	0x2001a58c
 8005554:	42200000 	.word	0x42200000
 8005558:	447a0000 	.word	0x447a0000
 800555c:	447a0000 	.word	0x447a0000

08005560 <isTargetDistance>:

bool isTargetDistance(float target){
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 800556e:	f7fb ff79 	bl	8001464 <getDistance10mm>
 8005572:	eeb0 7a40 	vmov.f32	s14, s0
 8005576:	edd7 7a01 	vldr	s15, [r7, #4]
 800557a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800557e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005582:	d801      	bhi.n	8005588 <isTargetDistance+0x28>
		ret = true;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <running>:

void running(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	ed2d 8b02 	vpush	{d8}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	80fb      	strh	r3, [r7, #6]

	runningInit();
 80055a2:	f000 fa21 	bl	80059e8 <runningInit>
	startLineTrace();
 80055a6:	f7fc fe01 	bl	80021ac <startLineTrace>
	startVelocityControl();
 80055aa:	f7fe f8cd 	bl	8003748 <startVelocityControl>
	startAngleControl();
 80055ae:	f7fb fd9d 	bl	80010ec <startAngleControl>
	setTargetVelocity(min_velocity);
 80055b2:	4b84      	ldr	r3, [pc, #528]	; (80057c4 <running+0x230>)
 80055b4:	edd3 7a00 	vldr	s15, [r3]
 80055b8:	eeb0 0a67 	vmov.f32	s0, s15
 80055bc:	f7fe f836 	bl	800362c <setTargetVelocity>

	while(goal_flag == false){
 80055c0:	e0f2      	b.n	80057a8 <running+0x214>
		switch(pattern){
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	2b14      	cmp	r3, #20
 80055c6:	f200 80c4 	bhi.w	8005752 <running+0x1be>
 80055ca:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <running+0x3c>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	08005625 	.word	0x08005625
 80055d4:	08005753 	.word	0x08005753
 80055d8:	08005753 	.word	0x08005753
 80055dc:	08005753 	.word	0x08005753
 80055e0:	08005753 	.word	0x08005753
 80055e4:	08005673 	.word	0x08005673
 80055e8:	08005753 	.word	0x08005753
 80055ec:	08005753 	.word	0x08005753
 80055f0:	08005753 	.word	0x08005753
 80055f4:	08005753 	.word	0x08005753
 80055f8:	08005687 	.word	0x08005687
 80055fc:	08005753 	.word	0x08005753
 8005600:	08005753 	.word	0x08005753
 8005604:	08005753 	.word	0x08005753
 8005608:	08005753 	.word	0x08005753
 800560c:	08005753 	.word	0x08005753
 8005610:	08005753 	.word	0x08005753
 8005614:	08005753 	.word	0x08005753
 8005618:	08005753 	.word	0x08005753
 800561c:	08005753 	.word	0x08005753
 8005620:	08005727 	.word	0x08005727

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005624:	f000 fcc2 	bl	8005fac <getSideSensorStatusR>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 808e 	beq.w	800574c <running+0x1b8>
						  start_goal_line_cnt++;
 8005630:	4b65      	ldr	r3, [pc, #404]	; (80057c8 <running+0x234>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	4b63      	ldr	r3, [pc, #396]	; (80057c8 <running+0x234>)
 800563a:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 800563c:	4b63      	ldr	r3, [pc, #396]	; (80057cc <running+0x238>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d102      	bne.n	800564a <running+0xb6>
 8005644:	f000 fac6 	bl	8005bd4 <startLogging>
 8005648:	e00c      	b.n	8005664 <running+0xd0>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 800564a:	4b60      	ldr	r3, [pc, #384]	; (80057cc <running+0x238>)
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d003      	beq.n	800565a <running+0xc6>
 8005652:	4b5e      	ldr	r3, [pc, #376]	; (80057cc <running+0x238>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d102      	bne.n	8005660 <running+0xcc>
 800565a:	f000 faf3 	bl	8005c44 <startVelocityUpdate>
 800565e:	e001      	b.n	8005664 <running+0xd0>
						  else startTargetUpdate();
 8005660:	f000 fad4 	bl	8005c0c <startTargetUpdate>

						  clearGoalJudgeDistance();
 8005664:	f7fb fec6 	bl	80013f4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8005668:	f7fb fed2 	bl	8001410 <clearSideLineJudgeDistance>
						  pattern = 5;
 800566c:	2305      	movs	r3, #5
 800566e:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8005670:	e06c      	b.n	800574c <running+0x1b8>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8005672:	f000 fc9b 	bl	8005fac <getSideSensorStatusR>
 8005676:	4603      	mov	r3, r0
 8005678:	f083 0301 	eor.w	r3, r3, #1
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <running+0xf2>
 8005682:	230a      	movs	r3, #10
 8005684:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005686:	f000 fc85 	bl	8005f94 <getSideSensorStatusL>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <running+0x106>
						  goal_judge_flag = false;
 8005690:	4b4f      	ldr	r3, [pc, #316]	; (80057d0 <running+0x23c>)
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005696:	f7fb fead 	bl	80013f4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 800569a:	4b4d      	ldr	r3, [pc, #308]	; (80057d0 <running+0x23c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d015      	beq.n	80056d4 <running+0x140>
 80056a8:	f000 fc80 	bl	8005fac <getSideSensorStatusR>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d010      	beq.n	80056d4 <running+0x140>
 80056b2:	f7fb fe57 	bl	8001364 <getGoalJudgeDistance>
 80056b6:	eeb0 7a40 	vmov.f32	s14, s0
 80056ba:	eddf 7a46 	vldr	s15, [pc, #280]	; 80057d4 <running+0x240>
 80056be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	db05      	blt.n	80056d4 <running+0x140>
						  goal_judge_flag = true;
 80056c8:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <running+0x23c>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80056ce:	f7fb fe91 	bl	80013f4 <clearGoalJudgeDistance>
 80056d2:	e019      	b.n	8005708 <running+0x174>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 80056d4:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <running+0x23c>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d015      	beq.n	8005708 <running+0x174>
 80056dc:	f7fb fe42 	bl	8001364 <getGoalJudgeDistance>
 80056e0:	eeb0 7a40 	vmov.f32	s14, s0
 80056e4:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80057d4 <running+0x240>
 80056e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f0:	db0a      	blt.n	8005708 <running+0x174>
						  start_goal_line_cnt++;
 80056f2:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <running+0x234>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	4b33      	ldr	r3, [pc, #204]	; (80057c8 <running+0x234>)
 80056fc:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <running+0x23c>)
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005704:	f7fb fe76 	bl	80013f4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005708:	4b2f      	ldr	r3, [pc, #188]	; (80057c8 <running+0x234>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d91f      	bls.n	8005750 <running+0x1bc>
						  stopLogging();
 8005710:	f000 fa70 	bl	8005bf4 <stopLogging>
						  stopVelocityUpdate();
 8005714:	f000 fab8 	bl	8005c88 <stopVelocityUpdate>
						  stopTargetUpdate();
 8005718:	f000 fa88 	bl	8005c2c <stopTargetUpdate>
						  stopAngleControl();
 800571c:	f7fb fcf8 	bl	8001110 <stopAngleControl>
						  pattern = 20;
 8005720:	2314      	movs	r3, #20
 8005722:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005724:	e014      	b.n	8005750 <running+0x1bc>

				  case 20:

					  setTargetVelocity(1.0);
 8005726:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800572a:	f7fd ff7f 	bl	800362c <setTargetVelocity>
					  HAL_Delay(100);
 800572e:	2064      	movs	r0, #100	; 0x64
 8005730:	f001 f98e 	bl	8006a50 <HAL_Delay>
					  setTargetVelocity(0);
 8005734:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80057d8 <running+0x244>
 8005738:	f7fd ff78 	bl	800362c <setTargetVelocity>
					  HAL_Delay(500);
 800573c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005740:	f001 f986 	bl	8006a50 <HAL_Delay>

					  goal_flag = true;
 8005744:	4b25      	ldr	r3, [pc, #148]	; (80057dc <running+0x248>)
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]

					  break;
 800574a:	e002      	b.n	8005752 <running+0x1be>
					  break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <running+0x1be>
					  break;
 8005750:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8005752:	f7fc fd4f 	bl	80021f4 <getCouseOutFlag>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d009      	beq.n	8005770 <running+0x1dc>
		{
			stopLogging();
 800575c:	f000 fa4a 	bl	8005bf4 <stopLogging>
			stopVelocityUpdate();
 8005760:	f000 fa92 	bl	8005c88 <stopVelocityUpdate>
			stopTargetUpdate();
 8005764:	f000 fa62 	bl	8005c2c <stopTargetUpdate>
			stopAngleControl();
 8005768:	f7fb fcd2 	bl	8001110 <stopAngleControl>
		    pattern = 20;
 800576c:	2314      	movs	r3, #20
 800576e:	80fb      	strh	r3, [r7, #6]
	    }

		if(mode == 5)
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <running+0x238>)
 8005772:	881b      	ldrh	r3, [r3, #0]
 8005774:	2b05      	cmp	r3, #5
 8005776:	d117      	bne.n	80057a8 <running+0x214>
		{
			if(getTotalDistance() >= getTotal_length())
 8005778:	f7fb fde6 	bl	8001348 <getTotalDistance>
 800577c:	eeb0 8a40 	vmov.f32	s16, s0
 8005780:	f7fe faae 	bl	8003ce0 <getTotal_length>
 8005784:	eef0 7a40 	vmov.f32	s15, s0
 8005788:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	da00      	bge.n	8005794 <running+0x200>
 8005792:	e009      	b.n	80057a8 <running+0x214>
			{
				stopLogging();
 8005794:	f000 fa2e 	bl	8005bf4 <stopLogging>
				stopVelocityUpdate();
 8005798:	f000 fa76 	bl	8005c88 <stopVelocityUpdate>
				stopTargetUpdate();
 800579c:	f000 fa46 	bl	8005c2c <stopTargetUpdate>
				stopAngleControl();
 80057a0:	f7fb fcb6 	bl	8001110 <stopAngleControl>
				pattern = 20;
 80057a4:	2314      	movs	r3, #20
 80057a6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 80057a8:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <running+0x248>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f083 0301 	eor.w	r3, r3, #1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f af05 	bne.w	80055c2 <running+0x2e>
			}
		}
	}
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	ecbd 8b02 	vpop	{d8}
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2001a564 	.word	0x2001a564
 80057c8:	2001a54c 	.word	0x2001a54c
 80057cc:	2001aab8 	.word	0x2001aab8
 80057d0:	2001a55b 	.word	0x2001a55b
 80057d4:	428c0000 	.word	0x428c0000
 80057d8:	00000000 	.word	0x00000000
 80057dc:	2001a55a 	.word	0x2001a55a

080057e0 <runningFlip>:

void runningFlip()
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
	if(run_flag == true){
 80057e4:	4b76      	ldr	r3, [pc, #472]	; (80059c0 <runningFlip+0x1e0>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80e7 	beq.w	80059bc <runningFlip+0x1dc>
		setLED('G');
 80057ee:	2047      	movs	r0, #71	; 0x47
 80057f0:	f7fc f884 	bl	80018fc <setLED>
		updateTargetVelocity();//速度の更新
 80057f4:	f000 fa54 	bl	8005ca0 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 80057f8:	f7fe f946 	bl	8003a88 <updateTargetpoint>

		if(isTargetDistance(10) == true){
 80057fc:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005800:	f7ff feae 	bl	8005560 <isTargetDistance>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00d      	beq.n	8005826 <runningFlip+0x46>
			saveLog();
 800580a:	f000 f931 	bl	8005a70 <saveLog>

			if(isContinuousCurvature() == true){
 800580e:	f7ff fe37 	bl	8005480 <isContinuousCurvature>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005818:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <runningFlip+0x1e4>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 800581e:	f7fb fe2f 	bl	8001480 <clearDistance10mm>
			clearTheta10mm();
 8005822:	f7fc f841 	bl	80018a8 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005826:	f7ff fddd 	bl	80053e4 <isCrossLine>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d026      	beq.n	800587e <runningFlip+0x9e>
 8005830:	4b65      	ldr	r3, [pc, #404]	; (80059c8 <runningFlip+0x1e8>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f083 0301 	eor.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01f      	beq.n	800587e <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 800583e:	4b62      	ldr	r3, [pc, #392]	; (80059c8 <runningFlip+0x1e8>)
 8005840:	2201      	movs	r2, #1
 8005842:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005844:	4b5f      	ldr	r3, [pc, #380]	; (80059c4 <runningFlip+0x1e4>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 800584a:	f7fb fdef 	bl	800142c <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 800584e:	f7fb fdfb 	bl	8001448 <clearSideLineIgnoreDistance>

			if(mode == 1){
 8005852:	4b5e      	ldr	r3, [pc, #376]	; (80059cc <runningFlip+0x1ec>)
 8005854:	881b      	ldrh	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d10b      	bne.n	8005872 <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 800585a:	4b5d      	ldr	r3, [pc, #372]	; (80059d0 <runningFlip+0x1f0>)
 800585c:	2200      	movs	r2, #0
 800585e:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8005860:	f7fb fd72 	bl	8001348 <getTotalDistance>
 8005864:	eef0 7a40 	vmov.f32	s15, s0
 8005868:	eeb0 0a67 	vmov.f32	s0, s15
 800586c:	f7fd fb40 	bl	8002ef0 <saveCross>
			if(mode == 1){
 8005870:	e017      	b.n	80058a2 <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 8005872:	4b57      	ldr	r3, [pc, #348]	; (80059d0 <runningFlip+0x1f0>)
 8005874:	2200      	movs	r2, #0
 8005876:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8005878:	f000 fa78 	bl	8005d6c <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 800587c:	e011      	b.n	80058a2 <runningFlip+0xc2>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 800587e:	4b52      	ldr	r3, [pc, #328]	; (80059c8 <runningFlip+0x1e8>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00d      	beq.n	80058a2 <runningFlip+0xc2>
 8005886:	f7fb fd99 	bl	80013bc <getCrossLineIgnoreDistance>
 800588a:	eeb0 7a40 	vmov.f32	s14, s0
 800588e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80059d4 <runningFlip+0x1f4>
 8005892:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589a:	db02      	blt.n	80058a2 <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 800589c:	4b4a      	ldr	r3, [pc, #296]	; (80059c8 <runningFlip+0x1e8>)
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80058a2:	f000 fb83 	bl	8005fac <getSideSensorStatusR>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d004      	beq.n	80058b6 <runningFlip+0xd6>
			side_line_judge_flag = false;
 80058ac:	4b4a      	ldr	r3, [pc, #296]	; (80059d8 <runningFlip+0x1f8>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80058b2:	f7fb fdad 	bl	8001410 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 80058b6:	4b48      	ldr	r3, [pc, #288]	; (80059d8 <runningFlip+0x1f8>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	f083 0301 	eor.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <runningFlip+0x110>
 80058c4:	f000 fb66 	bl	8005f94 <getSideSensorStatusL>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d010      	beq.n	80058f0 <runningFlip+0x110>
 80058ce:	f7fb fd57 	bl	8001380 <getSideLineJudgeDistance>
 80058d2:	eeb0 7a40 	vmov.f32	s14, s0
 80058d6:	eddf 7a41 	vldr	s15, [pc, #260]	; 80059dc <runningFlip+0x1fc>
 80058da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e2:	db05      	blt.n	80058f0 <runningFlip+0x110>
			side_line_judge_flag = true;
 80058e4:	4b3c      	ldr	r3, [pc, #240]	; (80059d8 <runningFlip+0x1f8>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80058ea:	f7fb fd91 	bl	8001410 <clearSideLineJudgeDistance>
 80058ee:	e02f      	b.n	8005950 <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 80058f0:	4b39      	ldr	r3, [pc, #228]	; (80059d8 <runningFlip+0x1f8>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d02b      	beq.n	8005950 <runningFlip+0x170>
 80058f8:	f7fb fd42 	bl	8001380 <getSideLineJudgeDistance>
 80058fc:	eeb0 7a40 	vmov.f32	s14, s0
 8005900:	eddf 7a36 	vldr	s15, [pc, #216]	; 80059dc <runningFlip+0x1fc>
 8005904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590c:	db20      	blt.n	8005950 <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800590e:	f7fb fd7f 	bl	8001410 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 8005912:	4b31      	ldr	r3, [pc, #196]	; (80059d8 <runningFlip+0x1f8>)
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <runningFlip+0x1e4>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d017      	beq.n	8005950 <runningFlip+0x170>
				continuous_curve_flag = false;
 8005920:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <runningFlip+0x1e4>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 8005926:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <runningFlip+0x200>)
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <runningFlip+0x1ec>)
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d10b      	bne.n	800594c <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <runningFlip+0x204>)
 8005936:	2200      	movs	r2, #0
 8005938:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 800593a:	f7fb fd05 	bl	8001348 <getTotalDistance>
 800593e:	eef0 7a40 	vmov.f32	s15, s0
 8005942:	eeb0 0a67 	vmov.f32	s0, s15
 8005946:	f7fd faeb 	bl	8002f20 <saveSide>
 800594a:	e001      	b.n	8005950 <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 800594c:	f000 fa64 	bl	8005e18 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8005950:	4b1f      	ldr	r3, [pc, #124]	; (80059d0 <runningFlip+0x1f0>)
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	3301      	adds	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <runningFlip+0x1f0>)
 800595a:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <runningFlip+0x204>)
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <runningFlip+0x204>)
 8005966:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <runningFlip+0x1f0>)
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005970:	4293      	cmp	r3, r2
 8005972:	d903      	bls.n	800597c <runningFlip+0x19c>
 8005974:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <runningFlip+0x1f0>)
 8005976:	f242 7210 	movw	r2, #10000	; 0x2710
 800597a:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <runningFlip+0x204>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	f242 720f 	movw	r2, #9999	; 0x270f
 8005984:	4293      	cmp	r3, r2
 8005986:	d903      	bls.n	8005990 <runningFlip+0x1b0>
 8005988:	4b16      	ldr	r3, [pc, #88]	; (80059e4 <runningFlip+0x204>)
 800598a:	f242 7210 	movw	r2, #10000	; 0x2710
 800598e:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 8005990:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <runningFlip+0x204>)
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	2b96      	cmp	r3, #150	; 0x96
 8005996:	d803      	bhi.n	80059a0 <runningFlip+0x1c0>
 8005998:	2047      	movs	r0, #71	; 0x47
 800599a:	f7fc f87d 	bl	8001a98 <setLED2>
 800599e:	e002      	b.n	80059a6 <runningFlip+0x1c6>
	    else setLED2('N');
 80059a0:	204e      	movs	r0, #78	; 0x4e
 80059a2:	f7fc f879 	bl	8001a98 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80059a6:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <runningFlip+0x204>)
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	2b96      	cmp	r3, #150	; 0x96
 80059ac:	d803      	bhi.n	80059b6 <runningFlip+0x1d6>
 80059ae:	2042      	movs	r0, #66	; 0x42
 80059b0:	f7fb ffa4 	bl	80018fc <setLED>
	    else setLED('G');
	}
}
 80059b4:	e002      	b.n	80059bc <runningFlip+0x1dc>
	    else setLED('G');
 80059b6:	2047      	movs	r0, #71	; 0x47
 80059b8:	f7fb ffa0 	bl	80018fc <setLED>
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	2001a55e 	.word	0x2001a55e
 80059c4:	2001a55d 	.word	0x2001a55d
 80059c8:	2001a556 	.word	0x2001a556
 80059cc:	2001aab8 	.word	0x2001aab8
 80059d0:	2001a552 	.word	0x2001a552
 80059d4:	42480000 	.word	0x42480000
 80059d8:	2001a557 	.word	0x2001a557
 80059dc:	42700000 	.word	0x42700000
 80059e0:	2001a55c 	.word	0x2001a55c
 80059e4:	2001a554 	.word	0x2001a554

080059e8 <runningInit>:

void runningInit()
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
	if(mode == 1){
 80059ec:	4b18      	ldr	r3, [pc, #96]	; (8005a50 <runningInit+0x68>)
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d105      	bne.n	8005a00 <runningInit+0x18>
		setLED('W');
 80059f4:	2057      	movs	r0, #87	; 0x57
 80059f6:	f7fb ff81 	bl	80018fc <setLED>
		ereaseLog();
 80059fa:	f7fd fac1 	bl	8002f80 <ereaseLog>
 80059fe:	e00b      	b.n	8005a18 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 8005a00:	f7fd fafa 	bl	8002ff8 <ereaseDebugLog>
		loadDistance();
 8005a04:	f7fd fb38 	bl	8003078 <loadDistance>
		loadTheta();
 8005a08:	f7fd fb74 	bl	80030f4 <loadTheta>
		loadCross();
 8005a0c:	f7fd fbb0 	bl	8003170 <loadCross>
		loadSide();
 8005a10:	f7fd fbec 	bl	80031ec <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005a14:	f7fd fec2 	bl	800379c <CreateXYcoordinates>
	}

	clearCrossLineIgnoreDistance();
 8005a18:	f7fb fd08 	bl	800142c <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005a1c:	f7fb fd14 	bl	8001448 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8005a20:	4b0c      	ldr	r3, [pc, #48]	; (8005a54 <runningInit+0x6c>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <runningInit+0x70>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <runningInit+0x74>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 8005a32:	4b0b      	ldr	r3, [pc, #44]	; (8005a60 <runningInit+0x78>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <runningInit+0x7c>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005a3e:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <runningInit+0x80>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <runningInit+0x84>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	701a      	strb	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	2001aab8 	.word	0x2001aab8
 8005a54:	2001a54c 	.word	0x2001a54c
 8005a58:	2001a556 	.word	0x2001a556
 8005a5c:	2001a557 	.word	0x2001a557
 8005a60:	2001a55b 	.word	0x2001a55b
 8005a64:	2001a55c 	.word	0x2001a55c
 8005a68:	2001a55d 	.word	0x2001a55d
 8005a6c:	2001a55e 	.word	0x2001a55e

08005a70 <saveLog>:

void saveLog(){
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 8005a74:	4b51      	ldr	r3, [pc, #324]	; (8005bbc <saveLog+0x14c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005a7c:	f7fb fcf2 	bl	8001464 <getDistance10mm>
 8005a80:	eef0 7a40 	vmov.f32	s15, s0
 8005a84:	eeb0 0a67 	vmov.f32	s0, s15
 8005a88:	f7fd fa02 	bl	8002e90 <saveDistance>
		saveTheta(getTheta10mm());
 8005a8c:	f7fb fefe 	bl	800188c <getTheta10mm>
 8005a90:	eef0 7a40 	vmov.f32	s15, s0
 8005a94:	eeb0 0a67 	vmov.f32	s0, s15
 8005a98:	f7fd fa12 	bl	8002ec0 <saveTheta>
		saveDebug(getOutput_velocity());
		saveDebug(getOutput_angularvelocity());
		saveDebug(getCurrentVelocity());
		saveDebug(getTheta10mm());
	}
}
 8005a9c:	e08b      	b.n	8005bb6 <saveLog+0x146>
	else if(velocity_update_flag == true){
 8005a9e:	4b48      	ldr	r3, [pc, #288]	; (8005bc0 <saveLog+0x150>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d010      	beq.n	8005ac8 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 8005aa6:	f7fd fe41 	bl	800372c <getTargetVelocity>
 8005aaa:	eef0 7a40 	vmov.f32	s15, s0
 8005aae:	eeb0 0a67 	vmov.f32	s0, s15
 8005ab2:	f7fd fa4d 	bl	8002f50 <saveDebug>
		saveDebug(getCurrentVelocity());
 8005ab6:	f7fd fdfb 	bl	80036b0 <getCurrentVelocity>
 8005aba:	eef0 7a40 	vmov.f32	s15, s0
 8005abe:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac2:	f7fd fa45 	bl	8002f50 <saveDebug>
}
 8005ac6:	e076      	b.n	8005bb6 <saveLog+0x146>
	else if(target_update_flag == true){
 8005ac8:	4b3e      	ldr	r3, [pc, #248]	; (8005bc4 <saveLog+0x154>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d072      	beq.n	8005bb6 <saveLog+0x146>
		debug_now_X = CurrentXcoordinates();
 8005ad0:	f7fd ff32 	bl	8003938 <CurrentXcoordinates>
 8005ad4:	eef0 7a40 	vmov.f32	s15, s0
 8005ad8:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <saveLog+0x158>)
 8005ada:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Y = CurrentYcoordinates();
 8005ade:	f7fd ff7f 	bl	80039e0 <CurrentYcoordinates>
 8005ae2:	eef0 7a40 	vmov.f32	s15, s0
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <saveLog+0x15c>)
 8005ae8:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Theta = getaddTheta();
 8005aec:	f7fb feea 	bl	80018c4 <getaddTheta>
 8005af0:	eef0 7a40 	vmov.f32	s15, s0
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <saveLog+0x160>)
 8005af6:	edc3 7a00 	vstr	s15, [r3]
		saveDebug(getTargetpoint_X());//目標のx座標
 8005afa:	f7fe f8ff 	bl	8003cfc <getTargetpoint_X>
 8005afe:	eef0 7a40 	vmov.f32	s15, s0
 8005b02:	eeb0 0a67 	vmov.f32	s0, s15
 8005b06:	f7fd fa23 	bl	8002f50 <saveDebug>
		saveDebug(getTargetpoint_Y());//目標のy座標
 8005b0a:	f7fe f905 	bl	8003d18 <getTargetpoint_Y>
 8005b0e:	eef0 7a40 	vmov.f32	s15, s0
 8005b12:	eeb0 0a67 	vmov.f32	s0, s15
 8005b16:	f7fd fa1b 	bl	8002f50 <saveDebug>
		saveDebug(getTargetpoint_Theta());//目標の車体角速度θ
 8005b1a:	f7fe f90b 	bl	8003d34 <getTargetpoint_Theta>
 8005b1e:	eef0 7a40 	vmov.f32	s15, s0
 8005b22:	eeb0 0a67 	vmov.f32	s0, s15
 8005b26:	f7fd fa13 	bl	8002f50 <saveDebug>
		saveDebug(debug_now_X);//現在のx座標
 8005b2a:	4b27      	ldr	r3, [pc, #156]	; (8005bc8 <saveLog+0x158>)
 8005b2c:	edd3 7a00 	vldr	s15, [r3]
 8005b30:	eeb0 0a67 	vmov.f32	s0, s15
 8005b34:	f7fd fa0c 	bl	8002f50 <saveDebug>
		saveDebug(debug_now_Y);//現在のy座標
 8005b38:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <saveLog+0x15c>)
 8005b3a:	edd3 7a00 	vldr	s15, [r3]
 8005b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b42:	f7fd fa05 	bl	8002f50 <saveDebug>
		saveDebug(debug_now_Theta);//現在の車体角速度
 8005b46:	4b22      	ldr	r3, [pc, #136]	; (8005bd0 <saveLog+0x160>)
 8005b48:	edd3 7a00 	vldr	s15, [r3]
 8005b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b50:	f7fd f9fe 	bl	8002f50 <saveDebug>
		Error_XY_Debug(debug_now_X, debug_now_Y, debug_now_Theta);//誤差の計算関数
 8005b54:	4b1c      	ldr	r3, [pc, #112]	; (8005bc8 <saveLog+0x158>)
 8005b56:	edd3 7a00 	vldr	s15, [r3]
 8005b5a:	4b1c      	ldr	r3, [pc, #112]	; (8005bcc <saveLog+0x15c>)
 8005b5c:	ed93 7a00 	vldr	s14, [r3]
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <saveLog+0x160>)
 8005b62:	edd3 6a00 	vldr	s13, [r3]
 8005b66:	eeb0 1a66 	vmov.f32	s2, s13
 8005b6a:	eef0 0a47 	vmov.f32	s1, s14
 8005b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b72:	f7fd ffdb 	bl	8003b2c <Error_XY_Debug>
		saveDebug(getOutput_velocity());
 8005b76:	f7fe f8eb 	bl	8003d50 <getOutput_velocity>
 8005b7a:	eef0 7a40 	vmov.f32	s15, s0
 8005b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b82:	f7fd f9e5 	bl	8002f50 <saveDebug>
		saveDebug(getOutput_angularvelocity());
 8005b86:	f7fe f8f1 	bl	8003d6c <getOutput_angularvelocity>
 8005b8a:	eef0 7a40 	vmov.f32	s15, s0
 8005b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b92:	f7fd f9dd 	bl	8002f50 <saveDebug>
		saveDebug(getCurrentVelocity());
 8005b96:	f7fd fd8b 	bl	80036b0 <getCurrentVelocity>
 8005b9a:	eef0 7a40 	vmov.f32	s15, s0
 8005b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba2:	f7fd f9d5 	bl	8002f50 <saveDebug>
		saveDebug(getTheta10mm());
 8005ba6:	f7fb fe71 	bl	800188c <getTheta10mm>
 8005baa:	eef0 7a40 	vmov.f32	s15, s0
 8005bae:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb2:	f7fd f9cd 	bl	8002f50 <saveDebug>
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2001a55f 	.word	0x2001a55f
 8005bc0:	2001a561 	.word	0x2001a561
 8005bc4:	2001a560 	.word	0x2001a560
 8005bc8:	2001a578 	.word	0x2001a578
 8005bcc:	2001a57c 	.word	0x2001a57c
 8005bd0:	2001a580 	.word	0x2001a580

08005bd4 <startLogging>:

void startLogging(){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005bd8:	f7fb fc52 	bl	8001480 <clearDistance10mm>
	clearTheta10mm();
 8005bdc:	f7fb fe64 	bl	80018a8 <clearTheta10mm>
	clearTotalDistance();
 8005be0:	f7fb fbfa 	bl	80013d8 <clearTotalDistance>
	logging_flag = true;
 8005be4:	4b02      	ldr	r3, [pc, #8]	; (8005bf0 <startLogging+0x1c>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	701a      	strb	r2, [r3, #0]
}
 8005bea:	bf00      	nop
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	2001a55f 	.word	0x2001a55f

08005bf4 <stopLogging>:

void stopLogging()
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <stopLogging+0x14>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	701a      	strb	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	2001a55f 	.word	0x2001a55f

08005c0c <startTargetUpdate>:

void startTargetUpdate()
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005c10:	f7fb fc36 	bl	8001480 <clearDistance10mm>
	clearTheta10mm();
 8005c14:	f7fb fe48 	bl	80018a8 <clearTheta10mm>
	clearaddTheta();
 8005c18:	f7fb fe62 	bl	80018e0 <clearaddTheta>
	target_update_flag = true;
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <startTargetUpdate+0x1c>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	2001a560 	.word	0x2001a560

08005c2c <stopTargetUpdate>:

void stopTargetUpdate()
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
	target_update_flag = false;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <stopTargetUpdate+0x14>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	2001a560 	.word	0x2001a560

08005c44 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005c48:	f7fb fc1a 	bl	8001480 <clearDistance10mm>
	clearTotalDistance();
 8005c4c:	f7fb fbc4 	bl	80013d8 <clearTotalDistance>
	velocity_table_idx = 0;
 8005c50:	4b08      	ldr	r3, [pc, #32]	; (8005c74 <startVelocityUpdate+0x30>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005c56:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <startVelocityUpdate+0x34>)
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <startVelocityUpdate+0x38>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <startVelocityUpdate+0x3c>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <startVelocityUpdate+0x40>)
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	801a      	strh	r2, [r3, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	2001aaba 	.word	0x2001aaba
 8005c78:	2001aab4 	.word	0x2001aab4
 8005c7c:	2001a561 	.word	0x2001a561
 8005c80:	2001a54e 	.word	0x2001a54e
 8005c84:	2001a550 	.word	0x2001a550

08005c88 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	; (8005c9c <stopVelocityUpdate+0x14>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	701a      	strb	r2, [r3, #0]
}
 8005c92:	bf00      	nop
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	2001a561 	.word	0x2001a561

08005ca0 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005ca4:	4b2c      	ldr	r3, [pc, #176]	; (8005d58 <updateTargetVelocity+0xb8>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d053      	beq.n	8005d54 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005cac:	f7fb fb4c 	bl	8001348 <getTotalDistance>
 8005cb0:	eeb0 7a40 	vmov.f32	s14, s0
 8005cb4:	4b29      	ldr	r3, [pc, #164]	; (8005d5c <updateTargetVelocity+0xbc>)
 8005cb6:	edd3 7a00 	vldr	s15, [r3]
 8005cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	db14      	blt.n	8005cee <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005cc4:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fd fb1f 	bl	800330c <getDistanceLog>
 8005cce:	eeb0 7a40 	vmov.f32	s14, s0
 8005cd2:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <updateTargetVelocity+0xbc>)
 8005cd4:	edd3 7a00 	vldr	s15, [r3]
 8005cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cdc:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <updateTargetVelocity+0xbc>)
 8005cde:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005ce2:	4b1f      	ldr	r3, [pc, #124]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b1d      	ldr	r3, [pc, #116]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005cec:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005cee:	f7fd f993 	bl	8003018 <getDistanceLogSize>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d806      	bhi.n	8005d0c <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005cfe:	f7fd f98b 	bl	8003018 <getDistanceLogSize>
 8005d02:	4603      	mov	r3, r0
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005d0a:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <updateTargetVelocity+0xc4>)
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	edd3 7a00 	vldr	s15, [r3]
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	f7fd fc85 	bl	800362c <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	4a0f      	ldr	r2, [pc, #60]	; (8005d64 <updateTargetVelocity+0xc4>)
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	ed93 7a00 	vldr	s14, [r3]
 8005d30:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <updateTargetVelocity+0xc8>)
 8005d32:	edd3 7a00 	vldr	s15, [r3]
 8005d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3e:	d501      	bpl.n	8005d44 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005d40:	f7fd fd20 	bl	8003784 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <updateTargetVelocity+0xc0>)
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <updateTargetVelocity+0xc4>)
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a05      	ldr	r2, [pc, #20]	; (8005d68 <updateTargetVelocity+0xc8>)
 8005d52:	6013      	str	r3, [r2, #0]
	}
}
 8005d54:	bf00      	nop
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	2001a561 	.word	0x2001a561
 8005d5c:	2001aab4 	.word	0x2001aab4
 8005d60:	2001aaba 	.word	0x2001aaba
 8005d64:	2001860c 	.word	0x2001860c
 8005d68:	2001a590 	.word	0x2001a590

08005d6c <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005d72:	e03f      	b.n	8005df4 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005d74:	4b25      	ldr	r3, [pc, #148]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fd fadd 	bl	8003338 <getCrossLog>
 8005d7e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005d82:	f7fb fae1 	bl	8001348 <getTotalDistance>
 8005d86:	eeb0 7a40 	vmov.f32	s14, s0
 8005d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d92:	eef0 7ae7 	vabs.f32	s15, s15
 8005d96:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005d9a:	edd7 7a00 	vldr	s15, [r7]
 8005d9e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005e10 <correctionTotalDistanceFromCrossLine+0xa4>
 8005da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005daa:	d80d      	bhi.n	8005dc8 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005dae:	2200      	movs	r2, #0
 8005db0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005db2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005db6:	f7fb faf1 	bl	800139c <setTotalDistance>
			cross_line_idx++;
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dc4:	801a      	strh	r2, [r3, #0]
			break;
 8005dc6:	e01d      	b.n	8005e04 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dd2:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005dd4:	f7fd f92c 	bl	8003030 <getCrossLogSize>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d807      	bhi.n	8005df4 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005de4:	f7fd f924 	bl	8003030 <getCrossLogSize>
 8005de8:	4603      	mov	r3, r0
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005df0:	801a      	strh	r2, [r3, #0]
			break;
 8005df2:	e007      	b.n	8005e04 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005df4:	f7fd f91c 	bl	8003030 <getCrossLogSize>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <correctionTotalDistanceFromCrossLine+0xa0>)
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d2b7      	bcs.n	8005d74 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005e04:	bf00      	nop
 8005e06:	3708      	adds	r7, #8
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	2001a54e 	.word	0x2001a54e
 8005e10:	437a0000 	.word	0x437a0000
 8005e14:	2001a552 	.word	0x2001a552

08005e18 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005e1e:	e03f      	b.n	8005ea0 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005e20:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7fd fa9d 	bl	8003364 <getSideLog>
 8005e2a:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005e2e:	f7fb fa8b 	bl	8001348 <getTotalDistance>
 8005e32:	eeb0 7a40 	vmov.f32	s14, s0
 8005e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e3e:	eef0 7ae7 	vabs.f32	s15, s15
 8005e42:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005e46:	edd7 7a00 	vldr	s15, [r7]
 8005e4a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005ebc <correctionTotalDistanceFromSideLine+0xa4>
 8005e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e56:	d80d      	bhi.n	8005e74 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005e58:	4b19      	ldr	r3, [pc, #100]	; (8005ec0 <correctionTotalDistanceFromSideLine+0xa8>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005e5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e62:	f7fb fa9b 	bl	800139c <setTotalDistance>
			side_line_idx++;
 8005e66:	4b14      	ldr	r3, [pc, #80]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	4b12      	ldr	r3, [pc, #72]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e70:	801a      	strh	r2, [r3, #0]
			break;
 8005e72:	e01d      	b.n	8005eb0 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005e74:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e7e:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005e80:	f7fd f8e2 	bl	8003048 <getSideLogSize>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d807      	bhi.n	8005ea0 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005e90:	f7fd f8da 	bl	8003048 <getSideLogSize>
 8005e94:	4603      	mov	r3, r0
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005e9c:	801a      	strh	r2, [r3, #0]
			break;
 8005e9e:	e007      	b.n	8005eb0 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005ea0:	f7fd f8d2 	bl	8003048 <getSideLogSize>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d2b7      	bcs.n	8005e20 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	2001a550 	.word	0x2001a550
 8005ebc:	437a0000 	.word	0x437a0000
 8005ec0:	2001a554 	.word	0x2001a554

08005ec4 <getgoalStatus>:
		th = th + temp_theta;
	}
}
*/
bool getgoalStatus()
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	af00      	add	r7, sp, #0
	return goal_flag;
 8005ec8:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <getgoalStatus+0x14>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2001a55a 	.word	0x2001a55a

08005edc <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005ee0:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <getTargetUpdateflag+0x14>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	2001a560 	.word	0x2001a560

08005ef4 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	ed87 0a01 	vstr	s0, [r7, #4]
 8005efe:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005f02:	4a06      	ldr	r2, [pc, #24]	; (8005f1c <setVelocityRange+0x28>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005f08:	4a05      	ldr	r2, [pc, #20]	; (8005f20 <setVelocityRange+0x2c>)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	2001a564 	.word	0x2001a564
 8005f20:	2001a568 	.word	0x2001a568

08005f24 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f2e:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005f32:	4a06      	ldr	r2, [pc, #24]	; (8005f4c <setAccDec+0x28>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005f38:	4a05      	ldr	r2, [pc, #20]	; (8005f50 <setAccDec+0x2c>)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6013      	str	r3, [r2, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	2001a56c 	.word	0x2001a56c
 8005f50:	2001a570 	.word	0x2001a570

08005f54 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005f5e:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <setStraightRadius+0x1c>)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6013      	str	r3, [r2, #0]
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	2001a574 	.word	0x2001a574

08005f74 <getRunMode>:

float getRunMode()
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
	return mode;
 8005f78:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <getRunMode+0x1c>)
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005f84:	eeb0 0a67 	vmov.f32	s0, s15
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	2001aab8 	.word	0x2001aab8

08005f94 <getSideSensorStatusL>:
	return min_velocity;
}

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005f98:	4b03      	ldr	r3, [pc, #12]	; (8005fa8 <getSideSensorStatusL+0x14>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	2001a558 	.word	0x2001a558

08005fac <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005fb0:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <getSideSensorStatusR+0x14>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	2001a559 	.word	0x2001a559

08005fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	4b10      	ldr	r3, [pc, #64]	; (8006010 <HAL_MspInit+0x4c>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <HAL_MspInit+0x4c>)
 8005fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_MspInit+0x4c>)
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4b09      	ldr	r3, [pc, #36]	; (8006010 <HAL_MspInit+0x4c>)
 8005fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fee:	4a08      	ldr	r2, [pc, #32]	; (8006010 <HAL_MspInit+0x4c>)
 8005ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ff6:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_MspInit+0x4c>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800

08006014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08e      	sub	sp, #56	; 0x38
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800601c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006020:	2200      	movs	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	605a      	str	r2, [r3, #4]
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	60da      	str	r2, [r3, #12]
 800602a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a79      	ldr	r2, [pc, #484]	; (8006218 <HAL_ADC_MspInit+0x204>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d158      	bne.n	80060e8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	4b78      	ldr	r3, [pc, #480]	; (800621c <HAL_ADC_MspInit+0x208>)
 800603c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603e:	4a77      	ldr	r2, [pc, #476]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006044:	6453      	str	r3, [r2, #68]	; 0x44
 8006046:	4b75      	ldr	r3, [pc, #468]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	623b      	str	r3, [r7, #32]
 8006050:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	4b71      	ldr	r3, [pc, #452]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605a:	4a70      	ldr	r2, [pc, #448]	; (800621c <HAL_ADC_MspInit+0x208>)
 800605c:	f043 0304 	orr.w	r3, r3, #4
 8006060:	6313      	str	r3, [r2, #48]	; 0x30
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800606e:	230e      	movs	r3, #14
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006072:	2303      	movs	r3, #3
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006076:	2300      	movs	r3, #0
 8006078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800607a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800607e:	4619      	mov	r1, r3
 8006080:	4867      	ldr	r0, [pc, #412]	; (8006220 <HAL_ADC_MspInit+0x20c>)
 8006082:	f001 ff65 	bl	8007f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006086:	4b67      	ldr	r3, [pc, #412]	; (8006224 <HAL_ADC_MspInit+0x210>)
 8006088:	4a67      	ldr	r2, [pc, #412]	; (8006228 <HAL_ADC_MspInit+0x214>)
 800608a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800608c:	4b65      	ldr	r3, [pc, #404]	; (8006224 <HAL_ADC_MspInit+0x210>)
 800608e:	2200      	movs	r2, #0
 8006090:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006092:	4b64      	ldr	r3, [pc, #400]	; (8006224 <HAL_ADC_MspInit+0x210>)
 8006094:	2200      	movs	r2, #0
 8006096:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006098:	4b62      	ldr	r3, [pc, #392]	; (8006224 <HAL_ADC_MspInit+0x210>)
 800609a:	2200      	movs	r2, #0
 800609c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800609e:	4b61      	ldr	r3, [pc, #388]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80060a6:	4b5f      	ldr	r3, [pc, #380]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80060ae:	4b5d      	ldr	r3, [pc, #372]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80060b6:	4b5b      	ldr	r3, [pc, #364]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80060be:	4b59      	ldr	r3, [pc, #356]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80060c4:	4b57      	ldr	r3, [pc, #348]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80060ca:	4856      	ldr	r0, [pc, #344]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060cc:	f001 f9e8 	bl	80074a0 <HAL_DMA_Init>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80060d6:	f7ff f85d 	bl	8005194 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a51      	ldr	r2, [pc, #324]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
 80060e0:	4a50      	ldr	r2, [pc, #320]	; (8006224 <HAL_ADC_MspInit+0x210>)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80060e6:	e092      	b.n	800620e <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a4f      	ldr	r2, [pc, #316]	; (800622c <HAL_ADC_MspInit+0x218>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	f040 808d 	bne.w	800620e <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80060f4:	2300      	movs	r3, #0
 80060f6:	61bb      	str	r3, [r7, #24]
 80060f8:	4b48      	ldr	r3, [pc, #288]	; (800621c <HAL_ADC_MspInit+0x208>)
 80060fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fc:	4a47      	ldr	r2, [pc, #284]	; (800621c <HAL_ADC_MspInit+0x208>)
 80060fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006102:	6453      	str	r3, [r2, #68]	; 0x44
 8006104:	4b45      	ldr	r3, [pc, #276]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	4b41      	ldr	r3, [pc, #260]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006118:	4a40      	ldr	r2, [pc, #256]	; (800621c <HAL_ADC_MspInit+0x208>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	6313      	str	r3, [r2, #48]	; 0x30
 8006120:	4b3e      	ldr	r3, [pc, #248]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	4b3a      	ldr	r3, [pc, #232]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006134:	4a39      	ldr	r2, [pc, #228]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006136:	f043 0304 	orr.w	r3, r3, #4
 800613a:	6313      	str	r3, [r2, #48]	; 0x30
 800613c:	4b37      	ldr	r3, [pc, #220]	; (800621c <HAL_ADC_MspInit+0x208>)
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	4b33      	ldr	r3, [pc, #204]	; (800621c <HAL_ADC_MspInit+0x208>)
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	4a32      	ldr	r2, [pc, #200]	; (800621c <HAL_ADC_MspInit+0x208>)
 8006152:	f043 0302 	orr.w	r3, r3, #2
 8006156:	6313      	str	r3, [r2, #48]	; 0x30
 8006158:	4b30      	ldr	r3, [pc, #192]	; (800621c <HAL_ADC_MspInit+0x208>)
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006164:	23ff      	movs	r3, #255	; 0xff
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006168:	2303      	movs	r3, #3
 800616a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800616c:	2300      	movs	r3, #0
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006174:	4619      	mov	r1, r3
 8006176:	482e      	ldr	r0, [pc, #184]	; (8006230 <HAL_ADC_MspInit+0x21c>)
 8006178:	f001 feea 	bl	8007f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800617c:	2330      	movs	r3, #48	; 0x30
 800617e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006180:	2303      	movs	r3, #3
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006184:	2300      	movs	r3, #0
 8006186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800618c:	4619      	mov	r1, r3
 800618e:	4824      	ldr	r0, [pc, #144]	; (8006220 <HAL_ADC_MspInit+0x20c>)
 8006190:	f001 fede 	bl	8007f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006194:	2303      	movs	r3, #3
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006198:	2303      	movs	r3, #3
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619c:	2300      	movs	r3, #0
 800619e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061a4:	4619      	mov	r1, r3
 80061a6:	4823      	ldr	r0, [pc, #140]	; (8006234 <HAL_ADC_MspInit+0x220>)
 80061a8:	f001 fed2 	bl	8007f50 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80061ac:	4b22      	ldr	r3, [pc, #136]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061ae:	4a23      	ldr	r2, [pc, #140]	; (800623c <HAL_ADC_MspInit+0x228>)
 80061b0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80061b2:	4b21      	ldr	r3, [pc, #132]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061b8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ba:	4b1f      	ldr	r3, [pc, #124]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061bc:	2200      	movs	r2, #0
 80061be:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80061c0:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80061c6:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061cc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061ce:	4b1a      	ldr	r3, [pc, #104]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061d4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061d6:	4b18      	ldr	r3, [pc, #96]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061dc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80061de:	4b16      	ldr	r3, [pc, #88]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061e4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80061e6:	4b14      	ldr	r3, [pc, #80]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061ec:	4b12      	ldr	r3, [pc, #72]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80061f2:	4811      	ldr	r0, [pc, #68]	; (8006238 <HAL_ADC_MspInit+0x224>)
 80061f4:	f001 f954 	bl	80074a0 <HAL_DMA_Init>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80061fe:	f7fe ffc9 	bl	8005194 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a0c      	ldr	r2, [pc, #48]	; (8006238 <HAL_ADC_MspInit+0x224>)
 8006206:	639a      	str	r2, [r3, #56]	; 0x38
 8006208:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <HAL_ADC_MspInit+0x224>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800620e:	bf00      	nop
 8006210:	3738      	adds	r7, #56	; 0x38
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40012000 	.word	0x40012000
 800621c:	40023800 	.word	0x40023800
 8006220:	40020800 	.word	0x40020800
 8006224:	2001a924 	.word	0x2001a924
 8006228:	40026410 	.word	0x40026410
 800622c:	40012100 	.word	0x40012100
 8006230:	40020000 	.word	0x40020000
 8006234:	40020400 	.word	0x40020400
 8006238:	2001aa0c 	.word	0x2001aa0c
 800623c:	40026440 	.word	0x40026440

08006240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006248:	f107 0314 	add.w	r3, r7, #20
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <HAL_I2C_MspInit+0x84>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d12c      	bne.n	80062bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006262:	2300      	movs	r3, #0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 8006268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6313      	str	r3, [r2, #48]	; 0x30
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800627e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006284:	2312      	movs	r3, #18
 8006286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006288:	2301      	movs	r3, #1
 800628a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628c:	2303      	movs	r3, #3
 800628e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006290:	2304      	movs	r3, #4
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	4619      	mov	r1, r3
 800629a:	480c      	ldr	r0, [pc, #48]	; (80062cc <HAL_I2C_MspInit+0x8c>)
 800629c:	f001 fe58 	bl	8007f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 80062a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a8:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 80062aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062ae:	6413      	str	r3, [r2, #64]	; 0x40
 80062b0:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_I2C_MspInit+0x88>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80062bc:	bf00      	nop
 80062be:	3728      	adds	r7, #40	; 0x28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40005400 	.word	0x40005400
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40020400 	.word	0x40020400

080062d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	609a      	str	r2, [r3, #8]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a19      	ldr	r2, [pc, #100]	; (8006354 <HAL_SPI_MspInit+0x84>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d12c      	bne.n	800634c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	4b18      	ldr	r3, [pc, #96]	; (8006358 <HAL_SPI_MspInit+0x88>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	4a17      	ldr	r2, [pc, #92]	; (8006358 <HAL_SPI_MspInit+0x88>)
 80062fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006300:	6413      	str	r3, [r2, #64]	; 0x40
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <HAL_SPI_MspInit+0x88>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <HAL_SPI_MspInit+0x88>)
 8006314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006316:	4a10      	ldr	r2, [pc, #64]	; (8006358 <HAL_SPI_MspInit+0x88>)
 8006318:	f043 0304 	orr.w	r3, r3, #4
 800631c:	6313      	str	r3, [r2, #48]	; 0x30
 800631e:	4b0e      	ldr	r3, [pc, #56]	; (8006358 <HAL_SPI_MspInit+0x88>)
 8006320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800632a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800632e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006330:	2302      	movs	r3, #2
 8006332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006338:	2303      	movs	r3, #3
 800633a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800633c:	2306      	movs	r3, #6
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006340:	f107 0314 	add.w	r3, r7, #20
 8006344:	4619      	mov	r1, r3
 8006346:	4805      	ldr	r0, [pc, #20]	; (800635c <HAL_SPI_MspInit+0x8c>)
 8006348:	f001 fe02 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800634c:	bf00      	nop
 800634e:	3728      	adds	r7, #40	; 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40003c00 	.word	0x40003c00
 8006358:	40023800 	.word	0x40023800
 800635c:	40020800 	.word	0x40020800

08006360 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <HAL_TIM_PWM_MspInit+0x64>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10e      	bne.n	8006390 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6453      	str	r3, [r2, #68]	; 0x44
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800638e:	e012      	b.n	80063b6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a0d      	ldr	r2, [pc, #52]	; (80063cc <HAL_TIM_PWM_MspInit+0x6c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d10d      	bne.n	80063b6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]
 800639e:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	6453      	str	r3, [r2, #68]	; 0x44
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <HAL_TIM_PWM_MspInit+0x68>)
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	68bb      	ldr	r3, [r7, #8]
}
 80063b6:	bf00      	nop
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40023800 	.word	0x40023800
 80063cc:	40010400 	.word	0x40010400

080063d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08c      	sub	sp, #48	; 0x30
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063d8:	f107 031c 	add.w	r3, r7, #28
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	60da      	str	r2, [r3, #12]
 80063e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d12c      	bne.n	800644c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	61bb      	str	r3, [r7, #24]
 80063f6:	4b31      	ldr	r3, [pc, #196]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4a30      	ldr	r2, [pc, #192]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 80063fc:	f043 0302 	orr.w	r3, r3, #2
 8006400:	6413      	str	r3, [r2, #64]	; 0x40
 8006402:	4b2e      	ldr	r3, [pc, #184]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	61bb      	str	r3, [r7, #24]
 800640c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	4b2a      	ldr	r3, [pc, #168]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006416:	4a29      	ldr	r2, [pc, #164]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006418:	f043 0302 	orr.w	r3, r3, #2
 800641c:	6313      	str	r3, [r2, #48]	; 0x30
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800642a:	2330      	movs	r3, #48	; 0x30
 800642c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642e:	2302      	movs	r3, #2
 8006430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006436:	2300      	movs	r3, #0
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800643a:	2302      	movs	r3, #2
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643e:	f107 031c 	add.w	r3, r7, #28
 8006442:	4619      	mov	r1, r3
 8006444:	481e      	ldr	r0, [pc, #120]	; (80064c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006446:	f001 fd83 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800644a:	e030      	b.n	80064ae <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d12b      	bne.n	80064ae <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	4b18      	ldr	r3, [pc, #96]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006460:	f043 0304 	orr.w	r3, r3, #4
 8006464:	6413      	str	r3, [r2, #64]	; 0x40
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f003 0304 	and.w	r3, r3, #4
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]
 8006476:	4b11      	ldr	r3, [pc, #68]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	4a10      	ldr	r2, [pc, #64]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	6313      	str	r3, [r2, #48]	; 0x30
 8006482:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <HAL_TIM_Encoder_MspInit+0xec>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800648e:	23c0      	movs	r3, #192	; 0xc0
 8006490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006492:	2302      	movs	r3, #2
 8006494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006496:	2300      	movs	r3, #0
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800649a:	2300      	movs	r3, #0
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800649e:	2302      	movs	r3, #2
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064a2:	f107 031c 	add.w	r3, r7, #28
 80064a6:	4619      	mov	r1, r3
 80064a8:	4805      	ldr	r0, [pc, #20]	; (80064c0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80064aa:	f001 fd51 	bl	8007f50 <HAL_GPIO_Init>
}
 80064ae:	bf00      	nop
 80064b0:	3730      	adds	r7, #48	; 0x30
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40023800 	.word	0x40023800
 80064c0:	40020400 	.word	0x40020400
 80064c4:	40000800 	.word	0x40000800

080064c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIM_Base_MspInit+0x80>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d116      	bne.n	8006508 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	4b1b      	ldr	r3, [pc, #108]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 80064e4:	f043 0310 	orr.w	r3, r3, #16
 80064e8:	6413      	str	r3, [r2, #64]	; 0x40
 80064ea:	4b18      	ldr	r3, [pc, #96]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f003 0310 	and.w	r3, r3, #16
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80064f6:	2200      	movs	r2, #0
 80064f8:	2101      	movs	r1, #1
 80064fa:	2036      	movs	r0, #54	; 0x36
 80064fc:	f000 ff99 	bl	8007432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006500:	2036      	movs	r0, #54	; 0x36
 8006502:	f000 ffb2 	bl	800746a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006506:	e01a      	b.n	800653e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <HAL_TIM_Base_MspInit+0x88>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d115      	bne.n	800653e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006512:	2300      	movs	r3, #0
 8006514:	60bb      	str	r3, [r7, #8]
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	4a0c      	ldr	r2, [pc, #48]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 800651c:	f043 0320 	orr.w	r3, r3, #32
 8006520:	6413      	str	r3, [r2, #64]	; 0x40
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <HAL_TIM_Base_MspInit+0x84>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	f003 0320 	and.w	r3, r3, #32
 800652a:	60bb      	str	r3, [r7, #8]
 800652c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	2037      	movs	r0, #55	; 0x37
 8006534:	f000 ff7d 	bl	8007432 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006538:	2037      	movs	r0, #55	; 0x37
 800653a:	f000 ff96 	bl	800746a <HAL_NVIC_EnableIRQ>
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40001000 	.word	0x40001000
 800654c:	40023800 	.word	0x40023800
 8006550:	40001400 	.word	0x40001400

08006554 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b08a      	sub	sp, #40	; 0x28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800655c:	f107 0314 	add.w	r3, r7, #20
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a25      	ldr	r2, [pc, #148]	; (8006608 <HAL_TIM_MspPostInit+0xb4>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d11f      	bne.n	80065b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	4b24      	ldr	r3, [pc, #144]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 800657c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657e:	4a23      	ldr	r2, [pc, #140]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6313      	str	r3, [r2, #48]	; 0x30
 8006586:	4b21      	ldr	r3, [pc, #132]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006592:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006598:	2302      	movs	r3, #2
 800659a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659c:	2300      	movs	r3, #0
 800659e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a0:	2300      	movs	r3, #0
 80065a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80065a4:	2301      	movs	r3, #1
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4619      	mov	r1, r3
 80065ae:	4818      	ldr	r0, [pc, #96]	; (8006610 <HAL_TIM_MspPostInit+0xbc>)
 80065b0:	f001 fcce 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80065b4:	e023      	b.n	80065fe <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a16      	ldr	r2, [pc, #88]	; (8006614 <HAL_TIM_MspPostInit+0xc0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d11e      	bne.n	80065fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	4a10      	ldr	r2, [pc, #64]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 80065ca:	f043 0304 	orr.w	r3, r3, #4
 80065ce:	6313      	str	r3, [r2, #48]	; 0x30
 80065d0:	4b0e      	ldr	r3, [pc, #56]	; (800660c <HAL_TIM_MspPostInit+0xb8>)
 80065d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80065dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80065e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	2302      	movs	r3, #2
 80065e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ea:	2300      	movs	r3, #0
 80065ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80065ee:	2303      	movs	r3, #3
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065f2:	f107 0314 	add.w	r3, r7, #20
 80065f6:	4619      	mov	r1, r3
 80065f8:	4807      	ldr	r0, [pc, #28]	; (8006618 <HAL_TIM_MspPostInit+0xc4>)
 80065fa:	f001 fca9 	bl	8007f50 <HAL_GPIO_Init>
}
 80065fe:	bf00      	nop
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40023800 	.word	0x40023800
 8006610:	40020000 	.word	0x40020000
 8006614:	40010400 	.word	0x40010400
 8006618:	40020800 	.word	0x40020800

0800661c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	605a      	str	r2, [r3, #4]
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	60da      	str	r2, [r3, #12]
 8006632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a19      	ldr	r2, [pc, #100]	; (80066a0 <HAL_UART_MspInit+0x84>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d12c      	bne.n	8006698 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <HAL_UART_MspInit+0x88>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	4a17      	ldr	r2, [pc, #92]	; (80066a4 <HAL_UART_MspInit+0x88>)
 8006648:	f043 0310 	orr.w	r3, r3, #16
 800664c:	6453      	str	r3, [r2, #68]	; 0x44
 800664e:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_UART_MspInit+0x88>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	613b      	str	r3, [r7, #16]
 8006658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <HAL_UART_MspInit+0x88>)
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	4a10      	ldr	r2, [pc, #64]	; (80066a4 <HAL_UART_MspInit+0x88>)
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	6313      	str	r3, [r2, #48]	; 0x30
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <HAL_UART_MspInit+0x88>)
 800666c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006676:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800667a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800667c:	2302      	movs	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006684:	2303      	movs	r3, #3
 8006686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006688:	2307      	movs	r3, #7
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	4619      	mov	r1, r3
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <HAL_UART_MspInit+0x8c>)
 8006694:	f001 fc5c 	bl	8007f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006698:	bf00      	nop
 800669a:	3728      	adds	r7, #40	; 0x28
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40011000 	.word	0x40011000
 80066a4:	40023800 	.word	0x40023800
 80066a8:	40020000 	.word	0x40020000

080066ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066b0:	e7fe      	b.n	80066b0 <NMI_Handler+0x4>

080066b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066b2:	b480      	push	{r7}
 80066b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066b6:	e7fe      	b.n	80066b6 <HardFault_Handler+0x4>

080066b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066bc:	e7fe      	b.n	80066bc <MemManage_Handler+0x4>

080066be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066be:	b480      	push	{r7}
 80066c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066c2:	e7fe      	b.n	80066c2 <BusFault_Handler+0x4>

080066c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066c8:	e7fe      	b.n	80066c8 <UsageFault_Handler+0x4>

080066ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066ca:	b480      	push	{r7}
 80066cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066ce:	bf00      	nop
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066dc:	bf00      	nop
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066e6:	b480      	push	{r7}
 80066e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80066ea:	bf00      	nop
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80066f8:	f000 f98a 	bl	8006a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}

08006700 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006704:	4802      	ldr	r0, [pc, #8]	; (8006710 <TIM6_DAC_IRQHandler+0x10>)
 8006706:	f003 fa38 	bl	8009b7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800670a:	bf00      	nop
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	2001a984 	.word	0x2001a984

08006714 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006718:	4802      	ldr	r0, [pc, #8]	; (8006724 <TIM7_IRQHandler+0x10>)
 800671a:	f003 fa2e 	bl	8009b7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	2001aa6c 	.word	0x2001aa6c

08006728 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <DMA2_Stream0_IRQHandler+0x10>)
 800672e:	f000 ffbd 	bl	80076ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2001a924 	.word	0x2001a924

0800673c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <DMA2_Stream2_IRQHandler+0x10>)
 8006742:	f000 ffb3 	bl	80076ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2001aa0c 	.word	0x2001aa0c

08006750 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 800675a:	2300      	movs	r3, #0
 800675c:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b52      	cmp	r3, #82	; 0x52
 8006762:	d10a      	bne.n	800677a <getSwitchStatus+0x2a>
 8006764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006768:	480d      	ldr	r0, [pc, #52]	; (80067a0 <getSwitchStatus+0x50>)
 800676a:	f001 fd8b 	bl	8008284 <HAL_GPIO_ReadPin>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d102      	bne.n	800677a <getSwitchStatus+0x2a>
		ret = 1;
 8006774:	2301      	movs	r3, #1
 8006776:	81fb      	strh	r3, [r7, #14]
 8006778:	e00c      	b.n	8006794 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 800677a:	79fb      	ldrb	r3, [r7, #7]
 800677c:	2b4c      	cmp	r3, #76	; 0x4c
 800677e:	d109      	bne.n	8006794 <getSwitchStatus+0x44>
 8006780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006784:	4806      	ldr	r0, [pc, #24]	; (80067a0 <getSwitchStatus+0x50>)
 8006786:	f001 fd7d 	bl	8008284 <HAL_GPIO_ReadPin>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <getSwitchStatus+0x44>
		ret = 1;
 8006790:	2301      	movs	r3, #1
 8006792:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006794:	89fb      	ldrh	r3, [r7, #14]

}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40020000 	.word	0x40020000

080067a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e00a      	b.n	80067cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067b6:	f3af 8000 	nop.w
 80067ba:	4601      	mov	r1, r0
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	60ba      	str	r2, [r7, #8]
 80067c2:	b2ca      	uxtb	r2, r1
 80067c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	3301      	adds	r3, #1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	dbf0      	blt.n	80067b6 <_read+0x12>
	}

return len;
 80067d4:	687b      	ldr	r3, [r7, #4]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e009      	b.n	8006804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	60ba      	str	r2, [r7, #8]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fd fac5 	bl	8003d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	3301      	adds	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	dbf1      	blt.n	80067f0 <_write+0x12>
	}
	return len;
 800680c:	687b      	ldr	r3, [r7, #4]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_close>:

int _close(int file)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
	return -1;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800683e:	605a      	str	r2, [r3, #4]
	return 0;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <_isatty>:

int _isatty(int file)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
	return 1;
 8006856:	2301      	movs	r3, #1
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
	return 0;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b086      	sub	sp, #24
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <_sbrk+0x5c>)
 800688a:	4b15      	ldr	r3, [pc, #84]	; (80068e0 <_sbrk+0x60>)
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006894:	4b13      	ldr	r3, [pc, #76]	; (80068e4 <_sbrk+0x64>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800689c:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <_sbrk+0x64>)
 800689e:	4a12      	ldr	r2, [pc, #72]	; (80068e8 <_sbrk+0x68>)
 80068a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068a2:	4b10      	ldr	r3, [pc, #64]	; (80068e4 <_sbrk+0x64>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d207      	bcs.n	80068c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068b0:	f006 f942 	bl	800cb38 <__errno>
 80068b4:	4602      	mov	r2, r0
 80068b6:	230c      	movs	r3, #12
 80068b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	e009      	b.n	80068d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068c0:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <_sbrk+0x64>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <_sbrk+0x64>)
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <_sbrk+0x64>)
 80068d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068d2:	68fb      	ldr	r3, [r7, #12]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3718      	adds	r7, #24
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	20020000 	.word	0x20020000
 80068e0:	00000400 	.word	0x00000400
 80068e4:	2001a594 	.word	0x2001a594
 80068e8:	2001aae8 	.word	0x2001aae8

080068ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <SystemInit+0x28>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	4a07      	ldr	r2, [pc, #28]	; (8006914 <SystemInit+0x28>)
 80068f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006900:	4b04      	ldr	r3, [pc, #16]	; (8006914 <SystemInit+0x28>)
 8006902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006906:	609a      	str	r2, [r3, #8]
#endif
}
 8006908:	bf00      	nop
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	e000ed00 	.word	0xe000ed00

08006918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800691c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800691e:	e003      	b.n	8006928 <LoopCopyDataInit>

08006920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006926:	3104      	adds	r1, #4

08006928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006928:	480b      	ldr	r0, [pc, #44]	; (8006958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800692a:	4b0c      	ldr	r3, [pc, #48]	; (800695c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800692c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800692e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006930:	d3f6      	bcc.n	8006920 <CopyDataInit>
  ldr  r2, =_sbss
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006934:	e002      	b.n	800693c <LoopFillZerobss>

08006936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006938:	f842 3b04 	str.w	r3, [r2], #4

0800693c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800693e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006940:	d3f9      	bcc.n	8006936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006942:	f7ff ffd3 	bl	80068ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006946:	f006 f8fd 	bl	800cb44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800694a:	f7fd fa97 	bl	8003e7c <main>
  bx  lr    
 800694e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006954:	08011988 	.word	0x08011988
  ldr  r0, =_sdata
 8006958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800695c:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006960:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8006964:	2001aae4 	.word	0x2001aae4

08006968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006968:	e7fe      	b.n	8006968 <ADC_IRQHandler>
	...

0800696c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <HAL_Init+0x40>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <HAL_Init+0x40>)
 8006976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800697a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_Init+0x40>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <HAL_Init+0x40>)
 8006982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006988:	4b08      	ldr	r3, [pc, #32]	; (80069ac <HAL_Init+0x40>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a07      	ldr	r2, [pc, #28]	; (80069ac <HAL_Init+0x40>)
 800698e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006994:	2003      	movs	r0, #3
 8006996:	f000 fd41 	bl	800741c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800699a:	2000      	movs	r0, #0
 800699c:	f000 f808 	bl	80069b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069a0:	f7ff fb10 	bl	8005fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	40023c00 	.word	0x40023c00

080069b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <HAL_InitTick+0x54>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4b12      	ldr	r3, [pc, #72]	; (8006a08 <HAL_InitTick+0x58>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	4619      	mov	r1, r3
 80069c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fd59 	bl	8007486 <HAL_SYSTICK_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e00e      	b.n	80069fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b0f      	cmp	r3, #15
 80069e2:	d80a      	bhi.n	80069fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80069e4:	2200      	movs	r2, #0
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	f000 fd21 	bl	8007432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80069f0:	4a06      	ldr	r2, [pc, #24]	; (8006a0c <HAL_InitTick+0x5c>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
 80069f8:	e000      	b.n	80069fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20000034 	.word	0x20000034
 8006a08:	2000003c 	.word	0x2000003c
 8006a0c:	20000038 	.word	0x20000038

08006a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <HAL_IncTick+0x20>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <HAL_IncTick+0x24>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4413      	add	r3, r2
 8006a20:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <HAL_IncTick+0x24>)
 8006a22:	6013      	str	r3, [r2, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	2000003c 	.word	0x2000003c
 8006a34:	2001aabc 	.word	0x2001aabc

08006a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a3c:	4b03      	ldr	r3, [pc, #12]	; (8006a4c <HAL_GetTick+0x14>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	2001aabc 	.word	0x2001aabc

08006a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a58:	f7ff ffee 	bl	8006a38 <HAL_GetTick>
 8006a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d005      	beq.n	8006a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <HAL_Delay+0x40>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a76:	bf00      	nop
 8006a78:	f7ff ffde 	bl	8006a38 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d8f7      	bhi.n	8006a78 <HAL_Delay+0x28>
  {
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	2000003c 	.word	0x2000003c

08006a94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e033      	b.n	8006b12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d109      	bne.n	8006ac6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff faae 	bl	8006014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d118      	bne.n	8006b04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ada:	f023 0302 	bic.w	r3, r3, #2
 8006ade:	f043 0202 	orr.w	r2, r3, #2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa4a 	bl	8006f80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	f023 0303 	bic.w	r3, r3, #3
 8006afa:	f043 0201 	orr.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	641a      	str	r2, [r3, #64]	; 0x40
 8006b02:	e001      	b.n	8006b08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_ADC_Start_DMA+0x1e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e0cc      	b.n	8006cd4 <HAL_ADC_Start_DMA+0x1b8>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d018      	beq.n	8006b82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b60:	4b5e      	ldr	r3, [pc, #376]	; (8006cdc <HAL_ADC_Start_DMA+0x1c0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a5e      	ldr	r2, [pc, #376]	; (8006ce0 <HAL_ADC_Start_DMA+0x1c4>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	0c9a      	lsrs	r2, r3, #18
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	4413      	add	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006b74:	e002      	b.n	8006b7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f9      	bne.n	8006b76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	f040 80a0 	bne.w	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b9a:	f023 0301 	bic.w	r3, r3, #1
 8006b9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006bbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd0:	d106      	bne.n	8006be0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	f023 0206 	bic.w	r2, r3, #6
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8006bde:	e002      	b.n	8006be6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bee:	4b3d      	ldr	r3, [pc, #244]	; (8006ce4 <HAL_ADC_Start_DMA+0x1c8>)
 8006bf0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf6:	4a3c      	ldr	r2, [pc, #240]	; (8006ce8 <HAL_ADC_Start_DMA+0x1cc>)
 8006bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	; (8006cec <HAL_ADC_Start_DMA+0x1d0>)
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c06:	4a3a      	ldr	r2, [pc, #232]	; (8006cf0 <HAL_ADC_Start_DMA+0x1d4>)
 8006c08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006c12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006c22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	334c      	adds	r3, #76	; 0x4c
 8006c3e:	4619      	mov	r1, r3
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f000 fcda 	bl	80075fc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d12a      	bne.n	8006caa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a26      	ldr	r2, [pc, #152]	; (8006cf4 <HAL_ADC_Start_DMA+0x1d8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d015      	beq.n	8006c8a <HAL_ADC_Start_DMA+0x16e>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a25      	ldr	r2, [pc, #148]	; (8006cf8 <HAL_ADC_Start_DMA+0x1dc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d105      	bne.n	8006c74 <HAL_ADC_Start_DMA+0x158>
 8006c68:	4b1e      	ldr	r3, [pc, #120]	; (8006ce4 <HAL_ADC_Start_DMA+0x1c8>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 031f 	and.w	r3, r3, #31
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00a      	beq.n	8006c8a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <HAL_ADC_Start_DMA+0x1e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d129      	bne.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
 8006c7e:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <HAL_ADC_Start_DMA+0x1c8>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	2b0f      	cmp	r3, #15
 8006c88:	d823      	bhi.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11c      	bne.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689a      	ldr	r2, [r3, #8]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ca6:	609a      	str	r2, [r3, #8]
 8006ca8:	e013      	b.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a11      	ldr	r2, [pc, #68]	; (8006cf4 <HAL_ADC_Start_DMA+0x1d8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d10e      	bne.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d107      	bne.n	8006cd2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006cd0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20000034 	.word	0x20000034
 8006ce0:	431bde83 	.word	0x431bde83
 8006ce4:	40012300 	.word	0x40012300
 8006ce8:	08007179 	.word	0x08007179
 8006cec:	08007233 	.word	0x08007233
 8006cf0:	0800724f 	.word	0x0800724f
 8006cf4:	40012000 	.word	0x40012000
 8006cf8:	40012100 	.word	0x40012100
 8006cfc:	40012200 	.word	0x40012200

08006d00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_ADC_ConfigChannel+0x1c>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e105      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x228>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b09      	cmp	r3, #9
 8006d66:	d925      	bls.n	8006db4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68d9      	ldr	r1, [r3, #12]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	4613      	mov	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3b1e      	subs	r3, #30
 8006d7e:	2207      	movs	r2, #7
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	43da      	mvns	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	400a      	ands	r2, r1
 8006d8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68d9      	ldr	r1, [r3, #12]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4618      	mov	r0, r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	4403      	add	r3, r0
 8006da6:	3b1e      	subs	r3, #30
 8006da8:	409a      	lsls	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	60da      	str	r2, [r3, #12]
 8006db2:	e022      	b.n	8006dfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6919      	ldr	r1, [r3, #16]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2207      	movs	r2, #7
 8006dca:	fa02 f303 	lsl.w	r3, r2, r3
 8006dce:	43da      	mvns	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6919      	ldr	r1, [r3, #16]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4618      	mov	r0, r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4403      	add	r3, r0
 8006df0:	409a      	lsls	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b06      	cmp	r3, #6
 8006e00:	d824      	bhi.n	8006e4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	3b05      	subs	r3, #5
 8006e14:	221f      	movs	r2, #31
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	43da      	mvns	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	400a      	ands	r2, r1
 8006e22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	4618      	mov	r0, r3
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685a      	ldr	r2, [r3, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3b05      	subs	r3, #5
 8006e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	635a      	str	r2, [r3, #52]	; 0x34
 8006e4a:	e04c      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b0c      	cmp	r3, #12
 8006e52:	d824      	bhi.n	8006e9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	3b23      	subs	r3, #35	; 0x23
 8006e66:	221f      	movs	r2, #31
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	400a      	ands	r2, r1
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4618      	mov	r0, r3
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3b23      	subs	r3, #35	; 0x23
 8006e90:	fa00 f203 	lsl.w	r2, r0, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8006e9c:	e023      	b.n	8006ee6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	3b41      	subs	r3, #65	; 0x41
 8006eb0:	221f      	movs	r2, #31
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43da      	mvns	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	400a      	ands	r2, r1
 8006ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	4618      	mov	r0, r3
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	685a      	ldr	r2, [r3, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3b41      	subs	r3, #65	; 0x41
 8006eda:	fa00 f203 	lsl.w	r2, r0, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ee6:	4b22      	ldr	r3, [pc, #136]	; (8006f70 <HAL_ADC_ConfigChannel+0x234>)
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <HAL_ADC_ConfigChannel+0x238>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d109      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x1cc>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b12      	cmp	r3, #18
 8006efa:	d105      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a19      	ldr	r2, [pc, #100]	; (8006f74 <HAL_ADC_ConfigChannel+0x238>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d123      	bne.n	8006f5a <HAL_ADC_ConfigChannel+0x21e>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b10      	cmp	r3, #16
 8006f18:	d003      	beq.n	8006f22 <HAL_ADC_ConfigChannel+0x1e6>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b11      	cmp	r3, #17
 8006f20:	d11b      	bne.n	8006f5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d111      	bne.n	8006f5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_ADC_ConfigChannel+0x23c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <HAL_ADC_ConfigChannel+0x240>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	0c9a      	lsrs	r2, r3, #18
 8006f42:	4613      	mov	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f4c:	e002      	b.n	8006f54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f9      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	40012300 	.word	0x40012300
 8006f74:	40012000 	.word	0x40012000
 8006f78:	20000034 	.word	0x20000034
 8006f7c:	431bde83 	.word	0x431bde83

08006f80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f88:	4b79      	ldr	r3, [pc, #484]	; (8007170 <ADC_Init+0x1f0>)
 8006f8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6859      	ldr	r1, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	021a      	lsls	r2, r3, #8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6859      	ldr	r1, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6899      	ldr	r1, [r3, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	4a58      	ldr	r2, [pc, #352]	; (8007174 <ADC_Init+0x1f4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d022      	beq.n	800705e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6899      	ldr	r1, [r3, #8]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	689a      	ldr	r2, [r3, #8]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6899      	ldr	r1, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	430a      	orrs	r2, r1
 800705a:	609a      	str	r2, [r3, #8]
 800705c:	e00f      	b.n	800707e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800706c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689a      	ldr	r2, [r3, #8]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800707c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0202 	bic.w	r2, r2, #2
 800708c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7e1b      	ldrb	r3, [r3, #24]
 8007098:	005a      	lsls	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d01b      	beq.n	80070e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80070ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	3b01      	subs	r3, #1
 80070d8:	035a      	lsls	r2, r3, #13
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	e007      	b.n	80070f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007102:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	3b01      	subs	r3, #1
 8007110:	051a      	lsls	r2, r3, #20
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6899      	ldr	r1, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007136:	025a      	lsls	r2, r3, #9
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	689a      	ldr	r2, [r3, #8]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800714e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6899      	ldr	r1, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	029a      	lsls	r2, r3, #10
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	609a      	str	r2, [r3, #8]
}
 8007164:	bf00      	nop
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	40012300 	.word	0x40012300
 8007174:	0f000001 	.word	0x0f000001

08007178 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007184:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800718e:	2b00      	cmp	r3, #0
 8007190:	d13c      	bne.n	800720c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d12b      	bne.n	8007204 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d127      	bne.n	8007204 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d119      	bne.n	8007204 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0220 	bic.w	r2, r2, #32
 80071de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	f043 0201 	orr.w	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff fd7b 	bl	8006d00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800720a:	e00e      	b.n	800722a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f7ff fd85 	bl	8006d28 <HAL_ADC_ErrorCallback>
}
 800721e:	e004      	b.n	800722a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fd67 	bl	8006d14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007246:	bf00      	nop
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2240      	movs	r2, #64	; 0x40
 8007260:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007266:	f043 0204 	orr.w	r2, r3, #4
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fd5a 	bl	8006d28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <__NVIC_SetPriorityGrouping+0x44>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007298:	4013      	ands	r3, r2
 800729a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80072a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80072a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80072ae:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <__NVIC_SetPriorityGrouping+0x44>)
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	60d3      	str	r3, [r2, #12]
}
 80072b4:	bf00      	nop
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr
 80072c0:	e000ed00 	.word	0xe000ed00

080072c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072c8:	4b04      	ldr	r3, [pc, #16]	; (80072dc <__NVIC_GetPriorityGrouping+0x18>)
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	0a1b      	lsrs	r3, r3, #8
 80072ce:	f003 0307 	and.w	r3, r3, #7
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	e000ed00 	.word	0xe000ed00

080072e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db0b      	blt.n	800730a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f003 021f 	and.w	r2, r3, #31
 80072f8:	4907      	ldr	r1, [pc, #28]	; (8007318 <__NVIC_EnableIRQ+0x38>)
 80072fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fe:	095b      	lsrs	r3, r3, #5
 8007300:	2001      	movs	r0, #1
 8007302:	fa00 f202 	lsl.w	r2, r0, r2
 8007306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800730a:	bf00      	nop
 800730c:	370c      	adds	r7, #12
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	e000e100 	.word	0xe000e100

0800731c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
 8007322:	4603      	mov	r3, r0
 8007324:	6039      	str	r1, [r7, #0]
 8007326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800732c:	2b00      	cmp	r3, #0
 800732e:	db0a      	blt.n	8007346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	b2da      	uxtb	r2, r3
 8007334:	490c      	ldr	r1, [pc, #48]	; (8007368 <__NVIC_SetPriority+0x4c>)
 8007336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733a:	0112      	lsls	r2, r2, #4
 800733c:	b2d2      	uxtb	r2, r2
 800733e:	440b      	add	r3, r1
 8007340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007344:	e00a      	b.n	800735c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	b2da      	uxtb	r2, r3
 800734a:	4908      	ldr	r1, [pc, #32]	; (800736c <__NVIC_SetPriority+0x50>)
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	f003 030f 	and.w	r3, r3, #15
 8007352:	3b04      	subs	r3, #4
 8007354:	0112      	lsls	r2, r2, #4
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	440b      	add	r3, r1
 800735a:	761a      	strb	r2, [r3, #24]
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000e100 	.word	0xe000e100
 800736c:	e000ed00 	.word	0xe000ed00

08007370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007370:	b480      	push	{r7}
 8007372:	b089      	sub	sp, #36	; 0x24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f1c3 0307 	rsb	r3, r3, #7
 800738a:	2b04      	cmp	r3, #4
 800738c:	bf28      	it	cs
 800738e:	2304      	movcs	r3, #4
 8007390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	3304      	adds	r3, #4
 8007396:	2b06      	cmp	r3, #6
 8007398:	d902      	bls.n	80073a0 <NVIC_EncodePriority+0x30>
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	3b03      	subs	r3, #3
 800739e:	e000      	b.n	80073a2 <NVIC_EncodePriority+0x32>
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073a4:	f04f 32ff 	mov.w	r2, #4294967295
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	fa02 f303 	lsl.w	r3, r2, r3
 80073ae:	43da      	mvns	r2, r3
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	401a      	ands	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073b8:	f04f 31ff 	mov.w	r1, #4294967295
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	43d9      	mvns	r1, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073c8:	4313      	orrs	r3, r2
         );
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3724      	adds	r7, #36	; 0x24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073e8:	d301      	bcc.n	80073ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073ea:	2301      	movs	r3, #1
 80073ec:	e00f      	b.n	800740e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073ee:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <SysTick_Config+0x40>)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073f6:	210f      	movs	r1, #15
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	f7ff ff8e 	bl	800731c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007400:	4b05      	ldr	r3, [pc, #20]	; (8007418 <SysTick_Config+0x40>)
 8007402:	2200      	movs	r2, #0
 8007404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007406:	4b04      	ldr	r3, [pc, #16]	; (8007418 <SysTick_Config+0x40>)
 8007408:	2207      	movs	r2, #7
 800740a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	e000e010 	.word	0xe000e010

0800741c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff ff29 	bl	800727c <__NVIC_SetPriorityGrouping>
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007432:	b580      	push	{r7, lr}
 8007434:	b086      	sub	sp, #24
 8007436:	af00      	add	r7, sp, #0
 8007438:	4603      	mov	r3, r0
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007440:	2300      	movs	r3, #0
 8007442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007444:	f7ff ff3e 	bl	80072c4 <__NVIC_GetPriorityGrouping>
 8007448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	68b9      	ldr	r1, [r7, #8]
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f7ff ff8e 	bl	8007370 <NVIC_EncodePriority>
 8007454:	4602      	mov	r2, r0
 8007456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745a:	4611      	mov	r1, r2
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff ff5d 	bl	800731c <__NVIC_SetPriority>
}
 8007462:	bf00      	nop
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	4603      	mov	r3, r0
 8007472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff ff31 	bl	80072e0 <__NVIC_EnableIRQ>
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff ffa2 	bl	80073d8 <SysTick_Config>
 8007494:	4603      	mov	r3, r0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80074ac:	f7ff fac4 	bl	8006a38 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e099      	b.n	80075f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074dc:	e00f      	b.n	80074fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80074de:	f7ff faab 	bl	8006a38 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b05      	cmp	r3, #5
 80074ea:	d908      	bls.n	80074fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2203      	movs	r2, #3
 80074f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e078      	b.n	80075f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e8      	bne.n	80074de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4b38      	ldr	r3, [pc, #224]	; (80075f8 <HAL_DMA_Init+0x158>)
 8007518:	4013      	ands	r3, r2
 800751a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800752a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	2b04      	cmp	r3, #4
 8007556:	d107      	bne.n	8007568 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	4313      	orrs	r3, r2
 8007562:	697a      	ldr	r2, [r7, #20]
 8007564:	4313      	orrs	r3, r2
 8007566:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b04      	cmp	r3, #4
 8007590:	d117      	bne.n	80075c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	4313      	orrs	r3, r2
 800759a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00e      	beq.n	80075c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa6f 	bl	8007a88 <DMA_CheckFifoParam>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d008      	beq.n	80075c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80075be:	2301      	movs	r3, #1
 80075c0:	e016      	b.n	80075f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fa26 	bl	8007a1c <DMA_CalcBaseAndBitshift>
 80075d0:	4603      	mov	r3, r0
 80075d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d8:	223f      	movs	r2, #63	; 0x3f
 80075da:	409a      	lsls	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	f010803f 	.word	0xf010803f

080075fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_DMA_Start_IT+0x26>
 800761e:	2302      	movs	r3, #2
 8007620:	e040      	b.n	80076a4 <HAL_DMA_Start_IT+0xa8>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b01      	cmp	r3, #1
 8007634:	d12f      	bne.n	8007696 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f9b8 	bl	80079c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007654:	223f      	movs	r2, #63	; 0x3f
 8007656:	409a      	lsls	r2, r3
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0216 	orr.w	r2, r2, #22
 800766a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d007      	beq.n	8007684 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0208 	orr.w	r2, r2, #8
 8007682:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f042 0201 	orr.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e005      	b.n	80076a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800769e:	2302      	movs	r3, #2
 80076a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076b8:	4b92      	ldr	r3, [pc, #584]	; (8007904 <HAL_DMA_IRQHandler+0x258>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a92      	ldr	r2, [pc, #584]	; (8007908 <HAL_DMA_IRQHandler+0x25c>)
 80076be:	fba2 2303 	umull	r2, r3, r2, r3
 80076c2:	0a9b      	lsrs	r3, r3, #10
 80076c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d6:	2208      	movs	r2, #8
 80076d8:	409a      	lsls	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	4013      	ands	r3, r2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01a      	beq.n	8007718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d013      	beq.n	8007718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0204 	bic.w	r2, r2, #4
 80076fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007704:	2208      	movs	r2, #8
 8007706:	409a      	lsls	r2, r3
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007710:	f043 0201 	orr.w	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800771c:	2201      	movs	r2, #1
 800771e:	409a      	lsls	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4013      	ands	r3, r2
 8007724:	2b00      	cmp	r3, #0
 8007726:	d012      	beq.n	800774e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800773a:	2201      	movs	r2, #1
 800773c:	409a      	lsls	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007752:	2204      	movs	r2, #4
 8007754:	409a      	lsls	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d012      	beq.n	8007784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007770:	2204      	movs	r2, #4
 8007772:	409a      	lsls	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777c:	f043 0204 	orr.w	r2, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007788:	2210      	movs	r2, #16
 800778a:	409a      	lsls	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d043      	beq.n	800781c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0308 	and.w	r3, r3, #8
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d03c      	beq.n	800781c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a6:	2210      	movs	r2, #16
 80077a8:	409a      	lsls	r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d018      	beq.n	80077ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d108      	bne.n	80077dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d024      	beq.n	800781c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
 80077da:	e01f      	b.n	800781c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01b      	beq.n	800781c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	4798      	blx	r3
 80077ec:	e016      	b.n	800781c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d107      	bne.n	800780c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 0208 	bic.w	r2, r2, #8
 800780a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	2220      	movs	r2, #32
 8007822:	409a      	lsls	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4013      	ands	r3, r2
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 808e 	beq.w	800794a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 8086 	beq.w	800794a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	2220      	movs	r2, #32
 8007844:	409a      	lsls	r2, r3
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b05      	cmp	r3, #5
 8007854:	d136      	bne.n	80078c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0216 	bic.w	r2, r2, #22
 8007864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	695a      	ldr	r2, [r3, #20]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787a:	2b00      	cmp	r3, #0
 800787c:	d103      	bne.n	8007886 <HAL_DMA_IRQHandler+0x1da>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007882:	2b00      	cmp	r3, #0
 8007884:	d007      	beq.n	8007896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0208 	bic.w	r2, r2, #8
 8007894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789a:	223f      	movs	r2, #63	; 0x3f
 800789c:	409a      	lsls	r2, r3
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d07d      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
        }
        return;
 80078c2:	e078      	b.n	80079b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d01c      	beq.n	800790c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d108      	bne.n	80078f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d030      	beq.n	800794a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	4798      	blx	r3
 80078f0:	e02b      	b.n	800794a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d027      	beq.n	800794a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	e022      	b.n	800794a <HAL_DMA_IRQHandler+0x29e>
 8007904:	20000034 	.word	0x20000034
 8007908:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10f      	bne.n	800793a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0210 	bic.w	r2, r2, #16
 8007928:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d003      	beq.n	800794a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	2b00      	cmp	r3, #0
 8007950:	d032      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d022      	beq.n	80079a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2205      	movs	r2, #5
 8007962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0201 	bic.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	60bb      	str	r3, [r7, #8]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	429a      	cmp	r2, r3
 8007980:	d307      	bcc.n	8007992 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1f2      	bne.n	8007976 <HAL_DMA_IRQHandler+0x2ca>
 8007990:	e000      	b.n	8007994 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007992:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	4798      	blx	r3
 80079b4:	e000      	b.n	80079b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80079b6:	bf00      	nop
    }
  }
}
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop

080079c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	607a      	str	r2, [r7, #4]
 80079cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	d108      	bne.n	8007a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80079fe:	e007      	b.n	8007a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	60da      	str	r2, [r3, #12]
}
 8007a10:	bf00      	nop
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	3b10      	subs	r3, #16
 8007a2c:	4a14      	ldr	r2, [pc, #80]	; (8007a80 <DMA_CalcBaseAndBitshift+0x64>)
 8007a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a32:	091b      	lsrs	r3, r3, #4
 8007a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a36:	4a13      	ldr	r2, [pc, #76]	; (8007a84 <DMA_CalcBaseAndBitshift+0x68>)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d909      	bls.n	8007a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8007a5c:	e007      	b.n	8007a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr
 8007a7e:	bf00      	nop
 8007a80:	aaaaaaab 	.word	0xaaaaaaab
 8007a84:	080110a8 	.word	0x080110a8

08007a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d11f      	bne.n	8007ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d855      	bhi.n	8007b54 <DMA_CheckFifoParam+0xcc>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <DMA_CheckFifoParam+0x28>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ac1 	.word	0x08007ac1
 8007ab4:	08007ad3 	.word	0x08007ad3
 8007ab8:	08007ac1 	.word	0x08007ac1
 8007abc:	08007b55 	.word	0x08007b55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d045      	beq.n	8007b58 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ad0:	e042      	b.n	8007b58 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ada:	d13f      	bne.n	8007b5c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ae0:	e03c      	b.n	8007b5c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	d121      	bne.n	8007b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d836      	bhi.n	8007b60 <DMA_CheckFifoParam+0xd8>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <DMA_CheckFifoParam+0x70>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b0f 	.word	0x08007b0f
 8007b00:	08007b09 	.word	0x08007b09
 8007b04:	08007b21 	.word	0x08007b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e02f      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d024      	beq.n	8007b64 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b1e:	e021      	b.n	8007b64 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b28:	d11e      	bne.n	8007b68 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b2e:	e01b      	b.n	8007b68 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d902      	bls.n	8007b3c <DMA_CheckFifoParam+0xb4>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d003      	beq.n	8007b42 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b3a:	e018      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b40:	e015      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00e      	beq.n	8007b6c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
      break;
 8007b52:	e00b      	b.n	8007b6c <DMA_CheckFifoParam+0xe4>
      break;
 8007b54:	bf00      	nop
 8007b56:	e00a      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;
 8007b58:	bf00      	nop
 8007b5a:	e008      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;
 8007b5c:	bf00      	nop
 8007b5e:	e006      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;
 8007b60:	bf00      	nop
 8007b62:	e004      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;
 8007b64:	bf00      	nop
 8007b66:	e002      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;   
 8007b68:	bf00      	nop
 8007b6a:	e000      	b.n	8007b6e <DMA_CheckFifoParam+0xe6>
      break;
 8007b6c:	bf00      	nop
    }
  } 
  
  return status; 
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <HAL_FLASH_Unlock+0x38>)
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	da0b      	bge.n	8007ba6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b8e:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <HAL_FLASH_Unlock+0x38>)
 8007b90:	4a09      	ldr	r2, [pc, #36]	; (8007bb8 <HAL_FLASH_Unlock+0x3c>)
 8007b92:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <HAL_FLASH_Unlock+0x38>)
 8007b96:	4a09      	ldr	r2, [pc, #36]	; (8007bbc <HAL_FLASH_Unlock+0x40>)
 8007b98:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <HAL_FLASH_Unlock+0x38>)
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da01      	bge.n	8007ba6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	40023c00 	.word	0x40023c00
 8007bb8:	45670123 	.word	0x45670123
 8007bbc:	cdef89ab 	.word	0xcdef89ab

08007bc0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <HAL_FLASH_Lock+0x1c>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <HAL_FLASH_Lock+0x1c>)
 8007bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40023c00 	.word	0x40023c00

08007be0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <FLASH_WaitForLastOperation+0x78>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007bf2:	f7fe ff21 	bl	8006a38 <HAL_GetTick>
 8007bf6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007bf8:	e010      	b.n	8007c1c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c00:	d00c      	beq.n	8007c1c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d007      	beq.n	8007c18 <FLASH_WaitForLastOperation+0x38>
 8007c08:	f7fe ff16 	bl	8006a38 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d201      	bcs.n	8007c1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e019      	b.n	8007c50 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <FLASH_WaitForLastOperation+0x7c>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e8      	bne.n	8007bfa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <FLASH_WaitForLastOperation+0x7c>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <FLASH_WaitForLastOperation+0x7c>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007c3a:	4b08      	ldr	r3, [pc, #32]	; (8007c5c <FLASH_WaitForLastOperation+0x7c>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007c46:	f000 f80b 	bl	8007c60 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
  
}  
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	2001aac0 	.word	0x2001aac0
 8007c5c:	40023c00 	.word	0x40023c00

08007c60 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007c64:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0310 	and.w	r3, r3, #16
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d008      	beq.n	8007c82 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c70:	4b25      	ldr	r3, [pc, #148]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007c72:	69db      	ldr	r3, [r3, #28]
 8007c74:	f043 0310 	orr.w	r3, r3, #16
 8007c78:	4a23      	ldr	r2, [pc, #140]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007c7a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007c7c:	4b21      	ldr	r3, [pc, #132]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007c7e:	2210      	movs	r2, #16
 8007c80:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007c82:	4b20      	ldr	r3, [pc, #128]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007c8e:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f043 0308 	orr.w	r3, r3, #8
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007c98:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c9a:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007ca0:	4b18      	ldr	r3, [pc, #96]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d008      	beq.n	8007cbe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	f043 0304 	orr.w	r3, r3, #4
 8007cb4:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007cb6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007cb8:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007cba:	2240      	movs	r2, #64	; 0x40
 8007cbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007cca:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f043 0302 	orr.w	r3, r3, #2
 8007cd2:	4a0d      	ldr	r2, [pc, #52]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007cd4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007cd8:	2280      	movs	r2, #128	; 0x80
 8007cda:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007ce8:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007cea:	69db      	ldr	r3, [r3, #28]
 8007cec:	f043 0320 	orr.w	r3, r3, #32
 8007cf0:	4a05      	ldr	r2, [pc, #20]	; (8007d08 <FLASH_SetErrorCode+0xa8>)
 8007cf2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007cf4:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <FLASH_SetErrorCode+0xa4>)
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	60da      	str	r2, [r3, #12]
  }
}
 8007cfa:	bf00      	nop
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40023c00 	.word	0x40023c00
 8007d08:	2001aac0 	.word	0x2001aac0

08007d0c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d1e:	4b31      	ldr	r3, [pc, #196]	; (8007de4 <HAL_FLASHEx_Erase+0xd8>)
 8007d20:	7e1b      	ldrb	r3, [r3, #24]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d101      	bne.n	8007d2a <HAL_FLASHEx_Erase+0x1e>
 8007d26:	2302      	movs	r3, #2
 8007d28:	e058      	b.n	8007ddc <HAL_FLASHEx_Erase+0xd0>
 8007d2a:	4b2e      	ldr	r3, [pc, #184]	; (8007de4 <HAL_FLASHEx_Erase+0xd8>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d30:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d34:	f7ff ff54 	bl	8007be0 <FLASH_WaitForLastOperation>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d148      	bne.n	8007dd4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d115      	bne.n	8007d7e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f000 f844 	bl	8007dec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d68:	f7ff ff3a 	bl	8007be0 <FLASH_WaitForLastOperation>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007d70:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007d76:	f023 0304 	bic.w	r3, r3, #4
 8007d7a:	6113      	str	r3, [r2, #16]
 8007d7c:	e028      	b.n	8007dd0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	60bb      	str	r3, [r7, #8]
 8007d84:	e01c      	b.n	8007dc0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68b8      	ldr	r0, [r7, #8]
 8007d90:	f000 f850 	bl	8007e34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d98:	f7ff ff22 	bl	8007be0 <FLASH_WaitForLastOperation>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007da0:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	4a10      	ldr	r2, [pc, #64]	; (8007de8 <HAL_FLASHEx_Erase+0xdc>)
 8007da6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007daa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	601a      	str	r2, [r3, #0]
          break;
 8007db8:	e00a      	b.n	8007dd0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	60bb      	str	r3, [r7, #8]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	4413      	add	r3, r2
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d3da      	bcc.n	8007d86 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007dd0:	f000 f878 	bl	8007ec4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <HAL_FLASHEx_Erase+0xd8>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	761a      	strb	r2, [r3, #24]

  return status;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	2001aac0 	.word	0x2001aac0
 8007de8:	40023c00 	.word	0x40023c00

08007dec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	4603      	mov	r3, r0
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007df8:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <FLASH_MassErase+0x44>)
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	4a0c      	ldr	r2, [pc, #48]	; (8007e30 <FLASH_MassErase+0x44>)
 8007dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <FLASH_MassErase+0x44>)
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	4a09      	ldr	r2, [pc, #36]	; (8007e30 <FLASH_MassErase+0x44>)
 8007e0a:	f043 0304 	orr.w	r3, r3, #4
 8007e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <FLASH_MassErase+0x44>)
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	4a05      	ldr	r2, [pc, #20]	; (8007e30 <FLASH_MassErase+0x44>)
 8007e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e20:	6113      	str	r3, [r2, #16]
}
 8007e22:	bf00      	nop
 8007e24:	370c      	adds	r7, #12
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40023c00 	.word	0x40023c00

08007e34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
 8007e4e:	e010      	b.n	8007e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d103      	bne.n	8007e5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e5a:	60fb      	str	r3, [r7, #12]
 8007e5c:	e009      	b.n	8007e72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d103      	bne.n	8007e6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e002      	b.n	8007e72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007e6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e72:	4b13      	ldr	r3, [pc, #76]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	4a12      	ldr	r2, [pc, #72]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007e7e:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e80:	691a      	ldr	r2, [r3, #16]
 8007e82:	490f      	ldr	r1, [pc, #60]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007e8a:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	4a0c      	ldr	r2, [pc, #48]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e96:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	4a07      	ldr	r2, [pc, #28]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007ea2:	f043 0302 	orr.w	r3, r3, #2
 8007ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007ea8:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	4a04      	ldr	r2, [pc, #16]	; (8007ec0 <FLASH_Erase_Sector+0x8c>)
 8007eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb2:	6113      	str	r3, [r2, #16]
}
 8007eb4:	bf00      	nop
 8007eb6:	3714      	adds	r7, #20
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	40023c00 	.word	0x40023c00

08007ec4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007ec8:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d017      	beq.n	8007f04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a1c      	ldr	r2, [pc, #112]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007eda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ede:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007ee0:	4b1a      	ldr	r3, [pc, #104]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a19      	ldr	r2, [pc, #100]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a16      	ldr	r2, [pc, #88]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ef6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007ef8:	4b14      	ldr	r3, [pc, #80]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a13      	ldr	r2, [pc, #76]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007f04:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007f10:	4b0e      	ldr	r3, [pc, #56]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a0d      	ldr	r2, [pc, #52]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a07      	ldr	r2, [pc, #28]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a04      	ldr	r2, [pc, #16]	; (8007f4c <FLASH_FlushCaches+0x88>)
 8007f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f3e:	6013      	str	r3, [r2, #0]
  }
}
 8007f40:	bf00      	nop
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40023c00 	.word	0x40023c00

08007f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b089      	sub	sp, #36	; 0x24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
 8007f6a:	e16b      	b.n	8008244 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	f040 815a 	bne.w	800823e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d00b      	beq.n	8007faa <HAL_GPIO_Init+0x5a>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d007      	beq.n	8007faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f9e:	2b11      	cmp	r3, #17
 8007fa0:	d003      	beq.n	8007faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b12      	cmp	r3, #18
 8007fa8:	d130      	bne.n	800800c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43db      	mvns	r3, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69ba      	ldr	r2, [r7, #24]
 8007fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	4013      	ands	r3, r2
 8007fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	f003 0201 	and.w	r2, r3, #1
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	4313      	orrs	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	2203      	movs	r2, #3
 8008018:	fa02 f303 	lsl.w	r3, r2, r3
 800801c:	43db      	mvns	r3, r3
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4013      	ands	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	4313      	orrs	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d003      	beq.n	800804c <HAL_GPIO_Init+0xfc>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2b12      	cmp	r3, #18
 800804a:	d123      	bne.n	8008094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	08da      	lsrs	r2, r3, #3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3208      	adds	r2, #8
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f003 0307 	and.w	r3, r3, #7
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	220f      	movs	r2, #15
 8008064:	fa02 f303 	lsl.w	r3, r2, r3
 8008068:	43db      	mvns	r3, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4013      	ands	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	f003 0307 	and.w	r3, r3, #7
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	4313      	orrs	r3, r2
 8008084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	08da      	lsrs	r2, r3, #3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3208      	adds	r2, #8
 800808e:	69b9      	ldr	r1, [r7, #24]
 8008090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	2203      	movs	r2, #3
 80080a0:	fa02 f303 	lsl.w	r3, r2, r3
 80080a4:	43db      	mvns	r3, r3
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	4013      	ands	r3, r2
 80080aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f003 0203 	and.w	r2, r3, #3
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	fa02 f303 	lsl.w	r3, r2, r3
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	4313      	orrs	r3, r2
 80080c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f000 80b4 	beq.w	800823e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080d6:	2300      	movs	r3, #0
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	4b5f      	ldr	r3, [pc, #380]	; (8008258 <HAL_GPIO_Init+0x308>)
 80080dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080de:	4a5e      	ldr	r2, [pc, #376]	; (8008258 <HAL_GPIO_Init+0x308>)
 80080e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080e4:	6453      	str	r3, [r2, #68]	; 0x44
 80080e6:	4b5c      	ldr	r3, [pc, #368]	; (8008258 <HAL_GPIO_Init+0x308>)
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080f2:	4a5a      	ldr	r2, [pc, #360]	; (800825c <HAL_GPIO_Init+0x30c>)
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	089b      	lsrs	r3, r3, #2
 80080f8:	3302      	adds	r3, #2
 80080fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	f003 0303 	and.w	r3, r3, #3
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	220f      	movs	r2, #15
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	43db      	mvns	r3, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4013      	ands	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a51      	ldr	r2, [pc, #324]	; (8008260 <HAL_GPIO_Init+0x310>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d02b      	beq.n	8008176 <HAL_GPIO_Init+0x226>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a50      	ldr	r2, [pc, #320]	; (8008264 <HAL_GPIO_Init+0x314>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d025      	beq.n	8008172 <HAL_GPIO_Init+0x222>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a4f      	ldr	r2, [pc, #316]	; (8008268 <HAL_GPIO_Init+0x318>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01f      	beq.n	800816e <HAL_GPIO_Init+0x21e>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a4e      	ldr	r2, [pc, #312]	; (800826c <HAL_GPIO_Init+0x31c>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d019      	beq.n	800816a <HAL_GPIO_Init+0x21a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a4d      	ldr	r2, [pc, #308]	; (8008270 <HAL_GPIO_Init+0x320>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_GPIO_Init+0x216>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a4c      	ldr	r2, [pc, #304]	; (8008274 <HAL_GPIO_Init+0x324>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00d      	beq.n	8008162 <HAL_GPIO_Init+0x212>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a4b      	ldr	r2, [pc, #300]	; (8008278 <HAL_GPIO_Init+0x328>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d007      	beq.n	800815e <HAL_GPIO_Init+0x20e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a4a      	ldr	r2, [pc, #296]	; (800827c <HAL_GPIO_Init+0x32c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d101      	bne.n	800815a <HAL_GPIO_Init+0x20a>
 8008156:	2307      	movs	r3, #7
 8008158:	e00e      	b.n	8008178 <HAL_GPIO_Init+0x228>
 800815a:	2308      	movs	r3, #8
 800815c:	e00c      	b.n	8008178 <HAL_GPIO_Init+0x228>
 800815e:	2306      	movs	r3, #6
 8008160:	e00a      	b.n	8008178 <HAL_GPIO_Init+0x228>
 8008162:	2305      	movs	r3, #5
 8008164:	e008      	b.n	8008178 <HAL_GPIO_Init+0x228>
 8008166:	2304      	movs	r3, #4
 8008168:	e006      	b.n	8008178 <HAL_GPIO_Init+0x228>
 800816a:	2303      	movs	r3, #3
 800816c:	e004      	b.n	8008178 <HAL_GPIO_Init+0x228>
 800816e:	2302      	movs	r3, #2
 8008170:	e002      	b.n	8008178 <HAL_GPIO_Init+0x228>
 8008172:	2301      	movs	r3, #1
 8008174:	e000      	b.n	8008178 <HAL_GPIO_Init+0x228>
 8008176:	2300      	movs	r3, #0
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	f002 0203 	and.w	r2, r2, #3
 800817e:	0092      	lsls	r2, r2, #2
 8008180:	4093      	lsls	r3, r2
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008188:	4934      	ldr	r1, [pc, #208]	; (800825c <HAL_GPIO_Init+0x30c>)
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	089b      	lsrs	r3, r3, #2
 800818e:	3302      	adds	r3, #2
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008196:	4b3a      	ldr	r3, [pc, #232]	; (8008280 <HAL_GPIO_Init+0x330>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	43db      	mvns	r3, r3
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	4013      	ands	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081ba:	4a31      	ldr	r2, [pc, #196]	; (8008280 <HAL_GPIO_Init+0x330>)
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80081c0:	4b2f      	ldr	r3, [pc, #188]	; (8008280 <HAL_GPIO_Init+0x330>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	43db      	mvns	r3, r3
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	4013      	ands	r3, r2
 80081ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081e4:	4a26      	ldr	r2, [pc, #152]	; (8008280 <HAL_GPIO_Init+0x330>)
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80081ea:	4b25      	ldr	r3, [pc, #148]	; (8008280 <HAL_GPIO_Init+0x330>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	4013      	ands	r3, r2
 80081f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800820e:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_GPIO_Init+0x330>)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008214:	4b1a      	ldr	r3, [pc, #104]	; (8008280 <HAL_GPIO_Init+0x330>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	43db      	mvns	r3, r3
 800821e:	69ba      	ldr	r2, [r7, #24]
 8008220:	4013      	ands	r3, r2
 8008222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4313      	orrs	r3, r2
 8008236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008238:	4a11      	ldr	r2, [pc, #68]	; (8008280 <HAL_GPIO_Init+0x330>)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	3301      	adds	r3, #1
 8008242:	61fb      	str	r3, [r7, #28]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	f67f ae90 	bls.w	8007f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800824c:	bf00      	nop
 800824e:	3724      	adds	r7, #36	; 0x24
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	40023800 	.word	0x40023800
 800825c:	40013800 	.word	0x40013800
 8008260:	40020000 	.word	0x40020000
 8008264:	40020400 	.word	0x40020400
 8008268:	40020800 	.word	0x40020800
 800826c:	40020c00 	.word	0x40020c00
 8008270:	40021000 	.word	0x40021000
 8008274:	40021400 	.word	0x40021400
 8008278:	40021800 	.word	0x40021800
 800827c:	40021c00 	.word	0x40021c00
 8008280:	40013c00 	.word	0x40013c00

08008284 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	887b      	ldrh	r3, [r7, #2]
 8008296:	4013      	ands	r3, r2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	e001      	b.n	80082a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80082a2:	2300      	movs	r3, #0
 80082a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	807b      	strh	r3, [r7, #2]
 80082c0:	4613      	mov	r3, r2
 80082c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80082c4:	787b      	ldrb	r3, [r7, #1]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082ca:	887a      	ldrh	r2, [r7, #2]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80082d0:	e003      	b.n	80082da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80082d2:	887b      	ldrh	r3, [r7, #2]
 80082d4:	041a      	lsls	r2, r3, #16
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	619a      	str	r2, [r3, #24]
}
 80082da:	bf00      	nop
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e11f      	b.n	800853a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d106      	bne.n	8008314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7fd ff96 	bl	8006240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2224      	movs	r2, #36	; 0x24
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f022 0201 	bic.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800833a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800834a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800834c:	f000 fd18 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 8008350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	4a7b      	ldr	r2, [pc, #492]	; (8008544 <HAL_I2C_Init+0x25c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d807      	bhi.n	800836c <HAL_I2C_Init+0x84>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4a7a      	ldr	r2, [pc, #488]	; (8008548 <HAL_I2C_Init+0x260>)
 8008360:	4293      	cmp	r3, r2
 8008362:	bf94      	ite	ls
 8008364:	2301      	movls	r3, #1
 8008366:	2300      	movhi	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	e006      	b.n	800837a <HAL_I2C_Init+0x92>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4a77      	ldr	r2, [pc, #476]	; (800854c <HAL_I2C_Init+0x264>)
 8008370:	4293      	cmp	r3, r2
 8008372:	bf94      	ite	ls
 8008374:	2301      	movls	r3, #1
 8008376:	2300      	movhi	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e0db      	b.n	800853a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4a72      	ldr	r2, [pc, #456]	; (8008550 <HAL_I2C_Init+0x268>)
 8008386:	fba2 2303 	umull	r2, r3, r2, r3
 800838a:	0c9b      	lsrs	r3, r3, #18
 800838c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	430a      	orrs	r2, r1
 80083a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a64      	ldr	r2, [pc, #400]	; (8008544 <HAL_I2C_Init+0x25c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d802      	bhi.n	80083bc <HAL_I2C_Init+0xd4>
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	3301      	adds	r3, #1
 80083ba:	e009      	b.n	80083d0 <HAL_I2C_Init+0xe8>
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80083c2:	fb02 f303 	mul.w	r3, r2, r3
 80083c6:	4a63      	ldr	r2, [pc, #396]	; (8008554 <HAL_I2C_Init+0x26c>)
 80083c8:	fba2 2303 	umull	r2, r3, r2, r3
 80083cc:	099b      	lsrs	r3, r3, #6
 80083ce:	3301      	adds	r3, #1
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6812      	ldr	r2, [r2, #0]
 80083d4:	430b      	orrs	r3, r1
 80083d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80083e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	4956      	ldr	r1, [pc, #344]	; (8008544 <HAL_I2C_Init+0x25c>)
 80083ec:	428b      	cmp	r3, r1
 80083ee:	d80d      	bhi.n	800840c <HAL_I2C_Init+0x124>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	1e59      	subs	r1, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80083fe:	3301      	adds	r3, #1
 8008400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008404:	2b04      	cmp	r3, #4
 8008406:	bf38      	it	cc
 8008408:	2304      	movcc	r3, #4
 800840a:	e04f      	b.n	80084ac <HAL_I2C_Init+0x1c4>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d111      	bne.n	8008438 <HAL_I2C_Init+0x150>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	1e58      	subs	r0, r3, #1
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6859      	ldr	r1, [r3, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	440b      	add	r3, r1
 8008422:	fbb0 f3f3 	udiv	r3, r0, r3
 8008426:	3301      	adds	r3, #1
 8008428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800842c:	2b00      	cmp	r3, #0
 800842e:	bf0c      	ite	eq
 8008430:	2301      	moveq	r3, #1
 8008432:	2300      	movne	r3, #0
 8008434:	b2db      	uxtb	r3, r3
 8008436:	e012      	b.n	800845e <HAL_I2C_Init+0x176>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	1e58      	subs	r0, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6859      	ldr	r1, [r3, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	0099      	lsls	r1, r3, #2
 8008448:	440b      	add	r3, r1
 800844a:	fbb0 f3f3 	udiv	r3, r0, r3
 800844e:	3301      	adds	r3, #1
 8008450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008454:	2b00      	cmp	r3, #0
 8008456:	bf0c      	ite	eq
 8008458:	2301      	moveq	r3, #1
 800845a:	2300      	movne	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <HAL_I2C_Init+0x17e>
 8008462:	2301      	movs	r3, #1
 8008464:	e022      	b.n	80084ac <HAL_I2C_Init+0x1c4>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10e      	bne.n	800848c <HAL_I2C_Init+0x1a4>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1e58      	subs	r0, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6859      	ldr	r1, [r3, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	440b      	add	r3, r1
 800847c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008480:	3301      	adds	r3, #1
 8008482:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800848a:	e00f      	b.n	80084ac <HAL_I2C_Init+0x1c4>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	1e58      	subs	r0, r3, #1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6859      	ldr	r1, [r3, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	0099      	lsls	r1, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	fbb0 f3f3 	udiv	r3, r0, r3
 80084a2:	3301      	adds	r3, #1
 80084a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	6809      	ldr	r1, [r1, #0]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69da      	ldr	r2, [r3, #28]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	431a      	orrs	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80084da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6911      	ldr	r1, [r2, #16]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	68d2      	ldr	r2, [r2, #12]
 80084e6:	4311      	orrs	r1, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695a      	ldr	r2, [r3, #20]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	431a      	orrs	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	000186a0 	.word	0x000186a0
 8008548:	001e847f 	.word	0x001e847f
 800854c:	003d08ff 	.word	0x003d08ff
 8008550:	431bde83 	.word	0x431bde83
 8008554:	10624dd3 	.word	0x10624dd3

08008558 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e25b      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	2b00      	cmp	r3, #0
 8008574:	d075      	beq.n	8008662 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008576:	4ba3      	ldr	r3, [pc, #652]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 030c 	and.w	r3, r3, #12
 800857e:	2b04      	cmp	r3, #4
 8008580:	d00c      	beq.n	800859c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008582:	4ba0      	ldr	r3, [pc, #640]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800858a:	2b08      	cmp	r3, #8
 800858c:	d112      	bne.n	80085b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800858e:	4b9d      	ldr	r3, [pc, #628]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800859a:	d10b      	bne.n	80085b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800859c:	4b99      	ldr	r3, [pc, #612]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05b      	beq.n	8008660 <HAL_RCC_OscConfig+0x108>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d157      	bne.n	8008660 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e236      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085bc:	d106      	bne.n	80085cc <HAL_RCC_OscConfig+0x74>
 80085be:	4b91      	ldr	r3, [pc, #580]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a90      	ldr	r2, [pc, #576]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	e01d      	b.n	8008608 <HAL_RCC_OscConfig+0xb0>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085d4:	d10c      	bne.n	80085f0 <HAL_RCC_OscConfig+0x98>
 80085d6:	4b8b      	ldr	r3, [pc, #556]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a8a      	ldr	r2, [pc, #552]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	4b88      	ldr	r3, [pc, #544]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a87      	ldr	r2, [pc, #540]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	e00b      	b.n	8008608 <HAL_RCC_OscConfig+0xb0>
 80085f0:	4b84      	ldr	r3, [pc, #528]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a83      	ldr	r2, [pc, #524]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	4b81      	ldr	r3, [pc, #516]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a80      	ldr	r2, [pc, #512]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008606:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d013      	beq.n	8008638 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008610:	f7fe fa12 	bl	8006a38 <HAL_GetTick>
 8008614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008616:	e008      	b.n	800862a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008618:	f7fe fa0e 	bl	8006a38 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b64      	cmp	r3, #100	; 0x64
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e1fb      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800862a:	4b76      	ldr	r3, [pc, #472]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <HAL_RCC_OscConfig+0xc0>
 8008636:	e014      	b.n	8008662 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008638:	f7fe f9fe 	bl	8006a38 <HAL_GetTick>
 800863c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800863e:	e008      	b.n	8008652 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008640:	f7fe f9fa 	bl	8006a38 <HAL_GetTick>
 8008644:	4602      	mov	r2, r0
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	2b64      	cmp	r3, #100	; 0x64
 800864c:	d901      	bls.n	8008652 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800864e:	2303      	movs	r3, #3
 8008650:	e1e7      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008652:	4b6c      	ldr	r3, [pc, #432]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f0      	bne.n	8008640 <HAL_RCC_OscConfig+0xe8>
 800865e:	e000      	b.n	8008662 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008660:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d063      	beq.n	8008736 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800866e:	4b65      	ldr	r3, [pc, #404]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 030c 	and.w	r3, r3, #12
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00b      	beq.n	8008692 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800867a:	4b62      	ldr	r3, [pc, #392]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008682:	2b08      	cmp	r3, #8
 8008684:	d11c      	bne.n	80086c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008686:	4b5f      	ldr	r3, [pc, #380]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d116      	bne.n	80086c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008692:	4b5c      	ldr	r3, [pc, #368]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <HAL_RCC_OscConfig+0x152>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d001      	beq.n	80086aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e1bb      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086aa:	4b56      	ldr	r3, [pc, #344]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4952      	ldr	r1, [pc, #328]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086be:	e03a      	b.n	8008736 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d020      	beq.n	800870a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086c8:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <HAL_RCC_OscConfig+0x2b0>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ce:	f7fe f9b3 	bl	8006a38 <HAL_GetTick>
 80086d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d4:	e008      	b.n	80086e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086d6:	f7fe f9af 	bl	8006a38 <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d901      	bls.n	80086e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e19c      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086e8:	4b46      	ldr	r3, [pc, #280]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0302 	and.w	r3, r3, #2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0f0      	beq.n	80086d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f4:	4b43      	ldr	r3, [pc, #268]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	00db      	lsls	r3, r3, #3
 8008702:	4940      	ldr	r1, [pc, #256]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 8008704:	4313      	orrs	r3, r2
 8008706:	600b      	str	r3, [r1, #0]
 8008708:	e015      	b.n	8008736 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800870a:	4b3f      	ldr	r3, [pc, #252]	; (8008808 <HAL_RCC_OscConfig+0x2b0>)
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008710:	f7fe f992 	bl	8006a38 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008718:	f7fe f98e 	bl	8006a38 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e17b      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800872a:	4b36      	ldr	r3, [pc, #216]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1f0      	bne.n	8008718 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0308 	and.w	r3, r3, #8
 800873e:	2b00      	cmp	r3, #0
 8008740:	d030      	beq.n	80087a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d016      	beq.n	8008778 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <HAL_RCC_OscConfig+0x2b4>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008750:	f7fe f972 	bl	8006a38 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008758:	f7fe f96e 	bl	8006a38 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e15b      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800876a:	4b26      	ldr	r3, [pc, #152]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800876c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x200>
 8008776:	e015      	b.n	80087a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008778:	4b24      	ldr	r3, [pc, #144]	; (800880c <HAL_RCC_OscConfig+0x2b4>)
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800877e:	f7fe f95b 	bl	8006a38 <HAL_GetTick>
 8008782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008784:	e008      	b.n	8008798 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008786:	f7fe f957 	bl	8006a38 <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d901      	bls.n	8008798 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e144      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008798:	4b1a      	ldr	r3, [pc, #104]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 800879a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1f0      	bne.n	8008786 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0304 	and.w	r3, r3, #4
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 80a0 	beq.w	80088f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d10f      	bne.n	80087e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087c2:	2300      	movs	r3, #0
 80087c4:	60bb      	str	r3, [r7, #8]
 80087c6:	4b0f      	ldr	r3, [pc, #60]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	4a0e      	ldr	r2, [pc, #56]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80087cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087d0:	6413      	str	r3, [r2, #64]	; 0x40
 80087d2:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <HAL_RCC_OscConfig+0x2ac>)
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087da:	60bb      	str	r3, [r7, #8]
 80087dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087de:	2301      	movs	r3, #1
 80087e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <HAL_RCC_OscConfig+0x2b8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d121      	bne.n	8008832 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <HAL_RCC_OscConfig+0x2b8>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a07      	ldr	r2, [pc, #28]	; (8008810 <HAL_RCC_OscConfig+0x2b8>)
 80087f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087fa:	f7fe f91d 	bl	8006a38 <HAL_GetTick>
 80087fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008800:	e011      	b.n	8008826 <HAL_RCC_OscConfig+0x2ce>
 8008802:	bf00      	nop
 8008804:	40023800 	.word	0x40023800
 8008808:	42470000 	.word	0x42470000
 800880c:	42470e80 	.word	0x42470e80
 8008810:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008814:	f7fe f910 	bl	8006a38 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e0fd      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008826:	4b81      	ldr	r3, [pc, #516]	; (8008a2c <HAL_RCC_OscConfig+0x4d4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0f0      	beq.n	8008814 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d106      	bne.n	8008848 <HAL_RCC_OscConfig+0x2f0>
 800883a:	4b7d      	ldr	r3, [pc, #500]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 800883c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883e:	4a7c      	ldr	r2, [pc, #496]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008840:	f043 0301 	orr.w	r3, r3, #1
 8008844:	6713      	str	r3, [r2, #112]	; 0x70
 8008846:	e01c      	b.n	8008882 <HAL_RCC_OscConfig+0x32a>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b05      	cmp	r3, #5
 800884e:	d10c      	bne.n	800886a <HAL_RCC_OscConfig+0x312>
 8008850:	4b77      	ldr	r3, [pc, #476]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	4a76      	ldr	r2, [pc, #472]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008856:	f043 0304 	orr.w	r3, r3, #4
 800885a:	6713      	str	r3, [r2, #112]	; 0x70
 800885c:	4b74      	ldr	r3, [pc, #464]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	4a73      	ldr	r2, [pc, #460]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	6713      	str	r3, [r2, #112]	; 0x70
 8008868:	e00b      	b.n	8008882 <HAL_RCC_OscConfig+0x32a>
 800886a:	4b71      	ldr	r3, [pc, #452]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	4a70      	ldr	r2, [pc, #448]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	6713      	str	r3, [r2, #112]	; 0x70
 8008876:	4b6e      	ldr	r3, [pc, #440]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	4a6d      	ldr	r2, [pc, #436]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 800887c:	f023 0304 	bic.w	r3, r3, #4
 8008880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d015      	beq.n	80088b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888a:	f7fe f8d5 	bl	8006a38 <HAL_GetTick>
 800888e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008890:	e00a      	b.n	80088a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008892:	f7fe f8d1 	bl	8006a38 <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e0bc      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a8:	4b61      	ldr	r3, [pc, #388]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0ee      	beq.n	8008892 <HAL_RCC_OscConfig+0x33a>
 80088b4:	e014      	b.n	80088e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088b6:	f7fe f8bf 	bl	8006a38 <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088bc:	e00a      	b.n	80088d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088be:	f7fe f8bb 	bl	8006a38 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e0a6      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088d4:	4b56      	ldr	r3, [pc, #344]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1ee      	bne.n	80088be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d105      	bne.n	80088f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088e6:	4b52      	ldr	r3, [pc, #328]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	4a51      	ldr	r2, [pc, #324]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80088ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8092 	beq.w	8008a20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088fc:	4b4c      	ldr	r3, [pc, #304]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 030c 	and.w	r3, r3, #12
 8008904:	2b08      	cmp	r3, #8
 8008906:	d05c      	beq.n	80089c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d141      	bne.n	8008994 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008910:	4b48      	ldr	r3, [pc, #288]	; (8008a34 <HAL_RCC_OscConfig+0x4dc>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008916:	f7fe f88f 	bl	8006a38 <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800891c:	e008      	b.n	8008930 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800891e:	f7fe f88b 	bl	8006a38 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d901      	bls.n	8008930 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e078      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008930:	4b3f      	ldr	r3, [pc, #252]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1f0      	bne.n	800891e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	019b      	lsls	r3, r3, #6
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	085b      	lsrs	r3, r3, #1
 8008954:	3b01      	subs	r3, #1
 8008956:	041b      	lsls	r3, r3, #16
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	061b      	lsls	r3, r3, #24
 8008960:	4933      	ldr	r1, [pc, #204]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008962:	4313      	orrs	r3, r2
 8008964:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <HAL_RCC_OscConfig+0x4dc>)
 8008968:	2201      	movs	r2, #1
 800896a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800896c:	f7fe f864 	bl	8006a38 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008974:	f7fe f860 	bl	8006a38 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e04d      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008986:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d0f0      	beq.n	8008974 <HAL_RCC_OscConfig+0x41c>
 8008992:	e045      	b.n	8008a20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008994:	4b27      	ldr	r3, [pc, #156]	; (8008a34 <HAL_RCC_OscConfig+0x4dc>)
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899a:	f7fe f84d 	bl	8006a38 <HAL_GetTick>
 800899e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a0:	e008      	b.n	80089b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a2:	f7fe f849 	bl	8006a38 <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d901      	bls.n	80089b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80089b0:	2303      	movs	r3, #3
 80089b2:	e036      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b4:	4b1e      	ldr	r3, [pc, #120]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1f0      	bne.n	80089a2 <HAL_RCC_OscConfig+0x44a>
 80089c0:	e02e      	b.n	8008a20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d101      	bne.n	80089ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e029      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089ce:	4b18      	ldr	r3, [pc, #96]	; (8008a30 <HAL_RCC_OscConfig+0x4d8>)
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d11c      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d115      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089f6:	4013      	ands	r3, r2
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d10d      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d106      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d001      	beq.n	8008a20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40007000 	.word	0x40007000
 8008a30:	40023800 	.word	0x40023800
 8008a34:	42470060 	.word	0x42470060

08008a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e0cc      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a4c:	4b68      	ldr	r3, [pc, #416]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 030f 	and.w	r3, r3, #15
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d90c      	bls.n	8008a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a5a:	4b65      	ldr	r3, [pc, #404]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	b2d2      	uxtb	r2, r2
 8008a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a62:	4b63      	ldr	r3, [pc, #396]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 030f 	and.w	r3, r3, #15
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0b8      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0304 	and.w	r3, r3, #4
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a8c:	4b59      	ldr	r3, [pc, #356]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	4a58      	ldr	r2, [pc, #352]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0308 	and.w	r3, r3, #8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008aa4:	4b53      	ldr	r3, [pc, #332]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4a52      	ldr	r2, [pc, #328]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab0:	4b50      	ldr	r3, [pc, #320]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	494d      	ldr	r1, [pc, #308]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d044      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad6:	4b47      	ldr	r3, [pc, #284]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d119      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e07f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d003      	beq.n	8008af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d107      	bne.n	8008b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af6:	4b3f      	ldr	r3, [pc, #252]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e06f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b06:	4b3b      	ldr	r3, [pc, #236]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d101      	bne.n	8008b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e067      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b16:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 0203 	bic.w	r2, r3, #3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	4934      	ldr	r1, [pc, #208]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b28:	f7fd ff86 	bl	8006a38 <HAL_GetTick>
 8008b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b2e:	e00a      	b.n	8008b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b30:	f7fd ff82 	bl	8006a38 <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e04f      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b46:	4b2b      	ldr	r3, [pc, #172]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	f003 020c 	and.w	r2, r3, #12
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d1eb      	bne.n	8008b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b58:	4b25      	ldr	r3, [pc, #148]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d20c      	bcs.n	8008b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b66:	4b22      	ldr	r3, [pc, #136]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	4b20      	ldr	r3, [pc, #128]	; (8008bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 030f 	and.w	r3, r3, #15
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d001      	beq.n	8008b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e032      	b.n	8008be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 0304 	and.w	r3, r3, #4
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d008      	beq.n	8008b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b8c:	4b19      	ldr	r3, [pc, #100]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	4916      	ldr	r1, [pc, #88]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d009      	beq.n	8008bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008baa:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	490e      	ldr	r1, [pc, #56]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bbe:	f000 f821 	bl	8008c04 <HAL_RCC_GetSysClockFreq>
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	4a0a      	ldr	r2, [pc, #40]	; (8008bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8008bd0:	5cd3      	ldrb	r3, [r2, r3]
 8008bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <HAL_RCC_ClockConfig+0x1c4>)
 8008bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <HAL_RCC_ClockConfig+0x1c8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd fee6 	bl	80069b0 <HAL_InitTick>

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	40023c00 	.word	0x40023c00
 8008bf4:	40023800 	.word	0x40023800
 8008bf8:	08011090 	.word	0x08011090
 8008bfc:	20000034 	.word	0x20000034
 8008c00:	20000038 	.word	0x20000038

08008c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	607b      	str	r3, [r7, #4]
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	2300      	movs	r3, #0
 8008c14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c1a:	4b50      	ldr	r3, [pc, #320]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 030c 	and.w	r3, r3, #12
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d007      	beq.n	8008c36 <HAL_RCC_GetSysClockFreq+0x32>
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d008      	beq.n	8008c3c <HAL_RCC_GetSysClockFreq+0x38>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 808d 	bne.w	8008d4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c30:	4b4b      	ldr	r3, [pc, #300]	; (8008d60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008c32:	60bb      	str	r3, [r7, #8]
       break;
 8008c34:	e08c      	b.n	8008d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c36:	4b4b      	ldr	r3, [pc, #300]	; (8008d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c38:	60bb      	str	r3, [r7, #8]
      break;
 8008c3a:	e089      	b.n	8008d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c3c:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c46:	4b45      	ldr	r3, [pc, #276]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d023      	beq.n	8008c9a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c52:	4b42      	ldr	r3, [pc, #264]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	f04f 0400 	mov.w	r4, #0
 8008c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	ea03 0501 	and.w	r5, r3, r1
 8008c68:	ea04 0602 	and.w	r6, r4, r2
 8008c6c:	4a3d      	ldr	r2, [pc, #244]	; (8008d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c6e:	fb02 f106 	mul.w	r1, r2, r6
 8008c72:	2200      	movs	r2, #0
 8008c74:	fb02 f205 	mul.w	r2, r2, r5
 8008c78:	440a      	add	r2, r1
 8008c7a:	493a      	ldr	r1, [pc, #232]	; (8008d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c7c:	fba5 0101 	umull	r0, r1, r5, r1
 8008c80:	1853      	adds	r3, r2, r1
 8008c82:	4619      	mov	r1, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f04f 0400 	mov.w	r4, #0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	f7f7 fffb 	bl	8000c88 <__aeabi_uldivmod>
 8008c92:	4603      	mov	r3, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	60fb      	str	r3, [r7, #12]
 8008c98:	e049      	b.n	8008d2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c9a:	4b30      	ldr	r3, [pc, #192]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	099b      	lsrs	r3, r3, #6
 8008ca0:	f04f 0400 	mov.w	r4, #0
 8008ca4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	ea03 0501 	and.w	r5, r3, r1
 8008cb0:	ea04 0602 	and.w	r6, r4, r2
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4632      	mov	r2, r6
 8008cb8:	f04f 0300 	mov.w	r3, #0
 8008cbc:	f04f 0400 	mov.w	r4, #0
 8008cc0:	0154      	lsls	r4, r2, #5
 8008cc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008cc6:	014b      	lsls	r3, r1, #5
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4622      	mov	r2, r4
 8008ccc:	1b49      	subs	r1, r1, r5
 8008cce:	eb62 0206 	sbc.w	r2, r2, r6
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	f04f 0400 	mov.w	r4, #0
 8008cda:	0194      	lsls	r4, r2, #6
 8008cdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ce0:	018b      	lsls	r3, r1, #6
 8008ce2:	1a5b      	subs	r3, r3, r1
 8008ce4:	eb64 0402 	sbc.w	r4, r4, r2
 8008ce8:	f04f 0100 	mov.w	r1, #0
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	00e2      	lsls	r2, r4, #3
 8008cf2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cf6:	00d9      	lsls	r1, r3, #3
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4614      	mov	r4, r2
 8008cfc:	195b      	adds	r3, r3, r5
 8008cfe:	eb44 0406 	adc.w	r4, r4, r6
 8008d02:	f04f 0100 	mov.w	r1, #0
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	02a2      	lsls	r2, r4, #10
 8008d0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008d10:	0299      	lsls	r1, r3, #10
 8008d12:	460b      	mov	r3, r1
 8008d14:	4614      	mov	r4, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	4621      	mov	r1, r4
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f04f 0400 	mov.w	r4, #0
 8008d20:	461a      	mov	r2, r3
 8008d22:	4623      	mov	r3, r4
 8008d24:	f7f7 ffb0 	bl	8000c88 <__aeabi_uldivmod>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d2e:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	0c1b      	lsrs	r3, r3, #16
 8008d34:	f003 0303 	and.w	r3, r3, #3
 8008d38:	3301      	adds	r3, #1
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d46:	60bb      	str	r3, [r7, #8]
      break;
 8008d48:	e002      	b.n	8008d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008d4c:	60bb      	str	r3, [r7, #8]
      break;
 8008d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d50:	68bb      	ldr	r3, [r7, #8]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3714      	adds	r7, #20
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	00f42400 	.word	0x00f42400
 8008d64:	00bebc20 	.word	0x00bebc20

08008d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d6c:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000034 	.word	0x20000034

08008d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d84:	f7ff fff0 	bl	8008d68 <HAL_RCC_GetHCLKFreq>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	0a9b      	lsrs	r3, r3, #10
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4a03      	ldr	r2, [pc, #12]	; (8008da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d96:	5cd3      	ldrb	r3, [r2, r3]
 8008d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	080110a0 	.word	0x080110a0

08008da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dac:	f7ff ffdc 	bl	8008d68 <HAL_RCC_GetHCLKFreq>
 8008db0:	4601      	mov	r1, r0
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	0b5b      	lsrs	r3, r3, #13
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	4a03      	ldr	r2, [pc, #12]	; (8008dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dbe:	5cd3      	ldrb	r3, [r2, r3]
 8008dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	080110a0 	.word	0x080110a0

08008dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e056      	b.n	8008e90 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d106      	bne.n	8008e02 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7fd fa67 	bl	80062d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e18:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	69db      	ldr	r3, [r3, #28]
 8008e44:	431a      	orrs	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1b      	ldr	r3, [r3, #32]
 8008e4a:	ea42 0103 	orr.w	r1, r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	f003 0104 	and.w	r1, r3, #4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69da      	ldr	r2, [r3, #28]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b088      	sub	sp, #32
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_SPI_Transmit+0x22>
 8008eb6:	2302      	movs	r3, #2
 8008eb8:	e11e      	b.n	80090f8 <HAL_SPI_Transmit+0x260>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ec2:	f7fd fdb9 	bl	8006a38 <HAL_GetTick>
 8008ec6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d002      	beq.n	8008ede <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008edc:	e103      	b.n	80090e6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <HAL_SPI_Transmit+0x52>
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d102      	bne.n	8008ef0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eee:	e0fa      	b.n	80090e6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2203      	movs	r2, #3
 8008ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	68ba      	ldr	r2, [r7, #8]
 8008f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2200      	movs	r2, #0
 8008f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f36:	d107      	bne.n	8008f48 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f52:	2b40      	cmp	r3, #64	; 0x40
 8008f54:	d007      	beq.n	8008f66 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f6e:	d14b      	bne.n	8009008 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <HAL_SPI_Transmit+0xe6>
 8008f78:	8afb      	ldrh	r3, [r7, #22]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d13e      	bne.n	8008ffc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f82:	881a      	ldrh	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	1c9a      	adds	r2, r3, #2
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fa2:	e02b      	b.n	8008ffc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d112      	bne.n	8008fd8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	1c9a      	adds	r2, r3, #2
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008fd6:	e011      	b.n	8008ffc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fd8:	f7fd fd2e 	bl	8006a38 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d803      	bhi.n	8008ff0 <HAL_SPI_Transmit+0x158>
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fee:	d102      	bne.n	8008ff6 <HAL_SPI_Transmit+0x15e>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008ffa:	e074      	b.n	80090e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1ce      	bne.n	8008fa4 <HAL_SPI_Transmit+0x10c>
 8009006:	e04c      	b.n	80090a2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d002      	beq.n	8009016 <HAL_SPI_Transmit+0x17e>
 8009010:	8afb      	ldrh	r3, [r7, #22]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d140      	bne.n	8009098 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	330c      	adds	r3, #12
 8009020:	7812      	ldrb	r2, [r2, #0]
 8009022:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009032:	b29b      	uxth	r3, r3
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800903c:	e02c      	b.n	8009098 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 0302 	and.w	r3, r3, #2
 8009048:	2b02      	cmp	r3, #2
 800904a:	d113      	bne.n	8009074 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	330c      	adds	r3, #12
 8009056:	7812      	ldrb	r2, [r2, #0]
 8009058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	86da      	strh	r2, [r3, #54]	; 0x36
 8009072:	e011      	b.n	8009098 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009074:	f7fd fce0 	bl	8006a38 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	429a      	cmp	r2, r3
 8009082:	d803      	bhi.n	800908c <HAL_SPI_Transmit+0x1f4>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d102      	bne.n	8009092 <HAL_SPI_Transmit+0x1fa>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d102      	bne.n	8009098 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009096:	e026      	b.n	80090e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800909c:	b29b      	uxth	r3, r3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1cd      	bne.n	800903e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fba4 	bl	80097f4 <SPI_EndRxTxTransaction>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2220      	movs	r2, #32
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090c0:	2300      	movs	r3, #0
 80090c2:	613b      	str	r3, [r7, #16]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	77fb      	strb	r3, [r7, #31]
 80090e2:	e000      	b.n	80090e6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80090e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3720      	adds	r7, #32
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b088      	sub	sp, #32
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	603b      	str	r3, [r7, #0]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009110:	2300      	movs	r3, #0
 8009112:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800911c:	d112      	bne.n	8009144 <HAL_SPI_Receive+0x44>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10e      	bne.n	8009144 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2204      	movs	r2, #4
 800912a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f8e9 	bl	8009312 <HAL_SPI_TransmitReceive>
 8009140:	4603      	mov	r3, r0
 8009142:	e0e2      	b.n	800930a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800914a:	2b01      	cmp	r3, #1
 800914c:	d101      	bne.n	8009152 <HAL_SPI_Receive+0x52>
 800914e:	2302      	movs	r3, #2
 8009150:	e0db      	b.n	800930a <HAL_SPI_Receive+0x20a>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800915a:	f7fd fc6d 	bl	8006a38 <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b01      	cmp	r3, #1
 800916a:	d002      	beq.n	8009172 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800916c:	2302      	movs	r3, #2
 800916e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009170:	e0c2      	b.n	80092f8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <HAL_SPI_Receive+0x7e>
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d102      	bne.n	8009184 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009182:	e0b9      	b.n	80092f8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2204      	movs	r2, #4
 8009188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	88fa      	ldrh	r2, [r7, #6]
 800919c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	88fa      	ldrh	r2, [r7, #6]
 80091a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ca:	d107      	bne.n	80091dc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80091da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d007      	beq.n	80091fa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d162      	bne.n	80092c8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009202:	e02e      	b.n	8009262 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b01      	cmp	r3, #1
 8009210:	d115      	bne.n	800923e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f103 020c 	add.w	r2, r3, #12
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	7812      	ldrb	r2, [r2, #0]
 8009220:	b2d2      	uxtb	r2, r2
 8009222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009228:	1c5a      	adds	r2, r3, #1
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009232:	b29b      	uxth	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800923c:	e011      	b.n	8009262 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800923e:	f7fd fbfb 	bl	8006a38 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d803      	bhi.n	8009256 <HAL_SPI_Receive+0x156>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009254:	d102      	bne.n	800925c <HAL_SPI_Receive+0x15c>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d102      	bne.n	8009262 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009260:	e04a      	b.n	80092f8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009266:	b29b      	uxth	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1cb      	bne.n	8009204 <HAL_SPI_Receive+0x104>
 800926c:	e031      	b.n	80092d2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d113      	bne.n	80092a4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68da      	ldr	r2, [r3, #12]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009286:	b292      	uxth	r2, r2
 8009288:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928e:	1c9a      	adds	r2, r3, #2
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009298:	b29b      	uxth	r3, r3
 800929a:	3b01      	subs	r3, #1
 800929c:	b29a      	uxth	r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092a2:	e011      	b.n	80092c8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092a4:	f7fd fbc8 	bl	8006a38 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d803      	bhi.n	80092bc <HAL_SPI_Receive+0x1bc>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ba:	d102      	bne.n	80092c2 <HAL_SPI_Receive+0x1c2>
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80092c6:	e017      	b.n	80092f8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1cd      	bne.n	800926e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fa27 	bl	800972a <SPI_EndRxTransaction>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d002      	beq.n	80092e8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	75fb      	strb	r3, [r7, #23]
 80092f4:	e000      	b.n	80092f8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80092f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08c      	sub	sp, #48	; 0x30
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009320:	2301      	movs	r3, #1
 8009322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009330:	2b01      	cmp	r3, #1
 8009332:	d101      	bne.n	8009338 <HAL_SPI_TransmitReceive+0x26>
 8009334:	2302      	movs	r3, #2
 8009336:	e18a      	b.n	800964e <HAL_SPI_TransmitReceive+0x33c>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009340:	f7fd fb7a 	bl	8006a38 <HAL_GetTick>
 8009344:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800934c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009356:	887b      	ldrh	r3, [r7, #2]
 8009358:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800935a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800935e:	2b01      	cmp	r3, #1
 8009360:	d00f      	beq.n	8009382 <HAL_SPI_TransmitReceive+0x70>
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009368:	d107      	bne.n	800937a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <HAL_SPI_TransmitReceive+0x68>
 8009372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009376:	2b04      	cmp	r3, #4
 8009378:	d003      	beq.n	8009382 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800937a:	2302      	movs	r3, #2
 800937c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009380:	e15b      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_SPI_TransmitReceive+0x82>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <HAL_SPI_TransmitReceive+0x82>
 800938e:	887b      	ldrh	r3, [r7, #2]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d103      	bne.n	800939c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800939a:	e14e      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	d003      	beq.n	80093b0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2205      	movs	r2, #5
 80093ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	887a      	ldrh	r2, [r7, #2]
 80093c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	887a      	ldrh	r2, [r7, #2]
 80093c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	887a      	ldrh	r2, [r7, #2]
 80093d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	887a      	ldrh	r2, [r7, #2]
 80093d8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f0:	2b40      	cmp	r3, #64	; 0x40
 80093f2:	d007      	beq.n	8009404 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800940c:	d178      	bne.n	8009500 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <HAL_SPI_TransmitReceive+0x10a>
 8009416:	8b7b      	ldrh	r3, [r7, #26]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d166      	bne.n	80094ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009440:	e053      	b.n	80094ea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b02      	cmp	r3, #2
 800944e:	d11b      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x176>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009454:	b29b      	uxth	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	d016      	beq.n	8009488 <HAL_SPI_TransmitReceive+0x176>
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	2b01      	cmp	r3, #1
 800945e:	d113      	bne.n	8009488 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009464:	881a      	ldrh	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009470:	1c9a      	adds	r2, r3, #2
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800947a:	b29b      	uxth	r3, r3
 800947c:	3b01      	subs	r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009484:	2300      	movs	r3, #0
 8009486:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b01      	cmp	r3, #1
 8009494:	d119      	bne.n	80094ca <HAL_SPI_TransmitReceive+0x1b8>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949a:	b29b      	uxth	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d014      	beq.n	80094ca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68da      	ldr	r2, [r3, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	b292      	uxth	r2, r2
 80094ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	1c9a      	adds	r2, r3, #2
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80094c6:	2301      	movs	r3, #1
 80094c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80094ca:	f7fd fab5 	bl	8006a38 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d807      	bhi.n	80094ea <HAL_SPI_TransmitReceive+0x1d8>
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d003      	beq.n	80094ea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094e8:	e0a7      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1a6      	bne.n	8009442 <HAL_SPI_TransmitReceive+0x130>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1a1      	bne.n	8009442 <HAL_SPI_TransmitReceive+0x130>
 80094fe:	e07c      	b.n	80095fa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <HAL_SPI_TransmitReceive+0x1fc>
 8009508:	8b7b      	ldrh	r3, [r7, #26]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d16b      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	330c      	adds	r3, #12
 8009518:	7812      	ldrb	r2, [r2, #0]
 800951a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009534:	e057      	b.n	80095e6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b02      	cmp	r3, #2
 8009542:	d11c      	bne.n	800957e <HAL_SPI_TransmitReceive+0x26c>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009548:	b29b      	uxth	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d017      	beq.n	800957e <HAL_SPI_TransmitReceive+0x26c>
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	2b01      	cmp	r3, #1
 8009552:	d114      	bne.n	800957e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	330c      	adds	r3, #12
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	1c5a      	adds	r2, r3, #1
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 0301 	and.w	r3, r3, #1
 8009588:	2b01      	cmp	r3, #1
 800958a:	d119      	bne.n	80095c0 <HAL_SPI_TransmitReceive+0x2ae>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009590:	b29b      	uxth	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d014      	beq.n	80095c0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	3b01      	subs	r3, #1
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095bc:	2301      	movs	r3, #1
 80095be:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095c0:	f7fd fa3a 	bl	8006a38 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d803      	bhi.n	80095d8 <HAL_SPI_TransmitReceive+0x2c6>
 80095d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d6:	d102      	bne.n	80095de <HAL_SPI_TransmitReceive+0x2cc>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d103      	bne.n	80095e6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095e4:	e029      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1a2      	bne.n	8009536 <HAL_SPI_TransmitReceive+0x224>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d19d      	bne.n	8009536 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f8f8 	bl	80097f4 <SPI_EndRxTxTransaction>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d006      	beq.n	8009618 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2220      	movs	r2, #32
 8009614:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009616:	e010      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10b      	bne.n	8009638 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009620:	2300      	movs	r3, #0
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	617b      	str	r3, [r7, #20]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	e000      	b.n	800963a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009638:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800964a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800964e:	4618      	mov	r0, r3
 8009650:	3730      	adds	r7, #48	; 0x30
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	60f8      	str	r0, [r7, #12]
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	603b      	str	r3, [r7, #0]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009666:	e04c      	b.n	8009702 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966e:	d048      	beq.n	8009702 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009670:	f7fd f9e2 	bl	8006a38 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d902      	bls.n	8009686 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d13d      	bne.n	8009702 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685a      	ldr	r2, [r3, #4]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009694:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800969e:	d111      	bne.n	80096c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a8:	d004      	beq.n	80096b4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096b2:	d107      	bne.n	80096c4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096cc:	d10f      	bne.n	80096ee <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e00f      	b.n	8009722 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689a      	ldr	r2, [r3, #8]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4013      	ands	r3, r2
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	429a      	cmp	r2, r3
 8009710:	bf0c      	ite	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	2300      	movne	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	461a      	mov	r2, r3
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	429a      	cmp	r2, r3
 800971e:	d1a3      	bne.n	8009668 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af02      	add	r7, sp, #8
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800973e:	d111      	bne.n	8009764 <SPI_EndRxTransaction+0x3a>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009748:	d004      	beq.n	8009754 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009752:	d107      	bne.n	8009764 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009762:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800976c:	d12a      	bne.n	80097c4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009776:	d012      	beq.n	800979e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	9300      	str	r3, [sp, #0]
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2200      	movs	r2, #0
 8009780:	2180      	movs	r1, #128	; 0x80
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f7ff ff67 	bl	8009656 <SPI_WaitFlagStateUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d02d      	beq.n	80097ea <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009792:	f043 0220 	orr.w	r2, r3, #32
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	e026      	b.n	80097ec <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	2200      	movs	r2, #0
 80097a6:	2101      	movs	r1, #1
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f7ff ff54 	bl	8009656 <SPI_WaitFlagStateUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d01a      	beq.n	80097ea <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	f043 0220 	orr.w	r2, r3, #32
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e013      	b.n	80097ec <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	2101      	movs	r1, #1
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff ff41 	bl	8009656 <SPI_WaitFlagStateUntilTimeout>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097de:	f043 0220 	orr.w	r2, r3, #32
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e000      	b.n	80097ec <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009800:	4b1b      	ldr	r3, [pc, #108]	; (8009870 <SPI_EndRxTxTransaction+0x7c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <SPI_EndRxTxTransaction+0x80>)
 8009806:	fba2 2303 	umull	r2, r3, r2, r3
 800980a:	0d5b      	lsrs	r3, r3, #21
 800980c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009810:	fb02 f303 	mul.w	r3, r2, r3
 8009814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800981e:	d112      	bne.n	8009846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2200      	movs	r2, #0
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f7ff ff13 	bl	8009656 <SPI_WaitFlagStateUntilTimeout>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d016      	beq.n	8009864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f043 0220 	orr.w	r2, r3, #32
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009842:	2303      	movs	r3, #3
 8009844:	e00f      	b.n	8009866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00a      	beq.n	8009862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	3b01      	subs	r3, #1
 8009850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b80      	cmp	r3, #128	; 0x80
 800985e:	d0f2      	beq.n	8009846 <SPI_EndRxTxTransaction+0x52>
 8009860:	e000      	b.n	8009864 <SPI_EndRxTxTransaction+0x70>
        break;
 8009862:	bf00      	nop
  }

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000034 	.word	0x20000034
 8009874:	165e9f81 	.word	0x165e9f81

08009878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e01d      	b.n	80098c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fc fe12 	bl	80064c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f000 fb56 	bl	8009f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b06      	cmp	r3, #6
 80098f6:	d007      	beq.n	8009908 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f042 0201 	orr.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e01d      	b.n	8009964 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d106      	bne.n	8009942 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7fc fd0f 	bl	8006360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f000 fb07 	bl	8009f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2201      	movs	r2, #1
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fd42 	bl	800a408 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a15      	ldr	r2, [pc, #84]	; (80099e0 <HAL_TIM_PWM_Start+0x74>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d004      	beq.n	8009998 <HAL_TIM_PWM_Start+0x2c>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a14      	ldr	r2, [pc, #80]	; (80099e4 <HAL_TIM_PWM_Start+0x78>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d101      	bne.n	800999c <HAL_TIM_PWM_Start+0x30>
 8009998:	2301      	movs	r3, #1
 800999a:	e000      	b.n	800999e <HAL_TIM_PWM_Start+0x32>
 800999c:	2300      	movs	r3, #0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d007      	beq.n	80099b2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b06      	cmp	r3, #6
 80099c2:	d007      	beq.n	80099d4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0201 	orr.w	r2, r2, #1
 80099d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	40010000 	.word	0x40010000
 80099e4:	40010400 	.word	0x40010400

080099e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b086      	sub	sp, #24
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	e083      	b.n	8009b04 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d106      	bne.n	8009a16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7fc fcdd 	bl	80063d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2202      	movs	r2, #2
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a2c:	f023 0307 	bic.w	r3, r3, #7
 8009a30:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f000 fa93 	bl	8009f68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a6a:	f023 0303 	bic.w	r3, r3, #3
 8009a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a88:	f023 030c 	bic.w	r3, r3, #12
 8009a8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	69db      	ldr	r3, [r3, #28]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	011a      	lsls	r2, r3, #4
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	031b      	lsls	r3, r3, #12
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009ac6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009ace:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685a      	ldr	r2, [r3, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	695b      	ldr	r3, [r3, #20]
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	4313      	orrs	r3, r2
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <HAL_TIM_Encoder_Start+0x16>
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d008      	beq.n	8009b32 <HAL_TIM_Encoder_Start+0x26>
 8009b20:	e00f      	b.n	8009b42 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2201      	movs	r2, #1
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 fc6c 	bl	800a408 <TIM_CCxChannelCmd>
      break;
 8009b30:	e016      	b.n	8009b60 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	2201      	movs	r2, #1
 8009b38:	2104      	movs	r1, #4
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fc64 	bl	800a408 <TIM_CCxChannelCmd>
      break;
 8009b40:	e00e      	b.n	8009b60 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2201      	movs	r2, #1
 8009b48:	2100      	movs	r1, #0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fc5c 	bl	800a408 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2201      	movs	r2, #1
 8009b56:	2104      	movs	r1, #4
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fc55 	bl	800a408 <TIM_CCxChannelCmd>
      break;
 8009b5e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f042 0201 	orr.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b082      	sub	sp, #8
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	f003 0302 	and.w	r3, r3, #2
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d122      	bne.n	8009bd6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d11b      	bne.n	8009bd6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f06f 0202 	mvn.w	r2, #2
 8009ba6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9b5 	bl	8009f2c <HAL_TIM_IC_CaptureCallback>
 8009bc2:	e005      	b.n	8009bd0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f9a7 	bl	8009f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9b8 	bl	8009f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b04      	cmp	r3, #4
 8009be2:	d122      	bne.n	8009c2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d11b      	bne.n	8009c2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f06f 0204 	mvn.w	r2, #4
 8009bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 f98b 	bl	8009f2c <HAL_TIM_IC_CaptureCallback>
 8009c16:	e005      	b.n	8009c24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f97d 	bl	8009f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f98e 	bl	8009f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	f003 0308 	and.w	r3, r3, #8
 8009c34:	2b08      	cmp	r3, #8
 8009c36:	d122      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	2b08      	cmp	r3, #8
 8009c44:	d11b      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f06f 0208 	mvn.w	r2, #8
 8009c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2204      	movs	r2, #4
 8009c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	f003 0303 	and.w	r3, r3, #3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f961 	bl	8009f2c <HAL_TIM_IC_CaptureCallback>
 8009c6a:	e005      	b.n	8009c78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f953 	bl	8009f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f964 	bl	8009f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	f003 0310 	and.w	r3, r3, #16
 8009c88:	2b10      	cmp	r3, #16
 8009c8a:	d122      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	f003 0310 	and.w	r3, r3, #16
 8009c96:	2b10      	cmp	r3, #16
 8009c98:	d11b      	bne.n	8009cd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f06f 0210 	mvn.w	r2, #16
 8009ca2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2208      	movs	r2, #8
 8009ca8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f937 	bl	8009f2c <HAL_TIM_IC_CaptureCallback>
 8009cbe:	e005      	b.n	8009ccc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f929 	bl	8009f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f93a 	bl	8009f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d10e      	bne.n	8009cfe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d107      	bne.n	8009cfe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f06f 0201 	mvn.w	r2, #1
 8009cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7fa f857 	bl	8003dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d08:	2b80      	cmp	r3, #128	; 0x80
 8009d0a:	d10e      	bne.n	8009d2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d16:	2b80      	cmp	r3, #128	; 0x80
 8009d18:	d107      	bne.n	8009d2a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fc6d 	bl	800a604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	691b      	ldr	r3, [r3, #16]
 8009d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d34:	2b40      	cmp	r3, #64	; 0x40
 8009d36:	d10e      	bne.n	8009d56 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d107      	bne.n	8009d56 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f8ff 	bl	8009f54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d10e      	bne.n	8009d82 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	d107      	bne.n	8009d82 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f06f 0220 	mvn.w	r2, #32
 8009d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fc37 	bl	800a5f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d101      	bne.n	8009da6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009da2:	2302      	movs	r3, #2
 8009da4:	e0b4      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b0c      	cmp	r3, #12
 8009dba:	f200 809f 	bhi.w	8009efc <HAL_TIM_PWM_ConfigChannel+0x170>
 8009dbe:	a201      	add	r2, pc, #4	; (adr r2, 8009dc4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009df9 	.word	0x08009df9
 8009dc8:	08009efd 	.word	0x08009efd
 8009dcc:	08009efd 	.word	0x08009efd
 8009dd0:	08009efd 	.word	0x08009efd
 8009dd4:	08009e39 	.word	0x08009e39
 8009dd8:	08009efd 	.word	0x08009efd
 8009ddc:	08009efd 	.word	0x08009efd
 8009de0:	08009efd 	.word	0x08009efd
 8009de4:	08009e7b 	.word	0x08009e7b
 8009de8:	08009efd 	.word	0x08009efd
 8009dec:	08009efd 	.word	0x08009efd
 8009df0:	08009efd 	.word	0x08009efd
 8009df4:	08009ebb 	.word	0x08009ebb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68b9      	ldr	r1, [r7, #8]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 f952 	bl	800a0a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0208 	orr.w	r2, r2, #8
 8009e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	699a      	ldr	r2, [r3, #24]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0204 	bic.w	r2, r2, #4
 8009e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6999      	ldr	r1, [r3, #24]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	619a      	str	r2, [r3, #24]
      break;
 8009e36:	e062      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68b9      	ldr	r1, [r7, #8]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 f9a2 	bl	800a188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	699a      	ldr	r2, [r3, #24]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	6999      	ldr	r1, [r3, #24]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	021a      	lsls	r2, r3, #8
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	430a      	orrs	r2, r1
 8009e76:	619a      	str	r2, [r3, #24]
      break;
 8009e78:	e041      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68b9      	ldr	r1, [r7, #8]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 f9f7 	bl	800a274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f042 0208 	orr.w	r2, r2, #8
 8009e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69da      	ldr	r2, [r3, #28]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f022 0204 	bic.w	r2, r2, #4
 8009ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69d9      	ldr	r1, [r3, #28]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	691a      	ldr	r2, [r3, #16]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	61da      	str	r2, [r3, #28]
      break;
 8009eb8:	e021      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68b9      	ldr	r1, [r7, #8]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 fa4b 	bl	800a35c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ed4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69da      	ldr	r2, [r3, #28]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ee4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	69d9      	ldr	r1, [r3, #28]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	021a      	lsls	r2, r3, #8
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	61da      	str	r2, [r3, #28]
      break;
 8009efa:	e000      	b.n	8009efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009efc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b083      	sub	sp, #12
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a40      	ldr	r2, [pc, #256]	; (800a07c <TIM_Base_SetConfig+0x114>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d013      	beq.n	8009fa8 <TIM_Base_SetConfig+0x40>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f86:	d00f      	beq.n	8009fa8 <TIM_Base_SetConfig+0x40>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a3d      	ldr	r2, [pc, #244]	; (800a080 <TIM_Base_SetConfig+0x118>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d00b      	beq.n	8009fa8 <TIM_Base_SetConfig+0x40>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a3c      	ldr	r2, [pc, #240]	; (800a084 <TIM_Base_SetConfig+0x11c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d007      	beq.n	8009fa8 <TIM_Base_SetConfig+0x40>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a3b      	ldr	r2, [pc, #236]	; (800a088 <TIM_Base_SetConfig+0x120>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d003      	beq.n	8009fa8 <TIM_Base_SetConfig+0x40>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3a      	ldr	r2, [pc, #232]	; (800a08c <TIM_Base_SetConfig+0x124>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d108      	bne.n	8009fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	68fa      	ldr	r2, [r7, #12]
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a2f      	ldr	r2, [pc, #188]	; (800a07c <TIM_Base_SetConfig+0x114>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d02b      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc8:	d027      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <TIM_Base_SetConfig+0x118>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d023      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a2b      	ldr	r2, [pc, #172]	; (800a084 <TIM_Base_SetConfig+0x11c>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d01f      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2a      	ldr	r2, [pc, #168]	; (800a088 <TIM_Base_SetConfig+0x120>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d01b      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a29      	ldr	r2, [pc, #164]	; (800a08c <TIM_Base_SetConfig+0x124>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d017      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a28      	ldr	r2, [pc, #160]	; (800a090 <TIM_Base_SetConfig+0x128>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d013      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	4a27      	ldr	r2, [pc, #156]	; (800a094 <TIM_Base_SetConfig+0x12c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d00f      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	4a26      	ldr	r2, [pc, #152]	; (800a098 <TIM_Base_SetConfig+0x130>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d00b      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a25      	ldr	r2, [pc, #148]	; (800a09c <TIM_Base_SetConfig+0x134>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d007      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a24      	ldr	r2, [pc, #144]	; (800a0a0 <TIM_Base_SetConfig+0x138>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d003      	beq.n	800a01a <TIM_Base_SetConfig+0xb2>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <TIM_Base_SetConfig+0x13c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d108      	bne.n	800a02c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4313      	orrs	r3, r2
 800a02a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	689a      	ldr	r2, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <TIM_Base_SetConfig+0x114>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <TIM_Base_SetConfig+0xf8>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a0c      	ldr	r2, [pc, #48]	; (800a08c <TIM_Base_SetConfig+0x124>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d103      	bne.n	800a068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	691a      	ldr	r2, [r3, #16]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	615a      	str	r2, [r3, #20]
}
 800a06e:	bf00      	nop
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	40010000 	.word	0x40010000
 800a080:	40000400 	.word	0x40000400
 800a084:	40000800 	.word	0x40000800
 800a088:	40000c00 	.word	0x40000c00
 800a08c:	40010400 	.word	0x40010400
 800a090:	40014000 	.word	0x40014000
 800a094:	40014400 	.word	0x40014400
 800a098:	40014800 	.word	0x40014800
 800a09c:	40001800 	.word	0x40001800
 800a0a0:	40001c00 	.word	0x40001c00
 800a0a4:	40002000 	.word	0x40002000

0800a0a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f023 0201 	bic.w	r2, r3, #1
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	f023 0302 	bic.w	r3, r3, #2
 800a0f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a20      	ldr	r2, [pc, #128]	; (800a180 <TIM_OC1_SetConfig+0xd8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_OC1_SetConfig+0x64>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a1f      	ldr	r2, [pc, #124]	; (800a184 <TIM_OC1_SetConfig+0xdc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d10c      	bne.n	800a126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f023 0308 	bic.w	r3, r3, #8
 800a112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f023 0304 	bic.w	r3, r3, #4
 800a124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a15      	ldr	r2, [pc, #84]	; (800a180 <TIM_OC1_SetConfig+0xd8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d003      	beq.n	800a136 <TIM_OC1_SetConfig+0x8e>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a14      	ldr	r2, [pc, #80]	; (800a184 <TIM_OC1_SetConfig+0xdc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d111      	bne.n	800a15a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a13c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4313      	orrs	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	621a      	str	r2, [r3, #32]
}
 800a174:	bf00      	nop
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40010000 	.word	0x40010000
 800a184:	40010400 	.word	0x40010400

0800a188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	f023 0210 	bic.w	r2, r3, #16
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	f023 0320 	bic.w	r3, r3, #32
 800a1d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	011b      	lsls	r3, r3, #4
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a22      	ldr	r2, [pc, #136]	; (800a26c <TIM_OC2_SetConfig+0xe4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_OC2_SetConfig+0x68>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a21      	ldr	r2, [pc, #132]	; (800a270 <TIM_OC2_SetConfig+0xe8>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10d      	bne.n	800a20c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	011b      	lsls	r3, r3, #4
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a20a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a17      	ldr	r2, [pc, #92]	; (800a26c <TIM_OC2_SetConfig+0xe4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d003      	beq.n	800a21c <TIM_OC2_SetConfig+0x94>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a16      	ldr	r2, [pc, #88]	; (800a270 <TIM_OC2_SetConfig+0xe8>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d113      	bne.n	800a244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a22a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	621a      	str	r2, [r3, #32]
}
 800a25e:	bf00      	nop
 800a260:	371c      	adds	r7, #28
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	40010000 	.word	0x40010000
 800a270:	40010400 	.word	0x40010400

0800a274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	021b      	lsls	r3, r3, #8
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a21      	ldr	r2, [pc, #132]	; (800a354 <TIM_OC3_SetConfig+0xe0>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d003      	beq.n	800a2da <TIM_OC3_SetConfig+0x66>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a20      	ldr	r2, [pc, #128]	; (800a358 <TIM_OC3_SetConfig+0xe4>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d10d      	bne.n	800a2f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	021b      	lsls	r3, r3, #8
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a16      	ldr	r2, [pc, #88]	; (800a354 <TIM_OC3_SetConfig+0xe0>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d003      	beq.n	800a306 <TIM_OC3_SetConfig+0x92>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a15      	ldr	r2, [pc, #84]	; (800a358 <TIM_OC3_SetConfig+0xe4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d113      	bne.n	800a32e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a30c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	695b      	ldr	r3, [r3, #20]
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	4313      	orrs	r3, r2
 800a320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	011b      	lsls	r3, r3, #4
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	697a      	ldr	r2, [r7, #20]
 800a346:	621a      	str	r2, [r3, #32]
}
 800a348:	bf00      	nop
 800a34a:	371c      	adds	r7, #28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	40010000 	.word	0x40010000
 800a358:	40010400 	.word	0x40010400

0800a35c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b087      	sub	sp, #28
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	021b      	lsls	r3, r3, #8
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a3a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	031b      	lsls	r3, r3, #12
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a12      	ldr	r2, [pc, #72]	; (800a400 <TIM_OC4_SetConfig+0xa4>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_OC4_SetConfig+0x68>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a11      	ldr	r2, [pc, #68]	; (800a404 <TIM_OC4_SetConfig+0xa8>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d109      	bne.n	800a3d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	019b      	lsls	r3, r3, #6
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	621a      	str	r2, [r3, #32]
}
 800a3f2:	bf00      	nop
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	40010000 	.word	0x40010000
 800a404:	40010400 	.word	0x40010400

0800a408 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f003 031f 	and.w	r3, r3, #31
 800a41a:	2201      	movs	r2, #1
 800a41c:	fa02 f303 	lsl.w	r3, r2, r3
 800a420:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6a1a      	ldr	r2, [r3, #32]
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	43db      	mvns	r3, r3
 800a42a:	401a      	ands	r2, r3
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1a      	ldr	r2, [r3, #32]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f003 031f 	and.w	r3, r3, #31
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	fa01 f303 	lsl.w	r3, r1, r3
 800a440:	431a      	orrs	r2, r3
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
	...

0800a454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a464:	2b01      	cmp	r3, #1
 800a466:	d101      	bne.n	800a46c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a468:	2302      	movs	r3, #2
 800a46a:	e05a      	b.n	800a522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2202      	movs	r2, #2
 800a478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a21      	ldr	r2, [pc, #132]	; (800a530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d022      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b8:	d01d      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a1d      	ldr	r2, [pc, #116]	; (800a534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d018      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a1b      	ldr	r2, [pc, #108]	; (800a538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d013      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a1a      	ldr	r2, [pc, #104]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00e      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a18      	ldr	r2, [pc, #96]	; (800a540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d009      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a17      	ldr	r2, [pc, #92]	; (800a544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d004      	beq.n	800a4f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a15      	ldr	r2, [pc, #84]	; (800a548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d10c      	bne.n	800a510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	4313      	orrs	r3, r2
 800a506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop
 800a530:	40010000 	.word	0x40010000
 800a534:	40000400 	.word	0x40000400
 800a538:	40000800 	.word	0x40000800
 800a53c:	40000c00 	.word	0x40000c00
 800a540:	40010400 	.word	0x40010400
 800a544:	40014000 	.word	0x40014000
 800a548:	40001800 	.word	0x40001800

0800a54c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a560:	2b01      	cmp	r3, #1
 800a562:	d101      	bne.n	800a568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a564:	2302      	movs	r3, #2
 800a566:	e03d      	b.n	800a5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2201      	movs	r2, #1
 800a56c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	4313      	orrs	r3, r2
 800a598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	695b      	ldr	r3, [r3, #20]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	69db      	ldr	r3, [r3, #28]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a60c:	bf00      	nop
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e03f      	b.n	800a6aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7fb ffec 	bl	800661c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2224      	movs	r2, #36	; 0x24
 800a648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a65a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f90b 	bl	800a878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	695a      	ldr	r2, [r3, #20]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b088      	sub	sp, #32
 800a6b6:	af02      	add	r7, sp, #8
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	603b      	str	r3, [r7, #0]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b20      	cmp	r3, #32
 800a6d0:	f040 8083 	bne.w	800a7da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d002      	beq.n	800a6e0 <HAL_UART_Transmit+0x2e>
 800a6da:	88fb      	ldrh	r3, [r7, #6]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e07b      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d101      	bne.n	800a6f2 <HAL_UART_Transmit+0x40>
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	e074      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2221      	movs	r2, #33	; 0x21
 800a704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a708:	f7fc f996 	bl	8006a38 <HAL_GetTick>
 800a70c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	88fa      	ldrh	r2, [r7, #6]
 800a712:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	88fa      	ldrh	r2, [r7, #6]
 800a718:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a722:	e042      	b.n	800a7aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a728:	b29b      	uxth	r3, r3
 800a72a:	3b01      	subs	r3, #1
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a73a:	d122      	bne.n	800a782 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	2200      	movs	r2, #0
 800a744:	2180      	movs	r1, #128	; 0x80
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f84c 	bl	800a7e4 <UART_WaitOnFlagUntilTimeout>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a752:	2303      	movs	r3, #3
 800a754:	e042      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a768:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d103      	bne.n	800a77a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	3302      	adds	r3, #2
 800a776:	60bb      	str	r3, [r7, #8]
 800a778:	e017      	b.n	800a7aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60bb      	str	r3, [r7, #8]
 800a780:	e013      	b.n	800a7aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2200      	movs	r2, #0
 800a78a:	2180      	movs	r1, #128	; 0x80
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 f829 	bl	800a7e4 <UART_WaitOnFlagUntilTimeout>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e01f      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	60ba      	str	r2, [r7, #8]
 800a7a2:	781a      	ldrb	r2, [r3, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1b7      	bne.n	800a724 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2140      	movs	r1, #64	; 0x40
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 f810 	bl	800a7e4 <UART_WaitOnFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e006      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e000      	b.n	800a7dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a7da:	2302      	movs	r3, #2
  }
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7f4:	e02c      	b.n	800a850 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fc:	d028      	beq.n	800a850 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d007      	beq.n	800a814 <UART_WaitOnFlagUntilTimeout+0x30>
 800a804:	f7fc f918 	bl	8006a38 <HAL_GetTick>
 800a808:	4602      	mov	r2, r0
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	429a      	cmp	r2, r3
 800a812:	d21d      	bcs.n	800a850 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68da      	ldr	r2, [r3, #12]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a822:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	695a      	ldr	r2, [r3, #20]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f022 0201 	bic.w	r2, r2, #1
 800a832:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2220      	movs	r2, #32
 800a838:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2220      	movs	r2, #32
 800a840:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a84c:	2303      	movs	r3, #3
 800a84e:	e00f      	b.n	800a870 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4013      	ands	r3, r2
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	bf0c      	ite	eq
 800a860:	2301      	moveq	r3, #1
 800a862:	2300      	movne	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	461a      	mov	r2, r3
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d0c3      	beq.n	800a7f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	68da      	ldr	r2, [r3, #12]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	431a      	orrs	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a8ba:	f023 030c 	bic.w	r3, r3, #12
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	6812      	ldr	r2, [r2, #0]
 800a8c2:	68f9      	ldr	r1, [r7, #12]
 800a8c4:	430b      	orrs	r3, r1
 800a8c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	69db      	ldr	r3, [r3, #28]
 800a8e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8e6:	f040 818b 	bne.w	800ac00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4ac1      	ldr	r2, [pc, #772]	; (800abf4 <UART_SetConfig+0x37c>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d005      	beq.n	800a900 <UART_SetConfig+0x88>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4abf      	ldr	r2, [pc, #764]	; (800abf8 <UART_SetConfig+0x380>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f040 80bd 	bne.w	800aa7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a900:	f7fe fa52 	bl	8008da8 <HAL_RCC_GetPCLK2Freq>
 800a904:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	461d      	mov	r5, r3
 800a90a:	f04f 0600 	mov.w	r6, #0
 800a90e:	46a8      	mov	r8, r5
 800a910:	46b1      	mov	r9, r6
 800a912:	eb18 0308 	adds.w	r3, r8, r8
 800a916:	eb49 0409 	adc.w	r4, r9, r9
 800a91a:	4698      	mov	r8, r3
 800a91c:	46a1      	mov	r9, r4
 800a91e:	eb18 0805 	adds.w	r8, r8, r5
 800a922:	eb49 0906 	adc.w	r9, r9, r6
 800a926:	f04f 0100 	mov.w	r1, #0
 800a92a:	f04f 0200 	mov.w	r2, #0
 800a92e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a932:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a936:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a93a:	4688      	mov	r8, r1
 800a93c:	4691      	mov	r9, r2
 800a93e:	eb18 0005 	adds.w	r0, r8, r5
 800a942:	eb49 0106 	adc.w	r1, r9, r6
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	461d      	mov	r5, r3
 800a94c:	f04f 0600 	mov.w	r6, #0
 800a950:	196b      	adds	r3, r5, r5
 800a952:	eb46 0406 	adc.w	r4, r6, r6
 800a956:	461a      	mov	r2, r3
 800a958:	4623      	mov	r3, r4
 800a95a:	f7f6 f995 	bl	8000c88 <__aeabi_uldivmod>
 800a95e:	4603      	mov	r3, r0
 800a960:	460c      	mov	r4, r1
 800a962:	461a      	mov	r2, r3
 800a964:	4ba5      	ldr	r3, [pc, #660]	; (800abfc <UART_SetConfig+0x384>)
 800a966:	fba3 2302 	umull	r2, r3, r3, r2
 800a96a:	095b      	lsrs	r3, r3, #5
 800a96c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	461d      	mov	r5, r3
 800a974:	f04f 0600 	mov.w	r6, #0
 800a978:	46a9      	mov	r9, r5
 800a97a:	46b2      	mov	sl, r6
 800a97c:	eb19 0309 	adds.w	r3, r9, r9
 800a980:	eb4a 040a 	adc.w	r4, sl, sl
 800a984:	4699      	mov	r9, r3
 800a986:	46a2      	mov	sl, r4
 800a988:	eb19 0905 	adds.w	r9, r9, r5
 800a98c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a990:	f04f 0100 	mov.w	r1, #0
 800a994:	f04f 0200 	mov.w	r2, #0
 800a998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a99c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	4692      	mov	sl, r2
 800a9a8:	eb19 0005 	adds.w	r0, r9, r5
 800a9ac:	eb4a 0106 	adc.w	r1, sl, r6
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	461d      	mov	r5, r3
 800a9b6:	f04f 0600 	mov.w	r6, #0
 800a9ba:	196b      	adds	r3, r5, r5
 800a9bc:	eb46 0406 	adc.w	r4, r6, r6
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4623      	mov	r3, r4
 800a9c4:	f7f6 f960 	bl	8000c88 <__aeabi_uldivmod>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	4b8b      	ldr	r3, [pc, #556]	; (800abfc <UART_SetConfig+0x384>)
 800a9d0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d4:	095b      	lsrs	r3, r3, #5
 800a9d6:	2164      	movs	r1, #100	; 0x64
 800a9d8:	fb01 f303 	mul.w	r3, r1, r3
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	3332      	adds	r3, #50	; 0x32
 800a9e2:	4a86      	ldr	r2, [pc, #536]	; (800abfc <UART_SetConfig+0x384>)
 800a9e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9e8:	095b      	lsrs	r3, r3, #5
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9f0:	4498      	add	r8, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	461d      	mov	r5, r3
 800a9f6:	f04f 0600 	mov.w	r6, #0
 800a9fa:	46a9      	mov	r9, r5
 800a9fc:	46b2      	mov	sl, r6
 800a9fe:	eb19 0309 	adds.w	r3, r9, r9
 800aa02:	eb4a 040a 	adc.w	r4, sl, sl
 800aa06:	4699      	mov	r9, r3
 800aa08:	46a2      	mov	sl, r4
 800aa0a:	eb19 0905 	adds.w	r9, r9, r5
 800aa0e:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa12:	f04f 0100 	mov.w	r1, #0
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa26:	4689      	mov	r9, r1
 800aa28:	4692      	mov	sl, r2
 800aa2a:	eb19 0005 	adds.w	r0, r9, r5
 800aa2e:	eb4a 0106 	adc.w	r1, sl, r6
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	461d      	mov	r5, r3
 800aa38:	f04f 0600 	mov.w	r6, #0
 800aa3c:	196b      	adds	r3, r5, r5
 800aa3e:	eb46 0406 	adc.w	r4, r6, r6
 800aa42:	461a      	mov	r2, r3
 800aa44:	4623      	mov	r3, r4
 800aa46:	f7f6 f91f 	bl	8000c88 <__aeabi_uldivmod>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	461a      	mov	r2, r3
 800aa50:	4b6a      	ldr	r3, [pc, #424]	; (800abfc <UART_SetConfig+0x384>)
 800aa52:	fba3 1302 	umull	r1, r3, r3, r2
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	2164      	movs	r1, #100	; 0x64
 800aa5a:	fb01 f303 	mul.w	r3, r1, r3
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	00db      	lsls	r3, r3, #3
 800aa62:	3332      	adds	r3, #50	; 0x32
 800aa64:	4a65      	ldr	r2, [pc, #404]	; (800abfc <UART_SetConfig+0x384>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	095b      	lsrs	r3, r3, #5
 800aa6c:	f003 0207 	and.w	r2, r3, #7
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4442      	add	r2, r8
 800aa76:	609a      	str	r2, [r3, #8]
 800aa78:	e26f      	b.n	800af5a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa7a:	f7fe f981 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800aa7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	461d      	mov	r5, r3
 800aa84:	f04f 0600 	mov.w	r6, #0
 800aa88:	46a8      	mov	r8, r5
 800aa8a:	46b1      	mov	r9, r6
 800aa8c:	eb18 0308 	adds.w	r3, r8, r8
 800aa90:	eb49 0409 	adc.w	r4, r9, r9
 800aa94:	4698      	mov	r8, r3
 800aa96:	46a1      	mov	r9, r4
 800aa98:	eb18 0805 	adds.w	r8, r8, r5
 800aa9c:	eb49 0906 	adc.w	r9, r9, r6
 800aaa0:	f04f 0100 	mov.w	r1, #0
 800aaa4:	f04f 0200 	mov.w	r2, #0
 800aaa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aaac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aab0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aab4:	4688      	mov	r8, r1
 800aab6:	4691      	mov	r9, r2
 800aab8:	eb18 0005 	adds.w	r0, r8, r5
 800aabc:	eb49 0106 	adc.w	r1, r9, r6
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	461d      	mov	r5, r3
 800aac6:	f04f 0600 	mov.w	r6, #0
 800aaca:	196b      	adds	r3, r5, r5
 800aacc:	eb46 0406 	adc.w	r4, r6, r6
 800aad0:	461a      	mov	r2, r3
 800aad2:	4623      	mov	r3, r4
 800aad4:	f7f6 f8d8 	bl	8000c88 <__aeabi_uldivmod>
 800aad8:	4603      	mov	r3, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	461a      	mov	r2, r3
 800aade:	4b47      	ldr	r3, [pc, #284]	; (800abfc <UART_SetConfig+0x384>)
 800aae0:	fba3 2302 	umull	r2, r3, r3, r2
 800aae4:	095b      	lsrs	r3, r3, #5
 800aae6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	461d      	mov	r5, r3
 800aaee:	f04f 0600 	mov.w	r6, #0
 800aaf2:	46a9      	mov	r9, r5
 800aaf4:	46b2      	mov	sl, r6
 800aaf6:	eb19 0309 	adds.w	r3, r9, r9
 800aafa:	eb4a 040a 	adc.w	r4, sl, sl
 800aafe:	4699      	mov	r9, r3
 800ab00:	46a2      	mov	sl, r4
 800ab02:	eb19 0905 	adds.w	r9, r9, r5
 800ab06:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab0a:	f04f 0100 	mov.w	r1, #0
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab1e:	4689      	mov	r9, r1
 800ab20:	4692      	mov	sl, r2
 800ab22:	eb19 0005 	adds.w	r0, r9, r5
 800ab26:	eb4a 0106 	adc.w	r1, sl, r6
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	461d      	mov	r5, r3
 800ab30:	f04f 0600 	mov.w	r6, #0
 800ab34:	196b      	adds	r3, r5, r5
 800ab36:	eb46 0406 	adc.w	r4, r6, r6
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	f7f6 f8a3 	bl	8000c88 <__aeabi_uldivmod>
 800ab42:	4603      	mov	r3, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	461a      	mov	r2, r3
 800ab48:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <UART_SetConfig+0x384>)
 800ab4a:	fba3 1302 	umull	r1, r3, r3, r2
 800ab4e:	095b      	lsrs	r3, r3, #5
 800ab50:	2164      	movs	r1, #100	; 0x64
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	1ad3      	subs	r3, r2, r3
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	3332      	adds	r3, #50	; 0x32
 800ab5c:	4a27      	ldr	r2, [pc, #156]	; (800abfc <UART_SetConfig+0x384>)
 800ab5e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab62:	095b      	lsrs	r3, r3, #5
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ab6a:	4498      	add	r8, r3
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	461d      	mov	r5, r3
 800ab70:	f04f 0600 	mov.w	r6, #0
 800ab74:	46a9      	mov	r9, r5
 800ab76:	46b2      	mov	sl, r6
 800ab78:	eb19 0309 	adds.w	r3, r9, r9
 800ab7c:	eb4a 040a 	adc.w	r4, sl, sl
 800ab80:	4699      	mov	r9, r3
 800ab82:	46a2      	mov	sl, r4
 800ab84:	eb19 0905 	adds.w	r9, r9, r5
 800ab88:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab8c:	f04f 0100 	mov.w	r1, #0
 800ab90:	f04f 0200 	mov.w	r2, #0
 800ab94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aba0:	4689      	mov	r9, r1
 800aba2:	4692      	mov	sl, r2
 800aba4:	eb19 0005 	adds.w	r0, r9, r5
 800aba8:	eb4a 0106 	adc.w	r1, sl, r6
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	461d      	mov	r5, r3
 800abb2:	f04f 0600 	mov.w	r6, #0
 800abb6:	196b      	adds	r3, r5, r5
 800abb8:	eb46 0406 	adc.w	r4, r6, r6
 800abbc:	461a      	mov	r2, r3
 800abbe:	4623      	mov	r3, r4
 800abc0:	f7f6 f862 	bl	8000c88 <__aeabi_uldivmod>
 800abc4:	4603      	mov	r3, r0
 800abc6:	460c      	mov	r4, r1
 800abc8:	461a      	mov	r2, r3
 800abca:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <UART_SetConfig+0x384>)
 800abcc:	fba3 1302 	umull	r1, r3, r3, r2
 800abd0:	095b      	lsrs	r3, r3, #5
 800abd2:	2164      	movs	r1, #100	; 0x64
 800abd4:	fb01 f303 	mul.w	r3, r1, r3
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	3332      	adds	r3, #50	; 0x32
 800abde:	4a07      	ldr	r2, [pc, #28]	; (800abfc <UART_SetConfig+0x384>)
 800abe0:	fba2 2303 	umull	r2, r3, r2, r3
 800abe4:	095b      	lsrs	r3, r3, #5
 800abe6:	f003 0207 	and.w	r2, r3, #7
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4442      	add	r2, r8
 800abf0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800abf2:	e1b2      	b.n	800af5a <UART_SetConfig+0x6e2>
 800abf4:	40011000 	.word	0x40011000
 800abf8:	40011400 	.word	0x40011400
 800abfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4ad7      	ldr	r2, [pc, #860]	; (800af64 <UART_SetConfig+0x6ec>)
 800ac06:	4293      	cmp	r3, r2
 800ac08:	d005      	beq.n	800ac16 <UART_SetConfig+0x39e>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4ad6      	ldr	r2, [pc, #856]	; (800af68 <UART_SetConfig+0x6f0>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	f040 80d1 	bne.w	800adb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac16:	f7fe f8c7 	bl	8008da8 <HAL_RCC_GetPCLK2Freq>
 800ac1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	469a      	mov	sl, r3
 800ac20:	f04f 0b00 	mov.w	fp, #0
 800ac24:	46d0      	mov	r8, sl
 800ac26:	46d9      	mov	r9, fp
 800ac28:	eb18 0308 	adds.w	r3, r8, r8
 800ac2c:	eb49 0409 	adc.w	r4, r9, r9
 800ac30:	4698      	mov	r8, r3
 800ac32:	46a1      	mov	r9, r4
 800ac34:	eb18 080a 	adds.w	r8, r8, sl
 800ac38:	eb49 090b 	adc.w	r9, r9, fp
 800ac3c:	f04f 0100 	mov.w	r1, #0
 800ac40:	f04f 0200 	mov.w	r2, #0
 800ac44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac50:	4688      	mov	r8, r1
 800ac52:	4691      	mov	r9, r2
 800ac54:	eb1a 0508 	adds.w	r5, sl, r8
 800ac58:	eb4b 0609 	adc.w	r6, fp, r9
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f04f 0200 	mov.w	r2, #0
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	f04f 0400 	mov.w	r4, #0
 800ac6e:	0094      	lsls	r4, r2, #2
 800ac70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac74:	008b      	lsls	r3, r1, #2
 800ac76:	461a      	mov	r2, r3
 800ac78:	4623      	mov	r3, r4
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	f7f6 f803 	bl	8000c88 <__aeabi_uldivmod>
 800ac82:	4603      	mov	r3, r0
 800ac84:	460c      	mov	r4, r1
 800ac86:	461a      	mov	r2, r3
 800ac88:	4bb8      	ldr	r3, [pc, #736]	; (800af6c <UART_SetConfig+0x6f4>)
 800ac8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ac8e:	095b      	lsrs	r3, r3, #5
 800ac90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	469b      	mov	fp, r3
 800ac98:	f04f 0c00 	mov.w	ip, #0
 800ac9c:	46d9      	mov	r9, fp
 800ac9e:	46e2      	mov	sl, ip
 800aca0:	eb19 0309 	adds.w	r3, r9, r9
 800aca4:	eb4a 040a 	adc.w	r4, sl, sl
 800aca8:	4699      	mov	r9, r3
 800acaa:	46a2      	mov	sl, r4
 800acac:	eb19 090b 	adds.w	r9, r9, fp
 800acb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acb4:	f04f 0100 	mov.w	r1, #0
 800acb8:	f04f 0200 	mov.w	r2, #0
 800acbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acc8:	4689      	mov	r9, r1
 800acca:	4692      	mov	sl, r2
 800accc:	eb1b 0509 	adds.w	r5, fp, r9
 800acd0:	eb4c 060a 	adc.w	r6, ip, sl
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	4619      	mov	r1, r3
 800acda:	f04f 0200 	mov.w	r2, #0
 800acde:	f04f 0300 	mov.w	r3, #0
 800ace2:	f04f 0400 	mov.w	r4, #0
 800ace6:	0094      	lsls	r4, r2, #2
 800ace8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acec:	008b      	lsls	r3, r1, #2
 800acee:	461a      	mov	r2, r3
 800acf0:	4623      	mov	r3, r4
 800acf2:	4628      	mov	r0, r5
 800acf4:	4631      	mov	r1, r6
 800acf6:	f7f5 ffc7 	bl	8000c88 <__aeabi_uldivmod>
 800acfa:	4603      	mov	r3, r0
 800acfc:	460c      	mov	r4, r1
 800acfe:	461a      	mov	r2, r3
 800ad00:	4b9a      	ldr	r3, [pc, #616]	; (800af6c <UART_SetConfig+0x6f4>)
 800ad02:	fba3 1302 	umull	r1, r3, r3, r2
 800ad06:	095b      	lsrs	r3, r3, #5
 800ad08:	2164      	movs	r1, #100	; 0x64
 800ad0a:	fb01 f303 	mul.w	r3, r1, r3
 800ad0e:	1ad3      	subs	r3, r2, r3
 800ad10:	011b      	lsls	r3, r3, #4
 800ad12:	3332      	adds	r3, #50	; 0x32
 800ad14:	4a95      	ldr	r2, [pc, #596]	; (800af6c <UART_SetConfig+0x6f4>)
 800ad16:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1a:	095b      	lsrs	r3, r3, #5
 800ad1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad20:	4498      	add	r8, r3
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	469b      	mov	fp, r3
 800ad26:	f04f 0c00 	mov.w	ip, #0
 800ad2a:	46d9      	mov	r9, fp
 800ad2c:	46e2      	mov	sl, ip
 800ad2e:	eb19 0309 	adds.w	r3, r9, r9
 800ad32:	eb4a 040a 	adc.w	r4, sl, sl
 800ad36:	4699      	mov	r9, r3
 800ad38:	46a2      	mov	sl, r4
 800ad3a:	eb19 090b 	adds.w	r9, r9, fp
 800ad3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad42:	f04f 0100 	mov.w	r1, #0
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad56:	4689      	mov	r9, r1
 800ad58:	4692      	mov	sl, r2
 800ad5a:	eb1b 0509 	adds.w	r5, fp, r9
 800ad5e:	eb4c 060a 	adc.w	r6, ip, sl
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	4619      	mov	r1, r3
 800ad68:	f04f 0200 	mov.w	r2, #0
 800ad6c:	f04f 0300 	mov.w	r3, #0
 800ad70:	f04f 0400 	mov.w	r4, #0
 800ad74:	0094      	lsls	r4, r2, #2
 800ad76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad7a:	008b      	lsls	r3, r1, #2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4623      	mov	r3, r4
 800ad80:	4628      	mov	r0, r5
 800ad82:	4631      	mov	r1, r6
 800ad84:	f7f5 ff80 	bl	8000c88 <__aeabi_uldivmod>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	4b77      	ldr	r3, [pc, #476]	; (800af6c <UART_SetConfig+0x6f4>)
 800ad90:	fba3 1302 	umull	r1, r3, r3, r2
 800ad94:	095b      	lsrs	r3, r3, #5
 800ad96:	2164      	movs	r1, #100	; 0x64
 800ad98:	fb01 f303 	mul.w	r3, r1, r3
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	011b      	lsls	r3, r3, #4
 800ada0:	3332      	adds	r3, #50	; 0x32
 800ada2:	4a72      	ldr	r2, [pc, #456]	; (800af6c <UART_SetConfig+0x6f4>)
 800ada4:	fba2 2303 	umull	r2, r3, r2, r3
 800ada8:	095b      	lsrs	r3, r3, #5
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4442      	add	r2, r8
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	e0d0      	b.n	800af5a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800adb8:	f7fd ffe2 	bl	8008d80 <HAL_RCC_GetPCLK1Freq>
 800adbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	469a      	mov	sl, r3
 800adc2:	f04f 0b00 	mov.w	fp, #0
 800adc6:	46d0      	mov	r8, sl
 800adc8:	46d9      	mov	r9, fp
 800adca:	eb18 0308 	adds.w	r3, r8, r8
 800adce:	eb49 0409 	adc.w	r4, r9, r9
 800add2:	4698      	mov	r8, r3
 800add4:	46a1      	mov	r9, r4
 800add6:	eb18 080a 	adds.w	r8, r8, sl
 800adda:	eb49 090b 	adc.w	r9, r9, fp
 800adde:	f04f 0100 	mov.w	r1, #0
 800ade2:	f04f 0200 	mov.w	r2, #0
 800ade6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800adea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800adee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800adf2:	4688      	mov	r8, r1
 800adf4:	4691      	mov	r9, r2
 800adf6:	eb1a 0508 	adds.w	r5, sl, r8
 800adfa:	eb4b 0609 	adc.w	r6, fp, r9
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	4619      	mov	r1, r3
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	f04f 0300 	mov.w	r3, #0
 800ae0c:	f04f 0400 	mov.w	r4, #0
 800ae10:	0094      	lsls	r4, r2, #2
 800ae12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae16:	008b      	lsls	r3, r1, #2
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4623      	mov	r3, r4
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	4631      	mov	r1, r6
 800ae20:	f7f5 ff32 	bl	8000c88 <__aeabi_uldivmod>
 800ae24:	4603      	mov	r3, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b50      	ldr	r3, [pc, #320]	; (800af6c <UART_SetConfig+0x6f4>)
 800ae2c:	fba3 2302 	umull	r2, r3, r3, r2
 800ae30:	095b      	lsrs	r3, r3, #5
 800ae32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	469b      	mov	fp, r3
 800ae3a:	f04f 0c00 	mov.w	ip, #0
 800ae3e:	46d9      	mov	r9, fp
 800ae40:	46e2      	mov	sl, ip
 800ae42:	eb19 0309 	adds.w	r3, r9, r9
 800ae46:	eb4a 040a 	adc.w	r4, sl, sl
 800ae4a:	4699      	mov	r9, r3
 800ae4c:	46a2      	mov	sl, r4
 800ae4e:	eb19 090b 	adds.w	r9, r9, fp
 800ae52:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae56:	f04f 0100 	mov.w	r1, #0
 800ae5a:	f04f 0200 	mov.w	r2, #0
 800ae5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae6a:	4689      	mov	r9, r1
 800ae6c:	4692      	mov	sl, r2
 800ae6e:	eb1b 0509 	adds.w	r5, fp, r9
 800ae72:	eb4c 060a 	adc.w	r6, ip, sl
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	f04f 0200 	mov.w	r2, #0
 800ae80:	f04f 0300 	mov.w	r3, #0
 800ae84:	f04f 0400 	mov.w	r4, #0
 800ae88:	0094      	lsls	r4, r2, #2
 800ae8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae8e:	008b      	lsls	r3, r1, #2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4623      	mov	r3, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	4631      	mov	r1, r6
 800ae98:	f7f5 fef6 	bl	8000c88 <__aeabi_uldivmod>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	461a      	mov	r2, r3
 800aea2:	4b32      	ldr	r3, [pc, #200]	; (800af6c <UART_SetConfig+0x6f4>)
 800aea4:	fba3 1302 	umull	r1, r3, r3, r2
 800aea8:	095b      	lsrs	r3, r3, #5
 800aeaa:	2164      	movs	r1, #100	; 0x64
 800aeac:	fb01 f303 	mul.w	r3, r1, r3
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	3332      	adds	r3, #50	; 0x32
 800aeb6:	4a2d      	ldr	r2, [pc, #180]	; (800af6c <UART_SetConfig+0x6f4>)
 800aeb8:	fba2 2303 	umull	r2, r3, r2, r3
 800aebc:	095b      	lsrs	r3, r3, #5
 800aebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aec2:	4498      	add	r8, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	469b      	mov	fp, r3
 800aec8:	f04f 0c00 	mov.w	ip, #0
 800aecc:	46d9      	mov	r9, fp
 800aece:	46e2      	mov	sl, ip
 800aed0:	eb19 0309 	adds.w	r3, r9, r9
 800aed4:	eb4a 040a 	adc.w	r4, sl, sl
 800aed8:	4699      	mov	r9, r3
 800aeda:	46a2      	mov	sl, r4
 800aedc:	eb19 090b 	adds.w	r9, r9, fp
 800aee0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aee4:	f04f 0100 	mov.w	r1, #0
 800aee8:	f04f 0200 	mov.w	r2, #0
 800aeec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aef8:	4689      	mov	r9, r1
 800aefa:	4692      	mov	sl, r2
 800aefc:	eb1b 0509 	adds.w	r5, fp, r9
 800af00:	eb4c 060a 	adc.w	r6, ip, sl
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	4619      	mov	r1, r3
 800af0a:	f04f 0200 	mov.w	r2, #0
 800af0e:	f04f 0300 	mov.w	r3, #0
 800af12:	f04f 0400 	mov.w	r4, #0
 800af16:	0094      	lsls	r4, r2, #2
 800af18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800af1c:	008b      	lsls	r3, r1, #2
 800af1e:	461a      	mov	r2, r3
 800af20:	4623      	mov	r3, r4
 800af22:	4628      	mov	r0, r5
 800af24:	4631      	mov	r1, r6
 800af26:	f7f5 feaf 	bl	8000c88 <__aeabi_uldivmod>
 800af2a:	4603      	mov	r3, r0
 800af2c:	460c      	mov	r4, r1
 800af2e:	461a      	mov	r2, r3
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <UART_SetConfig+0x6f4>)
 800af32:	fba3 1302 	umull	r1, r3, r3, r2
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	2164      	movs	r1, #100	; 0x64
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	3332      	adds	r3, #50	; 0x32
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <UART_SetConfig+0x6f4>)
 800af46:	fba2 2303 	umull	r2, r3, r2, r3
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	f003 020f 	and.w	r2, r3, #15
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4442      	add	r2, r8
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	e7ff      	b.n	800af5a <UART_SetConfig+0x6e2>
 800af5a:	bf00      	nop
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af64:	40011000 	.word	0x40011000
 800af68:	40011400 	.word	0x40011400
 800af6c:	51eb851f 	.word	0x51eb851f

0800af70 <cos>:
 800af70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af72:	ec51 0b10 	vmov	r0, r1, d0
 800af76:	4a1e      	ldr	r2, [pc, #120]	; (800aff0 <cos+0x80>)
 800af78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af7c:	4293      	cmp	r3, r2
 800af7e:	dc06      	bgt.n	800af8e <cos+0x1e>
 800af80:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800afe8 <cos+0x78>
 800af84:	f000 fc24 	bl	800b7d0 <__kernel_cos>
 800af88:	ec51 0b10 	vmov	r0, r1, d0
 800af8c:	e007      	b.n	800af9e <cos+0x2e>
 800af8e:	4a19      	ldr	r2, [pc, #100]	; (800aff4 <cos+0x84>)
 800af90:	4293      	cmp	r3, r2
 800af92:	dd09      	ble.n	800afa8 <cos+0x38>
 800af94:	ee10 2a10 	vmov	r2, s0
 800af98:	460b      	mov	r3, r1
 800af9a:	f7f5 f975 	bl	8000288 <__aeabi_dsub>
 800af9e:	ec41 0b10 	vmov	d0, r0, r1
 800afa2:	b005      	add	sp, #20
 800afa4:	f85d fb04 	ldr.w	pc, [sp], #4
 800afa8:	4668      	mov	r0, sp
 800afaa:	f000 f8f1 	bl	800b190 <__ieee754_rem_pio2>
 800afae:	f000 0003 	and.w	r0, r0, #3
 800afb2:	2801      	cmp	r0, #1
 800afb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800afb8:	ed9d 0b00 	vldr	d0, [sp]
 800afbc:	d007      	beq.n	800afce <cos+0x5e>
 800afbe:	2802      	cmp	r0, #2
 800afc0:	d00e      	beq.n	800afe0 <cos+0x70>
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0de      	beq.n	800af84 <cos+0x14>
 800afc6:	2001      	movs	r0, #1
 800afc8:	f001 f80a 	bl	800bfe0 <__kernel_sin>
 800afcc:	e7dc      	b.n	800af88 <cos+0x18>
 800afce:	f001 f807 	bl	800bfe0 <__kernel_sin>
 800afd2:	ec53 2b10 	vmov	r2, r3, d0
 800afd6:	ee10 0a10 	vmov	r0, s0
 800afda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afde:	e7de      	b.n	800af9e <cos+0x2e>
 800afe0:	f000 fbf6 	bl	800b7d0 <__kernel_cos>
 800afe4:	e7f5      	b.n	800afd2 <cos+0x62>
 800afe6:	bf00      	nop
	...
 800aff0:	3fe921fb 	.word	0x3fe921fb
 800aff4:	7fefffff 	.word	0x7fefffff

0800aff8 <sin>:
 800aff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800affa:	ec51 0b10 	vmov	r0, r1, d0
 800affe:	4a20      	ldr	r2, [pc, #128]	; (800b080 <sin+0x88>)
 800b000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b004:	4293      	cmp	r3, r2
 800b006:	dc07      	bgt.n	800b018 <sin+0x20>
 800b008:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b078 <sin+0x80>
 800b00c:	2000      	movs	r0, #0
 800b00e:	f000 ffe7 	bl	800bfe0 <__kernel_sin>
 800b012:	ec51 0b10 	vmov	r0, r1, d0
 800b016:	e007      	b.n	800b028 <sin+0x30>
 800b018:	4a1a      	ldr	r2, [pc, #104]	; (800b084 <sin+0x8c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	dd09      	ble.n	800b032 <sin+0x3a>
 800b01e:	ee10 2a10 	vmov	r2, s0
 800b022:	460b      	mov	r3, r1
 800b024:	f7f5 f930 	bl	8000288 <__aeabi_dsub>
 800b028:	ec41 0b10 	vmov	d0, r0, r1
 800b02c:	b005      	add	sp, #20
 800b02e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b032:	4668      	mov	r0, sp
 800b034:	f000 f8ac 	bl	800b190 <__ieee754_rem_pio2>
 800b038:	f000 0003 	and.w	r0, r0, #3
 800b03c:	2801      	cmp	r0, #1
 800b03e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b042:	ed9d 0b00 	vldr	d0, [sp]
 800b046:	d004      	beq.n	800b052 <sin+0x5a>
 800b048:	2802      	cmp	r0, #2
 800b04a:	d005      	beq.n	800b058 <sin+0x60>
 800b04c:	b970      	cbnz	r0, 800b06c <sin+0x74>
 800b04e:	2001      	movs	r0, #1
 800b050:	e7dd      	b.n	800b00e <sin+0x16>
 800b052:	f000 fbbd 	bl	800b7d0 <__kernel_cos>
 800b056:	e7dc      	b.n	800b012 <sin+0x1a>
 800b058:	2001      	movs	r0, #1
 800b05a:	f000 ffc1 	bl	800bfe0 <__kernel_sin>
 800b05e:	ec53 2b10 	vmov	r2, r3, d0
 800b062:	ee10 0a10 	vmov	r0, s0
 800b066:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b06a:	e7dd      	b.n	800b028 <sin+0x30>
 800b06c:	f000 fbb0 	bl	800b7d0 <__kernel_cos>
 800b070:	e7f5      	b.n	800b05e <sin+0x66>
 800b072:	bf00      	nop
 800b074:	f3af 8000 	nop.w
	...
 800b080:	3fe921fb 	.word	0x3fe921fb
 800b084:	7fefffff 	.word	0x7fefffff

0800b088 <cosf>:
 800b088:	ee10 3a10 	vmov	r3, s0
 800b08c:	b507      	push	{r0, r1, r2, lr}
 800b08e:	4a1c      	ldr	r2, [pc, #112]	; (800b100 <cosf+0x78>)
 800b090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b094:	4293      	cmp	r3, r2
 800b096:	dc04      	bgt.n	800b0a2 <cosf+0x1a>
 800b098:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b104 <cosf+0x7c>
 800b09c:	f001 f85a 	bl	800c154 <__kernel_cosf>
 800b0a0:	e004      	b.n	800b0ac <cosf+0x24>
 800b0a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b0a6:	db04      	blt.n	800b0b2 <cosf+0x2a>
 800b0a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b0ac:	b003      	add	sp, #12
 800b0ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0b2:	4668      	mov	r0, sp
 800b0b4:	f000 fa5e 	bl	800b574 <__ieee754_rem_pio2f>
 800b0b8:	f000 0003 	and.w	r0, r0, #3
 800b0bc:	2801      	cmp	r0, #1
 800b0be:	d007      	beq.n	800b0d0 <cosf+0x48>
 800b0c0:	2802      	cmp	r0, #2
 800b0c2:	d00e      	beq.n	800b0e2 <cosf+0x5a>
 800b0c4:	b9a0      	cbnz	r0, 800b0f0 <cosf+0x68>
 800b0c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0ca:	ed9d 0a00 	vldr	s0, [sp]
 800b0ce:	e7e5      	b.n	800b09c <cosf+0x14>
 800b0d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0d4:	ed9d 0a00 	vldr	s0, [sp]
 800b0d8:	f001 fb1c 	bl	800c714 <__kernel_sinf>
 800b0dc:	eeb1 0a40 	vneg.f32	s0, s0
 800b0e0:	e7e4      	b.n	800b0ac <cosf+0x24>
 800b0e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0e6:	ed9d 0a00 	vldr	s0, [sp]
 800b0ea:	f001 f833 	bl	800c154 <__kernel_cosf>
 800b0ee:	e7f5      	b.n	800b0dc <cosf+0x54>
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b0f6:	ed9d 0a00 	vldr	s0, [sp]
 800b0fa:	f001 fb0b 	bl	800c714 <__kernel_sinf>
 800b0fe:	e7d5      	b.n	800b0ac <cosf+0x24>
 800b100:	3f490fd8 	.word	0x3f490fd8
 800b104:	00000000 	.word	0x00000000

0800b108 <sinf>:
 800b108:	ee10 3a10 	vmov	r3, s0
 800b10c:	b507      	push	{r0, r1, r2, lr}
 800b10e:	4a1d      	ldr	r2, [pc, #116]	; (800b184 <sinf+0x7c>)
 800b110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b114:	4293      	cmp	r3, r2
 800b116:	dc05      	bgt.n	800b124 <sinf+0x1c>
 800b118:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b188 <sinf+0x80>
 800b11c:	2000      	movs	r0, #0
 800b11e:	f001 faf9 	bl	800c714 <__kernel_sinf>
 800b122:	e004      	b.n	800b12e <sinf+0x26>
 800b124:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b128:	db04      	blt.n	800b134 <sinf+0x2c>
 800b12a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b12e:	b003      	add	sp, #12
 800b130:	f85d fb04 	ldr.w	pc, [sp], #4
 800b134:	4668      	mov	r0, sp
 800b136:	f000 fa1d 	bl	800b574 <__ieee754_rem_pio2f>
 800b13a:	f000 0003 	and.w	r0, r0, #3
 800b13e:	2801      	cmp	r0, #1
 800b140:	d008      	beq.n	800b154 <sinf+0x4c>
 800b142:	2802      	cmp	r0, #2
 800b144:	d00d      	beq.n	800b162 <sinf+0x5a>
 800b146:	b9b0      	cbnz	r0, 800b176 <sinf+0x6e>
 800b148:	2001      	movs	r0, #1
 800b14a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b14e:	ed9d 0a00 	vldr	s0, [sp]
 800b152:	e7e4      	b.n	800b11e <sinf+0x16>
 800b154:	eddd 0a01 	vldr	s1, [sp, #4]
 800b158:	ed9d 0a00 	vldr	s0, [sp]
 800b15c:	f000 fffa 	bl	800c154 <__kernel_cosf>
 800b160:	e7e5      	b.n	800b12e <sinf+0x26>
 800b162:	2001      	movs	r0, #1
 800b164:	eddd 0a01 	vldr	s1, [sp, #4]
 800b168:	ed9d 0a00 	vldr	s0, [sp]
 800b16c:	f001 fad2 	bl	800c714 <__kernel_sinf>
 800b170:	eeb1 0a40 	vneg.f32	s0, s0
 800b174:	e7db      	b.n	800b12e <sinf+0x26>
 800b176:	eddd 0a01 	vldr	s1, [sp, #4]
 800b17a:	ed9d 0a00 	vldr	s0, [sp]
 800b17e:	f000 ffe9 	bl	800c154 <__kernel_cosf>
 800b182:	e7f5      	b.n	800b170 <sinf+0x68>
 800b184:	3f490fd8 	.word	0x3f490fd8
	...

0800b190 <__ieee754_rem_pio2>:
 800b190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b194:	ec57 6b10 	vmov	r6, r7, d0
 800b198:	4bc3      	ldr	r3, [pc, #780]	; (800b4a8 <__ieee754_rem_pio2+0x318>)
 800b19a:	b08d      	sub	sp, #52	; 0x34
 800b19c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b1a0:	4598      	cmp	r8, r3
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	9704      	str	r7, [sp, #16]
 800b1a6:	dc07      	bgt.n	800b1b8 <__ieee754_rem_pio2+0x28>
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	ed84 0b00 	vstr	d0, [r4]
 800b1b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b1b4:	2500      	movs	r5, #0
 800b1b6:	e027      	b.n	800b208 <__ieee754_rem_pio2+0x78>
 800b1b8:	4bbc      	ldr	r3, [pc, #752]	; (800b4ac <__ieee754_rem_pio2+0x31c>)
 800b1ba:	4598      	cmp	r8, r3
 800b1bc:	dc75      	bgt.n	800b2aa <__ieee754_rem_pio2+0x11a>
 800b1be:	9b04      	ldr	r3, [sp, #16]
 800b1c0:	4dbb      	ldr	r5, [pc, #748]	; (800b4b0 <__ieee754_rem_pio2+0x320>)
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	ee10 0a10 	vmov	r0, s0
 800b1c8:	a3a9      	add	r3, pc, #676	; (adr r3, 800b470 <__ieee754_rem_pio2+0x2e0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	4639      	mov	r1, r7
 800b1d0:	dd36      	ble.n	800b240 <__ieee754_rem_pio2+0xb0>
 800b1d2:	f7f5 f859 	bl	8000288 <__aeabi_dsub>
 800b1d6:	45a8      	cmp	r8, r5
 800b1d8:	4606      	mov	r6, r0
 800b1da:	460f      	mov	r7, r1
 800b1dc:	d018      	beq.n	800b210 <__ieee754_rem_pio2+0x80>
 800b1de:	a3a6      	add	r3, pc, #664	; (adr r3, 800b478 <__ieee754_rem_pio2+0x2e8>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 f850 	bl	8000288 <__aeabi_dsub>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	e9c4 2300 	strd	r2, r3, [r4]
 800b1f0:	4630      	mov	r0, r6
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	f7f5 f848 	bl	8000288 <__aeabi_dsub>
 800b1f8:	a39f      	add	r3, pc, #636	; (adr r3, 800b478 <__ieee754_rem_pio2+0x2e8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 f843 	bl	8000288 <__aeabi_dsub>
 800b202:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b206:	2501      	movs	r5, #1
 800b208:	4628      	mov	r0, r5
 800b20a:	b00d      	add	sp, #52	; 0x34
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	a39b      	add	r3, pc, #620	; (adr r3, 800b480 <__ieee754_rem_pio2+0x2f0>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f7f5 f837 	bl	8000288 <__aeabi_dsub>
 800b21a:	a39b      	add	r3, pc, #620	; (adr r3, 800b488 <__ieee754_rem_pio2+0x2f8>)
 800b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b220:	4606      	mov	r6, r0
 800b222:	460f      	mov	r7, r1
 800b224:	f7f5 f830 	bl	8000288 <__aeabi_dsub>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	e9c4 2300 	strd	r2, r3, [r4]
 800b230:	4630      	mov	r0, r6
 800b232:	4639      	mov	r1, r7
 800b234:	f7f5 f828 	bl	8000288 <__aeabi_dsub>
 800b238:	a393      	add	r3, pc, #588	; (adr r3, 800b488 <__ieee754_rem_pio2+0x2f8>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	e7de      	b.n	800b1fe <__ieee754_rem_pio2+0x6e>
 800b240:	f7f5 f824 	bl	800028c <__adddf3>
 800b244:	45a8      	cmp	r8, r5
 800b246:	4606      	mov	r6, r0
 800b248:	460f      	mov	r7, r1
 800b24a:	d016      	beq.n	800b27a <__ieee754_rem_pio2+0xea>
 800b24c:	a38a      	add	r3, pc, #552	; (adr r3, 800b478 <__ieee754_rem_pio2+0x2e8>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	f7f5 f81b 	bl	800028c <__adddf3>
 800b256:	4602      	mov	r2, r0
 800b258:	460b      	mov	r3, r1
 800b25a:	e9c4 2300 	strd	r2, r3, [r4]
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	f7f5 f811 	bl	8000288 <__aeabi_dsub>
 800b266:	a384      	add	r3, pc, #528	; (adr r3, 800b478 <__ieee754_rem_pio2+0x2e8>)
 800b268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26c:	f7f5 f80e 	bl	800028c <__adddf3>
 800b270:	f04f 35ff 	mov.w	r5, #4294967295
 800b274:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b278:	e7c6      	b.n	800b208 <__ieee754_rem_pio2+0x78>
 800b27a:	a381      	add	r3, pc, #516	; (adr r3, 800b480 <__ieee754_rem_pio2+0x2f0>)
 800b27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b280:	f7f5 f804 	bl	800028c <__adddf3>
 800b284:	a380      	add	r3, pc, #512	; (adr r3, 800b488 <__ieee754_rem_pio2+0x2f8>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	f7f4 fffd 	bl	800028c <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	e9c4 2300 	strd	r2, r3, [r4]
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f4 fff3 	bl	8000288 <__aeabi_dsub>
 800b2a2:	a379      	add	r3, pc, #484	; (adr r3, 800b488 <__ieee754_rem_pio2+0x2f8>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	e7e0      	b.n	800b26c <__ieee754_rem_pio2+0xdc>
 800b2aa:	4b82      	ldr	r3, [pc, #520]	; (800b4b4 <__ieee754_rem_pio2+0x324>)
 800b2ac:	4598      	cmp	r8, r3
 800b2ae:	f300 80d0 	bgt.w	800b452 <__ieee754_rem_pio2+0x2c2>
 800b2b2:	f001 fa77 	bl	800c7a4 <fabs>
 800b2b6:	ec57 6b10 	vmov	r6, r7, d0
 800b2ba:	ee10 0a10 	vmov	r0, s0
 800b2be:	a374      	add	r3, pc, #464	; (adr r3, 800b490 <__ieee754_rem_pio2+0x300>)
 800b2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f5 f997 	bl	80005f8 <__aeabi_dmul>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	4b7a      	ldr	r3, [pc, #488]	; (800b4b8 <__ieee754_rem_pio2+0x328>)
 800b2ce:	f7f4 ffdd 	bl	800028c <__adddf3>
 800b2d2:	f7f5 fc41 	bl	8000b58 <__aeabi_d2iz>
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	f7f5 f924 	bl	8000524 <__aeabi_i2d>
 800b2dc:	a364      	add	r3, pc, #400	; (adr r3, 800b470 <__ieee754_rem_pio2+0x2e0>)
 800b2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2e6:	f7f5 f987 	bl	80005f8 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	f7f4 ffc9 	bl	8000288 <__aeabi_dsub>
 800b2f6:	a360      	add	r3, pc, #384	; (adr r3, 800b478 <__ieee754_rem_pio2+0x2e8>)
 800b2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fc:	4682      	mov	sl, r0
 800b2fe:	468b      	mov	fp, r1
 800b300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b304:	f7f5 f978 	bl	80005f8 <__aeabi_dmul>
 800b308:	2d1f      	cmp	r5, #31
 800b30a:	4606      	mov	r6, r0
 800b30c:	460f      	mov	r7, r1
 800b30e:	dc0c      	bgt.n	800b32a <__ieee754_rem_pio2+0x19a>
 800b310:	1e6a      	subs	r2, r5, #1
 800b312:	4b6a      	ldr	r3, [pc, #424]	; (800b4bc <__ieee754_rem_pio2+0x32c>)
 800b314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b318:	4543      	cmp	r3, r8
 800b31a:	d006      	beq.n	800b32a <__ieee754_rem_pio2+0x19a>
 800b31c:	4632      	mov	r2, r6
 800b31e:	463b      	mov	r3, r7
 800b320:	4650      	mov	r0, sl
 800b322:	4659      	mov	r1, fp
 800b324:	f7f4 ffb0 	bl	8000288 <__aeabi_dsub>
 800b328:	e00e      	b.n	800b348 <__ieee754_rem_pio2+0x1b8>
 800b32a:	4632      	mov	r2, r6
 800b32c:	463b      	mov	r3, r7
 800b32e:	4650      	mov	r0, sl
 800b330:	4659      	mov	r1, fp
 800b332:	f7f4 ffa9 	bl	8000288 <__aeabi_dsub>
 800b336:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b33a:	9305      	str	r3, [sp, #20]
 800b33c:	9a05      	ldr	r2, [sp, #20]
 800b33e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	2b10      	cmp	r3, #16
 800b346:	dc02      	bgt.n	800b34e <__ieee754_rem_pio2+0x1be>
 800b348:	e9c4 0100 	strd	r0, r1, [r4]
 800b34c:	e039      	b.n	800b3c2 <__ieee754_rem_pio2+0x232>
 800b34e:	a34c      	add	r3, pc, #304	; (adr r3, 800b480 <__ieee754_rem_pio2+0x2f0>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	4606      	mov	r6, r0
 800b35e:	460f      	mov	r7, r1
 800b360:	4602      	mov	r2, r0
 800b362:	460b      	mov	r3, r1
 800b364:	4650      	mov	r0, sl
 800b366:	4659      	mov	r1, fp
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4680      	mov	r8, r0
 800b372:	4689      	mov	r9, r1
 800b374:	4650      	mov	r0, sl
 800b376:	4659      	mov	r1, fp
 800b378:	f7f4 ff86 	bl	8000288 <__aeabi_dsub>
 800b37c:	4632      	mov	r2, r6
 800b37e:	463b      	mov	r3, r7
 800b380:	f7f4 ff82 	bl	8000288 <__aeabi_dsub>
 800b384:	a340      	add	r3, pc, #256	; (adr r3, 800b488 <__ieee754_rem_pio2+0x2f8>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	4606      	mov	r6, r0
 800b38c:	460f      	mov	r7, r1
 800b38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	4632      	mov	r2, r6
 800b398:	463b      	mov	r3, r7
 800b39a:	f7f4 ff75 	bl	8000288 <__aeabi_dsub>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	460f      	mov	r7, r1
 800b3a6:	4640      	mov	r0, r8
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	f7f4 ff6d 	bl	8000288 <__aeabi_dsub>
 800b3ae:	9a05      	ldr	r2, [sp, #20]
 800b3b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	2b31      	cmp	r3, #49	; 0x31
 800b3b8:	dc20      	bgt.n	800b3fc <__ieee754_rem_pio2+0x26c>
 800b3ba:	e9c4 0100 	strd	r0, r1, [r4]
 800b3be:	46c2      	mov	sl, r8
 800b3c0:	46cb      	mov	fp, r9
 800b3c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b3c6:	4650      	mov	r0, sl
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	f7f4 ff5b 	bl	8000288 <__aeabi_dsub>
 800b3d2:	463b      	mov	r3, r7
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	f7f4 ff57 	bl	8000288 <__aeabi_dsub>
 800b3da:	9b04      	ldr	r3, [sp, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b3e2:	f6bf af11 	bge.w	800b208 <__ieee754_rem_pio2+0x78>
 800b3e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3ea:	6063      	str	r3, [r4, #4]
 800b3ec:	f8c4 8000 	str.w	r8, [r4]
 800b3f0:	60a0      	str	r0, [r4, #8]
 800b3f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b3f6:	60e3      	str	r3, [r4, #12]
 800b3f8:	426d      	negs	r5, r5
 800b3fa:	e705      	b.n	800b208 <__ieee754_rem_pio2+0x78>
 800b3fc:	a326      	add	r3, pc, #152	; (adr r3, 800b498 <__ieee754_rem_pio2+0x308>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	4606      	mov	r6, r0
 800b40c:	460f      	mov	r7, r1
 800b40e:	4602      	mov	r2, r0
 800b410:	460b      	mov	r3, r1
 800b412:	4640      	mov	r0, r8
 800b414:	4649      	mov	r1, r9
 800b416:	f7f4 ff37 	bl	8000288 <__aeabi_dsub>
 800b41a:	4602      	mov	r2, r0
 800b41c:	460b      	mov	r3, r1
 800b41e:	4682      	mov	sl, r0
 800b420:	468b      	mov	fp, r1
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f4 ff2f 	bl	8000288 <__aeabi_dsub>
 800b42a:	4632      	mov	r2, r6
 800b42c:	463b      	mov	r3, r7
 800b42e:	f7f4 ff2b 	bl	8000288 <__aeabi_dsub>
 800b432:	a31b      	add	r3, pc, #108	; (adr r3, 800b4a0 <__ieee754_rem_pio2+0x310>)
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	4606      	mov	r6, r0
 800b43a:	460f      	mov	r7, r1
 800b43c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b440:	f7f5 f8da 	bl	80005f8 <__aeabi_dmul>
 800b444:	4632      	mov	r2, r6
 800b446:	463b      	mov	r3, r7
 800b448:	f7f4 ff1e 	bl	8000288 <__aeabi_dsub>
 800b44c:	4606      	mov	r6, r0
 800b44e:	460f      	mov	r7, r1
 800b450:	e764      	b.n	800b31c <__ieee754_rem_pio2+0x18c>
 800b452:	4b1b      	ldr	r3, [pc, #108]	; (800b4c0 <__ieee754_rem_pio2+0x330>)
 800b454:	4598      	cmp	r8, r3
 800b456:	dd35      	ble.n	800b4c4 <__ieee754_rem_pio2+0x334>
 800b458:	ee10 2a10 	vmov	r2, s0
 800b45c:	463b      	mov	r3, r7
 800b45e:	4630      	mov	r0, r6
 800b460:	4639      	mov	r1, r7
 800b462:	f7f4 ff11 	bl	8000288 <__aeabi_dsub>
 800b466:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b46a:	e9c4 0100 	strd	r0, r1, [r4]
 800b46e:	e6a1      	b.n	800b1b4 <__ieee754_rem_pio2+0x24>
 800b470:	54400000 	.word	0x54400000
 800b474:	3ff921fb 	.word	0x3ff921fb
 800b478:	1a626331 	.word	0x1a626331
 800b47c:	3dd0b461 	.word	0x3dd0b461
 800b480:	1a600000 	.word	0x1a600000
 800b484:	3dd0b461 	.word	0x3dd0b461
 800b488:	2e037073 	.word	0x2e037073
 800b48c:	3ba3198a 	.word	0x3ba3198a
 800b490:	6dc9c883 	.word	0x6dc9c883
 800b494:	3fe45f30 	.word	0x3fe45f30
 800b498:	2e000000 	.word	0x2e000000
 800b49c:	3ba3198a 	.word	0x3ba3198a
 800b4a0:	252049c1 	.word	0x252049c1
 800b4a4:	397b839a 	.word	0x397b839a
 800b4a8:	3fe921fb 	.word	0x3fe921fb
 800b4ac:	4002d97b 	.word	0x4002d97b
 800b4b0:	3ff921fb 	.word	0x3ff921fb
 800b4b4:	413921fb 	.word	0x413921fb
 800b4b8:	3fe00000 	.word	0x3fe00000
 800b4bc:	080110b0 	.word	0x080110b0
 800b4c0:	7fefffff 	.word	0x7fefffff
 800b4c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b4c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b4cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	460f      	mov	r7, r1
 800b4d4:	f7f5 fb40 	bl	8000b58 <__aeabi_d2iz>
 800b4d8:	f7f5 f824 	bl	8000524 <__aeabi_i2d>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4630      	mov	r0, r6
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b4e8:	f7f4 fece 	bl	8000288 <__aeabi_dsub>
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4b1f      	ldr	r3, [pc, #124]	; (800b56c <__ieee754_rem_pio2+0x3dc>)
 800b4f0:	f7f5 f882 	bl	80005f8 <__aeabi_dmul>
 800b4f4:	460f      	mov	r7, r1
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	f7f5 fb2e 	bl	8000b58 <__aeabi_d2iz>
 800b4fc:	f7f5 f812 	bl	8000524 <__aeabi_i2d>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4630      	mov	r0, r6
 800b506:	4639      	mov	r1, r7
 800b508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b50c:	f7f4 febc 	bl	8000288 <__aeabi_dsub>
 800b510:	2200      	movs	r2, #0
 800b512:	4b16      	ldr	r3, [pc, #88]	; (800b56c <__ieee754_rem_pio2+0x3dc>)
 800b514:	f7f5 f870 	bl	80005f8 <__aeabi_dmul>
 800b518:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b51c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b520:	f04f 0803 	mov.w	r8, #3
 800b524:	2600      	movs	r6, #0
 800b526:	2700      	movs	r7, #0
 800b528:	4632      	mov	r2, r6
 800b52a:	463b      	mov	r3, r7
 800b52c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b530:	f108 3aff 	add.w	sl, r8, #4294967295
 800b534:	f7f5 fac8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b538:	b9b0      	cbnz	r0, 800b568 <__ieee754_rem_pio2+0x3d8>
 800b53a:	4b0d      	ldr	r3, [pc, #52]	; (800b570 <__ieee754_rem_pio2+0x3e0>)
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	2302      	movs	r3, #2
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	462a      	mov	r2, r5
 800b544:	4643      	mov	r3, r8
 800b546:	4621      	mov	r1, r4
 800b548:	a806      	add	r0, sp, #24
 800b54a:	f000 fa09 	bl	800b960 <__kernel_rem_pio2>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	2b00      	cmp	r3, #0
 800b552:	4605      	mov	r5, r0
 800b554:	f6bf ae58 	bge.w	800b208 <__ieee754_rem_pio2+0x78>
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b55e:	6063      	str	r3, [r4, #4]
 800b560:	68e3      	ldr	r3, [r4, #12]
 800b562:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b566:	e746      	b.n	800b3f6 <__ieee754_rem_pio2+0x266>
 800b568:	46d0      	mov	r8, sl
 800b56a:	e7dd      	b.n	800b528 <__ieee754_rem_pio2+0x398>
 800b56c:	41700000 	.word	0x41700000
 800b570:	08011130 	.word	0x08011130

0800b574 <__ieee754_rem_pio2f>:
 800b574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b576:	ee10 6a10 	vmov	r6, s0
 800b57a:	4b86      	ldr	r3, [pc, #536]	; (800b794 <__ieee754_rem_pio2f+0x220>)
 800b57c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b580:	429c      	cmp	r4, r3
 800b582:	b087      	sub	sp, #28
 800b584:	4605      	mov	r5, r0
 800b586:	dc05      	bgt.n	800b594 <__ieee754_rem_pio2f+0x20>
 800b588:	2300      	movs	r3, #0
 800b58a:	ed85 0a00 	vstr	s0, [r5]
 800b58e:	6043      	str	r3, [r0, #4]
 800b590:	2000      	movs	r0, #0
 800b592:	e020      	b.n	800b5d6 <__ieee754_rem_pio2f+0x62>
 800b594:	4b80      	ldr	r3, [pc, #512]	; (800b798 <__ieee754_rem_pio2f+0x224>)
 800b596:	429c      	cmp	r4, r3
 800b598:	dc38      	bgt.n	800b60c <__ieee754_rem_pio2f+0x98>
 800b59a:	2e00      	cmp	r6, #0
 800b59c:	f024 040f 	bic.w	r4, r4, #15
 800b5a0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b79c <__ieee754_rem_pio2f+0x228>
 800b5a4:	4b7e      	ldr	r3, [pc, #504]	; (800b7a0 <__ieee754_rem_pio2f+0x22c>)
 800b5a6:	dd18      	ble.n	800b5da <__ieee754_rem_pio2f+0x66>
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b5ae:	bf09      	itett	eq
 800b5b0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b7a4 <__ieee754_rem_pio2f+0x230>
 800b5b4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b7a8 <__ieee754_rem_pio2f+0x234>
 800b5b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b5bc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b7ac <__ieee754_rem_pio2f+0x238>
 800b5c0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b5c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5c8:	edc0 6a00 	vstr	s13, [r0]
 800b5cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	b007      	add	sp, #28
 800b5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5da:	429c      	cmp	r4, r3
 800b5dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b5e0:	bf09      	itett	eq
 800b5e2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b7a4 <__ieee754_rem_pio2f+0x230>
 800b5e6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b7a8 <__ieee754_rem_pio2f+0x234>
 800b5ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b5ee:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b7ac <__ieee754_rem_pio2f+0x238>
 800b5f2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b5f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5fa:	edc0 6a00 	vstr	s13, [r0]
 800b5fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b602:	edc0 7a01 	vstr	s15, [r0, #4]
 800b606:	f04f 30ff 	mov.w	r0, #4294967295
 800b60a:	e7e4      	b.n	800b5d6 <__ieee754_rem_pio2f+0x62>
 800b60c:	4b68      	ldr	r3, [pc, #416]	; (800b7b0 <__ieee754_rem_pio2f+0x23c>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	dc71      	bgt.n	800b6f6 <__ieee754_rem_pio2f+0x182>
 800b612:	f001 f9cb 	bl	800c9ac <fabsf>
 800b616:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b7b4 <__ieee754_rem_pio2f+0x240>
 800b61a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b61e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b626:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b62a:	ee17 0a90 	vmov	r0, s15
 800b62e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b79c <__ieee754_rem_pio2f+0x228>
 800b632:	eeb1 7a46 	vneg.f32	s14, s12
 800b636:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b63a:	281f      	cmp	r0, #31
 800b63c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b7a8 <__ieee754_rem_pio2f+0x234>
 800b640:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b644:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b648:	ee16 3a90 	vmov	r3, s13
 800b64c:	dc1c      	bgt.n	800b688 <__ieee754_rem_pio2f+0x114>
 800b64e:	1e47      	subs	r7, r0, #1
 800b650:	4959      	ldr	r1, [pc, #356]	; (800b7b8 <__ieee754_rem_pio2f+0x244>)
 800b652:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b656:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b65a:	428a      	cmp	r2, r1
 800b65c:	d014      	beq.n	800b688 <__ieee754_rem_pio2f+0x114>
 800b65e:	602b      	str	r3, [r5, #0]
 800b660:	ed95 7a00 	vldr	s14, [r5]
 800b664:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b668:	2e00      	cmp	r6, #0
 800b66a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b66e:	ed85 0a01 	vstr	s0, [r5, #4]
 800b672:	dab0      	bge.n	800b5d6 <__ieee754_rem_pio2f+0x62>
 800b674:	eeb1 7a47 	vneg.f32	s14, s14
 800b678:	eeb1 0a40 	vneg.f32	s0, s0
 800b67c:	ed85 7a00 	vstr	s14, [r5]
 800b680:	ed85 0a01 	vstr	s0, [r5, #4]
 800b684:	4240      	negs	r0, r0
 800b686:	e7a6      	b.n	800b5d6 <__ieee754_rem_pio2f+0x62>
 800b688:	15e4      	asrs	r4, r4, #23
 800b68a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b68e:	1aa2      	subs	r2, r4, r2
 800b690:	2a08      	cmp	r2, #8
 800b692:	dde4      	ble.n	800b65e <__ieee754_rem_pio2f+0xea>
 800b694:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b7a4 <__ieee754_rem_pio2f+0x230>
 800b698:	eef0 6a40 	vmov.f32	s13, s0
 800b69c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b6a0:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b6a4:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b6a8:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b7ac <__ieee754_rem_pio2f+0x238>
 800b6ac:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b6b0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b6b4:	eef0 7a40 	vmov.f32	s15, s0
 800b6b8:	ee15 3a90 	vmov	r3, s11
 800b6bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b6c0:	1aa4      	subs	r4, r4, r2
 800b6c2:	2c19      	cmp	r4, #25
 800b6c4:	dc04      	bgt.n	800b6d0 <__ieee754_rem_pio2f+0x15c>
 800b6c6:	edc5 5a00 	vstr	s11, [r5]
 800b6ca:	eeb0 0a66 	vmov.f32	s0, s13
 800b6ce:	e7c7      	b.n	800b660 <__ieee754_rem_pio2f+0xec>
 800b6d0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b7bc <__ieee754_rem_pio2f+0x248>
 800b6d4:	eeb0 0a66 	vmov.f32	s0, s13
 800b6d8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b6dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b6e0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b6e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b7c0 <__ieee754_rem_pio2f+0x24c>
 800b6e8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b6ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b6f0:	ed85 7a00 	vstr	s14, [r5]
 800b6f4:	e7b4      	b.n	800b660 <__ieee754_rem_pio2f+0xec>
 800b6f6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b6fa:	db06      	blt.n	800b70a <__ieee754_rem_pio2f+0x196>
 800b6fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b700:	edc0 7a01 	vstr	s15, [r0, #4]
 800b704:	edc0 7a00 	vstr	s15, [r0]
 800b708:	e742      	b.n	800b590 <__ieee754_rem_pio2f+0x1c>
 800b70a:	15e2      	asrs	r2, r4, #23
 800b70c:	3a86      	subs	r2, #134	; 0x86
 800b70e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b71a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b7c4 <__ieee754_rem_pio2f+0x250>
 800b71e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b722:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b726:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b72a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b72e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b732:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b73a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b73e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b742:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b74e:	d11e      	bne.n	800b78e <__ieee754_rem_pio2f+0x21a>
 800b750:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b758:	bf0c      	ite	eq
 800b75a:	2301      	moveq	r3, #1
 800b75c:	2302      	movne	r3, #2
 800b75e:	491a      	ldr	r1, [pc, #104]	; (800b7c8 <__ieee754_rem_pio2f+0x254>)
 800b760:	9101      	str	r1, [sp, #4]
 800b762:	2102      	movs	r1, #2
 800b764:	9100      	str	r1, [sp, #0]
 800b766:	a803      	add	r0, sp, #12
 800b768:	4629      	mov	r1, r5
 800b76a:	f000 fd51 	bl	800c210 <__kernel_rem_pio2f>
 800b76e:	2e00      	cmp	r6, #0
 800b770:	f6bf af31 	bge.w	800b5d6 <__ieee754_rem_pio2f+0x62>
 800b774:	edd5 7a00 	vldr	s15, [r5]
 800b778:	eef1 7a67 	vneg.f32	s15, s15
 800b77c:	edc5 7a00 	vstr	s15, [r5]
 800b780:	edd5 7a01 	vldr	s15, [r5, #4]
 800b784:	eef1 7a67 	vneg.f32	s15, s15
 800b788:	edc5 7a01 	vstr	s15, [r5, #4]
 800b78c:	e77a      	b.n	800b684 <__ieee754_rem_pio2f+0x110>
 800b78e:	2303      	movs	r3, #3
 800b790:	e7e5      	b.n	800b75e <__ieee754_rem_pio2f+0x1ea>
 800b792:	bf00      	nop
 800b794:	3f490fd8 	.word	0x3f490fd8
 800b798:	4016cbe3 	.word	0x4016cbe3
 800b79c:	3fc90f80 	.word	0x3fc90f80
 800b7a0:	3fc90fd0 	.word	0x3fc90fd0
 800b7a4:	37354400 	.word	0x37354400
 800b7a8:	37354443 	.word	0x37354443
 800b7ac:	2e85a308 	.word	0x2e85a308
 800b7b0:	43490f80 	.word	0x43490f80
 800b7b4:	3f22f984 	.word	0x3f22f984
 800b7b8:	08011238 	.word	0x08011238
 800b7bc:	2e85a300 	.word	0x2e85a300
 800b7c0:	248d3132 	.word	0x248d3132
 800b7c4:	43800000 	.word	0x43800000
 800b7c8:	080112b8 	.word	0x080112b8
 800b7cc:	00000000 	.word	0x00000000

0800b7d0 <__kernel_cos>:
 800b7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	ec59 8b10 	vmov	r8, r9, d0
 800b7d8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b7dc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b7e0:	ed2d 8b02 	vpush	{d8}
 800b7e4:	eeb0 8a41 	vmov.f32	s16, s2
 800b7e8:	eef0 8a61 	vmov.f32	s17, s3
 800b7ec:	da07      	bge.n	800b7fe <__kernel_cos+0x2e>
 800b7ee:	ee10 0a10 	vmov	r0, s0
 800b7f2:	4649      	mov	r1, r9
 800b7f4:	f7f5 f9b0 	bl	8000b58 <__aeabi_d2iz>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	f000 8089 	beq.w	800b910 <__kernel_cos+0x140>
 800b7fe:	4642      	mov	r2, r8
 800b800:	464b      	mov	r3, r9
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	2200      	movs	r2, #0
 800b80c:	4b4e      	ldr	r3, [pc, #312]	; (800b948 <__kernel_cos+0x178>)
 800b80e:	4604      	mov	r4, r0
 800b810:	460d      	mov	r5, r1
 800b812:	f7f4 fef1 	bl	80005f8 <__aeabi_dmul>
 800b816:	a340      	add	r3, pc, #256	; (adr r3, 800b918 <__kernel_cos+0x148>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4682      	mov	sl, r0
 800b81e:	468b      	mov	fp, r1
 800b820:	4620      	mov	r0, r4
 800b822:	4629      	mov	r1, r5
 800b824:	f7f4 fee8 	bl	80005f8 <__aeabi_dmul>
 800b828:	a33d      	add	r3, pc, #244	; (adr r3, 800b920 <__kernel_cos+0x150>)
 800b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82e:	f7f4 fd2d 	bl	800028c <__adddf3>
 800b832:	4622      	mov	r2, r4
 800b834:	462b      	mov	r3, r5
 800b836:	f7f4 fedf 	bl	80005f8 <__aeabi_dmul>
 800b83a:	a33b      	add	r3, pc, #236	; (adr r3, 800b928 <__kernel_cos+0x158>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f7f4 fd22 	bl	8000288 <__aeabi_dsub>
 800b844:	4622      	mov	r2, r4
 800b846:	462b      	mov	r3, r5
 800b848:	f7f4 fed6 	bl	80005f8 <__aeabi_dmul>
 800b84c:	a338      	add	r3, pc, #224	; (adr r3, 800b930 <__kernel_cos+0x160>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f4 fd1b 	bl	800028c <__adddf3>
 800b856:	4622      	mov	r2, r4
 800b858:	462b      	mov	r3, r5
 800b85a:	f7f4 fecd 	bl	80005f8 <__aeabi_dmul>
 800b85e:	a336      	add	r3, pc, #216	; (adr r3, 800b938 <__kernel_cos+0x168>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f7f4 fd10 	bl	8000288 <__aeabi_dsub>
 800b868:	4622      	mov	r2, r4
 800b86a:	462b      	mov	r3, r5
 800b86c:	f7f4 fec4 	bl	80005f8 <__aeabi_dmul>
 800b870:	a333      	add	r3, pc, #204	; (adr r3, 800b940 <__kernel_cos+0x170>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fd09 	bl	800028c <__adddf3>
 800b87a:	4622      	mov	r2, r4
 800b87c:	462b      	mov	r3, r5
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	4622      	mov	r2, r4
 800b884:	462b      	mov	r3, r5
 800b886:	f7f4 feb7 	bl	80005f8 <__aeabi_dmul>
 800b88a:	ec53 2b18 	vmov	r2, r3, d8
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 feaf 	bl	80005f8 <__aeabi_dmul>
 800b89a:	460b      	mov	r3, r1
 800b89c:	4602      	mov	r2, r0
 800b89e:	4629      	mov	r1, r5
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7f4 fcf1 	bl	8000288 <__aeabi_dsub>
 800b8a6:	4b29      	ldr	r3, [pc, #164]	; (800b94c <__kernel_cos+0x17c>)
 800b8a8:	429e      	cmp	r6, r3
 800b8aa:	4680      	mov	r8, r0
 800b8ac:	4689      	mov	r9, r1
 800b8ae:	dc11      	bgt.n	800b8d4 <__kernel_cos+0x104>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	4659      	mov	r1, fp
 800b8b8:	f7f4 fce6 	bl	8000288 <__aeabi_dsub>
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4924      	ldr	r1, [pc, #144]	; (800b950 <__kernel_cos+0x180>)
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	ecbd 8b02 	vpop	{d8}
 800b8cc:	ec41 0b10 	vmov	d0, r0, r1
 800b8d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d4:	4b1f      	ldr	r3, [pc, #124]	; (800b954 <__kernel_cos+0x184>)
 800b8d6:	491e      	ldr	r1, [pc, #120]	; (800b950 <__kernel_cos+0x180>)
 800b8d8:	429e      	cmp	r6, r3
 800b8da:	bfcc      	ite	gt
 800b8dc:	4d1e      	ldrgt	r5, [pc, #120]	; (800b958 <__kernel_cos+0x188>)
 800b8de:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b8e2:	2400      	movs	r4, #0
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	f7f4 fccd 	bl	8000288 <__aeabi_dsub>
 800b8ee:	4622      	mov	r2, r4
 800b8f0:	4606      	mov	r6, r0
 800b8f2:	460f      	mov	r7, r1
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	4650      	mov	r0, sl
 800b8f8:	4659      	mov	r1, fp
 800b8fa:	f7f4 fcc5 	bl	8000288 <__aeabi_dsub>
 800b8fe:	4642      	mov	r2, r8
 800b900:	464b      	mov	r3, r9
 800b902:	f7f4 fcc1 	bl	8000288 <__aeabi_dsub>
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	e7d9      	b.n	800b8c4 <__kernel_cos+0xf4>
 800b910:	2000      	movs	r0, #0
 800b912:	490f      	ldr	r1, [pc, #60]	; (800b950 <__kernel_cos+0x180>)
 800b914:	e7d8      	b.n	800b8c8 <__kernel_cos+0xf8>
 800b916:	bf00      	nop
 800b918:	be8838d4 	.word	0xbe8838d4
 800b91c:	bda8fae9 	.word	0xbda8fae9
 800b920:	bdb4b1c4 	.word	0xbdb4b1c4
 800b924:	3e21ee9e 	.word	0x3e21ee9e
 800b928:	809c52ad 	.word	0x809c52ad
 800b92c:	3e927e4f 	.word	0x3e927e4f
 800b930:	19cb1590 	.word	0x19cb1590
 800b934:	3efa01a0 	.word	0x3efa01a0
 800b938:	16c15177 	.word	0x16c15177
 800b93c:	3f56c16c 	.word	0x3f56c16c
 800b940:	5555554c 	.word	0x5555554c
 800b944:	3fa55555 	.word	0x3fa55555
 800b948:	3fe00000 	.word	0x3fe00000
 800b94c:	3fd33332 	.word	0x3fd33332
 800b950:	3ff00000 	.word	0x3ff00000
 800b954:	3fe90000 	.word	0x3fe90000
 800b958:	3fd20000 	.word	0x3fd20000
 800b95c:	00000000 	.word	0x00000000

0800b960 <__kernel_rem_pio2>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	ed2d 8b02 	vpush	{d8}
 800b968:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b96c:	1ed4      	subs	r4, r2, #3
 800b96e:	9308      	str	r3, [sp, #32]
 800b970:	9101      	str	r1, [sp, #4]
 800b972:	4bc5      	ldr	r3, [pc, #788]	; (800bc88 <__kernel_rem_pio2+0x328>)
 800b974:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b976:	9009      	str	r0, [sp, #36]	; 0x24
 800b978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	9b08      	ldr	r3, [sp, #32]
 800b980:	3b01      	subs	r3, #1
 800b982:	9307      	str	r3, [sp, #28]
 800b984:	2318      	movs	r3, #24
 800b986:	fb94 f4f3 	sdiv	r4, r4, r3
 800b98a:	f06f 0317 	mvn.w	r3, #23
 800b98e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b992:	fb04 3303 	mla	r3, r4, r3, r3
 800b996:	eb03 0a02 	add.w	sl, r3, r2
 800b99a:	9b04      	ldr	r3, [sp, #16]
 800b99c:	9a07      	ldr	r2, [sp, #28]
 800b99e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bc78 <__kernel_rem_pio2+0x318>
 800b9a2:	eb03 0802 	add.w	r8, r3, r2
 800b9a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b9a8:	1aa7      	subs	r7, r4, r2
 800b9aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b9ae:	ae22      	add	r6, sp, #136	; 0x88
 800b9b0:	2500      	movs	r5, #0
 800b9b2:	4545      	cmp	r5, r8
 800b9b4:	dd13      	ble.n	800b9de <__kernel_rem_pio2+0x7e>
 800b9b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800bc78 <__kernel_rem_pio2+0x318>
 800b9ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b9be:	2600      	movs	r6, #0
 800b9c0:	9b04      	ldr	r3, [sp, #16]
 800b9c2:	429e      	cmp	r6, r3
 800b9c4:	dc32      	bgt.n	800ba2c <__kernel_rem_pio2+0xcc>
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	9302      	str	r3, [sp, #8]
 800b9ca:	9b08      	ldr	r3, [sp, #32]
 800b9cc:	199d      	adds	r5, r3, r6
 800b9ce:	ab22      	add	r3, sp, #136	; 0x88
 800b9d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9d4:	9306      	str	r3, [sp, #24]
 800b9d6:	ec59 8b18 	vmov	r8, r9, d8
 800b9da:	2700      	movs	r7, #0
 800b9dc:	e01f      	b.n	800ba1e <__kernel_rem_pio2+0xbe>
 800b9de:	42ef      	cmn	r7, r5
 800b9e0:	d407      	bmi.n	800b9f2 <__kernel_rem_pio2+0x92>
 800b9e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9e6:	f7f4 fd9d 	bl	8000524 <__aeabi_i2d>
 800b9ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9ee:	3501      	adds	r5, #1
 800b9f0:	e7df      	b.n	800b9b2 <__kernel_rem_pio2+0x52>
 800b9f2:	ec51 0b18 	vmov	r0, r1, d8
 800b9f6:	e7f8      	b.n	800b9ea <__kernel_rem_pio2+0x8a>
 800b9f8:	9906      	ldr	r1, [sp, #24]
 800b9fa:	9d02      	ldr	r5, [sp, #8]
 800b9fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ba00:	9106      	str	r1, [sp, #24]
 800ba02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ba06:	9502      	str	r5, [sp, #8]
 800ba08:	f7f4 fdf6 	bl	80005f8 <__aeabi_dmul>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4640      	mov	r0, r8
 800ba12:	4649      	mov	r1, r9
 800ba14:	f7f4 fc3a 	bl	800028c <__adddf3>
 800ba18:	3701      	adds	r7, #1
 800ba1a:	4680      	mov	r8, r0
 800ba1c:	4689      	mov	r9, r1
 800ba1e:	9b07      	ldr	r3, [sp, #28]
 800ba20:	429f      	cmp	r7, r3
 800ba22:	dde9      	ble.n	800b9f8 <__kernel_rem_pio2+0x98>
 800ba24:	e8eb 8902 	strd	r8, r9, [fp], #8
 800ba28:	3601      	adds	r6, #1
 800ba2a:	e7c9      	b.n	800b9c0 <__kernel_rem_pio2+0x60>
 800ba2c:	9b04      	ldr	r3, [sp, #16]
 800ba2e:	aa0e      	add	r2, sp, #56	; 0x38
 800ba30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba34:	930c      	str	r3, [sp, #48]	; 0x30
 800ba36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ba38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba3c:	9c04      	ldr	r4, [sp, #16]
 800ba3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba40:	ab9a      	add	r3, sp, #616	; 0x268
 800ba42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ba46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ba52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ba56:	ab9a      	add	r3, sp, #616	; 0x268
 800ba58:	445b      	add	r3, fp
 800ba5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ba5e:	2500      	movs	r5, #0
 800ba60:	1b63      	subs	r3, r4, r5
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	dc78      	bgt.n	800bb58 <__kernel_rem_pio2+0x1f8>
 800ba66:	4650      	mov	r0, sl
 800ba68:	ec49 8b10 	vmov	d0, r8, r9
 800ba6c:	f000 ff28 	bl	800c8c0 <scalbn>
 800ba70:	ec57 6b10 	vmov	r6, r7, d0
 800ba74:	2200      	movs	r2, #0
 800ba76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba7a:	ee10 0a10 	vmov	r0, s0
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	ec41 0b10 	vmov	d0, r0, r1
 800ba88:	f000 fe96 	bl	800c7b8 <floor>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	ec51 0b10 	vmov	r0, r1, d0
 800ba92:	4b7e      	ldr	r3, [pc, #504]	; (800bc8c <__kernel_rem_pio2+0x32c>)
 800ba94:	f7f4 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	4639      	mov	r1, r7
 800baa0:	f7f4 fbf2 	bl	8000288 <__aeabi_dsub>
 800baa4:	460f      	mov	r7, r1
 800baa6:	4606      	mov	r6, r0
 800baa8:	f7f5 f856 	bl	8000b58 <__aeabi_d2iz>
 800baac:	9006      	str	r0, [sp, #24]
 800baae:	f7f4 fd39 	bl	8000524 <__aeabi_i2d>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4630      	mov	r0, r6
 800bab8:	4639      	mov	r1, r7
 800baba:	f7f4 fbe5 	bl	8000288 <__aeabi_dsub>
 800babe:	f1ba 0f00 	cmp.w	sl, #0
 800bac2:	4606      	mov	r6, r0
 800bac4:	460f      	mov	r7, r1
 800bac6:	dd6c      	ble.n	800bba2 <__kernel_rem_pio2+0x242>
 800bac8:	1e62      	subs	r2, r4, #1
 800baca:	ab0e      	add	r3, sp, #56	; 0x38
 800bacc:	f1ca 0118 	rsb	r1, sl, #24
 800bad0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bad4:	9d06      	ldr	r5, [sp, #24]
 800bad6:	fa40 f301 	asr.w	r3, r0, r1
 800bada:	441d      	add	r5, r3
 800badc:	408b      	lsls	r3, r1
 800bade:	1ac0      	subs	r0, r0, r3
 800bae0:	ab0e      	add	r3, sp, #56	; 0x38
 800bae2:	9506      	str	r5, [sp, #24]
 800bae4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bae8:	f1ca 0317 	rsb	r3, sl, #23
 800baec:	fa40 f303 	asr.w	r3, r0, r3
 800baf0:	9302      	str	r3, [sp, #8]
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dd62      	ble.n	800bbbe <__kernel_rem_pio2+0x25e>
 800baf8:	9b06      	ldr	r3, [sp, #24]
 800bafa:	2200      	movs	r2, #0
 800bafc:	3301      	adds	r3, #1
 800bafe:	9306      	str	r3, [sp, #24]
 800bb00:	4615      	mov	r5, r2
 800bb02:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb06:	4294      	cmp	r4, r2
 800bb08:	f300 8095 	bgt.w	800bc36 <__kernel_rem_pio2+0x2d6>
 800bb0c:	f1ba 0f00 	cmp.w	sl, #0
 800bb10:	dd07      	ble.n	800bb22 <__kernel_rem_pio2+0x1c2>
 800bb12:	f1ba 0f01 	cmp.w	sl, #1
 800bb16:	f000 80a2 	beq.w	800bc5e <__kernel_rem_pio2+0x2fe>
 800bb1a:	f1ba 0f02 	cmp.w	sl, #2
 800bb1e:	f000 80c1 	beq.w	800bca4 <__kernel_rem_pio2+0x344>
 800bb22:	9b02      	ldr	r3, [sp, #8]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d14a      	bne.n	800bbbe <__kernel_rem_pio2+0x25e>
 800bb28:	4632      	mov	r2, r6
 800bb2a:	463b      	mov	r3, r7
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	4958      	ldr	r1, [pc, #352]	; (800bc90 <__kernel_rem_pio2+0x330>)
 800bb30:	f7f4 fbaa 	bl	8000288 <__aeabi_dsub>
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	2d00      	cmp	r5, #0
 800bb3a:	d040      	beq.n	800bbbe <__kernel_rem_pio2+0x25e>
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bc80 <__kernel_rem_pio2+0x320>
 800bb42:	f000 febd 	bl	800c8c0 <scalbn>
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	ec53 2b10 	vmov	r2, r3, d0
 800bb4e:	f7f4 fb9b 	bl	8000288 <__aeabi_dsub>
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	e032      	b.n	800bbbe <__kernel_rem_pio2+0x25e>
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4b4e      	ldr	r3, [pc, #312]	; (800bc94 <__kernel_rem_pio2+0x334>)
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	f7f4 fd4a 	bl	80005f8 <__aeabi_dmul>
 800bb64:	f7f4 fff8 	bl	8000b58 <__aeabi_d2iz>
 800bb68:	f7f4 fcdc 	bl	8000524 <__aeabi_i2d>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4b4a      	ldr	r3, [pc, #296]	; (800bc98 <__kernel_rem_pio2+0x338>)
 800bb70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb74:	f7f4 fd40 	bl	80005f8 <__aeabi_dmul>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4640      	mov	r0, r8
 800bb7e:	4649      	mov	r1, r9
 800bb80:	f7f4 fb82 	bl	8000288 <__aeabi_dsub>
 800bb84:	f7f4 ffe8 	bl	8000b58 <__aeabi_d2iz>
 800bb88:	ab0e      	add	r3, sp, #56	; 0x38
 800bb8a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800bb8e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bb92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb96:	f7f4 fb79 	bl	800028c <__adddf3>
 800bb9a:	3501      	adds	r5, #1
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4689      	mov	r9, r1
 800bba0:	e75e      	b.n	800ba60 <__kernel_rem_pio2+0x100>
 800bba2:	d105      	bne.n	800bbb0 <__kernel_rem_pio2+0x250>
 800bba4:	1e63      	subs	r3, r4, #1
 800bba6:	aa0e      	add	r2, sp, #56	; 0x38
 800bba8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bbac:	15c3      	asrs	r3, r0, #23
 800bbae:	e79f      	b.n	800baf0 <__kernel_rem_pio2+0x190>
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	4b3a      	ldr	r3, [pc, #232]	; (800bc9c <__kernel_rem_pio2+0x33c>)
 800bbb4:	f7f4 ffa6 	bl	8000b04 <__aeabi_dcmpge>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d139      	bne.n	800bc30 <__kernel_rem_pio2+0x2d0>
 800bbbc:	9002      	str	r0, [sp, #8]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	f7f4 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	f000 80c7 	beq.w	800bd5e <__kernel_rem_pio2+0x3fe>
 800bbd0:	1e65      	subs	r5, r4, #1
 800bbd2:	462b      	mov	r3, r5
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	9904      	ldr	r1, [sp, #16]
 800bbd8:	428b      	cmp	r3, r1
 800bbda:	da6a      	bge.n	800bcb2 <__kernel_rem_pio2+0x352>
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	f000 8088 	beq.w	800bcf2 <__kernel_rem_pio2+0x392>
 800bbe2:	ab0e      	add	r3, sp, #56	; 0x38
 800bbe4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bbe8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	f000 80b4 	beq.w	800bd5a <__kernel_rem_pio2+0x3fa>
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800bc80 <__kernel_rem_pio2+0x320>
 800bbf8:	f000 fe62 	bl	800c8c0 <scalbn>
 800bbfc:	00ec      	lsls	r4, r5, #3
 800bbfe:	ab72      	add	r3, sp, #456	; 0x1c8
 800bc00:	191e      	adds	r6, r3, r4
 800bc02:	ec59 8b10 	vmov	r8, r9, d0
 800bc06:	f106 0a08 	add.w	sl, r6, #8
 800bc0a:	462f      	mov	r7, r5
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	f280 80df 	bge.w	800bdd0 <__kernel_rem_pio2+0x470>
 800bc12:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800bc78 <__kernel_rem_pio2+0x318>
 800bc16:	f04f 0a00 	mov.w	sl, #0
 800bc1a:	eba5 030a 	sub.w	r3, r5, sl
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f2c0 810a 	blt.w	800be38 <__kernel_rem_pio2+0x4d8>
 800bc24:	f8df b078 	ldr.w	fp, [pc, #120]	; 800bca0 <__kernel_rem_pio2+0x340>
 800bc28:	ec59 8b18 	vmov	r8, r9, d8
 800bc2c:	2700      	movs	r7, #0
 800bc2e:	e0f5      	b.n	800be1c <__kernel_rem_pio2+0x4bc>
 800bc30:	2302      	movs	r3, #2
 800bc32:	9302      	str	r3, [sp, #8]
 800bc34:	e760      	b.n	800baf8 <__kernel_rem_pio2+0x198>
 800bc36:	ab0e      	add	r3, sp, #56	; 0x38
 800bc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3c:	b94d      	cbnz	r5, 800bc52 <__kernel_rem_pio2+0x2f2>
 800bc3e:	b12b      	cbz	r3, 800bc4c <__kernel_rem_pio2+0x2ec>
 800bc40:	a80e      	add	r0, sp, #56	; 0x38
 800bc42:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	461d      	mov	r5, r3
 800bc50:	e759      	b.n	800bb06 <__kernel_rem_pio2+0x1a6>
 800bc52:	a80e      	add	r0, sp, #56	; 0x38
 800bc54:	1acb      	subs	r3, r1, r3
 800bc56:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800bc5a:	462b      	mov	r3, r5
 800bc5c:	e7f6      	b.n	800bc4c <__kernel_rem_pio2+0x2ec>
 800bc5e:	1e62      	subs	r2, r4, #1
 800bc60:	ab0e      	add	r3, sp, #56	; 0x38
 800bc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc6a:	a90e      	add	r1, sp, #56	; 0x38
 800bc6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc70:	e757      	b.n	800bb22 <__kernel_rem_pio2+0x1c2>
 800bc72:	bf00      	nop
 800bc74:	f3af 8000 	nop.w
	...
 800bc84:	3ff00000 	.word	0x3ff00000
 800bc88:	08011610 	.word	0x08011610
 800bc8c:	40200000 	.word	0x40200000
 800bc90:	3ff00000 	.word	0x3ff00000
 800bc94:	3e700000 	.word	0x3e700000
 800bc98:	41700000 	.word	0x41700000
 800bc9c:	3fe00000 	.word	0x3fe00000
 800bca0:	080115d0 	.word	0x080115d0
 800bca4:	1e62      	subs	r2, r4, #1
 800bca6:	ab0e      	add	r3, sp, #56	; 0x38
 800bca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcb0:	e7db      	b.n	800bc6a <__kernel_rem_pio2+0x30a>
 800bcb2:	a90e      	add	r1, sp, #56	; 0x38
 800bcb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	e78b      	b.n	800bbd6 <__kernel_rem_pio2+0x276>
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bcc4:	2900      	cmp	r1, #0
 800bcc6:	d0fa      	beq.n	800bcbe <__kernel_rem_pio2+0x35e>
 800bcc8:	9a08      	ldr	r2, [sp, #32]
 800bcca:	4422      	add	r2, r4
 800bccc:	00d2      	lsls	r2, r2, #3
 800bcce:	a922      	add	r1, sp, #136	; 0x88
 800bcd0:	18e3      	adds	r3, r4, r3
 800bcd2:	9206      	str	r2, [sp, #24]
 800bcd4:	440a      	add	r2, r1
 800bcd6:	9302      	str	r3, [sp, #8]
 800bcd8:	f10b 0108 	add.w	r1, fp, #8
 800bcdc:	f102 0308 	add.w	r3, r2, #8
 800bce0:	1c66      	adds	r6, r4, #1
 800bce2:	910a      	str	r1, [sp, #40]	; 0x28
 800bce4:	2500      	movs	r5, #0
 800bce6:	930d      	str	r3, [sp, #52]	; 0x34
 800bce8:	9b02      	ldr	r3, [sp, #8]
 800bcea:	42b3      	cmp	r3, r6
 800bcec:	da04      	bge.n	800bcf8 <__kernel_rem_pio2+0x398>
 800bcee:	461c      	mov	r4, r3
 800bcf0:	e6a6      	b.n	800ba40 <__kernel_rem_pio2+0xe0>
 800bcf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e7e3      	b.n	800bcc0 <__kernel_rem_pio2+0x360>
 800bcf8:	9b06      	ldr	r3, [sp, #24]
 800bcfa:	18ef      	adds	r7, r5, r3
 800bcfc:	ab22      	add	r3, sp, #136	; 0x88
 800bcfe:	441f      	add	r7, r3
 800bd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd02:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bd06:	f7f4 fc0d 	bl	8000524 <__aeabi_i2d>
 800bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0c:	461c      	mov	r4, r3
 800bd0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd10:	e9c7 0100 	strd	r0, r1, [r7]
 800bd14:	eb03 0b05 	add.w	fp, r3, r5
 800bd18:	2700      	movs	r7, #0
 800bd1a:	f04f 0800 	mov.w	r8, #0
 800bd1e:	f04f 0900 	mov.w	r9, #0
 800bd22:	9b07      	ldr	r3, [sp, #28]
 800bd24:	429f      	cmp	r7, r3
 800bd26:	dd08      	ble.n	800bd3a <__kernel_rem_pio2+0x3da>
 800bd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd2a:	aa72      	add	r2, sp, #456	; 0x1c8
 800bd2c:	18eb      	adds	r3, r5, r3
 800bd2e:	4413      	add	r3, r2
 800bd30:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800bd34:	3601      	adds	r6, #1
 800bd36:	3508      	adds	r5, #8
 800bd38:	e7d6      	b.n	800bce8 <__kernel_rem_pio2+0x388>
 800bd3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bd3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bd42:	f7f4 fc59 	bl	80005f8 <__aeabi_dmul>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	4649      	mov	r1, r9
 800bd4e:	f7f4 fa9d 	bl	800028c <__adddf3>
 800bd52:	3701      	adds	r7, #1
 800bd54:	4680      	mov	r8, r0
 800bd56:	4689      	mov	r9, r1
 800bd58:	e7e3      	b.n	800bd22 <__kernel_rem_pio2+0x3c2>
 800bd5a:	3d01      	subs	r5, #1
 800bd5c:	e741      	b.n	800bbe2 <__kernel_rem_pio2+0x282>
 800bd5e:	f1ca 0000 	rsb	r0, sl, #0
 800bd62:	ec47 6b10 	vmov	d0, r6, r7
 800bd66:	f000 fdab 	bl	800c8c0 <scalbn>
 800bd6a:	ec57 6b10 	vmov	r6, r7, d0
 800bd6e:	2200      	movs	r2, #0
 800bd70:	4b99      	ldr	r3, [pc, #612]	; (800bfd8 <__kernel_rem_pio2+0x678>)
 800bd72:	ee10 0a10 	vmov	r0, s0
 800bd76:	4639      	mov	r1, r7
 800bd78:	f7f4 fec4 	bl	8000b04 <__aeabi_dcmpge>
 800bd7c:	b1f8      	cbz	r0, 800bdbe <__kernel_rem_pio2+0x45e>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4b96      	ldr	r3, [pc, #600]	; (800bfdc <__kernel_rem_pio2+0x67c>)
 800bd82:	4630      	mov	r0, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	f7f4 fc37 	bl	80005f8 <__aeabi_dmul>
 800bd8a:	f7f4 fee5 	bl	8000b58 <__aeabi_d2iz>
 800bd8e:	4680      	mov	r8, r0
 800bd90:	f7f4 fbc8 	bl	8000524 <__aeabi_i2d>
 800bd94:	2200      	movs	r2, #0
 800bd96:	4b90      	ldr	r3, [pc, #576]	; (800bfd8 <__kernel_rem_pio2+0x678>)
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	4602      	mov	r2, r0
 800bda0:	4639      	mov	r1, r7
 800bda2:	4630      	mov	r0, r6
 800bda4:	f7f4 fa70 	bl	8000288 <__aeabi_dsub>
 800bda8:	f7f4 fed6 	bl	8000b58 <__aeabi_d2iz>
 800bdac:	1c65      	adds	r5, r4, #1
 800bdae:	ab0e      	add	r3, sp, #56	; 0x38
 800bdb0:	f10a 0a18 	add.w	sl, sl, #24
 800bdb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bdb8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bdbc:	e719      	b.n	800bbf2 <__kernel_rem_pio2+0x292>
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	f7f4 fec9 	bl	8000b58 <__aeabi_d2iz>
 800bdc6:	ab0e      	add	r3, sp, #56	; 0x38
 800bdc8:	4625      	mov	r5, r4
 800bdca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bdce:	e710      	b.n	800bbf2 <__kernel_rem_pio2+0x292>
 800bdd0:	ab0e      	add	r3, sp, #56	; 0x38
 800bdd2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bdd6:	f7f4 fba5 	bl	8000524 <__aeabi_i2d>
 800bdda:	4642      	mov	r2, r8
 800bddc:	464b      	mov	r3, r9
 800bdde:	f7f4 fc0b 	bl	80005f8 <__aeabi_dmul>
 800bde2:	2200      	movs	r2, #0
 800bde4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bde8:	4b7c      	ldr	r3, [pc, #496]	; (800bfdc <__kernel_rem_pio2+0x67c>)
 800bdea:	4640      	mov	r0, r8
 800bdec:	4649      	mov	r1, r9
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	3f01      	subs	r7, #1
 800bdf4:	4680      	mov	r8, r0
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	e708      	b.n	800bc0c <__kernel_rem_pio2+0x2ac>
 800bdfa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800be06:	f7f4 fbf7 	bl	80005f8 <__aeabi_dmul>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4640      	mov	r0, r8
 800be10:	4649      	mov	r1, r9
 800be12:	f7f4 fa3b 	bl	800028c <__adddf3>
 800be16:	3701      	adds	r7, #1
 800be18:	4680      	mov	r8, r0
 800be1a:	4689      	mov	r9, r1
 800be1c:	9b04      	ldr	r3, [sp, #16]
 800be1e:	429f      	cmp	r7, r3
 800be20:	dc01      	bgt.n	800be26 <__kernel_rem_pio2+0x4c6>
 800be22:	45ba      	cmp	sl, r7
 800be24:	dae9      	bge.n	800bdfa <__kernel_rem_pio2+0x49a>
 800be26:	ab4a      	add	r3, sp, #296	; 0x128
 800be28:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be2c:	e9c3 8900 	strd	r8, r9, [r3]
 800be30:	f10a 0a01 	add.w	sl, sl, #1
 800be34:	3e08      	subs	r6, #8
 800be36:	e6f0      	b.n	800bc1a <__kernel_rem_pio2+0x2ba>
 800be38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d85b      	bhi.n	800bef6 <__kernel_rem_pio2+0x596>
 800be3e:	e8df f003 	tbb	[pc, r3]
 800be42:	264a      	.short	0x264a
 800be44:	0226      	.short	0x0226
 800be46:	ab9a      	add	r3, sp, #616	; 0x268
 800be48:	441c      	add	r4, r3
 800be4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800be4e:	46a2      	mov	sl, r4
 800be50:	46ab      	mov	fp, r5
 800be52:	f1bb 0f00 	cmp.w	fp, #0
 800be56:	dc6c      	bgt.n	800bf32 <__kernel_rem_pio2+0x5d2>
 800be58:	46a2      	mov	sl, r4
 800be5a:	46ab      	mov	fp, r5
 800be5c:	f1bb 0f01 	cmp.w	fp, #1
 800be60:	f300 8086 	bgt.w	800bf70 <__kernel_rem_pio2+0x610>
 800be64:	2000      	movs	r0, #0
 800be66:	2100      	movs	r1, #0
 800be68:	2d01      	cmp	r5, #1
 800be6a:	f300 80a0 	bgt.w	800bfae <__kernel_rem_pio2+0x64e>
 800be6e:	9b02      	ldr	r3, [sp, #8]
 800be70:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800be74:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f040 809e 	bne.w	800bfba <__kernel_rem_pio2+0x65a>
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	e9c3 7800 	strd	r7, r8, [r3]
 800be84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800be88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be8c:	e033      	b.n	800bef6 <__kernel_rem_pio2+0x596>
 800be8e:	3408      	adds	r4, #8
 800be90:	ab4a      	add	r3, sp, #296	; 0x128
 800be92:	441c      	add	r4, r3
 800be94:	462e      	mov	r6, r5
 800be96:	2000      	movs	r0, #0
 800be98:	2100      	movs	r1, #0
 800be9a:	2e00      	cmp	r6, #0
 800be9c:	da3a      	bge.n	800bf14 <__kernel_rem_pio2+0x5b4>
 800be9e:	9b02      	ldr	r3, [sp, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d03d      	beq.n	800bf20 <__kernel_rem_pio2+0x5c0>
 800bea4:	4602      	mov	r2, r0
 800bea6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beaa:	9c01      	ldr	r4, [sp, #4]
 800beac:	e9c4 2300 	strd	r2, r3, [r4]
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800beb8:	f7f4 f9e6 	bl	8000288 <__aeabi_dsub>
 800bebc:	ae4c      	add	r6, sp, #304	; 0x130
 800bebe:	2401      	movs	r4, #1
 800bec0:	42a5      	cmp	r5, r4
 800bec2:	da30      	bge.n	800bf26 <__kernel_rem_pio2+0x5c6>
 800bec4:	9b02      	ldr	r3, [sp, #8]
 800bec6:	b113      	cbz	r3, 800bece <__kernel_rem_pio2+0x56e>
 800bec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800becc:	4619      	mov	r1, r3
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bed4:	e00f      	b.n	800bef6 <__kernel_rem_pio2+0x596>
 800bed6:	ab9a      	add	r3, sp, #616	; 0x268
 800bed8:	441c      	add	r4, r3
 800beda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bede:	2000      	movs	r0, #0
 800bee0:	2100      	movs	r1, #0
 800bee2:	2d00      	cmp	r5, #0
 800bee4:	da10      	bge.n	800bf08 <__kernel_rem_pio2+0x5a8>
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	b113      	cbz	r3, 800bef0 <__kernel_rem_pio2+0x590>
 800beea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800beee:	4619      	mov	r1, r3
 800bef0:	9b01      	ldr	r3, [sp, #4]
 800bef2:	e9c3 0100 	strd	r0, r1, [r3]
 800bef6:	9b06      	ldr	r3, [sp, #24]
 800bef8:	f003 0007 	and.w	r0, r3, #7
 800befc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bf00:	ecbd 8b02 	vpop	{d8}
 800bf04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf08:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf0c:	f7f4 f9be 	bl	800028c <__adddf3>
 800bf10:	3d01      	subs	r5, #1
 800bf12:	e7e6      	b.n	800bee2 <__kernel_rem_pio2+0x582>
 800bf14:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf18:	f7f4 f9b8 	bl	800028c <__adddf3>
 800bf1c:	3e01      	subs	r6, #1
 800bf1e:	e7bc      	b.n	800be9a <__kernel_rem_pio2+0x53a>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	e7c1      	b.n	800beaa <__kernel_rem_pio2+0x54a>
 800bf26:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bf2a:	f7f4 f9af 	bl	800028c <__adddf3>
 800bf2e:	3401      	adds	r4, #1
 800bf30:	e7c6      	b.n	800bec0 <__kernel_rem_pio2+0x560>
 800bf32:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bf36:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	ec53 2b17 	vmov	r2, r3, d7
 800bf40:	4649      	mov	r1, r9
 800bf42:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf46:	f7f4 f9a1 	bl	800028c <__adddf3>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4606      	mov	r6, r0
 800bf50:	460f      	mov	r7, r1
 800bf52:	4640      	mov	r0, r8
 800bf54:	4649      	mov	r1, r9
 800bf56:	f7f4 f997 	bl	8000288 <__aeabi_dsub>
 800bf5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf5e:	f7f4 f995 	bl	800028c <__adddf3>
 800bf62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf66:	e9ca 0100 	strd	r0, r1, [sl]
 800bf6a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bf6e:	e770      	b.n	800be52 <__kernel_rem_pio2+0x4f2>
 800bf70:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bf74:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bf78:	4630      	mov	r0, r6
 800bf7a:	ec53 2b17 	vmov	r2, r3, d7
 800bf7e:	4639      	mov	r1, r7
 800bf80:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf84:	f7f4 f982 	bl	800028c <__adddf3>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4689      	mov	r9, r1
 800bf90:	4630      	mov	r0, r6
 800bf92:	4639      	mov	r1, r7
 800bf94:	f7f4 f978 	bl	8000288 <__aeabi_dsub>
 800bf98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf9c:	f7f4 f976 	bl	800028c <__adddf3>
 800bfa0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfa4:	e9ca 0100 	strd	r0, r1, [sl]
 800bfa8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bfac:	e756      	b.n	800be5c <__kernel_rem_pio2+0x4fc>
 800bfae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfb2:	f7f4 f96b 	bl	800028c <__adddf3>
 800bfb6:	3d01      	subs	r5, #1
 800bfb8:	e756      	b.n	800be68 <__kernel_rem_pio2+0x508>
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	9a01      	ldr	r2, [sp, #4]
 800bfbe:	601f      	str	r7, [r3, #0]
 800bfc0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bfc4:	605c      	str	r4, [r3, #4]
 800bfc6:	609d      	str	r5, [r3, #8]
 800bfc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bfcc:	60d3      	str	r3, [r2, #12]
 800bfce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd2:	6110      	str	r0, [r2, #16]
 800bfd4:	6153      	str	r3, [r2, #20]
 800bfd6:	e78e      	b.n	800bef6 <__kernel_rem_pio2+0x596>
 800bfd8:	41700000 	.word	0x41700000
 800bfdc:	3e700000 	.word	0x3e700000

0800bfe0 <__kernel_sin>:
 800bfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfe4:	ec55 4b10 	vmov	r4, r5, d0
 800bfe8:	b085      	sub	sp, #20
 800bfea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bfee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bff2:	ed8d 1b00 	vstr	d1, [sp]
 800bff6:	9002      	str	r0, [sp, #8]
 800bff8:	da06      	bge.n	800c008 <__kernel_sin+0x28>
 800bffa:	ee10 0a10 	vmov	r0, s0
 800bffe:	4629      	mov	r1, r5
 800c000:	f7f4 fdaa 	bl	8000b58 <__aeabi_d2iz>
 800c004:	2800      	cmp	r0, #0
 800c006:	d051      	beq.n	800c0ac <__kernel_sin+0xcc>
 800c008:	4622      	mov	r2, r4
 800c00a:	462b      	mov	r3, r5
 800c00c:	4620      	mov	r0, r4
 800c00e:	4629      	mov	r1, r5
 800c010:	f7f4 faf2 	bl	80005f8 <__aeabi_dmul>
 800c014:	4682      	mov	sl, r0
 800c016:	468b      	mov	fp, r1
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	a341      	add	r3, pc, #260	; (adr r3, 800c12c <__kernel_sin+0x14c>)
 800c026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02a:	4680      	mov	r8, r0
 800c02c:	4689      	mov	r9, r1
 800c02e:	4650      	mov	r0, sl
 800c030:	4659      	mov	r1, fp
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	a33f      	add	r3, pc, #252	; (adr r3, 800c134 <__kernel_sin+0x154>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 f924 	bl	8000288 <__aeabi_dsub>
 800c040:	4652      	mov	r2, sl
 800c042:	465b      	mov	r3, fp
 800c044:	f7f4 fad8 	bl	80005f8 <__aeabi_dmul>
 800c048:	a33c      	add	r3, pc, #240	; (adr r3, 800c13c <__kernel_sin+0x15c>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f91d 	bl	800028c <__adddf3>
 800c052:	4652      	mov	r2, sl
 800c054:	465b      	mov	r3, fp
 800c056:	f7f4 facf 	bl	80005f8 <__aeabi_dmul>
 800c05a:	a33a      	add	r3, pc, #232	; (adr r3, 800c144 <__kernel_sin+0x164>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f912 	bl	8000288 <__aeabi_dsub>
 800c064:	4652      	mov	r2, sl
 800c066:	465b      	mov	r3, fp
 800c068:	f7f4 fac6 	bl	80005f8 <__aeabi_dmul>
 800c06c:	a337      	add	r3, pc, #220	; (adr r3, 800c14c <__kernel_sin+0x16c>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f90b 	bl	800028c <__adddf3>
 800c076:	9b02      	ldr	r3, [sp, #8]
 800c078:	4606      	mov	r6, r0
 800c07a:	460f      	mov	r7, r1
 800c07c:	b9db      	cbnz	r3, 800c0b6 <__kernel_sin+0xd6>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	4650      	mov	r0, sl
 800c084:	4659      	mov	r1, fp
 800c086:	f7f4 fab7 	bl	80005f8 <__aeabi_dmul>
 800c08a:	a325      	add	r3, pc, #148	; (adr r3, 800c120 <__kernel_sin+0x140>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	f7f4 f8fa 	bl	8000288 <__aeabi_dsub>
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	f7f4 faae 	bl	80005f8 <__aeabi_dmul>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4629      	mov	r1, r5
 800c0a4:	f7f4 f8f2 	bl	800028c <__adddf3>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	460d      	mov	r5, r1
 800c0ac:	ec45 4b10 	vmov	d0, r4, r5
 800c0b0:	b005      	add	sp, #20
 800c0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	4b1b      	ldr	r3, [pc, #108]	; (800c128 <__kernel_sin+0x148>)
 800c0ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0be:	f7f4 fa9b 	bl	80005f8 <__aeabi_dmul>
 800c0c2:	4632      	mov	r2, r6
 800c0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0c8:	463b      	mov	r3, r7
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	f7f4 fa93 	bl	80005f8 <__aeabi_dmul>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0da:	f7f4 f8d5 	bl	8000288 <__aeabi_dsub>
 800c0de:	4652      	mov	r2, sl
 800c0e0:	465b      	mov	r3, fp
 800c0e2:	f7f4 fa89 	bl	80005f8 <__aeabi_dmul>
 800c0e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ea:	f7f4 f8cd 	bl	8000288 <__aeabi_dsub>
 800c0ee:	a30c      	add	r3, pc, #48	; (adr r3, 800c120 <__kernel_sin+0x140>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4640      	mov	r0, r8
 800c0fa:	4649      	mov	r1, r9
 800c0fc:	f7f4 fa7c 	bl	80005f8 <__aeabi_dmul>
 800c100:	4602      	mov	r2, r0
 800c102:	460b      	mov	r3, r1
 800c104:	4630      	mov	r0, r6
 800c106:	4639      	mov	r1, r7
 800c108:	f7f4 f8c0 	bl	800028c <__adddf3>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4620      	mov	r0, r4
 800c112:	4629      	mov	r1, r5
 800c114:	f7f4 f8b8 	bl	8000288 <__aeabi_dsub>
 800c118:	e7c6      	b.n	800c0a8 <__kernel_sin+0xc8>
 800c11a:	bf00      	nop
 800c11c:	f3af 8000 	nop.w
 800c120:	55555549 	.word	0x55555549
 800c124:	3fc55555 	.word	0x3fc55555
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	5acfd57c 	.word	0x5acfd57c
 800c130:	3de5d93a 	.word	0x3de5d93a
 800c134:	8a2b9ceb 	.word	0x8a2b9ceb
 800c138:	3e5ae5e6 	.word	0x3e5ae5e6
 800c13c:	57b1fe7d 	.word	0x57b1fe7d
 800c140:	3ec71de3 	.word	0x3ec71de3
 800c144:	19c161d5 	.word	0x19c161d5
 800c148:	3f2a01a0 	.word	0x3f2a01a0
 800c14c:	1110f8a6 	.word	0x1110f8a6
 800c150:	3f811111 	.word	0x3f811111

0800c154 <__kernel_cosf>:
 800c154:	ee10 3a10 	vmov	r3, s0
 800c158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c15c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c160:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c164:	da05      	bge.n	800c172 <__kernel_cosf+0x1e>
 800c166:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c16a:	ee17 2a90 	vmov	r2, s15
 800c16e:	2a00      	cmp	r2, #0
 800c170:	d03b      	beq.n	800c1ea <__kernel_cosf+0x96>
 800c172:	ee20 6a00 	vmul.f32	s12, s0, s0
 800c176:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c17a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c1f0 <__kernel_cosf+0x9c>
 800c17e:	4a1d      	ldr	r2, [pc, #116]	; (800c1f4 <__kernel_cosf+0xa0>)
 800c180:	ee66 7a07 	vmul.f32	s15, s12, s14
 800c184:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c1f8 <__kernel_cosf+0xa4>
 800c188:	eea6 7a25 	vfma.f32	s14, s12, s11
 800c18c:	4293      	cmp	r3, r2
 800c18e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800c1fc <__kernel_cosf+0xa8>
 800c192:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c196:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800c200 <__kernel_cosf+0xac>
 800c19a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c19e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800c204 <__kernel_cosf+0xb0>
 800c1a2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800c1a6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800c208 <__kernel_cosf+0xb4>
 800c1aa:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c1ae:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800c1b2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c1b6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800c1ba:	dc04      	bgt.n	800c1c6 <__kernel_cosf+0x72>
 800c1bc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800c1c0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800c1c4:	4770      	bx	lr
 800c1c6:	4a11      	ldr	r2, [pc, #68]	; (800c20c <__kernel_cosf+0xb8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	bfda      	itte	le
 800c1cc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800c1d0:	ee07 3a10 	vmovle	s14, r3
 800c1d4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800c1d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1dc:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800c1e0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c1e4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c1e8:	4770      	bx	lr
 800c1ea:	eeb0 0a66 	vmov.f32	s0, s13
 800c1ee:	4770      	bx	lr
 800c1f0:	ad47d74e 	.word	0xad47d74e
 800c1f4:	3e999999 	.word	0x3e999999
 800c1f8:	310f74f6 	.word	0x310f74f6
 800c1fc:	b493f27c 	.word	0xb493f27c
 800c200:	37d00d01 	.word	0x37d00d01
 800c204:	bab60b61 	.word	0xbab60b61
 800c208:	3d2aaaab 	.word	0x3d2aaaab
 800c20c:	3f480000 	.word	0x3f480000

0800c210 <__kernel_rem_pio2f>:
 800c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	ed2d 8b04 	vpush	{d8-d9}
 800c218:	b0d7      	sub	sp, #348	; 0x15c
 800c21a:	469b      	mov	fp, r3
 800c21c:	460e      	mov	r6, r1
 800c21e:	4bbe      	ldr	r3, [pc, #760]	; (800c518 <__kernel_rem_pio2f+0x308>)
 800c220:	9964      	ldr	r1, [sp, #400]	; 0x190
 800c222:	9002      	str	r0, [sp, #8]
 800c224:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c228:	9865      	ldr	r0, [sp, #404]	; 0x194
 800c22a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c22e:	1ed1      	subs	r1, r2, #3
 800c230:	2308      	movs	r3, #8
 800c232:	fb91 f1f3 	sdiv	r1, r1, r3
 800c236:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800c23a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800c23e:	1c4c      	adds	r4, r1, #1
 800c240:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c244:	eba1 050a 	sub.w	r5, r1, sl
 800c248:	aa1a      	add	r2, sp, #104	; 0x68
 800c24a:	eb09 070a 	add.w	r7, r9, sl
 800c24e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c252:	4696      	mov	lr, r2
 800c254:	2300      	movs	r3, #0
 800c256:	42bb      	cmp	r3, r7
 800c258:	dd0f      	ble.n	800c27a <__kernel_rem_pio2f+0x6a>
 800c25a:	af42      	add	r7, sp, #264	; 0x108
 800c25c:	2200      	movs	r2, #0
 800c25e:	454a      	cmp	r2, r9
 800c260:	dc27      	bgt.n	800c2b2 <__kernel_rem_pio2f+0xa2>
 800c262:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c266:	eb0b 0302 	add.w	r3, fp, r2
 800c26a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c26e:	9d02      	ldr	r5, [sp, #8]
 800c270:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c274:	f04f 0c00 	mov.w	ip, #0
 800c278:	e015      	b.n	800c2a6 <__kernel_rem_pio2f+0x96>
 800c27a:	42dd      	cmn	r5, r3
 800c27c:	bf5d      	ittte	pl
 800c27e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c282:	ee07 2a90 	vmovpl	s15, r2
 800c286:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c28a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c28e:	ecee 7a01 	vstmia	lr!, {s15}
 800c292:	3301      	adds	r3, #1
 800c294:	e7df      	b.n	800c256 <__kernel_rem_pio2f+0x46>
 800c296:	ecf5 6a01 	vldmia	r5!, {s13}
 800c29a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c29e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2a2:	f10c 0c01 	add.w	ip, ip, #1
 800c2a6:	45d4      	cmp	ip, sl
 800c2a8:	ddf5      	ble.n	800c296 <__kernel_rem_pio2f+0x86>
 800c2aa:	ece7 7a01 	vstmia	r7!, {s15}
 800c2ae:	3201      	adds	r2, #1
 800c2b0:	e7d5      	b.n	800c25e <__kernel_rem_pio2f+0x4e>
 800c2b2:	ab06      	add	r3, sp, #24
 800c2b4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c524 <__kernel_rem_pio2f+0x314>
 800c2be:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c520 <__kernel_rem_pio2f+0x310>
 800c2c2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c2c6:	9303      	str	r3, [sp, #12]
 800c2c8:	464d      	mov	r5, r9
 800c2ca:	ab56      	add	r3, sp, #344	; 0x158
 800c2cc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c2d0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c2d4:	3f01      	subs	r7, #1
 800c2d6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c2da:	00bf      	lsls	r7, r7, #2
 800c2dc:	ab56      	add	r3, sp, #344	; 0x158
 800c2de:	19da      	adds	r2, r3, r7
 800c2e0:	3a4c      	subs	r2, #76	; 0x4c
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	1ae9      	subs	r1, r5, r3
 800c2e6:	2900      	cmp	r1, #0
 800c2e8:	dc4c      	bgt.n	800c384 <__kernel_rem_pio2f+0x174>
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 fba8 	bl	800ca40 <scalbnf>
 800c2f0:	eeb0 8a40 	vmov.f32	s16, s0
 800c2f4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c2f8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c2fc:	f000 fb5e 	bl	800c9bc <floorf>
 800c300:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c304:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c308:	2c00      	cmp	r4, #0
 800c30a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c30e:	edcd 7a01 	vstr	s15, [sp, #4]
 800c312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c316:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c31a:	dd48      	ble.n	800c3ae <__kernel_rem_pio2f+0x19e>
 800c31c:	1e69      	subs	r1, r5, #1
 800c31e:	ab06      	add	r3, sp, #24
 800c320:	f1c4 0008 	rsb	r0, r4, #8
 800c324:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c328:	9a01      	ldr	r2, [sp, #4]
 800c32a:	fa4c f300 	asr.w	r3, ip, r0
 800c32e:	441a      	add	r2, r3
 800c330:	4083      	lsls	r3, r0
 800c332:	9201      	str	r2, [sp, #4]
 800c334:	ebac 0203 	sub.w	r2, ip, r3
 800c338:	ab06      	add	r3, sp, #24
 800c33a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c33e:	f1c4 0307 	rsb	r3, r4, #7
 800c342:	fa42 f803 	asr.w	r8, r2, r3
 800c346:	f1b8 0f00 	cmp.w	r8, #0
 800c34a:	dd41      	ble.n	800c3d0 <__kernel_rem_pio2f+0x1c0>
 800c34c:	9b01      	ldr	r3, [sp, #4]
 800c34e:	2000      	movs	r0, #0
 800c350:	3301      	adds	r3, #1
 800c352:	9301      	str	r3, [sp, #4]
 800c354:	4601      	mov	r1, r0
 800c356:	4285      	cmp	r5, r0
 800c358:	dc6d      	bgt.n	800c436 <__kernel_rem_pio2f+0x226>
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	dd04      	ble.n	800c368 <__kernel_rem_pio2f+0x158>
 800c35e:	2c01      	cmp	r4, #1
 800c360:	d07e      	beq.n	800c460 <__kernel_rem_pio2f+0x250>
 800c362:	2c02      	cmp	r4, #2
 800c364:	f000 8086 	beq.w	800c474 <__kernel_rem_pio2f+0x264>
 800c368:	f1b8 0f02 	cmp.w	r8, #2
 800c36c:	d130      	bne.n	800c3d0 <__kernel_rem_pio2f+0x1c0>
 800c36e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c372:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c376:	b359      	cbz	r1, 800c3d0 <__kernel_rem_pio2f+0x1c0>
 800c378:	4620      	mov	r0, r4
 800c37a:	f000 fb61 	bl	800ca40 <scalbnf>
 800c37e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c382:	e025      	b.n	800c3d0 <__kernel_rem_pio2f+0x1c0>
 800c384:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c388:	a806      	add	r0, sp, #24
 800c38a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c38e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c392:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c396:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c39a:	ee10 1a10 	vmov	r1, s0
 800c39e:	ed32 0a01 	vldmdb	r2!, {s0}
 800c3a2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c3a6:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	e79a      	b.n	800c2e4 <__kernel_rem_pio2f+0xd4>
 800c3ae:	d106      	bne.n	800c3be <__kernel_rem_pio2f+0x1ae>
 800c3b0:	1e6b      	subs	r3, r5, #1
 800c3b2:	aa06      	add	r2, sp, #24
 800c3b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c3b8:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c3bc:	e7c3      	b.n	800c346 <__kernel_rem_pio2f+0x136>
 800c3be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	da31      	bge.n	800c430 <__kernel_rem_pio2f+0x220>
 800c3cc:	f04f 0800 	mov.w	r8, #0
 800c3d0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d8:	f040 80a8 	bne.w	800c52c <__kernel_rem_pio2f+0x31c>
 800c3dc:	1e6b      	subs	r3, r5, #1
 800c3de:	4618      	mov	r0, r3
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4548      	cmp	r0, r9
 800c3e4:	da4d      	bge.n	800c482 <__kernel_rem_pio2f+0x272>
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	f000 8087 	beq.w	800c4fa <__kernel_rem_pio2f+0x2ea>
 800c3ec:	aa06      	add	r2, sp, #24
 800c3ee:	3c08      	subs	r4, #8
 800c3f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c3f4:	2900      	cmp	r1, #0
 800c3f6:	f000 808d 	beq.w	800c514 <__kernel_rem_pio2f+0x304>
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c400:	9302      	str	r3, [sp, #8]
 800c402:	f000 fb1d 	bl	800ca40 <scalbnf>
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c524 <__kernel_rem_pio2f+0x314>
 800c40c:	0099      	lsls	r1, r3, #2
 800c40e:	aa42      	add	r2, sp, #264	; 0x108
 800c410:	1850      	adds	r0, r2, r1
 800c412:	1d05      	adds	r5, r0, #4
 800c414:	461c      	mov	r4, r3
 800c416:	2c00      	cmp	r4, #0
 800c418:	f280 80b8 	bge.w	800c58c <__kernel_rem_pio2f+0x37c>
 800c41c:	2500      	movs	r5, #0
 800c41e:	1b5c      	subs	r4, r3, r5
 800c420:	2c00      	cmp	r4, #0
 800c422:	f2c0 80d8 	blt.w	800c5d6 <__kernel_rem_pio2f+0x3c6>
 800c426:	4f3d      	ldr	r7, [pc, #244]	; (800c51c <__kernel_rem_pio2f+0x30c>)
 800c428:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c42c:	2400      	movs	r4, #0
 800c42e:	e0c6      	b.n	800c5be <__kernel_rem_pio2f+0x3ae>
 800c430:	f04f 0802 	mov.w	r8, #2
 800c434:	e78a      	b.n	800c34c <__kernel_rem_pio2f+0x13c>
 800c436:	ab06      	add	r3, sp, #24
 800c438:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c43c:	b949      	cbnz	r1, 800c452 <__kernel_rem_pio2f+0x242>
 800c43e:	b12b      	cbz	r3, 800c44c <__kernel_rem_pio2f+0x23c>
 800c440:	aa06      	add	r2, sp, #24
 800c442:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c446:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c44a:	2301      	movs	r3, #1
 800c44c:	3001      	adds	r0, #1
 800c44e:	4619      	mov	r1, r3
 800c450:	e781      	b.n	800c356 <__kernel_rem_pio2f+0x146>
 800c452:	aa06      	add	r2, sp, #24
 800c454:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c458:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c45c:	460b      	mov	r3, r1
 800c45e:	e7f5      	b.n	800c44c <__kernel_rem_pio2f+0x23c>
 800c460:	1e68      	subs	r0, r5, #1
 800c462:	ab06      	add	r3, sp, #24
 800c464:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c46c:	aa06      	add	r2, sp, #24
 800c46e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c472:	e779      	b.n	800c368 <__kernel_rem_pio2f+0x158>
 800c474:	1e68      	subs	r0, r5, #1
 800c476:	ab06      	add	r3, sp, #24
 800c478:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c480:	e7f4      	b.n	800c46c <__kernel_rem_pio2f+0x25c>
 800c482:	a906      	add	r1, sp, #24
 800c484:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c488:	3801      	subs	r0, #1
 800c48a:	430a      	orrs	r2, r1
 800c48c:	e7a9      	b.n	800c3e2 <__kernel_rem_pio2f+0x1d2>
 800c48e:	f10c 0c01 	add.w	ip, ip, #1
 800c492:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c496:	2a00      	cmp	r2, #0
 800c498:	d0f9      	beq.n	800c48e <__kernel_rem_pio2f+0x27e>
 800c49a:	eb0b 0305 	add.w	r3, fp, r5
 800c49e:	aa1a      	add	r2, sp, #104	; 0x68
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	1898      	adds	r0, r3, r2
 800c4a4:	3004      	adds	r0, #4
 800c4a6:	1c69      	adds	r1, r5, #1
 800c4a8:	3704      	adds	r7, #4
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4465      	add	r5, ip
 800c4ae:	9005      	str	r0, [sp, #20]
 800c4b0:	428d      	cmp	r5, r1
 800c4b2:	f6ff af0a 	blt.w	800c2ca <__kernel_rem_pio2f+0xba>
 800c4b6:	a81a      	add	r0, sp, #104	; 0x68
 800c4b8:	eb02 0c03 	add.w	ip, r2, r3
 800c4bc:	4484      	add	ip, r0
 800c4be:	9803      	ldr	r0, [sp, #12]
 800c4c0:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c4c4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c4c8:	9001      	str	r0, [sp, #4]
 800c4ca:	ee07 0a90 	vmov	s15, r0
 800c4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4d2:	9805      	ldr	r0, [sp, #20]
 800c4d4:	edcc 7a00 	vstr	s15, [ip]
 800c4d8:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c4dc:	eb00 0802 	add.w	r8, r0, r2
 800c4e0:	f04f 0c00 	mov.w	ip, #0
 800c4e4:	45d4      	cmp	ip, sl
 800c4e6:	dd0c      	ble.n	800c502 <__kernel_rem_pio2f+0x2f2>
 800c4e8:	eb02 0c07 	add.w	ip, r2, r7
 800c4ec:	a842      	add	r0, sp, #264	; 0x108
 800c4ee:	4484      	add	ip, r0
 800c4f0:	edcc 7a01 	vstr	s15, [ip, #4]
 800c4f4:	3101      	adds	r1, #1
 800c4f6:	3204      	adds	r2, #4
 800c4f8:	e7da      	b.n	800c4b0 <__kernel_rem_pio2f+0x2a0>
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	f04f 0c01 	mov.w	ip, #1
 800c500:	e7c7      	b.n	800c492 <__kernel_rem_pio2f+0x282>
 800c502:	ecfe 6a01 	vldmia	lr!, {s13}
 800c506:	ed38 7a01 	vldmdb	r8!, {s14}
 800c50a:	f10c 0c01 	add.w	ip, ip, #1
 800c50e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c512:	e7e7      	b.n	800c4e4 <__kernel_rem_pio2f+0x2d4>
 800c514:	3b01      	subs	r3, #1
 800c516:	e769      	b.n	800c3ec <__kernel_rem_pio2f+0x1dc>
 800c518:	0801164c 	.word	0x0801164c
 800c51c:	08011620 	.word	0x08011620
 800c520:	43800000 	.word	0x43800000
 800c524:	3b800000 	.word	0x3b800000
 800c528:	00000000 	.word	0x00000000
 800c52c:	4260      	negs	r0, r4
 800c52e:	eeb0 0a48 	vmov.f32	s0, s16
 800c532:	f000 fa85 	bl	800ca40 <scalbnf>
 800c536:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c520 <__kernel_rem_pio2f+0x310>
 800c53a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c542:	db1a      	blt.n	800c57a <__kernel_rem_pio2f+0x36a>
 800c544:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c524 <__kernel_rem_pio2f+0x314>
 800c548:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c54c:	aa06      	add	r2, sp, #24
 800c54e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c552:	a906      	add	r1, sp, #24
 800c554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c558:	3408      	adds	r4, #8
 800c55a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c55e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c562:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c566:	ee10 3a10 	vmov	r3, s0
 800c56a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c56e:	1c6b      	adds	r3, r5, #1
 800c570:	ee17 2a90 	vmov	r2, s15
 800c574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c578:	e73f      	b.n	800c3fa <__kernel_rem_pio2f+0x1ea>
 800c57a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c57e:	aa06      	add	r2, sp, #24
 800c580:	ee10 3a10 	vmov	r3, s0
 800c584:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c588:	462b      	mov	r3, r5
 800c58a:	e736      	b.n	800c3fa <__kernel_rem_pio2f+0x1ea>
 800c58c:	aa06      	add	r2, sp, #24
 800c58e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c592:	9202      	str	r2, [sp, #8]
 800c594:	ee07 2a90 	vmov	s15, r2
 800c598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c59c:	3c01      	subs	r4, #1
 800c59e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c5a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c5a6:	ed65 7a01 	vstmdb	r5!, {s15}
 800c5aa:	e734      	b.n	800c416 <__kernel_rem_pio2f+0x206>
 800c5ac:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c5b0:	ecf7 6a01 	vldmia	r7!, {s13}
 800c5b4:	ed9c 7a00 	vldr	s14, [ip]
 800c5b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c5bc:	3401      	adds	r4, #1
 800c5be:	454c      	cmp	r4, r9
 800c5c0:	dc01      	bgt.n	800c5c6 <__kernel_rem_pio2f+0x3b6>
 800c5c2:	42a5      	cmp	r5, r4
 800c5c4:	daf2      	bge.n	800c5ac <__kernel_rem_pio2f+0x39c>
 800c5c6:	aa56      	add	r2, sp, #344	; 0x158
 800c5c8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c5cc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c5d0:	3501      	adds	r5, #1
 800c5d2:	3804      	subs	r0, #4
 800c5d4:	e723      	b.n	800c41e <__kernel_rem_pio2f+0x20e>
 800c5d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c5d8:	2a03      	cmp	r2, #3
 800c5da:	d84d      	bhi.n	800c678 <__kernel_rem_pio2f+0x468>
 800c5dc:	e8df f002 	tbb	[pc, r2]
 800c5e0:	021f1f3e 	.word	0x021f1f3e
 800c5e4:	aa56      	add	r2, sp, #344	; 0x158
 800c5e6:	4411      	add	r1, r2
 800c5e8:	399c      	subs	r1, #156	; 0x9c
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	461c      	mov	r4, r3
 800c5ee:	2c00      	cmp	r4, #0
 800c5f0:	dc5f      	bgt.n	800c6b2 <__kernel_rem_pio2f+0x4a2>
 800c5f2:	4608      	mov	r0, r1
 800c5f4:	461c      	mov	r4, r3
 800c5f6:	2c01      	cmp	r4, #1
 800c5f8:	dc6b      	bgt.n	800c6d2 <__kernel_rem_pio2f+0x4c2>
 800c5fa:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	dc77      	bgt.n	800c6f2 <__kernel_rem_pio2f+0x4e2>
 800c602:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c606:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c60a:	f1b8 0f00 	cmp.w	r8, #0
 800c60e:	d176      	bne.n	800c6fe <__kernel_rem_pio2f+0x4ee>
 800c610:	edc6 6a00 	vstr	s13, [r6]
 800c614:	ed86 7a01 	vstr	s14, [r6, #4]
 800c618:	edc6 7a02 	vstr	s15, [r6, #8]
 800c61c:	e02c      	b.n	800c678 <__kernel_rem_pio2f+0x468>
 800c61e:	aa56      	add	r2, sp, #344	; 0x158
 800c620:	4411      	add	r1, r2
 800c622:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c626:	399c      	subs	r1, #156	; 0x9c
 800c628:	4618      	mov	r0, r3
 800c62a:	2800      	cmp	r0, #0
 800c62c:	da32      	bge.n	800c694 <__kernel_rem_pio2f+0x484>
 800c62e:	f1b8 0f00 	cmp.w	r8, #0
 800c632:	d035      	beq.n	800c6a0 <__kernel_rem_pio2f+0x490>
 800c634:	eef1 7a47 	vneg.f32	s15, s14
 800c638:	edc6 7a00 	vstr	s15, [r6]
 800c63c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c644:	a82f      	add	r0, sp, #188	; 0xbc
 800c646:	2101      	movs	r1, #1
 800c648:	428b      	cmp	r3, r1
 800c64a:	da2c      	bge.n	800c6a6 <__kernel_rem_pio2f+0x496>
 800c64c:	f1b8 0f00 	cmp.w	r8, #0
 800c650:	d001      	beq.n	800c656 <__kernel_rem_pio2f+0x446>
 800c652:	eef1 7a67 	vneg.f32	s15, s15
 800c656:	edc6 7a01 	vstr	s15, [r6, #4]
 800c65a:	e00d      	b.n	800c678 <__kernel_rem_pio2f+0x468>
 800c65c:	aa56      	add	r2, sp, #344	; 0x158
 800c65e:	4411      	add	r1, r2
 800c660:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c528 <__kernel_rem_pio2f+0x318>
 800c664:	399c      	subs	r1, #156	; 0x9c
 800c666:	2b00      	cmp	r3, #0
 800c668:	da0e      	bge.n	800c688 <__kernel_rem_pio2f+0x478>
 800c66a:	f1b8 0f00 	cmp.w	r8, #0
 800c66e:	d001      	beq.n	800c674 <__kernel_rem_pio2f+0x464>
 800c670:	eef1 7a67 	vneg.f32	s15, s15
 800c674:	edc6 7a00 	vstr	s15, [r6]
 800c678:	9b01      	ldr	r3, [sp, #4]
 800c67a:	f003 0007 	and.w	r0, r3, #7
 800c67e:	b057      	add	sp, #348	; 0x15c
 800c680:	ecbd 8b04 	vpop	{d8-d9}
 800c684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c688:	ed31 7a01 	vldmdb	r1!, {s14}
 800c68c:	3b01      	subs	r3, #1
 800c68e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c692:	e7e8      	b.n	800c666 <__kernel_rem_pio2f+0x456>
 800c694:	ed71 7a01 	vldmdb	r1!, {s15}
 800c698:	3801      	subs	r0, #1
 800c69a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c69e:	e7c4      	b.n	800c62a <__kernel_rem_pio2f+0x41a>
 800c6a0:	eef0 7a47 	vmov.f32	s15, s14
 800c6a4:	e7c8      	b.n	800c638 <__kernel_rem_pio2f+0x428>
 800c6a6:	ecb0 7a01 	vldmia	r0!, {s14}
 800c6aa:	3101      	adds	r1, #1
 800c6ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6b0:	e7ca      	b.n	800c648 <__kernel_rem_pio2f+0x438>
 800c6b2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c6b6:	ed70 6a01 	vldmdb	r0!, {s13}
 800c6ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6be:	3c01      	subs	r4, #1
 800c6c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6c4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c6c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6cc:	edc0 7a00 	vstr	s15, [r0]
 800c6d0:	e78d      	b.n	800c5ee <__kernel_rem_pio2f+0x3de>
 800c6d2:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c6d6:	ed70 6a01 	vldmdb	r0!, {s13}
 800c6da:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c6de:	3c01      	subs	r4, #1
 800c6e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c6e4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c6e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ec:	edc0 7a00 	vstr	s15, [r0]
 800c6f0:	e781      	b.n	800c5f6 <__kernel_rem_pio2f+0x3e6>
 800c6f2:	ed31 7a01 	vldmdb	r1!, {s14}
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c6fc:	e77f      	b.n	800c5fe <__kernel_rem_pio2f+0x3ee>
 800c6fe:	eef1 6a66 	vneg.f32	s13, s13
 800c702:	eeb1 7a47 	vneg.f32	s14, s14
 800c706:	edc6 6a00 	vstr	s13, [r6]
 800c70a:	ed86 7a01 	vstr	s14, [r6, #4]
 800c70e:	eef1 7a67 	vneg.f32	s15, s15
 800c712:	e781      	b.n	800c618 <__kernel_rem_pio2f+0x408>

0800c714 <__kernel_sinf>:
 800c714:	ee10 3a10 	vmov	r3, s0
 800c718:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c71c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c720:	da04      	bge.n	800c72c <__kernel_sinf+0x18>
 800c722:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c726:	ee17 3a90 	vmov	r3, s15
 800c72a:	b35b      	cbz	r3, 800c784 <__kernel_sinf+0x70>
 800c72c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c730:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c788 <__kernel_sinf+0x74>
 800c734:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c78c <__kernel_sinf+0x78>
 800c738:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c73c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c790 <__kernel_sinf+0x7c>
 800c740:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c744:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c794 <__kernel_sinf+0x80>
 800c748:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c74c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c798 <__kernel_sinf+0x84>
 800c750:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c754:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c758:	b930      	cbnz	r0, 800c768 <__kernel_sinf+0x54>
 800c75a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c79c <__kernel_sinf+0x88>
 800c75e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c762:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c766:	4770      	bx	lr
 800c768:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c76c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c770:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c774:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c778:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c7a0 <__kernel_sinf+0x8c>
 800c77c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c780:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	2f2ec9d3 	.word	0x2f2ec9d3
 800c78c:	b2d72f34 	.word	0xb2d72f34
 800c790:	3638ef1b 	.word	0x3638ef1b
 800c794:	b9500d01 	.word	0xb9500d01
 800c798:	3c088889 	.word	0x3c088889
 800c79c:	be2aaaab 	.word	0xbe2aaaab
 800c7a0:	3e2aaaab 	.word	0x3e2aaaab

0800c7a4 <fabs>:
 800c7a4:	ec51 0b10 	vmov	r0, r1, d0
 800c7a8:	ee10 2a10 	vmov	r2, s0
 800c7ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7b0:	ec43 2b10 	vmov	d0, r2, r3
 800c7b4:	4770      	bx	lr
	...

0800c7b8 <floor>:
 800c7b8:	ec51 0b10 	vmov	r0, r1, d0
 800c7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7c8:	2e13      	cmp	r6, #19
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	ee10 5a10 	vmov	r5, s0
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	dc34      	bgt.n	800c83e <floor+0x86>
 800c7d4:	2e00      	cmp	r6, #0
 800c7d6:	da16      	bge.n	800c806 <floor+0x4e>
 800c7d8:	a335      	add	r3, pc, #212	; (adr r3, 800c8b0 <floor+0xf8>)
 800c7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7de:	f7f3 fd55 	bl	800028c <__adddf3>
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f7f4 f997 	bl	8000b18 <__aeabi_dcmpgt>
 800c7ea:	b148      	cbz	r0, 800c800 <floor+0x48>
 800c7ec:	2c00      	cmp	r4, #0
 800c7ee:	da59      	bge.n	800c8a4 <floor+0xec>
 800c7f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c7f4:	4a30      	ldr	r2, [pc, #192]	; (800c8b8 <floor+0x100>)
 800c7f6:	432b      	orrs	r3, r5
 800c7f8:	2500      	movs	r5, #0
 800c7fa:	42ab      	cmp	r3, r5
 800c7fc:	bf18      	it	ne
 800c7fe:	4614      	movne	r4, r2
 800c800:	4621      	mov	r1, r4
 800c802:	4628      	mov	r0, r5
 800c804:	e025      	b.n	800c852 <floor+0x9a>
 800c806:	4f2d      	ldr	r7, [pc, #180]	; (800c8bc <floor+0x104>)
 800c808:	4137      	asrs	r7, r6
 800c80a:	ea01 0307 	and.w	r3, r1, r7
 800c80e:	4303      	orrs	r3, r0
 800c810:	d01f      	beq.n	800c852 <floor+0x9a>
 800c812:	a327      	add	r3, pc, #156	; (adr r3, 800c8b0 <floor+0xf8>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fd38 	bl	800028c <__adddf3>
 800c81c:	2200      	movs	r2, #0
 800c81e:	2300      	movs	r3, #0
 800c820:	f7f4 f97a 	bl	8000b18 <__aeabi_dcmpgt>
 800c824:	2800      	cmp	r0, #0
 800c826:	d0eb      	beq.n	800c800 <floor+0x48>
 800c828:	2c00      	cmp	r4, #0
 800c82a:	bfbe      	ittt	lt
 800c82c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c830:	fa43 f606 	asrlt.w	r6, r3, r6
 800c834:	19a4      	addlt	r4, r4, r6
 800c836:	ea24 0407 	bic.w	r4, r4, r7
 800c83a:	2500      	movs	r5, #0
 800c83c:	e7e0      	b.n	800c800 <floor+0x48>
 800c83e:	2e33      	cmp	r6, #51	; 0x33
 800c840:	dd0b      	ble.n	800c85a <floor+0xa2>
 800c842:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c846:	d104      	bne.n	800c852 <floor+0x9a>
 800c848:	ee10 2a10 	vmov	r2, s0
 800c84c:	460b      	mov	r3, r1
 800c84e:	f7f3 fd1d 	bl	800028c <__adddf3>
 800c852:	ec41 0b10 	vmov	d0, r0, r1
 800c856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c85e:	f04f 33ff 	mov.w	r3, #4294967295
 800c862:	fa23 f707 	lsr.w	r7, r3, r7
 800c866:	4207      	tst	r7, r0
 800c868:	d0f3      	beq.n	800c852 <floor+0x9a>
 800c86a:	a311      	add	r3, pc, #68	; (adr r3, 800c8b0 <floor+0xf8>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	f7f3 fd0c 	bl	800028c <__adddf3>
 800c874:	2200      	movs	r2, #0
 800c876:	2300      	movs	r3, #0
 800c878:	f7f4 f94e 	bl	8000b18 <__aeabi_dcmpgt>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d0bf      	beq.n	800c800 <floor+0x48>
 800c880:	2c00      	cmp	r4, #0
 800c882:	da02      	bge.n	800c88a <floor+0xd2>
 800c884:	2e14      	cmp	r6, #20
 800c886:	d103      	bne.n	800c890 <floor+0xd8>
 800c888:	3401      	adds	r4, #1
 800c88a:	ea25 0507 	bic.w	r5, r5, r7
 800c88e:	e7b7      	b.n	800c800 <floor+0x48>
 800c890:	2301      	movs	r3, #1
 800c892:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c896:	fa03 f606 	lsl.w	r6, r3, r6
 800c89a:	4435      	add	r5, r6
 800c89c:	4545      	cmp	r5, r8
 800c89e:	bf38      	it	cc
 800c8a0:	18e4      	addcc	r4, r4, r3
 800c8a2:	e7f2      	b.n	800c88a <floor+0xd2>
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	462c      	mov	r4, r5
 800c8a8:	e7aa      	b.n	800c800 <floor+0x48>
 800c8aa:	bf00      	nop
 800c8ac:	f3af 8000 	nop.w
 800c8b0:	8800759c 	.word	0x8800759c
 800c8b4:	7e37e43c 	.word	0x7e37e43c
 800c8b8:	bff00000 	.word	0xbff00000
 800c8bc:	000fffff 	.word	0x000fffff

0800c8c0 <scalbn>:
 800c8c0:	b570      	push	{r4, r5, r6, lr}
 800c8c2:	ec55 4b10 	vmov	r4, r5, d0
 800c8c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	462b      	mov	r3, r5
 800c8ce:	b9aa      	cbnz	r2, 800c8fc <scalbn+0x3c>
 800c8d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8d4:	4323      	orrs	r3, r4
 800c8d6:	d03b      	beq.n	800c950 <scalbn+0x90>
 800c8d8:	4b31      	ldr	r3, [pc, #196]	; (800c9a0 <scalbn+0xe0>)
 800c8da:	4629      	mov	r1, r5
 800c8dc:	2200      	movs	r2, #0
 800c8de:	ee10 0a10 	vmov	r0, s0
 800c8e2:	f7f3 fe89 	bl	80005f8 <__aeabi_dmul>
 800c8e6:	4b2f      	ldr	r3, [pc, #188]	; (800c9a4 <scalbn+0xe4>)
 800c8e8:	429e      	cmp	r6, r3
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	da12      	bge.n	800c916 <scalbn+0x56>
 800c8f0:	a327      	add	r3, pc, #156	; (adr r3, 800c990 <scalbn+0xd0>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	e009      	b.n	800c910 <scalbn+0x50>
 800c8fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c900:	428a      	cmp	r2, r1
 800c902:	d10c      	bne.n	800c91e <scalbn+0x5e>
 800c904:	ee10 2a10 	vmov	r2, s0
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f3 fcbe 	bl	800028c <__adddf3>
 800c910:	4604      	mov	r4, r0
 800c912:	460d      	mov	r5, r1
 800c914:	e01c      	b.n	800c950 <scalbn+0x90>
 800c916:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c91a:	460b      	mov	r3, r1
 800c91c:	3a36      	subs	r2, #54	; 0x36
 800c91e:	4432      	add	r2, r6
 800c920:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c924:	428a      	cmp	r2, r1
 800c926:	dd0b      	ble.n	800c940 <scalbn+0x80>
 800c928:	ec45 4b11 	vmov	d1, r4, r5
 800c92c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c998 <scalbn+0xd8>
 800c930:	f000 f8e6 	bl	800cb00 <copysign>
 800c934:	a318      	add	r3, pc, #96	; (adr r3, 800c998 <scalbn+0xd8>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	ec51 0b10 	vmov	r0, r1, d0
 800c93e:	e7da      	b.n	800c8f6 <scalbn+0x36>
 800c940:	2a00      	cmp	r2, #0
 800c942:	dd08      	ble.n	800c956 <scalbn+0x96>
 800c944:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c948:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c94c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c950:	ec45 4b10 	vmov	d0, r4, r5
 800c954:	bd70      	pop	{r4, r5, r6, pc}
 800c956:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c95a:	da0d      	bge.n	800c978 <scalbn+0xb8>
 800c95c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c960:	429e      	cmp	r6, r3
 800c962:	ec45 4b11 	vmov	d1, r4, r5
 800c966:	dce1      	bgt.n	800c92c <scalbn+0x6c>
 800c968:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c990 <scalbn+0xd0>
 800c96c:	f000 f8c8 	bl	800cb00 <copysign>
 800c970:	a307      	add	r3, pc, #28	; (adr r3, 800c990 <scalbn+0xd0>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	e7e0      	b.n	800c93a <scalbn+0x7a>
 800c978:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c97c:	3236      	adds	r2, #54	; 0x36
 800c97e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c982:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c986:	4620      	mov	r0, r4
 800c988:	4629      	mov	r1, r5
 800c98a:	2200      	movs	r2, #0
 800c98c:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <scalbn+0xe8>)
 800c98e:	e7b2      	b.n	800c8f6 <scalbn+0x36>
 800c990:	c2f8f359 	.word	0xc2f8f359
 800c994:	01a56e1f 	.word	0x01a56e1f
 800c998:	8800759c 	.word	0x8800759c
 800c99c:	7e37e43c 	.word	0x7e37e43c
 800c9a0:	43500000 	.word	0x43500000
 800c9a4:	ffff3cb0 	.word	0xffff3cb0
 800c9a8:	3c900000 	.word	0x3c900000

0800c9ac <fabsf>:
 800c9ac:	ee10 3a10 	vmov	r3, s0
 800c9b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9b4:	ee00 3a10 	vmov	s0, r3
 800c9b8:	4770      	bx	lr
	...

0800c9bc <floorf>:
 800c9bc:	ee10 3a10 	vmov	r3, s0
 800c9c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c9c4:	0dca      	lsrs	r2, r1, #23
 800c9c6:	3a7f      	subs	r2, #127	; 0x7f
 800c9c8:	2a16      	cmp	r2, #22
 800c9ca:	dc2a      	bgt.n	800ca22 <floorf+0x66>
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	da11      	bge.n	800c9f4 <floorf+0x38>
 800c9d0:	eddf 7a18 	vldr	s15, [pc, #96]	; 800ca34 <floorf+0x78>
 800c9d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c9d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e0:	dd05      	ble.n	800c9ee <floorf+0x32>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	da23      	bge.n	800ca2e <floorf+0x72>
 800c9e6:	4a14      	ldr	r2, [pc, #80]	; (800ca38 <floorf+0x7c>)
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	bf18      	it	ne
 800c9ec:	4613      	movne	r3, r2
 800c9ee:	ee00 3a10 	vmov	s0, r3
 800c9f2:	4770      	bx	lr
 800c9f4:	4911      	ldr	r1, [pc, #68]	; (800ca3c <floorf+0x80>)
 800c9f6:	4111      	asrs	r1, r2
 800c9f8:	420b      	tst	r3, r1
 800c9fa:	d0fa      	beq.n	800c9f2 <floorf+0x36>
 800c9fc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ca34 <floorf+0x78>
 800ca00:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ca04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca0c:	ddef      	ble.n	800c9ee <floorf+0x32>
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	bfbe      	ittt	lt
 800ca12:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800ca16:	fa40 f202 	asrlt.w	r2, r0, r2
 800ca1a:	189b      	addlt	r3, r3, r2
 800ca1c:	ea23 0301 	bic.w	r3, r3, r1
 800ca20:	e7e5      	b.n	800c9ee <floorf+0x32>
 800ca22:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ca26:	d3e4      	bcc.n	800c9f2 <floorf+0x36>
 800ca28:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ca2c:	4770      	bx	lr
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e7dd      	b.n	800c9ee <floorf+0x32>
 800ca32:	bf00      	nop
 800ca34:	7149f2ca 	.word	0x7149f2ca
 800ca38:	bf800000 	.word	0xbf800000
 800ca3c:	007fffff 	.word	0x007fffff

0800ca40 <scalbnf>:
 800ca40:	b508      	push	{r3, lr}
 800ca42:	ee10 2a10 	vmov	r2, s0
 800ca46:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800ca4a:	ed2d 8b02 	vpush	{d8}
 800ca4e:	eef0 0a40 	vmov.f32	s1, s0
 800ca52:	d004      	beq.n	800ca5e <scalbnf+0x1e>
 800ca54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ca58:	d306      	bcc.n	800ca68 <scalbnf+0x28>
 800ca5a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800ca5e:	ecbd 8b02 	vpop	{d8}
 800ca62:	eeb0 0a60 	vmov.f32	s0, s1
 800ca66:	bd08      	pop	{r3, pc}
 800ca68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ca6c:	d21c      	bcs.n	800caa8 <scalbnf+0x68>
 800ca6e:	4b1f      	ldr	r3, [pc, #124]	; (800caec <scalbnf+0xac>)
 800ca70:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800caf0 <scalbnf+0xb0>
 800ca74:	4298      	cmp	r0, r3
 800ca76:	ee60 0a27 	vmul.f32	s1, s0, s15
 800ca7a:	db10      	blt.n	800ca9e <scalbnf+0x5e>
 800ca7c:	ee10 2a90 	vmov	r2, s1
 800ca80:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800ca84:	3b19      	subs	r3, #25
 800ca86:	4403      	add	r3, r0
 800ca88:	2bfe      	cmp	r3, #254	; 0xfe
 800ca8a:	dd0f      	ble.n	800caac <scalbnf+0x6c>
 800ca8c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800caf4 <scalbnf+0xb4>
 800ca90:	eeb0 0a48 	vmov.f32	s0, s16
 800ca94:	f000 f843 	bl	800cb1e <copysignf>
 800ca98:	ee60 0a08 	vmul.f32	s1, s0, s16
 800ca9c:	e7df      	b.n	800ca5e <scalbnf+0x1e>
 800ca9e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800caf8 <scalbnf+0xb8>
 800caa2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800caa6:	e7da      	b.n	800ca5e <scalbnf+0x1e>
 800caa8:	0ddb      	lsrs	r3, r3, #23
 800caaa:	e7ec      	b.n	800ca86 <scalbnf+0x46>
 800caac:	2b00      	cmp	r3, #0
 800caae:	dd06      	ble.n	800cabe <scalbnf+0x7e>
 800cab0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cab4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cab8:	ee00 3a90 	vmov	s1, r3
 800cabc:	e7cf      	b.n	800ca5e <scalbnf+0x1e>
 800cabe:	f113 0f16 	cmn.w	r3, #22
 800cac2:	da06      	bge.n	800cad2 <scalbnf+0x92>
 800cac4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cac8:	4298      	cmp	r0, r3
 800caca:	dcdf      	bgt.n	800ca8c <scalbnf+0x4c>
 800cacc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800caf8 <scalbnf+0xb8>
 800cad0:	e7de      	b.n	800ca90 <scalbnf+0x50>
 800cad2:	3319      	adds	r3, #25
 800cad4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800cad8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800cadc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800cafc <scalbnf+0xbc>
 800cae0:	ee07 3a10 	vmov	s14, r3
 800cae4:	ee67 0a27 	vmul.f32	s1, s14, s15
 800cae8:	e7b9      	b.n	800ca5e <scalbnf+0x1e>
 800caea:	bf00      	nop
 800caec:	ffff3cb0 	.word	0xffff3cb0
 800caf0:	4c000000 	.word	0x4c000000
 800caf4:	7149f2ca 	.word	0x7149f2ca
 800caf8:	0da24260 	.word	0x0da24260
 800cafc:	33000000 	.word	0x33000000

0800cb00 <copysign>:
 800cb00:	ec51 0b10 	vmov	r0, r1, d0
 800cb04:	ee11 0a90 	vmov	r0, s3
 800cb08:	ee10 2a10 	vmov	r2, s0
 800cb0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cb10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cb14:	ea41 0300 	orr.w	r3, r1, r0
 800cb18:	ec43 2b10 	vmov	d0, r2, r3
 800cb1c:	4770      	bx	lr

0800cb1e <copysignf>:
 800cb1e:	ee10 3a10 	vmov	r3, s0
 800cb22:	ee10 2a90 	vmov	r2, s1
 800cb26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb2a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	ee00 3a10 	vmov	s0, r3
 800cb34:	4770      	bx	lr
	...

0800cb38 <__errno>:
 800cb38:	4b01      	ldr	r3, [pc, #4]	; (800cb40 <__errno+0x8>)
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	20000040 	.word	0x20000040

0800cb44 <__libc_init_array>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	4e0d      	ldr	r6, [pc, #52]	; (800cb7c <__libc_init_array+0x38>)
 800cb48:	4c0d      	ldr	r4, [pc, #52]	; (800cb80 <__libc_init_array+0x3c>)
 800cb4a:	1ba4      	subs	r4, r4, r6
 800cb4c:	10a4      	asrs	r4, r4, #2
 800cb4e:	2500      	movs	r5, #0
 800cb50:	42a5      	cmp	r5, r4
 800cb52:	d109      	bne.n	800cb68 <__libc_init_array+0x24>
 800cb54:	4e0b      	ldr	r6, [pc, #44]	; (800cb84 <__libc_init_array+0x40>)
 800cb56:	4c0c      	ldr	r4, [pc, #48]	; (800cb88 <__libc_init_array+0x44>)
 800cb58:	f004 fa60 	bl	801101c <_init>
 800cb5c:	1ba4      	subs	r4, r4, r6
 800cb5e:	10a4      	asrs	r4, r4, #2
 800cb60:	2500      	movs	r5, #0
 800cb62:	42a5      	cmp	r5, r4
 800cb64:	d105      	bne.n	800cb72 <__libc_init_array+0x2e>
 800cb66:	bd70      	pop	{r4, r5, r6, pc}
 800cb68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb6c:	4798      	blx	r3
 800cb6e:	3501      	adds	r5, #1
 800cb70:	e7ee      	b.n	800cb50 <__libc_init_array+0xc>
 800cb72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb76:	4798      	blx	r3
 800cb78:	3501      	adds	r5, #1
 800cb7a:	e7f2      	b.n	800cb62 <__libc_init_array+0x1e>
 800cb7c:	08011980 	.word	0x08011980
 800cb80:	08011980 	.word	0x08011980
 800cb84:	08011980 	.word	0x08011980
 800cb88:	08011984 	.word	0x08011984

0800cb8c <memcpy>:
 800cb8c:	b510      	push	{r4, lr}
 800cb8e:	1e43      	subs	r3, r0, #1
 800cb90:	440a      	add	r2, r1
 800cb92:	4291      	cmp	r1, r2
 800cb94:	d100      	bne.n	800cb98 <memcpy+0xc>
 800cb96:	bd10      	pop	{r4, pc}
 800cb98:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cba0:	e7f7      	b.n	800cb92 <memcpy+0x6>

0800cba2 <memset>:
 800cba2:	4402      	add	r2, r0
 800cba4:	4603      	mov	r3, r0
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d100      	bne.n	800cbac <memset+0xa>
 800cbaa:	4770      	bx	lr
 800cbac:	f803 1b01 	strb.w	r1, [r3], #1
 800cbb0:	e7f9      	b.n	800cba6 <memset+0x4>

0800cbb2 <__cvt>:
 800cbb2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb6:	ec55 4b10 	vmov	r4, r5, d0
 800cbba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800cbbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cbc0:	2d00      	cmp	r5, #0
 800cbc2:	460e      	mov	r6, r1
 800cbc4:	4691      	mov	r9, r2
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	bfb8      	it	lt
 800cbca:	4622      	movlt	r2, r4
 800cbcc:	462b      	mov	r3, r5
 800cbce:	f027 0720 	bic.w	r7, r7, #32
 800cbd2:	bfbb      	ittet	lt
 800cbd4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cbd8:	461d      	movlt	r5, r3
 800cbda:	2300      	movge	r3, #0
 800cbdc:	232d      	movlt	r3, #45	; 0x2d
 800cbde:	bfb8      	it	lt
 800cbe0:	4614      	movlt	r4, r2
 800cbe2:	2f46      	cmp	r7, #70	; 0x46
 800cbe4:	700b      	strb	r3, [r1, #0]
 800cbe6:	d004      	beq.n	800cbf2 <__cvt+0x40>
 800cbe8:	2f45      	cmp	r7, #69	; 0x45
 800cbea:	d100      	bne.n	800cbee <__cvt+0x3c>
 800cbec:	3601      	adds	r6, #1
 800cbee:	2102      	movs	r1, #2
 800cbf0:	e000      	b.n	800cbf4 <__cvt+0x42>
 800cbf2:	2103      	movs	r1, #3
 800cbf4:	ab03      	add	r3, sp, #12
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	ab02      	add	r3, sp, #8
 800cbfa:	9300      	str	r3, [sp, #0]
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	4653      	mov	r3, sl
 800cc00:	ec45 4b10 	vmov	d0, r4, r5
 800cc04:	f001 feb4 	bl	800e970 <_dtoa_r>
 800cc08:	2f47      	cmp	r7, #71	; 0x47
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	d102      	bne.n	800cc14 <__cvt+0x62>
 800cc0e:	f019 0f01 	tst.w	r9, #1
 800cc12:	d026      	beq.n	800cc62 <__cvt+0xb0>
 800cc14:	2f46      	cmp	r7, #70	; 0x46
 800cc16:	eb08 0906 	add.w	r9, r8, r6
 800cc1a:	d111      	bne.n	800cc40 <__cvt+0x8e>
 800cc1c:	f898 3000 	ldrb.w	r3, [r8]
 800cc20:	2b30      	cmp	r3, #48	; 0x30
 800cc22:	d10a      	bne.n	800cc3a <__cvt+0x88>
 800cc24:	2200      	movs	r2, #0
 800cc26:	2300      	movs	r3, #0
 800cc28:	4620      	mov	r0, r4
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	f7f3 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc30:	b918      	cbnz	r0, 800cc3a <__cvt+0x88>
 800cc32:	f1c6 0601 	rsb	r6, r6, #1
 800cc36:	f8ca 6000 	str.w	r6, [sl]
 800cc3a:	f8da 3000 	ldr.w	r3, [sl]
 800cc3e:	4499      	add	r9, r3
 800cc40:	2200      	movs	r2, #0
 800cc42:	2300      	movs	r3, #0
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f7f3 ff3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc4c:	b938      	cbnz	r0, 800cc5e <__cvt+0xac>
 800cc4e:	2230      	movs	r2, #48	; 0x30
 800cc50:	9b03      	ldr	r3, [sp, #12]
 800cc52:	454b      	cmp	r3, r9
 800cc54:	d205      	bcs.n	800cc62 <__cvt+0xb0>
 800cc56:	1c59      	adds	r1, r3, #1
 800cc58:	9103      	str	r1, [sp, #12]
 800cc5a:	701a      	strb	r2, [r3, #0]
 800cc5c:	e7f8      	b.n	800cc50 <__cvt+0x9e>
 800cc5e:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc62:	9b03      	ldr	r3, [sp, #12]
 800cc64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc66:	eba3 0308 	sub.w	r3, r3, r8
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	b004      	add	sp, #16
 800cc70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cc74 <__exponent>:
 800cc74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc76:	2900      	cmp	r1, #0
 800cc78:	4604      	mov	r4, r0
 800cc7a:	bfba      	itte	lt
 800cc7c:	4249      	neglt	r1, r1
 800cc7e:	232d      	movlt	r3, #45	; 0x2d
 800cc80:	232b      	movge	r3, #43	; 0x2b
 800cc82:	2909      	cmp	r1, #9
 800cc84:	f804 2b02 	strb.w	r2, [r4], #2
 800cc88:	7043      	strb	r3, [r0, #1]
 800cc8a:	dd20      	ble.n	800ccce <__exponent+0x5a>
 800cc8c:	f10d 0307 	add.w	r3, sp, #7
 800cc90:	461f      	mov	r7, r3
 800cc92:	260a      	movs	r6, #10
 800cc94:	fb91 f5f6 	sdiv	r5, r1, r6
 800cc98:	fb06 1115 	mls	r1, r6, r5, r1
 800cc9c:	3130      	adds	r1, #48	; 0x30
 800cc9e:	2d09      	cmp	r5, #9
 800cca0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cca4:	f103 32ff 	add.w	r2, r3, #4294967295
 800cca8:	4629      	mov	r1, r5
 800ccaa:	dc09      	bgt.n	800ccc0 <__exponent+0x4c>
 800ccac:	3130      	adds	r1, #48	; 0x30
 800ccae:	3b02      	subs	r3, #2
 800ccb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ccb4:	42bb      	cmp	r3, r7
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	d304      	bcc.n	800ccc4 <__exponent+0x50>
 800ccba:	1a10      	subs	r0, r2, r0
 800ccbc:	b003      	add	sp, #12
 800ccbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	e7e7      	b.n	800cc94 <__exponent+0x20>
 800ccc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc8:	f804 2b01 	strb.w	r2, [r4], #1
 800cccc:	e7f2      	b.n	800ccb4 <__exponent+0x40>
 800ccce:	2330      	movs	r3, #48	; 0x30
 800ccd0:	4419      	add	r1, r3
 800ccd2:	7083      	strb	r3, [r0, #2]
 800ccd4:	1d02      	adds	r2, r0, #4
 800ccd6:	70c1      	strb	r1, [r0, #3]
 800ccd8:	e7ef      	b.n	800ccba <__exponent+0x46>
	...

0800ccdc <_printf_float>:
 800ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce0:	b08d      	sub	sp, #52	; 0x34
 800cce2:	460c      	mov	r4, r1
 800cce4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cce8:	4616      	mov	r6, r2
 800ccea:	461f      	mov	r7, r3
 800ccec:	4605      	mov	r5, r0
 800ccee:	f003 f89d 	bl	800fe2c <_localeconv_r>
 800ccf2:	6803      	ldr	r3, [r0, #0]
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7f3 fa6a 	bl	80001d0 <strlen>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	930a      	str	r3, [sp, #40]	; 0x28
 800cd00:	f8d8 3000 	ldr.w	r3, [r8]
 800cd04:	9005      	str	r0, [sp, #20]
 800cd06:	3307      	adds	r3, #7
 800cd08:	f023 0307 	bic.w	r3, r3, #7
 800cd0c:	f103 0208 	add.w	r2, r3, #8
 800cd10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd14:	f8d4 b000 	ldr.w	fp, [r4]
 800cd18:	f8c8 2000 	str.w	r2, [r8]
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cd24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cd28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cd2c:	9307      	str	r3, [sp, #28]
 800cd2e:	f8cd 8018 	str.w	r8, [sp, #24]
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	4ba7      	ldr	r3, [pc, #668]	; (800cfd4 <_printf_float+0x2f8>)
 800cd38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd3c:	f7f3 fef6 	bl	8000b2c <__aeabi_dcmpun>
 800cd40:	bb70      	cbnz	r0, 800cda0 <_printf_float+0xc4>
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	4ba3      	ldr	r3, [pc, #652]	; (800cfd4 <_printf_float+0x2f8>)
 800cd48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cd4c:	f7f3 fed0 	bl	8000af0 <__aeabi_dcmple>
 800cd50:	bb30      	cbnz	r0, 800cda0 <_printf_float+0xc4>
 800cd52:	2200      	movs	r2, #0
 800cd54:	2300      	movs	r3, #0
 800cd56:	4640      	mov	r0, r8
 800cd58:	4649      	mov	r1, r9
 800cd5a:	f7f3 febf 	bl	8000adc <__aeabi_dcmplt>
 800cd5e:	b110      	cbz	r0, 800cd66 <_printf_float+0x8a>
 800cd60:	232d      	movs	r3, #45	; 0x2d
 800cd62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd66:	4a9c      	ldr	r2, [pc, #624]	; (800cfd8 <_printf_float+0x2fc>)
 800cd68:	4b9c      	ldr	r3, [pc, #624]	; (800cfdc <_printf_float+0x300>)
 800cd6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cd6e:	bf8c      	ite	hi
 800cd70:	4690      	movhi	r8, r2
 800cd72:	4698      	movls	r8, r3
 800cd74:	2303      	movs	r3, #3
 800cd76:	f02b 0204 	bic.w	r2, fp, #4
 800cd7a:	6123      	str	r3, [r4, #16]
 800cd7c:	6022      	str	r2, [r4, #0]
 800cd7e:	f04f 0900 	mov.w	r9, #0
 800cd82:	9700      	str	r7, [sp, #0]
 800cd84:	4633      	mov	r3, r6
 800cd86:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	f000 f9e6 	bl	800d15c <_printf_common>
 800cd90:	3001      	adds	r0, #1
 800cd92:	f040 808d 	bne.w	800ceb0 <_printf_float+0x1d4>
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295
 800cd9a:	b00d      	add	sp, #52	; 0x34
 800cd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda0:	4642      	mov	r2, r8
 800cda2:	464b      	mov	r3, r9
 800cda4:	4640      	mov	r0, r8
 800cda6:	4649      	mov	r1, r9
 800cda8:	f7f3 fec0 	bl	8000b2c <__aeabi_dcmpun>
 800cdac:	b110      	cbz	r0, 800cdb4 <_printf_float+0xd8>
 800cdae:	4a8c      	ldr	r2, [pc, #560]	; (800cfe0 <_printf_float+0x304>)
 800cdb0:	4b8c      	ldr	r3, [pc, #560]	; (800cfe4 <_printf_float+0x308>)
 800cdb2:	e7da      	b.n	800cd6a <_printf_float+0x8e>
 800cdb4:	6861      	ldr	r1, [r4, #4]
 800cdb6:	1c4b      	adds	r3, r1, #1
 800cdb8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cdbc:	a80a      	add	r0, sp, #40	; 0x28
 800cdbe:	d13e      	bne.n	800ce3e <_printf_float+0x162>
 800cdc0:	2306      	movs	r3, #6
 800cdc2:	6063      	str	r3, [r4, #4]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cdca:	ab09      	add	r3, sp, #36	; 0x24
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	ec49 8b10 	vmov	d0, r8, r9
 800cdd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cdd6:	6022      	str	r2, [r4, #0]
 800cdd8:	f8cd a004 	str.w	sl, [sp, #4]
 800cddc:	6861      	ldr	r1, [r4, #4]
 800cdde:	4628      	mov	r0, r5
 800cde0:	f7ff fee7 	bl	800cbb2 <__cvt>
 800cde4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cde8:	2b47      	cmp	r3, #71	; 0x47
 800cdea:	4680      	mov	r8, r0
 800cdec:	d109      	bne.n	800ce02 <_printf_float+0x126>
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	1cd8      	adds	r0, r3, #3
 800cdf2:	db02      	blt.n	800cdfa <_printf_float+0x11e>
 800cdf4:	6862      	ldr	r2, [r4, #4]
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	dd47      	ble.n	800ce8a <_printf_float+0x1ae>
 800cdfa:	f1aa 0a02 	sub.w	sl, sl, #2
 800cdfe:	fa5f fa8a 	uxtb.w	sl, sl
 800ce02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ce06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce08:	d824      	bhi.n	800ce54 <_printf_float+0x178>
 800ce0a:	3901      	subs	r1, #1
 800ce0c:	4652      	mov	r2, sl
 800ce0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ce12:	9109      	str	r1, [sp, #36]	; 0x24
 800ce14:	f7ff ff2e 	bl	800cc74 <__exponent>
 800ce18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce1a:	1813      	adds	r3, r2, r0
 800ce1c:	2a01      	cmp	r2, #1
 800ce1e:	4681      	mov	r9, r0
 800ce20:	6123      	str	r3, [r4, #16]
 800ce22:	dc02      	bgt.n	800ce2a <_printf_float+0x14e>
 800ce24:	6822      	ldr	r2, [r4, #0]
 800ce26:	07d1      	lsls	r1, r2, #31
 800ce28:	d501      	bpl.n	800ce2e <_printf_float+0x152>
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	6123      	str	r3, [r4, #16]
 800ce2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0a5      	beq.n	800cd82 <_printf_float+0xa6>
 800ce36:	232d      	movs	r3, #45	; 0x2d
 800ce38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3c:	e7a1      	b.n	800cd82 <_printf_float+0xa6>
 800ce3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ce42:	f000 8177 	beq.w	800d134 <_printf_float+0x458>
 800ce46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ce4a:	d1bb      	bne.n	800cdc4 <_printf_float+0xe8>
 800ce4c:	2900      	cmp	r1, #0
 800ce4e:	d1b9      	bne.n	800cdc4 <_printf_float+0xe8>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e7b6      	b.n	800cdc2 <_printf_float+0xe6>
 800ce54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ce58:	d119      	bne.n	800ce8e <_printf_float+0x1b2>
 800ce5a:	2900      	cmp	r1, #0
 800ce5c:	6863      	ldr	r3, [r4, #4]
 800ce5e:	dd0c      	ble.n	800ce7a <_printf_float+0x19e>
 800ce60:	6121      	str	r1, [r4, #16]
 800ce62:	b913      	cbnz	r3, 800ce6a <_printf_float+0x18e>
 800ce64:	6822      	ldr	r2, [r4, #0]
 800ce66:	07d2      	lsls	r2, r2, #31
 800ce68:	d502      	bpl.n	800ce70 <_printf_float+0x194>
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	440b      	add	r3, r1
 800ce6e:	6123      	str	r3, [r4, #16]
 800ce70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce72:	65a3      	str	r3, [r4, #88]	; 0x58
 800ce74:	f04f 0900 	mov.w	r9, #0
 800ce78:	e7d9      	b.n	800ce2e <_printf_float+0x152>
 800ce7a:	b913      	cbnz	r3, 800ce82 <_printf_float+0x1a6>
 800ce7c:	6822      	ldr	r2, [r4, #0]
 800ce7e:	07d0      	lsls	r0, r2, #31
 800ce80:	d501      	bpl.n	800ce86 <_printf_float+0x1aa>
 800ce82:	3302      	adds	r3, #2
 800ce84:	e7f3      	b.n	800ce6e <_printf_float+0x192>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e7f1      	b.n	800ce6e <_printf_float+0x192>
 800ce8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ce8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ce92:	4293      	cmp	r3, r2
 800ce94:	db05      	blt.n	800cea2 <_printf_float+0x1c6>
 800ce96:	6822      	ldr	r2, [r4, #0]
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	07d1      	lsls	r1, r2, #31
 800ce9c:	d5e8      	bpl.n	800ce70 <_printf_float+0x194>
 800ce9e:	3301      	adds	r3, #1
 800cea0:	e7e5      	b.n	800ce6e <_printf_float+0x192>
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	bfd4      	ite	le
 800cea6:	f1c3 0302 	rsble	r3, r3, #2
 800ceaa:	2301      	movgt	r3, #1
 800ceac:	4413      	add	r3, r2
 800ceae:	e7de      	b.n	800ce6e <_printf_float+0x192>
 800ceb0:	6823      	ldr	r3, [r4, #0]
 800ceb2:	055a      	lsls	r2, r3, #21
 800ceb4:	d407      	bmi.n	800cec6 <_printf_float+0x1ea>
 800ceb6:	6923      	ldr	r3, [r4, #16]
 800ceb8:	4642      	mov	r2, r8
 800ceba:	4631      	mov	r1, r6
 800cebc:	4628      	mov	r0, r5
 800cebe:	47b8      	blx	r7
 800cec0:	3001      	adds	r0, #1
 800cec2:	d12b      	bne.n	800cf1c <_printf_float+0x240>
 800cec4:	e767      	b.n	800cd96 <_printf_float+0xba>
 800cec6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ceca:	f240 80dc 	bls.w	800d086 <_printf_float+0x3aa>
 800cece:	2200      	movs	r2, #0
 800ced0:	2300      	movs	r3, #0
 800ced2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ced6:	f7f3 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceda:	2800      	cmp	r0, #0
 800cedc:	d033      	beq.n	800cf46 <_printf_float+0x26a>
 800cede:	2301      	movs	r3, #1
 800cee0:	4a41      	ldr	r2, [pc, #260]	; (800cfe8 <_printf_float+0x30c>)
 800cee2:	4631      	mov	r1, r6
 800cee4:	4628      	mov	r0, r5
 800cee6:	47b8      	blx	r7
 800cee8:	3001      	adds	r0, #1
 800ceea:	f43f af54 	beq.w	800cd96 <_printf_float+0xba>
 800ceee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cef2:	429a      	cmp	r2, r3
 800cef4:	db02      	blt.n	800cefc <_printf_float+0x220>
 800cef6:	6823      	ldr	r3, [r4, #0]
 800cef8:	07d8      	lsls	r0, r3, #31
 800cefa:	d50f      	bpl.n	800cf1c <_printf_float+0x240>
 800cefc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf00:	4631      	mov	r1, r6
 800cf02:	4628      	mov	r0, r5
 800cf04:	47b8      	blx	r7
 800cf06:	3001      	adds	r0, #1
 800cf08:	f43f af45 	beq.w	800cd96 <_printf_float+0xba>
 800cf0c:	f04f 0800 	mov.w	r8, #0
 800cf10:	f104 091a 	add.w	r9, r4, #26
 800cf14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf16:	3b01      	subs	r3, #1
 800cf18:	4543      	cmp	r3, r8
 800cf1a:	dc09      	bgt.n	800cf30 <_printf_float+0x254>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	079b      	lsls	r3, r3, #30
 800cf20:	f100 8103 	bmi.w	800d12a <_printf_float+0x44e>
 800cf24:	68e0      	ldr	r0, [r4, #12]
 800cf26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf28:	4298      	cmp	r0, r3
 800cf2a:	bfb8      	it	lt
 800cf2c:	4618      	movlt	r0, r3
 800cf2e:	e734      	b.n	800cd9a <_printf_float+0xbe>
 800cf30:	2301      	movs	r3, #1
 800cf32:	464a      	mov	r2, r9
 800cf34:	4631      	mov	r1, r6
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b8      	blx	r7
 800cf3a:	3001      	adds	r0, #1
 800cf3c:	f43f af2b 	beq.w	800cd96 <_printf_float+0xba>
 800cf40:	f108 0801 	add.w	r8, r8, #1
 800cf44:	e7e6      	b.n	800cf14 <_printf_float+0x238>
 800cf46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	dc2b      	bgt.n	800cfa4 <_printf_float+0x2c8>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	4a26      	ldr	r2, [pc, #152]	; (800cfe8 <_printf_float+0x30c>)
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	47b8      	blx	r7
 800cf56:	3001      	adds	r0, #1
 800cf58:	f43f af1d 	beq.w	800cd96 <_printf_float+0xba>
 800cf5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf5e:	b923      	cbnz	r3, 800cf6a <_printf_float+0x28e>
 800cf60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf62:	b913      	cbnz	r3, 800cf6a <_printf_float+0x28e>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	07d9      	lsls	r1, r3, #31
 800cf68:	d5d8      	bpl.n	800cf1c <_printf_float+0x240>
 800cf6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf6e:	4631      	mov	r1, r6
 800cf70:	4628      	mov	r0, r5
 800cf72:	47b8      	blx	r7
 800cf74:	3001      	adds	r0, #1
 800cf76:	f43f af0e 	beq.w	800cd96 <_printf_float+0xba>
 800cf7a:	f04f 0900 	mov.w	r9, #0
 800cf7e:	f104 0a1a 	add.w	sl, r4, #26
 800cf82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf84:	425b      	negs	r3, r3
 800cf86:	454b      	cmp	r3, r9
 800cf88:	dc01      	bgt.n	800cf8e <_printf_float+0x2b2>
 800cf8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8c:	e794      	b.n	800ceb8 <_printf_float+0x1dc>
 800cf8e:	2301      	movs	r3, #1
 800cf90:	4652      	mov	r2, sl
 800cf92:	4631      	mov	r1, r6
 800cf94:	4628      	mov	r0, r5
 800cf96:	47b8      	blx	r7
 800cf98:	3001      	adds	r0, #1
 800cf9a:	f43f aefc 	beq.w	800cd96 <_printf_float+0xba>
 800cf9e:	f109 0901 	add.w	r9, r9, #1
 800cfa2:	e7ee      	b.n	800cf82 <_printf_float+0x2a6>
 800cfa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	bfa8      	it	ge
 800cfac:	461a      	movge	r2, r3
 800cfae:	2a00      	cmp	r2, #0
 800cfb0:	4691      	mov	r9, r2
 800cfb2:	dd07      	ble.n	800cfc4 <_printf_float+0x2e8>
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4642      	mov	r2, r8
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	f43f aee9 	beq.w	800cd96 <_printf_float+0xba>
 800cfc4:	f104 031a 	add.w	r3, r4, #26
 800cfc8:	f04f 0b00 	mov.w	fp, #0
 800cfcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cfd0:	9306      	str	r3, [sp, #24]
 800cfd2:	e015      	b.n	800d000 <_printf_float+0x324>
 800cfd4:	7fefffff 	.word	0x7fefffff
 800cfd8:	08011660 	.word	0x08011660
 800cfdc:	0801165c 	.word	0x0801165c
 800cfe0:	08011668 	.word	0x08011668
 800cfe4:	08011664 	.word	0x08011664
 800cfe8:	0801166c 	.word	0x0801166c
 800cfec:	2301      	movs	r3, #1
 800cfee:	9a06      	ldr	r2, [sp, #24]
 800cff0:	4631      	mov	r1, r6
 800cff2:	4628      	mov	r0, r5
 800cff4:	47b8      	blx	r7
 800cff6:	3001      	adds	r0, #1
 800cff8:	f43f aecd 	beq.w	800cd96 <_printf_float+0xba>
 800cffc:	f10b 0b01 	add.w	fp, fp, #1
 800d000:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d004:	ebaa 0309 	sub.w	r3, sl, r9
 800d008:	455b      	cmp	r3, fp
 800d00a:	dcef      	bgt.n	800cfec <_printf_float+0x310>
 800d00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d010:	429a      	cmp	r2, r3
 800d012:	44d0      	add	r8, sl
 800d014:	db15      	blt.n	800d042 <_printf_float+0x366>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	07da      	lsls	r2, r3, #31
 800d01a:	d412      	bmi.n	800d042 <_printf_float+0x366>
 800d01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d01e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d020:	eba3 020a 	sub.w	r2, r3, sl
 800d024:	eba3 0a01 	sub.w	sl, r3, r1
 800d028:	4592      	cmp	sl, r2
 800d02a:	bfa8      	it	ge
 800d02c:	4692      	movge	sl, r2
 800d02e:	f1ba 0f00 	cmp.w	sl, #0
 800d032:	dc0e      	bgt.n	800d052 <_printf_float+0x376>
 800d034:	f04f 0800 	mov.w	r8, #0
 800d038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d03c:	f104 091a 	add.w	r9, r4, #26
 800d040:	e019      	b.n	800d076 <_printf_float+0x39a>
 800d042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d046:	4631      	mov	r1, r6
 800d048:	4628      	mov	r0, r5
 800d04a:	47b8      	blx	r7
 800d04c:	3001      	adds	r0, #1
 800d04e:	d1e5      	bne.n	800d01c <_printf_float+0x340>
 800d050:	e6a1      	b.n	800cd96 <_printf_float+0xba>
 800d052:	4653      	mov	r3, sl
 800d054:	4642      	mov	r2, r8
 800d056:	4631      	mov	r1, r6
 800d058:	4628      	mov	r0, r5
 800d05a:	47b8      	blx	r7
 800d05c:	3001      	adds	r0, #1
 800d05e:	d1e9      	bne.n	800d034 <_printf_float+0x358>
 800d060:	e699      	b.n	800cd96 <_printf_float+0xba>
 800d062:	2301      	movs	r3, #1
 800d064:	464a      	mov	r2, r9
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	f43f ae92 	beq.w	800cd96 <_printf_float+0xba>
 800d072:	f108 0801 	add.w	r8, r8, #1
 800d076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	eba3 030a 	sub.w	r3, r3, sl
 800d080:	4543      	cmp	r3, r8
 800d082:	dcee      	bgt.n	800d062 <_printf_float+0x386>
 800d084:	e74a      	b.n	800cf1c <_printf_float+0x240>
 800d086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d088:	2a01      	cmp	r2, #1
 800d08a:	dc01      	bgt.n	800d090 <_printf_float+0x3b4>
 800d08c:	07db      	lsls	r3, r3, #31
 800d08e:	d53a      	bpl.n	800d106 <_printf_float+0x42a>
 800d090:	2301      	movs	r3, #1
 800d092:	4642      	mov	r2, r8
 800d094:	4631      	mov	r1, r6
 800d096:	4628      	mov	r0, r5
 800d098:	47b8      	blx	r7
 800d09a:	3001      	adds	r0, #1
 800d09c:	f43f ae7b 	beq.w	800cd96 <_printf_float+0xba>
 800d0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	47b8      	blx	r7
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	f108 0801 	add.w	r8, r8, #1
 800d0b0:	f43f ae71 	beq.w	800cd96 <_printf_float+0xba>
 800d0b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f103 3aff 	add.w	sl, r3, #4294967295
 800d0bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	f7f3 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0c6:	b9c8      	cbnz	r0, 800d0fc <_printf_float+0x420>
 800d0c8:	4653      	mov	r3, sl
 800d0ca:	4642      	mov	r2, r8
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	47b8      	blx	r7
 800d0d2:	3001      	adds	r0, #1
 800d0d4:	d10e      	bne.n	800d0f4 <_printf_float+0x418>
 800d0d6:	e65e      	b.n	800cd96 <_printf_float+0xba>
 800d0d8:	2301      	movs	r3, #1
 800d0da:	4652      	mov	r2, sl
 800d0dc:	4631      	mov	r1, r6
 800d0de:	4628      	mov	r0, r5
 800d0e0:	47b8      	blx	r7
 800d0e2:	3001      	adds	r0, #1
 800d0e4:	f43f ae57 	beq.w	800cd96 <_printf_float+0xba>
 800d0e8:	f108 0801 	add.w	r8, r8, #1
 800d0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	4543      	cmp	r3, r8
 800d0f2:	dcf1      	bgt.n	800d0d8 <_printf_float+0x3fc>
 800d0f4:	464b      	mov	r3, r9
 800d0f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d0fa:	e6de      	b.n	800ceba <_printf_float+0x1de>
 800d0fc:	f04f 0800 	mov.w	r8, #0
 800d100:	f104 0a1a 	add.w	sl, r4, #26
 800d104:	e7f2      	b.n	800d0ec <_printf_float+0x410>
 800d106:	2301      	movs	r3, #1
 800d108:	e7df      	b.n	800d0ca <_printf_float+0x3ee>
 800d10a:	2301      	movs	r3, #1
 800d10c:	464a      	mov	r2, r9
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f ae3e 	beq.w	800cd96 <_printf_float+0xba>
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	68e3      	ldr	r3, [r4, #12]
 800d120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	4543      	cmp	r3, r8
 800d126:	dcf0      	bgt.n	800d10a <_printf_float+0x42e>
 800d128:	e6fc      	b.n	800cf24 <_printf_float+0x248>
 800d12a:	f04f 0800 	mov.w	r8, #0
 800d12e:	f104 0919 	add.w	r9, r4, #25
 800d132:	e7f4      	b.n	800d11e <_printf_float+0x442>
 800d134:	2900      	cmp	r1, #0
 800d136:	f43f ae8b 	beq.w	800ce50 <_printf_float+0x174>
 800d13a:	2300      	movs	r3, #0
 800d13c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d140:	ab09      	add	r3, sp, #36	; 0x24
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	ec49 8b10 	vmov	d0, r8, r9
 800d148:	6022      	str	r2, [r4, #0]
 800d14a:	f8cd a004 	str.w	sl, [sp, #4]
 800d14e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d152:	4628      	mov	r0, r5
 800d154:	f7ff fd2d 	bl	800cbb2 <__cvt>
 800d158:	4680      	mov	r8, r0
 800d15a:	e648      	b.n	800cdee <_printf_float+0x112>

0800d15c <_printf_common>:
 800d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d160:	4691      	mov	r9, r2
 800d162:	461f      	mov	r7, r3
 800d164:	688a      	ldr	r2, [r1, #8]
 800d166:	690b      	ldr	r3, [r1, #16]
 800d168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d16c:	4293      	cmp	r3, r2
 800d16e:	bfb8      	it	lt
 800d170:	4613      	movlt	r3, r2
 800d172:	f8c9 3000 	str.w	r3, [r9]
 800d176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d17a:	4606      	mov	r6, r0
 800d17c:	460c      	mov	r4, r1
 800d17e:	b112      	cbz	r2, 800d186 <_printf_common+0x2a>
 800d180:	3301      	adds	r3, #1
 800d182:	f8c9 3000 	str.w	r3, [r9]
 800d186:	6823      	ldr	r3, [r4, #0]
 800d188:	0699      	lsls	r1, r3, #26
 800d18a:	bf42      	ittt	mi
 800d18c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d190:	3302      	addmi	r3, #2
 800d192:	f8c9 3000 	strmi.w	r3, [r9]
 800d196:	6825      	ldr	r5, [r4, #0]
 800d198:	f015 0506 	ands.w	r5, r5, #6
 800d19c:	d107      	bne.n	800d1ae <_printf_common+0x52>
 800d19e:	f104 0a19 	add.w	sl, r4, #25
 800d1a2:	68e3      	ldr	r3, [r4, #12]
 800d1a4:	f8d9 2000 	ldr.w	r2, [r9]
 800d1a8:	1a9b      	subs	r3, r3, r2
 800d1aa:	42ab      	cmp	r3, r5
 800d1ac:	dc28      	bgt.n	800d200 <_printf_common+0xa4>
 800d1ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d1b2:	6822      	ldr	r2, [r4, #0]
 800d1b4:	3300      	adds	r3, #0
 800d1b6:	bf18      	it	ne
 800d1b8:	2301      	movne	r3, #1
 800d1ba:	0692      	lsls	r2, r2, #26
 800d1bc:	d42d      	bmi.n	800d21a <_printf_common+0xbe>
 800d1be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1c2:	4639      	mov	r1, r7
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	47c0      	blx	r8
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	d020      	beq.n	800d20e <_printf_common+0xb2>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	68e5      	ldr	r5, [r4, #12]
 800d1d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d1d4:	f003 0306 	and.w	r3, r3, #6
 800d1d8:	2b04      	cmp	r3, #4
 800d1da:	bf08      	it	eq
 800d1dc:	1aad      	subeq	r5, r5, r2
 800d1de:	68a3      	ldr	r3, [r4, #8]
 800d1e0:	6922      	ldr	r2, [r4, #16]
 800d1e2:	bf0c      	ite	eq
 800d1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1e8:	2500      	movne	r5, #0
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	bfc4      	itt	gt
 800d1ee:	1a9b      	subgt	r3, r3, r2
 800d1f0:	18ed      	addgt	r5, r5, r3
 800d1f2:	f04f 0900 	mov.w	r9, #0
 800d1f6:	341a      	adds	r4, #26
 800d1f8:	454d      	cmp	r5, r9
 800d1fa:	d11a      	bne.n	800d232 <_printf_common+0xd6>
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	e008      	b.n	800d212 <_printf_common+0xb6>
 800d200:	2301      	movs	r3, #1
 800d202:	4652      	mov	r2, sl
 800d204:	4639      	mov	r1, r7
 800d206:	4630      	mov	r0, r6
 800d208:	47c0      	blx	r8
 800d20a:	3001      	adds	r0, #1
 800d20c:	d103      	bne.n	800d216 <_printf_common+0xba>
 800d20e:	f04f 30ff 	mov.w	r0, #4294967295
 800d212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d216:	3501      	adds	r5, #1
 800d218:	e7c3      	b.n	800d1a2 <_printf_common+0x46>
 800d21a:	18e1      	adds	r1, r4, r3
 800d21c:	1c5a      	adds	r2, r3, #1
 800d21e:	2030      	movs	r0, #48	; 0x30
 800d220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d224:	4422      	add	r2, r4
 800d226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d22a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d22e:	3302      	adds	r3, #2
 800d230:	e7c5      	b.n	800d1be <_printf_common+0x62>
 800d232:	2301      	movs	r3, #1
 800d234:	4622      	mov	r2, r4
 800d236:	4639      	mov	r1, r7
 800d238:	4630      	mov	r0, r6
 800d23a:	47c0      	blx	r8
 800d23c:	3001      	adds	r0, #1
 800d23e:	d0e6      	beq.n	800d20e <_printf_common+0xb2>
 800d240:	f109 0901 	add.w	r9, r9, #1
 800d244:	e7d8      	b.n	800d1f8 <_printf_common+0x9c>
	...

0800d248 <_printf_i>:
 800d248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d24c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d250:	460c      	mov	r4, r1
 800d252:	7e09      	ldrb	r1, [r1, #24]
 800d254:	b085      	sub	sp, #20
 800d256:	296e      	cmp	r1, #110	; 0x6e
 800d258:	4617      	mov	r7, r2
 800d25a:	4606      	mov	r6, r0
 800d25c:	4698      	mov	r8, r3
 800d25e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d260:	f000 80b3 	beq.w	800d3ca <_printf_i+0x182>
 800d264:	d822      	bhi.n	800d2ac <_printf_i+0x64>
 800d266:	2963      	cmp	r1, #99	; 0x63
 800d268:	d036      	beq.n	800d2d8 <_printf_i+0x90>
 800d26a:	d80a      	bhi.n	800d282 <_printf_i+0x3a>
 800d26c:	2900      	cmp	r1, #0
 800d26e:	f000 80b9 	beq.w	800d3e4 <_printf_i+0x19c>
 800d272:	2958      	cmp	r1, #88	; 0x58
 800d274:	f000 8083 	beq.w	800d37e <_printf_i+0x136>
 800d278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d27c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d280:	e032      	b.n	800d2e8 <_printf_i+0xa0>
 800d282:	2964      	cmp	r1, #100	; 0x64
 800d284:	d001      	beq.n	800d28a <_printf_i+0x42>
 800d286:	2969      	cmp	r1, #105	; 0x69
 800d288:	d1f6      	bne.n	800d278 <_printf_i+0x30>
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	6813      	ldr	r3, [r2, #0]
 800d28e:	0605      	lsls	r5, r0, #24
 800d290:	f103 0104 	add.w	r1, r3, #4
 800d294:	d52a      	bpl.n	800d2ec <_printf_i+0xa4>
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6011      	str	r1, [r2, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	da03      	bge.n	800d2a6 <_printf_i+0x5e>
 800d29e:	222d      	movs	r2, #45	; 0x2d
 800d2a0:	425b      	negs	r3, r3
 800d2a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d2a6:	486f      	ldr	r0, [pc, #444]	; (800d464 <_printf_i+0x21c>)
 800d2a8:	220a      	movs	r2, #10
 800d2aa:	e039      	b.n	800d320 <_printf_i+0xd8>
 800d2ac:	2973      	cmp	r1, #115	; 0x73
 800d2ae:	f000 809d 	beq.w	800d3ec <_printf_i+0x1a4>
 800d2b2:	d808      	bhi.n	800d2c6 <_printf_i+0x7e>
 800d2b4:	296f      	cmp	r1, #111	; 0x6f
 800d2b6:	d020      	beq.n	800d2fa <_printf_i+0xb2>
 800d2b8:	2970      	cmp	r1, #112	; 0x70
 800d2ba:	d1dd      	bne.n	800d278 <_printf_i+0x30>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	f043 0320 	orr.w	r3, r3, #32
 800d2c2:	6023      	str	r3, [r4, #0]
 800d2c4:	e003      	b.n	800d2ce <_printf_i+0x86>
 800d2c6:	2975      	cmp	r1, #117	; 0x75
 800d2c8:	d017      	beq.n	800d2fa <_printf_i+0xb2>
 800d2ca:	2978      	cmp	r1, #120	; 0x78
 800d2cc:	d1d4      	bne.n	800d278 <_printf_i+0x30>
 800d2ce:	2378      	movs	r3, #120	; 0x78
 800d2d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d2d4:	4864      	ldr	r0, [pc, #400]	; (800d468 <_printf_i+0x220>)
 800d2d6:	e055      	b.n	800d384 <_printf_i+0x13c>
 800d2d8:	6813      	ldr	r3, [r2, #0]
 800d2da:	1d19      	adds	r1, r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6011      	str	r1, [r2, #0]
 800d2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e08c      	b.n	800d406 <_printf_i+0x1be>
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6011      	str	r1, [r2, #0]
 800d2f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2f4:	bf18      	it	ne
 800d2f6:	b21b      	sxthne	r3, r3
 800d2f8:	e7cf      	b.n	800d29a <_printf_i+0x52>
 800d2fa:	6813      	ldr	r3, [r2, #0]
 800d2fc:	6825      	ldr	r5, [r4, #0]
 800d2fe:	1d18      	adds	r0, r3, #4
 800d300:	6010      	str	r0, [r2, #0]
 800d302:	0628      	lsls	r0, r5, #24
 800d304:	d501      	bpl.n	800d30a <_printf_i+0xc2>
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	e002      	b.n	800d310 <_printf_i+0xc8>
 800d30a:	0668      	lsls	r0, r5, #25
 800d30c:	d5fb      	bpl.n	800d306 <_printf_i+0xbe>
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	4854      	ldr	r0, [pc, #336]	; (800d464 <_printf_i+0x21c>)
 800d312:	296f      	cmp	r1, #111	; 0x6f
 800d314:	bf14      	ite	ne
 800d316:	220a      	movne	r2, #10
 800d318:	2208      	moveq	r2, #8
 800d31a:	2100      	movs	r1, #0
 800d31c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d320:	6865      	ldr	r5, [r4, #4]
 800d322:	60a5      	str	r5, [r4, #8]
 800d324:	2d00      	cmp	r5, #0
 800d326:	f2c0 8095 	blt.w	800d454 <_printf_i+0x20c>
 800d32a:	6821      	ldr	r1, [r4, #0]
 800d32c:	f021 0104 	bic.w	r1, r1, #4
 800d330:	6021      	str	r1, [r4, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d13d      	bne.n	800d3b2 <_printf_i+0x16a>
 800d336:	2d00      	cmp	r5, #0
 800d338:	f040 808e 	bne.w	800d458 <_printf_i+0x210>
 800d33c:	4665      	mov	r5, ip
 800d33e:	2a08      	cmp	r2, #8
 800d340:	d10b      	bne.n	800d35a <_printf_i+0x112>
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	07db      	lsls	r3, r3, #31
 800d346:	d508      	bpl.n	800d35a <_printf_i+0x112>
 800d348:	6923      	ldr	r3, [r4, #16]
 800d34a:	6862      	ldr	r2, [r4, #4]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	bfde      	ittt	le
 800d350:	2330      	movle	r3, #48	; 0x30
 800d352:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d35a:	ebac 0305 	sub.w	r3, ip, r5
 800d35e:	6123      	str	r3, [r4, #16]
 800d360:	f8cd 8000 	str.w	r8, [sp]
 800d364:	463b      	mov	r3, r7
 800d366:	aa03      	add	r2, sp, #12
 800d368:	4621      	mov	r1, r4
 800d36a:	4630      	mov	r0, r6
 800d36c:	f7ff fef6 	bl	800d15c <_printf_common>
 800d370:	3001      	adds	r0, #1
 800d372:	d14d      	bne.n	800d410 <_printf_i+0x1c8>
 800d374:	f04f 30ff 	mov.w	r0, #4294967295
 800d378:	b005      	add	sp, #20
 800d37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d37e:	4839      	ldr	r0, [pc, #228]	; (800d464 <_printf_i+0x21c>)
 800d380:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d384:	6813      	ldr	r3, [r2, #0]
 800d386:	6821      	ldr	r1, [r4, #0]
 800d388:	1d1d      	adds	r5, r3, #4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6015      	str	r5, [r2, #0]
 800d38e:	060a      	lsls	r2, r1, #24
 800d390:	d50b      	bpl.n	800d3aa <_printf_i+0x162>
 800d392:	07ca      	lsls	r2, r1, #31
 800d394:	bf44      	itt	mi
 800d396:	f041 0120 	orrmi.w	r1, r1, #32
 800d39a:	6021      	strmi	r1, [r4, #0]
 800d39c:	b91b      	cbnz	r3, 800d3a6 <_printf_i+0x15e>
 800d39e:	6822      	ldr	r2, [r4, #0]
 800d3a0:	f022 0220 	bic.w	r2, r2, #32
 800d3a4:	6022      	str	r2, [r4, #0]
 800d3a6:	2210      	movs	r2, #16
 800d3a8:	e7b7      	b.n	800d31a <_printf_i+0xd2>
 800d3aa:	064d      	lsls	r5, r1, #25
 800d3ac:	bf48      	it	mi
 800d3ae:	b29b      	uxthmi	r3, r3
 800d3b0:	e7ef      	b.n	800d392 <_printf_i+0x14a>
 800d3b2:	4665      	mov	r5, ip
 800d3b4:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3b8:	fb02 3311 	mls	r3, r2, r1, r3
 800d3bc:	5cc3      	ldrb	r3, [r0, r3]
 800d3be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	2900      	cmp	r1, #0
 800d3c6:	d1f5      	bne.n	800d3b4 <_printf_i+0x16c>
 800d3c8:	e7b9      	b.n	800d33e <_printf_i+0xf6>
 800d3ca:	6813      	ldr	r3, [r2, #0]
 800d3cc:	6825      	ldr	r5, [r4, #0]
 800d3ce:	6961      	ldr	r1, [r4, #20]
 800d3d0:	1d18      	adds	r0, r3, #4
 800d3d2:	6010      	str	r0, [r2, #0]
 800d3d4:	0628      	lsls	r0, r5, #24
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	d501      	bpl.n	800d3de <_printf_i+0x196>
 800d3da:	6019      	str	r1, [r3, #0]
 800d3dc:	e002      	b.n	800d3e4 <_printf_i+0x19c>
 800d3de:	066a      	lsls	r2, r5, #25
 800d3e0:	d5fb      	bpl.n	800d3da <_printf_i+0x192>
 800d3e2:	8019      	strh	r1, [r3, #0]
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6123      	str	r3, [r4, #16]
 800d3e8:	4665      	mov	r5, ip
 800d3ea:	e7b9      	b.n	800d360 <_printf_i+0x118>
 800d3ec:	6813      	ldr	r3, [r2, #0]
 800d3ee:	1d19      	adds	r1, r3, #4
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	681d      	ldr	r5, [r3, #0]
 800d3f4:	6862      	ldr	r2, [r4, #4]
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	f7f2 fef1 	bl	80001e0 <memchr>
 800d3fe:	b108      	cbz	r0, 800d404 <_printf_i+0x1bc>
 800d400:	1b40      	subs	r0, r0, r5
 800d402:	6060      	str	r0, [r4, #4]
 800d404:	6863      	ldr	r3, [r4, #4]
 800d406:	6123      	str	r3, [r4, #16]
 800d408:	2300      	movs	r3, #0
 800d40a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40e:	e7a7      	b.n	800d360 <_printf_i+0x118>
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	462a      	mov	r2, r5
 800d414:	4639      	mov	r1, r7
 800d416:	4630      	mov	r0, r6
 800d418:	47c0      	blx	r8
 800d41a:	3001      	adds	r0, #1
 800d41c:	d0aa      	beq.n	800d374 <_printf_i+0x12c>
 800d41e:	6823      	ldr	r3, [r4, #0]
 800d420:	079b      	lsls	r3, r3, #30
 800d422:	d413      	bmi.n	800d44c <_printf_i+0x204>
 800d424:	68e0      	ldr	r0, [r4, #12]
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	4298      	cmp	r0, r3
 800d42a:	bfb8      	it	lt
 800d42c:	4618      	movlt	r0, r3
 800d42e:	e7a3      	b.n	800d378 <_printf_i+0x130>
 800d430:	2301      	movs	r3, #1
 800d432:	464a      	mov	r2, r9
 800d434:	4639      	mov	r1, r7
 800d436:	4630      	mov	r0, r6
 800d438:	47c0      	blx	r8
 800d43a:	3001      	adds	r0, #1
 800d43c:	d09a      	beq.n	800d374 <_printf_i+0x12c>
 800d43e:	3501      	adds	r5, #1
 800d440:	68e3      	ldr	r3, [r4, #12]
 800d442:	9a03      	ldr	r2, [sp, #12]
 800d444:	1a9b      	subs	r3, r3, r2
 800d446:	42ab      	cmp	r3, r5
 800d448:	dcf2      	bgt.n	800d430 <_printf_i+0x1e8>
 800d44a:	e7eb      	b.n	800d424 <_printf_i+0x1dc>
 800d44c:	2500      	movs	r5, #0
 800d44e:	f104 0919 	add.w	r9, r4, #25
 800d452:	e7f5      	b.n	800d440 <_printf_i+0x1f8>
 800d454:	2b00      	cmp	r3, #0
 800d456:	d1ac      	bne.n	800d3b2 <_printf_i+0x16a>
 800d458:	7803      	ldrb	r3, [r0, #0]
 800d45a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d45e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d462:	e76c      	b.n	800d33e <_printf_i+0xf6>
 800d464:	0801166e 	.word	0x0801166e
 800d468:	0801167f 	.word	0x0801167f

0800d46c <_scanf_float>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	469a      	mov	sl, r3
 800d472:	688b      	ldr	r3, [r1, #8]
 800d474:	4616      	mov	r6, r2
 800d476:	1e5a      	subs	r2, r3, #1
 800d478:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d47c:	b087      	sub	sp, #28
 800d47e:	bf83      	ittte	hi
 800d480:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d484:	189b      	addhi	r3, r3, r2
 800d486:	9301      	strhi	r3, [sp, #4]
 800d488:	2300      	movls	r3, #0
 800d48a:	bf86      	itte	hi
 800d48c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d490:	608b      	strhi	r3, [r1, #8]
 800d492:	9301      	strls	r3, [sp, #4]
 800d494:	680b      	ldr	r3, [r1, #0]
 800d496:	4688      	mov	r8, r1
 800d498:	f04f 0b00 	mov.w	fp, #0
 800d49c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d4a0:	f848 3b1c 	str.w	r3, [r8], #28
 800d4a4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	4645      	mov	r5, r8
 800d4ae:	465a      	mov	r2, fp
 800d4b0:	46d9      	mov	r9, fp
 800d4b2:	f8cd b008 	str.w	fp, [sp, #8]
 800d4b6:	68a1      	ldr	r1, [r4, #8]
 800d4b8:	b181      	cbz	r1, 800d4dc <_scanf_float+0x70>
 800d4ba:	6833      	ldr	r3, [r6, #0]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b49      	cmp	r3, #73	; 0x49
 800d4c0:	d071      	beq.n	800d5a6 <_scanf_float+0x13a>
 800d4c2:	d84d      	bhi.n	800d560 <_scanf_float+0xf4>
 800d4c4:	2b39      	cmp	r3, #57	; 0x39
 800d4c6:	d840      	bhi.n	800d54a <_scanf_float+0xde>
 800d4c8:	2b31      	cmp	r3, #49	; 0x31
 800d4ca:	f080 8088 	bcs.w	800d5de <_scanf_float+0x172>
 800d4ce:	2b2d      	cmp	r3, #45	; 0x2d
 800d4d0:	f000 8090 	beq.w	800d5f4 <_scanf_float+0x188>
 800d4d4:	d815      	bhi.n	800d502 <_scanf_float+0x96>
 800d4d6:	2b2b      	cmp	r3, #43	; 0x2b
 800d4d8:	f000 808c 	beq.w	800d5f4 <_scanf_float+0x188>
 800d4dc:	f1b9 0f00 	cmp.w	r9, #0
 800d4e0:	d003      	beq.n	800d4ea <_scanf_float+0x7e>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	3a01      	subs	r2, #1
 800d4ec:	2a01      	cmp	r2, #1
 800d4ee:	f200 80ea 	bhi.w	800d6c6 <_scanf_float+0x25a>
 800d4f2:	4545      	cmp	r5, r8
 800d4f4:	f200 80dc 	bhi.w	800d6b0 <_scanf_float+0x244>
 800d4f8:	2601      	movs	r6, #1
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	b007      	add	sp, #28
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d502:	2b2e      	cmp	r3, #46	; 0x2e
 800d504:	f000 809f 	beq.w	800d646 <_scanf_float+0x1da>
 800d508:	2b30      	cmp	r3, #48	; 0x30
 800d50a:	d1e7      	bne.n	800d4dc <_scanf_float+0x70>
 800d50c:	6820      	ldr	r0, [r4, #0]
 800d50e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d512:	d064      	beq.n	800d5de <_scanf_float+0x172>
 800d514:	9b01      	ldr	r3, [sp, #4]
 800d516:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d51a:	6020      	str	r0, [r4, #0]
 800d51c:	f109 0901 	add.w	r9, r9, #1
 800d520:	b11b      	cbz	r3, 800d52a <_scanf_float+0xbe>
 800d522:	3b01      	subs	r3, #1
 800d524:	3101      	adds	r1, #1
 800d526:	9301      	str	r3, [sp, #4]
 800d528:	60a1      	str	r1, [r4, #8]
 800d52a:	68a3      	ldr	r3, [r4, #8]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	60a3      	str	r3, [r4, #8]
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	3301      	adds	r3, #1
 800d534:	6123      	str	r3, [r4, #16]
 800d536:	6873      	ldr	r3, [r6, #4]
 800d538:	3b01      	subs	r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	6073      	str	r3, [r6, #4]
 800d53e:	f340 80ac 	ble.w	800d69a <_scanf_float+0x22e>
 800d542:	6833      	ldr	r3, [r6, #0]
 800d544:	3301      	adds	r3, #1
 800d546:	6033      	str	r3, [r6, #0]
 800d548:	e7b5      	b.n	800d4b6 <_scanf_float+0x4a>
 800d54a:	2b45      	cmp	r3, #69	; 0x45
 800d54c:	f000 8085 	beq.w	800d65a <_scanf_float+0x1ee>
 800d550:	2b46      	cmp	r3, #70	; 0x46
 800d552:	d06a      	beq.n	800d62a <_scanf_float+0x1be>
 800d554:	2b41      	cmp	r3, #65	; 0x41
 800d556:	d1c1      	bne.n	800d4dc <_scanf_float+0x70>
 800d558:	2a01      	cmp	r2, #1
 800d55a:	d1bf      	bne.n	800d4dc <_scanf_float+0x70>
 800d55c:	2202      	movs	r2, #2
 800d55e:	e046      	b.n	800d5ee <_scanf_float+0x182>
 800d560:	2b65      	cmp	r3, #101	; 0x65
 800d562:	d07a      	beq.n	800d65a <_scanf_float+0x1ee>
 800d564:	d818      	bhi.n	800d598 <_scanf_float+0x12c>
 800d566:	2b54      	cmp	r3, #84	; 0x54
 800d568:	d066      	beq.n	800d638 <_scanf_float+0x1cc>
 800d56a:	d811      	bhi.n	800d590 <_scanf_float+0x124>
 800d56c:	2b4e      	cmp	r3, #78	; 0x4e
 800d56e:	d1b5      	bne.n	800d4dc <_scanf_float+0x70>
 800d570:	2a00      	cmp	r2, #0
 800d572:	d146      	bne.n	800d602 <_scanf_float+0x196>
 800d574:	f1b9 0f00 	cmp.w	r9, #0
 800d578:	d145      	bne.n	800d606 <_scanf_float+0x19a>
 800d57a:	6821      	ldr	r1, [r4, #0]
 800d57c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d580:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d584:	d13f      	bne.n	800d606 <_scanf_float+0x19a>
 800d586:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d58a:	6021      	str	r1, [r4, #0]
 800d58c:	2201      	movs	r2, #1
 800d58e:	e02e      	b.n	800d5ee <_scanf_float+0x182>
 800d590:	2b59      	cmp	r3, #89	; 0x59
 800d592:	d01e      	beq.n	800d5d2 <_scanf_float+0x166>
 800d594:	2b61      	cmp	r3, #97	; 0x61
 800d596:	e7de      	b.n	800d556 <_scanf_float+0xea>
 800d598:	2b6e      	cmp	r3, #110	; 0x6e
 800d59a:	d0e9      	beq.n	800d570 <_scanf_float+0x104>
 800d59c:	d815      	bhi.n	800d5ca <_scanf_float+0x15e>
 800d59e:	2b66      	cmp	r3, #102	; 0x66
 800d5a0:	d043      	beq.n	800d62a <_scanf_float+0x1be>
 800d5a2:	2b69      	cmp	r3, #105	; 0x69
 800d5a4:	d19a      	bne.n	800d4dc <_scanf_float+0x70>
 800d5a6:	f1bb 0f00 	cmp.w	fp, #0
 800d5aa:	d138      	bne.n	800d61e <_scanf_float+0x1b2>
 800d5ac:	f1b9 0f00 	cmp.w	r9, #0
 800d5b0:	d197      	bne.n	800d4e2 <_scanf_float+0x76>
 800d5b2:	6821      	ldr	r1, [r4, #0]
 800d5b4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d5b8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d5bc:	d195      	bne.n	800d4ea <_scanf_float+0x7e>
 800d5be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d5c2:	6021      	str	r1, [r4, #0]
 800d5c4:	f04f 0b01 	mov.w	fp, #1
 800d5c8:	e011      	b.n	800d5ee <_scanf_float+0x182>
 800d5ca:	2b74      	cmp	r3, #116	; 0x74
 800d5cc:	d034      	beq.n	800d638 <_scanf_float+0x1cc>
 800d5ce:	2b79      	cmp	r3, #121	; 0x79
 800d5d0:	d184      	bne.n	800d4dc <_scanf_float+0x70>
 800d5d2:	f1bb 0f07 	cmp.w	fp, #7
 800d5d6:	d181      	bne.n	800d4dc <_scanf_float+0x70>
 800d5d8:	f04f 0b08 	mov.w	fp, #8
 800d5dc:	e007      	b.n	800d5ee <_scanf_float+0x182>
 800d5de:	eb12 0f0b 	cmn.w	r2, fp
 800d5e2:	f47f af7b 	bne.w	800d4dc <_scanf_float+0x70>
 800d5e6:	6821      	ldr	r1, [r4, #0]
 800d5e8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d5ec:	6021      	str	r1, [r4, #0]
 800d5ee:	702b      	strb	r3, [r5, #0]
 800d5f0:	3501      	adds	r5, #1
 800d5f2:	e79a      	b.n	800d52a <_scanf_float+0xbe>
 800d5f4:	6821      	ldr	r1, [r4, #0]
 800d5f6:	0608      	lsls	r0, r1, #24
 800d5f8:	f57f af70 	bpl.w	800d4dc <_scanf_float+0x70>
 800d5fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d600:	e7f4      	b.n	800d5ec <_scanf_float+0x180>
 800d602:	2a02      	cmp	r2, #2
 800d604:	d047      	beq.n	800d696 <_scanf_float+0x22a>
 800d606:	f1bb 0f01 	cmp.w	fp, #1
 800d60a:	d003      	beq.n	800d614 <_scanf_float+0x1a8>
 800d60c:	f1bb 0f04 	cmp.w	fp, #4
 800d610:	f47f af64 	bne.w	800d4dc <_scanf_float+0x70>
 800d614:	f10b 0b01 	add.w	fp, fp, #1
 800d618:	fa5f fb8b 	uxtb.w	fp, fp
 800d61c:	e7e7      	b.n	800d5ee <_scanf_float+0x182>
 800d61e:	f1bb 0f03 	cmp.w	fp, #3
 800d622:	d0f7      	beq.n	800d614 <_scanf_float+0x1a8>
 800d624:	f1bb 0f05 	cmp.w	fp, #5
 800d628:	e7f2      	b.n	800d610 <_scanf_float+0x1a4>
 800d62a:	f1bb 0f02 	cmp.w	fp, #2
 800d62e:	f47f af55 	bne.w	800d4dc <_scanf_float+0x70>
 800d632:	f04f 0b03 	mov.w	fp, #3
 800d636:	e7da      	b.n	800d5ee <_scanf_float+0x182>
 800d638:	f1bb 0f06 	cmp.w	fp, #6
 800d63c:	f47f af4e 	bne.w	800d4dc <_scanf_float+0x70>
 800d640:	f04f 0b07 	mov.w	fp, #7
 800d644:	e7d3      	b.n	800d5ee <_scanf_float+0x182>
 800d646:	6821      	ldr	r1, [r4, #0]
 800d648:	0588      	lsls	r0, r1, #22
 800d64a:	f57f af47 	bpl.w	800d4dc <_scanf_float+0x70>
 800d64e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d652:	6021      	str	r1, [r4, #0]
 800d654:	f8cd 9008 	str.w	r9, [sp, #8]
 800d658:	e7c9      	b.n	800d5ee <_scanf_float+0x182>
 800d65a:	6821      	ldr	r1, [r4, #0]
 800d65c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d660:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d664:	d006      	beq.n	800d674 <_scanf_float+0x208>
 800d666:	0548      	lsls	r0, r1, #21
 800d668:	f57f af38 	bpl.w	800d4dc <_scanf_float+0x70>
 800d66c:	f1b9 0f00 	cmp.w	r9, #0
 800d670:	f43f af3b 	beq.w	800d4ea <_scanf_float+0x7e>
 800d674:	0588      	lsls	r0, r1, #22
 800d676:	bf58      	it	pl
 800d678:	9802      	ldrpl	r0, [sp, #8]
 800d67a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d67e:	bf58      	it	pl
 800d680:	eba9 0000 	subpl.w	r0, r9, r0
 800d684:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d688:	bf58      	it	pl
 800d68a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d68e:	6021      	str	r1, [r4, #0]
 800d690:	f04f 0900 	mov.w	r9, #0
 800d694:	e7ab      	b.n	800d5ee <_scanf_float+0x182>
 800d696:	2203      	movs	r2, #3
 800d698:	e7a9      	b.n	800d5ee <_scanf_float+0x182>
 800d69a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d69e:	9205      	str	r2, [sp, #20]
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	4798      	blx	r3
 800d6a6:	9a05      	ldr	r2, [sp, #20]
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f43f af04 	beq.w	800d4b6 <_scanf_float+0x4a>
 800d6ae:	e715      	b.n	800d4dc <_scanf_float+0x70>
 800d6b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d6b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d6b8:	4632      	mov	r2, r6
 800d6ba:	4638      	mov	r0, r7
 800d6bc:	4798      	blx	r3
 800d6be:	6923      	ldr	r3, [r4, #16]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	6123      	str	r3, [r4, #16]
 800d6c4:	e715      	b.n	800d4f2 <_scanf_float+0x86>
 800d6c6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6ca:	2b06      	cmp	r3, #6
 800d6cc:	d80a      	bhi.n	800d6e4 <_scanf_float+0x278>
 800d6ce:	f1bb 0f02 	cmp.w	fp, #2
 800d6d2:	d968      	bls.n	800d7a6 <_scanf_float+0x33a>
 800d6d4:	f1ab 0b03 	sub.w	fp, fp, #3
 800d6d8:	fa5f fb8b 	uxtb.w	fp, fp
 800d6dc:	eba5 0b0b 	sub.w	fp, r5, fp
 800d6e0:	455d      	cmp	r5, fp
 800d6e2:	d14b      	bne.n	800d77c <_scanf_float+0x310>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	05da      	lsls	r2, r3, #23
 800d6e8:	d51f      	bpl.n	800d72a <_scanf_float+0x2be>
 800d6ea:	055b      	lsls	r3, r3, #21
 800d6ec:	d468      	bmi.n	800d7c0 <_scanf_float+0x354>
 800d6ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	2965      	cmp	r1, #101	; 0x65
 800d6f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6fa:	f105 3bff 	add.w	fp, r5, #4294967295
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	d00d      	beq.n	800d71e <_scanf_float+0x2b2>
 800d702:	2945      	cmp	r1, #69	; 0x45
 800d704:	d00b      	beq.n	800d71e <_scanf_float+0x2b2>
 800d706:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d70a:	4632      	mov	r2, r6
 800d70c:	4638      	mov	r0, r7
 800d70e:	4798      	blx	r3
 800d710:	6923      	ldr	r3, [r4, #16]
 800d712:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d716:	3b01      	subs	r3, #1
 800d718:	f1a5 0b02 	sub.w	fp, r5, #2
 800d71c:	6123      	str	r3, [r4, #16]
 800d71e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d722:	4632      	mov	r2, r6
 800d724:	4638      	mov	r0, r7
 800d726:	4798      	blx	r3
 800d728:	465d      	mov	r5, fp
 800d72a:	6826      	ldr	r6, [r4, #0]
 800d72c:	f016 0610 	ands.w	r6, r6, #16
 800d730:	d17a      	bne.n	800d828 <_scanf_float+0x3bc>
 800d732:	702e      	strb	r6, [r5, #0]
 800d734:	6823      	ldr	r3, [r4, #0]
 800d736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d73a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d73e:	d142      	bne.n	800d7c6 <_scanf_float+0x35a>
 800d740:	9b02      	ldr	r3, [sp, #8]
 800d742:	eba9 0303 	sub.w	r3, r9, r3
 800d746:	425a      	negs	r2, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d149      	bne.n	800d7e0 <_scanf_float+0x374>
 800d74c:	2200      	movs	r2, #0
 800d74e:	4641      	mov	r1, r8
 800d750:	4638      	mov	r0, r7
 800d752:	f000 ff21 	bl	800e598 <_strtod_r>
 800d756:	6825      	ldr	r5, [r4, #0]
 800d758:	f8da 3000 	ldr.w	r3, [sl]
 800d75c:	f015 0f02 	tst.w	r5, #2
 800d760:	f103 0204 	add.w	r2, r3, #4
 800d764:	ec59 8b10 	vmov	r8, r9, d0
 800d768:	f8ca 2000 	str.w	r2, [sl]
 800d76c:	d043      	beq.n	800d7f6 <_scanf_float+0x38a>
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	e9c3 8900 	strd	r8, r9, [r3]
 800d774:	68e3      	ldr	r3, [r4, #12]
 800d776:	3301      	adds	r3, #1
 800d778:	60e3      	str	r3, [r4, #12]
 800d77a:	e6be      	b.n	800d4fa <_scanf_float+0x8e>
 800d77c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d780:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d784:	4632      	mov	r2, r6
 800d786:	4638      	mov	r0, r7
 800d788:	4798      	blx	r3
 800d78a:	6923      	ldr	r3, [r4, #16]
 800d78c:	3b01      	subs	r3, #1
 800d78e:	6123      	str	r3, [r4, #16]
 800d790:	e7a6      	b.n	800d6e0 <_scanf_float+0x274>
 800d792:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d796:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d79a:	4632      	mov	r2, r6
 800d79c:	4638      	mov	r0, r7
 800d79e:	4798      	blx	r3
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	4545      	cmp	r5, r8
 800d7a8:	d8f3      	bhi.n	800d792 <_scanf_float+0x326>
 800d7aa:	e6a5      	b.n	800d4f8 <_scanf_float+0x8c>
 800d7ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d7b4:	4632      	mov	r2, r6
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	4798      	blx	r3
 800d7ba:	6923      	ldr	r3, [r4, #16]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	4545      	cmp	r5, r8
 800d7c2:	d8f3      	bhi.n	800d7ac <_scanf_float+0x340>
 800d7c4:	e698      	b.n	800d4f8 <_scanf_float+0x8c>
 800d7c6:	9b03      	ldr	r3, [sp, #12]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d0bf      	beq.n	800d74c <_scanf_float+0x2e0>
 800d7cc:	9904      	ldr	r1, [sp, #16]
 800d7ce:	230a      	movs	r3, #10
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	3101      	adds	r1, #1
 800d7d4:	4638      	mov	r0, r7
 800d7d6:	f000 ff6b 	bl	800e6b0 <_strtol_r>
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	9d04      	ldr	r5, [sp, #16]
 800d7de:	1ac2      	subs	r2, r0, r3
 800d7e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d7e4:	429d      	cmp	r5, r3
 800d7e6:	bf28      	it	cs
 800d7e8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d7ec:	490f      	ldr	r1, [pc, #60]	; (800d82c <_scanf_float+0x3c0>)
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 f8a0 	bl	800d934 <siprintf>
 800d7f4:	e7aa      	b.n	800d74c <_scanf_float+0x2e0>
 800d7f6:	f015 0504 	ands.w	r5, r5, #4
 800d7fa:	d1b8      	bne.n	800d76e <_scanf_float+0x302>
 800d7fc:	681f      	ldr	r7, [r3, #0]
 800d7fe:	ee10 2a10 	vmov	r2, s0
 800d802:	464b      	mov	r3, r9
 800d804:	ee10 0a10 	vmov	r0, s0
 800d808:	4649      	mov	r1, r9
 800d80a:	f7f3 f98f 	bl	8000b2c <__aeabi_dcmpun>
 800d80e:	b128      	cbz	r0, 800d81c <_scanf_float+0x3b0>
 800d810:	4628      	mov	r0, r5
 800d812:	f000 f889 	bl	800d928 <nanf>
 800d816:	ed87 0a00 	vstr	s0, [r7]
 800d81a:	e7ab      	b.n	800d774 <_scanf_float+0x308>
 800d81c:	4640      	mov	r0, r8
 800d81e:	4649      	mov	r1, r9
 800d820:	f7f3 f9e2 	bl	8000be8 <__aeabi_d2f>
 800d824:	6038      	str	r0, [r7, #0]
 800d826:	e7a5      	b.n	800d774 <_scanf_float+0x308>
 800d828:	2600      	movs	r6, #0
 800d82a:	e666      	b.n	800d4fa <_scanf_float+0x8e>
 800d82c:	08011690 	.word	0x08011690

0800d830 <iprintf>:
 800d830:	b40f      	push	{r0, r1, r2, r3}
 800d832:	4b0a      	ldr	r3, [pc, #40]	; (800d85c <iprintf+0x2c>)
 800d834:	b513      	push	{r0, r1, r4, lr}
 800d836:	681c      	ldr	r4, [r3, #0]
 800d838:	b124      	cbz	r4, 800d844 <iprintf+0x14>
 800d83a:	69a3      	ldr	r3, [r4, #24]
 800d83c:	b913      	cbnz	r3, 800d844 <iprintf+0x14>
 800d83e:	4620      	mov	r0, r4
 800d840:	f001 ff3e 	bl	800f6c0 <__sinit>
 800d844:	ab05      	add	r3, sp, #20
 800d846:	9a04      	ldr	r2, [sp, #16]
 800d848:	68a1      	ldr	r1, [r4, #8]
 800d84a:	9301      	str	r3, [sp, #4]
 800d84c:	4620      	mov	r0, r4
 800d84e:	f003 f9ab 	bl	8010ba8 <_vfiprintf_r>
 800d852:	b002      	add	sp, #8
 800d854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d858:	b004      	add	sp, #16
 800d85a:	4770      	bx	lr
 800d85c:	20000040 	.word	0x20000040

0800d860 <_puts_r>:
 800d860:	b570      	push	{r4, r5, r6, lr}
 800d862:	460e      	mov	r6, r1
 800d864:	4605      	mov	r5, r0
 800d866:	b118      	cbz	r0, 800d870 <_puts_r+0x10>
 800d868:	6983      	ldr	r3, [r0, #24]
 800d86a:	b90b      	cbnz	r3, 800d870 <_puts_r+0x10>
 800d86c:	f001 ff28 	bl	800f6c0 <__sinit>
 800d870:	69ab      	ldr	r3, [r5, #24]
 800d872:	68ac      	ldr	r4, [r5, #8]
 800d874:	b913      	cbnz	r3, 800d87c <_puts_r+0x1c>
 800d876:	4628      	mov	r0, r5
 800d878:	f001 ff22 	bl	800f6c0 <__sinit>
 800d87c:	4b23      	ldr	r3, [pc, #140]	; (800d90c <_puts_r+0xac>)
 800d87e:	429c      	cmp	r4, r3
 800d880:	d117      	bne.n	800d8b2 <_puts_r+0x52>
 800d882:	686c      	ldr	r4, [r5, #4]
 800d884:	89a3      	ldrh	r3, [r4, #12]
 800d886:	071b      	lsls	r3, r3, #28
 800d888:	d51d      	bpl.n	800d8c6 <_puts_r+0x66>
 800d88a:	6923      	ldr	r3, [r4, #16]
 800d88c:	b1db      	cbz	r3, 800d8c6 <_puts_r+0x66>
 800d88e:	3e01      	subs	r6, #1
 800d890:	68a3      	ldr	r3, [r4, #8]
 800d892:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d896:	3b01      	subs	r3, #1
 800d898:	60a3      	str	r3, [r4, #8]
 800d89a:	b9e9      	cbnz	r1, 800d8d8 <_puts_r+0x78>
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	da2e      	bge.n	800d8fe <_puts_r+0x9e>
 800d8a0:	4622      	mov	r2, r4
 800d8a2:	210a      	movs	r1, #10
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f000 ff15 	bl	800e6d4 <__swbuf_r>
 800d8aa:	3001      	adds	r0, #1
 800d8ac:	d011      	beq.n	800d8d2 <_puts_r+0x72>
 800d8ae:	200a      	movs	r0, #10
 800d8b0:	e011      	b.n	800d8d6 <_puts_r+0x76>
 800d8b2:	4b17      	ldr	r3, [pc, #92]	; (800d910 <_puts_r+0xb0>)
 800d8b4:	429c      	cmp	r4, r3
 800d8b6:	d101      	bne.n	800d8bc <_puts_r+0x5c>
 800d8b8:	68ac      	ldr	r4, [r5, #8]
 800d8ba:	e7e3      	b.n	800d884 <_puts_r+0x24>
 800d8bc:	4b15      	ldr	r3, [pc, #84]	; (800d914 <_puts_r+0xb4>)
 800d8be:	429c      	cmp	r4, r3
 800d8c0:	bf08      	it	eq
 800d8c2:	68ec      	ldreq	r4, [r5, #12]
 800d8c4:	e7de      	b.n	800d884 <_puts_r+0x24>
 800d8c6:	4621      	mov	r1, r4
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	f000 ff55 	bl	800e778 <__swsetup_r>
 800d8ce:	2800      	cmp	r0, #0
 800d8d0:	d0dd      	beq.n	800d88e <_puts_r+0x2e>
 800d8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	da04      	bge.n	800d8e6 <_puts_r+0x86>
 800d8dc:	69a2      	ldr	r2, [r4, #24]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	dc06      	bgt.n	800d8f0 <_puts_r+0x90>
 800d8e2:	290a      	cmp	r1, #10
 800d8e4:	d004      	beq.n	800d8f0 <_puts_r+0x90>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	6022      	str	r2, [r4, #0]
 800d8ec:	7019      	strb	r1, [r3, #0]
 800d8ee:	e7cf      	b.n	800d890 <_puts_r+0x30>
 800d8f0:	4622      	mov	r2, r4
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	f000 feee 	bl	800e6d4 <__swbuf_r>
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	d1c9      	bne.n	800d890 <_puts_r+0x30>
 800d8fc:	e7e9      	b.n	800d8d2 <_puts_r+0x72>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	200a      	movs	r0, #10
 800d902:	1c5a      	adds	r2, r3, #1
 800d904:	6022      	str	r2, [r4, #0]
 800d906:	7018      	strb	r0, [r3, #0]
 800d908:	e7e5      	b.n	800d8d6 <_puts_r+0x76>
 800d90a:	bf00      	nop
 800d90c:	08011718 	.word	0x08011718
 800d910:	08011738 	.word	0x08011738
 800d914:	080116f8 	.word	0x080116f8

0800d918 <puts>:
 800d918:	4b02      	ldr	r3, [pc, #8]	; (800d924 <puts+0xc>)
 800d91a:	4601      	mov	r1, r0
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	f7ff bf9f 	b.w	800d860 <_puts_r>
 800d922:	bf00      	nop
 800d924:	20000040 	.word	0x20000040

0800d928 <nanf>:
 800d928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d930 <nanf+0x8>
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	7fc00000 	.word	0x7fc00000

0800d934 <siprintf>:
 800d934:	b40e      	push	{r1, r2, r3}
 800d936:	b500      	push	{lr}
 800d938:	b09c      	sub	sp, #112	; 0x70
 800d93a:	ab1d      	add	r3, sp, #116	; 0x74
 800d93c:	9002      	str	r0, [sp, #8]
 800d93e:	9006      	str	r0, [sp, #24]
 800d940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d944:	4809      	ldr	r0, [pc, #36]	; (800d96c <siprintf+0x38>)
 800d946:	9107      	str	r1, [sp, #28]
 800d948:	9104      	str	r1, [sp, #16]
 800d94a:	4909      	ldr	r1, [pc, #36]	; (800d970 <siprintf+0x3c>)
 800d94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d950:	9105      	str	r1, [sp, #20]
 800d952:	6800      	ldr	r0, [r0, #0]
 800d954:	9301      	str	r3, [sp, #4]
 800d956:	a902      	add	r1, sp, #8
 800d958:	f003 f804 	bl	8010964 <_svfiprintf_r>
 800d95c:	9b02      	ldr	r3, [sp, #8]
 800d95e:	2200      	movs	r2, #0
 800d960:	701a      	strb	r2, [r3, #0]
 800d962:	b01c      	add	sp, #112	; 0x70
 800d964:	f85d eb04 	ldr.w	lr, [sp], #4
 800d968:	b003      	add	sp, #12
 800d96a:	4770      	bx	lr
 800d96c:	20000040 	.word	0x20000040
 800d970:	ffff0208 	.word	0xffff0208

0800d974 <sulp>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	4604      	mov	r4, r0
 800d978:	460d      	mov	r5, r1
 800d97a:	ec45 4b10 	vmov	d0, r4, r5
 800d97e:	4616      	mov	r6, r2
 800d980:	f002 fdac 	bl	80104dc <__ulp>
 800d984:	ec51 0b10 	vmov	r0, r1, d0
 800d988:	b17e      	cbz	r6, 800d9aa <sulp+0x36>
 800d98a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d98e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d992:	2b00      	cmp	r3, #0
 800d994:	dd09      	ble.n	800d9aa <sulp+0x36>
 800d996:	051b      	lsls	r3, r3, #20
 800d998:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d99c:	2400      	movs	r4, #0
 800d99e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d9a2:	4622      	mov	r2, r4
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	f7f2 fe27 	bl	80005f8 <__aeabi_dmul>
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}
 800d9ac:	0000      	movs	r0, r0
	...

0800d9b0 <_strtod_l>:
 800d9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b4:	461f      	mov	r7, r3
 800d9b6:	b0a1      	sub	sp, #132	; 0x84
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4681      	mov	r9, r0
 800d9bc:	4638      	mov	r0, r7
 800d9be:	460e      	mov	r6, r1
 800d9c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d9c2:	931c      	str	r3, [sp, #112]	; 0x70
 800d9c4:	f002 fa2f 	bl	800fe26 <__localeconv_l>
 800d9c8:	4680      	mov	r8, r0
 800d9ca:	6800      	ldr	r0, [r0, #0]
 800d9cc:	f7f2 fc00 	bl	80001d0 <strlen>
 800d9d0:	f04f 0a00 	mov.w	sl, #0
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	f04f 0b00 	mov.w	fp, #0
 800d9da:	961b      	str	r6, [sp, #108]	; 0x6c
 800d9dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	2a0d      	cmp	r2, #13
 800d9e2:	d832      	bhi.n	800da4a <_strtod_l+0x9a>
 800d9e4:	2a09      	cmp	r2, #9
 800d9e6:	d236      	bcs.n	800da56 <_strtod_l+0xa6>
 800d9e8:	2a00      	cmp	r2, #0
 800d9ea:	d03e      	beq.n	800da6a <_strtod_l+0xba>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d9f2:	782b      	ldrb	r3, [r5, #0]
 800d9f4:	2b30      	cmp	r3, #48	; 0x30
 800d9f6:	f040 80ac 	bne.w	800db52 <_strtod_l+0x1a2>
 800d9fa:	786b      	ldrb	r3, [r5, #1]
 800d9fc:	2b58      	cmp	r3, #88	; 0x58
 800d9fe:	d001      	beq.n	800da04 <_strtod_l+0x54>
 800da00:	2b78      	cmp	r3, #120	; 0x78
 800da02:	d167      	bne.n	800dad4 <_strtod_l+0x124>
 800da04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	ab1c      	add	r3, sp, #112	; 0x70
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	9702      	str	r7, [sp, #8]
 800da0e:	ab1d      	add	r3, sp, #116	; 0x74
 800da10:	4a88      	ldr	r2, [pc, #544]	; (800dc34 <_strtod_l+0x284>)
 800da12:	a91b      	add	r1, sp, #108	; 0x6c
 800da14:	4648      	mov	r0, r9
 800da16:	f001 ff2c 	bl	800f872 <__gethex>
 800da1a:	f010 0407 	ands.w	r4, r0, #7
 800da1e:	4606      	mov	r6, r0
 800da20:	d005      	beq.n	800da2e <_strtod_l+0x7e>
 800da22:	2c06      	cmp	r4, #6
 800da24:	d12b      	bne.n	800da7e <_strtod_l+0xce>
 800da26:	3501      	adds	r5, #1
 800da28:	2300      	movs	r3, #0
 800da2a:	951b      	str	r5, [sp, #108]	; 0x6c
 800da2c:	930d      	str	r3, [sp, #52]	; 0x34
 800da2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da30:	2b00      	cmp	r3, #0
 800da32:	f040 859a 	bne.w	800e56a <_strtod_l+0xbba>
 800da36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da38:	b1e3      	cbz	r3, 800da74 <_strtod_l+0xc4>
 800da3a:	4652      	mov	r2, sl
 800da3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800da40:	ec43 2b10 	vmov	d0, r2, r3
 800da44:	b021      	add	sp, #132	; 0x84
 800da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da4a:	2a2b      	cmp	r2, #43	; 0x2b
 800da4c:	d015      	beq.n	800da7a <_strtod_l+0xca>
 800da4e:	2a2d      	cmp	r2, #45	; 0x2d
 800da50:	d004      	beq.n	800da5c <_strtod_l+0xac>
 800da52:	2a20      	cmp	r2, #32
 800da54:	d1ca      	bne.n	800d9ec <_strtod_l+0x3c>
 800da56:	3301      	adds	r3, #1
 800da58:	931b      	str	r3, [sp, #108]	; 0x6c
 800da5a:	e7bf      	b.n	800d9dc <_strtod_l+0x2c>
 800da5c:	2201      	movs	r2, #1
 800da5e:	920d      	str	r2, [sp, #52]	; 0x34
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	921b      	str	r2, [sp, #108]	; 0x6c
 800da64:	785b      	ldrb	r3, [r3, #1]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1c2      	bne.n	800d9f0 <_strtod_l+0x40>
 800da6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da6c:	961b      	str	r6, [sp, #108]	; 0x6c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f040 8579 	bne.w	800e566 <_strtod_l+0xbb6>
 800da74:	4652      	mov	r2, sl
 800da76:	465b      	mov	r3, fp
 800da78:	e7e2      	b.n	800da40 <_strtod_l+0x90>
 800da7a:	2200      	movs	r2, #0
 800da7c:	e7ef      	b.n	800da5e <_strtod_l+0xae>
 800da7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800da80:	b13a      	cbz	r2, 800da92 <_strtod_l+0xe2>
 800da82:	2135      	movs	r1, #53	; 0x35
 800da84:	a81e      	add	r0, sp, #120	; 0x78
 800da86:	f002 fe21 	bl	80106cc <__copybits>
 800da8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da8c:	4648      	mov	r0, r9
 800da8e:	f002 fa8d 	bl	800ffac <_Bfree>
 800da92:	3c01      	subs	r4, #1
 800da94:	2c04      	cmp	r4, #4
 800da96:	d806      	bhi.n	800daa6 <_strtod_l+0xf6>
 800da98:	e8df f004 	tbb	[pc, r4]
 800da9c:	1714030a 	.word	0x1714030a
 800daa0:	0a          	.byte	0x0a
 800daa1:	00          	.byte	0x00
 800daa2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800daa6:	0730      	lsls	r0, r6, #28
 800daa8:	d5c1      	bpl.n	800da2e <_strtod_l+0x7e>
 800daaa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800daae:	e7be      	b.n	800da2e <_strtod_l+0x7e>
 800dab0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800dab4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800daba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dabe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dac2:	e7f0      	b.n	800daa6 <_strtod_l+0xf6>
 800dac4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800dc38 <_strtod_l+0x288>
 800dac8:	e7ed      	b.n	800daa6 <_strtod_l+0xf6>
 800daca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dace:	f04f 3aff 	mov.w	sl, #4294967295
 800dad2:	e7e8      	b.n	800daa6 <_strtod_l+0xf6>
 800dad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	921b      	str	r2, [sp, #108]	; 0x6c
 800dada:	785b      	ldrb	r3, [r3, #1]
 800dadc:	2b30      	cmp	r3, #48	; 0x30
 800dade:	d0f9      	beq.n	800dad4 <_strtod_l+0x124>
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d0a4      	beq.n	800da2e <_strtod_l+0x7e>
 800dae4:	2301      	movs	r3, #1
 800dae6:	2500      	movs	r5, #0
 800dae8:	9306      	str	r3, [sp, #24]
 800daea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800daec:	9308      	str	r3, [sp, #32]
 800daee:	9507      	str	r5, [sp, #28]
 800daf0:	9505      	str	r5, [sp, #20]
 800daf2:	220a      	movs	r2, #10
 800daf4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800daf6:	7807      	ldrb	r7, [r0, #0]
 800daf8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800dafc:	b2d9      	uxtb	r1, r3
 800dafe:	2909      	cmp	r1, #9
 800db00:	d929      	bls.n	800db56 <_strtod_l+0x1a6>
 800db02:	4622      	mov	r2, r4
 800db04:	f8d8 1000 	ldr.w	r1, [r8]
 800db08:	f003 f9b7 	bl	8010e7a <strncmp>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d031      	beq.n	800db74 <_strtod_l+0x1c4>
 800db10:	2000      	movs	r0, #0
 800db12:	9c05      	ldr	r4, [sp, #20]
 800db14:	9004      	str	r0, [sp, #16]
 800db16:	463b      	mov	r3, r7
 800db18:	4602      	mov	r2, r0
 800db1a:	2b65      	cmp	r3, #101	; 0x65
 800db1c:	d001      	beq.n	800db22 <_strtod_l+0x172>
 800db1e:	2b45      	cmp	r3, #69	; 0x45
 800db20:	d114      	bne.n	800db4c <_strtod_l+0x19c>
 800db22:	b924      	cbnz	r4, 800db2e <_strtod_l+0x17e>
 800db24:	b910      	cbnz	r0, 800db2c <_strtod_l+0x17c>
 800db26:	9b06      	ldr	r3, [sp, #24]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d09e      	beq.n	800da6a <_strtod_l+0xba>
 800db2c:	2400      	movs	r4, #0
 800db2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800db30:	1c73      	adds	r3, r6, #1
 800db32:	931b      	str	r3, [sp, #108]	; 0x6c
 800db34:	7873      	ldrb	r3, [r6, #1]
 800db36:	2b2b      	cmp	r3, #43	; 0x2b
 800db38:	d078      	beq.n	800dc2c <_strtod_l+0x27c>
 800db3a:	2b2d      	cmp	r3, #45	; 0x2d
 800db3c:	d070      	beq.n	800dc20 <_strtod_l+0x270>
 800db3e:	f04f 0c00 	mov.w	ip, #0
 800db42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800db46:	2f09      	cmp	r7, #9
 800db48:	d97c      	bls.n	800dc44 <_strtod_l+0x294>
 800db4a:	961b      	str	r6, [sp, #108]	; 0x6c
 800db4c:	f04f 0e00 	mov.w	lr, #0
 800db50:	e09a      	b.n	800dc88 <_strtod_l+0x2d8>
 800db52:	2300      	movs	r3, #0
 800db54:	e7c7      	b.n	800dae6 <_strtod_l+0x136>
 800db56:	9905      	ldr	r1, [sp, #20]
 800db58:	2908      	cmp	r1, #8
 800db5a:	bfdd      	ittte	le
 800db5c:	9907      	ldrle	r1, [sp, #28]
 800db5e:	fb02 3301 	mlale	r3, r2, r1, r3
 800db62:	9307      	strle	r3, [sp, #28]
 800db64:	fb02 3505 	mlagt	r5, r2, r5, r3
 800db68:	9b05      	ldr	r3, [sp, #20]
 800db6a:	3001      	adds	r0, #1
 800db6c:	3301      	adds	r3, #1
 800db6e:	9305      	str	r3, [sp, #20]
 800db70:	901b      	str	r0, [sp, #108]	; 0x6c
 800db72:	e7bf      	b.n	800daf4 <_strtod_l+0x144>
 800db74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db76:	191a      	adds	r2, r3, r4
 800db78:	921b      	str	r2, [sp, #108]	; 0x6c
 800db7a:	9a05      	ldr	r2, [sp, #20]
 800db7c:	5d1b      	ldrb	r3, [r3, r4]
 800db7e:	2a00      	cmp	r2, #0
 800db80:	d037      	beq.n	800dbf2 <_strtod_l+0x242>
 800db82:	9c05      	ldr	r4, [sp, #20]
 800db84:	4602      	mov	r2, r0
 800db86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800db8a:	2909      	cmp	r1, #9
 800db8c:	d913      	bls.n	800dbb6 <_strtod_l+0x206>
 800db8e:	2101      	movs	r1, #1
 800db90:	9104      	str	r1, [sp, #16]
 800db92:	e7c2      	b.n	800db1a <_strtod_l+0x16a>
 800db94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db96:	1c5a      	adds	r2, r3, #1
 800db98:	921b      	str	r2, [sp, #108]	; 0x6c
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	3001      	adds	r0, #1
 800db9e:	2b30      	cmp	r3, #48	; 0x30
 800dba0:	d0f8      	beq.n	800db94 <_strtod_l+0x1e4>
 800dba2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800dba6:	2a08      	cmp	r2, #8
 800dba8:	f200 84e4 	bhi.w	800e574 <_strtod_l+0xbc4>
 800dbac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800dbae:	9208      	str	r2, [sp, #32]
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800dbba:	f100 0101 	add.w	r1, r0, #1
 800dbbe:	d012      	beq.n	800dbe6 <_strtod_l+0x236>
 800dbc0:	440a      	add	r2, r1
 800dbc2:	eb00 0c04 	add.w	ip, r0, r4
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	270a      	movs	r7, #10
 800dbca:	458c      	cmp	ip, r1
 800dbcc:	d113      	bne.n	800dbf6 <_strtod_l+0x246>
 800dbce:	1821      	adds	r1, r4, r0
 800dbd0:	2908      	cmp	r1, #8
 800dbd2:	f104 0401 	add.w	r4, r4, #1
 800dbd6:	4404      	add	r4, r0
 800dbd8:	dc19      	bgt.n	800dc0e <_strtod_l+0x25e>
 800dbda:	9b07      	ldr	r3, [sp, #28]
 800dbdc:	210a      	movs	r1, #10
 800dbde:	fb01 e303 	mla	r3, r1, r3, lr
 800dbe2:	9307      	str	r3, [sp, #28]
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dbe8:	1c58      	adds	r0, r3, #1
 800dbea:	901b      	str	r0, [sp, #108]	; 0x6c
 800dbec:	785b      	ldrb	r3, [r3, #1]
 800dbee:	4608      	mov	r0, r1
 800dbf0:	e7c9      	b.n	800db86 <_strtod_l+0x1d6>
 800dbf2:	9805      	ldr	r0, [sp, #20]
 800dbf4:	e7d3      	b.n	800db9e <_strtod_l+0x1ee>
 800dbf6:	2908      	cmp	r1, #8
 800dbf8:	f101 0101 	add.w	r1, r1, #1
 800dbfc:	dc03      	bgt.n	800dc06 <_strtod_l+0x256>
 800dbfe:	9b07      	ldr	r3, [sp, #28]
 800dc00:	437b      	muls	r3, r7
 800dc02:	9307      	str	r3, [sp, #28]
 800dc04:	e7e1      	b.n	800dbca <_strtod_l+0x21a>
 800dc06:	2910      	cmp	r1, #16
 800dc08:	bfd8      	it	le
 800dc0a:	437d      	mulle	r5, r7
 800dc0c:	e7dd      	b.n	800dbca <_strtod_l+0x21a>
 800dc0e:	2c10      	cmp	r4, #16
 800dc10:	bfdc      	itt	le
 800dc12:	210a      	movle	r1, #10
 800dc14:	fb01 e505 	mlale	r5, r1, r5, lr
 800dc18:	e7e4      	b.n	800dbe4 <_strtod_l+0x234>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	9304      	str	r3, [sp, #16]
 800dc1e:	e781      	b.n	800db24 <_strtod_l+0x174>
 800dc20:	f04f 0c01 	mov.w	ip, #1
 800dc24:	1cb3      	adds	r3, r6, #2
 800dc26:	931b      	str	r3, [sp, #108]	; 0x6c
 800dc28:	78b3      	ldrb	r3, [r6, #2]
 800dc2a:	e78a      	b.n	800db42 <_strtod_l+0x192>
 800dc2c:	f04f 0c00 	mov.w	ip, #0
 800dc30:	e7f8      	b.n	800dc24 <_strtod_l+0x274>
 800dc32:	bf00      	nop
 800dc34:	08011698 	.word	0x08011698
 800dc38:	7ff00000 	.word	0x7ff00000
 800dc3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc3e:	1c5f      	adds	r7, r3, #1
 800dc40:	971b      	str	r7, [sp, #108]	; 0x6c
 800dc42:	785b      	ldrb	r3, [r3, #1]
 800dc44:	2b30      	cmp	r3, #48	; 0x30
 800dc46:	d0f9      	beq.n	800dc3c <_strtod_l+0x28c>
 800dc48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800dc4c:	2f08      	cmp	r7, #8
 800dc4e:	f63f af7d 	bhi.w	800db4c <_strtod_l+0x19c>
 800dc52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800dc56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc58:	930a      	str	r3, [sp, #40]	; 0x28
 800dc5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc5c:	1c5f      	adds	r7, r3, #1
 800dc5e:	971b      	str	r7, [sp, #108]	; 0x6c
 800dc60:	785b      	ldrb	r3, [r3, #1]
 800dc62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800dc66:	f1b8 0f09 	cmp.w	r8, #9
 800dc6a:	d937      	bls.n	800dcdc <_strtod_l+0x32c>
 800dc6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dc6e:	1a7f      	subs	r7, r7, r1
 800dc70:	2f08      	cmp	r7, #8
 800dc72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dc76:	dc37      	bgt.n	800dce8 <_strtod_l+0x338>
 800dc78:	45be      	cmp	lr, r7
 800dc7a:	bfa8      	it	ge
 800dc7c:	46be      	movge	lr, r7
 800dc7e:	f1bc 0f00 	cmp.w	ip, #0
 800dc82:	d001      	beq.n	800dc88 <_strtod_l+0x2d8>
 800dc84:	f1ce 0e00 	rsb	lr, lr, #0
 800dc88:	2c00      	cmp	r4, #0
 800dc8a:	d151      	bne.n	800dd30 <_strtod_l+0x380>
 800dc8c:	2800      	cmp	r0, #0
 800dc8e:	f47f aece 	bne.w	800da2e <_strtod_l+0x7e>
 800dc92:	9a06      	ldr	r2, [sp, #24]
 800dc94:	2a00      	cmp	r2, #0
 800dc96:	f47f aeca 	bne.w	800da2e <_strtod_l+0x7e>
 800dc9a:	9a04      	ldr	r2, [sp, #16]
 800dc9c:	2a00      	cmp	r2, #0
 800dc9e:	f47f aee4 	bne.w	800da6a <_strtod_l+0xba>
 800dca2:	2b4e      	cmp	r3, #78	; 0x4e
 800dca4:	d027      	beq.n	800dcf6 <_strtod_l+0x346>
 800dca6:	dc21      	bgt.n	800dcec <_strtod_l+0x33c>
 800dca8:	2b49      	cmp	r3, #73	; 0x49
 800dcaa:	f47f aede 	bne.w	800da6a <_strtod_l+0xba>
 800dcae:	49a0      	ldr	r1, [pc, #640]	; (800df30 <_strtod_l+0x580>)
 800dcb0:	a81b      	add	r0, sp, #108	; 0x6c
 800dcb2:	f002 f811 	bl	800fcd8 <__match>
 800dcb6:	2800      	cmp	r0, #0
 800dcb8:	f43f aed7 	beq.w	800da6a <_strtod_l+0xba>
 800dcbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcbe:	499d      	ldr	r1, [pc, #628]	; (800df34 <_strtod_l+0x584>)
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	a81b      	add	r0, sp, #108	; 0x6c
 800dcc4:	931b      	str	r3, [sp, #108]	; 0x6c
 800dcc6:	f002 f807 	bl	800fcd8 <__match>
 800dcca:	b910      	cbnz	r0, 800dcd2 <_strtod_l+0x322>
 800dccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcce:	3301      	adds	r3, #1
 800dcd0:	931b      	str	r3, [sp, #108]	; 0x6c
 800dcd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800df48 <_strtod_l+0x598>
 800dcd6:	f04f 0a00 	mov.w	sl, #0
 800dcda:	e6a8      	b.n	800da2e <_strtod_l+0x7e>
 800dcdc:	210a      	movs	r1, #10
 800dcde:	fb01 3e0e 	mla	lr, r1, lr, r3
 800dce2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800dce6:	e7b8      	b.n	800dc5a <_strtod_l+0x2aa>
 800dce8:	46be      	mov	lr, r7
 800dcea:	e7c8      	b.n	800dc7e <_strtod_l+0x2ce>
 800dcec:	2b69      	cmp	r3, #105	; 0x69
 800dcee:	d0de      	beq.n	800dcae <_strtod_l+0x2fe>
 800dcf0:	2b6e      	cmp	r3, #110	; 0x6e
 800dcf2:	f47f aeba 	bne.w	800da6a <_strtod_l+0xba>
 800dcf6:	4990      	ldr	r1, [pc, #576]	; (800df38 <_strtod_l+0x588>)
 800dcf8:	a81b      	add	r0, sp, #108	; 0x6c
 800dcfa:	f001 ffed 	bl	800fcd8 <__match>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	f43f aeb3 	beq.w	800da6a <_strtod_l+0xba>
 800dd04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b28      	cmp	r3, #40	; 0x28
 800dd0a:	d10e      	bne.n	800dd2a <_strtod_l+0x37a>
 800dd0c:	aa1e      	add	r2, sp, #120	; 0x78
 800dd0e:	498b      	ldr	r1, [pc, #556]	; (800df3c <_strtod_l+0x58c>)
 800dd10:	a81b      	add	r0, sp, #108	; 0x6c
 800dd12:	f001 fff5 	bl	800fd00 <__hexnan>
 800dd16:	2805      	cmp	r0, #5
 800dd18:	d107      	bne.n	800dd2a <_strtod_l+0x37a>
 800dd1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800dd20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dd24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dd28:	e681      	b.n	800da2e <_strtod_l+0x7e>
 800dd2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800df50 <_strtod_l+0x5a0>
 800dd2e:	e7d2      	b.n	800dcd6 <_strtod_l+0x326>
 800dd30:	ebae 0302 	sub.w	r3, lr, r2
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	9b05      	ldr	r3, [sp, #20]
 800dd38:	9807      	ldr	r0, [sp, #28]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	bf08      	it	eq
 800dd3e:	4623      	moveq	r3, r4
 800dd40:	2c10      	cmp	r4, #16
 800dd42:	9305      	str	r3, [sp, #20]
 800dd44:	46a0      	mov	r8, r4
 800dd46:	bfa8      	it	ge
 800dd48:	f04f 0810 	movge.w	r8, #16
 800dd4c:	f7f2 fbda 	bl	8000504 <__aeabi_ui2d>
 800dd50:	2c09      	cmp	r4, #9
 800dd52:	4682      	mov	sl, r0
 800dd54:	468b      	mov	fp, r1
 800dd56:	dc13      	bgt.n	800dd80 <_strtod_l+0x3d0>
 800dd58:	9b06      	ldr	r3, [sp, #24]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f43f ae67 	beq.w	800da2e <_strtod_l+0x7e>
 800dd60:	9b06      	ldr	r3, [sp, #24]
 800dd62:	dd7a      	ble.n	800de5a <_strtod_l+0x4aa>
 800dd64:	2b16      	cmp	r3, #22
 800dd66:	dc61      	bgt.n	800de2c <_strtod_l+0x47c>
 800dd68:	4a75      	ldr	r2, [pc, #468]	; (800df40 <_strtod_l+0x590>)
 800dd6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800dd6e:	e9de 0100 	ldrd	r0, r1, [lr]
 800dd72:	4652      	mov	r2, sl
 800dd74:	465b      	mov	r3, fp
 800dd76:	f7f2 fc3f 	bl	80005f8 <__aeabi_dmul>
 800dd7a:	4682      	mov	sl, r0
 800dd7c:	468b      	mov	fp, r1
 800dd7e:	e656      	b.n	800da2e <_strtod_l+0x7e>
 800dd80:	4b6f      	ldr	r3, [pc, #444]	; (800df40 <_strtod_l+0x590>)
 800dd82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dd86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dd8a:	f7f2 fc35 	bl	80005f8 <__aeabi_dmul>
 800dd8e:	4606      	mov	r6, r0
 800dd90:	4628      	mov	r0, r5
 800dd92:	460f      	mov	r7, r1
 800dd94:	f7f2 fbb6 	bl	8000504 <__aeabi_ui2d>
 800dd98:	4602      	mov	r2, r0
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fa74 	bl	800028c <__adddf3>
 800dda4:	2c0f      	cmp	r4, #15
 800dda6:	4682      	mov	sl, r0
 800dda8:	468b      	mov	fp, r1
 800ddaa:	ddd5      	ble.n	800dd58 <_strtod_l+0x3a8>
 800ddac:	9b06      	ldr	r3, [sp, #24]
 800ddae:	eba4 0808 	sub.w	r8, r4, r8
 800ddb2:	4498      	add	r8, r3
 800ddb4:	f1b8 0f00 	cmp.w	r8, #0
 800ddb8:	f340 8096 	ble.w	800dee8 <_strtod_l+0x538>
 800ddbc:	f018 030f 	ands.w	r3, r8, #15
 800ddc0:	d00a      	beq.n	800ddd8 <_strtod_l+0x428>
 800ddc2:	495f      	ldr	r1, [pc, #380]	; (800df40 <_strtod_l+0x590>)
 800ddc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ddc8:	4652      	mov	r2, sl
 800ddca:	465b      	mov	r3, fp
 800ddcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ddd0:	f7f2 fc12 	bl	80005f8 <__aeabi_dmul>
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	468b      	mov	fp, r1
 800ddd8:	f038 080f 	bics.w	r8, r8, #15
 800dddc:	d073      	beq.n	800dec6 <_strtod_l+0x516>
 800ddde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dde2:	dd47      	ble.n	800de74 <_strtod_l+0x4c4>
 800dde4:	2400      	movs	r4, #0
 800dde6:	46a0      	mov	r8, r4
 800dde8:	9407      	str	r4, [sp, #28]
 800ddea:	9405      	str	r4, [sp, #20]
 800ddec:	2322      	movs	r3, #34	; 0x22
 800ddee:	f8df b158 	ldr.w	fp, [pc, #344]	; 800df48 <_strtod_l+0x598>
 800ddf2:	f8c9 3000 	str.w	r3, [r9]
 800ddf6:	f04f 0a00 	mov.w	sl, #0
 800ddfa:	9b07      	ldr	r3, [sp, #28]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f43f ae16 	beq.w	800da2e <_strtod_l+0x7e>
 800de02:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de04:	4648      	mov	r0, r9
 800de06:	f002 f8d1 	bl	800ffac <_Bfree>
 800de0a:	9905      	ldr	r1, [sp, #20]
 800de0c:	4648      	mov	r0, r9
 800de0e:	f002 f8cd 	bl	800ffac <_Bfree>
 800de12:	4641      	mov	r1, r8
 800de14:	4648      	mov	r0, r9
 800de16:	f002 f8c9 	bl	800ffac <_Bfree>
 800de1a:	9907      	ldr	r1, [sp, #28]
 800de1c:	4648      	mov	r0, r9
 800de1e:	f002 f8c5 	bl	800ffac <_Bfree>
 800de22:	4621      	mov	r1, r4
 800de24:	4648      	mov	r0, r9
 800de26:	f002 f8c1 	bl	800ffac <_Bfree>
 800de2a:	e600      	b.n	800da2e <_strtod_l+0x7e>
 800de2c:	9a06      	ldr	r2, [sp, #24]
 800de2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800de32:	4293      	cmp	r3, r2
 800de34:	dbba      	blt.n	800ddac <_strtod_l+0x3fc>
 800de36:	4d42      	ldr	r5, [pc, #264]	; (800df40 <_strtod_l+0x590>)
 800de38:	f1c4 040f 	rsb	r4, r4, #15
 800de3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800de40:	4652      	mov	r2, sl
 800de42:	465b      	mov	r3, fp
 800de44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de48:	f7f2 fbd6 	bl	80005f8 <__aeabi_dmul>
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	1b1c      	subs	r4, r3, r4
 800de50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800de54:	e9d5 2300 	ldrd	r2, r3, [r5]
 800de58:	e78d      	b.n	800dd76 <_strtod_l+0x3c6>
 800de5a:	f113 0f16 	cmn.w	r3, #22
 800de5e:	dba5      	blt.n	800ddac <_strtod_l+0x3fc>
 800de60:	4a37      	ldr	r2, [pc, #220]	; (800df40 <_strtod_l+0x590>)
 800de62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800de66:	e9d2 2300 	ldrd	r2, r3, [r2]
 800de6a:	4650      	mov	r0, sl
 800de6c:	4659      	mov	r1, fp
 800de6e:	f7f2 fced 	bl	800084c <__aeabi_ddiv>
 800de72:	e782      	b.n	800dd7a <_strtod_l+0x3ca>
 800de74:	2300      	movs	r3, #0
 800de76:	4e33      	ldr	r6, [pc, #204]	; (800df44 <_strtod_l+0x594>)
 800de78:	ea4f 1828 	mov.w	r8, r8, asr #4
 800de7c:	4650      	mov	r0, sl
 800de7e:	4659      	mov	r1, fp
 800de80:	461d      	mov	r5, r3
 800de82:	f1b8 0f01 	cmp.w	r8, #1
 800de86:	dc21      	bgt.n	800decc <_strtod_l+0x51c>
 800de88:	b10b      	cbz	r3, 800de8e <_strtod_l+0x4de>
 800de8a:	4682      	mov	sl, r0
 800de8c:	468b      	mov	fp, r1
 800de8e:	4b2d      	ldr	r3, [pc, #180]	; (800df44 <_strtod_l+0x594>)
 800de90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800de94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800de98:	4652      	mov	r2, sl
 800de9a:	465b      	mov	r3, fp
 800de9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dea0:	f7f2 fbaa 	bl	80005f8 <__aeabi_dmul>
 800dea4:	4b28      	ldr	r3, [pc, #160]	; (800df48 <_strtod_l+0x598>)
 800dea6:	460a      	mov	r2, r1
 800dea8:	400b      	ands	r3, r1
 800deaa:	4928      	ldr	r1, [pc, #160]	; (800df4c <_strtod_l+0x59c>)
 800deac:	428b      	cmp	r3, r1
 800deae:	4682      	mov	sl, r0
 800deb0:	d898      	bhi.n	800dde4 <_strtod_l+0x434>
 800deb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800deb6:	428b      	cmp	r3, r1
 800deb8:	bf86      	itte	hi
 800deba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800df54 <_strtod_l+0x5a4>
 800debe:	f04f 3aff 	movhi.w	sl, #4294967295
 800dec2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dec6:	2300      	movs	r3, #0
 800dec8:	9304      	str	r3, [sp, #16]
 800deca:	e077      	b.n	800dfbc <_strtod_l+0x60c>
 800decc:	f018 0f01 	tst.w	r8, #1
 800ded0:	d006      	beq.n	800dee0 <_strtod_l+0x530>
 800ded2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ded6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deda:	f7f2 fb8d 	bl	80005f8 <__aeabi_dmul>
 800dede:	2301      	movs	r3, #1
 800dee0:	3501      	adds	r5, #1
 800dee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dee6:	e7cc      	b.n	800de82 <_strtod_l+0x4d2>
 800dee8:	d0ed      	beq.n	800dec6 <_strtod_l+0x516>
 800deea:	f1c8 0800 	rsb	r8, r8, #0
 800deee:	f018 020f 	ands.w	r2, r8, #15
 800def2:	d00a      	beq.n	800df0a <_strtod_l+0x55a>
 800def4:	4b12      	ldr	r3, [pc, #72]	; (800df40 <_strtod_l+0x590>)
 800def6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800defa:	4650      	mov	r0, sl
 800defc:	4659      	mov	r1, fp
 800defe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df02:	f7f2 fca3 	bl	800084c <__aeabi_ddiv>
 800df06:	4682      	mov	sl, r0
 800df08:	468b      	mov	fp, r1
 800df0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800df0e:	d0da      	beq.n	800dec6 <_strtod_l+0x516>
 800df10:	f1b8 0f1f 	cmp.w	r8, #31
 800df14:	dd20      	ble.n	800df58 <_strtod_l+0x5a8>
 800df16:	2400      	movs	r4, #0
 800df18:	46a0      	mov	r8, r4
 800df1a:	9407      	str	r4, [sp, #28]
 800df1c:	9405      	str	r4, [sp, #20]
 800df1e:	2322      	movs	r3, #34	; 0x22
 800df20:	f04f 0a00 	mov.w	sl, #0
 800df24:	f04f 0b00 	mov.w	fp, #0
 800df28:	f8c9 3000 	str.w	r3, [r9]
 800df2c:	e765      	b.n	800ddfa <_strtod_l+0x44a>
 800df2e:	bf00      	nop
 800df30:	08011661 	.word	0x08011661
 800df34:	080116eb 	.word	0x080116eb
 800df38:	08011669 	.word	0x08011669
 800df3c:	080116ac 	.word	0x080116ac
 800df40:	08011790 	.word	0x08011790
 800df44:	08011768 	.word	0x08011768
 800df48:	7ff00000 	.word	0x7ff00000
 800df4c:	7ca00000 	.word	0x7ca00000
 800df50:	fff80000 	.word	0xfff80000
 800df54:	7fefffff 	.word	0x7fefffff
 800df58:	f018 0310 	ands.w	r3, r8, #16
 800df5c:	bf18      	it	ne
 800df5e:	236a      	movne	r3, #106	; 0x6a
 800df60:	4da0      	ldr	r5, [pc, #640]	; (800e1e4 <_strtod_l+0x834>)
 800df62:	9304      	str	r3, [sp, #16]
 800df64:	4650      	mov	r0, sl
 800df66:	4659      	mov	r1, fp
 800df68:	2300      	movs	r3, #0
 800df6a:	f1b8 0f00 	cmp.w	r8, #0
 800df6e:	f300 810a 	bgt.w	800e186 <_strtod_l+0x7d6>
 800df72:	b10b      	cbz	r3, 800df78 <_strtod_l+0x5c8>
 800df74:	4682      	mov	sl, r0
 800df76:	468b      	mov	fp, r1
 800df78:	9b04      	ldr	r3, [sp, #16]
 800df7a:	b1bb      	cbz	r3, 800dfac <_strtod_l+0x5fc>
 800df7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800df80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800df84:	2b00      	cmp	r3, #0
 800df86:	4659      	mov	r1, fp
 800df88:	dd10      	ble.n	800dfac <_strtod_l+0x5fc>
 800df8a:	2b1f      	cmp	r3, #31
 800df8c:	f340 8107 	ble.w	800e19e <_strtod_l+0x7ee>
 800df90:	2b34      	cmp	r3, #52	; 0x34
 800df92:	bfde      	ittt	le
 800df94:	3b20      	suble	r3, #32
 800df96:	f04f 32ff 	movle.w	r2, #4294967295
 800df9a:	fa02 f303 	lslle.w	r3, r2, r3
 800df9e:	f04f 0a00 	mov.w	sl, #0
 800dfa2:	bfcc      	ite	gt
 800dfa4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dfa8:	ea03 0b01 	andle.w	fp, r3, r1
 800dfac:	2200      	movs	r2, #0
 800dfae:	2300      	movs	r3, #0
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	4659      	mov	r1, fp
 800dfb4:	f7f2 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1ac      	bne.n	800df16 <_strtod_l+0x566>
 800dfbc:	9b07      	ldr	r3, [sp, #28]
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	9a05      	ldr	r2, [sp, #20]
 800dfc2:	9908      	ldr	r1, [sp, #32]
 800dfc4:	4623      	mov	r3, r4
 800dfc6:	4648      	mov	r0, r9
 800dfc8:	f002 f842 	bl	8010050 <__s2b>
 800dfcc:	9007      	str	r0, [sp, #28]
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	f43f af08 	beq.w	800dde4 <_strtod_l+0x434>
 800dfd4:	9a06      	ldr	r2, [sp, #24]
 800dfd6:	9b06      	ldr	r3, [sp, #24]
 800dfd8:	2a00      	cmp	r2, #0
 800dfda:	f1c3 0300 	rsb	r3, r3, #0
 800dfde:	bfa8      	it	ge
 800dfe0:	2300      	movge	r3, #0
 800dfe2:	930e      	str	r3, [sp, #56]	; 0x38
 800dfe4:	2400      	movs	r4, #0
 800dfe6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800dfea:	9316      	str	r3, [sp, #88]	; 0x58
 800dfec:	46a0      	mov	r8, r4
 800dfee:	9b07      	ldr	r3, [sp, #28]
 800dff0:	4648      	mov	r0, r9
 800dff2:	6859      	ldr	r1, [r3, #4]
 800dff4:	f001 ffa6 	bl	800ff44 <_Balloc>
 800dff8:	9005      	str	r0, [sp, #20]
 800dffa:	2800      	cmp	r0, #0
 800dffc:	f43f aef6 	beq.w	800ddec <_strtod_l+0x43c>
 800e000:	9b07      	ldr	r3, [sp, #28]
 800e002:	691a      	ldr	r2, [r3, #16]
 800e004:	3202      	adds	r2, #2
 800e006:	f103 010c 	add.w	r1, r3, #12
 800e00a:	0092      	lsls	r2, r2, #2
 800e00c:	300c      	adds	r0, #12
 800e00e:	f7fe fdbd 	bl	800cb8c <memcpy>
 800e012:	aa1e      	add	r2, sp, #120	; 0x78
 800e014:	a91d      	add	r1, sp, #116	; 0x74
 800e016:	ec4b ab10 	vmov	d0, sl, fp
 800e01a:	4648      	mov	r0, r9
 800e01c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e020:	f002 fad2 	bl	80105c8 <__d2b>
 800e024:	901c      	str	r0, [sp, #112]	; 0x70
 800e026:	2800      	cmp	r0, #0
 800e028:	f43f aee0 	beq.w	800ddec <_strtod_l+0x43c>
 800e02c:	2101      	movs	r1, #1
 800e02e:	4648      	mov	r0, r9
 800e030:	f002 f89a 	bl	8010168 <__i2b>
 800e034:	4680      	mov	r8, r0
 800e036:	2800      	cmp	r0, #0
 800e038:	f43f aed8 	beq.w	800ddec <_strtod_l+0x43c>
 800e03c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e03e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e040:	2e00      	cmp	r6, #0
 800e042:	bfab      	itete	ge
 800e044:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e046:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e048:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800e04a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800e04c:	bfac      	ite	ge
 800e04e:	18f7      	addge	r7, r6, r3
 800e050:	1b9d      	sublt	r5, r3, r6
 800e052:	9b04      	ldr	r3, [sp, #16]
 800e054:	1af6      	subs	r6, r6, r3
 800e056:	4416      	add	r6, r2
 800e058:	4b63      	ldr	r3, [pc, #396]	; (800e1e8 <_strtod_l+0x838>)
 800e05a:	3e01      	subs	r6, #1
 800e05c:	429e      	cmp	r6, r3
 800e05e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e062:	f280 80af 	bge.w	800e1c4 <_strtod_l+0x814>
 800e066:	1b9b      	subs	r3, r3, r6
 800e068:	2b1f      	cmp	r3, #31
 800e06a:	eba2 0203 	sub.w	r2, r2, r3
 800e06e:	f04f 0101 	mov.w	r1, #1
 800e072:	f300 809b 	bgt.w	800e1ac <_strtod_l+0x7fc>
 800e076:	fa01 f303 	lsl.w	r3, r1, r3
 800e07a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e07c:	2300      	movs	r3, #0
 800e07e:	930a      	str	r3, [sp, #40]	; 0x28
 800e080:	18be      	adds	r6, r7, r2
 800e082:	9b04      	ldr	r3, [sp, #16]
 800e084:	42b7      	cmp	r7, r6
 800e086:	4415      	add	r5, r2
 800e088:	441d      	add	r5, r3
 800e08a:	463b      	mov	r3, r7
 800e08c:	bfa8      	it	ge
 800e08e:	4633      	movge	r3, r6
 800e090:	42ab      	cmp	r3, r5
 800e092:	bfa8      	it	ge
 800e094:	462b      	movge	r3, r5
 800e096:	2b00      	cmp	r3, #0
 800e098:	bfc2      	ittt	gt
 800e09a:	1af6      	subgt	r6, r6, r3
 800e09c:	1aed      	subgt	r5, r5, r3
 800e09e:	1aff      	subgt	r7, r7, r3
 800e0a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0a2:	b1bb      	cbz	r3, 800e0d4 <_strtod_l+0x724>
 800e0a4:	4641      	mov	r1, r8
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	4648      	mov	r0, r9
 800e0aa:	f002 f8fd 	bl	80102a8 <__pow5mult>
 800e0ae:	4680      	mov	r8, r0
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f43f ae9b 	beq.w	800ddec <_strtod_l+0x43c>
 800e0b6:	4601      	mov	r1, r0
 800e0b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e0ba:	4648      	mov	r0, r9
 800e0bc:	f002 f85d 	bl	801017a <__multiply>
 800e0c0:	900c      	str	r0, [sp, #48]	; 0x30
 800e0c2:	2800      	cmp	r0, #0
 800e0c4:	f43f ae92 	beq.w	800ddec <_strtod_l+0x43c>
 800e0c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e0ca:	4648      	mov	r0, r9
 800e0cc:	f001 ff6e 	bl	800ffac <_Bfree>
 800e0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0d2:	931c      	str	r3, [sp, #112]	; 0x70
 800e0d4:	2e00      	cmp	r6, #0
 800e0d6:	dc7a      	bgt.n	800e1ce <_strtod_l+0x81e>
 800e0d8:	9b06      	ldr	r3, [sp, #24]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	dd08      	ble.n	800e0f0 <_strtod_l+0x740>
 800e0de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e0e0:	9905      	ldr	r1, [sp, #20]
 800e0e2:	4648      	mov	r0, r9
 800e0e4:	f002 f8e0 	bl	80102a8 <__pow5mult>
 800e0e8:	9005      	str	r0, [sp, #20]
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	f43f ae7e 	beq.w	800ddec <_strtod_l+0x43c>
 800e0f0:	2d00      	cmp	r5, #0
 800e0f2:	dd08      	ble.n	800e106 <_strtod_l+0x756>
 800e0f4:	462a      	mov	r2, r5
 800e0f6:	9905      	ldr	r1, [sp, #20]
 800e0f8:	4648      	mov	r0, r9
 800e0fa:	f002 f923 	bl	8010344 <__lshift>
 800e0fe:	9005      	str	r0, [sp, #20]
 800e100:	2800      	cmp	r0, #0
 800e102:	f43f ae73 	beq.w	800ddec <_strtod_l+0x43c>
 800e106:	2f00      	cmp	r7, #0
 800e108:	dd08      	ble.n	800e11c <_strtod_l+0x76c>
 800e10a:	4641      	mov	r1, r8
 800e10c:	463a      	mov	r2, r7
 800e10e:	4648      	mov	r0, r9
 800e110:	f002 f918 	bl	8010344 <__lshift>
 800e114:	4680      	mov	r8, r0
 800e116:	2800      	cmp	r0, #0
 800e118:	f43f ae68 	beq.w	800ddec <_strtod_l+0x43c>
 800e11c:	9a05      	ldr	r2, [sp, #20]
 800e11e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e120:	4648      	mov	r0, r9
 800e122:	f002 f97d 	bl	8010420 <__mdiff>
 800e126:	4604      	mov	r4, r0
 800e128:	2800      	cmp	r0, #0
 800e12a:	f43f ae5f 	beq.w	800ddec <_strtod_l+0x43c>
 800e12e:	68c3      	ldr	r3, [r0, #12]
 800e130:	930c      	str	r3, [sp, #48]	; 0x30
 800e132:	2300      	movs	r3, #0
 800e134:	60c3      	str	r3, [r0, #12]
 800e136:	4641      	mov	r1, r8
 800e138:	f002 f958 	bl	80103ec <__mcmp>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	da55      	bge.n	800e1ec <_strtod_l+0x83c>
 800e140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e142:	b9e3      	cbnz	r3, 800e17e <_strtod_l+0x7ce>
 800e144:	f1ba 0f00 	cmp.w	sl, #0
 800e148:	d119      	bne.n	800e17e <_strtod_l+0x7ce>
 800e14a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e14e:	b9b3      	cbnz	r3, 800e17e <_strtod_l+0x7ce>
 800e150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e154:	0d1b      	lsrs	r3, r3, #20
 800e156:	051b      	lsls	r3, r3, #20
 800e158:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e15c:	d90f      	bls.n	800e17e <_strtod_l+0x7ce>
 800e15e:	6963      	ldr	r3, [r4, #20]
 800e160:	b913      	cbnz	r3, 800e168 <_strtod_l+0x7b8>
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	2b01      	cmp	r3, #1
 800e166:	dd0a      	ble.n	800e17e <_strtod_l+0x7ce>
 800e168:	4621      	mov	r1, r4
 800e16a:	2201      	movs	r2, #1
 800e16c:	4648      	mov	r0, r9
 800e16e:	f002 f8e9 	bl	8010344 <__lshift>
 800e172:	4641      	mov	r1, r8
 800e174:	4604      	mov	r4, r0
 800e176:	f002 f939 	bl	80103ec <__mcmp>
 800e17a:	2800      	cmp	r0, #0
 800e17c:	dc67      	bgt.n	800e24e <_strtod_l+0x89e>
 800e17e:	9b04      	ldr	r3, [sp, #16]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d171      	bne.n	800e268 <_strtod_l+0x8b8>
 800e184:	e63d      	b.n	800de02 <_strtod_l+0x452>
 800e186:	f018 0f01 	tst.w	r8, #1
 800e18a:	d004      	beq.n	800e196 <_strtod_l+0x7e6>
 800e18c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e190:	f7f2 fa32 	bl	80005f8 <__aeabi_dmul>
 800e194:	2301      	movs	r3, #1
 800e196:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e19a:	3508      	adds	r5, #8
 800e19c:	e6e5      	b.n	800df6a <_strtod_l+0x5ba>
 800e19e:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1a6:	ea03 0a0a 	and.w	sl, r3, sl
 800e1aa:	e6ff      	b.n	800dfac <_strtod_l+0x5fc>
 800e1ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e1b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e1b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e1b8:	36e2      	adds	r6, #226	; 0xe2
 800e1ba:	fa01 f306 	lsl.w	r3, r1, r6
 800e1be:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c0:	910f      	str	r1, [sp, #60]	; 0x3c
 800e1c2:	e75d      	b.n	800e080 <_strtod_l+0x6d0>
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1cc:	e758      	b.n	800e080 <_strtod_l+0x6d0>
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e1d2:	4648      	mov	r0, r9
 800e1d4:	f002 f8b6 	bl	8010344 <__lshift>
 800e1d8:	901c      	str	r0, [sp, #112]	; 0x70
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	f47f af7c 	bne.w	800e0d8 <_strtod_l+0x728>
 800e1e0:	e604      	b.n	800ddec <_strtod_l+0x43c>
 800e1e2:	bf00      	nop
 800e1e4:	080116c0 	.word	0x080116c0
 800e1e8:	fffffc02 	.word	0xfffffc02
 800e1ec:	465d      	mov	r5, fp
 800e1ee:	f040 8086 	bne.w	800e2fe <_strtod_l+0x94e>
 800e1f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1f8:	b32a      	cbz	r2, 800e246 <_strtod_l+0x896>
 800e1fa:	4aaf      	ldr	r2, [pc, #700]	; (800e4b8 <_strtod_l+0xb08>)
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d153      	bne.n	800e2a8 <_strtod_l+0x8f8>
 800e200:	9b04      	ldr	r3, [sp, #16]
 800e202:	4650      	mov	r0, sl
 800e204:	b1d3      	cbz	r3, 800e23c <_strtod_l+0x88c>
 800e206:	4aad      	ldr	r2, [pc, #692]	; (800e4bc <_strtod_l+0xb0c>)
 800e208:	402a      	ands	r2, r5
 800e20a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e20e:	f04f 31ff 	mov.w	r1, #4294967295
 800e212:	d816      	bhi.n	800e242 <_strtod_l+0x892>
 800e214:	0d12      	lsrs	r2, r2, #20
 800e216:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e21a:	fa01 f303 	lsl.w	r3, r1, r3
 800e21e:	4298      	cmp	r0, r3
 800e220:	d142      	bne.n	800e2a8 <_strtod_l+0x8f8>
 800e222:	4ba7      	ldr	r3, [pc, #668]	; (800e4c0 <_strtod_l+0xb10>)
 800e224:	429d      	cmp	r5, r3
 800e226:	d102      	bne.n	800e22e <_strtod_l+0x87e>
 800e228:	3001      	adds	r0, #1
 800e22a:	f43f addf 	beq.w	800ddec <_strtod_l+0x43c>
 800e22e:	4ba3      	ldr	r3, [pc, #652]	; (800e4bc <_strtod_l+0xb0c>)
 800e230:	402b      	ands	r3, r5
 800e232:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e236:	f04f 0a00 	mov.w	sl, #0
 800e23a:	e7a0      	b.n	800e17e <_strtod_l+0x7ce>
 800e23c:	f04f 33ff 	mov.w	r3, #4294967295
 800e240:	e7ed      	b.n	800e21e <_strtod_l+0x86e>
 800e242:	460b      	mov	r3, r1
 800e244:	e7eb      	b.n	800e21e <_strtod_l+0x86e>
 800e246:	bb7b      	cbnz	r3, 800e2a8 <_strtod_l+0x8f8>
 800e248:	f1ba 0f00 	cmp.w	sl, #0
 800e24c:	d12c      	bne.n	800e2a8 <_strtod_l+0x8f8>
 800e24e:	9904      	ldr	r1, [sp, #16]
 800e250:	4a9a      	ldr	r2, [pc, #616]	; (800e4bc <_strtod_l+0xb0c>)
 800e252:	465b      	mov	r3, fp
 800e254:	b1f1      	cbz	r1, 800e294 <_strtod_l+0x8e4>
 800e256:	ea02 010b 	and.w	r1, r2, fp
 800e25a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e25e:	dc19      	bgt.n	800e294 <_strtod_l+0x8e4>
 800e260:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e264:	f77f ae5b 	ble.w	800df1e <_strtod_l+0x56e>
 800e268:	4a96      	ldr	r2, [pc, #600]	; (800e4c4 <_strtod_l+0xb14>)
 800e26a:	2300      	movs	r3, #0
 800e26c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800e270:	4650      	mov	r0, sl
 800e272:	4659      	mov	r1, fp
 800e274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e278:	f7f2 f9be 	bl	80005f8 <__aeabi_dmul>
 800e27c:	4682      	mov	sl, r0
 800e27e:	468b      	mov	fp, r1
 800e280:	2900      	cmp	r1, #0
 800e282:	f47f adbe 	bne.w	800de02 <_strtod_l+0x452>
 800e286:	2800      	cmp	r0, #0
 800e288:	f47f adbb 	bne.w	800de02 <_strtod_l+0x452>
 800e28c:	2322      	movs	r3, #34	; 0x22
 800e28e:	f8c9 3000 	str.w	r3, [r9]
 800e292:	e5b6      	b.n	800de02 <_strtod_l+0x452>
 800e294:	4013      	ands	r3, r2
 800e296:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e29a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e29e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e2a2:	f04f 3aff 	mov.w	sl, #4294967295
 800e2a6:	e76a      	b.n	800e17e <_strtod_l+0x7ce>
 800e2a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2aa:	b193      	cbz	r3, 800e2d2 <_strtod_l+0x922>
 800e2ac:	422b      	tst	r3, r5
 800e2ae:	f43f af66 	beq.w	800e17e <_strtod_l+0x7ce>
 800e2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2b4:	9a04      	ldr	r2, [sp, #16]
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	4659      	mov	r1, fp
 800e2ba:	b173      	cbz	r3, 800e2da <_strtod_l+0x92a>
 800e2bc:	f7ff fb5a 	bl	800d974 <sulp>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e2c8:	f7f1 ffe0 	bl	800028c <__adddf3>
 800e2cc:	4682      	mov	sl, r0
 800e2ce:	468b      	mov	fp, r1
 800e2d0:	e755      	b.n	800e17e <_strtod_l+0x7ce>
 800e2d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2d4:	ea13 0f0a 	tst.w	r3, sl
 800e2d8:	e7e9      	b.n	800e2ae <_strtod_l+0x8fe>
 800e2da:	f7ff fb4b 	bl	800d974 <sulp>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e2e6:	f7f1 ffcf 	bl	8000288 <__aeabi_dsub>
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4682      	mov	sl, r0
 800e2f0:	468b      	mov	fp, r1
 800e2f2:	f7f2 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f47f ae11 	bne.w	800df1e <_strtod_l+0x56e>
 800e2fc:	e73f      	b.n	800e17e <_strtod_l+0x7ce>
 800e2fe:	4641      	mov	r1, r8
 800e300:	4620      	mov	r0, r4
 800e302:	f002 f9b0 	bl	8010666 <__ratio>
 800e306:	ec57 6b10 	vmov	r6, r7, d0
 800e30a:	2200      	movs	r2, #0
 800e30c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e310:	ee10 0a10 	vmov	r0, s0
 800e314:	4639      	mov	r1, r7
 800e316:	f7f2 fbeb 	bl	8000af0 <__aeabi_dcmple>
 800e31a:	2800      	cmp	r0, #0
 800e31c:	d077      	beq.n	800e40e <_strtod_l+0xa5e>
 800e31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e320:	2b00      	cmp	r3, #0
 800e322:	d04a      	beq.n	800e3ba <_strtod_l+0xa0a>
 800e324:	4b68      	ldr	r3, [pc, #416]	; (800e4c8 <_strtod_l+0xb18>)
 800e326:	2200      	movs	r2, #0
 800e328:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e32c:	4f66      	ldr	r7, [pc, #408]	; (800e4c8 <_strtod_l+0xb18>)
 800e32e:	2600      	movs	r6, #0
 800e330:	4b62      	ldr	r3, [pc, #392]	; (800e4bc <_strtod_l+0xb0c>)
 800e332:	402b      	ands	r3, r5
 800e334:	930f      	str	r3, [sp, #60]	; 0x3c
 800e336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e338:	4b64      	ldr	r3, [pc, #400]	; (800e4cc <_strtod_l+0xb1c>)
 800e33a:	429a      	cmp	r2, r3
 800e33c:	f040 80ce 	bne.w	800e4dc <_strtod_l+0xb2c>
 800e340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e348:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800e34c:	ec4b ab10 	vmov	d0, sl, fp
 800e350:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e358:	f002 f8c0 	bl	80104dc <__ulp>
 800e35c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e360:	ec53 2b10 	vmov	r2, r3, d0
 800e364:	f7f2 f948 	bl	80005f8 <__aeabi_dmul>
 800e368:	4652      	mov	r2, sl
 800e36a:	465b      	mov	r3, fp
 800e36c:	f7f1 ff8e 	bl	800028c <__adddf3>
 800e370:	460b      	mov	r3, r1
 800e372:	4952      	ldr	r1, [pc, #328]	; (800e4bc <_strtod_l+0xb0c>)
 800e374:	4a56      	ldr	r2, [pc, #344]	; (800e4d0 <_strtod_l+0xb20>)
 800e376:	4019      	ands	r1, r3
 800e378:	4291      	cmp	r1, r2
 800e37a:	4682      	mov	sl, r0
 800e37c:	d95b      	bls.n	800e436 <_strtod_l+0xa86>
 800e37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e380:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e384:	4293      	cmp	r3, r2
 800e386:	d103      	bne.n	800e390 <_strtod_l+0x9e0>
 800e388:	9b08      	ldr	r3, [sp, #32]
 800e38a:	3301      	adds	r3, #1
 800e38c:	f43f ad2e 	beq.w	800ddec <_strtod_l+0x43c>
 800e390:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e4c0 <_strtod_l+0xb10>
 800e394:	f04f 3aff 	mov.w	sl, #4294967295
 800e398:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e39a:	4648      	mov	r0, r9
 800e39c:	f001 fe06 	bl	800ffac <_Bfree>
 800e3a0:	9905      	ldr	r1, [sp, #20]
 800e3a2:	4648      	mov	r0, r9
 800e3a4:	f001 fe02 	bl	800ffac <_Bfree>
 800e3a8:	4641      	mov	r1, r8
 800e3aa:	4648      	mov	r0, r9
 800e3ac:	f001 fdfe 	bl	800ffac <_Bfree>
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	4648      	mov	r0, r9
 800e3b4:	f001 fdfa 	bl	800ffac <_Bfree>
 800e3b8:	e619      	b.n	800dfee <_strtod_l+0x63e>
 800e3ba:	f1ba 0f00 	cmp.w	sl, #0
 800e3be:	d11a      	bne.n	800e3f6 <_strtod_l+0xa46>
 800e3c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3c4:	b9eb      	cbnz	r3, 800e402 <_strtod_l+0xa52>
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	4b3f      	ldr	r3, [pc, #252]	; (800e4c8 <_strtod_l+0xb18>)
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	f7f2 fb85 	bl	8000adc <__aeabi_dcmplt>
 800e3d2:	b9c8      	cbnz	r0, 800e408 <_strtod_l+0xa58>
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	2200      	movs	r2, #0
 800e3da:	4b3e      	ldr	r3, [pc, #248]	; (800e4d4 <_strtod_l+0xb24>)
 800e3dc:	f7f2 f90c 	bl	80005f8 <__aeabi_dmul>
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	460f      	mov	r7, r1
 800e3e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e3e8:	9618      	str	r6, [sp, #96]	; 0x60
 800e3ea:	9319      	str	r3, [sp, #100]	; 0x64
 800e3ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800e3f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e3f4:	e79c      	b.n	800e330 <_strtod_l+0x980>
 800e3f6:	f1ba 0f01 	cmp.w	sl, #1
 800e3fa:	d102      	bne.n	800e402 <_strtod_l+0xa52>
 800e3fc:	2d00      	cmp	r5, #0
 800e3fe:	f43f ad8e 	beq.w	800df1e <_strtod_l+0x56e>
 800e402:	2200      	movs	r2, #0
 800e404:	4b34      	ldr	r3, [pc, #208]	; (800e4d8 <_strtod_l+0xb28>)
 800e406:	e78f      	b.n	800e328 <_strtod_l+0x978>
 800e408:	2600      	movs	r6, #0
 800e40a:	4f32      	ldr	r7, [pc, #200]	; (800e4d4 <_strtod_l+0xb24>)
 800e40c:	e7ea      	b.n	800e3e4 <_strtod_l+0xa34>
 800e40e:	4b31      	ldr	r3, [pc, #196]	; (800e4d4 <_strtod_l+0xb24>)
 800e410:	4630      	mov	r0, r6
 800e412:	4639      	mov	r1, r7
 800e414:	2200      	movs	r2, #0
 800e416:	f7f2 f8ef 	bl	80005f8 <__aeabi_dmul>
 800e41a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	b933      	cbnz	r3, 800e430 <_strtod_l+0xa80>
 800e422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e426:	9010      	str	r0, [sp, #64]	; 0x40
 800e428:	9311      	str	r3, [sp, #68]	; 0x44
 800e42a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e42e:	e7df      	b.n	800e3f0 <_strtod_l+0xa40>
 800e430:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e434:	e7f9      	b.n	800e42a <_strtod_l+0xa7a>
 800e436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e43a:	9b04      	ldr	r3, [sp, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1ab      	bne.n	800e398 <_strtod_l+0x9e8>
 800e440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e444:	0d1b      	lsrs	r3, r3, #20
 800e446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e448:	051b      	lsls	r3, r3, #20
 800e44a:	429a      	cmp	r2, r3
 800e44c:	465d      	mov	r5, fp
 800e44e:	d1a3      	bne.n	800e398 <_strtod_l+0x9e8>
 800e450:	4639      	mov	r1, r7
 800e452:	4630      	mov	r0, r6
 800e454:	f7f2 fb80 	bl	8000b58 <__aeabi_d2iz>
 800e458:	f7f2 f864 	bl	8000524 <__aeabi_i2d>
 800e45c:	460b      	mov	r3, r1
 800e45e:	4602      	mov	r2, r0
 800e460:	4639      	mov	r1, r7
 800e462:	4630      	mov	r0, r6
 800e464:	f7f1 ff10 	bl	8000288 <__aeabi_dsub>
 800e468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e46a:	4606      	mov	r6, r0
 800e46c:	460f      	mov	r7, r1
 800e46e:	b933      	cbnz	r3, 800e47e <_strtod_l+0xace>
 800e470:	f1ba 0f00 	cmp.w	sl, #0
 800e474:	d103      	bne.n	800e47e <_strtod_l+0xace>
 800e476:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800e47a:	2d00      	cmp	r5, #0
 800e47c:	d06d      	beq.n	800e55a <_strtod_l+0xbaa>
 800e47e:	a30a      	add	r3, pc, #40	; (adr r3, 800e4a8 <_strtod_l+0xaf8>)
 800e480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f2 fb28 	bl	8000adc <__aeabi_dcmplt>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f47f acb8 	bne.w	800de02 <_strtod_l+0x452>
 800e492:	a307      	add	r3, pc, #28	; (adr r3, 800e4b0 <_strtod_l+0xb00>)
 800e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e498:	4630      	mov	r0, r6
 800e49a:	4639      	mov	r1, r7
 800e49c:	f7f2 fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	f43f af79 	beq.w	800e398 <_strtod_l+0x9e8>
 800e4a6:	e4ac      	b.n	800de02 <_strtod_l+0x452>
 800e4a8:	94a03595 	.word	0x94a03595
 800e4ac:	3fdfffff 	.word	0x3fdfffff
 800e4b0:	35afe535 	.word	0x35afe535
 800e4b4:	3fe00000 	.word	0x3fe00000
 800e4b8:	000fffff 	.word	0x000fffff
 800e4bc:	7ff00000 	.word	0x7ff00000
 800e4c0:	7fefffff 	.word	0x7fefffff
 800e4c4:	39500000 	.word	0x39500000
 800e4c8:	3ff00000 	.word	0x3ff00000
 800e4cc:	7fe00000 	.word	0x7fe00000
 800e4d0:	7c9fffff 	.word	0x7c9fffff
 800e4d4:	3fe00000 	.word	0x3fe00000
 800e4d8:	bff00000 	.word	0xbff00000
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	b333      	cbz	r3, 800e52e <_strtod_l+0xb7e>
 800e4e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e4e6:	d822      	bhi.n	800e52e <_strtod_l+0xb7e>
 800e4e8:	a327      	add	r3, pc, #156	; (adr r3, 800e588 <_strtod_l+0xbd8>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	f7f2 fafd 	bl	8000af0 <__aeabi_dcmple>
 800e4f6:	b1a0      	cbz	r0, 800e522 <_strtod_l+0xb72>
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f7f2 fb54 	bl	8000ba8 <__aeabi_d2uiz>
 800e500:	2800      	cmp	r0, #0
 800e502:	bf08      	it	eq
 800e504:	2001      	moveq	r0, #1
 800e506:	f7f1 fffd 	bl	8000504 <__aeabi_ui2d>
 800e50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e50c:	4606      	mov	r6, r0
 800e50e:	460f      	mov	r7, r1
 800e510:	bb03      	cbnz	r3, 800e554 <_strtod_l+0xba4>
 800e512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e516:	9012      	str	r0, [sp, #72]	; 0x48
 800e518:	9313      	str	r3, [sp, #76]	; 0x4c
 800e51a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e51e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e526:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e52a:	1a9b      	subs	r3, r3, r2
 800e52c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e52e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e532:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e536:	f001 ffd1 	bl	80104dc <__ulp>
 800e53a:	4650      	mov	r0, sl
 800e53c:	ec53 2b10 	vmov	r2, r3, d0
 800e540:	4659      	mov	r1, fp
 800e542:	f7f2 f859 	bl	80005f8 <__aeabi_dmul>
 800e546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e54a:	f7f1 fe9f 	bl	800028c <__adddf3>
 800e54e:	4682      	mov	sl, r0
 800e550:	468b      	mov	fp, r1
 800e552:	e772      	b.n	800e43a <_strtod_l+0xa8a>
 800e554:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e558:	e7df      	b.n	800e51a <_strtod_l+0xb6a>
 800e55a:	a30d      	add	r3, pc, #52	; (adr r3, 800e590 <_strtod_l+0xbe0>)
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	f7f2 fabc 	bl	8000adc <__aeabi_dcmplt>
 800e564:	e79c      	b.n	800e4a0 <_strtod_l+0xaf0>
 800e566:	2300      	movs	r3, #0
 800e568:	930d      	str	r3, [sp, #52]	; 0x34
 800e56a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e56c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e56e:	6013      	str	r3, [r2, #0]
 800e570:	f7ff ba61 	b.w	800da36 <_strtod_l+0x86>
 800e574:	2b65      	cmp	r3, #101	; 0x65
 800e576:	f04f 0200 	mov.w	r2, #0
 800e57a:	f43f ab4e 	beq.w	800dc1a <_strtod_l+0x26a>
 800e57e:	2101      	movs	r1, #1
 800e580:	4614      	mov	r4, r2
 800e582:	9104      	str	r1, [sp, #16]
 800e584:	f7ff bacb 	b.w	800db1e <_strtod_l+0x16e>
 800e588:	ffc00000 	.word	0xffc00000
 800e58c:	41dfffff 	.word	0x41dfffff
 800e590:	94a03595 	.word	0x94a03595
 800e594:	3fcfffff 	.word	0x3fcfffff

0800e598 <_strtod_r>:
 800e598:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <_strtod_r+0x18>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	b410      	push	{r4}
 800e59e:	6a1b      	ldr	r3, [r3, #32]
 800e5a0:	4c04      	ldr	r4, [pc, #16]	; (800e5b4 <_strtod_r+0x1c>)
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	bf08      	it	eq
 800e5a6:	4623      	moveq	r3, r4
 800e5a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5ac:	f7ff ba00 	b.w	800d9b0 <_strtod_l>
 800e5b0:	20000040 	.word	0x20000040
 800e5b4:	200000a4 	.word	0x200000a4

0800e5b8 <_strtol_l.isra.0>:
 800e5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	4680      	mov	r8, r0
 800e5be:	4689      	mov	r9, r1
 800e5c0:	4692      	mov	sl, r2
 800e5c2:	461e      	mov	r6, r3
 800e5c4:	460f      	mov	r7, r1
 800e5c6:	463d      	mov	r5, r7
 800e5c8:	9808      	ldr	r0, [sp, #32]
 800e5ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e5ce:	f001 fc27 	bl	800fe20 <__locale_ctype_ptr_l>
 800e5d2:	4420      	add	r0, r4
 800e5d4:	7843      	ldrb	r3, [r0, #1]
 800e5d6:	f013 0308 	ands.w	r3, r3, #8
 800e5da:	d132      	bne.n	800e642 <_strtol_l.isra.0+0x8a>
 800e5dc:	2c2d      	cmp	r4, #45	; 0x2d
 800e5de:	d132      	bne.n	800e646 <_strtol_l.isra.0+0x8e>
 800e5e0:	787c      	ldrb	r4, [r7, #1]
 800e5e2:	1cbd      	adds	r5, r7, #2
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	d05d      	beq.n	800e6a6 <_strtol_l.isra.0+0xee>
 800e5ea:	2e10      	cmp	r6, #16
 800e5ec:	d109      	bne.n	800e602 <_strtol_l.isra.0+0x4a>
 800e5ee:	2c30      	cmp	r4, #48	; 0x30
 800e5f0:	d107      	bne.n	800e602 <_strtol_l.isra.0+0x4a>
 800e5f2:	782b      	ldrb	r3, [r5, #0]
 800e5f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e5f8:	2b58      	cmp	r3, #88	; 0x58
 800e5fa:	d14f      	bne.n	800e69c <_strtol_l.isra.0+0xe4>
 800e5fc:	786c      	ldrb	r4, [r5, #1]
 800e5fe:	2610      	movs	r6, #16
 800e600:	3502      	adds	r5, #2
 800e602:	2a00      	cmp	r2, #0
 800e604:	bf14      	ite	ne
 800e606:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e60a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e60e:	2700      	movs	r7, #0
 800e610:	fbb1 fcf6 	udiv	ip, r1, r6
 800e614:	4638      	mov	r0, r7
 800e616:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e61a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e61e:	2b09      	cmp	r3, #9
 800e620:	d817      	bhi.n	800e652 <_strtol_l.isra.0+0x9a>
 800e622:	461c      	mov	r4, r3
 800e624:	42a6      	cmp	r6, r4
 800e626:	dd23      	ble.n	800e670 <_strtol_l.isra.0+0xb8>
 800e628:	1c7b      	adds	r3, r7, #1
 800e62a:	d007      	beq.n	800e63c <_strtol_l.isra.0+0x84>
 800e62c:	4584      	cmp	ip, r0
 800e62e:	d31c      	bcc.n	800e66a <_strtol_l.isra.0+0xb2>
 800e630:	d101      	bne.n	800e636 <_strtol_l.isra.0+0x7e>
 800e632:	45a6      	cmp	lr, r4
 800e634:	db19      	blt.n	800e66a <_strtol_l.isra.0+0xb2>
 800e636:	fb00 4006 	mla	r0, r0, r6, r4
 800e63a:	2701      	movs	r7, #1
 800e63c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e640:	e7eb      	b.n	800e61a <_strtol_l.isra.0+0x62>
 800e642:	462f      	mov	r7, r5
 800e644:	e7bf      	b.n	800e5c6 <_strtol_l.isra.0+0xe>
 800e646:	2c2b      	cmp	r4, #43	; 0x2b
 800e648:	bf04      	itt	eq
 800e64a:	1cbd      	addeq	r5, r7, #2
 800e64c:	787c      	ldrbeq	r4, [r7, #1]
 800e64e:	461a      	mov	r2, r3
 800e650:	e7c9      	b.n	800e5e6 <_strtol_l.isra.0+0x2e>
 800e652:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e656:	2b19      	cmp	r3, #25
 800e658:	d801      	bhi.n	800e65e <_strtol_l.isra.0+0xa6>
 800e65a:	3c37      	subs	r4, #55	; 0x37
 800e65c:	e7e2      	b.n	800e624 <_strtol_l.isra.0+0x6c>
 800e65e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e662:	2b19      	cmp	r3, #25
 800e664:	d804      	bhi.n	800e670 <_strtol_l.isra.0+0xb8>
 800e666:	3c57      	subs	r4, #87	; 0x57
 800e668:	e7dc      	b.n	800e624 <_strtol_l.isra.0+0x6c>
 800e66a:	f04f 37ff 	mov.w	r7, #4294967295
 800e66e:	e7e5      	b.n	800e63c <_strtol_l.isra.0+0x84>
 800e670:	1c7b      	adds	r3, r7, #1
 800e672:	d108      	bne.n	800e686 <_strtol_l.isra.0+0xce>
 800e674:	2322      	movs	r3, #34	; 0x22
 800e676:	f8c8 3000 	str.w	r3, [r8]
 800e67a:	4608      	mov	r0, r1
 800e67c:	f1ba 0f00 	cmp.w	sl, #0
 800e680:	d107      	bne.n	800e692 <_strtol_l.isra.0+0xda>
 800e682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e686:	b102      	cbz	r2, 800e68a <_strtol_l.isra.0+0xd2>
 800e688:	4240      	negs	r0, r0
 800e68a:	f1ba 0f00 	cmp.w	sl, #0
 800e68e:	d0f8      	beq.n	800e682 <_strtol_l.isra.0+0xca>
 800e690:	b10f      	cbz	r7, 800e696 <_strtol_l.isra.0+0xde>
 800e692:	f105 39ff 	add.w	r9, r5, #4294967295
 800e696:	f8ca 9000 	str.w	r9, [sl]
 800e69a:	e7f2      	b.n	800e682 <_strtol_l.isra.0+0xca>
 800e69c:	2430      	movs	r4, #48	; 0x30
 800e69e:	2e00      	cmp	r6, #0
 800e6a0:	d1af      	bne.n	800e602 <_strtol_l.isra.0+0x4a>
 800e6a2:	2608      	movs	r6, #8
 800e6a4:	e7ad      	b.n	800e602 <_strtol_l.isra.0+0x4a>
 800e6a6:	2c30      	cmp	r4, #48	; 0x30
 800e6a8:	d0a3      	beq.n	800e5f2 <_strtol_l.isra.0+0x3a>
 800e6aa:	260a      	movs	r6, #10
 800e6ac:	e7a9      	b.n	800e602 <_strtol_l.isra.0+0x4a>
	...

0800e6b0 <_strtol_r>:
 800e6b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6b2:	4c06      	ldr	r4, [pc, #24]	; (800e6cc <_strtol_r+0x1c>)
 800e6b4:	4d06      	ldr	r5, [pc, #24]	; (800e6d0 <_strtol_r+0x20>)
 800e6b6:	6824      	ldr	r4, [r4, #0]
 800e6b8:	6a24      	ldr	r4, [r4, #32]
 800e6ba:	2c00      	cmp	r4, #0
 800e6bc:	bf08      	it	eq
 800e6be:	462c      	moveq	r4, r5
 800e6c0:	9400      	str	r4, [sp, #0]
 800e6c2:	f7ff ff79 	bl	800e5b8 <_strtol_l.isra.0>
 800e6c6:	b003      	add	sp, #12
 800e6c8:	bd30      	pop	{r4, r5, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000040 	.word	0x20000040
 800e6d0:	200000a4 	.word	0x200000a4

0800e6d4 <__swbuf_r>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	460e      	mov	r6, r1
 800e6d8:	4614      	mov	r4, r2
 800e6da:	4605      	mov	r5, r0
 800e6dc:	b118      	cbz	r0, 800e6e6 <__swbuf_r+0x12>
 800e6de:	6983      	ldr	r3, [r0, #24]
 800e6e0:	b90b      	cbnz	r3, 800e6e6 <__swbuf_r+0x12>
 800e6e2:	f000 ffed 	bl	800f6c0 <__sinit>
 800e6e6:	4b21      	ldr	r3, [pc, #132]	; (800e76c <__swbuf_r+0x98>)
 800e6e8:	429c      	cmp	r4, r3
 800e6ea:	d12a      	bne.n	800e742 <__swbuf_r+0x6e>
 800e6ec:	686c      	ldr	r4, [r5, #4]
 800e6ee:	69a3      	ldr	r3, [r4, #24]
 800e6f0:	60a3      	str	r3, [r4, #8]
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	071a      	lsls	r2, r3, #28
 800e6f6:	d52e      	bpl.n	800e756 <__swbuf_r+0x82>
 800e6f8:	6923      	ldr	r3, [r4, #16]
 800e6fa:	b363      	cbz	r3, 800e756 <__swbuf_r+0x82>
 800e6fc:	6923      	ldr	r3, [r4, #16]
 800e6fe:	6820      	ldr	r0, [r4, #0]
 800e700:	1ac0      	subs	r0, r0, r3
 800e702:	6963      	ldr	r3, [r4, #20]
 800e704:	b2f6      	uxtb	r6, r6
 800e706:	4283      	cmp	r3, r0
 800e708:	4637      	mov	r7, r6
 800e70a:	dc04      	bgt.n	800e716 <__swbuf_r+0x42>
 800e70c:	4621      	mov	r1, r4
 800e70e:	4628      	mov	r0, r5
 800e710:	f000 ff6c 	bl	800f5ec <_fflush_r>
 800e714:	bb28      	cbnz	r0, 800e762 <__swbuf_r+0x8e>
 800e716:	68a3      	ldr	r3, [r4, #8]
 800e718:	3b01      	subs	r3, #1
 800e71a:	60a3      	str	r3, [r4, #8]
 800e71c:	6823      	ldr	r3, [r4, #0]
 800e71e:	1c5a      	adds	r2, r3, #1
 800e720:	6022      	str	r2, [r4, #0]
 800e722:	701e      	strb	r6, [r3, #0]
 800e724:	6963      	ldr	r3, [r4, #20]
 800e726:	3001      	adds	r0, #1
 800e728:	4283      	cmp	r3, r0
 800e72a:	d004      	beq.n	800e736 <__swbuf_r+0x62>
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	07db      	lsls	r3, r3, #31
 800e730:	d519      	bpl.n	800e766 <__swbuf_r+0x92>
 800e732:	2e0a      	cmp	r6, #10
 800e734:	d117      	bne.n	800e766 <__swbuf_r+0x92>
 800e736:	4621      	mov	r1, r4
 800e738:	4628      	mov	r0, r5
 800e73a:	f000 ff57 	bl	800f5ec <_fflush_r>
 800e73e:	b190      	cbz	r0, 800e766 <__swbuf_r+0x92>
 800e740:	e00f      	b.n	800e762 <__swbuf_r+0x8e>
 800e742:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <__swbuf_r+0x9c>)
 800e744:	429c      	cmp	r4, r3
 800e746:	d101      	bne.n	800e74c <__swbuf_r+0x78>
 800e748:	68ac      	ldr	r4, [r5, #8]
 800e74a:	e7d0      	b.n	800e6ee <__swbuf_r+0x1a>
 800e74c:	4b09      	ldr	r3, [pc, #36]	; (800e774 <__swbuf_r+0xa0>)
 800e74e:	429c      	cmp	r4, r3
 800e750:	bf08      	it	eq
 800e752:	68ec      	ldreq	r4, [r5, #12]
 800e754:	e7cb      	b.n	800e6ee <__swbuf_r+0x1a>
 800e756:	4621      	mov	r1, r4
 800e758:	4628      	mov	r0, r5
 800e75a:	f000 f80d 	bl	800e778 <__swsetup_r>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d0cc      	beq.n	800e6fc <__swbuf_r+0x28>
 800e762:	f04f 37ff 	mov.w	r7, #4294967295
 800e766:	4638      	mov	r0, r7
 800e768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e76a:	bf00      	nop
 800e76c:	08011718 	.word	0x08011718
 800e770:	08011738 	.word	0x08011738
 800e774:	080116f8 	.word	0x080116f8

0800e778 <__swsetup_r>:
 800e778:	4b32      	ldr	r3, [pc, #200]	; (800e844 <__swsetup_r+0xcc>)
 800e77a:	b570      	push	{r4, r5, r6, lr}
 800e77c:	681d      	ldr	r5, [r3, #0]
 800e77e:	4606      	mov	r6, r0
 800e780:	460c      	mov	r4, r1
 800e782:	b125      	cbz	r5, 800e78e <__swsetup_r+0x16>
 800e784:	69ab      	ldr	r3, [r5, #24]
 800e786:	b913      	cbnz	r3, 800e78e <__swsetup_r+0x16>
 800e788:	4628      	mov	r0, r5
 800e78a:	f000 ff99 	bl	800f6c0 <__sinit>
 800e78e:	4b2e      	ldr	r3, [pc, #184]	; (800e848 <__swsetup_r+0xd0>)
 800e790:	429c      	cmp	r4, r3
 800e792:	d10f      	bne.n	800e7b4 <__swsetup_r+0x3c>
 800e794:	686c      	ldr	r4, [r5, #4]
 800e796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	0715      	lsls	r5, r2, #28
 800e79e:	d42c      	bmi.n	800e7fa <__swsetup_r+0x82>
 800e7a0:	06d0      	lsls	r0, r2, #27
 800e7a2:	d411      	bmi.n	800e7c8 <__swsetup_r+0x50>
 800e7a4:	2209      	movs	r2, #9
 800e7a6:	6032      	str	r2, [r6, #0]
 800e7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	f04f 30ff 	mov.w	r0, #4294967295
 800e7b2:	e03e      	b.n	800e832 <__swsetup_r+0xba>
 800e7b4:	4b25      	ldr	r3, [pc, #148]	; (800e84c <__swsetup_r+0xd4>)
 800e7b6:	429c      	cmp	r4, r3
 800e7b8:	d101      	bne.n	800e7be <__swsetup_r+0x46>
 800e7ba:	68ac      	ldr	r4, [r5, #8]
 800e7bc:	e7eb      	b.n	800e796 <__swsetup_r+0x1e>
 800e7be:	4b24      	ldr	r3, [pc, #144]	; (800e850 <__swsetup_r+0xd8>)
 800e7c0:	429c      	cmp	r4, r3
 800e7c2:	bf08      	it	eq
 800e7c4:	68ec      	ldreq	r4, [r5, #12]
 800e7c6:	e7e6      	b.n	800e796 <__swsetup_r+0x1e>
 800e7c8:	0751      	lsls	r1, r2, #29
 800e7ca:	d512      	bpl.n	800e7f2 <__swsetup_r+0x7a>
 800e7cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7ce:	b141      	cbz	r1, 800e7e2 <__swsetup_r+0x6a>
 800e7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7d4:	4299      	cmp	r1, r3
 800e7d6:	d002      	beq.n	800e7de <__swsetup_r+0x66>
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f001 ffc1 	bl	8010760 <_free_r>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	6363      	str	r3, [r4, #52]	; 0x34
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7e8:	81a3      	strh	r3, [r4, #12]
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	6063      	str	r3, [r4, #4]
 800e7ee:	6923      	ldr	r3, [r4, #16]
 800e7f0:	6023      	str	r3, [r4, #0]
 800e7f2:	89a3      	ldrh	r3, [r4, #12]
 800e7f4:	f043 0308 	orr.w	r3, r3, #8
 800e7f8:	81a3      	strh	r3, [r4, #12]
 800e7fa:	6923      	ldr	r3, [r4, #16]
 800e7fc:	b94b      	cbnz	r3, 800e812 <__swsetup_r+0x9a>
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e808:	d003      	beq.n	800e812 <__swsetup_r+0x9a>
 800e80a:	4621      	mov	r1, r4
 800e80c:	4630      	mov	r0, r6
 800e80e:	f001 fb3f 	bl	800fe90 <__smakebuf_r>
 800e812:	89a2      	ldrh	r2, [r4, #12]
 800e814:	f012 0301 	ands.w	r3, r2, #1
 800e818:	d00c      	beq.n	800e834 <__swsetup_r+0xbc>
 800e81a:	2300      	movs	r3, #0
 800e81c:	60a3      	str	r3, [r4, #8]
 800e81e:	6963      	ldr	r3, [r4, #20]
 800e820:	425b      	negs	r3, r3
 800e822:	61a3      	str	r3, [r4, #24]
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	b953      	cbnz	r3, 800e83e <__swsetup_r+0xc6>
 800e828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e82c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e830:	d1ba      	bne.n	800e7a8 <__swsetup_r+0x30>
 800e832:	bd70      	pop	{r4, r5, r6, pc}
 800e834:	0792      	lsls	r2, r2, #30
 800e836:	bf58      	it	pl
 800e838:	6963      	ldrpl	r3, [r4, #20]
 800e83a:	60a3      	str	r3, [r4, #8]
 800e83c:	e7f2      	b.n	800e824 <__swsetup_r+0xac>
 800e83e:	2000      	movs	r0, #0
 800e840:	e7f7      	b.n	800e832 <__swsetup_r+0xba>
 800e842:	bf00      	nop
 800e844:	20000040 	.word	0x20000040
 800e848:	08011718 	.word	0x08011718
 800e84c:	08011738 	.word	0x08011738
 800e850:	080116f8 	.word	0x080116f8

0800e854 <quorem>:
 800e854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e858:	6903      	ldr	r3, [r0, #16]
 800e85a:	690c      	ldr	r4, [r1, #16]
 800e85c:	42a3      	cmp	r3, r4
 800e85e:	4680      	mov	r8, r0
 800e860:	f2c0 8082 	blt.w	800e968 <quorem+0x114>
 800e864:	3c01      	subs	r4, #1
 800e866:	f101 0714 	add.w	r7, r1, #20
 800e86a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e86e:	f100 0614 	add.w	r6, r0, #20
 800e872:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e876:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e87a:	eb06 030c 	add.w	r3, r6, ip
 800e87e:	3501      	adds	r5, #1
 800e880:	eb07 090c 	add.w	r9, r7, ip
 800e884:	9301      	str	r3, [sp, #4]
 800e886:	fbb0 f5f5 	udiv	r5, r0, r5
 800e88a:	b395      	cbz	r5, 800e8f2 <quorem+0x9e>
 800e88c:	f04f 0a00 	mov.w	sl, #0
 800e890:	4638      	mov	r0, r7
 800e892:	46b6      	mov	lr, r6
 800e894:	46d3      	mov	fp, sl
 800e896:	f850 2b04 	ldr.w	r2, [r0], #4
 800e89a:	b293      	uxth	r3, r2
 800e89c:	fb05 a303 	mla	r3, r5, r3, sl
 800e8a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8a4:	b29b      	uxth	r3, r3
 800e8a6:	ebab 0303 	sub.w	r3, fp, r3
 800e8aa:	0c12      	lsrs	r2, r2, #16
 800e8ac:	f8de b000 	ldr.w	fp, [lr]
 800e8b0:	fb05 a202 	mla	r2, r5, r2, sl
 800e8b4:	fa13 f38b 	uxtah	r3, r3, fp
 800e8b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e8bc:	fa1f fb82 	uxth.w	fp, r2
 800e8c0:	f8de 2000 	ldr.w	r2, [lr]
 800e8c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e8c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8d2:	4581      	cmp	r9, r0
 800e8d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e8d8:	f84e 3b04 	str.w	r3, [lr], #4
 800e8dc:	d2db      	bcs.n	800e896 <quorem+0x42>
 800e8de:	f856 300c 	ldr.w	r3, [r6, ip]
 800e8e2:	b933      	cbnz	r3, 800e8f2 <quorem+0x9e>
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	3b04      	subs	r3, #4
 800e8e8:	429e      	cmp	r6, r3
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	d330      	bcc.n	800e950 <quorem+0xfc>
 800e8ee:	f8c8 4010 	str.w	r4, [r8, #16]
 800e8f2:	4640      	mov	r0, r8
 800e8f4:	f001 fd7a 	bl	80103ec <__mcmp>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	db25      	blt.n	800e948 <quorem+0xf4>
 800e8fc:	3501      	adds	r5, #1
 800e8fe:	4630      	mov	r0, r6
 800e900:	f04f 0c00 	mov.w	ip, #0
 800e904:	f857 2b04 	ldr.w	r2, [r7], #4
 800e908:	f8d0 e000 	ldr.w	lr, [r0]
 800e90c:	b293      	uxth	r3, r2
 800e90e:	ebac 0303 	sub.w	r3, ip, r3
 800e912:	0c12      	lsrs	r2, r2, #16
 800e914:	fa13 f38e 	uxtah	r3, r3, lr
 800e918:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e91c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e920:	b29b      	uxth	r3, r3
 800e922:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e926:	45b9      	cmp	r9, r7
 800e928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e92c:	f840 3b04 	str.w	r3, [r0], #4
 800e930:	d2e8      	bcs.n	800e904 <quorem+0xb0>
 800e932:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e936:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e93a:	b92a      	cbnz	r2, 800e948 <quorem+0xf4>
 800e93c:	3b04      	subs	r3, #4
 800e93e:	429e      	cmp	r6, r3
 800e940:	461a      	mov	r2, r3
 800e942:	d30b      	bcc.n	800e95c <quorem+0x108>
 800e944:	f8c8 4010 	str.w	r4, [r8, #16]
 800e948:	4628      	mov	r0, r5
 800e94a:	b003      	add	sp, #12
 800e94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e950:	6812      	ldr	r2, [r2, #0]
 800e952:	3b04      	subs	r3, #4
 800e954:	2a00      	cmp	r2, #0
 800e956:	d1ca      	bne.n	800e8ee <quorem+0x9a>
 800e958:	3c01      	subs	r4, #1
 800e95a:	e7c5      	b.n	800e8e8 <quorem+0x94>
 800e95c:	6812      	ldr	r2, [r2, #0]
 800e95e:	3b04      	subs	r3, #4
 800e960:	2a00      	cmp	r2, #0
 800e962:	d1ef      	bne.n	800e944 <quorem+0xf0>
 800e964:	3c01      	subs	r4, #1
 800e966:	e7ea      	b.n	800e93e <quorem+0xea>
 800e968:	2000      	movs	r0, #0
 800e96a:	e7ee      	b.n	800e94a <quorem+0xf6>
 800e96c:	0000      	movs	r0, r0
	...

0800e970 <_dtoa_r>:
 800e970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	ec57 6b10 	vmov	r6, r7, d0
 800e978:	b097      	sub	sp, #92	; 0x5c
 800e97a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e97c:	9106      	str	r1, [sp, #24]
 800e97e:	4604      	mov	r4, r0
 800e980:	920b      	str	r2, [sp, #44]	; 0x2c
 800e982:	9312      	str	r3, [sp, #72]	; 0x48
 800e984:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e988:	e9cd 6700 	strd	r6, r7, [sp]
 800e98c:	b93d      	cbnz	r5, 800e99e <_dtoa_r+0x2e>
 800e98e:	2010      	movs	r0, #16
 800e990:	f001 fabe 	bl	800ff10 <malloc>
 800e994:	6260      	str	r0, [r4, #36]	; 0x24
 800e996:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e99a:	6005      	str	r5, [r0, #0]
 800e99c:	60c5      	str	r5, [r0, #12]
 800e99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9a0:	6819      	ldr	r1, [r3, #0]
 800e9a2:	b151      	cbz	r1, 800e9ba <_dtoa_r+0x4a>
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	604a      	str	r2, [r1, #4]
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4093      	lsls	r3, r2
 800e9ac:	608b      	str	r3, [r1, #8]
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f001 fafc 	bl	800ffac <_Bfree>
 800e9b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	601a      	str	r2, [r3, #0]
 800e9ba:	1e3b      	subs	r3, r7, #0
 800e9bc:	bfbb      	ittet	lt
 800e9be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e9c2:	9301      	strlt	r3, [sp, #4]
 800e9c4:	2300      	movge	r3, #0
 800e9c6:	2201      	movlt	r2, #1
 800e9c8:	bfac      	ite	ge
 800e9ca:	f8c8 3000 	strge.w	r3, [r8]
 800e9ce:	f8c8 2000 	strlt.w	r2, [r8]
 800e9d2:	4baf      	ldr	r3, [pc, #700]	; (800ec90 <_dtoa_r+0x320>)
 800e9d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e9d8:	ea33 0308 	bics.w	r3, r3, r8
 800e9dc:	d114      	bne.n	800ea08 <_dtoa_r+0x98>
 800e9de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e9e4:	6013      	str	r3, [r2, #0]
 800e9e6:	9b00      	ldr	r3, [sp, #0]
 800e9e8:	b923      	cbnz	r3, 800e9f4 <_dtoa_r+0x84>
 800e9ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f000 8542 	beq.w	800f478 <_dtoa_r+0xb08>
 800e9f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800eca4 <_dtoa_r+0x334>
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 8544 	beq.w	800f488 <_dtoa_r+0xb18>
 800ea00:	f10b 0303 	add.w	r3, fp, #3
 800ea04:	f000 bd3e 	b.w	800f484 <_dtoa_r+0xb14>
 800ea08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2300      	movs	r3, #0
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f2 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea18:	4681      	mov	r9, r0
 800ea1a:	b168      	cbz	r0, 800ea38 <_dtoa_r+0xc8>
 800ea1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ea1e:	2301      	movs	r3, #1
 800ea20:	6013      	str	r3, [r2, #0]
 800ea22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 8524 	beq.w	800f472 <_dtoa_r+0xb02>
 800ea2a:	4b9a      	ldr	r3, [pc, #616]	; (800ec94 <_dtoa_r+0x324>)
 800ea2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ea2e:	f103 3bff 	add.w	fp, r3, #4294967295
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	f000 bd28 	b.w	800f488 <_dtoa_r+0xb18>
 800ea38:	aa14      	add	r2, sp, #80	; 0x50
 800ea3a:	a915      	add	r1, sp, #84	; 0x54
 800ea3c:	ec47 6b10 	vmov	d0, r6, r7
 800ea40:	4620      	mov	r0, r4
 800ea42:	f001 fdc1 	bl	80105c8 <__d2b>
 800ea46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ea4a:	9004      	str	r0, [sp, #16]
 800ea4c:	2d00      	cmp	r5, #0
 800ea4e:	d07c      	beq.n	800eb4a <_dtoa_r+0x1da>
 800ea50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ea58:	46b2      	mov	sl, r6
 800ea5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ea5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ea62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ea66:	2200      	movs	r2, #0
 800ea68:	4b8b      	ldr	r3, [pc, #556]	; (800ec98 <_dtoa_r+0x328>)
 800ea6a:	4650      	mov	r0, sl
 800ea6c:	4659      	mov	r1, fp
 800ea6e:	f7f1 fc0b 	bl	8000288 <__aeabi_dsub>
 800ea72:	a381      	add	r3, pc, #516	; (adr r3, 800ec78 <_dtoa_r+0x308>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ea7c:	a380      	add	r3, pc, #512	; (adr r3, 800ec80 <_dtoa_r+0x310>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	f7f1 fc03 	bl	800028c <__adddf3>
 800ea86:	4606      	mov	r6, r0
 800ea88:	4628      	mov	r0, r5
 800ea8a:	460f      	mov	r7, r1
 800ea8c:	f7f1 fd4a 	bl	8000524 <__aeabi_i2d>
 800ea90:	a37d      	add	r3, pc, #500	; (adr r3, 800ec88 <_dtoa_r+0x318>)
 800ea92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea96:	f7f1 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	4606      	mov	r6, r0
 800eaa8:	460f      	mov	r7, r1
 800eaaa:	f7f2 f855 	bl	8000b58 <__aeabi_d2iz>
 800eaae:	2200      	movs	r2, #0
 800eab0:	4682      	mov	sl, r0
 800eab2:	2300      	movs	r3, #0
 800eab4:	4630      	mov	r0, r6
 800eab6:	4639      	mov	r1, r7
 800eab8:	f7f2 f810 	bl	8000adc <__aeabi_dcmplt>
 800eabc:	b148      	cbz	r0, 800ead2 <_dtoa_r+0x162>
 800eabe:	4650      	mov	r0, sl
 800eac0:	f7f1 fd30 	bl	8000524 <__aeabi_i2d>
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	f7f1 fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 800eacc:	b908      	cbnz	r0, 800ead2 <_dtoa_r+0x162>
 800eace:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ead2:	f1ba 0f16 	cmp.w	sl, #22
 800ead6:	d859      	bhi.n	800eb8c <_dtoa_r+0x21c>
 800ead8:	4970      	ldr	r1, [pc, #448]	; (800ec9c <_dtoa_r+0x32c>)
 800eada:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800eade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eae6:	f7f2 f817 	bl	8000b18 <__aeabi_dcmpgt>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	d050      	beq.n	800eb90 <_dtoa_r+0x220>
 800eaee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eaf8:	1b5d      	subs	r5, r3, r5
 800eafa:	f1b5 0801 	subs.w	r8, r5, #1
 800eafe:	bf49      	itett	mi
 800eb00:	f1c5 0301 	rsbmi	r3, r5, #1
 800eb04:	2300      	movpl	r3, #0
 800eb06:	9305      	strmi	r3, [sp, #20]
 800eb08:	f04f 0800 	movmi.w	r8, #0
 800eb0c:	bf58      	it	pl
 800eb0e:	9305      	strpl	r3, [sp, #20]
 800eb10:	f1ba 0f00 	cmp.w	sl, #0
 800eb14:	db3e      	blt.n	800eb94 <_dtoa_r+0x224>
 800eb16:	2300      	movs	r3, #0
 800eb18:	44d0      	add	r8, sl
 800eb1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800eb1e:	9307      	str	r3, [sp, #28]
 800eb20:	9b06      	ldr	r3, [sp, #24]
 800eb22:	2b09      	cmp	r3, #9
 800eb24:	f200 8090 	bhi.w	800ec48 <_dtoa_r+0x2d8>
 800eb28:	2b05      	cmp	r3, #5
 800eb2a:	bfc4      	itt	gt
 800eb2c:	3b04      	subgt	r3, #4
 800eb2e:	9306      	strgt	r3, [sp, #24]
 800eb30:	9b06      	ldr	r3, [sp, #24]
 800eb32:	f1a3 0302 	sub.w	r3, r3, #2
 800eb36:	bfcc      	ite	gt
 800eb38:	2500      	movgt	r5, #0
 800eb3a:	2501      	movle	r5, #1
 800eb3c:	2b03      	cmp	r3, #3
 800eb3e:	f200 808f 	bhi.w	800ec60 <_dtoa_r+0x2f0>
 800eb42:	e8df f003 	tbb	[pc, r3]
 800eb46:	7f7d      	.short	0x7f7d
 800eb48:	7131      	.short	0x7131
 800eb4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800eb4e:	441d      	add	r5, r3
 800eb50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800eb54:	2820      	cmp	r0, #32
 800eb56:	dd13      	ble.n	800eb80 <_dtoa_r+0x210>
 800eb58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800eb5c:	9b00      	ldr	r3, [sp, #0]
 800eb5e:	fa08 f800 	lsl.w	r8, r8, r0
 800eb62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800eb66:	fa23 f000 	lsr.w	r0, r3, r0
 800eb6a:	ea48 0000 	orr.w	r0, r8, r0
 800eb6e:	f7f1 fcc9 	bl	8000504 <__aeabi_ui2d>
 800eb72:	2301      	movs	r3, #1
 800eb74:	4682      	mov	sl, r0
 800eb76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800eb7a:	3d01      	subs	r5, #1
 800eb7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800eb7e:	e772      	b.n	800ea66 <_dtoa_r+0xf6>
 800eb80:	9b00      	ldr	r3, [sp, #0]
 800eb82:	f1c0 0020 	rsb	r0, r0, #32
 800eb86:	fa03 f000 	lsl.w	r0, r3, r0
 800eb8a:	e7f0      	b.n	800eb6e <_dtoa_r+0x1fe>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e7b1      	b.n	800eaf4 <_dtoa_r+0x184>
 800eb90:	900f      	str	r0, [sp, #60]	; 0x3c
 800eb92:	e7b0      	b.n	800eaf6 <_dtoa_r+0x186>
 800eb94:	9b05      	ldr	r3, [sp, #20]
 800eb96:	eba3 030a 	sub.w	r3, r3, sl
 800eb9a:	9305      	str	r3, [sp, #20]
 800eb9c:	f1ca 0300 	rsb	r3, sl, #0
 800eba0:	9307      	str	r3, [sp, #28]
 800eba2:	2300      	movs	r3, #0
 800eba4:	930e      	str	r3, [sp, #56]	; 0x38
 800eba6:	e7bb      	b.n	800eb20 <_dtoa_r+0x1b0>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	930a      	str	r3, [sp, #40]	; 0x28
 800ebac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	dd59      	ble.n	800ec66 <_dtoa_r+0x2f6>
 800ebb2:	9302      	str	r3, [sp, #8]
 800ebb4:	4699      	mov	r9, r3
 800ebb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ebb8:	2200      	movs	r2, #0
 800ebba:	6072      	str	r2, [r6, #4]
 800ebbc:	2204      	movs	r2, #4
 800ebbe:	f102 0014 	add.w	r0, r2, #20
 800ebc2:	4298      	cmp	r0, r3
 800ebc4:	6871      	ldr	r1, [r6, #4]
 800ebc6:	d953      	bls.n	800ec70 <_dtoa_r+0x300>
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f001 f9bb 	bl	800ff44 <_Balloc>
 800ebce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebd0:	6030      	str	r0, [r6, #0]
 800ebd2:	f1b9 0f0e 	cmp.w	r9, #14
 800ebd6:	f8d3 b000 	ldr.w	fp, [r3]
 800ebda:	f200 80e6 	bhi.w	800edaa <_dtoa_r+0x43a>
 800ebde:	2d00      	cmp	r5, #0
 800ebe0:	f000 80e3 	beq.w	800edaa <_dtoa_r+0x43a>
 800ebe4:	ed9d 7b00 	vldr	d7, [sp]
 800ebe8:	f1ba 0f00 	cmp.w	sl, #0
 800ebec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ebf0:	dd74      	ble.n	800ecdc <_dtoa_r+0x36c>
 800ebf2:	4a2a      	ldr	r2, [pc, #168]	; (800ec9c <_dtoa_r+0x32c>)
 800ebf4:	f00a 030f 	and.w	r3, sl, #15
 800ebf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ebfc:	ed93 7b00 	vldr	d7, [r3]
 800ec00:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ec04:	06f0      	lsls	r0, r6, #27
 800ec06:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ec0a:	d565      	bpl.n	800ecd8 <_dtoa_r+0x368>
 800ec0c:	4b24      	ldr	r3, [pc, #144]	; (800eca0 <_dtoa_r+0x330>)
 800ec0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ec12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec16:	f7f1 fe19 	bl	800084c <__aeabi_ddiv>
 800ec1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec1e:	f006 060f 	and.w	r6, r6, #15
 800ec22:	2503      	movs	r5, #3
 800ec24:	4f1e      	ldr	r7, [pc, #120]	; (800eca0 <_dtoa_r+0x330>)
 800ec26:	e04c      	b.n	800ecc2 <_dtoa_r+0x352>
 800ec28:	2301      	movs	r3, #1
 800ec2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ec2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2e:	4453      	add	r3, sl
 800ec30:	f103 0901 	add.w	r9, r3, #1
 800ec34:	9302      	str	r3, [sp, #8]
 800ec36:	464b      	mov	r3, r9
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	bfb8      	it	lt
 800ec3c:	2301      	movlt	r3, #1
 800ec3e:	e7ba      	b.n	800ebb6 <_dtoa_r+0x246>
 800ec40:	2300      	movs	r3, #0
 800ec42:	e7b2      	b.n	800ebaa <_dtoa_r+0x23a>
 800ec44:	2300      	movs	r3, #0
 800ec46:	e7f0      	b.n	800ec2a <_dtoa_r+0x2ba>
 800ec48:	2501      	movs	r5, #1
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	9306      	str	r3, [sp, #24]
 800ec4e:	950a      	str	r5, [sp, #40]	; 0x28
 800ec50:	f04f 33ff 	mov.w	r3, #4294967295
 800ec54:	9302      	str	r3, [sp, #8]
 800ec56:	4699      	mov	r9, r3
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2312      	movs	r3, #18
 800ec5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ec5e:	e7aa      	b.n	800ebb6 <_dtoa_r+0x246>
 800ec60:	2301      	movs	r3, #1
 800ec62:	930a      	str	r3, [sp, #40]	; 0x28
 800ec64:	e7f4      	b.n	800ec50 <_dtoa_r+0x2e0>
 800ec66:	2301      	movs	r3, #1
 800ec68:	9302      	str	r3, [sp, #8]
 800ec6a:	4699      	mov	r9, r3
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	e7f5      	b.n	800ec5c <_dtoa_r+0x2ec>
 800ec70:	3101      	adds	r1, #1
 800ec72:	6071      	str	r1, [r6, #4]
 800ec74:	0052      	lsls	r2, r2, #1
 800ec76:	e7a2      	b.n	800ebbe <_dtoa_r+0x24e>
 800ec78:	636f4361 	.word	0x636f4361
 800ec7c:	3fd287a7 	.word	0x3fd287a7
 800ec80:	8b60c8b3 	.word	0x8b60c8b3
 800ec84:	3fc68a28 	.word	0x3fc68a28
 800ec88:	509f79fb 	.word	0x509f79fb
 800ec8c:	3fd34413 	.word	0x3fd34413
 800ec90:	7ff00000 	.word	0x7ff00000
 800ec94:	0801166d 	.word	0x0801166d
 800ec98:	3ff80000 	.word	0x3ff80000
 800ec9c:	08011790 	.word	0x08011790
 800eca0:	08011768 	.word	0x08011768
 800eca4:	080116f1 	.word	0x080116f1
 800eca8:	07f1      	lsls	r1, r6, #31
 800ecaa:	d508      	bpl.n	800ecbe <_dtoa_r+0x34e>
 800ecac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecb4:	f7f1 fca0 	bl	80005f8 <__aeabi_dmul>
 800ecb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ecbc:	3501      	adds	r5, #1
 800ecbe:	1076      	asrs	r6, r6, #1
 800ecc0:	3708      	adds	r7, #8
 800ecc2:	2e00      	cmp	r6, #0
 800ecc4:	d1f0      	bne.n	800eca8 <_dtoa_r+0x338>
 800ecc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ecca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecce:	f7f1 fdbd 	bl	800084c <__aeabi_ddiv>
 800ecd2:	e9cd 0100 	strd	r0, r1, [sp]
 800ecd6:	e01a      	b.n	800ed0e <_dtoa_r+0x39e>
 800ecd8:	2502      	movs	r5, #2
 800ecda:	e7a3      	b.n	800ec24 <_dtoa_r+0x2b4>
 800ecdc:	f000 80a0 	beq.w	800ee20 <_dtoa_r+0x4b0>
 800ece0:	f1ca 0600 	rsb	r6, sl, #0
 800ece4:	4b9f      	ldr	r3, [pc, #636]	; (800ef64 <_dtoa_r+0x5f4>)
 800ece6:	4fa0      	ldr	r7, [pc, #640]	; (800ef68 <_dtoa_r+0x5f8>)
 800ece8:	f006 020f 	and.w	r2, r6, #15
 800ecec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ecf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ecf8:	f7f1 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ecfc:	e9cd 0100 	strd	r0, r1, [sp]
 800ed00:	1136      	asrs	r6, r6, #4
 800ed02:	2300      	movs	r3, #0
 800ed04:	2502      	movs	r5, #2
 800ed06:	2e00      	cmp	r6, #0
 800ed08:	d17f      	bne.n	800ee0a <_dtoa_r+0x49a>
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1e1      	bne.n	800ecd2 <_dtoa_r+0x362>
 800ed0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	f000 8087 	beq.w	800ee24 <_dtoa_r+0x4b4>
 800ed16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	4b93      	ldr	r3, [pc, #588]	; (800ef6c <_dtoa_r+0x5fc>)
 800ed1e:	4630      	mov	r0, r6
 800ed20:	4639      	mov	r1, r7
 800ed22:	f7f1 fedb 	bl	8000adc <__aeabi_dcmplt>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d07c      	beq.n	800ee24 <_dtoa_r+0x4b4>
 800ed2a:	f1b9 0f00 	cmp.w	r9, #0
 800ed2e:	d079      	beq.n	800ee24 <_dtoa_r+0x4b4>
 800ed30:	9b02      	ldr	r3, [sp, #8]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	dd35      	ble.n	800eda2 <_dtoa_r+0x432>
 800ed36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ed3a:	9308      	str	r3, [sp, #32]
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	2200      	movs	r2, #0
 800ed40:	4b8b      	ldr	r3, [pc, #556]	; (800ef70 <_dtoa_r+0x600>)
 800ed42:	4630      	mov	r0, r6
 800ed44:	f7f1 fc58 	bl	80005f8 <__aeabi_dmul>
 800ed48:	e9cd 0100 	strd	r0, r1, [sp]
 800ed4c:	9f02      	ldr	r7, [sp, #8]
 800ed4e:	3501      	adds	r5, #1
 800ed50:	4628      	mov	r0, r5
 800ed52:	f7f1 fbe7 	bl	8000524 <__aeabi_i2d>
 800ed56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed5a:	f7f1 fc4d 	bl	80005f8 <__aeabi_dmul>
 800ed5e:	2200      	movs	r2, #0
 800ed60:	4b84      	ldr	r3, [pc, #528]	; (800ef74 <_dtoa_r+0x604>)
 800ed62:	f7f1 fa93 	bl	800028c <__adddf3>
 800ed66:	4605      	mov	r5, r0
 800ed68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ed6c:	2f00      	cmp	r7, #0
 800ed6e:	d15d      	bne.n	800ee2c <_dtoa_r+0x4bc>
 800ed70:	2200      	movs	r2, #0
 800ed72:	4b81      	ldr	r3, [pc, #516]	; (800ef78 <_dtoa_r+0x608>)
 800ed74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed78:	f7f1 fa86 	bl	8000288 <__aeabi_dsub>
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	4633      	mov	r3, r6
 800ed80:	e9cd 0100 	strd	r0, r1, [sp]
 800ed84:	f7f1 fec8 	bl	8000b18 <__aeabi_dcmpgt>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f040 8288 	bne.w	800f29e <_dtoa_r+0x92e>
 800ed8e:	462a      	mov	r2, r5
 800ed90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ed94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed98:	f7f1 fea0 	bl	8000adc <__aeabi_dcmplt>
 800ed9c:	2800      	cmp	r0, #0
 800ed9e:	f040 827c 	bne.w	800f29a <_dtoa_r+0x92a>
 800eda2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eda6:	e9cd 2300 	strd	r2, r3, [sp]
 800edaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800edac:	2b00      	cmp	r3, #0
 800edae:	f2c0 8150 	blt.w	800f052 <_dtoa_r+0x6e2>
 800edb2:	f1ba 0f0e 	cmp.w	sl, #14
 800edb6:	f300 814c 	bgt.w	800f052 <_dtoa_r+0x6e2>
 800edba:	4b6a      	ldr	r3, [pc, #424]	; (800ef64 <_dtoa_r+0x5f4>)
 800edbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800edc0:	ed93 7b00 	vldr	d7, [r3]
 800edc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800edcc:	f280 80d8 	bge.w	800ef80 <_dtoa_r+0x610>
 800edd0:	f1b9 0f00 	cmp.w	r9, #0
 800edd4:	f300 80d4 	bgt.w	800ef80 <_dtoa_r+0x610>
 800edd8:	f040 825e 	bne.w	800f298 <_dtoa_r+0x928>
 800eddc:	2200      	movs	r2, #0
 800edde:	4b66      	ldr	r3, [pc, #408]	; (800ef78 <_dtoa_r+0x608>)
 800ede0:	ec51 0b17 	vmov	r0, r1, d7
 800ede4:	f7f1 fc08 	bl	80005f8 <__aeabi_dmul>
 800ede8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edec:	f7f1 fe8a 	bl	8000b04 <__aeabi_dcmpge>
 800edf0:	464f      	mov	r7, r9
 800edf2:	464e      	mov	r6, r9
 800edf4:	2800      	cmp	r0, #0
 800edf6:	f040 8234 	bne.w	800f262 <_dtoa_r+0x8f2>
 800edfa:	2331      	movs	r3, #49	; 0x31
 800edfc:	f10b 0501 	add.w	r5, fp, #1
 800ee00:	f88b 3000 	strb.w	r3, [fp]
 800ee04:	f10a 0a01 	add.w	sl, sl, #1
 800ee08:	e22f      	b.n	800f26a <_dtoa_r+0x8fa>
 800ee0a:	07f2      	lsls	r2, r6, #31
 800ee0c:	d505      	bpl.n	800ee1a <_dtoa_r+0x4aa>
 800ee0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee12:	f7f1 fbf1 	bl	80005f8 <__aeabi_dmul>
 800ee16:	3501      	adds	r5, #1
 800ee18:	2301      	movs	r3, #1
 800ee1a:	1076      	asrs	r6, r6, #1
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	e772      	b.n	800ed06 <_dtoa_r+0x396>
 800ee20:	2502      	movs	r5, #2
 800ee22:	e774      	b.n	800ed0e <_dtoa_r+0x39e>
 800ee24:	f8cd a020 	str.w	sl, [sp, #32]
 800ee28:	464f      	mov	r7, r9
 800ee2a:	e791      	b.n	800ed50 <_dtoa_r+0x3e0>
 800ee2c:	4b4d      	ldr	r3, [pc, #308]	; (800ef64 <_dtoa_r+0x5f4>)
 800ee2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ee36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d047      	beq.n	800eecc <_dtoa_r+0x55c>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	460b      	mov	r3, r1
 800ee40:	2000      	movs	r0, #0
 800ee42:	494e      	ldr	r1, [pc, #312]	; (800ef7c <_dtoa_r+0x60c>)
 800ee44:	f7f1 fd02 	bl	800084c <__aeabi_ddiv>
 800ee48:	462a      	mov	r2, r5
 800ee4a:	4633      	mov	r3, r6
 800ee4c:	f7f1 fa1c 	bl	8000288 <__aeabi_dsub>
 800ee50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ee54:	465d      	mov	r5, fp
 800ee56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee5a:	f7f1 fe7d 	bl	8000b58 <__aeabi_d2iz>
 800ee5e:	4606      	mov	r6, r0
 800ee60:	f7f1 fb60 	bl	8000524 <__aeabi_i2d>
 800ee64:	4602      	mov	r2, r0
 800ee66:	460b      	mov	r3, r1
 800ee68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee6c:	f7f1 fa0c 	bl	8000288 <__aeabi_dsub>
 800ee70:	3630      	adds	r6, #48	; 0x30
 800ee72:	f805 6b01 	strb.w	r6, [r5], #1
 800ee76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ee7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ee7e:	f7f1 fe2d 	bl	8000adc <__aeabi_dcmplt>
 800ee82:	2800      	cmp	r0, #0
 800ee84:	d163      	bne.n	800ef4e <_dtoa_r+0x5de>
 800ee86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee8a:	2000      	movs	r0, #0
 800ee8c:	4937      	ldr	r1, [pc, #220]	; (800ef6c <_dtoa_r+0x5fc>)
 800ee8e:	f7f1 f9fb 	bl	8000288 <__aeabi_dsub>
 800ee92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ee96:	f7f1 fe21 	bl	8000adc <__aeabi_dcmplt>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	f040 80b7 	bne.w	800f00e <_dtoa_r+0x69e>
 800eea0:	eba5 030b 	sub.w	r3, r5, fp
 800eea4:	429f      	cmp	r7, r3
 800eea6:	f77f af7c 	ble.w	800eda2 <_dtoa_r+0x432>
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4b30      	ldr	r3, [pc, #192]	; (800ef70 <_dtoa_r+0x600>)
 800eeae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800eeb2:	f7f1 fba1 	bl	80005f8 <__aeabi_dmul>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eebc:	4b2c      	ldr	r3, [pc, #176]	; (800ef70 <_dtoa_r+0x600>)
 800eebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eec2:	f7f1 fb99 	bl	80005f8 <__aeabi_dmul>
 800eec6:	e9cd 0100 	strd	r0, r1, [sp]
 800eeca:	e7c4      	b.n	800ee56 <_dtoa_r+0x4e6>
 800eecc:	462a      	mov	r2, r5
 800eece:	4633      	mov	r3, r6
 800eed0:	f7f1 fb92 	bl	80005f8 <__aeabi_dmul>
 800eed4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eed8:	eb0b 0507 	add.w	r5, fp, r7
 800eedc:	465e      	mov	r6, fp
 800eede:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eee2:	f7f1 fe39 	bl	8000b58 <__aeabi_d2iz>
 800eee6:	4607      	mov	r7, r0
 800eee8:	f7f1 fb1c 	bl	8000524 <__aeabi_i2d>
 800eeec:	3730      	adds	r7, #48	; 0x30
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eef6:	f7f1 f9c7 	bl	8000288 <__aeabi_dsub>
 800eefa:	f806 7b01 	strb.w	r7, [r6], #1
 800eefe:	42ae      	cmp	r6, r5
 800ef00:	e9cd 0100 	strd	r0, r1, [sp]
 800ef04:	f04f 0200 	mov.w	r2, #0
 800ef08:	d126      	bne.n	800ef58 <_dtoa_r+0x5e8>
 800ef0a:	4b1c      	ldr	r3, [pc, #112]	; (800ef7c <_dtoa_r+0x60c>)
 800ef0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ef10:	f7f1 f9bc 	bl	800028c <__adddf3>
 800ef14:	4602      	mov	r2, r0
 800ef16:	460b      	mov	r3, r1
 800ef18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef1c:	f7f1 fdfc 	bl	8000b18 <__aeabi_dcmpgt>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d174      	bne.n	800f00e <_dtoa_r+0x69e>
 800ef24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ef28:	2000      	movs	r0, #0
 800ef2a:	4914      	ldr	r1, [pc, #80]	; (800ef7c <_dtoa_r+0x60c>)
 800ef2c:	f7f1 f9ac 	bl	8000288 <__aeabi_dsub>
 800ef30:	4602      	mov	r2, r0
 800ef32:	460b      	mov	r3, r1
 800ef34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef38:	f7f1 fdd0 	bl	8000adc <__aeabi_dcmplt>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f43f af30 	beq.w	800eda2 <_dtoa_r+0x432>
 800ef42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ef46:	2b30      	cmp	r3, #48	; 0x30
 800ef48:	f105 32ff 	add.w	r2, r5, #4294967295
 800ef4c:	d002      	beq.n	800ef54 <_dtoa_r+0x5e4>
 800ef4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ef52:	e04a      	b.n	800efea <_dtoa_r+0x67a>
 800ef54:	4615      	mov	r5, r2
 800ef56:	e7f4      	b.n	800ef42 <_dtoa_r+0x5d2>
 800ef58:	4b05      	ldr	r3, [pc, #20]	; (800ef70 <_dtoa_r+0x600>)
 800ef5a:	f7f1 fb4d 	bl	80005f8 <__aeabi_dmul>
 800ef5e:	e9cd 0100 	strd	r0, r1, [sp]
 800ef62:	e7bc      	b.n	800eede <_dtoa_r+0x56e>
 800ef64:	08011790 	.word	0x08011790
 800ef68:	08011768 	.word	0x08011768
 800ef6c:	3ff00000 	.word	0x3ff00000
 800ef70:	40240000 	.word	0x40240000
 800ef74:	401c0000 	.word	0x401c0000
 800ef78:	40140000 	.word	0x40140000
 800ef7c:	3fe00000 	.word	0x3fe00000
 800ef80:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ef84:	465d      	mov	r5, fp
 800ef86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	4639      	mov	r1, r7
 800ef8e:	f7f1 fc5d 	bl	800084c <__aeabi_ddiv>
 800ef92:	f7f1 fde1 	bl	8000b58 <__aeabi_d2iz>
 800ef96:	4680      	mov	r8, r0
 800ef98:	f7f1 fac4 	bl	8000524 <__aeabi_i2d>
 800ef9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efa0:	f7f1 fb2a 	bl	80005f8 <__aeabi_dmul>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4630      	mov	r0, r6
 800efaa:	4639      	mov	r1, r7
 800efac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800efb0:	f7f1 f96a 	bl	8000288 <__aeabi_dsub>
 800efb4:	f805 6b01 	strb.w	r6, [r5], #1
 800efb8:	eba5 060b 	sub.w	r6, r5, fp
 800efbc:	45b1      	cmp	r9, r6
 800efbe:	4602      	mov	r2, r0
 800efc0:	460b      	mov	r3, r1
 800efc2:	d139      	bne.n	800f038 <_dtoa_r+0x6c8>
 800efc4:	f7f1 f962 	bl	800028c <__adddf3>
 800efc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efcc:	4606      	mov	r6, r0
 800efce:	460f      	mov	r7, r1
 800efd0:	f7f1 fda2 	bl	8000b18 <__aeabi_dcmpgt>
 800efd4:	b9c8      	cbnz	r0, 800f00a <_dtoa_r+0x69a>
 800efd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efda:	4630      	mov	r0, r6
 800efdc:	4639      	mov	r1, r7
 800efde:	f7f1 fd73 	bl	8000ac8 <__aeabi_dcmpeq>
 800efe2:	b110      	cbz	r0, 800efea <_dtoa_r+0x67a>
 800efe4:	f018 0f01 	tst.w	r8, #1
 800efe8:	d10f      	bne.n	800f00a <_dtoa_r+0x69a>
 800efea:	9904      	ldr	r1, [sp, #16]
 800efec:	4620      	mov	r0, r4
 800efee:	f000 ffdd 	bl	800ffac <_Bfree>
 800eff2:	2300      	movs	r3, #0
 800eff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eff6:	702b      	strb	r3, [r5, #0]
 800eff8:	f10a 0301 	add.w	r3, sl, #1
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f000:	2b00      	cmp	r3, #0
 800f002:	f000 8241 	beq.w	800f488 <_dtoa_r+0xb18>
 800f006:	601d      	str	r5, [r3, #0]
 800f008:	e23e      	b.n	800f488 <_dtoa_r+0xb18>
 800f00a:	f8cd a020 	str.w	sl, [sp, #32]
 800f00e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f012:	2a39      	cmp	r2, #57	; 0x39
 800f014:	f105 33ff 	add.w	r3, r5, #4294967295
 800f018:	d108      	bne.n	800f02c <_dtoa_r+0x6bc>
 800f01a:	459b      	cmp	fp, r3
 800f01c:	d10a      	bne.n	800f034 <_dtoa_r+0x6c4>
 800f01e:	9b08      	ldr	r3, [sp, #32]
 800f020:	3301      	adds	r3, #1
 800f022:	9308      	str	r3, [sp, #32]
 800f024:	2330      	movs	r3, #48	; 0x30
 800f026:	f88b 3000 	strb.w	r3, [fp]
 800f02a:	465b      	mov	r3, fp
 800f02c:	781a      	ldrb	r2, [r3, #0]
 800f02e:	3201      	adds	r2, #1
 800f030:	701a      	strb	r2, [r3, #0]
 800f032:	e78c      	b.n	800ef4e <_dtoa_r+0x5de>
 800f034:	461d      	mov	r5, r3
 800f036:	e7ea      	b.n	800f00e <_dtoa_r+0x69e>
 800f038:	2200      	movs	r2, #0
 800f03a:	4b9b      	ldr	r3, [pc, #620]	; (800f2a8 <_dtoa_r+0x938>)
 800f03c:	f7f1 fadc 	bl	80005f8 <__aeabi_dmul>
 800f040:	2200      	movs	r2, #0
 800f042:	2300      	movs	r3, #0
 800f044:	4606      	mov	r6, r0
 800f046:	460f      	mov	r7, r1
 800f048:	f7f1 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f04c:	2800      	cmp	r0, #0
 800f04e:	d09a      	beq.n	800ef86 <_dtoa_r+0x616>
 800f050:	e7cb      	b.n	800efea <_dtoa_r+0x67a>
 800f052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f054:	2a00      	cmp	r2, #0
 800f056:	f000 808b 	beq.w	800f170 <_dtoa_r+0x800>
 800f05a:	9a06      	ldr	r2, [sp, #24]
 800f05c:	2a01      	cmp	r2, #1
 800f05e:	dc6e      	bgt.n	800f13e <_dtoa_r+0x7ce>
 800f060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f062:	2a00      	cmp	r2, #0
 800f064:	d067      	beq.n	800f136 <_dtoa_r+0x7c6>
 800f066:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f06a:	9f07      	ldr	r7, [sp, #28]
 800f06c:	9d05      	ldr	r5, [sp, #20]
 800f06e:	9a05      	ldr	r2, [sp, #20]
 800f070:	2101      	movs	r1, #1
 800f072:	441a      	add	r2, r3
 800f074:	4620      	mov	r0, r4
 800f076:	9205      	str	r2, [sp, #20]
 800f078:	4498      	add	r8, r3
 800f07a:	f001 f875 	bl	8010168 <__i2b>
 800f07e:	4606      	mov	r6, r0
 800f080:	2d00      	cmp	r5, #0
 800f082:	dd0c      	ble.n	800f09e <_dtoa_r+0x72e>
 800f084:	f1b8 0f00 	cmp.w	r8, #0
 800f088:	dd09      	ble.n	800f09e <_dtoa_r+0x72e>
 800f08a:	4545      	cmp	r5, r8
 800f08c:	9a05      	ldr	r2, [sp, #20]
 800f08e:	462b      	mov	r3, r5
 800f090:	bfa8      	it	ge
 800f092:	4643      	movge	r3, r8
 800f094:	1ad2      	subs	r2, r2, r3
 800f096:	9205      	str	r2, [sp, #20]
 800f098:	1aed      	subs	r5, r5, r3
 800f09a:	eba8 0803 	sub.w	r8, r8, r3
 800f09e:	9b07      	ldr	r3, [sp, #28]
 800f0a0:	b1eb      	cbz	r3, 800f0de <_dtoa_r+0x76e>
 800f0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d067      	beq.n	800f178 <_dtoa_r+0x808>
 800f0a8:	b18f      	cbz	r7, 800f0ce <_dtoa_r+0x75e>
 800f0aa:	4631      	mov	r1, r6
 800f0ac:	463a      	mov	r2, r7
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f001 f8fa 	bl	80102a8 <__pow5mult>
 800f0b4:	9a04      	ldr	r2, [sp, #16]
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	4606      	mov	r6, r0
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f001 f85d 	bl	801017a <__multiply>
 800f0c0:	9904      	ldr	r1, [sp, #16]
 800f0c2:	9008      	str	r0, [sp, #32]
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f000 ff71 	bl	800ffac <_Bfree>
 800f0ca:	9b08      	ldr	r3, [sp, #32]
 800f0cc:	9304      	str	r3, [sp, #16]
 800f0ce:	9b07      	ldr	r3, [sp, #28]
 800f0d0:	1bda      	subs	r2, r3, r7
 800f0d2:	d004      	beq.n	800f0de <_dtoa_r+0x76e>
 800f0d4:	9904      	ldr	r1, [sp, #16]
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f001 f8e6 	bl	80102a8 <__pow5mult>
 800f0dc:	9004      	str	r0, [sp, #16]
 800f0de:	2101      	movs	r1, #1
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f001 f841 	bl	8010168 <__i2b>
 800f0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f0e8:	4607      	mov	r7, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f000 81d0 	beq.w	800f490 <_dtoa_r+0xb20>
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f001 f8d7 	bl	80102a8 <__pow5mult>
 800f0fa:	9b06      	ldr	r3, [sp, #24]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	4607      	mov	r7, r0
 800f100:	dc40      	bgt.n	800f184 <_dtoa_r+0x814>
 800f102:	9b00      	ldr	r3, [sp, #0]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d139      	bne.n	800f17c <_dtoa_r+0x80c>
 800f108:	9b01      	ldr	r3, [sp, #4]
 800f10a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d136      	bne.n	800f180 <_dtoa_r+0x810>
 800f112:	9b01      	ldr	r3, [sp, #4]
 800f114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f118:	0d1b      	lsrs	r3, r3, #20
 800f11a:	051b      	lsls	r3, r3, #20
 800f11c:	b12b      	cbz	r3, 800f12a <_dtoa_r+0x7ba>
 800f11e:	9b05      	ldr	r3, [sp, #20]
 800f120:	3301      	adds	r3, #1
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	f108 0801 	add.w	r8, r8, #1
 800f128:	2301      	movs	r3, #1
 800f12a:	9307      	str	r3, [sp, #28]
 800f12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d12a      	bne.n	800f188 <_dtoa_r+0x818>
 800f132:	2001      	movs	r0, #1
 800f134:	e030      	b.n	800f198 <_dtoa_r+0x828>
 800f136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f138:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f13c:	e795      	b.n	800f06a <_dtoa_r+0x6fa>
 800f13e:	9b07      	ldr	r3, [sp, #28]
 800f140:	f109 37ff 	add.w	r7, r9, #4294967295
 800f144:	42bb      	cmp	r3, r7
 800f146:	bfbf      	itttt	lt
 800f148:	9b07      	ldrlt	r3, [sp, #28]
 800f14a:	9707      	strlt	r7, [sp, #28]
 800f14c:	1afa      	sublt	r2, r7, r3
 800f14e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f150:	bfbb      	ittet	lt
 800f152:	189b      	addlt	r3, r3, r2
 800f154:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f156:	1bdf      	subge	r7, r3, r7
 800f158:	2700      	movlt	r7, #0
 800f15a:	f1b9 0f00 	cmp.w	r9, #0
 800f15e:	bfb5      	itete	lt
 800f160:	9b05      	ldrlt	r3, [sp, #20]
 800f162:	9d05      	ldrge	r5, [sp, #20]
 800f164:	eba3 0509 	sublt.w	r5, r3, r9
 800f168:	464b      	movge	r3, r9
 800f16a:	bfb8      	it	lt
 800f16c:	2300      	movlt	r3, #0
 800f16e:	e77e      	b.n	800f06e <_dtoa_r+0x6fe>
 800f170:	9f07      	ldr	r7, [sp, #28]
 800f172:	9d05      	ldr	r5, [sp, #20]
 800f174:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f176:	e783      	b.n	800f080 <_dtoa_r+0x710>
 800f178:	9a07      	ldr	r2, [sp, #28]
 800f17a:	e7ab      	b.n	800f0d4 <_dtoa_r+0x764>
 800f17c:	2300      	movs	r3, #0
 800f17e:	e7d4      	b.n	800f12a <_dtoa_r+0x7ba>
 800f180:	9b00      	ldr	r3, [sp, #0]
 800f182:	e7d2      	b.n	800f12a <_dtoa_r+0x7ba>
 800f184:	2300      	movs	r3, #0
 800f186:	9307      	str	r3, [sp, #28]
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f18e:	6918      	ldr	r0, [r3, #16]
 800f190:	f000 ff9c 	bl	80100cc <__hi0bits>
 800f194:	f1c0 0020 	rsb	r0, r0, #32
 800f198:	4440      	add	r0, r8
 800f19a:	f010 001f 	ands.w	r0, r0, #31
 800f19e:	d047      	beq.n	800f230 <_dtoa_r+0x8c0>
 800f1a0:	f1c0 0320 	rsb	r3, r0, #32
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	dd3b      	ble.n	800f220 <_dtoa_r+0x8b0>
 800f1a8:	9b05      	ldr	r3, [sp, #20]
 800f1aa:	f1c0 001c 	rsb	r0, r0, #28
 800f1ae:	4403      	add	r3, r0
 800f1b0:	9305      	str	r3, [sp, #20]
 800f1b2:	4405      	add	r5, r0
 800f1b4:	4480      	add	r8, r0
 800f1b6:	9b05      	ldr	r3, [sp, #20]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	dd05      	ble.n	800f1c8 <_dtoa_r+0x858>
 800f1bc:	461a      	mov	r2, r3
 800f1be:	9904      	ldr	r1, [sp, #16]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f001 f8bf 	bl	8010344 <__lshift>
 800f1c6:	9004      	str	r0, [sp, #16]
 800f1c8:	f1b8 0f00 	cmp.w	r8, #0
 800f1cc:	dd05      	ble.n	800f1da <_dtoa_r+0x86a>
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	4642      	mov	r2, r8
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f001 f8b6 	bl	8010344 <__lshift>
 800f1d8:	4607      	mov	r7, r0
 800f1da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1dc:	b353      	cbz	r3, 800f234 <_dtoa_r+0x8c4>
 800f1de:	4639      	mov	r1, r7
 800f1e0:	9804      	ldr	r0, [sp, #16]
 800f1e2:	f001 f903 	bl	80103ec <__mcmp>
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	da24      	bge.n	800f234 <_dtoa_r+0x8c4>
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	220a      	movs	r2, #10
 800f1ee:	9904      	ldr	r1, [sp, #16]
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fef2 	bl	800ffda <__multadd>
 800f1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1f8:	9004      	str	r0, [sp, #16]
 800f1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f000 814d 	beq.w	800f49e <_dtoa_r+0xb2e>
 800f204:	2300      	movs	r3, #0
 800f206:	4631      	mov	r1, r6
 800f208:	220a      	movs	r2, #10
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 fee5 	bl	800ffda <__multadd>
 800f210:	9b02      	ldr	r3, [sp, #8]
 800f212:	2b00      	cmp	r3, #0
 800f214:	4606      	mov	r6, r0
 800f216:	dc4f      	bgt.n	800f2b8 <_dtoa_r+0x948>
 800f218:	9b06      	ldr	r3, [sp, #24]
 800f21a:	2b02      	cmp	r3, #2
 800f21c:	dd4c      	ble.n	800f2b8 <_dtoa_r+0x948>
 800f21e:	e011      	b.n	800f244 <_dtoa_r+0x8d4>
 800f220:	d0c9      	beq.n	800f1b6 <_dtoa_r+0x846>
 800f222:	9a05      	ldr	r2, [sp, #20]
 800f224:	331c      	adds	r3, #28
 800f226:	441a      	add	r2, r3
 800f228:	9205      	str	r2, [sp, #20]
 800f22a:	441d      	add	r5, r3
 800f22c:	4498      	add	r8, r3
 800f22e:	e7c2      	b.n	800f1b6 <_dtoa_r+0x846>
 800f230:	4603      	mov	r3, r0
 800f232:	e7f6      	b.n	800f222 <_dtoa_r+0x8b2>
 800f234:	f1b9 0f00 	cmp.w	r9, #0
 800f238:	dc38      	bgt.n	800f2ac <_dtoa_r+0x93c>
 800f23a:	9b06      	ldr	r3, [sp, #24]
 800f23c:	2b02      	cmp	r3, #2
 800f23e:	dd35      	ble.n	800f2ac <_dtoa_r+0x93c>
 800f240:	f8cd 9008 	str.w	r9, [sp, #8]
 800f244:	9b02      	ldr	r3, [sp, #8]
 800f246:	b963      	cbnz	r3, 800f262 <_dtoa_r+0x8f2>
 800f248:	4639      	mov	r1, r7
 800f24a:	2205      	movs	r2, #5
 800f24c:	4620      	mov	r0, r4
 800f24e:	f000 fec4 	bl	800ffda <__multadd>
 800f252:	4601      	mov	r1, r0
 800f254:	4607      	mov	r7, r0
 800f256:	9804      	ldr	r0, [sp, #16]
 800f258:	f001 f8c8 	bl	80103ec <__mcmp>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	f73f adcc 	bgt.w	800edfa <_dtoa_r+0x48a>
 800f262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f264:	465d      	mov	r5, fp
 800f266:	ea6f 0a03 	mvn.w	sl, r3
 800f26a:	f04f 0900 	mov.w	r9, #0
 800f26e:	4639      	mov	r1, r7
 800f270:	4620      	mov	r0, r4
 800f272:	f000 fe9b 	bl	800ffac <_Bfree>
 800f276:	2e00      	cmp	r6, #0
 800f278:	f43f aeb7 	beq.w	800efea <_dtoa_r+0x67a>
 800f27c:	f1b9 0f00 	cmp.w	r9, #0
 800f280:	d005      	beq.n	800f28e <_dtoa_r+0x91e>
 800f282:	45b1      	cmp	r9, r6
 800f284:	d003      	beq.n	800f28e <_dtoa_r+0x91e>
 800f286:	4649      	mov	r1, r9
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fe8f 	bl	800ffac <_Bfree>
 800f28e:	4631      	mov	r1, r6
 800f290:	4620      	mov	r0, r4
 800f292:	f000 fe8b 	bl	800ffac <_Bfree>
 800f296:	e6a8      	b.n	800efea <_dtoa_r+0x67a>
 800f298:	2700      	movs	r7, #0
 800f29a:	463e      	mov	r6, r7
 800f29c:	e7e1      	b.n	800f262 <_dtoa_r+0x8f2>
 800f29e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f2a2:	463e      	mov	r6, r7
 800f2a4:	e5a9      	b.n	800edfa <_dtoa_r+0x48a>
 800f2a6:	bf00      	nop
 800f2a8:	40240000 	.word	0x40240000
 800f2ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 80fa 	beq.w	800f4ac <_dtoa_r+0xb3c>
 800f2b8:	2d00      	cmp	r5, #0
 800f2ba:	dd05      	ble.n	800f2c8 <_dtoa_r+0x958>
 800f2bc:	4631      	mov	r1, r6
 800f2be:	462a      	mov	r2, r5
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f001 f83f 	bl	8010344 <__lshift>
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	9b07      	ldr	r3, [sp, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d04c      	beq.n	800f368 <_dtoa_r+0x9f8>
 800f2ce:	6871      	ldr	r1, [r6, #4]
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fe37 	bl	800ff44 <_Balloc>
 800f2d6:	6932      	ldr	r2, [r6, #16]
 800f2d8:	3202      	adds	r2, #2
 800f2da:	4605      	mov	r5, r0
 800f2dc:	0092      	lsls	r2, r2, #2
 800f2de:	f106 010c 	add.w	r1, r6, #12
 800f2e2:	300c      	adds	r0, #12
 800f2e4:	f7fd fc52 	bl	800cb8c <memcpy>
 800f2e8:	2201      	movs	r2, #1
 800f2ea:	4629      	mov	r1, r5
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	f001 f829 	bl	8010344 <__lshift>
 800f2f2:	9b00      	ldr	r3, [sp, #0]
 800f2f4:	f8cd b014 	str.w	fp, [sp, #20]
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	46b1      	mov	r9, r6
 800f2fe:	9307      	str	r3, [sp, #28]
 800f300:	4606      	mov	r6, r0
 800f302:	4639      	mov	r1, r7
 800f304:	9804      	ldr	r0, [sp, #16]
 800f306:	f7ff faa5 	bl	800e854 <quorem>
 800f30a:	4649      	mov	r1, r9
 800f30c:	4605      	mov	r5, r0
 800f30e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f312:	9804      	ldr	r0, [sp, #16]
 800f314:	f001 f86a 	bl	80103ec <__mcmp>
 800f318:	4632      	mov	r2, r6
 800f31a:	9000      	str	r0, [sp, #0]
 800f31c:	4639      	mov	r1, r7
 800f31e:	4620      	mov	r0, r4
 800f320:	f001 f87e 	bl	8010420 <__mdiff>
 800f324:	68c3      	ldr	r3, [r0, #12]
 800f326:	4602      	mov	r2, r0
 800f328:	bb03      	cbnz	r3, 800f36c <_dtoa_r+0x9fc>
 800f32a:	4601      	mov	r1, r0
 800f32c:	9008      	str	r0, [sp, #32]
 800f32e:	9804      	ldr	r0, [sp, #16]
 800f330:	f001 f85c 	bl	80103ec <__mcmp>
 800f334:	9a08      	ldr	r2, [sp, #32]
 800f336:	4603      	mov	r3, r0
 800f338:	4611      	mov	r1, r2
 800f33a:	4620      	mov	r0, r4
 800f33c:	9308      	str	r3, [sp, #32]
 800f33e:	f000 fe35 	bl	800ffac <_Bfree>
 800f342:	9b08      	ldr	r3, [sp, #32]
 800f344:	b9a3      	cbnz	r3, 800f370 <_dtoa_r+0xa00>
 800f346:	9a06      	ldr	r2, [sp, #24]
 800f348:	b992      	cbnz	r2, 800f370 <_dtoa_r+0xa00>
 800f34a:	9a07      	ldr	r2, [sp, #28]
 800f34c:	b982      	cbnz	r2, 800f370 <_dtoa_r+0xa00>
 800f34e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f352:	d029      	beq.n	800f3a8 <_dtoa_r+0xa38>
 800f354:	9b00      	ldr	r3, [sp, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	dd01      	ble.n	800f35e <_dtoa_r+0x9ee>
 800f35a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f35e:	9b05      	ldr	r3, [sp, #20]
 800f360:	1c5d      	adds	r5, r3, #1
 800f362:	f883 8000 	strb.w	r8, [r3]
 800f366:	e782      	b.n	800f26e <_dtoa_r+0x8fe>
 800f368:	4630      	mov	r0, r6
 800f36a:	e7c2      	b.n	800f2f2 <_dtoa_r+0x982>
 800f36c:	2301      	movs	r3, #1
 800f36e:	e7e3      	b.n	800f338 <_dtoa_r+0x9c8>
 800f370:	9a00      	ldr	r2, [sp, #0]
 800f372:	2a00      	cmp	r2, #0
 800f374:	db04      	blt.n	800f380 <_dtoa_r+0xa10>
 800f376:	d125      	bne.n	800f3c4 <_dtoa_r+0xa54>
 800f378:	9a06      	ldr	r2, [sp, #24]
 800f37a:	bb1a      	cbnz	r2, 800f3c4 <_dtoa_r+0xa54>
 800f37c:	9a07      	ldr	r2, [sp, #28]
 800f37e:	bb0a      	cbnz	r2, 800f3c4 <_dtoa_r+0xa54>
 800f380:	2b00      	cmp	r3, #0
 800f382:	ddec      	ble.n	800f35e <_dtoa_r+0x9ee>
 800f384:	2201      	movs	r2, #1
 800f386:	9904      	ldr	r1, [sp, #16]
 800f388:	4620      	mov	r0, r4
 800f38a:	f000 ffdb 	bl	8010344 <__lshift>
 800f38e:	4639      	mov	r1, r7
 800f390:	9004      	str	r0, [sp, #16]
 800f392:	f001 f82b 	bl	80103ec <__mcmp>
 800f396:	2800      	cmp	r0, #0
 800f398:	dc03      	bgt.n	800f3a2 <_dtoa_r+0xa32>
 800f39a:	d1e0      	bne.n	800f35e <_dtoa_r+0x9ee>
 800f39c:	f018 0f01 	tst.w	r8, #1
 800f3a0:	d0dd      	beq.n	800f35e <_dtoa_r+0x9ee>
 800f3a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f3a6:	d1d8      	bne.n	800f35a <_dtoa_r+0x9ea>
 800f3a8:	9b05      	ldr	r3, [sp, #20]
 800f3aa:	9a05      	ldr	r2, [sp, #20]
 800f3ac:	1c5d      	adds	r5, r3, #1
 800f3ae:	2339      	movs	r3, #57	; 0x39
 800f3b0:	7013      	strb	r3, [r2, #0]
 800f3b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3b6:	2b39      	cmp	r3, #57	; 0x39
 800f3b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800f3bc:	d04f      	beq.n	800f45e <_dtoa_r+0xaee>
 800f3be:	3301      	adds	r3, #1
 800f3c0:	7013      	strb	r3, [r2, #0]
 800f3c2:	e754      	b.n	800f26e <_dtoa_r+0x8fe>
 800f3c4:	9a05      	ldr	r2, [sp, #20]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f102 0501 	add.w	r5, r2, #1
 800f3cc:	dd06      	ble.n	800f3dc <_dtoa_r+0xa6c>
 800f3ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f3d2:	d0e9      	beq.n	800f3a8 <_dtoa_r+0xa38>
 800f3d4:	f108 0801 	add.w	r8, r8, #1
 800f3d8:	9b05      	ldr	r3, [sp, #20]
 800f3da:	e7c2      	b.n	800f362 <_dtoa_r+0x9f2>
 800f3dc:	9a02      	ldr	r2, [sp, #8]
 800f3de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f3e2:	eba5 030b 	sub.w	r3, r5, fp
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	d021      	beq.n	800f42e <_dtoa_r+0xabe>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	220a      	movs	r2, #10
 800f3ee:	9904      	ldr	r1, [sp, #16]
 800f3f0:	4620      	mov	r0, r4
 800f3f2:	f000 fdf2 	bl	800ffda <__multadd>
 800f3f6:	45b1      	cmp	r9, r6
 800f3f8:	9004      	str	r0, [sp, #16]
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	f04f 020a 	mov.w	r2, #10
 800f402:	4649      	mov	r1, r9
 800f404:	4620      	mov	r0, r4
 800f406:	d105      	bne.n	800f414 <_dtoa_r+0xaa4>
 800f408:	f000 fde7 	bl	800ffda <__multadd>
 800f40c:	4681      	mov	r9, r0
 800f40e:	4606      	mov	r6, r0
 800f410:	9505      	str	r5, [sp, #20]
 800f412:	e776      	b.n	800f302 <_dtoa_r+0x992>
 800f414:	f000 fde1 	bl	800ffda <__multadd>
 800f418:	4631      	mov	r1, r6
 800f41a:	4681      	mov	r9, r0
 800f41c:	2300      	movs	r3, #0
 800f41e:	220a      	movs	r2, #10
 800f420:	4620      	mov	r0, r4
 800f422:	f000 fdda 	bl	800ffda <__multadd>
 800f426:	4606      	mov	r6, r0
 800f428:	e7f2      	b.n	800f410 <_dtoa_r+0xaa0>
 800f42a:	f04f 0900 	mov.w	r9, #0
 800f42e:	2201      	movs	r2, #1
 800f430:	9904      	ldr	r1, [sp, #16]
 800f432:	4620      	mov	r0, r4
 800f434:	f000 ff86 	bl	8010344 <__lshift>
 800f438:	4639      	mov	r1, r7
 800f43a:	9004      	str	r0, [sp, #16]
 800f43c:	f000 ffd6 	bl	80103ec <__mcmp>
 800f440:	2800      	cmp	r0, #0
 800f442:	dcb6      	bgt.n	800f3b2 <_dtoa_r+0xa42>
 800f444:	d102      	bne.n	800f44c <_dtoa_r+0xadc>
 800f446:	f018 0f01 	tst.w	r8, #1
 800f44a:	d1b2      	bne.n	800f3b2 <_dtoa_r+0xa42>
 800f44c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f450:	2b30      	cmp	r3, #48	; 0x30
 800f452:	f105 32ff 	add.w	r2, r5, #4294967295
 800f456:	f47f af0a 	bne.w	800f26e <_dtoa_r+0x8fe>
 800f45a:	4615      	mov	r5, r2
 800f45c:	e7f6      	b.n	800f44c <_dtoa_r+0xadc>
 800f45e:	4593      	cmp	fp, r2
 800f460:	d105      	bne.n	800f46e <_dtoa_r+0xafe>
 800f462:	2331      	movs	r3, #49	; 0x31
 800f464:	f10a 0a01 	add.w	sl, sl, #1
 800f468:	f88b 3000 	strb.w	r3, [fp]
 800f46c:	e6ff      	b.n	800f26e <_dtoa_r+0x8fe>
 800f46e:	4615      	mov	r5, r2
 800f470:	e79f      	b.n	800f3b2 <_dtoa_r+0xa42>
 800f472:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f4d8 <_dtoa_r+0xb68>
 800f476:	e007      	b.n	800f488 <_dtoa_r+0xb18>
 800f478:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f47a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f4dc <_dtoa_r+0xb6c>
 800f47e:	b11b      	cbz	r3, 800f488 <_dtoa_r+0xb18>
 800f480:	f10b 0308 	add.w	r3, fp, #8
 800f484:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f486:	6013      	str	r3, [r2, #0]
 800f488:	4658      	mov	r0, fp
 800f48a:	b017      	add	sp, #92	; 0x5c
 800f48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f490:	9b06      	ldr	r3, [sp, #24]
 800f492:	2b01      	cmp	r3, #1
 800f494:	f77f ae35 	ble.w	800f102 <_dtoa_r+0x792>
 800f498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f49a:	9307      	str	r3, [sp, #28]
 800f49c:	e649      	b.n	800f132 <_dtoa_r+0x7c2>
 800f49e:	9b02      	ldr	r3, [sp, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	dc03      	bgt.n	800f4ac <_dtoa_r+0xb3c>
 800f4a4:	9b06      	ldr	r3, [sp, #24]
 800f4a6:	2b02      	cmp	r3, #2
 800f4a8:	f73f aecc 	bgt.w	800f244 <_dtoa_r+0x8d4>
 800f4ac:	465d      	mov	r5, fp
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	9804      	ldr	r0, [sp, #16]
 800f4b2:	f7ff f9cf 	bl	800e854 <quorem>
 800f4b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f4ba:	f805 8b01 	strb.w	r8, [r5], #1
 800f4be:	9a02      	ldr	r2, [sp, #8]
 800f4c0:	eba5 030b 	sub.w	r3, r5, fp
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	ddb0      	ble.n	800f42a <_dtoa_r+0xaba>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	9904      	ldr	r1, [sp, #16]
 800f4ce:	4620      	mov	r0, r4
 800f4d0:	f000 fd83 	bl	800ffda <__multadd>
 800f4d4:	9004      	str	r0, [sp, #16]
 800f4d6:	e7ea      	b.n	800f4ae <_dtoa_r+0xb3e>
 800f4d8:	0801166c 	.word	0x0801166c
 800f4dc:	080116e8 	.word	0x080116e8

0800f4e0 <__sflush_r>:
 800f4e0:	898a      	ldrh	r2, [r1, #12]
 800f4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4e6:	4605      	mov	r5, r0
 800f4e8:	0710      	lsls	r0, r2, #28
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	d458      	bmi.n	800f5a0 <__sflush_r+0xc0>
 800f4ee:	684b      	ldr	r3, [r1, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	dc05      	bgt.n	800f500 <__sflush_r+0x20>
 800f4f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	dc02      	bgt.n	800f500 <__sflush_r+0x20>
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f502:	2e00      	cmp	r6, #0
 800f504:	d0f9      	beq.n	800f4fa <__sflush_r+0x1a>
 800f506:	2300      	movs	r3, #0
 800f508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f50c:	682f      	ldr	r7, [r5, #0]
 800f50e:	6a21      	ldr	r1, [r4, #32]
 800f510:	602b      	str	r3, [r5, #0]
 800f512:	d032      	beq.n	800f57a <__sflush_r+0x9a>
 800f514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	075a      	lsls	r2, r3, #29
 800f51a:	d505      	bpl.n	800f528 <__sflush_r+0x48>
 800f51c:	6863      	ldr	r3, [r4, #4]
 800f51e:	1ac0      	subs	r0, r0, r3
 800f520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f522:	b10b      	cbz	r3, 800f528 <__sflush_r+0x48>
 800f524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f526:	1ac0      	subs	r0, r0, r3
 800f528:	2300      	movs	r3, #0
 800f52a:	4602      	mov	r2, r0
 800f52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f52e:	6a21      	ldr	r1, [r4, #32]
 800f530:	4628      	mov	r0, r5
 800f532:	47b0      	blx	r6
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	d106      	bne.n	800f548 <__sflush_r+0x68>
 800f53a:	6829      	ldr	r1, [r5, #0]
 800f53c:	291d      	cmp	r1, #29
 800f53e:	d848      	bhi.n	800f5d2 <__sflush_r+0xf2>
 800f540:	4a29      	ldr	r2, [pc, #164]	; (800f5e8 <__sflush_r+0x108>)
 800f542:	40ca      	lsrs	r2, r1
 800f544:	07d6      	lsls	r6, r2, #31
 800f546:	d544      	bpl.n	800f5d2 <__sflush_r+0xf2>
 800f548:	2200      	movs	r2, #0
 800f54a:	6062      	str	r2, [r4, #4]
 800f54c:	04d9      	lsls	r1, r3, #19
 800f54e:	6922      	ldr	r2, [r4, #16]
 800f550:	6022      	str	r2, [r4, #0]
 800f552:	d504      	bpl.n	800f55e <__sflush_r+0x7e>
 800f554:	1c42      	adds	r2, r0, #1
 800f556:	d101      	bne.n	800f55c <__sflush_r+0x7c>
 800f558:	682b      	ldr	r3, [r5, #0]
 800f55a:	b903      	cbnz	r3, 800f55e <__sflush_r+0x7e>
 800f55c:	6560      	str	r0, [r4, #84]	; 0x54
 800f55e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f560:	602f      	str	r7, [r5, #0]
 800f562:	2900      	cmp	r1, #0
 800f564:	d0c9      	beq.n	800f4fa <__sflush_r+0x1a>
 800f566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f56a:	4299      	cmp	r1, r3
 800f56c:	d002      	beq.n	800f574 <__sflush_r+0x94>
 800f56e:	4628      	mov	r0, r5
 800f570:	f001 f8f6 	bl	8010760 <_free_r>
 800f574:	2000      	movs	r0, #0
 800f576:	6360      	str	r0, [r4, #52]	; 0x34
 800f578:	e7c0      	b.n	800f4fc <__sflush_r+0x1c>
 800f57a:	2301      	movs	r3, #1
 800f57c:	4628      	mov	r0, r5
 800f57e:	47b0      	blx	r6
 800f580:	1c41      	adds	r1, r0, #1
 800f582:	d1c8      	bne.n	800f516 <__sflush_r+0x36>
 800f584:	682b      	ldr	r3, [r5, #0]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d0c5      	beq.n	800f516 <__sflush_r+0x36>
 800f58a:	2b1d      	cmp	r3, #29
 800f58c:	d001      	beq.n	800f592 <__sflush_r+0xb2>
 800f58e:	2b16      	cmp	r3, #22
 800f590:	d101      	bne.n	800f596 <__sflush_r+0xb6>
 800f592:	602f      	str	r7, [r5, #0]
 800f594:	e7b1      	b.n	800f4fa <__sflush_r+0x1a>
 800f596:	89a3      	ldrh	r3, [r4, #12]
 800f598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f59c:	81a3      	strh	r3, [r4, #12]
 800f59e:	e7ad      	b.n	800f4fc <__sflush_r+0x1c>
 800f5a0:	690f      	ldr	r7, [r1, #16]
 800f5a2:	2f00      	cmp	r7, #0
 800f5a4:	d0a9      	beq.n	800f4fa <__sflush_r+0x1a>
 800f5a6:	0793      	lsls	r3, r2, #30
 800f5a8:	680e      	ldr	r6, [r1, #0]
 800f5aa:	bf08      	it	eq
 800f5ac:	694b      	ldreq	r3, [r1, #20]
 800f5ae:	600f      	str	r7, [r1, #0]
 800f5b0:	bf18      	it	ne
 800f5b2:	2300      	movne	r3, #0
 800f5b4:	eba6 0807 	sub.w	r8, r6, r7
 800f5b8:	608b      	str	r3, [r1, #8]
 800f5ba:	f1b8 0f00 	cmp.w	r8, #0
 800f5be:	dd9c      	ble.n	800f4fa <__sflush_r+0x1a>
 800f5c0:	4643      	mov	r3, r8
 800f5c2:	463a      	mov	r2, r7
 800f5c4:	6a21      	ldr	r1, [r4, #32]
 800f5c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	47b0      	blx	r6
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	dc06      	bgt.n	800f5de <__sflush_r+0xfe>
 800f5d0:	89a3      	ldrh	r3, [r4, #12]
 800f5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5d6:	81a3      	strh	r3, [r4, #12]
 800f5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5dc:	e78e      	b.n	800f4fc <__sflush_r+0x1c>
 800f5de:	4407      	add	r7, r0
 800f5e0:	eba8 0800 	sub.w	r8, r8, r0
 800f5e4:	e7e9      	b.n	800f5ba <__sflush_r+0xda>
 800f5e6:	bf00      	nop
 800f5e8:	20400001 	.word	0x20400001

0800f5ec <_fflush_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	690b      	ldr	r3, [r1, #16]
 800f5f0:	4605      	mov	r5, r0
 800f5f2:	460c      	mov	r4, r1
 800f5f4:	b1db      	cbz	r3, 800f62e <_fflush_r+0x42>
 800f5f6:	b118      	cbz	r0, 800f600 <_fflush_r+0x14>
 800f5f8:	6983      	ldr	r3, [r0, #24]
 800f5fa:	b90b      	cbnz	r3, 800f600 <_fflush_r+0x14>
 800f5fc:	f000 f860 	bl	800f6c0 <__sinit>
 800f600:	4b0c      	ldr	r3, [pc, #48]	; (800f634 <_fflush_r+0x48>)
 800f602:	429c      	cmp	r4, r3
 800f604:	d109      	bne.n	800f61a <_fflush_r+0x2e>
 800f606:	686c      	ldr	r4, [r5, #4]
 800f608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f60c:	b17b      	cbz	r3, 800f62e <_fflush_r+0x42>
 800f60e:	4621      	mov	r1, r4
 800f610:	4628      	mov	r0, r5
 800f612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f616:	f7ff bf63 	b.w	800f4e0 <__sflush_r>
 800f61a:	4b07      	ldr	r3, [pc, #28]	; (800f638 <_fflush_r+0x4c>)
 800f61c:	429c      	cmp	r4, r3
 800f61e:	d101      	bne.n	800f624 <_fflush_r+0x38>
 800f620:	68ac      	ldr	r4, [r5, #8]
 800f622:	e7f1      	b.n	800f608 <_fflush_r+0x1c>
 800f624:	4b05      	ldr	r3, [pc, #20]	; (800f63c <_fflush_r+0x50>)
 800f626:	429c      	cmp	r4, r3
 800f628:	bf08      	it	eq
 800f62a:	68ec      	ldreq	r4, [r5, #12]
 800f62c:	e7ec      	b.n	800f608 <_fflush_r+0x1c>
 800f62e:	2000      	movs	r0, #0
 800f630:	bd38      	pop	{r3, r4, r5, pc}
 800f632:	bf00      	nop
 800f634:	08011718 	.word	0x08011718
 800f638:	08011738 	.word	0x08011738
 800f63c:	080116f8 	.word	0x080116f8

0800f640 <std>:
 800f640:	2300      	movs	r3, #0
 800f642:	b510      	push	{r4, lr}
 800f644:	4604      	mov	r4, r0
 800f646:	e9c0 3300 	strd	r3, r3, [r0]
 800f64a:	6083      	str	r3, [r0, #8]
 800f64c:	8181      	strh	r1, [r0, #12]
 800f64e:	6643      	str	r3, [r0, #100]	; 0x64
 800f650:	81c2      	strh	r2, [r0, #14]
 800f652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f656:	6183      	str	r3, [r0, #24]
 800f658:	4619      	mov	r1, r3
 800f65a:	2208      	movs	r2, #8
 800f65c:	305c      	adds	r0, #92	; 0x5c
 800f65e:	f7fd faa0 	bl	800cba2 <memset>
 800f662:	4b05      	ldr	r3, [pc, #20]	; (800f678 <std+0x38>)
 800f664:	6263      	str	r3, [r4, #36]	; 0x24
 800f666:	4b05      	ldr	r3, [pc, #20]	; (800f67c <std+0x3c>)
 800f668:	62a3      	str	r3, [r4, #40]	; 0x28
 800f66a:	4b05      	ldr	r3, [pc, #20]	; (800f680 <std+0x40>)
 800f66c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f66e:	4b05      	ldr	r3, [pc, #20]	; (800f684 <std+0x44>)
 800f670:	6224      	str	r4, [r4, #32]
 800f672:	6323      	str	r3, [r4, #48]	; 0x30
 800f674:	bd10      	pop	{r4, pc}
 800f676:	bf00      	nop
 800f678:	08010df5 	.word	0x08010df5
 800f67c:	08010e17 	.word	0x08010e17
 800f680:	08010e4f 	.word	0x08010e4f
 800f684:	08010e73 	.word	0x08010e73

0800f688 <_cleanup_r>:
 800f688:	4901      	ldr	r1, [pc, #4]	; (800f690 <_cleanup_r+0x8>)
 800f68a:	f000 b885 	b.w	800f798 <_fwalk_reent>
 800f68e:	bf00      	nop
 800f690:	0800f5ed 	.word	0x0800f5ed

0800f694 <__sfmoreglue>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	1e4a      	subs	r2, r1, #1
 800f698:	2568      	movs	r5, #104	; 0x68
 800f69a:	4355      	muls	r5, r2
 800f69c:	460e      	mov	r6, r1
 800f69e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6a2:	f001 f8ab 	bl	80107fc <_malloc_r>
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	b140      	cbz	r0, 800f6bc <__sfmoreglue+0x28>
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	e9c0 1600 	strd	r1, r6, [r0]
 800f6b0:	300c      	adds	r0, #12
 800f6b2:	60a0      	str	r0, [r4, #8]
 800f6b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6b8:	f7fd fa73 	bl	800cba2 <memset>
 800f6bc:	4620      	mov	r0, r4
 800f6be:	bd70      	pop	{r4, r5, r6, pc}

0800f6c0 <__sinit>:
 800f6c0:	6983      	ldr	r3, [r0, #24]
 800f6c2:	b510      	push	{r4, lr}
 800f6c4:	4604      	mov	r4, r0
 800f6c6:	bb33      	cbnz	r3, 800f716 <__sinit+0x56>
 800f6c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f6cc:	6503      	str	r3, [r0, #80]	; 0x50
 800f6ce:	4b12      	ldr	r3, [pc, #72]	; (800f718 <__sinit+0x58>)
 800f6d0:	4a12      	ldr	r2, [pc, #72]	; (800f71c <__sinit+0x5c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	6282      	str	r2, [r0, #40]	; 0x28
 800f6d6:	4298      	cmp	r0, r3
 800f6d8:	bf04      	itt	eq
 800f6da:	2301      	moveq	r3, #1
 800f6dc:	6183      	streq	r3, [r0, #24]
 800f6de:	f000 f81f 	bl	800f720 <__sfp>
 800f6e2:	6060      	str	r0, [r4, #4]
 800f6e4:	4620      	mov	r0, r4
 800f6e6:	f000 f81b 	bl	800f720 <__sfp>
 800f6ea:	60a0      	str	r0, [r4, #8]
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f000 f817 	bl	800f720 <__sfp>
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	60e0      	str	r0, [r4, #12]
 800f6f6:	2104      	movs	r1, #4
 800f6f8:	6860      	ldr	r0, [r4, #4]
 800f6fa:	f7ff ffa1 	bl	800f640 <std>
 800f6fe:	2201      	movs	r2, #1
 800f700:	2109      	movs	r1, #9
 800f702:	68a0      	ldr	r0, [r4, #8]
 800f704:	f7ff ff9c 	bl	800f640 <std>
 800f708:	2202      	movs	r2, #2
 800f70a:	2112      	movs	r1, #18
 800f70c:	68e0      	ldr	r0, [r4, #12]
 800f70e:	f7ff ff97 	bl	800f640 <std>
 800f712:	2301      	movs	r3, #1
 800f714:	61a3      	str	r3, [r4, #24]
 800f716:	bd10      	pop	{r4, pc}
 800f718:	08011658 	.word	0x08011658
 800f71c:	0800f689 	.word	0x0800f689

0800f720 <__sfp>:
 800f720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f722:	4b1b      	ldr	r3, [pc, #108]	; (800f790 <__sfp+0x70>)
 800f724:	681e      	ldr	r6, [r3, #0]
 800f726:	69b3      	ldr	r3, [r6, #24]
 800f728:	4607      	mov	r7, r0
 800f72a:	b913      	cbnz	r3, 800f732 <__sfp+0x12>
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7ff ffc7 	bl	800f6c0 <__sinit>
 800f732:	3648      	adds	r6, #72	; 0x48
 800f734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f738:	3b01      	subs	r3, #1
 800f73a:	d503      	bpl.n	800f744 <__sfp+0x24>
 800f73c:	6833      	ldr	r3, [r6, #0]
 800f73e:	b133      	cbz	r3, 800f74e <__sfp+0x2e>
 800f740:	6836      	ldr	r6, [r6, #0]
 800f742:	e7f7      	b.n	800f734 <__sfp+0x14>
 800f744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f748:	b16d      	cbz	r5, 800f766 <__sfp+0x46>
 800f74a:	3468      	adds	r4, #104	; 0x68
 800f74c:	e7f4      	b.n	800f738 <__sfp+0x18>
 800f74e:	2104      	movs	r1, #4
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff ff9f 	bl	800f694 <__sfmoreglue>
 800f756:	6030      	str	r0, [r6, #0]
 800f758:	2800      	cmp	r0, #0
 800f75a:	d1f1      	bne.n	800f740 <__sfp+0x20>
 800f75c:	230c      	movs	r3, #12
 800f75e:	603b      	str	r3, [r7, #0]
 800f760:	4604      	mov	r4, r0
 800f762:	4620      	mov	r0, r4
 800f764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f766:	4b0b      	ldr	r3, [pc, #44]	; (800f794 <__sfp+0x74>)
 800f768:	6665      	str	r5, [r4, #100]	; 0x64
 800f76a:	e9c4 5500 	strd	r5, r5, [r4]
 800f76e:	60a5      	str	r5, [r4, #8]
 800f770:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f774:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f778:	2208      	movs	r2, #8
 800f77a:	4629      	mov	r1, r5
 800f77c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f780:	f7fd fa0f 	bl	800cba2 <memset>
 800f784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f78c:	e7e9      	b.n	800f762 <__sfp+0x42>
 800f78e:	bf00      	nop
 800f790:	08011658 	.word	0x08011658
 800f794:	ffff0001 	.word	0xffff0001

0800f798 <_fwalk_reent>:
 800f798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f79c:	4680      	mov	r8, r0
 800f79e:	4689      	mov	r9, r1
 800f7a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	b914      	cbnz	r4, 800f7ae <_fwalk_reent+0x16>
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f7b2:	3f01      	subs	r7, #1
 800f7b4:	d501      	bpl.n	800f7ba <_fwalk_reent+0x22>
 800f7b6:	6824      	ldr	r4, [r4, #0]
 800f7b8:	e7f5      	b.n	800f7a6 <_fwalk_reent+0xe>
 800f7ba:	89ab      	ldrh	r3, [r5, #12]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d907      	bls.n	800f7d0 <_fwalk_reent+0x38>
 800f7c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	d003      	beq.n	800f7d0 <_fwalk_reent+0x38>
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	4640      	mov	r0, r8
 800f7cc:	47c8      	blx	r9
 800f7ce:	4306      	orrs	r6, r0
 800f7d0:	3568      	adds	r5, #104	; 0x68
 800f7d2:	e7ee      	b.n	800f7b2 <_fwalk_reent+0x1a>

0800f7d4 <rshift>:
 800f7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7d6:	6906      	ldr	r6, [r0, #16]
 800f7d8:	114b      	asrs	r3, r1, #5
 800f7da:	429e      	cmp	r6, r3
 800f7dc:	f100 0414 	add.w	r4, r0, #20
 800f7e0:	dd30      	ble.n	800f844 <rshift+0x70>
 800f7e2:	f011 011f 	ands.w	r1, r1, #31
 800f7e6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f7ea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f7ee:	d108      	bne.n	800f802 <rshift+0x2e>
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	42b2      	cmp	r2, r6
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	d211      	bcs.n	800f81c <rshift+0x48>
 800f7f8:	f852 3b04 	ldr.w	r3, [r2], #4
 800f7fc:	f841 3b04 	str.w	r3, [r1], #4
 800f800:	e7f7      	b.n	800f7f2 <rshift+0x1e>
 800f802:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f806:	f1c1 0c20 	rsb	ip, r1, #32
 800f80a:	40cd      	lsrs	r5, r1
 800f80c:	3204      	adds	r2, #4
 800f80e:	4623      	mov	r3, r4
 800f810:	42b2      	cmp	r2, r6
 800f812:	4617      	mov	r7, r2
 800f814:	d30c      	bcc.n	800f830 <rshift+0x5c>
 800f816:	601d      	str	r5, [r3, #0]
 800f818:	b105      	cbz	r5, 800f81c <rshift+0x48>
 800f81a:	3304      	adds	r3, #4
 800f81c:	1b1a      	subs	r2, r3, r4
 800f81e:	42a3      	cmp	r3, r4
 800f820:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f824:	bf08      	it	eq
 800f826:	2300      	moveq	r3, #0
 800f828:	6102      	str	r2, [r0, #16]
 800f82a:	bf08      	it	eq
 800f82c:	6143      	streq	r3, [r0, #20]
 800f82e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f830:	683f      	ldr	r7, [r7, #0]
 800f832:	fa07 f70c 	lsl.w	r7, r7, ip
 800f836:	433d      	orrs	r5, r7
 800f838:	f843 5b04 	str.w	r5, [r3], #4
 800f83c:	f852 5b04 	ldr.w	r5, [r2], #4
 800f840:	40cd      	lsrs	r5, r1
 800f842:	e7e5      	b.n	800f810 <rshift+0x3c>
 800f844:	4623      	mov	r3, r4
 800f846:	e7e9      	b.n	800f81c <rshift+0x48>

0800f848 <__hexdig_fun>:
 800f848:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f84c:	2b09      	cmp	r3, #9
 800f84e:	d802      	bhi.n	800f856 <__hexdig_fun+0xe>
 800f850:	3820      	subs	r0, #32
 800f852:	b2c0      	uxtb	r0, r0
 800f854:	4770      	bx	lr
 800f856:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f85a:	2b05      	cmp	r3, #5
 800f85c:	d801      	bhi.n	800f862 <__hexdig_fun+0x1a>
 800f85e:	3847      	subs	r0, #71	; 0x47
 800f860:	e7f7      	b.n	800f852 <__hexdig_fun+0xa>
 800f862:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f866:	2b05      	cmp	r3, #5
 800f868:	d801      	bhi.n	800f86e <__hexdig_fun+0x26>
 800f86a:	3827      	subs	r0, #39	; 0x27
 800f86c:	e7f1      	b.n	800f852 <__hexdig_fun+0xa>
 800f86e:	2000      	movs	r0, #0
 800f870:	4770      	bx	lr

0800f872 <__gethex>:
 800f872:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f876:	b08b      	sub	sp, #44	; 0x2c
 800f878:	468a      	mov	sl, r1
 800f87a:	9002      	str	r0, [sp, #8]
 800f87c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f87e:	9306      	str	r3, [sp, #24]
 800f880:	4690      	mov	r8, r2
 800f882:	f000 fad0 	bl	800fe26 <__localeconv_l>
 800f886:	6803      	ldr	r3, [r0, #0]
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7f0 fca0 	bl	80001d0 <strlen>
 800f890:	9b03      	ldr	r3, [sp, #12]
 800f892:	9001      	str	r0, [sp, #4]
 800f894:	4403      	add	r3, r0
 800f896:	f04f 0b00 	mov.w	fp, #0
 800f89a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f89e:	9307      	str	r3, [sp, #28]
 800f8a0:	f8da 3000 	ldr.w	r3, [sl]
 800f8a4:	3302      	adds	r3, #2
 800f8a6:	461f      	mov	r7, r3
 800f8a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f8ac:	2830      	cmp	r0, #48	; 0x30
 800f8ae:	d06c      	beq.n	800f98a <__gethex+0x118>
 800f8b0:	f7ff ffca 	bl	800f848 <__hexdig_fun>
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	d16a      	bne.n	800f990 <__gethex+0x11e>
 800f8ba:	9a01      	ldr	r2, [sp, #4]
 800f8bc:	9903      	ldr	r1, [sp, #12]
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f001 fadb 	bl	8010e7a <strncmp>
 800f8c4:	2800      	cmp	r0, #0
 800f8c6:	d166      	bne.n	800f996 <__gethex+0x124>
 800f8c8:	9b01      	ldr	r3, [sp, #4]
 800f8ca:	5cf8      	ldrb	r0, [r7, r3]
 800f8cc:	18fe      	adds	r6, r7, r3
 800f8ce:	f7ff ffbb 	bl	800f848 <__hexdig_fun>
 800f8d2:	2800      	cmp	r0, #0
 800f8d4:	d062      	beq.n	800f99c <__gethex+0x12a>
 800f8d6:	4633      	mov	r3, r6
 800f8d8:	7818      	ldrb	r0, [r3, #0]
 800f8da:	2830      	cmp	r0, #48	; 0x30
 800f8dc:	461f      	mov	r7, r3
 800f8de:	f103 0301 	add.w	r3, r3, #1
 800f8e2:	d0f9      	beq.n	800f8d8 <__gethex+0x66>
 800f8e4:	f7ff ffb0 	bl	800f848 <__hexdig_fun>
 800f8e8:	fab0 f580 	clz	r5, r0
 800f8ec:	096d      	lsrs	r5, r5, #5
 800f8ee:	4634      	mov	r4, r6
 800f8f0:	f04f 0b01 	mov.w	fp, #1
 800f8f4:	463a      	mov	r2, r7
 800f8f6:	4616      	mov	r6, r2
 800f8f8:	3201      	adds	r2, #1
 800f8fa:	7830      	ldrb	r0, [r6, #0]
 800f8fc:	f7ff ffa4 	bl	800f848 <__hexdig_fun>
 800f900:	2800      	cmp	r0, #0
 800f902:	d1f8      	bne.n	800f8f6 <__gethex+0x84>
 800f904:	9a01      	ldr	r2, [sp, #4]
 800f906:	9903      	ldr	r1, [sp, #12]
 800f908:	4630      	mov	r0, r6
 800f90a:	f001 fab6 	bl	8010e7a <strncmp>
 800f90e:	b950      	cbnz	r0, 800f926 <__gethex+0xb4>
 800f910:	b954      	cbnz	r4, 800f928 <__gethex+0xb6>
 800f912:	9b01      	ldr	r3, [sp, #4]
 800f914:	18f4      	adds	r4, r6, r3
 800f916:	4622      	mov	r2, r4
 800f918:	4616      	mov	r6, r2
 800f91a:	3201      	adds	r2, #1
 800f91c:	7830      	ldrb	r0, [r6, #0]
 800f91e:	f7ff ff93 	bl	800f848 <__hexdig_fun>
 800f922:	2800      	cmp	r0, #0
 800f924:	d1f8      	bne.n	800f918 <__gethex+0xa6>
 800f926:	b10c      	cbz	r4, 800f92c <__gethex+0xba>
 800f928:	1ba4      	subs	r4, r4, r6
 800f92a:	00a4      	lsls	r4, r4, #2
 800f92c:	7833      	ldrb	r3, [r6, #0]
 800f92e:	2b50      	cmp	r3, #80	; 0x50
 800f930:	d001      	beq.n	800f936 <__gethex+0xc4>
 800f932:	2b70      	cmp	r3, #112	; 0x70
 800f934:	d140      	bne.n	800f9b8 <__gethex+0x146>
 800f936:	7873      	ldrb	r3, [r6, #1]
 800f938:	2b2b      	cmp	r3, #43	; 0x2b
 800f93a:	d031      	beq.n	800f9a0 <__gethex+0x12e>
 800f93c:	2b2d      	cmp	r3, #45	; 0x2d
 800f93e:	d033      	beq.n	800f9a8 <__gethex+0x136>
 800f940:	1c71      	adds	r1, r6, #1
 800f942:	f04f 0900 	mov.w	r9, #0
 800f946:	7808      	ldrb	r0, [r1, #0]
 800f948:	f7ff ff7e 	bl	800f848 <__hexdig_fun>
 800f94c:	1e43      	subs	r3, r0, #1
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b18      	cmp	r3, #24
 800f952:	d831      	bhi.n	800f9b8 <__gethex+0x146>
 800f954:	f1a0 0210 	sub.w	r2, r0, #16
 800f958:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f95c:	f7ff ff74 	bl	800f848 <__hexdig_fun>
 800f960:	1e43      	subs	r3, r0, #1
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b18      	cmp	r3, #24
 800f966:	d922      	bls.n	800f9ae <__gethex+0x13c>
 800f968:	f1b9 0f00 	cmp.w	r9, #0
 800f96c:	d000      	beq.n	800f970 <__gethex+0xfe>
 800f96e:	4252      	negs	r2, r2
 800f970:	4414      	add	r4, r2
 800f972:	f8ca 1000 	str.w	r1, [sl]
 800f976:	b30d      	cbz	r5, 800f9bc <__gethex+0x14a>
 800f978:	f1bb 0f00 	cmp.w	fp, #0
 800f97c:	bf0c      	ite	eq
 800f97e:	2706      	moveq	r7, #6
 800f980:	2700      	movne	r7, #0
 800f982:	4638      	mov	r0, r7
 800f984:	b00b      	add	sp, #44	; 0x2c
 800f986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98a:	f10b 0b01 	add.w	fp, fp, #1
 800f98e:	e78a      	b.n	800f8a6 <__gethex+0x34>
 800f990:	2500      	movs	r5, #0
 800f992:	462c      	mov	r4, r5
 800f994:	e7ae      	b.n	800f8f4 <__gethex+0x82>
 800f996:	463e      	mov	r6, r7
 800f998:	2501      	movs	r5, #1
 800f99a:	e7c7      	b.n	800f92c <__gethex+0xba>
 800f99c:	4604      	mov	r4, r0
 800f99e:	e7fb      	b.n	800f998 <__gethex+0x126>
 800f9a0:	f04f 0900 	mov.w	r9, #0
 800f9a4:	1cb1      	adds	r1, r6, #2
 800f9a6:	e7ce      	b.n	800f946 <__gethex+0xd4>
 800f9a8:	f04f 0901 	mov.w	r9, #1
 800f9ac:	e7fa      	b.n	800f9a4 <__gethex+0x132>
 800f9ae:	230a      	movs	r3, #10
 800f9b0:	fb03 0202 	mla	r2, r3, r2, r0
 800f9b4:	3a10      	subs	r2, #16
 800f9b6:	e7cf      	b.n	800f958 <__gethex+0xe6>
 800f9b8:	4631      	mov	r1, r6
 800f9ba:	e7da      	b.n	800f972 <__gethex+0x100>
 800f9bc:	1bf3      	subs	r3, r6, r7
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	4629      	mov	r1, r5
 800f9c2:	2b07      	cmp	r3, #7
 800f9c4:	dc49      	bgt.n	800fa5a <__gethex+0x1e8>
 800f9c6:	9802      	ldr	r0, [sp, #8]
 800f9c8:	f000 fabc 	bl	800ff44 <_Balloc>
 800f9cc:	9b01      	ldr	r3, [sp, #4]
 800f9ce:	f100 0914 	add.w	r9, r0, #20
 800f9d2:	f04f 0b00 	mov.w	fp, #0
 800f9d6:	f1c3 0301 	rsb	r3, r3, #1
 800f9da:	4605      	mov	r5, r0
 800f9dc:	f8cd 9010 	str.w	r9, [sp, #16]
 800f9e0:	46da      	mov	sl, fp
 800f9e2:	9308      	str	r3, [sp, #32]
 800f9e4:	42b7      	cmp	r7, r6
 800f9e6:	d33b      	bcc.n	800fa60 <__gethex+0x1ee>
 800f9e8:	9804      	ldr	r0, [sp, #16]
 800f9ea:	f840 ab04 	str.w	sl, [r0], #4
 800f9ee:	eba0 0009 	sub.w	r0, r0, r9
 800f9f2:	1080      	asrs	r0, r0, #2
 800f9f4:	6128      	str	r0, [r5, #16]
 800f9f6:	0147      	lsls	r7, r0, #5
 800f9f8:	4650      	mov	r0, sl
 800f9fa:	f000 fb67 	bl	80100cc <__hi0bits>
 800f9fe:	f8d8 6000 	ldr.w	r6, [r8]
 800fa02:	1a3f      	subs	r7, r7, r0
 800fa04:	42b7      	cmp	r7, r6
 800fa06:	dd64      	ble.n	800fad2 <__gethex+0x260>
 800fa08:	1bbf      	subs	r7, r7, r6
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	f000 fe77 	bl	8010700 <__any_on>
 800fa12:	4682      	mov	sl, r0
 800fa14:	b178      	cbz	r0, 800fa36 <__gethex+0x1c4>
 800fa16:	1e7b      	subs	r3, r7, #1
 800fa18:	1159      	asrs	r1, r3, #5
 800fa1a:	f003 021f 	and.w	r2, r3, #31
 800fa1e:	f04f 0a01 	mov.w	sl, #1
 800fa22:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fa26:	fa0a f202 	lsl.w	r2, sl, r2
 800fa2a:	420a      	tst	r2, r1
 800fa2c:	d003      	beq.n	800fa36 <__gethex+0x1c4>
 800fa2e:	4553      	cmp	r3, sl
 800fa30:	dc46      	bgt.n	800fac0 <__gethex+0x24e>
 800fa32:	f04f 0a02 	mov.w	sl, #2
 800fa36:	4639      	mov	r1, r7
 800fa38:	4628      	mov	r0, r5
 800fa3a:	f7ff fecb 	bl	800f7d4 <rshift>
 800fa3e:	443c      	add	r4, r7
 800fa40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa44:	42a3      	cmp	r3, r4
 800fa46:	da52      	bge.n	800faee <__gethex+0x27c>
 800fa48:	4629      	mov	r1, r5
 800fa4a:	9802      	ldr	r0, [sp, #8]
 800fa4c:	f000 faae 	bl	800ffac <_Bfree>
 800fa50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa52:	2300      	movs	r3, #0
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	27a3      	movs	r7, #163	; 0xa3
 800fa58:	e793      	b.n	800f982 <__gethex+0x110>
 800fa5a:	3101      	adds	r1, #1
 800fa5c:	105b      	asrs	r3, r3, #1
 800fa5e:	e7b0      	b.n	800f9c2 <__gethex+0x150>
 800fa60:	1e73      	subs	r3, r6, #1
 800fa62:	9305      	str	r3, [sp, #20]
 800fa64:	9a07      	ldr	r2, [sp, #28]
 800fa66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d018      	beq.n	800faa0 <__gethex+0x22e>
 800fa6e:	f1bb 0f20 	cmp.w	fp, #32
 800fa72:	d107      	bne.n	800fa84 <__gethex+0x212>
 800fa74:	9b04      	ldr	r3, [sp, #16]
 800fa76:	f8c3 a000 	str.w	sl, [r3]
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	f04f 0a00 	mov.w	sl, #0
 800fa80:	9304      	str	r3, [sp, #16]
 800fa82:	46d3      	mov	fp, sl
 800fa84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fa88:	f7ff fede 	bl	800f848 <__hexdig_fun>
 800fa8c:	f000 000f 	and.w	r0, r0, #15
 800fa90:	fa00 f00b 	lsl.w	r0, r0, fp
 800fa94:	ea4a 0a00 	orr.w	sl, sl, r0
 800fa98:	f10b 0b04 	add.w	fp, fp, #4
 800fa9c:	9b05      	ldr	r3, [sp, #20]
 800fa9e:	e00d      	b.n	800fabc <__gethex+0x24a>
 800faa0:	9b05      	ldr	r3, [sp, #20]
 800faa2:	9a08      	ldr	r2, [sp, #32]
 800faa4:	4413      	add	r3, r2
 800faa6:	42bb      	cmp	r3, r7
 800faa8:	d3e1      	bcc.n	800fa6e <__gethex+0x1fc>
 800faaa:	4618      	mov	r0, r3
 800faac:	9a01      	ldr	r2, [sp, #4]
 800faae:	9903      	ldr	r1, [sp, #12]
 800fab0:	9309      	str	r3, [sp, #36]	; 0x24
 800fab2:	f001 f9e2 	bl	8010e7a <strncmp>
 800fab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fab8:	2800      	cmp	r0, #0
 800faba:	d1d8      	bne.n	800fa6e <__gethex+0x1fc>
 800fabc:	461e      	mov	r6, r3
 800fabe:	e791      	b.n	800f9e4 <__gethex+0x172>
 800fac0:	1eb9      	subs	r1, r7, #2
 800fac2:	4628      	mov	r0, r5
 800fac4:	f000 fe1c 	bl	8010700 <__any_on>
 800fac8:	2800      	cmp	r0, #0
 800faca:	d0b2      	beq.n	800fa32 <__gethex+0x1c0>
 800facc:	f04f 0a03 	mov.w	sl, #3
 800fad0:	e7b1      	b.n	800fa36 <__gethex+0x1c4>
 800fad2:	da09      	bge.n	800fae8 <__gethex+0x276>
 800fad4:	1bf7      	subs	r7, r6, r7
 800fad6:	4629      	mov	r1, r5
 800fad8:	463a      	mov	r2, r7
 800fada:	9802      	ldr	r0, [sp, #8]
 800fadc:	f000 fc32 	bl	8010344 <__lshift>
 800fae0:	1be4      	subs	r4, r4, r7
 800fae2:	4605      	mov	r5, r0
 800fae4:	f100 0914 	add.w	r9, r0, #20
 800fae8:	f04f 0a00 	mov.w	sl, #0
 800faec:	e7a8      	b.n	800fa40 <__gethex+0x1ce>
 800faee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800faf2:	42a0      	cmp	r0, r4
 800faf4:	dd6a      	ble.n	800fbcc <__gethex+0x35a>
 800faf6:	1b04      	subs	r4, r0, r4
 800faf8:	42a6      	cmp	r6, r4
 800fafa:	dc2e      	bgt.n	800fb5a <__gethex+0x2e8>
 800fafc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	d022      	beq.n	800fb4a <__gethex+0x2d8>
 800fb04:	2b03      	cmp	r3, #3
 800fb06:	d024      	beq.n	800fb52 <__gethex+0x2e0>
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d115      	bne.n	800fb38 <__gethex+0x2c6>
 800fb0c:	42a6      	cmp	r6, r4
 800fb0e:	d113      	bne.n	800fb38 <__gethex+0x2c6>
 800fb10:	2e01      	cmp	r6, #1
 800fb12:	dc0b      	bgt.n	800fb2c <__gethex+0x2ba>
 800fb14:	9a06      	ldr	r2, [sp, #24]
 800fb16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	612b      	str	r3, [r5, #16]
 800fb20:	f8c9 3000 	str.w	r3, [r9]
 800fb24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fb26:	2762      	movs	r7, #98	; 0x62
 800fb28:	601d      	str	r5, [r3, #0]
 800fb2a:	e72a      	b.n	800f982 <__gethex+0x110>
 800fb2c:	1e71      	subs	r1, r6, #1
 800fb2e:	4628      	mov	r0, r5
 800fb30:	f000 fde6 	bl	8010700 <__any_on>
 800fb34:	2800      	cmp	r0, #0
 800fb36:	d1ed      	bne.n	800fb14 <__gethex+0x2a2>
 800fb38:	4629      	mov	r1, r5
 800fb3a:	9802      	ldr	r0, [sp, #8]
 800fb3c:	f000 fa36 	bl	800ffac <_Bfree>
 800fb40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb42:	2300      	movs	r3, #0
 800fb44:	6013      	str	r3, [r2, #0]
 800fb46:	2750      	movs	r7, #80	; 0x50
 800fb48:	e71b      	b.n	800f982 <__gethex+0x110>
 800fb4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d0e1      	beq.n	800fb14 <__gethex+0x2a2>
 800fb50:	e7f2      	b.n	800fb38 <__gethex+0x2c6>
 800fb52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d1dd      	bne.n	800fb14 <__gethex+0x2a2>
 800fb58:	e7ee      	b.n	800fb38 <__gethex+0x2c6>
 800fb5a:	1e67      	subs	r7, r4, #1
 800fb5c:	f1ba 0f00 	cmp.w	sl, #0
 800fb60:	d131      	bne.n	800fbc6 <__gethex+0x354>
 800fb62:	b127      	cbz	r7, 800fb6e <__gethex+0x2fc>
 800fb64:	4639      	mov	r1, r7
 800fb66:	4628      	mov	r0, r5
 800fb68:	f000 fdca 	bl	8010700 <__any_on>
 800fb6c:	4682      	mov	sl, r0
 800fb6e:	117a      	asrs	r2, r7, #5
 800fb70:	2301      	movs	r3, #1
 800fb72:	f007 071f 	and.w	r7, r7, #31
 800fb76:	fa03 f707 	lsl.w	r7, r3, r7
 800fb7a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800fb7e:	4621      	mov	r1, r4
 800fb80:	421f      	tst	r7, r3
 800fb82:	4628      	mov	r0, r5
 800fb84:	bf18      	it	ne
 800fb86:	f04a 0a02 	orrne.w	sl, sl, #2
 800fb8a:	1b36      	subs	r6, r6, r4
 800fb8c:	f7ff fe22 	bl	800f7d4 <rshift>
 800fb90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800fb94:	2702      	movs	r7, #2
 800fb96:	f1ba 0f00 	cmp.w	sl, #0
 800fb9a:	d048      	beq.n	800fc2e <__gethex+0x3bc>
 800fb9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fba0:	2b02      	cmp	r3, #2
 800fba2:	d015      	beq.n	800fbd0 <__gethex+0x35e>
 800fba4:	2b03      	cmp	r3, #3
 800fba6:	d017      	beq.n	800fbd8 <__gethex+0x366>
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d109      	bne.n	800fbc0 <__gethex+0x34e>
 800fbac:	f01a 0f02 	tst.w	sl, #2
 800fbb0:	d006      	beq.n	800fbc0 <__gethex+0x34e>
 800fbb2:	f8d9 3000 	ldr.w	r3, [r9]
 800fbb6:	ea4a 0a03 	orr.w	sl, sl, r3
 800fbba:	f01a 0f01 	tst.w	sl, #1
 800fbbe:	d10e      	bne.n	800fbde <__gethex+0x36c>
 800fbc0:	f047 0710 	orr.w	r7, r7, #16
 800fbc4:	e033      	b.n	800fc2e <__gethex+0x3bc>
 800fbc6:	f04f 0a01 	mov.w	sl, #1
 800fbca:	e7d0      	b.n	800fb6e <__gethex+0x2fc>
 800fbcc:	2701      	movs	r7, #1
 800fbce:	e7e2      	b.n	800fb96 <__gethex+0x324>
 800fbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbd2:	f1c3 0301 	rsb	r3, r3, #1
 800fbd6:	9315      	str	r3, [sp, #84]	; 0x54
 800fbd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d0f0      	beq.n	800fbc0 <__gethex+0x34e>
 800fbde:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800fbe2:	f105 0314 	add.w	r3, r5, #20
 800fbe6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800fbea:	eb03 010a 	add.w	r1, r3, sl
 800fbee:	f04f 0c00 	mov.w	ip, #0
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fbfc:	d01c      	beq.n	800fc38 <__gethex+0x3c6>
 800fbfe:	3201      	adds	r2, #1
 800fc00:	6002      	str	r2, [r0, #0]
 800fc02:	2f02      	cmp	r7, #2
 800fc04:	f105 0314 	add.w	r3, r5, #20
 800fc08:	d138      	bne.n	800fc7c <__gethex+0x40a>
 800fc0a:	f8d8 2000 	ldr.w	r2, [r8]
 800fc0e:	3a01      	subs	r2, #1
 800fc10:	42b2      	cmp	r2, r6
 800fc12:	d10a      	bne.n	800fc2a <__gethex+0x3b8>
 800fc14:	1171      	asrs	r1, r6, #5
 800fc16:	2201      	movs	r2, #1
 800fc18:	f006 061f 	and.w	r6, r6, #31
 800fc1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc20:	fa02 f606 	lsl.w	r6, r2, r6
 800fc24:	421e      	tst	r6, r3
 800fc26:	bf18      	it	ne
 800fc28:	4617      	movne	r7, r2
 800fc2a:	f047 0720 	orr.w	r7, r7, #32
 800fc2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc30:	601d      	str	r5, [r3, #0]
 800fc32:	9b06      	ldr	r3, [sp, #24]
 800fc34:	601c      	str	r4, [r3, #0]
 800fc36:	e6a4      	b.n	800f982 <__gethex+0x110>
 800fc38:	4299      	cmp	r1, r3
 800fc3a:	f843 cc04 	str.w	ip, [r3, #-4]
 800fc3e:	d8d8      	bhi.n	800fbf2 <__gethex+0x380>
 800fc40:	68ab      	ldr	r3, [r5, #8]
 800fc42:	4599      	cmp	r9, r3
 800fc44:	db12      	blt.n	800fc6c <__gethex+0x3fa>
 800fc46:	6869      	ldr	r1, [r5, #4]
 800fc48:	9802      	ldr	r0, [sp, #8]
 800fc4a:	3101      	adds	r1, #1
 800fc4c:	f000 f97a 	bl	800ff44 <_Balloc>
 800fc50:	692a      	ldr	r2, [r5, #16]
 800fc52:	3202      	adds	r2, #2
 800fc54:	f105 010c 	add.w	r1, r5, #12
 800fc58:	4683      	mov	fp, r0
 800fc5a:	0092      	lsls	r2, r2, #2
 800fc5c:	300c      	adds	r0, #12
 800fc5e:	f7fc ff95 	bl	800cb8c <memcpy>
 800fc62:	4629      	mov	r1, r5
 800fc64:	9802      	ldr	r0, [sp, #8]
 800fc66:	f000 f9a1 	bl	800ffac <_Bfree>
 800fc6a:	465d      	mov	r5, fp
 800fc6c:	692b      	ldr	r3, [r5, #16]
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fc74:	612a      	str	r2, [r5, #16]
 800fc76:	2201      	movs	r2, #1
 800fc78:	615a      	str	r2, [r3, #20]
 800fc7a:	e7c2      	b.n	800fc02 <__gethex+0x390>
 800fc7c:	692a      	ldr	r2, [r5, #16]
 800fc7e:	454a      	cmp	r2, r9
 800fc80:	dd0b      	ble.n	800fc9a <__gethex+0x428>
 800fc82:	2101      	movs	r1, #1
 800fc84:	4628      	mov	r0, r5
 800fc86:	f7ff fda5 	bl	800f7d4 <rshift>
 800fc8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc8e:	3401      	adds	r4, #1
 800fc90:	42a3      	cmp	r3, r4
 800fc92:	f6ff aed9 	blt.w	800fa48 <__gethex+0x1d6>
 800fc96:	2701      	movs	r7, #1
 800fc98:	e7c7      	b.n	800fc2a <__gethex+0x3b8>
 800fc9a:	f016 061f 	ands.w	r6, r6, #31
 800fc9e:	d0fa      	beq.n	800fc96 <__gethex+0x424>
 800fca0:	449a      	add	sl, r3
 800fca2:	f1c6 0620 	rsb	r6, r6, #32
 800fca6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fcaa:	f000 fa0f 	bl	80100cc <__hi0bits>
 800fcae:	42b0      	cmp	r0, r6
 800fcb0:	dbe7      	blt.n	800fc82 <__gethex+0x410>
 800fcb2:	e7f0      	b.n	800fc96 <__gethex+0x424>

0800fcb4 <L_shift>:
 800fcb4:	f1c2 0208 	rsb	r2, r2, #8
 800fcb8:	0092      	lsls	r2, r2, #2
 800fcba:	b570      	push	{r4, r5, r6, lr}
 800fcbc:	f1c2 0620 	rsb	r6, r2, #32
 800fcc0:	6843      	ldr	r3, [r0, #4]
 800fcc2:	6804      	ldr	r4, [r0, #0]
 800fcc4:	fa03 f506 	lsl.w	r5, r3, r6
 800fcc8:	432c      	orrs	r4, r5
 800fcca:	40d3      	lsrs	r3, r2
 800fccc:	6004      	str	r4, [r0, #0]
 800fcce:	f840 3f04 	str.w	r3, [r0, #4]!
 800fcd2:	4288      	cmp	r0, r1
 800fcd4:	d3f4      	bcc.n	800fcc0 <L_shift+0xc>
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}

0800fcd8 <__match>:
 800fcd8:	b530      	push	{r4, r5, lr}
 800fcda:	6803      	ldr	r3, [r0, #0]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fce2:	b914      	cbnz	r4, 800fcea <__match+0x12>
 800fce4:	6003      	str	r3, [r0, #0]
 800fce6:	2001      	movs	r0, #1
 800fce8:	bd30      	pop	{r4, r5, pc}
 800fcea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fcee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fcf2:	2d19      	cmp	r5, #25
 800fcf4:	bf98      	it	ls
 800fcf6:	3220      	addls	r2, #32
 800fcf8:	42a2      	cmp	r2, r4
 800fcfa:	d0f0      	beq.n	800fcde <__match+0x6>
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e7f3      	b.n	800fce8 <__match+0x10>

0800fd00 <__hexnan>:
 800fd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd04:	680b      	ldr	r3, [r1, #0]
 800fd06:	6801      	ldr	r1, [r0, #0]
 800fd08:	115f      	asrs	r7, r3, #5
 800fd0a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800fd0e:	f013 031f 	ands.w	r3, r3, #31
 800fd12:	b087      	sub	sp, #28
 800fd14:	bf18      	it	ne
 800fd16:	3704      	addne	r7, #4
 800fd18:	2500      	movs	r5, #0
 800fd1a:	1f3e      	subs	r6, r7, #4
 800fd1c:	4682      	mov	sl, r0
 800fd1e:	4690      	mov	r8, r2
 800fd20:	9301      	str	r3, [sp, #4]
 800fd22:	f847 5c04 	str.w	r5, [r7, #-4]
 800fd26:	46b1      	mov	r9, r6
 800fd28:	4634      	mov	r4, r6
 800fd2a:	9502      	str	r5, [sp, #8]
 800fd2c:	46ab      	mov	fp, r5
 800fd2e:	784a      	ldrb	r2, [r1, #1]
 800fd30:	1c4b      	adds	r3, r1, #1
 800fd32:	9303      	str	r3, [sp, #12]
 800fd34:	b342      	cbz	r2, 800fd88 <__hexnan+0x88>
 800fd36:	4610      	mov	r0, r2
 800fd38:	9105      	str	r1, [sp, #20]
 800fd3a:	9204      	str	r2, [sp, #16]
 800fd3c:	f7ff fd84 	bl	800f848 <__hexdig_fun>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d143      	bne.n	800fdcc <__hexnan+0xcc>
 800fd44:	9a04      	ldr	r2, [sp, #16]
 800fd46:	9905      	ldr	r1, [sp, #20]
 800fd48:	2a20      	cmp	r2, #32
 800fd4a:	d818      	bhi.n	800fd7e <__hexnan+0x7e>
 800fd4c:	9b02      	ldr	r3, [sp, #8]
 800fd4e:	459b      	cmp	fp, r3
 800fd50:	dd13      	ble.n	800fd7a <__hexnan+0x7a>
 800fd52:	454c      	cmp	r4, r9
 800fd54:	d206      	bcs.n	800fd64 <__hexnan+0x64>
 800fd56:	2d07      	cmp	r5, #7
 800fd58:	dc04      	bgt.n	800fd64 <__hexnan+0x64>
 800fd5a:	462a      	mov	r2, r5
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7ff ffa8 	bl	800fcb4 <L_shift>
 800fd64:	4544      	cmp	r4, r8
 800fd66:	d944      	bls.n	800fdf2 <__hexnan+0xf2>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	f1a4 0904 	sub.w	r9, r4, #4
 800fd6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd72:	f8cd b008 	str.w	fp, [sp, #8]
 800fd76:	464c      	mov	r4, r9
 800fd78:	461d      	mov	r5, r3
 800fd7a:	9903      	ldr	r1, [sp, #12]
 800fd7c:	e7d7      	b.n	800fd2e <__hexnan+0x2e>
 800fd7e:	2a29      	cmp	r2, #41	; 0x29
 800fd80:	d14a      	bne.n	800fe18 <__hexnan+0x118>
 800fd82:	3102      	adds	r1, #2
 800fd84:	f8ca 1000 	str.w	r1, [sl]
 800fd88:	f1bb 0f00 	cmp.w	fp, #0
 800fd8c:	d044      	beq.n	800fe18 <__hexnan+0x118>
 800fd8e:	454c      	cmp	r4, r9
 800fd90:	d206      	bcs.n	800fda0 <__hexnan+0xa0>
 800fd92:	2d07      	cmp	r5, #7
 800fd94:	dc04      	bgt.n	800fda0 <__hexnan+0xa0>
 800fd96:	462a      	mov	r2, r5
 800fd98:	4649      	mov	r1, r9
 800fd9a:	4620      	mov	r0, r4
 800fd9c:	f7ff ff8a 	bl	800fcb4 <L_shift>
 800fda0:	4544      	cmp	r4, r8
 800fda2:	d928      	bls.n	800fdf6 <__hexnan+0xf6>
 800fda4:	4643      	mov	r3, r8
 800fda6:	f854 2b04 	ldr.w	r2, [r4], #4
 800fdaa:	f843 2b04 	str.w	r2, [r3], #4
 800fdae:	42a6      	cmp	r6, r4
 800fdb0:	d2f9      	bcs.n	800fda6 <__hexnan+0xa6>
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f843 2b04 	str.w	r2, [r3], #4
 800fdb8:	429e      	cmp	r6, r3
 800fdba:	d2fb      	bcs.n	800fdb4 <__hexnan+0xb4>
 800fdbc:	6833      	ldr	r3, [r6, #0]
 800fdbe:	b91b      	cbnz	r3, 800fdc8 <__hexnan+0xc8>
 800fdc0:	4546      	cmp	r6, r8
 800fdc2:	d127      	bne.n	800fe14 <__hexnan+0x114>
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	6033      	str	r3, [r6, #0]
 800fdc8:	2005      	movs	r0, #5
 800fdca:	e026      	b.n	800fe1a <__hexnan+0x11a>
 800fdcc:	3501      	adds	r5, #1
 800fdce:	2d08      	cmp	r5, #8
 800fdd0:	f10b 0b01 	add.w	fp, fp, #1
 800fdd4:	dd06      	ble.n	800fde4 <__hexnan+0xe4>
 800fdd6:	4544      	cmp	r4, r8
 800fdd8:	d9cf      	bls.n	800fd7a <__hexnan+0x7a>
 800fdda:	2300      	movs	r3, #0
 800fddc:	f844 3c04 	str.w	r3, [r4, #-4]
 800fde0:	2501      	movs	r5, #1
 800fde2:	3c04      	subs	r4, #4
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	f000 000f 	and.w	r0, r0, #15
 800fdea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fdee:	6020      	str	r0, [r4, #0]
 800fdf0:	e7c3      	b.n	800fd7a <__hexnan+0x7a>
 800fdf2:	2508      	movs	r5, #8
 800fdf4:	e7c1      	b.n	800fd7a <__hexnan+0x7a>
 800fdf6:	9b01      	ldr	r3, [sp, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d0df      	beq.n	800fdbc <__hexnan+0xbc>
 800fdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800fe00:	f1c3 0320 	rsb	r3, r3, #32
 800fe04:	fa22 f303 	lsr.w	r3, r2, r3
 800fe08:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fe0c:	401a      	ands	r2, r3
 800fe0e:	f847 2c04 	str.w	r2, [r7, #-4]
 800fe12:	e7d3      	b.n	800fdbc <__hexnan+0xbc>
 800fe14:	3e04      	subs	r6, #4
 800fe16:	e7d1      	b.n	800fdbc <__hexnan+0xbc>
 800fe18:	2004      	movs	r0, #4
 800fe1a:	b007      	add	sp, #28
 800fe1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe20 <__locale_ctype_ptr_l>:
 800fe20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800fe24:	4770      	bx	lr

0800fe26 <__localeconv_l>:
 800fe26:	30f0      	adds	r0, #240	; 0xf0
 800fe28:	4770      	bx	lr
	...

0800fe2c <_localeconv_r>:
 800fe2c:	4b04      	ldr	r3, [pc, #16]	; (800fe40 <_localeconv_r+0x14>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6a18      	ldr	r0, [r3, #32]
 800fe32:	4b04      	ldr	r3, [pc, #16]	; (800fe44 <_localeconv_r+0x18>)
 800fe34:	2800      	cmp	r0, #0
 800fe36:	bf08      	it	eq
 800fe38:	4618      	moveq	r0, r3
 800fe3a:	30f0      	adds	r0, #240	; 0xf0
 800fe3c:	4770      	bx	lr
 800fe3e:	bf00      	nop
 800fe40:	20000040 	.word	0x20000040
 800fe44:	200000a4 	.word	0x200000a4

0800fe48 <__swhatbuf_r>:
 800fe48:	b570      	push	{r4, r5, r6, lr}
 800fe4a:	460e      	mov	r6, r1
 800fe4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe50:	2900      	cmp	r1, #0
 800fe52:	b096      	sub	sp, #88	; 0x58
 800fe54:	4614      	mov	r4, r2
 800fe56:	461d      	mov	r5, r3
 800fe58:	da07      	bge.n	800fe6a <__swhatbuf_r+0x22>
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	602b      	str	r3, [r5, #0]
 800fe5e:	89b3      	ldrh	r3, [r6, #12]
 800fe60:	061a      	lsls	r2, r3, #24
 800fe62:	d410      	bmi.n	800fe86 <__swhatbuf_r+0x3e>
 800fe64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe68:	e00e      	b.n	800fe88 <__swhatbuf_r+0x40>
 800fe6a:	466a      	mov	r2, sp
 800fe6c:	f001 f846 	bl	8010efc <_fstat_r>
 800fe70:	2800      	cmp	r0, #0
 800fe72:	dbf2      	blt.n	800fe5a <__swhatbuf_r+0x12>
 800fe74:	9a01      	ldr	r2, [sp, #4]
 800fe76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe7e:	425a      	negs	r2, r3
 800fe80:	415a      	adcs	r2, r3
 800fe82:	602a      	str	r2, [r5, #0]
 800fe84:	e7ee      	b.n	800fe64 <__swhatbuf_r+0x1c>
 800fe86:	2340      	movs	r3, #64	; 0x40
 800fe88:	2000      	movs	r0, #0
 800fe8a:	6023      	str	r3, [r4, #0]
 800fe8c:	b016      	add	sp, #88	; 0x58
 800fe8e:	bd70      	pop	{r4, r5, r6, pc}

0800fe90 <__smakebuf_r>:
 800fe90:	898b      	ldrh	r3, [r1, #12]
 800fe92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe94:	079d      	lsls	r5, r3, #30
 800fe96:	4606      	mov	r6, r0
 800fe98:	460c      	mov	r4, r1
 800fe9a:	d507      	bpl.n	800feac <__smakebuf_r+0x1c>
 800fe9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fea0:	6023      	str	r3, [r4, #0]
 800fea2:	6123      	str	r3, [r4, #16]
 800fea4:	2301      	movs	r3, #1
 800fea6:	6163      	str	r3, [r4, #20]
 800fea8:	b002      	add	sp, #8
 800feaa:	bd70      	pop	{r4, r5, r6, pc}
 800feac:	ab01      	add	r3, sp, #4
 800feae:	466a      	mov	r2, sp
 800feb0:	f7ff ffca 	bl	800fe48 <__swhatbuf_r>
 800feb4:	9900      	ldr	r1, [sp, #0]
 800feb6:	4605      	mov	r5, r0
 800feb8:	4630      	mov	r0, r6
 800feba:	f000 fc9f 	bl	80107fc <_malloc_r>
 800febe:	b948      	cbnz	r0, 800fed4 <__smakebuf_r+0x44>
 800fec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec4:	059a      	lsls	r2, r3, #22
 800fec6:	d4ef      	bmi.n	800fea8 <__smakebuf_r+0x18>
 800fec8:	f023 0303 	bic.w	r3, r3, #3
 800fecc:	f043 0302 	orr.w	r3, r3, #2
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	e7e3      	b.n	800fe9c <__smakebuf_r+0xc>
 800fed4:	4b0d      	ldr	r3, [pc, #52]	; (800ff0c <__smakebuf_r+0x7c>)
 800fed6:	62b3      	str	r3, [r6, #40]	; 0x28
 800fed8:	89a3      	ldrh	r3, [r4, #12]
 800feda:	6020      	str	r0, [r4, #0]
 800fedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	9b00      	ldr	r3, [sp, #0]
 800fee4:	6163      	str	r3, [r4, #20]
 800fee6:	9b01      	ldr	r3, [sp, #4]
 800fee8:	6120      	str	r0, [r4, #16]
 800feea:	b15b      	cbz	r3, 800ff04 <__smakebuf_r+0x74>
 800feec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fef0:	4630      	mov	r0, r6
 800fef2:	f001 f815 	bl	8010f20 <_isatty_r>
 800fef6:	b128      	cbz	r0, 800ff04 <__smakebuf_r+0x74>
 800fef8:	89a3      	ldrh	r3, [r4, #12]
 800fefa:	f023 0303 	bic.w	r3, r3, #3
 800fefe:	f043 0301 	orr.w	r3, r3, #1
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	89a3      	ldrh	r3, [r4, #12]
 800ff06:	431d      	orrs	r5, r3
 800ff08:	81a5      	strh	r5, [r4, #12]
 800ff0a:	e7cd      	b.n	800fea8 <__smakebuf_r+0x18>
 800ff0c:	0800f689 	.word	0x0800f689

0800ff10 <malloc>:
 800ff10:	4b02      	ldr	r3, [pc, #8]	; (800ff1c <malloc+0xc>)
 800ff12:	4601      	mov	r1, r0
 800ff14:	6818      	ldr	r0, [r3, #0]
 800ff16:	f000 bc71 	b.w	80107fc <_malloc_r>
 800ff1a:	bf00      	nop
 800ff1c:	20000040 	.word	0x20000040

0800ff20 <__ascii_mbtowc>:
 800ff20:	b082      	sub	sp, #8
 800ff22:	b901      	cbnz	r1, 800ff26 <__ascii_mbtowc+0x6>
 800ff24:	a901      	add	r1, sp, #4
 800ff26:	b142      	cbz	r2, 800ff3a <__ascii_mbtowc+0x1a>
 800ff28:	b14b      	cbz	r3, 800ff3e <__ascii_mbtowc+0x1e>
 800ff2a:	7813      	ldrb	r3, [r2, #0]
 800ff2c:	600b      	str	r3, [r1, #0]
 800ff2e:	7812      	ldrb	r2, [r2, #0]
 800ff30:	1c10      	adds	r0, r2, #0
 800ff32:	bf18      	it	ne
 800ff34:	2001      	movne	r0, #1
 800ff36:	b002      	add	sp, #8
 800ff38:	4770      	bx	lr
 800ff3a:	4610      	mov	r0, r2
 800ff3c:	e7fb      	b.n	800ff36 <__ascii_mbtowc+0x16>
 800ff3e:	f06f 0001 	mvn.w	r0, #1
 800ff42:	e7f8      	b.n	800ff36 <__ascii_mbtowc+0x16>

0800ff44 <_Balloc>:
 800ff44:	b570      	push	{r4, r5, r6, lr}
 800ff46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ff48:	4604      	mov	r4, r0
 800ff4a:	460e      	mov	r6, r1
 800ff4c:	b93d      	cbnz	r5, 800ff5e <_Balloc+0x1a>
 800ff4e:	2010      	movs	r0, #16
 800ff50:	f7ff ffde 	bl	800ff10 <malloc>
 800ff54:	6260      	str	r0, [r4, #36]	; 0x24
 800ff56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ff5a:	6005      	str	r5, [r0, #0]
 800ff5c:	60c5      	str	r5, [r0, #12]
 800ff5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ff60:	68eb      	ldr	r3, [r5, #12]
 800ff62:	b183      	cbz	r3, 800ff86 <_Balloc+0x42>
 800ff64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff66:	68db      	ldr	r3, [r3, #12]
 800ff68:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ff6c:	b9b8      	cbnz	r0, 800ff9e <_Balloc+0x5a>
 800ff6e:	2101      	movs	r1, #1
 800ff70:	fa01 f506 	lsl.w	r5, r1, r6
 800ff74:	1d6a      	adds	r2, r5, #5
 800ff76:	0092      	lsls	r2, r2, #2
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fbe2 	bl	8010742 <_calloc_r>
 800ff7e:	b160      	cbz	r0, 800ff9a <_Balloc+0x56>
 800ff80:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ff84:	e00e      	b.n	800ffa4 <_Balloc+0x60>
 800ff86:	2221      	movs	r2, #33	; 0x21
 800ff88:	2104      	movs	r1, #4
 800ff8a:	4620      	mov	r0, r4
 800ff8c:	f000 fbd9 	bl	8010742 <_calloc_r>
 800ff90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff92:	60e8      	str	r0, [r5, #12]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1e4      	bne.n	800ff64 <_Balloc+0x20>
 800ff9a:	2000      	movs	r0, #0
 800ff9c:	bd70      	pop	{r4, r5, r6, pc}
 800ff9e:	6802      	ldr	r2, [r0, #0]
 800ffa0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffaa:	e7f7      	b.n	800ff9c <_Balloc+0x58>

0800ffac <_Bfree>:
 800ffac:	b570      	push	{r4, r5, r6, lr}
 800ffae:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ffb0:	4606      	mov	r6, r0
 800ffb2:	460d      	mov	r5, r1
 800ffb4:	b93c      	cbnz	r4, 800ffc6 <_Bfree+0x1a>
 800ffb6:	2010      	movs	r0, #16
 800ffb8:	f7ff ffaa 	bl	800ff10 <malloc>
 800ffbc:	6270      	str	r0, [r6, #36]	; 0x24
 800ffbe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffc2:	6004      	str	r4, [r0, #0]
 800ffc4:	60c4      	str	r4, [r0, #12]
 800ffc6:	b13d      	cbz	r5, 800ffd8 <_Bfree+0x2c>
 800ffc8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ffca:	686a      	ldr	r2, [r5, #4]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffd2:	6029      	str	r1, [r5, #0]
 800ffd4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}

0800ffda <__multadd>:
 800ffda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffde:	690d      	ldr	r5, [r1, #16]
 800ffe0:	461f      	mov	r7, r3
 800ffe2:	4606      	mov	r6, r0
 800ffe4:	460c      	mov	r4, r1
 800ffe6:	f101 0c14 	add.w	ip, r1, #20
 800ffea:	2300      	movs	r3, #0
 800ffec:	f8dc 0000 	ldr.w	r0, [ip]
 800fff0:	b281      	uxth	r1, r0
 800fff2:	fb02 7101 	mla	r1, r2, r1, r7
 800fff6:	0c0f      	lsrs	r7, r1, #16
 800fff8:	0c00      	lsrs	r0, r0, #16
 800fffa:	fb02 7000 	mla	r0, r2, r0, r7
 800fffe:	b289      	uxth	r1, r1
 8010000:	3301      	adds	r3, #1
 8010002:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010006:	429d      	cmp	r5, r3
 8010008:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801000c:	f84c 1b04 	str.w	r1, [ip], #4
 8010010:	dcec      	bgt.n	800ffec <__multadd+0x12>
 8010012:	b1d7      	cbz	r7, 801004a <__multadd+0x70>
 8010014:	68a3      	ldr	r3, [r4, #8]
 8010016:	42ab      	cmp	r3, r5
 8010018:	dc12      	bgt.n	8010040 <__multadd+0x66>
 801001a:	6861      	ldr	r1, [r4, #4]
 801001c:	4630      	mov	r0, r6
 801001e:	3101      	adds	r1, #1
 8010020:	f7ff ff90 	bl	800ff44 <_Balloc>
 8010024:	6922      	ldr	r2, [r4, #16]
 8010026:	3202      	adds	r2, #2
 8010028:	f104 010c 	add.w	r1, r4, #12
 801002c:	4680      	mov	r8, r0
 801002e:	0092      	lsls	r2, r2, #2
 8010030:	300c      	adds	r0, #12
 8010032:	f7fc fdab 	bl	800cb8c <memcpy>
 8010036:	4621      	mov	r1, r4
 8010038:	4630      	mov	r0, r6
 801003a:	f7ff ffb7 	bl	800ffac <_Bfree>
 801003e:	4644      	mov	r4, r8
 8010040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010044:	3501      	adds	r5, #1
 8010046:	615f      	str	r7, [r3, #20]
 8010048:	6125      	str	r5, [r4, #16]
 801004a:	4620      	mov	r0, r4
 801004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010050 <__s2b>:
 8010050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010054:	460c      	mov	r4, r1
 8010056:	4615      	mov	r5, r2
 8010058:	461f      	mov	r7, r3
 801005a:	2209      	movs	r2, #9
 801005c:	3308      	adds	r3, #8
 801005e:	4606      	mov	r6, r0
 8010060:	fb93 f3f2 	sdiv	r3, r3, r2
 8010064:	2100      	movs	r1, #0
 8010066:	2201      	movs	r2, #1
 8010068:	429a      	cmp	r2, r3
 801006a:	db20      	blt.n	80100ae <__s2b+0x5e>
 801006c:	4630      	mov	r0, r6
 801006e:	f7ff ff69 	bl	800ff44 <_Balloc>
 8010072:	9b08      	ldr	r3, [sp, #32]
 8010074:	6143      	str	r3, [r0, #20]
 8010076:	2d09      	cmp	r5, #9
 8010078:	f04f 0301 	mov.w	r3, #1
 801007c:	6103      	str	r3, [r0, #16]
 801007e:	dd19      	ble.n	80100b4 <__s2b+0x64>
 8010080:	f104 0809 	add.w	r8, r4, #9
 8010084:	46c1      	mov	r9, r8
 8010086:	442c      	add	r4, r5
 8010088:	f819 3b01 	ldrb.w	r3, [r9], #1
 801008c:	4601      	mov	r1, r0
 801008e:	3b30      	subs	r3, #48	; 0x30
 8010090:	220a      	movs	r2, #10
 8010092:	4630      	mov	r0, r6
 8010094:	f7ff ffa1 	bl	800ffda <__multadd>
 8010098:	45a1      	cmp	r9, r4
 801009a:	d1f5      	bne.n	8010088 <__s2b+0x38>
 801009c:	eb08 0405 	add.w	r4, r8, r5
 80100a0:	3c08      	subs	r4, #8
 80100a2:	1b2d      	subs	r5, r5, r4
 80100a4:	1963      	adds	r3, r4, r5
 80100a6:	42bb      	cmp	r3, r7
 80100a8:	db07      	blt.n	80100ba <__s2b+0x6a>
 80100aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ae:	0052      	lsls	r2, r2, #1
 80100b0:	3101      	adds	r1, #1
 80100b2:	e7d9      	b.n	8010068 <__s2b+0x18>
 80100b4:	340a      	adds	r4, #10
 80100b6:	2509      	movs	r5, #9
 80100b8:	e7f3      	b.n	80100a2 <__s2b+0x52>
 80100ba:	f814 3b01 	ldrb.w	r3, [r4], #1
 80100be:	4601      	mov	r1, r0
 80100c0:	3b30      	subs	r3, #48	; 0x30
 80100c2:	220a      	movs	r2, #10
 80100c4:	4630      	mov	r0, r6
 80100c6:	f7ff ff88 	bl	800ffda <__multadd>
 80100ca:	e7eb      	b.n	80100a4 <__s2b+0x54>

080100cc <__hi0bits>:
 80100cc:	0c02      	lsrs	r2, r0, #16
 80100ce:	0412      	lsls	r2, r2, #16
 80100d0:	4603      	mov	r3, r0
 80100d2:	b9b2      	cbnz	r2, 8010102 <__hi0bits+0x36>
 80100d4:	0403      	lsls	r3, r0, #16
 80100d6:	2010      	movs	r0, #16
 80100d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80100dc:	bf04      	itt	eq
 80100de:	021b      	lsleq	r3, r3, #8
 80100e0:	3008      	addeq	r0, #8
 80100e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80100e6:	bf04      	itt	eq
 80100e8:	011b      	lsleq	r3, r3, #4
 80100ea:	3004      	addeq	r0, #4
 80100ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80100f0:	bf04      	itt	eq
 80100f2:	009b      	lsleq	r3, r3, #2
 80100f4:	3002      	addeq	r0, #2
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	db06      	blt.n	8010108 <__hi0bits+0x3c>
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	d503      	bpl.n	8010106 <__hi0bits+0x3a>
 80100fe:	3001      	adds	r0, #1
 8010100:	4770      	bx	lr
 8010102:	2000      	movs	r0, #0
 8010104:	e7e8      	b.n	80100d8 <__hi0bits+0xc>
 8010106:	2020      	movs	r0, #32
 8010108:	4770      	bx	lr

0801010a <__lo0bits>:
 801010a:	6803      	ldr	r3, [r0, #0]
 801010c:	f013 0207 	ands.w	r2, r3, #7
 8010110:	4601      	mov	r1, r0
 8010112:	d00b      	beq.n	801012c <__lo0bits+0x22>
 8010114:	07da      	lsls	r2, r3, #31
 8010116:	d423      	bmi.n	8010160 <__lo0bits+0x56>
 8010118:	0798      	lsls	r0, r3, #30
 801011a:	bf49      	itett	mi
 801011c:	085b      	lsrmi	r3, r3, #1
 801011e:	089b      	lsrpl	r3, r3, #2
 8010120:	2001      	movmi	r0, #1
 8010122:	600b      	strmi	r3, [r1, #0]
 8010124:	bf5c      	itt	pl
 8010126:	600b      	strpl	r3, [r1, #0]
 8010128:	2002      	movpl	r0, #2
 801012a:	4770      	bx	lr
 801012c:	b298      	uxth	r0, r3
 801012e:	b9a8      	cbnz	r0, 801015c <__lo0bits+0x52>
 8010130:	0c1b      	lsrs	r3, r3, #16
 8010132:	2010      	movs	r0, #16
 8010134:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010138:	bf04      	itt	eq
 801013a:	0a1b      	lsreq	r3, r3, #8
 801013c:	3008      	addeq	r0, #8
 801013e:	071a      	lsls	r2, r3, #28
 8010140:	bf04      	itt	eq
 8010142:	091b      	lsreq	r3, r3, #4
 8010144:	3004      	addeq	r0, #4
 8010146:	079a      	lsls	r2, r3, #30
 8010148:	bf04      	itt	eq
 801014a:	089b      	lsreq	r3, r3, #2
 801014c:	3002      	addeq	r0, #2
 801014e:	07da      	lsls	r2, r3, #31
 8010150:	d402      	bmi.n	8010158 <__lo0bits+0x4e>
 8010152:	085b      	lsrs	r3, r3, #1
 8010154:	d006      	beq.n	8010164 <__lo0bits+0x5a>
 8010156:	3001      	adds	r0, #1
 8010158:	600b      	str	r3, [r1, #0]
 801015a:	4770      	bx	lr
 801015c:	4610      	mov	r0, r2
 801015e:	e7e9      	b.n	8010134 <__lo0bits+0x2a>
 8010160:	2000      	movs	r0, #0
 8010162:	4770      	bx	lr
 8010164:	2020      	movs	r0, #32
 8010166:	4770      	bx	lr

08010168 <__i2b>:
 8010168:	b510      	push	{r4, lr}
 801016a:	460c      	mov	r4, r1
 801016c:	2101      	movs	r1, #1
 801016e:	f7ff fee9 	bl	800ff44 <_Balloc>
 8010172:	2201      	movs	r2, #1
 8010174:	6144      	str	r4, [r0, #20]
 8010176:	6102      	str	r2, [r0, #16]
 8010178:	bd10      	pop	{r4, pc}

0801017a <__multiply>:
 801017a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017e:	4614      	mov	r4, r2
 8010180:	690a      	ldr	r2, [r1, #16]
 8010182:	6923      	ldr	r3, [r4, #16]
 8010184:	429a      	cmp	r2, r3
 8010186:	bfb8      	it	lt
 8010188:	460b      	movlt	r3, r1
 801018a:	4688      	mov	r8, r1
 801018c:	bfbc      	itt	lt
 801018e:	46a0      	movlt	r8, r4
 8010190:	461c      	movlt	r4, r3
 8010192:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010196:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801019a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801019e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80101a2:	eb07 0609 	add.w	r6, r7, r9
 80101a6:	42b3      	cmp	r3, r6
 80101a8:	bfb8      	it	lt
 80101aa:	3101      	addlt	r1, #1
 80101ac:	f7ff feca 	bl	800ff44 <_Balloc>
 80101b0:	f100 0514 	add.w	r5, r0, #20
 80101b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80101b8:	462b      	mov	r3, r5
 80101ba:	2200      	movs	r2, #0
 80101bc:	4573      	cmp	r3, lr
 80101be:	d316      	bcc.n	80101ee <__multiply+0x74>
 80101c0:	f104 0214 	add.w	r2, r4, #20
 80101c4:	f108 0114 	add.w	r1, r8, #20
 80101c8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80101cc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	9b00      	ldr	r3, [sp, #0]
 80101d4:	9201      	str	r2, [sp, #4]
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d80c      	bhi.n	80101f4 <__multiply+0x7a>
 80101da:	2e00      	cmp	r6, #0
 80101dc:	dd03      	ble.n	80101e6 <__multiply+0x6c>
 80101de:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d05d      	beq.n	80102a2 <__multiply+0x128>
 80101e6:	6106      	str	r6, [r0, #16]
 80101e8:	b003      	add	sp, #12
 80101ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ee:	f843 2b04 	str.w	r2, [r3], #4
 80101f2:	e7e3      	b.n	80101bc <__multiply+0x42>
 80101f4:	f8b2 b000 	ldrh.w	fp, [r2]
 80101f8:	f1bb 0f00 	cmp.w	fp, #0
 80101fc:	d023      	beq.n	8010246 <__multiply+0xcc>
 80101fe:	4689      	mov	r9, r1
 8010200:	46ac      	mov	ip, r5
 8010202:	f04f 0800 	mov.w	r8, #0
 8010206:	f859 4b04 	ldr.w	r4, [r9], #4
 801020a:	f8dc a000 	ldr.w	sl, [ip]
 801020e:	b2a3      	uxth	r3, r4
 8010210:	fa1f fa8a 	uxth.w	sl, sl
 8010214:	fb0b a303 	mla	r3, fp, r3, sl
 8010218:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801021c:	f8dc 4000 	ldr.w	r4, [ip]
 8010220:	4443      	add	r3, r8
 8010222:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010226:	fb0b 840a 	mla	r4, fp, sl, r8
 801022a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801022e:	46e2      	mov	sl, ip
 8010230:	b29b      	uxth	r3, r3
 8010232:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010236:	454f      	cmp	r7, r9
 8010238:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801023c:	f84a 3b04 	str.w	r3, [sl], #4
 8010240:	d82b      	bhi.n	801029a <__multiply+0x120>
 8010242:	f8cc 8004 	str.w	r8, [ip, #4]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801024c:	3204      	adds	r2, #4
 801024e:	f1ba 0f00 	cmp.w	sl, #0
 8010252:	d020      	beq.n	8010296 <__multiply+0x11c>
 8010254:	682b      	ldr	r3, [r5, #0]
 8010256:	4689      	mov	r9, r1
 8010258:	46a8      	mov	r8, r5
 801025a:	f04f 0b00 	mov.w	fp, #0
 801025e:	f8b9 c000 	ldrh.w	ip, [r9]
 8010262:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010266:	fb0a 440c 	mla	r4, sl, ip, r4
 801026a:	445c      	add	r4, fp
 801026c:	46c4      	mov	ip, r8
 801026e:	b29b      	uxth	r3, r3
 8010270:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010274:	f84c 3b04 	str.w	r3, [ip], #4
 8010278:	f859 3b04 	ldr.w	r3, [r9], #4
 801027c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010280:	0c1b      	lsrs	r3, r3, #16
 8010282:	fb0a b303 	mla	r3, sl, r3, fp
 8010286:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801028a:	454f      	cmp	r7, r9
 801028c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010290:	d805      	bhi.n	801029e <__multiply+0x124>
 8010292:	f8c8 3004 	str.w	r3, [r8, #4]
 8010296:	3504      	adds	r5, #4
 8010298:	e79b      	b.n	80101d2 <__multiply+0x58>
 801029a:	46d4      	mov	ip, sl
 801029c:	e7b3      	b.n	8010206 <__multiply+0x8c>
 801029e:	46e0      	mov	r8, ip
 80102a0:	e7dd      	b.n	801025e <__multiply+0xe4>
 80102a2:	3e01      	subs	r6, #1
 80102a4:	e799      	b.n	80101da <__multiply+0x60>
	...

080102a8 <__pow5mult>:
 80102a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102ac:	4615      	mov	r5, r2
 80102ae:	f012 0203 	ands.w	r2, r2, #3
 80102b2:	4606      	mov	r6, r0
 80102b4:	460f      	mov	r7, r1
 80102b6:	d007      	beq.n	80102c8 <__pow5mult+0x20>
 80102b8:	3a01      	subs	r2, #1
 80102ba:	4c21      	ldr	r4, [pc, #132]	; (8010340 <__pow5mult+0x98>)
 80102bc:	2300      	movs	r3, #0
 80102be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80102c2:	f7ff fe8a 	bl	800ffda <__multadd>
 80102c6:	4607      	mov	r7, r0
 80102c8:	10ad      	asrs	r5, r5, #2
 80102ca:	d035      	beq.n	8010338 <__pow5mult+0x90>
 80102cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80102ce:	b93c      	cbnz	r4, 80102e0 <__pow5mult+0x38>
 80102d0:	2010      	movs	r0, #16
 80102d2:	f7ff fe1d 	bl	800ff10 <malloc>
 80102d6:	6270      	str	r0, [r6, #36]	; 0x24
 80102d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102dc:	6004      	str	r4, [r0, #0]
 80102de:	60c4      	str	r4, [r0, #12]
 80102e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80102e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102e8:	b94c      	cbnz	r4, 80102fe <__pow5mult+0x56>
 80102ea:	f240 2171 	movw	r1, #625	; 0x271
 80102ee:	4630      	mov	r0, r6
 80102f0:	f7ff ff3a 	bl	8010168 <__i2b>
 80102f4:	2300      	movs	r3, #0
 80102f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80102fa:	4604      	mov	r4, r0
 80102fc:	6003      	str	r3, [r0, #0]
 80102fe:	f04f 0800 	mov.w	r8, #0
 8010302:	07eb      	lsls	r3, r5, #31
 8010304:	d50a      	bpl.n	801031c <__pow5mult+0x74>
 8010306:	4639      	mov	r1, r7
 8010308:	4622      	mov	r2, r4
 801030a:	4630      	mov	r0, r6
 801030c:	f7ff ff35 	bl	801017a <__multiply>
 8010310:	4639      	mov	r1, r7
 8010312:	4681      	mov	r9, r0
 8010314:	4630      	mov	r0, r6
 8010316:	f7ff fe49 	bl	800ffac <_Bfree>
 801031a:	464f      	mov	r7, r9
 801031c:	106d      	asrs	r5, r5, #1
 801031e:	d00b      	beq.n	8010338 <__pow5mult+0x90>
 8010320:	6820      	ldr	r0, [r4, #0]
 8010322:	b938      	cbnz	r0, 8010334 <__pow5mult+0x8c>
 8010324:	4622      	mov	r2, r4
 8010326:	4621      	mov	r1, r4
 8010328:	4630      	mov	r0, r6
 801032a:	f7ff ff26 	bl	801017a <__multiply>
 801032e:	6020      	str	r0, [r4, #0]
 8010330:	f8c0 8000 	str.w	r8, [r0]
 8010334:	4604      	mov	r4, r0
 8010336:	e7e4      	b.n	8010302 <__pow5mult+0x5a>
 8010338:	4638      	mov	r0, r7
 801033a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801033e:	bf00      	nop
 8010340:	08011858 	.word	0x08011858

08010344 <__lshift>:
 8010344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	460c      	mov	r4, r1
 801034a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	6849      	ldr	r1, [r1, #4]
 8010352:	eb0a 0903 	add.w	r9, sl, r3
 8010356:	68a3      	ldr	r3, [r4, #8]
 8010358:	4607      	mov	r7, r0
 801035a:	4616      	mov	r6, r2
 801035c:	f109 0501 	add.w	r5, r9, #1
 8010360:	42ab      	cmp	r3, r5
 8010362:	db32      	blt.n	80103ca <__lshift+0x86>
 8010364:	4638      	mov	r0, r7
 8010366:	f7ff fded 	bl	800ff44 <_Balloc>
 801036a:	2300      	movs	r3, #0
 801036c:	4680      	mov	r8, r0
 801036e:	f100 0114 	add.w	r1, r0, #20
 8010372:	461a      	mov	r2, r3
 8010374:	4553      	cmp	r3, sl
 8010376:	db2b      	blt.n	80103d0 <__lshift+0x8c>
 8010378:	6920      	ldr	r0, [r4, #16]
 801037a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801037e:	f104 0314 	add.w	r3, r4, #20
 8010382:	f016 021f 	ands.w	r2, r6, #31
 8010386:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801038a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801038e:	d025      	beq.n	80103dc <__lshift+0x98>
 8010390:	f1c2 0e20 	rsb	lr, r2, #32
 8010394:	2000      	movs	r0, #0
 8010396:	681e      	ldr	r6, [r3, #0]
 8010398:	468a      	mov	sl, r1
 801039a:	4096      	lsls	r6, r2
 801039c:	4330      	orrs	r0, r6
 801039e:	f84a 0b04 	str.w	r0, [sl], #4
 80103a2:	f853 0b04 	ldr.w	r0, [r3], #4
 80103a6:	459c      	cmp	ip, r3
 80103a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80103ac:	d814      	bhi.n	80103d8 <__lshift+0x94>
 80103ae:	6048      	str	r0, [r1, #4]
 80103b0:	b108      	cbz	r0, 80103b6 <__lshift+0x72>
 80103b2:	f109 0502 	add.w	r5, r9, #2
 80103b6:	3d01      	subs	r5, #1
 80103b8:	4638      	mov	r0, r7
 80103ba:	f8c8 5010 	str.w	r5, [r8, #16]
 80103be:	4621      	mov	r1, r4
 80103c0:	f7ff fdf4 	bl	800ffac <_Bfree>
 80103c4:	4640      	mov	r0, r8
 80103c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103ca:	3101      	adds	r1, #1
 80103cc:	005b      	lsls	r3, r3, #1
 80103ce:	e7c7      	b.n	8010360 <__lshift+0x1c>
 80103d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80103d4:	3301      	adds	r3, #1
 80103d6:	e7cd      	b.n	8010374 <__lshift+0x30>
 80103d8:	4651      	mov	r1, sl
 80103da:	e7dc      	b.n	8010396 <__lshift+0x52>
 80103dc:	3904      	subs	r1, #4
 80103de:	f853 2b04 	ldr.w	r2, [r3], #4
 80103e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80103e6:	459c      	cmp	ip, r3
 80103e8:	d8f9      	bhi.n	80103de <__lshift+0x9a>
 80103ea:	e7e4      	b.n	80103b6 <__lshift+0x72>

080103ec <__mcmp>:
 80103ec:	6903      	ldr	r3, [r0, #16]
 80103ee:	690a      	ldr	r2, [r1, #16]
 80103f0:	1a9b      	subs	r3, r3, r2
 80103f2:	b530      	push	{r4, r5, lr}
 80103f4:	d10c      	bne.n	8010410 <__mcmp+0x24>
 80103f6:	0092      	lsls	r2, r2, #2
 80103f8:	3014      	adds	r0, #20
 80103fa:	3114      	adds	r1, #20
 80103fc:	1884      	adds	r4, r0, r2
 80103fe:	4411      	add	r1, r2
 8010400:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010404:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010408:	4295      	cmp	r5, r2
 801040a:	d003      	beq.n	8010414 <__mcmp+0x28>
 801040c:	d305      	bcc.n	801041a <__mcmp+0x2e>
 801040e:	2301      	movs	r3, #1
 8010410:	4618      	mov	r0, r3
 8010412:	bd30      	pop	{r4, r5, pc}
 8010414:	42a0      	cmp	r0, r4
 8010416:	d3f3      	bcc.n	8010400 <__mcmp+0x14>
 8010418:	e7fa      	b.n	8010410 <__mcmp+0x24>
 801041a:	f04f 33ff 	mov.w	r3, #4294967295
 801041e:	e7f7      	b.n	8010410 <__mcmp+0x24>

08010420 <__mdiff>:
 8010420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	460d      	mov	r5, r1
 8010426:	4607      	mov	r7, r0
 8010428:	4611      	mov	r1, r2
 801042a:	4628      	mov	r0, r5
 801042c:	4614      	mov	r4, r2
 801042e:	f7ff ffdd 	bl	80103ec <__mcmp>
 8010432:	1e06      	subs	r6, r0, #0
 8010434:	d108      	bne.n	8010448 <__mdiff+0x28>
 8010436:	4631      	mov	r1, r6
 8010438:	4638      	mov	r0, r7
 801043a:	f7ff fd83 	bl	800ff44 <_Balloc>
 801043e:	2301      	movs	r3, #1
 8010440:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010448:	bfa4      	itt	ge
 801044a:	4623      	movge	r3, r4
 801044c:	462c      	movge	r4, r5
 801044e:	4638      	mov	r0, r7
 8010450:	6861      	ldr	r1, [r4, #4]
 8010452:	bfa6      	itte	ge
 8010454:	461d      	movge	r5, r3
 8010456:	2600      	movge	r6, #0
 8010458:	2601      	movlt	r6, #1
 801045a:	f7ff fd73 	bl	800ff44 <_Balloc>
 801045e:	692b      	ldr	r3, [r5, #16]
 8010460:	60c6      	str	r6, [r0, #12]
 8010462:	6926      	ldr	r6, [r4, #16]
 8010464:	f105 0914 	add.w	r9, r5, #20
 8010468:	f104 0214 	add.w	r2, r4, #20
 801046c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010470:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010474:	f100 0514 	add.w	r5, r0, #20
 8010478:	f04f 0e00 	mov.w	lr, #0
 801047c:	f852 ab04 	ldr.w	sl, [r2], #4
 8010480:	f859 4b04 	ldr.w	r4, [r9], #4
 8010484:	fa1e f18a 	uxtah	r1, lr, sl
 8010488:	b2a3      	uxth	r3, r4
 801048a:	1ac9      	subs	r1, r1, r3
 801048c:	0c23      	lsrs	r3, r4, #16
 801048e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010492:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010496:	b289      	uxth	r1, r1
 8010498:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801049c:	45c8      	cmp	r8, r9
 801049e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80104a2:	4694      	mov	ip, r2
 80104a4:	f845 3b04 	str.w	r3, [r5], #4
 80104a8:	d8e8      	bhi.n	801047c <__mdiff+0x5c>
 80104aa:	45bc      	cmp	ip, r7
 80104ac:	d304      	bcc.n	80104b8 <__mdiff+0x98>
 80104ae:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80104b2:	b183      	cbz	r3, 80104d6 <__mdiff+0xb6>
 80104b4:	6106      	str	r6, [r0, #16]
 80104b6:	e7c5      	b.n	8010444 <__mdiff+0x24>
 80104b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80104bc:	fa1e f381 	uxtah	r3, lr, r1
 80104c0:	141a      	asrs	r2, r3, #16
 80104c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80104c6:	b29b      	uxth	r3, r3
 80104c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104cc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80104d0:	f845 3b04 	str.w	r3, [r5], #4
 80104d4:	e7e9      	b.n	80104aa <__mdiff+0x8a>
 80104d6:	3e01      	subs	r6, #1
 80104d8:	e7e9      	b.n	80104ae <__mdiff+0x8e>
	...

080104dc <__ulp>:
 80104dc:	4b12      	ldr	r3, [pc, #72]	; (8010528 <__ulp+0x4c>)
 80104de:	ee10 2a90 	vmov	r2, s1
 80104e2:	401a      	ands	r2, r3
 80104e4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	dd04      	ble.n	80104f6 <__ulp+0x1a>
 80104ec:	2000      	movs	r0, #0
 80104ee:	4619      	mov	r1, r3
 80104f0:	ec41 0b10 	vmov	d0, r0, r1
 80104f4:	4770      	bx	lr
 80104f6:	425b      	negs	r3, r3
 80104f8:	151b      	asrs	r3, r3, #20
 80104fa:	2b13      	cmp	r3, #19
 80104fc:	f04f 0000 	mov.w	r0, #0
 8010500:	f04f 0100 	mov.w	r1, #0
 8010504:	dc04      	bgt.n	8010510 <__ulp+0x34>
 8010506:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801050a:	fa42 f103 	asr.w	r1, r2, r3
 801050e:	e7ef      	b.n	80104f0 <__ulp+0x14>
 8010510:	3b14      	subs	r3, #20
 8010512:	2b1e      	cmp	r3, #30
 8010514:	f04f 0201 	mov.w	r2, #1
 8010518:	bfda      	itte	le
 801051a:	f1c3 031f 	rsble	r3, r3, #31
 801051e:	fa02 f303 	lslle.w	r3, r2, r3
 8010522:	4613      	movgt	r3, r2
 8010524:	4618      	mov	r0, r3
 8010526:	e7e3      	b.n	80104f0 <__ulp+0x14>
 8010528:	7ff00000 	.word	0x7ff00000

0801052c <__b2d>:
 801052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801052e:	6905      	ldr	r5, [r0, #16]
 8010530:	f100 0714 	add.w	r7, r0, #20
 8010534:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010538:	1f2e      	subs	r6, r5, #4
 801053a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801053e:	4620      	mov	r0, r4
 8010540:	f7ff fdc4 	bl	80100cc <__hi0bits>
 8010544:	f1c0 0320 	rsb	r3, r0, #32
 8010548:	280a      	cmp	r0, #10
 801054a:	600b      	str	r3, [r1, #0]
 801054c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80105c4 <__b2d+0x98>
 8010550:	dc14      	bgt.n	801057c <__b2d+0x50>
 8010552:	f1c0 0e0b 	rsb	lr, r0, #11
 8010556:	fa24 f10e 	lsr.w	r1, r4, lr
 801055a:	42b7      	cmp	r7, r6
 801055c:	ea41 030c 	orr.w	r3, r1, ip
 8010560:	bf34      	ite	cc
 8010562:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010566:	2100      	movcs	r1, #0
 8010568:	3015      	adds	r0, #21
 801056a:	fa04 f000 	lsl.w	r0, r4, r0
 801056e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010572:	ea40 0201 	orr.w	r2, r0, r1
 8010576:	ec43 2b10 	vmov	d0, r2, r3
 801057a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801057c:	42b7      	cmp	r7, r6
 801057e:	bf3a      	itte	cc
 8010580:	f1a5 0608 	subcc.w	r6, r5, #8
 8010584:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010588:	2100      	movcs	r1, #0
 801058a:	380b      	subs	r0, #11
 801058c:	d015      	beq.n	80105ba <__b2d+0x8e>
 801058e:	4084      	lsls	r4, r0
 8010590:	f1c0 0520 	rsb	r5, r0, #32
 8010594:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010598:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801059c:	42be      	cmp	r6, r7
 801059e:	fa21 fc05 	lsr.w	ip, r1, r5
 80105a2:	ea44 030c 	orr.w	r3, r4, ip
 80105a6:	bf8c      	ite	hi
 80105a8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80105ac:	2400      	movls	r4, #0
 80105ae:	fa01 f000 	lsl.w	r0, r1, r0
 80105b2:	40ec      	lsrs	r4, r5
 80105b4:	ea40 0204 	orr.w	r2, r0, r4
 80105b8:	e7dd      	b.n	8010576 <__b2d+0x4a>
 80105ba:	ea44 030c 	orr.w	r3, r4, ip
 80105be:	460a      	mov	r2, r1
 80105c0:	e7d9      	b.n	8010576 <__b2d+0x4a>
 80105c2:	bf00      	nop
 80105c4:	3ff00000 	.word	0x3ff00000

080105c8 <__d2b>:
 80105c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105cc:	460e      	mov	r6, r1
 80105ce:	2101      	movs	r1, #1
 80105d0:	ec59 8b10 	vmov	r8, r9, d0
 80105d4:	4615      	mov	r5, r2
 80105d6:	f7ff fcb5 	bl	800ff44 <_Balloc>
 80105da:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80105de:	4607      	mov	r7, r0
 80105e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80105e4:	bb34      	cbnz	r4, 8010634 <__d2b+0x6c>
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	f1b8 0300 	subs.w	r3, r8, #0
 80105ec:	d027      	beq.n	801063e <__d2b+0x76>
 80105ee:	a802      	add	r0, sp, #8
 80105f0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80105f4:	f7ff fd89 	bl	801010a <__lo0bits>
 80105f8:	9900      	ldr	r1, [sp, #0]
 80105fa:	b1f0      	cbz	r0, 801063a <__d2b+0x72>
 80105fc:	9a01      	ldr	r2, [sp, #4]
 80105fe:	f1c0 0320 	rsb	r3, r0, #32
 8010602:	fa02 f303 	lsl.w	r3, r2, r3
 8010606:	430b      	orrs	r3, r1
 8010608:	40c2      	lsrs	r2, r0
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	9201      	str	r2, [sp, #4]
 801060e:	9b01      	ldr	r3, [sp, #4]
 8010610:	61bb      	str	r3, [r7, #24]
 8010612:	2b00      	cmp	r3, #0
 8010614:	bf14      	ite	ne
 8010616:	2102      	movne	r1, #2
 8010618:	2101      	moveq	r1, #1
 801061a:	6139      	str	r1, [r7, #16]
 801061c:	b1c4      	cbz	r4, 8010650 <__d2b+0x88>
 801061e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010622:	4404      	add	r4, r0
 8010624:	6034      	str	r4, [r6, #0]
 8010626:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801062a:	6028      	str	r0, [r5, #0]
 801062c:	4638      	mov	r0, r7
 801062e:	b003      	add	sp, #12
 8010630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010638:	e7d5      	b.n	80105e6 <__d2b+0x1e>
 801063a:	6179      	str	r1, [r7, #20]
 801063c:	e7e7      	b.n	801060e <__d2b+0x46>
 801063e:	a801      	add	r0, sp, #4
 8010640:	f7ff fd63 	bl	801010a <__lo0bits>
 8010644:	9b01      	ldr	r3, [sp, #4]
 8010646:	617b      	str	r3, [r7, #20]
 8010648:	2101      	movs	r1, #1
 801064a:	6139      	str	r1, [r7, #16]
 801064c:	3020      	adds	r0, #32
 801064e:	e7e5      	b.n	801061c <__d2b+0x54>
 8010650:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010654:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010658:	6030      	str	r0, [r6, #0]
 801065a:	6918      	ldr	r0, [r3, #16]
 801065c:	f7ff fd36 	bl	80100cc <__hi0bits>
 8010660:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010664:	e7e1      	b.n	801062a <__d2b+0x62>

08010666 <__ratio>:
 8010666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066a:	4688      	mov	r8, r1
 801066c:	4669      	mov	r1, sp
 801066e:	4681      	mov	r9, r0
 8010670:	f7ff ff5c 	bl	801052c <__b2d>
 8010674:	a901      	add	r1, sp, #4
 8010676:	4640      	mov	r0, r8
 8010678:	ec57 6b10 	vmov	r6, r7, d0
 801067c:	f7ff ff56 	bl	801052c <__b2d>
 8010680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010684:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010688:	eba3 0c02 	sub.w	ip, r3, r2
 801068c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010696:	ec5b ab10 	vmov	sl, fp, d0
 801069a:	2b00      	cmp	r3, #0
 801069c:	bfce      	itee	gt
 801069e:	463a      	movgt	r2, r7
 80106a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80106a4:	465a      	movle	r2, fp
 80106a6:	4659      	mov	r1, fp
 80106a8:	463d      	mov	r5, r7
 80106aa:	bfd4      	ite	le
 80106ac:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80106b0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80106b4:	4630      	mov	r0, r6
 80106b6:	ee10 2a10 	vmov	r2, s0
 80106ba:	460b      	mov	r3, r1
 80106bc:	4629      	mov	r1, r5
 80106be:	f7f0 f8c5 	bl	800084c <__aeabi_ddiv>
 80106c2:	ec41 0b10 	vmov	d0, r0, r1
 80106c6:	b003      	add	sp, #12
 80106c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080106cc <__copybits>:
 80106cc:	3901      	subs	r1, #1
 80106ce:	b510      	push	{r4, lr}
 80106d0:	1149      	asrs	r1, r1, #5
 80106d2:	6914      	ldr	r4, [r2, #16]
 80106d4:	3101      	adds	r1, #1
 80106d6:	f102 0314 	add.w	r3, r2, #20
 80106da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80106de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106e2:	42a3      	cmp	r3, r4
 80106e4:	4602      	mov	r2, r0
 80106e6:	d303      	bcc.n	80106f0 <__copybits+0x24>
 80106e8:	2300      	movs	r3, #0
 80106ea:	428a      	cmp	r2, r1
 80106ec:	d305      	bcc.n	80106fa <__copybits+0x2e>
 80106ee:	bd10      	pop	{r4, pc}
 80106f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80106f4:	f840 2b04 	str.w	r2, [r0], #4
 80106f8:	e7f3      	b.n	80106e2 <__copybits+0x16>
 80106fa:	f842 3b04 	str.w	r3, [r2], #4
 80106fe:	e7f4      	b.n	80106ea <__copybits+0x1e>

08010700 <__any_on>:
 8010700:	f100 0214 	add.w	r2, r0, #20
 8010704:	6900      	ldr	r0, [r0, #16]
 8010706:	114b      	asrs	r3, r1, #5
 8010708:	4298      	cmp	r0, r3
 801070a:	b510      	push	{r4, lr}
 801070c:	db11      	blt.n	8010732 <__any_on+0x32>
 801070e:	dd0a      	ble.n	8010726 <__any_on+0x26>
 8010710:	f011 011f 	ands.w	r1, r1, #31
 8010714:	d007      	beq.n	8010726 <__any_on+0x26>
 8010716:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801071a:	fa24 f001 	lsr.w	r0, r4, r1
 801071e:	fa00 f101 	lsl.w	r1, r0, r1
 8010722:	428c      	cmp	r4, r1
 8010724:	d10b      	bne.n	801073e <__any_on+0x3e>
 8010726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801072a:	4293      	cmp	r3, r2
 801072c:	d803      	bhi.n	8010736 <__any_on+0x36>
 801072e:	2000      	movs	r0, #0
 8010730:	bd10      	pop	{r4, pc}
 8010732:	4603      	mov	r3, r0
 8010734:	e7f7      	b.n	8010726 <__any_on+0x26>
 8010736:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801073a:	2900      	cmp	r1, #0
 801073c:	d0f5      	beq.n	801072a <__any_on+0x2a>
 801073e:	2001      	movs	r0, #1
 8010740:	e7f6      	b.n	8010730 <__any_on+0x30>

08010742 <_calloc_r>:
 8010742:	b538      	push	{r3, r4, r5, lr}
 8010744:	fb02 f401 	mul.w	r4, r2, r1
 8010748:	4621      	mov	r1, r4
 801074a:	f000 f857 	bl	80107fc <_malloc_r>
 801074e:	4605      	mov	r5, r0
 8010750:	b118      	cbz	r0, 801075a <_calloc_r+0x18>
 8010752:	4622      	mov	r2, r4
 8010754:	2100      	movs	r1, #0
 8010756:	f7fc fa24 	bl	800cba2 <memset>
 801075a:	4628      	mov	r0, r5
 801075c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010760 <_free_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	4605      	mov	r5, r0
 8010764:	2900      	cmp	r1, #0
 8010766:	d045      	beq.n	80107f4 <_free_r+0x94>
 8010768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801076c:	1f0c      	subs	r4, r1, #4
 801076e:	2b00      	cmp	r3, #0
 8010770:	bfb8      	it	lt
 8010772:	18e4      	addlt	r4, r4, r3
 8010774:	f000 fc0f 	bl	8010f96 <__malloc_lock>
 8010778:	4a1f      	ldr	r2, [pc, #124]	; (80107f8 <_free_r+0x98>)
 801077a:	6813      	ldr	r3, [r2, #0]
 801077c:	4610      	mov	r0, r2
 801077e:	b933      	cbnz	r3, 801078e <_free_r+0x2e>
 8010780:	6063      	str	r3, [r4, #4]
 8010782:	6014      	str	r4, [r2, #0]
 8010784:	4628      	mov	r0, r5
 8010786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801078a:	f000 bc05 	b.w	8010f98 <__malloc_unlock>
 801078e:	42a3      	cmp	r3, r4
 8010790:	d90c      	bls.n	80107ac <_free_r+0x4c>
 8010792:	6821      	ldr	r1, [r4, #0]
 8010794:	1862      	adds	r2, r4, r1
 8010796:	4293      	cmp	r3, r2
 8010798:	bf04      	itt	eq
 801079a:	681a      	ldreq	r2, [r3, #0]
 801079c:	685b      	ldreq	r3, [r3, #4]
 801079e:	6063      	str	r3, [r4, #4]
 80107a0:	bf04      	itt	eq
 80107a2:	1852      	addeq	r2, r2, r1
 80107a4:	6022      	streq	r2, [r4, #0]
 80107a6:	6004      	str	r4, [r0, #0]
 80107a8:	e7ec      	b.n	8010784 <_free_r+0x24>
 80107aa:	4613      	mov	r3, r2
 80107ac:	685a      	ldr	r2, [r3, #4]
 80107ae:	b10a      	cbz	r2, 80107b4 <_free_r+0x54>
 80107b0:	42a2      	cmp	r2, r4
 80107b2:	d9fa      	bls.n	80107aa <_free_r+0x4a>
 80107b4:	6819      	ldr	r1, [r3, #0]
 80107b6:	1858      	adds	r0, r3, r1
 80107b8:	42a0      	cmp	r0, r4
 80107ba:	d10b      	bne.n	80107d4 <_free_r+0x74>
 80107bc:	6820      	ldr	r0, [r4, #0]
 80107be:	4401      	add	r1, r0
 80107c0:	1858      	adds	r0, r3, r1
 80107c2:	4282      	cmp	r2, r0
 80107c4:	6019      	str	r1, [r3, #0]
 80107c6:	d1dd      	bne.n	8010784 <_free_r+0x24>
 80107c8:	6810      	ldr	r0, [r2, #0]
 80107ca:	6852      	ldr	r2, [r2, #4]
 80107cc:	605a      	str	r2, [r3, #4]
 80107ce:	4401      	add	r1, r0
 80107d0:	6019      	str	r1, [r3, #0]
 80107d2:	e7d7      	b.n	8010784 <_free_r+0x24>
 80107d4:	d902      	bls.n	80107dc <_free_r+0x7c>
 80107d6:	230c      	movs	r3, #12
 80107d8:	602b      	str	r3, [r5, #0]
 80107da:	e7d3      	b.n	8010784 <_free_r+0x24>
 80107dc:	6820      	ldr	r0, [r4, #0]
 80107de:	1821      	adds	r1, r4, r0
 80107e0:	428a      	cmp	r2, r1
 80107e2:	bf04      	itt	eq
 80107e4:	6811      	ldreq	r1, [r2, #0]
 80107e6:	6852      	ldreq	r2, [r2, #4]
 80107e8:	6062      	str	r2, [r4, #4]
 80107ea:	bf04      	itt	eq
 80107ec:	1809      	addeq	r1, r1, r0
 80107ee:	6021      	streq	r1, [r4, #0]
 80107f0:	605c      	str	r4, [r3, #4]
 80107f2:	e7c7      	b.n	8010784 <_free_r+0x24>
 80107f4:	bd38      	pop	{r3, r4, r5, pc}
 80107f6:	bf00      	nop
 80107f8:	2001a598 	.word	0x2001a598

080107fc <_malloc_r>:
 80107fc:	b570      	push	{r4, r5, r6, lr}
 80107fe:	1ccd      	adds	r5, r1, #3
 8010800:	f025 0503 	bic.w	r5, r5, #3
 8010804:	3508      	adds	r5, #8
 8010806:	2d0c      	cmp	r5, #12
 8010808:	bf38      	it	cc
 801080a:	250c      	movcc	r5, #12
 801080c:	2d00      	cmp	r5, #0
 801080e:	4606      	mov	r6, r0
 8010810:	db01      	blt.n	8010816 <_malloc_r+0x1a>
 8010812:	42a9      	cmp	r1, r5
 8010814:	d903      	bls.n	801081e <_malloc_r+0x22>
 8010816:	230c      	movs	r3, #12
 8010818:	6033      	str	r3, [r6, #0]
 801081a:	2000      	movs	r0, #0
 801081c:	bd70      	pop	{r4, r5, r6, pc}
 801081e:	f000 fbba 	bl	8010f96 <__malloc_lock>
 8010822:	4a21      	ldr	r2, [pc, #132]	; (80108a8 <_malloc_r+0xac>)
 8010824:	6814      	ldr	r4, [r2, #0]
 8010826:	4621      	mov	r1, r4
 8010828:	b991      	cbnz	r1, 8010850 <_malloc_r+0x54>
 801082a:	4c20      	ldr	r4, [pc, #128]	; (80108ac <_malloc_r+0xb0>)
 801082c:	6823      	ldr	r3, [r4, #0]
 801082e:	b91b      	cbnz	r3, 8010838 <_malloc_r+0x3c>
 8010830:	4630      	mov	r0, r6
 8010832:	f000 facf 	bl	8010dd4 <_sbrk_r>
 8010836:	6020      	str	r0, [r4, #0]
 8010838:	4629      	mov	r1, r5
 801083a:	4630      	mov	r0, r6
 801083c:	f000 faca 	bl	8010dd4 <_sbrk_r>
 8010840:	1c43      	adds	r3, r0, #1
 8010842:	d124      	bne.n	801088e <_malloc_r+0x92>
 8010844:	230c      	movs	r3, #12
 8010846:	6033      	str	r3, [r6, #0]
 8010848:	4630      	mov	r0, r6
 801084a:	f000 fba5 	bl	8010f98 <__malloc_unlock>
 801084e:	e7e4      	b.n	801081a <_malloc_r+0x1e>
 8010850:	680b      	ldr	r3, [r1, #0]
 8010852:	1b5b      	subs	r3, r3, r5
 8010854:	d418      	bmi.n	8010888 <_malloc_r+0x8c>
 8010856:	2b0b      	cmp	r3, #11
 8010858:	d90f      	bls.n	801087a <_malloc_r+0x7e>
 801085a:	600b      	str	r3, [r1, #0]
 801085c:	50cd      	str	r5, [r1, r3]
 801085e:	18cc      	adds	r4, r1, r3
 8010860:	4630      	mov	r0, r6
 8010862:	f000 fb99 	bl	8010f98 <__malloc_unlock>
 8010866:	f104 000b 	add.w	r0, r4, #11
 801086a:	1d23      	adds	r3, r4, #4
 801086c:	f020 0007 	bic.w	r0, r0, #7
 8010870:	1ac3      	subs	r3, r0, r3
 8010872:	d0d3      	beq.n	801081c <_malloc_r+0x20>
 8010874:	425a      	negs	r2, r3
 8010876:	50e2      	str	r2, [r4, r3]
 8010878:	e7d0      	b.n	801081c <_malloc_r+0x20>
 801087a:	428c      	cmp	r4, r1
 801087c:	684b      	ldr	r3, [r1, #4]
 801087e:	bf16      	itet	ne
 8010880:	6063      	strne	r3, [r4, #4]
 8010882:	6013      	streq	r3, [r2, #0]
 8010884:	460c      	movne	r4, r1
 8010886:	e7eb      	b.n	8010860 <_malloc_r+0x64>
 8010888:	460c      	mov	r4, r1
 801088a:	6849      	ldr	r1, [r1, #4]
 801088c:	e7cc      	b.n	8010828 <_malloc_r+0x2c>
 801088e:	1cc4      	adds	r4, r0, #3
 8010890:	f024 0403 	bic.w	r4, r4, #3
 8010894:	42a0      	cmp	r0, r4
 8010896:	d005      	beq.n	80108a4 <_malloc_r+0xa8>
 8010898:	1a21      	subs	r1, r4, r0
 801089a:	4630      	mov	r0, r6
 801089c:	f000 fa9a 	bl	8010dd4 <_sbrk_r>
 80108a0:	3001      	adds	r0, #1
 80108a2:	d0cf      	beq.n	8010844 <_malloc_r+0x48>
 80108a4:	6025      	str	r5, [r4, #0]
 80108a6:	e7db      	b.n	8010860 <_malloc_r+0x64>
 80108a8:	2001a598 	.word	0x2001a598
 80108ac:	2001a59c 	.word	0x2001a59c

080108b0 <__ssputs_r>:
 80108b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b4:	688e      	ldr	r6, [r1, #8]
 80108b6:	429e      	cmp	r6, r3
 80108b8:	4682      	mov	sl, r0
 80108ba:	460c      	mov	r4, r1
 80108bc:	4690      	mov	r8, r2
 80108be:	4699      	mov	r9, r3
 80108c0:	d837      	bhi.n	8010932 <__ssputs_r+0x82>
 80108c2:	898a      	ldrh	r2, [r1, #12]
 80108c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108c8:	d031      	beq.n	801092e <__ssputs_r+0x7e>
 80108ca:	6825      	ldr	r5, [r4, #0]
 80108cc:	6909      	ldr	r1, [r1, #16]
 80108ce:	1a6f      	subs	r7, r5, r1
 80108d0:	6965      	ldr	r5, [r4, #20]
 80108d2:	2302      	movs	r3, #2
 80108d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80108dc:	f109 0301 	add.w	r3, r9, #1
 80108e0:	443b      	add	r3, r7
 80108e2:	429d      	cmp	r5, r3
 80108e4:	bf38      	it	cc
 80108e6:	461d      	movcc	r5, r3
 80108e8:	0553      	lsls	r3, r2, #21
 80108ea:	d530      	bpl.n	801094e <__ssputs_r+0x9e>
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ff ff85 	bl	80107fc <_malloc_r>
 80108f2:	4606      	mov	r6, r0
 80108f4:	b950      	cbnz	r0, 801090c <__ssputs_r+0x5c>
 80108f6:	230c      	movs	r3, #12
 80108f8:	f8ca 3000 	str.w	r3, [sl]
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010902:	81a3      	strh	r3, [r4, #12]
 8010904:	f04f 30ff 	mov.w	r0, #4294967295
 8010908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801090c:	463a      	mov	r2, r7
 801090e:	6921      	ldr	r1, [r4, #16]
 8010910:	f7fc f93c 	bl	800cb8c <memcpy>
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801091e:	81a3      	strh	r3, [r4, #12]
 8010920:	6126      	str	r6, [r4, #16]
 8010922:	6165      	str	r5, [r4, #20]
 8010924:	443e      	add	r6, r7
 8010926:	1bed      	subs	r5, r5, r7
 8010928:	6026      	str	r6, [r4, #0]
 801092a:	60a5      	str	r5, [r4, #8]
 801092c:	464e      	mov	r6, r9
 801092e:	454e      	cmp	r6, r9
 8010930:	d900      	bls.n	8010934 <__ssputs_r+0x84>
 8010932:	464e      	mov	r6, r9
 8010934:	4632      	mov	r2, r6
 8010936:	4641      	mov	r1, r8
 8010938:	6820      	ldr	r0, [r4, #0]
 801093a:	f000 fb13 	bl	8010f64 <memmove>
 801093e:	68a3      	ldr	r3, [r4, #8]
 8010940:	1b9b      	subs	r3, r3, r6
 8010942:	60a3      	str	r3, [r4, #8]
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	441e      	add	r6, r3
 8010948:	6026      	str	r6, [r4, #0]
 801094a:	2000      	movs	r0, #0
 801094c:	e7dc      	b.n	8010908 <__ssputs_r+0x58>
 801094e:	462a      	mov	r2, r5
 8010950:	f000 fb23 	bl	8010f9a <_realloc_r>
 8010954:	4606      	mov	r6, r0
 8010956:	2800      	cmp	r0, #0
 8010958:	d1e2      	bne.n	8010920 <__ssputs_r+0x70>
 801095a:	6921      	ldr	r1, [r4, #16]
 801095c:	4650      	mov	r0, sl
 801095e:	f7ff feff 	bl	8010760 <_free_r>
 8010962:	e7c8      	b.n	80108f6 <__ssputs_r+0x46>

08010964 <_svfiprintf_r>:
 8010964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010968:	461d      	mov	r5, r3
 801096a:	898b      	ldrh	r3, [r1, #12]
 801096c:	061f      	lsls	r7, r3, #24
 801096e:	b09d      	sub	sp, #116	; 0x74
 8010970:	4680      	mov	r8, r0
 8010972:	460c      	mov	r4, r1
 8010974:	4616      	mov	r6, r2
 8010976:	d50f      	bpl.n	8010998 <_svfiprintf_r+0x34>
 8010978:	690b      	ldr	r3, [r1, #16]
 801097a:	b96b      	cbnz	r3, 8010998 <_svfiprintf_r+0x34>
 801097c:	2140      	movs	r1, #64	; 0x40
 801097e:	f7ff ff3d 	bl	80107fc <_malloc_r>
 8010982:	6020      	str	r0, [r4, #0]
 8010984:	6120      	str	r0, [r4, #16]
 8010986:	b928      	cbnz	r0, 8010994 <_svfiprintf_r+0x30>
 8010988:	230c      	movs	r3, #12
 801098a:	f8c8 3000 	str.w	r3, [r8]
 801098e:	f04f 30ff 	mov.w	r0, #4294967295
 8010992:	e0c8      	b.n	8010b26 <_svfiprintf_r+0x1c2>
 8010994:	2340      	movs	r3, #64	; 0x40
 8010996:	6163      	str	r3, [r4, #20]
 8010998:	2300      	movs	r3, #0
 801099a:	9309      	str	r3, [sp, #36]	; 0x24
 801099c:	2320      	movs	r3, #32
 801099e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109a2:	2330      	movs	r3, #48	; 0x30
 80109a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109a8:	9503      	str	r5, [sp, #12]
 80109aa:	f04f 0b01 	mov.w	fp, #1
 80109ae:	4637      	mov	r7, r6
 80109b0:	463d      	mov	r5, r7
 80109b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80109b6:	b10b      	cbz	r3, 80109bc <_svfiprintf_r+0x58>
 80109b8:	2b25      	cmp	r3, #37	; 0x25
 80109ba:	d13e      	bne.n	8010a3a <_svfiprintf_r+0xd6>
 80109bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80109c0:	d00b      	beq.n	80109da <_svfiprintf_r+0x76>
 80109c2:	4653      	mov	r3, sl
 80109c4:	4632      	mov	r2, r6
 80109c6:	4621      	mov	r1, r4
 80109c8:	4640      	mov	r0, r8
 80109ca:	f7ff ff71 	bl	80108b0 <__ssputs_r>
 80109ce:	3001      	adds	r0, #1
 80109d0:	f000 80a4 	beq.w	8010b1c <_svfiprintf_r+0x1b8>
 80109d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d6:	4453      	add	r3, sl
 80109d8:	9309      	str	r3, [sp, #36]	; 0x24
 80109da:	783b      	ldrb	r3, [r7, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	f000 809d 	beq.w	8010b1c <_svfiprintf_r+0x1b8>
 80109e2:	2300      	movs	r3, #0
 80109e4:	f04f 32ff 	mov.w	r2, #4294967295
 80109e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ec:	9304      	str	r3, [sp, #16]
 80109ee:	9307      	str	r3, [sp, #28]
 80109f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109f4:	931a      	str	r3, [sp, #104]	; 0x68
 80109f6:	462f      	mov	r7, r5
 80109f8:	2205      	movs	r2, #5
 80109fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80109fe:	4850      	ldr	r0, [pc, #320]	; (8010b40 <_svfiprintf_r+0x1dc>)
 8010a00:	f7ef fbee 	bl	80001e0 <memchr>
 8010a04:	9b04      	ldr	r3, [sp, #16]
 8010a06:	b9d0      	cbnz	r0, 8010a3e <_svfiprintf_r+0xda>
 8010a08:	06d9      	lsls	r1, r3, #27
 8010a0a:	bf44      	itt	mi
 8010a0c:	2220      	movmi	r2, #32
 8010a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a12:	071a      	lsls	r2, r3, #28
 8010a14:	bf44      	itt	mi
 8010a16:	222b      	movmi	r2, #43	; 0x2b
 8010a18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a1c:	782a      	ldrb	r2, [r5, #0]
 8010a1e:	2a2a      	cmp	r2, #42	; 0x2a
 8010a20:	d015      	beq.n	8010a4e <_svfiprintf_r+0xea>
 8010a22:	9a07      	ldr	r2, [sp, #28]
 8010a24:	462f      	mov	r7, r5
 8010a26:	2000      	movs	r0, #0
 8010a28:	250a      	movs	r5, #10
 8010a2a:	4639      	mov	r1, r7
 8010a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a30:	3b30      	subs	r3, #48	; 0x30
 8010a32:	2b09      	cmp	r3, #9
 8010a34:	d94d      	bls.n	8010ad2 <_svfiprintf_r+0x16e>
 8010a36:	b1b8      	cbz	r0, 8010a68 <_svfiprintf_r+0x104>
 8010a38:	e00f      	b.n	8010a5a <_svfiprintf_r+0xf6>
 8010a3a:	462f      	mov	r7, r5
 8010a3c:	e7b8      	b.n	80109b0 <_svfiprintf_r+0x4c>
 8010a3e:	4a40      	ldr	r2, [pc, #256]	; (8010b40 <_svfiprintf_r+0x1dc>)
 8010a40:	1a80      	subs	r0, r0, r2
 8010a42:	fa0b f000 	lsl.w	r0, fp, r0
 8010a46:	4318      	orrs	r0, r3
 8010a48:	9004      	str	r0, [sp, #16]
 8010a4a:	463d      	mov	r5, r7
 8010a4c:	e7d3      	b.n	80109f6 <_svfiprintf_r+0x92>
 8010a4e:	9a03      	ldr	r2, [sp, #12]
 8010a50:	1d11      	adds	r1, r2, #4
 8010a52:	6812      	ldr	r2, [r2, #0]
 8010a54:	9103      	str	r1, [sp, #12]
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	db01      	blt.n	8010a5e <_svfiprintf_r+0xfa>
 8010a5a:	9207      	str	r2, [sp, #28]
 8010a5c:	e004      	b.n	8010a68 <_svfiprintf_r+0x104>
 8010a5e:	4252      	negs	r2, r2
 8010a60:	f043 0302 	orr.w	r3, r3, #2
 8010a64:	9207      	str	r2, [sp, #28]
 8010a66:	9304      	str	r3, [sp, #16]
 8010a68:	783b      	ldrb	r3, [r7, #0]
 8010a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a6c:	d10c      	bne.n	8010a88 <_svfiprintf_r+0x124>
 8010a6e:	787b      	ldrb	r3, [r7, #1]
 8010a70:	2b2a      	cmp	r3, #42	; 0x2a
 8010a72:	d133      	bne.n	8010adc <_svfiprintf_r+0x178>
 8010a74:	9b03      	ldr	r3, [sp, #12]
 8010a76:	1d1a      	adds	r2, r3, #4
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	9203      	str	r2, [sp, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	bfb8      	it	lt
 8010a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a84:	3702      	adds	r7, #2
 8010a86:	9305      	str	r3, [sp, #20]
 8010a88:	4d2e      	ldr	r5, [pc, #184]	; (8010b44 <_svfiprintf_r+0x1e0>)
 8010a8a:	7839      	ldrb	r1, [r7, #0]
 8010a8c:	2203      	movs	r2, #3
 8010a8e:	4628      	mov	r0, r5
 8010a90:	f7ef fba6 	bl	80001e0 <memchr>
 8010a94:	b138      	cbz	r0, 8010aa6 <_svfiprintf_r+0x142>
 8010a96:	2340      	movs	r3, #64	; 0x40
 8010a98:	1b40      	subs	r0, r0, r5
 8010a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8010a9e:	9b04      	ldr	r3, [sp, #16]
 8010aa0:	4303      	orrs	r3, r0
 8010aa2:	3701      	adds	r7, #1
 8010aa4:	9304      	str	r3, [sp, #16]
 8010aa6:	7839      	ldrb	r1, [r7, #0]
 8010aa8:	4827      	ldr	r0, [pc, #156]	; (8010b48 <_svfiprintf_r+0x1e4>)
 8010aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aae:	2206      	movs	r2, #6
 8010ab0:	1c7e      	adds	r6, r7, #1
 8010ab2:	f7ef fb95 	bl	80001e0 <memchr>
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d038      	beq.n	8010b2c <_svfiprintf_r+0x1c8>
 8010aba:	4b24      	ldr	r3, [pc, #144]	; (8010b4c <_svfiprintf_r+0x1e8>)
 8010abc:	bb13      	cbnz	r3, 8010b04 <_svfiprintf_r+0x1a0>
 8010abe:	9b03      	ldr	r3, [sp, #12]
 8010ac0:	3307      	adds	r3, #7
 8010ac2:	f023 0307 	bic.w	r3, r3, #7
 8010ac6:	3308      	adds	r3, #8
 8010ac8:	9303      	str	r3, [sp, #12]
 8010aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010acc:	444b      	add	r3, r9
 8010ace:	9309      	str	r3, [sp, #36]	; 0x24
 8010ad0:	e76d      	b.n	80109ae <_svfiprintf_r+0x4a>
 8010ad2:	fb05 3202 	mla	r2, r5, r2, r3
 8010ad6:	2001      	movs	r0, #1
 8010ad8:	460f      	mov	r7, r1
 8010ada:	e7a6      	b.n	8010a2a <_svfiprintf_r+0xc6>
 8010adc:	2300      	movs	r3, #0
 8010ade:	3701      	adds	r7, #1
 8010ae0:	9305      	str	r3, [sp, #20]
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	250a      	movs	r5, #10
 8010ae6:	4638      	mov	r0, r7
 8010ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010aec:	3a30      	subs	r2, #48	; 0x30
 8010aee:	2a09      	cmp	r2, #9
 8010af0:	d903      	bls.n	8010afa <_svfiprintf_r+0x196>
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d0c8      	beq.n	8010a88 <_svfiprintf_r+0x124>
 8010af6:	9105      	str	r1, [sp, #20]
 8010af8:	e7c6      	b.n	8010a88 <_svfiprintf_r+0x124>
 8010afa:	fb05 2101 	mla	r1, r5, r1, r2
 8010afe:	2301      	movs	r3, #1
 8010b00:	4607      	mov	r7, r0
 8010b02:	e7f0      	b.n	8010ae6 <_svfiprintf_r+0x182>
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	4622      	mov	r2, r4
 8010b0a:	4b11      	ldr	r3, [pc, #68]	; (8010b50 <_svfiprintf_r+0x1ec>)
 8010b0c:	a904      	add	r1, sp, #16
 8010b0e:	4640      	mov	r0, r8
 8010b10:	f7fc f8e4 	bl	800ccdc <_printf_float>
 8010b14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010b18:	4681      	mov	r9, r0
 8010b1a:	d1d6      	bne.n	8010aca <_svfiprintf_r+0x166>
 8010b1c:	89a3      	ldrh	r3, [r4, #12]
 8010b1e:	065b      	lsls	r3, r3, #25
 8010b20:	f53f af35 	bmi.w	801098e <_svfiprintf_r+0x2a>
 8010b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b26:	b01d      	add	sp, #116	; 0x74
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	ab03      	add	r3, sp, #12
 8010b2e:	9300      	str	r3, [sp, #0]
 8010b30:	4622      	mov	r2, r4
 8010b32:	4b07      	ldr	r3, [pc, #28]	; (8010b50 <_svfiprintf_r+0x1ec>)
 8010b34:	a904      	add	r1, sp, #16
 8010b36:	4640      	mov	r0, r8
 8010b38:	f7fc fb86 	bl	800d248 <_printf_i>
 8010b3c:	e7ea      	b.n	8010b14 <_svfiprintf_r+0x1b0>
 8010b3e:	bf00      	nop
 8010b40:	08011864 	.word	0x08011864
 8010b44:	0801186a 	.word	0x0801186a
 8010b48:	0801186e 	.word	0x0801186e
 8010b4c:	0800ccdd 	.word	0x0800ccdd
 8010b50:	080108b1 	.word	0x080108b1

08010b54 <__sfputc_r>:
 8010b54:	6893      	ldr	r3, [r2, #8]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	b410      	push	{r4}
 8010b5c:	6093      	str	r3, [r2, #8]
 8010b5e:	da08      	bge.n	8010b72 <__sfputc_r+0x1e>
 8010b60:	6994      	ldr	r4, [r2, #24]
 8010b62:	42a3      	cmp	r3, r4
 8010b64:	db01      	blt.n	8010b6a <__sfputc_r+0x16>
 8010b66:	290a      	cmp	r1, #10
 8010b68:	d103      	bne.n	8010b72 <__sfputc_r+0x1e>
 8010b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b6e:	f7fd bdb1 	b.w	800e6d4 <__swbuf_r>
 8010b72:	6813      	ldr	r3, [r2, #0]
 8010b74:	1c58      	adds	r0, r3, #1
 8010b76:	6010      	str	r0, [r2, #0]
 8010b78:	7019      	strb	r1, [r3, #0]
 8010b7a:	4608      	mov	r0, r1
 8010b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <__sfputs_r>:
 8010b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b84:	4606      	mov	r6, r0
 8010b86:	460f      	mov	r7, r1
 8010b88:	4614      	mov	r4, r2
 8010b8a:	18d5      	adds	r5, r2, r3
 8010b8c:	42ac      	cmp	r4, r5
 8010b8e:	d101      	bne.n	8010b94 <__sfputs_r+0x12>
 8010b90:	2000      	movs	r0, #0
 8010b92:	e007      	b.n	8010ba4 <__sfputs_r+0x22>
 8010b94:	463a      	mov	r2, r7
 8010b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b9a:	4630      	mov	r0, r6
 8010b9c:	f7ff ffda 	bl	8010b54 <__sfputc_r>
 8010ba0:	1c43      	adds	r3, r0, #1
 8010ba2:	d1f3      	bne.n	8010b8c <__sfputs_r+0xa>
 8010ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ba8 <_vfiprintf_r>:
 8010ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bac:	460c      	mov	r4, r1
 8010bae:	b09d      	sub	sp, #116	; 0x74
 8010bb0:	4617      	mov	r7, r2
 8010bb2:	461d      	mov	r5, r3
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	b118      	cbz	r0, 8010bc0 <_vfiprintf_r+0x18>
 8010bb8:	6983      	ldr	r3, [r0, #24]
 8010bba:	b90b      	cbnz	r3, 8010bc0 <_vfiprintf_r+0x18>
 8010bbc:	f7fe fd80 	bl	800f6c0 <__sinit>
 8010bc0:	4b7c      	ldr	r3, [pc, #496]	; (8010db4 <_vfiprintf_r+0x20c>)
 8010bc2:	429c      	cmp	r4, r3
 8010bc4:	d158      	bne.n	8010c78 <_vfiprintf_r+0xd0>
 8010bc6:	6874      	ldr	r4, [r6, #4]
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	0718      	lsls	r0, r3, #28
 8010bcc:	d55e      	bpl.n	8010c8c <_vfiprintf_r+0xe4>
 8010bce:	6923      	ldr	r3, [r4, #16]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d05b      	beq.n	8010c8c <_vfiprintf_r+0xe4>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8010bd8:	2320      	movs	r3, #32
 8010bda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bde:	2330      	movs	r3, #48	; 0x30
 8010be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010be4:	9503      	str	r5, [sp, #12]
 8010be6:	f04f 0b01 	mov.w	fp, #1
 8010bea:	46b8      	mov	r8, r7
 8010bec:	4645      	mov	r5, r8
 8010bee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010bf2:	b10b      	cbz	r3, 8010bf8 <_vfiprintf_r+0x50>
 8010bf4:	2b25      	cmp	r3, #37	; 0x25
 8010bf6:	d154      	bne.n	8010ca2 <_vfiprintf_r+0xfa>
 8010bf8:	ebb8 0a07 	subs.w	sl, r8, r7
 8010bfc:	d00b      	beq.n	8010c16 <_vfiprintf_r+0x6e>
 8010bfe:	4653      	mov	r3, sl
 8010c00:	463a      	mov	r2, r7
 8010c02:	4621      	mov	r1, r4
 8010c04:	4630      	mov	r0, r6
 8010c06:	f7ff ffbc 	bl	8010b82 <__sfputs_r>
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	f000 80c2 	beq.w	8010d94 <_vfiprintf_r+0x1ec>
 8010c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c12:	4453      	add	r3, sl
 8010c14:	9309      	str	r3, [sp, #36]	; 0x24
 8010c16:	f898 3000 	ldrb.w	r3, [r8]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 80ba 	beq.w	8010d94 <_vfiprintf_r+0x1ec>
 8010c20:	2300      	movs	r3, #0
 8010c22:	f04f 32ff 	mov.w	r2, #4294967295
 8010c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c2a:	9304      	str	r3, [sp, #16]
 8010c2c:	9307      	str	r3, [sp, #28]
 8010c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c32:	931a      	str	r3, [sp, #104]	; 0x68
 8010c34:	46a8      	mov	r8, r5
 8010c36:	2205      	movs	r2, #5
 8010c38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010c3c:	485e      	ldr	r0, [pc, #376]	; (8010db8 <_vfiprintf_r+0x210>)
 8010c3e:	f7ef facf 	bl	80001e0 <memchr>
 8010c42:	9b04      	ldr	r3, [sp, #16]
 8010c44:	bb78      	cbnz	r0, 8010ca6 <_vfiprintf_r+0xfe>
 8010c46:	06d9      	lsls	r1, r3, #27
 8010c48:	bf44      	itt	mi
 8010c4a:	2220      	movmi	r2, #32
 8010c4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010c50:	071a      	lsls	r2, r3, #28
 8010c52:	bf44      	itt	mi
 8010c54:	222b      	movmi	r2, #43	; 0x2b
 8010c56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010c5a:	782a      	ldrb	r2, [r5, #0]
 8010c5c:	2a2a      	cmp	r2, #42	; 0x2a
 8010c5e:	d02a      	beq.n	8010cb6 <_vfiprintf_r+0x10e>
 8010c60:	9a07      	ldr	r2, [sp, #28]
 8010c62:	46a8      	mov	r8, r5
 8010c64:	2000      	movs	r0, #0
 8010c66:	250a      	movs	r5, #10
 8010c68:	4641      	mov	r1, r8
 8010c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c6e:	3b30      	subs	r3, #48	; 0x30
 8010c70:	2b09      	cmp	r3, #9
 8010c72:	d969      	bls.n	8010d48 <_vfiprintf_r+0x1a0>
 8010c74:	b360      	cbz	r0, 8010cd0 <_vfiprintf_r+0x128>
 8010c76:	e024      	b.n	8010cc2 <_vfiprintf_r+0x11a>
 8010c78:	4b50      	ldr	r3, [pc, #320]	; (8010dbc <_vfiprintf_r+0x214>)
 8010c7a:	429c      	cmp	r4, r3
 8010c7c:	d101      	bne.n	8010c82 <_vfiprintf_r+0xda>
 8010c7e:	68b4      	ldr	r4, [r6, #8]
 8010c80:	e7a2      	b.n	8010bc8 <_vfiprintf_r+0x20>
 8010c82:	4b4f      	ldr	r3, [pc, #316]	; (8010dc0 <_vfiprintf_r+0x218>)
 8010c84:	429c      	cmp	r4, r3
 8010c86:	bf08      	it	eq
 8010c88:	68f4      	ldreq	r4, [r6, #12]
 8010c8a:	e79d      	b.n	8010bc8 <_vfiprintf_r+0x20>
 8010c8c:	4621      	mov	r1, r4
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7fd fd72 	bl	800e778 <__swsetup_r>
 8010c94:	2800      	cmp	r0, #0
 8010c96:	d09d      	beq.n	8010bd4 <_vfiprintf_r+0x2c>
 8010c98:	f04f 30ff 	mov.w	r0, #4294967295
 8010c9c:	b01d      	add	sp, #116	; 0x74
 8010c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca2:	46a8      	mov	r8, r5
 8010ca4:	e7a2      	b.n	8010bec <_vfiprintf_r+0x44>
 8010ca6:	4a44      	ldr	r2, [pc, #272]	; (8010db8 <_vfiprintf_r+0x210>)
 8010ca8:	1a80      	subs	r0, r0, r2
 8010caa:	fa0b f000 	lsl.w	r0, fp, r0
 8010cae:	4318      	orrs	r0, r3
 8010cb0:	9004      	str	r0, [sp, #16]
 8010cb2:	4645      	mov	r5, r8
 8010cb4:	e7be      	b.n	8010c34 <_vfiprintf_r+0x8c>
 8010cb6:	9a03      	ldr	r2, [sp, #12]
 8010cb8:	1d11      	adds	r1, r2, #4
 8010cba:	6812      	ldr	r2, [r2, #0]
 8010cbc:	9103      	str	r1, [sp, #12]
 8010cbe:	2a00      	cmp	r2, #0
 8010cc0:	db01      	blt.n	8010cc6 <_vfiprintf_r+0x11e>
 8010cc2:	9207      	str	r2, [sp, #28]
 8010cc4:	e004      	b.n	8010cd0 <_vfiprintf_r+0x128>
 8010cc6:	4252      	negs	r2, r2
 8010cc8:	f043 0302 	orr.w	r3, r3, #2
 8010ccc:	9207      	str	r2, [sp, #28]
 8010cce:	9304      	str	r3, [sp, #16]
 8010cd0:	f898 3000 	ldrb.w	r3, [r8]
 8010cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8010cd6:	d10e      	bne.n	8010cf6 <_vfiprintf_r+0x14e>
 8010cd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010cdc:	2b2a      	cmp	r3, #42	; 0x2a
 8010cde:	d138      	bne.n	8010d52 <_vfiprintf_r+0x1aa>
 8010ce0:	9b03      	ldr	r3, [sp, #12]
 8010ce2:	1d1a      	adds	r2, r3, #4
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	9203      	str	r2, [sp, #12]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	bfb8      	it	lt
 8010cec:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cf0:	f108 0802 	add.w	r8, r8, #2
 8010cf4:	9305      	str	r3, [sp, #20]
 8010cf6:	4d33      	ldr	r5, [pc, #204]	; (8010dc4 <_vfiprintf_r+0x21c>)
 8010cf8:	f898 1000 	ldrb.w	r1, [r8]
 8010cfc:	2203      	movs	r2, #3
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f7ef fa6e 	bl	80001e0 <memchr>
 8010d04:	b140      	cbz	r0, 8010d18 <_vfiprintf_r+0x170>
 8010d06:	2340      	movs	r3, #64	; 0x40
 8010d08:	1b40      	subs	r0, r0, r5
 8010d0a:	fa03 f000 	lsl.w	r0, r3, r0
 8010d0e:	9b04      	ldr	r3, [sp, #16]
 8010d10:	4303      	orrs	r3, r0
 8010d12:	f108 0801 	add.w	r8, r8, #1
 8010d16:	9304      	str	r3, [sp, #16]
 8010d18:	f898 1000 	ldrb.w	r1, [r8]
 8010d1c:	482a      	ldr	r0, [pc, #168]	; (8010dc8 <_vfiprintf_r+0x220>)
 8010d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d22:	2206      	movs	r2, #6
 8010d24:	f108 0701 	add.w	r7, r8, #1
 8010d28:	f7ef fa5a 	bl	80001e0 <memchr>
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d037      	beq.n	8010da0 <_vfiprintf_r+0x1f8>
 8010d30:	4b26      	ldr	r3, [pc, #152]	; (8010dcc <_vfiprintf_r+0x224>)
 8010d32:	bb1b      	cbnz	r3, 8010d7c <_vfiprintf_r+0x1d4>
 8010d34:	9b03      	ldr	r3, [sp, #12]
 8010d36:	3307      	adds	r3, #7
 8010d38:	f023 0307 	bic.w	r3, r3, #7
 8010d3c:	3308      	adds	r3, #8
 8010d3e:	9303      	str	r3, [sp, #12]
 8010d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d42:	444b      	add	r3, r9
 8010d44:	9309      	str	r3, [sp, #36]	; 0x24
 8010d46:	e750      	b.n	8010bea <_vfiprintf_r+0x42>
 8010d48:	fb05 3202 	mla	r2, r5, r2, r3
 8010d4c:	2001      	movs	r0, #1
 8010d4e:	4688      	mov	r8, r1
 8010d50:	e78a      	b.n	8010c68 <_vfiprintf_r+0xc0>
 8010d52:	2300      	movs	r3, #0
 8010d54:	f108 0801 	add.w	r8, r8, #1
 8010d58:	9305      	str	r3, [sp, #20]
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	250a      	movs	r5, #10
 8010d5e:	4640      	mov	r0, r8
 8010d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d64:	3a30      	subs	r2, #48	; 0x30
 8010d66:	2a09      	cmp	r2, #9
 8010d68:	d903      	bls.n	8010d72 <_vfiprintf_r+0x1ca>
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d0c3      	beq.n	8010cf6 <_vfiprintf_r+0x14e>
 8010d6e:	9105      	str	r1, [sp, #20]
 8010d70:	e7c1      	b.n	8010cf6 <_vfiprintf_r+0x14e>
 8010d72:	fb05 2101 	mla	r1, r5, r1, r2
 8010d76:	2301      	movs	r3, #1
 8010d78:	4680      	mov	r8, r0
 8010d7a:	e7f0      	b.n	8010d5e <_vfiprintf_r+0x1b6>
 8010d7c:	ab03      	add	r3, sp, #12
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	4622      	mov	r2, r4
 8010d82:	4b13      	ldr	r3, [pc, #76]	; (8010dd0 <_vfiprintf_r+0x228>)
 8010d84:	a904      	add	r1, sp, #16
 8010d86:	4630      	mov	r0, r6
 8010d88:	f7fb ffa8 	bl	800ccdc <_printf_float>
 8010d8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010d90:	4681      	mov	r9, r0
 8010d92:	d1d5      	bne.n	8010d40 <_vfiprintf_r+0x198>
 8010d94:	89a3      	ldrh	r3, [r4, #12]
 8010d96:	065b      	lsls	r3, r3, #25
 8010d98:	f53f af7e 	bmi.w	8010c98 <_vfiprintf_r+0xf0>
 8010d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d9e:	e77d      	b.n	8010c9c <_vfiprintf_r+0xf4>
 8010da0:	ab03      	add	r3, sp, #12
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	4622      	mov	r2, r4
 8010da6:	4b0a      	ldr	r3, [pc, #40]	; (8010dd0 <_vfiprintf_r+0x228>)
 8010da8:	a904      	add	r1, sp, #16
 8010daa:	4630      	mov	r0, r6
 8010dac:	f7fc fa4c 	bl	800d248 <_printf_i>
 8010db0:	e7ec      	b.n	8010d8c <_vfiprintf_r+0x1e4>
 8010db2:	bf00      	nop
 8010db4:	08011718 	.word	0x08011718
 8010db8:	08011864 	.word	0x08011864
 8010dbc:	08011738 	.word	0x08011738
 8010dc0:	080116f8 	.word	0x080116f8
 8010dc4:	0801186a 	.word	0x0801186a
 8010dc8:	0801186e 	.word	0x0801186e
 8010dcc:	0800ccdd 	.word	0x0800ccdd
 8010dd0:	08010b83 	.word	0x08010b83

08010dd4 <_sbrk_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	4c06      	ldr	r4, [pc, #24]	; (8010df0 <_sbrk_r+0x1c>)
 8010dd8:	2300      	movs	r3, #0
 8010dda:	4605      	mov	r5, r0
 8010ddc:	4608      	mov	r0, r1
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	f7f5 fd4e 	bl	8006880 <_sbrk>
 8010de4:	1c43      	adds	r3, r0, #1
 8010de6:	d102      	bne.n	8010dee <_sbrk_r+0x1a>
 8010de8:	6823      	ldr	r3, [r4, #0]
 8010dea:	b103      	cbz	r3, 8010dee <_sbrk_r+0x1a>
 8010dec:	602b      	str	r3, [r5, #0]
 8010dee:	bd38      	pop	{r3, r4, r5, pc}
 8010df0:	2001aae0 	.word	0x2001aae0

08010df4 <__sread>:
 8010df4:	b510      	push	{r4, lr}
 8010df6:	460c      	mov	r4, r1
 8010df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfc:	f000 f8f4 	bl	8010fe8 <_read_r>
 8010e00:	2800      	cmp	r0, #0
 8010e02:	bfab      	itete	ge
 8010e04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e06:	89a3      	ldrhlt	r3, [r4, #12]
 8010e08:	181b      	addge	r3, r3, r0
 8010e0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e0e:	bfac      	ite	ge
 8010e10:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e12:	81a3      	strhlt	r3, [r4, #12]
 8010e14:	bd10      	pop	{r4, pc}

08010e16 <__swrite>:
 8010e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e1a:	461f      	mov	r7, r3
 8010e1c:	898b      	ldrh	r3, [r1, #12]
 8010e1e:	05db      	lsls	r3, r3, #23
 8010e20:	4605      	mov	r5, r0
 8010e22:	460c      	mov	r4, r1
 8010e24:	4616      	mov	r6, r2
 8010e26:	d505      	bpl.n	8010e34 <__swrite+0x1e>
 8010e28:	2302      	movs	r3, #2
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e30:	f000 f886 	bl	8010f40 <_lseek_r>
 8010e34:	89a3      	ldrh	r3, [r4, #12]
 8010e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e3e:	81a3      	strh	r3, [r4, #12]
 8010e40:	4632      	mov	r2, r6
 8010e42:	463b      	mov	r3, r7
 8010e44:	4628      	mov	r0, r5
 8010e46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e4a:	f000 b835 	b.w	8010eb8 <_write_r>

08010e4e <__sseek>:
 8010e4e:	b510      	push	{r4, lr}
 8010e50:	460c      	mov	r4, r1
 8010e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e56:	f000 f873 	bl	8010f40 <_lseek_r>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	89a3      	ldrh	r3, [r4, #12]
 8010e5e:	bf15      	itete	ne
 8010e60:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e6a:	81a3      	strheq	r3, [r4, #12]
 8010e6c:	bf18      	it	ne
 8010e6e:	81a3      	strhne	r3, [r4, #12]
 8010e70:	bd10      	pop	{r4, pc}

08010e72 <__sclose>:
 8010e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e76:	f000 b831 	b.w	8010edc <_close_r>

08010e7a <strncmp>:
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	b16a      	cbz	r2, 8010e9a <strncmp+0x20>
 8010e7e:	3901      	subs	r1, #1
 8010e80:	1884      	adds	r4, r0, r2
 8010e82:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010e86:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d103      	bne.n	8010e96 <strncmp+0x1c>
 8010e8e:	42a0      	cmp	r0, r4
 8010e90:	d001      	beq.n	8010e96 <strncmp+0x1c>
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1f5      	bne.n	8010e82 <strncmp+0x8>
 8010e96:	1a98      	subs	r0, r3, r2
 8010e98:	bd10      	pop	{r4, pc}
 8010e9a:	4610      	mov	r0, r2
 8010e9c:	e7fc      	b.n	8010e98 <strncmp+0x1e>

08010e9e <__ascii_wctomb>:
 8010e9e:	b149      	cbz	r1, 8010eb4 <__ascii_wctomb+0x16>
 8010ea0:	2aff      	cmp	r2, #255	; 0xff
 8010ea2:	bf85      	ittet	hi
 8010ea4:	238a      	movhi	r3, #138	; 0x8a
 8010ea6:	6003      	strhi	r3, [r0, #0]
 8010ea8:	700a      	strbls	r2, [r1, #0]
 8010eaa:	f04f 30ff 	movhi.w	r0, #4294967295
 8010eae:	bf98      	it	ls
 8010eb0:	2001      	movls	r0, #1
 8010eb2:	4770      	bx	lr
 8010eb4:	4608      	mov	r0, r1
 8010eb6:	4770      	bx	lr

08010eb8 <_write_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4c07      	ldr	r4, [pc, #28]	; (8010ed8 <_write_r+0x20>)
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	4608      	mov	r0, r1
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	6022      	str	r2, [r4, #0]
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	f7f5 fc89 	bl	80067de <_write>
 8010ecc:	1c43      	adds	r3, r0, #1
 8010ece:	d102      	bne.n	8010ed6 <_write_r+0x1e>
 8010ed0:	6823      	ldr	r3, [r4, #0]
 8010ed2:	b103      	cbz	r3, 8010ed6 <_write_r+0x1e>
 8010ed4:	602b      	str	r3, [r5, #0]
 8010ed6:	bd38      	pop	{r3, r4, r5, pc}
 8010ed8:	2001aae0 	.word	0x2001aae0

08010edc <_close_r>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	4c06      	ldr	r4, [pc, #24]	; (8010ef8 <_close_r+0x1c>)
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	4605      	mov	r5, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	6023      	str	r3, [r4, #0]
 8010ee8:	f7f5 fc95 	bl	8006816 <_close>
 8010eec:	1c43      	adds	r3, r0, #1
 8010eee:	d102      	bne.n	8010ef6 <_close_r+0x1a>
 8010ef0:	6823      	ldr	r3, [r4, #0]
 8010ef2:	b103      	cbz	r3, 8010ef6 <_close_r+0x1a>
 8010ef4:	602b      	str	r3, [r5, #0]
 8010ef6:	bd38      	pop	{r3, r4, r5, pc}
 8010ef8:	2001aae0 	.word	0x2001aae0

08010efc <_fstat_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4c07      	ldr	r4, [pc, #28]	; (8010f1c <_fstat_r+0x20>)
 8010f00:	2300      	movs	r3, #0
 8010f02:	4605      	mov	r5, r0
 8010f04:	4608      	mov	r0, r1
 8010f06:	4611      	mov	r1, r2
 8010f08:	6023      	str	r3, [r4, #0]
 8010f0a:	f7f5 fc90 	bl	800682e <_fstat>
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	d102      	bne.n	8010f18 <_fstat_r+0x1c>
 8010f12:	6823      	ldr	r3, [r4, #0]
 8010f14:	b103      	cbz	r3, 8010f18 <_fstat_r+0x1c>
 8010f16:	602b      	str	r3, [r5, #0]
 8010f18:	bd38      	pop	{r3, r4, r5, pc}
 8010f1a:	bf00      	nop
 8010f1c:	2001aae0 	.word	0x2001aae0

08010f20 <_isatty_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4c06      	ldr	r4, [pc, #24]	; (8010f3c <_isatty_r+0x1c>)
 8010f24:	2300      	movs	r3, #0
 8010f26:	4605      	mov	r5, r0
 8010f28:	4608      	mov	r0, r1
 8010f2a:	6023      	str	r3, [r4, #0]
 8010f2c:	f7f5 fc8f 	bl	800684e <_isatty>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_isatty_r+0x1a>
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_isatty_r+0x1a>
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	2001aae0 	.word	0x2001aae0

08010f40 <_lseek_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	4c07      	ldr	r4, [pc, #28]	; (8010f60 <_lseek_r+0x20>)
 8010f44:	4605      	mov	r5, r0
 8010f46:	4608      	mov	r0, r1
 8010f48:	4611      	mov	r1, r2
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	6022      	str	r2, [r4, #0]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f7f5 fc88 	bl	8006864 <_lseek>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_lseek_r+0x1e>
 8010f58:	6823      	ldr	r3, [r4, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_lseek_r+0x1e>
 8010f5c:	602b      	str	r3, [r5, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	2001aae0 	.word	0x2001aae0

08010f64 <memmove>:
 8010f64:	4288      	cmp	r0, r1
 8010f66:	b510      	push	{r4, lr}
 8010f68:	eb01 0302 	add.w	r3, r1, r2
 8010f6c:	d807      	bhi.n	8010f7e <memmove+0x1a>
 8010f6e:	1e42      	subs	r2, r0, #1
 8010f70:	4299      	cmp	r1, r3
 8010f72:	d00a      	beq.n	8010f8a <memmove+0x26>
 8010f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f78:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010f7c:	e7f8      	b.n	8010f70 <memmove+0xc>
 8010f7e:	4283      	cmp	r3, r0
 8010f80:	d9f5      	bls.n	8010f6e <memmove+0xa>
 8010f82:	1881      	adds	r1, r0, r2
 8010f84:	1ad2      	subs	r2, r2, r3
 8010f86:	42d3      	cmn	r3, r2
 8010f88:	d100      	bne.n	8010f8c <memmove+0x28>
 8010f8a:	bd10      	pop	{r4, pc}
 8010f8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010f94:	e7f7      	b.n	8010f86 <memmove+0x22>

08010f96 <__malloc_lock>:
 8010f96:	4770      	bx	lr

08010f98 <__malloc_unlock>:
 8010f98:	4770      	bx	lr

08010f9a <_realloc_r>:
 8010f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9c:	4607      	mov	r7, r0
 8010f9e:	4614      	mov	r4, r2
 8010fa0:	460e      	mov	r6, r1
 8010fa2:	b921      	cbnz	r1, 8010fae <_realloc_r+0x14>
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010faa:	f7ff bc27 	b.w	80107fc <_malloc_r>
 8010fae:	b922      	cbnz	r2, 8010fba <_realloc_r+0x20>
 8010fb0:	f7ff fbd6 	bl	8010760 <_free_r>
 8010fb4:	4625      	mov	r5, r4
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fba:	f000 f827 	bl	801100c <_malloc_usable_size_r>
 8010fbe:	42a0      	cmp	r0, r4
 8010fc0:	d20f      	bcs.n	8010fe2 <_realloc_r+0x48>
 8010fc2:	4621      	mov	r1, r4
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	f7ff fc19 	bl	80107fc <_malloc_r>
 8010fca:	4605      	mov	r5, r0
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d0f2      	beq.n	8010fb6 <_realloc_r+0x1c>
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	f7fb fdda 	bl	800cb8c <memcpy>
 8010fd8:	4631      	mov	r1, r6
 8010fda:	4638      	mov	r0, r7
 8010fdc:	f7ff fbc0 	bl	8010760 <_free_r>
 8010fe0:	e7e9      	b.n	8010fb6 <_realloc_r+0x1c>
 8010fe2:	4635      	mov	r5, r6
 8010fe4:	e7e7      	b.n	8010fb6 <_realloc_r+0x1c>
	...

08010fe8 <_read_r>:
 8010fe8:	b538      	push	{r3, r4, r5, lr}
 8010fea:	4c07      	ldr	r4, [pc, #28]	; (8011008 <_read_r+0x20>)
 8010fec:	4605      	mov	r5, r0
 8010fee:	4608      	mov	r0, r1
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	6022      	str	r2, [r4, #0]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f7f5 fbd4 	bl	80067a4 <_read>
 8010ffc:	1c43      	adds	r3, r0, #1
 8010ffe:	d102      	bne.n	8011006 <_read_r+0x1e>
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	b103      	cbz	r3, 8011006 <_read_r+0x1e>
 8011004:	602b      	str	r3, [r5, #0]
 8011006:	bd38      	pop	{r3, r4, r5, pc}
 8011008:	2001aae0 	.word	0x2001aae0

0801100c <_malloc_usable_size_r>:
 801100c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011010:	1f18      	subs	r0, r3, #4
 8011012:	2b00      	cmp	r3, #0
 8011014:	bfbc      	itt	lt
 8011016:	580b      	ldrlt	r3, [r1, r0]
 8011018:	18c0      	addlt	r0, r0, r3
 801101a:	4770      	bx	lr

0801101c <_init>:
 801101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101e:	bf00      	nop
 8011020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011022:	bc08      	pop	{r3}
 8011024:	469e      	mov	lr, r3
 8011026:	4770      	bx	lr

08011028 <_fini>:
 8011028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801102a:	bf00      	nop
 801102c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102e:	bc08      	pop	{r3}
 8011030:	469e      	mov	lr, r3
 8011032:	4770      	bx	lr

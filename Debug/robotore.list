
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800c170  0800c170  0001c170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c448  0800c448  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c450  0800c450  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c450  0800c450  0001c450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c454  0800c454  0001c454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000210  0800c668  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800c668  000208bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001643c  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000331d  00000000  00000000  0003667c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001540  00000000  00000000  000399a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002210e  00000000  00000000  0003c290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012730  00000000  00000000  0005e39e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c86cb  00000000  00000000  00070ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00139199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006504  00000000  00000000  00139214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c158 	.word	0x0800c158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800c158 	.word	0x0800c158

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 8000f8c:	213c      	movs	r1, #60	; 0x3c
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <initEncoder+0x28>)
<<<<<<< HEAD
 8000f90:	f006 fa26 	bl	80073e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8000f94:	213c      	movs	r1, #60	; 0x3c
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <initEncoder+0x2c>)
 8000f98:	f006 fa22 	bl	80073e0 <HAL_TIM_Encoder_Start>
=======
 8000f90:	f006 fa28 	bl	80073e4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8000f94:	213c      	movs	r1, #60	; 0x3c
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <initEncoder+0x2c>)
 8000f98:	f006 fa24 	bl	80073e4 <HAL_TIM_Encoder_Start>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	TIM3 -> CNT = CNT_OFFSET;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <initEncoder+0x30>)
 8000f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <initEncoder+0x34>)
 8000fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000418 	.word	0x20000418
 8000fb4:	200003d8 	.word	0x200003d8
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8000fc0:	b598      	push	{r3, r4, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <updateEncoderCnt+0x138>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000fce:	3b10      	subs	r3, #16
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <updateEncoderCnt+0x13c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8000fd8:	4b49      	ldr	r3, [pc, #292]	; (8001100 <updateEncoderCnt+0x140>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <updateEncoderCnt+0x144>)
 8000fea:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <updateEncoderCnt+0x148>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b41      	ldr	r3, [pc, #260]	; (80010fc <updateEncoderCnt+0x13c>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <updateEncoderCnt+0x148>)
 8001004:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <updateEncoderCnt+0x14c>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <updateEncoderCnt+0x144>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <updateEncoderCnt+0x14c>)
 800101e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <updateEncoderCnt+0x13c>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	461a      	mov	r2, r3
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <updateEncoderCnt+0x144>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	4413      	add	r3, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	a32e      	add	r3, pc, #184	; (adr r3, 80010f0 <updateEncoderCnt+0x130>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fadc 	bl	80005f8 <__aeabi_dmul>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f7ff fdc4 	bl	8000be8 <__aeabi_d2f>
 8001060:	4602      	mov	r2, r0
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <updateEncoderCnt+0x150>)
 8001064:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <updateEncoderCnt+0x154>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <updateEncoderCnt+0x150>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <updateEncoderCnt+0x154>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <updateEncoderCnt+0x158>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <updateEncoderCnt+0x150>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <updateEncoderCnt+0x158>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <updateEncoderCnt+0x15c>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <updateEncoderCnt+0x150>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <updateEncoderCnt+0x15c>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <updateEncoderCnt+0x160>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <updateEncoderCnt+0x150>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <updateEncoderCnt+0x160>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <updateEncoderCnt+0x164>)
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <updateEncoderCnt+0x150>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <updateEncoderCnt+0x164>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <updateEncoderCnt+0x168>)
 80010d6:	ed93 7a00 	vldr	s14, [r3]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <updateEncoderCnt+0x150>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <updateEncoderCnt+0x168>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ea:	bf00      	nop
 80010ec:	bd98      	pop	{r3, r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	31e7b585 	.word	0x31e7b585
 80010f4:	3f8e28c7 	.word	0x3f8e28c7
 80010f8:	40000400 	.word	0x40000400
 80010fc:	2000022c 	.word	0x2000022c
 8001100:	40000800 	.word	0x40000800
 8001104:	2000022e 	.word	0x2000022e
 8001108:	20000230 	.word	0x20000230
 800110c:	20000232 	.word	0x20000232
 8001110:	20000234 	.word	0x20000234
 8001114:	20000238 	.word	0x20000238
 8001118:	2000023c 	.word	0x2000023c
 800111c:	20000240 	.word	0x20000240
 8001120:	20000244 	.word	0x20000244
 8001124:	20000248 	.word	0x20000248
 8001128:	2000024c 	.word	0x2000024c

0800112c <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <getEncoderCnt+0x2c>)
 8001138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <getEncoderCnt+0x30>)
 8001142:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	801a      	strh	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000022c 	.word	0x2000022c
 800115c:	2000022e 	.word	0x2000022e

08001160 <getGoalJudgeDistance>:

float getTotalDistance(){
	return total_distance;
}

float getGoalJudgeDistance(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <getGoalJudgeDistance+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000240 	.word	0x20000240

0800117c <clearGoalJudgeDistance>:

void clearTotalDistance(){
	total_distance = 0;
}

void clearGoalJudgeDistance(){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <clearGoalJudgeDistance+0x18>)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000240 	.word	0x20000240

08001198 <resetEncoderCnt>:
{
	distance_side_line_ignore = 0;
}

void resetEncoderCnt(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	TIM3 -> CNT = CNT_OFFSET;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <resetEncoderCnt+0x20>)
 800119e:	f242 7210 	movw	r2, #10000	; 0x2710
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <resetEncoderCnt+0x24>)
 80011a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40000800 	.word	0x40000800

080011c0 <getspeedcount>:

void clearDistance10mm(void){
	distance_10mm = 0;
}

float getspeedcount(void){
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	if(distance_10mm >= 10){
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <getspeedcount+0x60>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	db16      	blt.n	8001206 <getspeedcount+0x46>
		speed_cnt += 0.1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <getspeedcount+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9b3 	bl	8000548 <__aeabi_f2d>
 80011e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001218 <getspeedcount+0x58>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f850 	bl	800028c <__adddf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	f7ff fcf8 	bl	8000be8 <__aeabi_d2f>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <getspeedcount+0x64>)
 80011fc:	601a      	str	r2, [r3, #0]
		distance_10mm = 0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <getspeedcount+0x60>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <getspeedcount+0x64>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	bd98      	pop	{r3, r4, r7, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	9999999a 	.word	0x9999999a
 800121c:	3fb99999 	.word	0x3fb99999
 8001220:	20000238 	.word	0x20000238
 8001224:	20000250 	.word	0x20000250

08001228 <clearspeedcount>:

void clearspeedcount(void){
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	speed_cnt = 0.0;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <clearspeedcount+0x18>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000250 	.word	0x20000250
 8001244:	00000000 	.word	0x00000000

08001248 <updateIMUValue>:
	HAL_Delay(500);

	return who_i_am;
}

void updateIMUValue(){
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800124e:	f001 fab7 	bl	80027c0 <read_gyro_data>
	zg_ = zg;
 8001252:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <updateIMUValue+0x140>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <updateIMUValue+0x144>)
 800125a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <updateIMUValue+0x140>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f95e 	bl	8000524 <__aeabi_i2d>
 8001268:	a33d      	add	r3, pc, #244	; (adr r3, 8001360 <updateIMUValue+0x118>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4625      	mov	r5, r4
 8001278:	461c      	mov	r4, r3
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <updateIMUValue+0x148>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f94f 	bl	8000524 <__aeabi_i2d>
 8001286:	a338      	add	r3, pc, #224	; (adr r3, 8001368 <updateIMUValue+0x120>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7fe fff8 	bl	800028c <__adddf3>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4618      	mov	r0, r3
 80012a2:	4621      	mov	r1, r4
 80012a4:	f7ff fc58 	bl	8000b58 <__aeabi_d2iz>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <updateIMUValue+0x144>)
 80012ae:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <updateIMUValue+0x144>)
 80012b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <updateIMUValue+0x148>)
 80012b8:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <updateIMUValue+0x144>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	a327      	add	r3, pc, #156	; (adr r3, 8001370 <updateIMUValue+0x128>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fab8 	bl	800084c <__aeabi_ddiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4618      	mov	r0, r3
 80012e2:	4621      	mov	r1, r4
 80012e4:	a324      	add	r3, pc, #144	; (adr r3, 8001378 <updateIMUValue+0x130>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f985 	bl	80005f8 <__aeabi_dmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	4618      	mov	r0, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <updateIMUValue+0x14c>)
 80012fc:	f7ff faa6 	bl	800084c <__aeabi_ddiv>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4618      	mov	r0, r3
 8001306:	4621      	mov	r1, r4
 8001308:	f7ff fc6e 	bl	8000be8 <__aeabi_d2f>
 800130c:	4602      	mov	r2, r0
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <updateIMUValue+0x150>)
 8001310:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <updateIMUValue+0x154>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f916 	bl	8000548 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <updateIMUValue+0x150>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	a315      	add	r3, pc, #84	; (adr r3, 8001380 <updateIMUValue+0x138>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffa6 	bl	800028c <__adddf3>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc4e 	bl	8000be8 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <updateIMUValue+0x154>)
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	33333333 	.word	0x33333333
 8001364:	3feb3333 	.word	0x3feb3333
 8001368:	33333334 	.word	0x33333334
 800136c:	3fc33333 	.word	0x3fc33333
 8001370:	66666666 	.word	0x66666666
 8001374:	40306666 	.word	0x40306666
 8001378:	54411744 	.word	0x54411744
 800137c:	400921fb 	.word	0x400921fb
 8001380:	d2f1a9fc 	.word	0xd2f1a9fc
 8001384:	3f50624d 	.word	0x3f50624d
 8001388:	200005cc 	.word	0x200005cc
 800138c:	200004e8 	.word	0x200004e8
 8001390:	20000254 	.word	0x20000254
 8001394:	40668000 	.word	0x40668000
 8001398:	200004f4 	.word	0x200004f4
 800139c:	200004f0 	.word	0x200004f0

080013a0 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b52      	cmp	r3, #82	; 0x52
 80013ae:	d112      	bne.n	80013d6 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013b8:	f004 fbe6 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013b8:	f004 fbe8 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c2:	485d      	ldr	r0, [pc, #372]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013c4:	f004 fbe0 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013c4:	f004 fbe2 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ce:	485a      	ldr	r0, [pc, #360]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013d0:	f004 fbda 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013d0:	f004 fbdc 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80013d4:	e0ab      	b.n	800152e <setLED+0x18e>
	else if(color == 'G'){
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b47      	cmp	r3, #71	; 0x47
 80013da:	d112      	bne.n	8001402 <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e2:	4855      	ldr	r0, [pc, #340]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013e4:	f004 fbd0 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013e4:	f004 fbd2 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ee:	4852      	ldr	r0, [pc, #328]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013f0:	f004 fbca 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013f0:	f004 fbcc 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fa:	484f      	ldr	r0, [pc, #316]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80013fc:	f004 fbc4 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80013fc:	f004 fbc6 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001400:	e095      	b.n	800152e <setLED+0x18e>
	else if(color == 'B'){
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b42      	cmp	r3, #66	; 0x42
 8001406:	d112      	bne.n	800142e <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001410:	f004 fbba 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001410:	f004 fbbc 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141a:	4847      	ldr	r0, [pc, #284]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 800141c:	f004 fbb4 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800141c:	f004 fbb6 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001426:	4844      	ldr	r0, [pc, #272]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001428:	f004 fbae 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001428:	f004 fbb0 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 800142c:	e07f      	b.n	800152e <setLED+0x18e>
	else if(color == 'M'){
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b4d      	cmp	r3, #77	; 0x4d
 8001432:	d112      	bne.n	800145a <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	483f      	ldr	r0, [pc, #252]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 800143c:	f004 fba4 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800143c:	f004 fba6 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001446:	483c      	ldr	r0, [pc, #240]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001448:	f004 fb9e 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001448:	f004 fba0 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4839      	ldr	r0, [pc, #228]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001454:	f004 fb98 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001454:	f004 fb9a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001458:	e069      	b.n	800152e <setLED+0x18e>
	else if(color == 'Y'){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b59      	cmp	r3, #89	; 0x59
 800145e:	d112      	bne.n	8001486 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4834      	ldr	r0, [pc, #208]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001468:	f004 fb8e 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001468:	f004 fb90 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001472:	4831      	ldr	r0, [pc, #196]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001474:	f004 fb88 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001474:	f004 fb8a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001480:	f004 fb82 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001480:	f004 fb84 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001484:	e053      	b.n	800152e <setLED+0x18e>
	else if(color == 'C'){
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b43      	cmp	r3, #67	; 0x43
 800148a:	d112      	bne.n	80014b2 <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4829      	ldr	r0, [pc, #164]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001494:	f004 fb78 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001494:	f004 fb7a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014a0:	f004 fb72 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014a0:	f004 fb74 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014aa:	4823      	ldr	r0, [pc, #140]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014ac:	f004 fb6c 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014ac:	f004 fb6e 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 80014b0:	e03d      	b.n	800152e <setLED+0x18e>
	else if(color == 'W'){
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b57      	cmp	r3, #87	; 0x57
 80014b6:	d112      	bne.n	80014de <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	481e      	ldr	r0, [pc, #120]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014c0:	f004 fb62 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014c0:	f004 fb64 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014cc:	f004 fb5c 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014cc:	f004 fb5e 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014d8:	f004 fb56 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014d8:	f004 fb58 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 80014dc:	e027      	b.n	800152e <setLED+0x18e>
	else if(color == 'N'){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b4e      	cmp	r3, #78	; 0x4e
 80014e2:	d112      	bne.n	800150a <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014ec:	f004 fb4c 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014ec:	f004 fb4e 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 80014f8:	f004 fb46 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80014f8:	f004 fb48 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001504:	f004 fb40 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001504:	f004 fb42 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001508:	e011      	b.n	800152e <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 8001512:	f004 fb39 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001512:	f004 fb3b 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151c:	4806      	ldr	r0, [pc, #24]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 800151e:	f004 fb33 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800151e:	f004 fb35 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <setLED+0x198>)
<<<<<<< HEAD
 800152a:	f004 fb2d 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800152a:	f004 fb2f 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800

0800153c <setLED2>:

void setLED2(uint8_t color2)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b52      	cmp	r3, #82	; 0x52
 800154a:	d124      	bne.n	8001596 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	4889      	ldr	r0, [pc, #548]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 8001554:	f004 fb18 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001554:	f004 fb1a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	4887      	ldr	r0, [pc, #540]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001560:	f004 fb12 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001560:	f004 fb14 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4884      	ldr	r0, [pc, #528]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800156c:	f004 fb0c 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800156c:	f004 fb0e 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	4881      	ldr	r0, [pc, #516]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001578:	f004 fb06 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001578:	f004 fb08 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001582:	487e      	ldr	r0, [pc, #504]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001584:	f004 fb00 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001584:	f004 fb02 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158e:	487b      	ldr	r0, [pc, #492]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001590:	f004 fafa 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001590:	f004 fafc 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001594:	e0eb      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'G'){
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b47      	cmp	r3, #71	; 0x47
 800159a:	d124      	bne.n	80015e6 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	4875      	ldr	r0, [pc, #468]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 80015a4:	f004 faf0 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015a4:	f004 faf2 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4873      	ldr	r0, [pc, #460]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80015b0:	f004 faea 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015b0:	f004 faec 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ba:	4870      	ldr	r0, [pc, #448]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80015bc:	f004 fae4 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015bc:	f004 fae6 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	486d      	ldr	r0, [pc, #436]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80015c8:	f004 fade 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015c8:	f004 fae0 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d2:	486a      	ldr	r0, [pc, #424]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80015d4:	f004 fad8 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015d4:	f004 fada 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015de:	4867      	ldr	r0, [pc, #412]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80015e0:	f004 fad2 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015e0:	f004 fad4 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 80015e4:	e0c3      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'B'){
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b42      	cmp	r3, #66	; 0x42
 80015ea:	d124      	bne.n	8001636 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f2:	4861      	ldr	r0, [pc, #388]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 80015f4:	f004 fac8 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80015f4:	f004 faca 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fe:	485f      	ldr	r0, [pc, #380]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001600:	f004 fac2 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001600:	f004 fac4 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	485c      	ldr	r0, [pc, #368]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800160c:	f004 fabc 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800160c:	f004 fabe 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	4859      	ldr	r0, [pc, #356]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001618:	f004 fab6 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001618:	f004 fab8 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	4856      	ldr	r0, [pc, #344]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001624:	f004 fab0 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001624:	f004 fab2 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162e:	4853      	ldr	r0, [pc, #332]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001630:	f004 faaa 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001630:	f004 faac 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001634:	e09b      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'W'){
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b57      	cmp	r3, #87	; 0x57
 800163a:	d124      	bne.n	8001686 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	484d      	ldr	r0, [pc, #308]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 8001644:	f004 faa0 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001644:	f004 faa2 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001650:	f004 fa9a 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001650:	f004 fa9c 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165a:	4848      	ldr	r0, [pc, #288]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800165c:	f004 fa94 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800165c:	f004 fa96 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4845      	ldr	r0, [pc, #276]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001668:	f004 fa8e 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001668:	f004 fa90 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001672:	4842      	ldr	r0, [pc, #264]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001674:	f004 fa88 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001674:	f004 fa8a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	483f      	ldr	r0, [pc, #252]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001680:	f004 fa82 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001680:	f004 fa84 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001684:	e073      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'Y'){
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b59      	cmp	r3, #89	; 0x59
 800168a:	d124      	bne.n	80016d6 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001692:	4839      	ldr	r0, [pc, #228]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 8001694:	f004 fa78 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001694:	f004 fa7a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016a0:	f004 fa72 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016a0:	f004 fa74 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016aa:	4834      	ldr	r0, [pc, #208]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016ac:	f004 fa6c 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016ac:	f004 fa6e 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b6:	4831      	ldr	r0, [pc, #196]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016b8:	f004 fa66 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016b8:	f004 fa68 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c2:	482e      	ldr	r0, [pc, #184]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016c4:	f004 fa60 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016c4:	f004 fa62 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	482b      	ldr	r0, [pc, #172]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016d0:	f004 fa5a 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016d0:	f004 fa5c 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 80016d4:	e04b      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'X'){
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b58      	cmp	r3, #88	; 0x58
 80016da:	d124      	bne.n	8001726 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4825      	ldr	r0, [pc, #148]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 80016e4:	f004 fa50 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016e4:	f004 fa52 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ee:	4823      	ldr	r0, [pc, #140]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016f0:	f004 fa4a 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016f0:	f004 fa4c 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fa:	4820      	ldr	r0, [pc, #128]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 80016fc:	f004 fa44 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80016fc:	f004 fa46 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001708:	f004 fa3e 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001708:	f004 fa40 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001714:	f004 fa38 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001714:	f004 fa3a 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001720:	f004 fa32 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001720:	f004 fa34 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001724:	e023      	b.n	800176e <setLED2+0x232>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <setLED2+0x23c>)
<<<<<<< HEAD
 800172e:	f004 fa2b 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800172e:	f004 fa2d 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800173a:	f004 fa25 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800173a:	f004 fa27 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001746:	f004 fa1f 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001746:	f004 fa21 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 8001752:	f004 fa19 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8001752:	f004 fa1b 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800175e:	f004 fa13 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800175e:	f004 fa15 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <setLED2+0x240>)
<<<<<<< HEAD
 800176a:	f004 fa0d 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800176a:	f004 fa0f 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 4.8, kd = 0.06;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001786:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <calculateLineFollowingTermFlip+0x138>)
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <calculateLineFollowingTermFlip+0x13c>)
 800178c:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001794:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <calculateLineFollowingTermFlip+0x140>)
 8001796:	f993 3000 	ldrsb.w	r3, [r3]
 800179a:	2b01      	cmp	r3, #1
 800179c:	f040 8081 	bne.w	80018a2 <calculateLineFollowingTermFlip+0x122>
		if(i_clear_flag == 1){
 80017a0:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <calculateLineFollowingTermFlip+0x144>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <calculateLineFollowingTermFlip+0x36>
			i = 0;
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <calculateLineFollowingTermFlip+0x148>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <calculateLineFollowingTermFlip+0x144>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 80017b6:	4b45      	ldr	r3, [pc, #276]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a41      	ldr	r2, [pc, #260]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a3d      	ldr	r2, [pc, #244]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017d8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80017dc:	4413      	add	r3, r2
 80017de:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017e0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a3a      	ldr	r2, [pc, #232]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017e8:	fb82 1203 	smull	r1, r2, r2, r3
 80017ec:	17db      	asrs	r3, r3, #31
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4b34      	ldr	r3, [pc, #208]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017fa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80017fe:	440b      	add	r3, r1
 8001800:	4932      	ldr	r1, [pc, #200]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 8001802:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 8001806:	440b      	add	r3, r1
 8001808:	4930      	ldr	r1, [pc, #192]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 800180a:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 800180e:	440b      	add	r3, r1
 8001810:	492e      	ldr	r1, [pc, #184]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 8001812:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8001816:	440b      	add	r3, r1
 8001818:	492c      	ldr	r1, [pc, #176]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 800181a:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 800181e:	440b      	add	r3, r1
 8001820:	492b      	ldr	r1, [pc, #172]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 8001822:	fb81 0103 	smull	r0, r1, r1, r3
 8001826:	17db      	asrs	r3, r3, #31
 8001828:	1a5b      	subs	r3, r3, r1
 800182a:	4413      	add	r3, r2
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001834:	edc7 7a03 	vstr	s15, [r7, #12]

		p = kp * diff; //P制御
 8001838:	ed97 7a05 	vldr	s14, [r7, #20]
 800183c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <calculateLineFollowingTermFlip+0x154>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001856:	edd7 7a04 	vldr	s15, [r7, #16]
 800185a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185e:	ee17 0a90 	vmov	r0, s15
 8001862:	f7fe fe71 	bl	8000548 <__aeabi_f2d>
 8001866:	a312      	add	r3, pc, #72	; (adr r3, 80018b0 <calculateLineFollowingTermFlip+0x130>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe ffee 	bl	800084c <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	f7ff f9b6 	bl	8000be8 <__aeabi_d2f>
 800187c:	4603      	mov	r3, r0
 800187e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <calculateLineFollowingTermFlip+0x148>)
 8001882:	ed93 7a00 	vldr	s14, [r3]
 8001886:	edd7 7a02 	vldr	s15, [r7, #8]
 800188a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <calculateLineFollowingTermFlip+0x158>)
 8001898:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <calculateLineFollowingTermFlip+0x154>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6013      	str	r3, [r2, #0]
	}
}
 80018a2:	bf00      	nop
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80018b4:	3f50624d 	.word	0x3f50624d
 80018b8:	4099999a 	.word	0x4099999a
 80018bc:	3d75c28f 	.word	0x3d75c28f
 80018c0:	20000256 	.word	0x20000256
 80018c4:	20000257 	.word	0x20000257
 80018c8:	20000264 	.word	0x20000264
 80018cc:	2000049c 	.word	0x2000049c
 80018d0:	2aaaaaab 	.word	0x2aaaaaab
 80018d4:	20000260 	.word	0x20000260
 80018d8:	20000258 	.word	0x20000258

080018dc <lineTraceFlip>:

void lineTraceFlip(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80018e2:	4b52      	ldr	r3, [pc, #328]	; (8001a2c <lineTraceFlip+0x150>)
 80018e4:	f993 3000 	ldrsb.w	r3, [r3]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	f040 8097 	bne.w	8001a1c <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 80018ee:	f001 f809 	bl	8002904 <getVelocityControlTerm>
 80018f2:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.8;
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <lineTraceFlip+0x154>)
 80018f8:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 80018fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	db02      	blt.n	8001912 <lineTraceFlip+0x36>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	e010      	b.n	8001934 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001912:	edd7 7a03 	vldr	s15, [r7, #12]
 8001916:	eef1 7a67 	vneg.f32	s15, s15
 800191a:	ed97 7a05 	vldr	s14, [r7, #20]
 800191e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001926:	d805      	bhi.n	8001934 <lineTraceFlip+0x58>
 8001928:	edd7 7a03 	vldr	s15, [r7, #12]
 800192c:	eef1 7a67 	vneg.f32	s15, s15
 8001930:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 800193a:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <lineTraceFlip+0x158>)
 800193c:	ed93 7a00 	vldr	s14, [r3]
 8001940:	edd7 7a05 	vldr	s15, [r7, #20]
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001a38 <lineTraceFlip+0x15c>
 800194c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001954:	db0d      	blt.n	8001972 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <lineTraceFlip+0x158>)
 8001958:	ed93 7a00 	vldr	s14, [r3]
 800195c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001a38 <lineTraceFlip+0x15c>
 8001968:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800196c:	edc7 7a04 	vstr	s15, [r7, #16]
 8001970:	e01a      	b.n	80019a8 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8001972:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <lineTraceFlip+0x158>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed97 7a05 	vldr	s14, [r7, #20]
 800197c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001980:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001a3c <lineTraceFlip+0x160>
 8001984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d80c      	bhi.n	80019a8 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <lineTraceFlip+0x158>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ed97 7a05 	vldr	s14, [r7, #20]
 8001998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001a3c <lineTraceFlip+0x160>
 80019a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a4:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 80019a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <lineTraceFlip+0x158>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	edd7 7a04 	vldr	s15, [r7, #16]
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <lineTraceFlip+0x158>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]


		float motor_l = velocity_control_term + line_following_term;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <lineTraceFlip+0x158>)
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <lineTraceFlip+0x158>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ec:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 80019f0:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <lineTraceFlip+0x164>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 80019f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fe:	ee17 3a90 	vmov	r3, s15
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 2a90 	vmov	r2, s15
 8001a10:	b212      	sxth	r2, r2
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
<<<<<<< HEAD
 8001a16:	f002 f81b 	bl	8003a50 <setMotor>
=======
 8001a16:	f002 f81d 	bl	8003a54 <setMotor>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001a1a:	e003      	b.n	8001a24 <lineTraceFlip+0x148>
		setMotor(0, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
<<<<<<< HEAD
 8001a20:	f002 f816 	bl	8003a50 <setMotor>
=======
 8001a20:	f002 f818 	bl	8003a54 <setMotor>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001a24:	bf00      	nop
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000256 	.word	0x20000256
 8001a30:	44a7e666 	.word	0x44a7e666
 8001a34:	20000258 	.word	0x20000258
 8001a38:	44d1e000 	.word	0x44d1e000
 8001a3c:	c4d1e000 	.word	0xc4d1e000
 8001a40:	200004f8 	.word	0x200004f8

08001a44 <startLineTrace>:

void startLineTrace()
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <startLineTrace+0x1c>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <startLineTrace+0x20>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000256 	.word	0x20000256
 8001a64:	20000257 	.word	0x20000257

08001a68 <stopLineTrace>:

void stopLineTrace()
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <stopLineTrace+0x1c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <stopLineTrace+0x20>)
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	20000256 	.word	0x20000256
 8001a88:	20000258 	.word	0x20000258

08001a8c <checkCourseOut>:

void checkCourseOut(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <checkCourseOut+0xb4>)
 8001a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <checkCourseOut+0xb4>)
 8001a9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <checkCourseOut+0xb4>)
 8001aa4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a25      	ldr	r2, [pc, #148]	; (8001b40 <checkCourseOut+0xb4>)
 8001aac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a23      	ldr	r2, [pc, #140]	; (8001b40 <checkCourseOut+0xb4>)
 8001ab4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a21      	ldr	r2, [pc, #132]	; (8001b40 <checkCourseOut+0xb4>)
 8001abc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	; (8001b40 <checkCourseOut+0xb4>)
 8001ac4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <checkCourseOut+0xb4>)
 8001acc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <checkCourseOut+0xb4>)
 8001ad4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a19      	ldr	r2, [pc, #100]	; (8001b40 <checkCourseOut+0xb4>)
 8001adc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <checkCourseOut+0xb4>)
 8001ae4:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001ae8:	4413      	add	r3, r2
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <checkCourseOut+0xb4>)
 8001aec:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <checkCourseOut+0xb8>)
 8001af4:	fb82 1203 	smull	r1, r2, r2, r3
 8001af8:	1052      	asrs	r2, r2, #1
 8001afa:	17db      	asrs	r3, r3, #31
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001b06:	d906      	bls.n	8001b16 <checkCourseOut+0x8a>
		dark_cnt++;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <checkCourseOut+0xbc>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <checkCourseOut+0xbc>)
 8001b12:	801a      	strh	r2, [r3, #0]
 8001b14:	e002      	b.n	8001b1c <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <checkCourseOut+0xbc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <checkCourseOut+0xbc>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	2b13      	cmp	r3, #19
 8001b22:	d903      	bls.n	8001b2c <checkCourseOut+0xa0>
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <checkCourseOut+0xc0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001b2a:	e002      	b.n	8001b32 <checkCourseOut+0xa6>
	else dark_flag = false;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <checkCourseOut+0xc0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	2000049c 	.word	0x2000049c
 8001b44:	2aaaaaab 	.word	0x2aaaaaab
 8001b48:	20000268 	.word	0x20000268
 8001b4c:	2000025c 	.word	0x2000025c

08001b50 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	return dark_flag;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <getCouseOutFlag+0x14>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000025c 	.word	0x2000025c

08001b68 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t index = 1;

void initADC()
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4905      	ldr	r1, [pc, #20]	; (8001b84 <initADC+0x1c>)
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <initADC+0x20>)
<<<<<<< HEAD
 8001b72:	f002 fe27 	bl	80047c4 <HAL_ADC_Start_DMA>
=======
 8001b72:	f002 fe29 	bl	80047c8 <HAL_ADC_Start_DMA>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8001b76:	220c      	movs	r2, #12
 8001b78:	4904      	ldr	r1, [pc, #16]	; (8001b8c <initADC+0x24>)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <initADC+0x28>)
<<<<<<< HEAD
 8001b7c:	f002 fe22 	bl	80047c4 <HAL_ADC_Start_DMA>
=======
 8001b7c:	f002 fe24 	bl	80047c8 <HAL_ADC_Start_DMA>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000284 	.word	0x20000284
 8001b88:	2000054c 	.word	0x2000054c
 8001b8c:	2000026c 	.word	0x2000026c
 8001b90:	200004fc 	.word	0x200004fc

08001b94 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	for(int j=0; j<=11; j++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	e002      	b.n	8001ba6 <storeAnalogSensorBuffer+0x12>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0b      	cmp	r3, #11
 8001baa:	ddf9      	ble.n	8001ba0 <storeAnalogSensorBuffer+0xc>
		//if(adc_value[j] >= max_values[j]) adc_value[j] = max_values[j];
		//if(adc_value[j] <= min_values[j]) adc_value[j] = min_values[j];
	}
	sensor1_buffer[index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8001bac:	4bc9      	ldr	r3, [pc, #804]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001bae:	885b      	ldrh	r3, [r3, #2]
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb8:	4bc7      	ldr	r3, [pc, #796]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bbe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bc2:	4bc6      	ldr	r3, [pc, #792]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001bc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bcc:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd4:	4bc3      	ldr	r3, [pc, #780]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bde:	ee17 3a90 	vmov	r3, s15
 8001be2:	b219      	sxth	r1, r3
 8001be4:	4bc0      	ldr	r3, [pc, #768]	; (8001ee8 <storeAnalogSensorBuffer+0x354>)
 8001be6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8001bea:	4bba      	ldr	r3, [pc, #744]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf6:	4bb8      	ldr	r3, [pc, #736]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001bf8:	edd3 7a00 	vldr	s15, [r3]
 8001bfc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c00:	4bb6      	ldr	r3, [pc, #728]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001c02:	ed93 7a00 	vldr	s14, [r3]
 8001c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c12:	4bb4      	ldr	r3, [pc, #720]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1c:	ee17 3a90 	vmov	r3, s15
 8001c20:	b219      	sxth	r1, r3
 8001c22:	4bb2      	ldr	r3, [pc, #712]	; (8001eec <storeAnalogSensorBuffer+0x358>)
 8001c24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8001c28:	4baa      	ldr	r3, [pc, #680]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001c2a:	889b      	ldrh	r3, [r3, #4]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c34:	4ba8      	ldr	r3, [pc, #672]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001c36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c3e:	4ba7      	ldr	r3, [pc, #668]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c48:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	4ba4      	ldr	r3, [pc, #656]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5a:	ee17 3a90 	vmov	r3, s15
 8001c5e:	b219      	sxth	r1, r3
 8001c60:	4ba3      	ldr	r3, [pc, #652]	; (8001ef0 <storeAnalogSensorBuffer+0x35c>)
 8001c62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8001c66:	4b9b      	ldr	r3, [pc, #620]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001c68:	88db      	ldrh	r3, [r3, #6]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c72:	4b99      	ldr	r3, [pc, #612]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001c74:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c78:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c7c:	4b97      	ldr	r3, [pc, #604]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001c7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c86:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8e:	4b95      	ldr	r3, [pc, #596]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c98:	ee17 3a90 	vmov	r3, s15
 8001c9c:	b219      	sxth	r1, r3
 8001c9e:	4b95      	ldr	r3, [pc, #596]	; (8001ef4 <storeAnalogSensorBuffer+0x360>)
 8001ca0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8001ca4:	4b8b      	ldr	r3, [pc, #556]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001ca6:	891b      	ldrh	r3, [r3, #8]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb0:	4b89      	ldr	r3, [pc, #548]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001cb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cb6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cba:	4b88      	ldr	r3, [pc, #544]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001cbc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001cc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ccc:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cd6:	ee17 3a90 	vmov	r3, s15
 8001cda:	b219      	sxth	r1, r3
 8001cdc:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <storeAnalogSensorBuffer+0x364>)
 8001cde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001ce4:	895b      	ldrh	r3, [r3, #10]
 8001ce6:	ee07 3a90 	vmov	s15, r3
 8001cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cee:	4b7a      	ldr	r3, [pc, #488]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001cf0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cf4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cf8:	4b78      	ldr	r3, [pc, #480]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001cfa:	ed93 7a05 	vldr	s14, [r3, #20]
 8001cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d02:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d14:	ee17 3a90 	vmov	r3, s15
 8001d18:	b219      	sxth	r1, r3
 8001d1a:	4b78      	ldr	r3, [pc, #480]	; (8001efc <storeAnalogSensorBuffer+0x368>)
 8001d1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8001d20:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001d22:	899b      	ldrh	r3, [r3, #12]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001d2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d36:	4b69      	ldr	r3, [pc, #420]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001d38:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d40:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d52:	ee17 3a90 	vmov	r3, s15
 8001d56:	b219      	sxth	r1, r3
 8001d58:	4b69      	ldr	r3, [pc, #420]	; (8001f00 <storeAnalogSensorBuffer+0x36c>)
 8001d5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8001d5e:	4b5d      	ldr	r3, [pc, #372]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001d60:	89db      	ldrh	r3, [r3, #14]
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001d6c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d70:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d74:	4b59      	ldr	r3, [pc, #356]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001d76:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	b219      	sxth	r1, r3
 8001d96:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <storeAnalogSensorBuffer+0x370>)
 8001d98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001d9e:	8a1b      	ldrh	r3, [r3, #16]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001daa:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001db2:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001db4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001dc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc4:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dce:	ee17 3a90 	vmov	r3, s15
 8001dd2:	b219      	sxth	r1, r3
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <storeAnalogSensorBuffer+0x374>)
 8001dd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8001dda:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001ddc:	8a5b      	ldrh	r3, [r3, #18]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001de8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001dec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001df2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e0c:	ee17 3a90 	vmov	r3, s15
 8001e10:	b219      	sxth	r1, r3
 8001e12:	4b3e      	ldr	r3, [pc, #248]	; (8001f0c <storeAnalogSensorBuffer+0x378>)
 8001e14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001e1a:	8a9b      	ldrh	r3, [r3, #20]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e24:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001e26:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001e30:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e38:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4a:	ee17 3a90 	vmov	r3, s15
 8001e4e:	b219      	sxth	r1, r3
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <storeAnalogSensorBuffer+0x37c>)
 8001e52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <storeAnalogSensorBuffer+0x340>)
 8001e58:	8adb      	ldrh	r3, [r3, #22]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e62:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <storeAnalogSensorBuffer+0x344>)
 8001e64:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001e68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <storeAnalogSensorBuffer+0x348>)
 8001e6e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e76:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e88:	ee17 3a90 	vmov	r3, s15
 8001e8c:	b219      	sxth	r1, r3
 8001e8e:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <storeAnalogSensorBuffer+0x380>)
 8001e90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8001e94:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <storeAnalogSensorBuffer+0x384>)
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <storeAnalogSensorBuffer+0x388>)
 8001ea2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ea6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <storeAnalogSensorBuffer+0x38c>)
 8001eac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ee0 <storeAnalogSensorBuffer+0x34c>
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <storeAnalogSensorBuffer+0x350>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec6:	ee17 3a90 	vmov	r3, s15
 8001eca:	b219      	sxth	r1, r3
 8001ecc:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <storeAnalogSensorBuffer+0x390>)
 8001ece:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001ed2:	e029      	b.n	8001f28 <storeAnalogSensorBuffer+0x394>
 8001ed4:	2000026c 	.word	0x2000026c
 8001ed8:	20000464 	.word	0x20000464
 8001edc:	200004b8 	.word	0x200004b8
 8001ee0:	447a0000 	.word	0x447a0000
 8001ee4:	20000030 	.word	0x20000030
 8001ee8:	2000029c 	.word	0x2000029c
 8001eec:	20000288 	.word	0x20000288
 8001ef0:	200002b0 	.word	0x200002b0
 8001ef4:	200002c4 	.word	0x200002c4
 8001ef8:	200002d8 	.word	0x200002d8
 8001efc:	200002ec 	.word	0x200002ec
 8001f00:	20000300 	.word	0x20000300
 8001f04:	20000314 	.word	0x20000314
 8001f08:	20000328 	.word	0x20000328
 8001f0c:	2000033c 	.word	0x2000033c
 8001f10:	20000350 	.word	0x20000350
 8001f14:	20000364 	.word	0x20000364
 8001f18:	20000284 	.word	0x20000284
 8001f1c:	2000045c 	.word	0x2000045c
 8001f20:	20000494 	.word	0x20000494
 8001f24:	20000378 	.word	0x20000378
	side_sensorL_buffer[index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <storeAnalogSensorBuffer+0x3ec>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <storeAnalogSensorBuffer+0x3f0>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <storeAnalogSensorBuffer+0x3f4>)
 8001f40:	ed93 7a00 	vldr	s14, [r3]
 8001f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f48:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001f8c <storeAnalogSensorBuffer+0x3f8>
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <storeAnalogSensorBuffer+0x3fc>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5a:	ee17 3a90 	vmov	r3, s15
 8001f5e:	b219      	sxth	r1, r3
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <storeAnalogSensorBuffer+0x400>)
 8001f62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	index++;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <storeAnalogSensorBuffer+0x3fc>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <storeAnalogSensorBuffer+0x3fc>)
 8001f70:	701a      	strb	r2, [r3, #0]
	if(index >= 10){
		//index = 0;
	}
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000284 	.word	0x20000284
 8001f84:	2000045c 	.word	0x2000045c
 8001f88:	20000494 	.word	0x20000494
 8001f8c:	447a0000 	.word	0x447a0000
 8001f90:	20000030 	.word	0x20000030
 8001f94:	2000038c 	.word	0x2000038c

08001f98 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8001f9e:	4bc9      	ldr	r3, [pc, #804]	; (80022c4 <updateAnalogSensor+0x32c>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001faa:	4bc7      	ldr	r3, [pc, #796]	; (80022c8 <updateAnalogSensor+0x330>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fb4:	4bc5      	ldr	r3, [pc, #788]	; (80022cc <updateAnalogSensor+0x334>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fbe:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80022d0 <updateAnalogSensor+0x338>
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fca:	ee17 3a90 	vmov	r3, s15
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	4bc0      	ldr	r3, [pc, #768]	; (80022d4 <updateAnalogSensor+0x33c>)
 8001fd2:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8001fd4:	4bbb      	ldr	r3, [pc, #748]	; (80022c4 <updateAnalogSensor+0x32c>)
 8001fd6:	885b      	ldrh	r3, [r3, #2]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	4bb9      	ldr	r3, [pc, #740]	; (80022c8 <updateAnalogSensor+0x330>)
 8001fe2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fea:	4bb8      	ldr	r3, [pc, #736]	; (80022cc <updateAnalogSensor+0x334>)
 8001fec:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80022d0 <updateAnalogSensor+0x338>
 8001ff8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ffc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002000:	ee17 3a90 	vmov	r3, s15
 8002004:	b21a      	sxth	r2, r3
 8002006:	4bb3      	ldr	r3, [pc, #716]	; (80022d4 <updateAnalogSensor+0x33c>)
 8002008:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800200a:	4bae      	ldr	r3, [pc, #696]	; (80022c4 <updateAnalogSensor+0x32c>)
 800200c:	889b      	ldrh	r3, [r3, #4]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002016:	4bac      	ldr	r3, [pc, #688]	; (80022c8 <updateAnalogSensor+0x330>)
 8002018:	edd3 7a02 	vldr	s15, [r3, #8]
 800201c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002020:	4baa      	ldr	r3, [pc, #680]	; (80022cc <updateAnalogSensor+0x334>)
 8002022:	ed93 7a02 	vldr	s14, [r3, #8]
 8002026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800202a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80022d0 <updateAnalogSensor+0x338>
 800202e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
 800203a:	b21a      	sxth	r2, r3
 800203c:	4ba5      	ldr	r3, [pc, #660]	; (80022d4 <updateAnalogSensor+0x33c>)
 800203e:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002040:	4ba0      	ldr	r3, [pc, #640]	; (80022c4 <updateAnalogSensor+0x32c>)
 8002042:	88db      	ldrh	r3, [r3, #6]
 8002044:	ee07 3a90 	vmov	s15, r3
 8002048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204c:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <updateAnalogSensor+0x330>)
 800204e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002052:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002056:	4b9d      	ldr	r3, [pc, #628]	; (80022cc <updateAnalogSensor+0x334>)
 8002058:	ed93 7a03 	vldr	s14, [r3, #12]
 800205c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002060:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80022d0 <updateAnalogSensor+0x338>
 8002064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	b21a      	sxth	r2, r3
 8002072:	4b98      	ldr	r3, [pc, #608]	; (80022d4 <updateAnalogSensor+0x33c>)
 8002074:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002076:	4b93      	ldr	r3, [pc, #588]	; (80022c4 <updateAnalogSensor+0x32c>)
 8002078:	891b      	ldrh	r3, [r3, #8]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <updateAnalogSensor+0x330>)
 8002084:	edd3 7a04 	vldr	s15, [r3, #16]
 8002088:	ee77 6a67 	vsub.f32	s13, s14, s15
 800208c:	4b8f      	ldr	r3, [pc, #572]	; (80022cc <updateAnalogSensor+0x334>)
 800208e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002096:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80022d0 <updateAnalogSensor+0x338>
 800209a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <updateAnalogSensor+0x33c>)
 80020aa:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 80020ac:	4b85      	ldr	r3, [pc, #532]	; (80022c4 <updateAnalogSensor+0x32c>)
 80020ae:	895b      	ldrh	r3, [r3, #10]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <updateAnalogSensor+0x330>)
 80020ba:	edd3 7a05 	vldr	s15, [r3, #20]
 80020be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020c2:	4b82      	ldr	r3, [pc, #520]	; (80022cc <updateAnalogSensor+0x334>)
 80020c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80020c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020cc:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80022d0 <updateAnalogSensor+0x338>
 80020d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <updateAnalogSensor+0x33c>)
 80020e0:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80020e2:	4b78      	ldr	r3, [pc, #480]	; (80022c4 <updateAnalogSensor+0x32c>)
 80020e4:	899b      	ldrh	r3, [r3, #12]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <updateAnalogSensor+0x330>)
 80020f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80020f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020f8:	4b74      	ldr	r3, [pc, #464]	; (80022cc <updateAnalogSensor+0x334>)
 80020fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80020fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002102:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80022d0 <updateAnalogSensor+0x338>
 8002106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	b21a      	sxth	r2, r3
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <updateAnalogSensor+0x33c>)
 8002116:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <updateAnalogSensor+0x32c>)
 800211a:	89db      	ldrh	r3, [r3, #14]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <updateAnalogSensor+0x330>)
 8002126:	edd3 7a07 	vldr	s15, [r3, #28]
 800212a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800212e:	4b67      	ldr	r3, [pc, #412]	; (80022cc <updateAnalogSensor+0x334>)
 8002130:	ed93 7a07 	vldr	s14, [r3, #28]
 8002134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002138:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80022d0 <updateAnalogSensor+0x338>
 800213c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002144:	ee17 3a90 	vmov	r3, s15
 8002148:	b21a      	sxth	r2, r3
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <updateAnalogSensor+0x33c>)
 800214c:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800214e:	4b5d      	ldr	r3, [pc, #372]	; (80022c4 <updateAnalogSensor+0x32c>)
 8002150:	8a1b      	ldrh	r3, [r3, #16]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800215a:	4b5b      	ldr	r3, [pc, #364]	; (80022c8 <updateAnalogSensor+0x330>)
 800215c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002160:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <updateAnalogSensor+0x334>)
 8002166:	ed93 7a08 	vldr	s14, [r3, #32]
 800216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80022d0 <updateAnalogSensor+0x338>
 8002172:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217a:	ee17 3a90 	vmov	r3, s15
 800217e:	b21a      	sxth	r2, r3
 8002180:	4b54      	ldr	r3, [pc, #336]	; (80022d4 <updateAnalogSensor+0x33c>)
 8002182:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002184:	4b4f      	ldr	r3, [pc, #316]	; (80022c4 <updateAnalogSensor+0x32c>)
 8002186:	8a5b      	ldrh	r3, [r3, #18]
 8002188:	ee07 3a90 	vmov	s15, r3
 800218c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002190:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <updateAnalogSensor+0x330>)
 8002192:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002196:	ee77 6a67 	vsub.f32	s13, s14, s15
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <updateAnalogSensor+0x334>)
 800219c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80021a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80022d0 <updateAnalogSensor+0x338>
 80021a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	4b47      	ldr	r3, [pc, #284]	; (80022d4 <updateAnalogSensor+0x33c>)
 80021b8:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80021ba:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <updateAnalogSensor+0x32c>)
 80021bc:	8a9b      	ldrh	r3, [r3, #20]
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c6:	4b40      	ldr	r3, [pc, #256]	; (80022c8 <updateAnalogSensor+0x330>)
 80021c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80021cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021d0:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <updateAnalogSensor+0x334>)
 80021d2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80021d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021da:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80022d0 <updateAnalogSensor+0x338>
 80021de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e6:	ee17 3a90 	vmov	r3, s15
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <updateAnalogSensor+0x33c>)
 80021ee:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <updateAnalogSensor+0x32c>)
 80021f2:	8adb      	ldrh	r3, [r3, #22]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <updateAnalogSensor+0x330>)
 80021fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002202:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002206:	4b31      	ldr	r3, [pc, #196]	; (80022cc <updateAnalogSensor+0x334>)
 8002208:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800220c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002210:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80022d0 <updateAnalogSensor+0x338>
 8002214:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800221c:	ee17 3a90 	vmov	r3, s15
 8002220:	b21a      	sxth	r2, r3
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <updateAnalogSensor+0x33c>)
 8002224:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <updateAnalogSensor+0x340>)
 8002228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222c:	461a      	mov	r2, r3
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <updateAnalogSensor+0x340>)
 8002230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002234:	4413      	add	r3, r2
 8002236:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <updateAnalogSensor+0x340>)
 8002238:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800223c:	4413      	add	r3, r2
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <updateAnalogSensor+0x340>)
 8002240:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002244:	4413      	add	r3, r2
 8002246:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <updateAnalogSensor+0x340>)
 8002248:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800224c:	4413      	add	r3, r2
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <updateAnalogSensor+0x340>)
 8002250:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002254:	4413      	add	r3, r2
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <updateAnalogSensor+0x340>)
 8002258:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800225c:	4413      	add	r3, r2
 800225e:	4a1e      	ldr	r2, [pc, #120]	; (80022d8 <updateAnalogSensor+0x340>)
 8002260:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002264:	4413      	add	r3, r2
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <updateAnalogSensor+0x340>)
 8002268:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800226c:	4413      	add	r3, r2
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <updateAnalogSensor+0x340>)
 8002270:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002274:	4413      	add	r3, r2
 8002276:	4a19      	ldr	r2, [pc, #100]	; (80022dc <updateAnalogSensor+0x344>)
 8002278:	fb82 1203 	smull	r1, r2, r2, r3
 800227c:	1092      	asrs	r2, r2, #2
 800227e:	17db      	asrs	r3, r3, #31
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b21a      	sxth	r2, r3
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <updateAnalogSensor+0x348>)
 8002286:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <updateAnalogSensor+0x34c>)
 800228a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228e:	461a      	mov	r2, r3
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <updateAnalogSensor+0x34c>)
 8002292:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002296:	4413      	add	r3, r2
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <updateAnalogSensor+0x34c>)
 800229a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <updateAnalogSensor+0x34c>)
 80022a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <updateAnalogSensor+0x34c>)
 80022aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <updateAnalogSensor+0x34c>)
 80022b2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <updateAnalogSensor+0x34c>)
 80022ba:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	e012      	b.n	80022e8 <updateAnalogSensor+0x350>
 80022c2:	bf00      	nop
 80022c4:	2000026c 	.word	0x2000026c
 80022c8:	20000464 	.word	0x20000464
 80022cc:	200004b8 	.word	0x200004b8
 80022d0:	447a0000 	.word	0x447a0000
 80022d4:	2000049c 	.word	0x2000049c
 80022d8:	20000378 	.word	0x20000378
 80022dc:	66666667 	.word	0x66666667
 80022e0:	20000458 	.word	0x20000458
 80022e4:	2000038c 	.word	0x2000038c
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <updateAnalogSensor+0x3d0>)
 80022ea:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a1d      	ldr	r2, [pc, #116]	; (8002368 <updateAnalogSensor+0x3d0>)
 80022f2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80022f6:	4413      	add	r3, r2
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <updateAnalogSensor+0x3d0>)
 80022fa:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80022fe:	4413      	add	r3, r2
 8002300:	4a1a      	ldr	r2, [pc, #104]	; (800236c <updateAnalogSensor+0x3d4>)
 8002302:	fb82 1203 	smull	r1, r2, r2, r3
 8002306:	1092      	asrs	r2, r2, #2
 8002308:	17db      	asrs	r3, r3, #31
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b21a      	sxth	r2, r3
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <updateAnalogSensor+0x3d8>)
 8002310:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002312:	2300      	movs	r3, #0
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	e01a      	b.n	800234e <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <updateAnalogSensor+0x3dc>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002324:	db05      	blt.n	8002332 <updateAnalogSensor+0x39a>
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <updateAnalogSensor+0x3dc>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800232e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <updateAnalogSensor+0x3dc>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	dc04      	bgt.n	8002348 <updateAnalogSensor+0x3b0>
 800233e:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <updateAnalogSensor+0x3dc>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2100      	movs	r1, #0
 8002344:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3301      	adds	r3, #1
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0b      	cmp	r3, #11
 8002352:	dde1      	ble.n	8002318 <updateAnalogSensor+0x380>
	}
    index = 0;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <updateAnalogSensor+0x3e0>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000038c 	.word	0x2000038c
 800236c:	66666667 	.word	0x66666667
 8002370:	200004b4 	.word	0x200004b4
 8002374:	2000049c 	.word	0x2000049c
 8002378:	20000030 	.word	0x20000030

0800237c <sensorCalibration>:

void sensorCalibration()
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0a0      	sub	sp, #128	; 0x80
 8002380:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002386:	2230      	movs	r2, #48	; 0x30
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
<<<<<<< HEAD
 800238c:	f006 f9ad 	bl	80086ea <memset>
=======
 800238c:	f006 f9af 	bl	80086ee <memset>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	2230      	movs	r2, #48	; 0x30
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
<<<<<<< HEAD
 800239a:	f006 f9a6 	bl	80086ea <memset>
=======
 800239a:	f006 f9a8 	bl	80086ee <memset>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800239e:	4bd8      	ldr	r3, [pc, #864]	; (8002700 <sensorCalibration+0x384>)
 80023a0:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80023a2:	2300      	movs	r3, #0
 80023a4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023a8:	e026      	b.n	80023f8 <sensorCalibration+0x7c>
		max_values[i] = 00;
 80023aa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023ae:	4ad5      	ldr	r2, [pc, #852]	; (8002704 <sensorCalibration+0x388>)
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 80023ba:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023be:	4ad2      	ldr	r2, [pc, #840]	; (8002708 <sensorCalibration+0x38c>)
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	4ad1      	ldr	r2, [pc, #836]	; (800270c <sensorCalibration+0x390>)
 80023c6:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 80023c8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023d2:	4413      	add	r3, r2
 80023d4:	3b40      	subs	r3, #64	; 0x40
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 80023dc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023e6:	4413      	add	r3, r2
 80023e8:	3b70      	subs	r3, #112	; 0x70
 80023ea:	4ac8      	ldr	r2, [pc, #800]	; (800270c <sensorCalibration+0x390>)
 80023ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80023ee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023f2:	3301      	adds	r3, #1
 80023f4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80023f8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80023fc:	2b0b      	cmp	r3, #11
 80023fe:	d9d4      	bls.n	80023aa <sensorCalibration+0x2e>
//		min_values[1] = 1500;
//		min_values[2] = 1500;
//		min_values[3] = 1500;
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002400:	2300      	movs	r3, #0
 8002402:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002406:	e013      	b.n	8002430 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002408:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800240c:	4ac0      	ldr	r2, [pc, #768]	; (8002710 <sensorCalibration+0x394>)
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002418:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800241c:	4abd      	ldr	r2, [pc, #756]	; (8002714 <sensorCalibration+0x398>)
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	4aba      	ldr	r2, [pc, #744]	; (800270c <sensorCalibration+0x390>)
 8002424:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002426:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800242a:	3301      	adds	r3, #1
 800242c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002430:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d9e7      	bls.n	8002408 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002438:	e0f5      	b.n	8002626 <sensorCalibration+0x2aa>

		setLED2('X');
 800243a:	2058      	movs	r0, #88	; 0x58
 800243c:	f7ff f87e 	bl	800153c <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002440:	2300      	movs	r3, #0
 8002442:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002446:	e06e      	b.n	8002526 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002448:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800244c:	4ab2      	ldr	r2, [pc, #712]	; (8002718 <sensorCalibration+0x39c>)
 800244e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002452:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002456:	ee07 2a90 	vmov	s15, r2
 800245a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002464:	4413      	add	r3, r2
 8002466:	3b40      	subs	r3, #64	; 0x40
 8002468:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 800246c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002470:	4aa9      	ldr	r2, [pc, #676]	; (8002718 <sensorCalibration+0x39c>)
 8002472:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002476:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800247a:	ee07 2a90 	vmov	s15, r2
 800247e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002488:	4413      	add	r3, r2
 800248a:	3b70      	subs	r3, #112	; 0x70
 800248c:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002490:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800249a:	4413      	add	r3, r2
 800249c:	3b40      	subs	r3, #64	; 0x40
 800249e:	ed93 7a00 	vldr	s14, [r3]
 80024a2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024a6:	4a97      	ldr	r2, [pc, #604]	; (8002704 <sensorCalibration+0x388>)
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	dd0d      	ble.n	80024d6 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 80024ba:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80024be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024c8:	440a      	add	r2, r1
 80024ca:	3a40      	subs	r2, #64	; 0x40
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	498d      	ldr	r1, [pc, #564]	; (8002704 <sensorCalibration+0x388>)
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	601a      	str	r2, [r3, #0]
			}
//			if(max_values_buffer[2] > max_values[2]){
//				max_values[2] = max_values_buffer[2];
//			}
			if((min_values_buffer[i] < min_values[i]) ){
 80024d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024e0:	4413      	add	r3, r2
 80024e2:	3b70      	subs	r3, #112	; 0x70
 80024e4:	ed93 7a00 	vldr	s14, [r3]
 80024e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80024ec:	4a86      	ldr	r2, [pc, #536]	; (8002708 <sensorCalibration+0x38c>)
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d50d      	bpl.n	800251c <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002500:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002504:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800250e:	440a      	add	r2, r1
 8002510:	3a70      	subs	r2, #112	; 0x70
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	497c      	ldr	r1, [pc, #496]	; (8002708 <sensorCalibration+0x38c>)
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800251c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002520:	3301      	adds	r3, #1
 8002522:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002526:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800252a:	2b0b      	cmp	r3, #11
 800252c:	d98c      	bls.n	8002448 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 800252e:	2300      	movs	r3, #0
 8002530:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002534:	e073      	b.n	800261e <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002536:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800253a:	4a78      	ldr	r2, [pc, #480]	; (800271c <sensorCalibration+0x3a0>)
 800253c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002540:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002544:	ee07 2a90 	vmov	s15, r2
 8002548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002552:	4413      	add	r3, r2
 8002554:	3b78      	subs	r3, #120	; 0x78
 8002556:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 800255a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800255e:	4a6f      	ldr	r2, [pc, #444]	; (800271c <sensorCalibration+0x3a0>)
 8002560:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002564:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002568:	ee07 2a90 	vmov	s15, r2
 800256c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002576:	4413      	add	r3, r2
 8002578:	3b80      	subs	r3, #128	; 0x80
 800257a:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 800257e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002588:	4413      	add	r3, r2
 800258a:	3b78      	subs	r3, #120	; 0x78
 800258c:	ed93 7a00 	vldr	s14, [r3]
 8002590:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002594:	4a5e      	ldr	r2, [pc, #376]	; (8002710 <sensorCalibration+0x394>)
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a6:	dd10      	ble.n	80025ca <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 80025a8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ac:	4a5b      	ldr	r2, [pc, #364]	; (800271c <sensorCalibration+0x3a0>)
 80025ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025b6:	ee07 2a90 	vmov	s15, r2
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	4a54      	ldr	r2, [pc, #336]	; (8002710 <sensorCalibration+0x394>)
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	edc3 7a00 	vstr	s15, [r3]
 80025c8:	e024      	b.n	8002614 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 80025ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025d4:	4413      	add	r3, r2
 80025d6:	3b80      	subs	r3, #128	; 0x80
 80025d8:	ed93 7a00 	vldr	s14, [r3]
 80025dc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025e0:	4a4c      	ldr	r2, [pc, #304]	; (8002714 <sensorCalibration+0x398>)
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	edd3 7a00 	vldr	s15, [r3]
 80025ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	d50f      	bpl.n	8002614 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 80025f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <sensorCalibration+0x3a0>)
 80025fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025fe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002602:	ee07 2a90 	vmov	s15, r2
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	4a42      	ldr	r2, [pc, #264]	; (8002714 <sensorCalibration+0x398>)
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002614:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002618:	3301      	adds	r3, #1
 800261a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800261e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002622:	2b01      	cmp	r3, #1
 8002624:	d987      	bls.n	8002536 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002626:	204c      	movs	r0, #76	; 0x4c
<<<<<<< HEAD
 8002628:	f001 ff54 	bl	80044d4 <getSwitchStatus>
=======
 8002628:	f001 ff56 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800262c:	4603      	mov	r3, r0
 800262e:	2b01      	cmp	r3, #1
 8002630:	f43f af03 	beq.w	800243a <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002634:	2300      	movs	r3, #0
 8002636:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800263a:	e01b      	b.n	8002674 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 800263c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002640:	4a30      	ldr	r2, [pc, #192]	; (8002704 <sensorCalibration+0x388>)
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800264e:	4a2e      	ldr	r2, [pc, #184]	; (8002708 <sensorCalibration+0x38c>)
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800265c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002660:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <sensorCalibration+0x3a4>)
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800266a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800266e:	3301      	adds	r3, #1
 8002670:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002674:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002678:	2b0b      	cmp	r3, #11
 800267a:	d9df      	bls.n	800263c <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800267c:	2300      	movs	r3, #0
 800267e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002682:	e010      	b.n	80026a6 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002684:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002688:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800268c:	491e      	ldr	r1, [pc, #120]	; (8002708 <sensorCalibration+0x38c>)
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	440a      	add	r2, r1
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4923      	ldr	r1, [pc, #140]	; (8002724 <sensorCalibration+0x3a8>)
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800269c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80026a0:	3301      	adds	r3, #1
 80026a2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80026a6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80026aa:	2b0b      	cmp	r3, #11
 80026ac:	d9ea      	bls.n	8002684 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80026b4:	e01b      	b.n	80026ee <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 80026b6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026ba:	4a15      	ldr	r2, [pc, #84]	; (8002710 <sensorCalibration+0x394>)
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	ed93 7a00 	vldr	s14, [r3]
 80026c4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026c8:	4a12      	ldr	r2, [pc, #72]	; (8002714 <sensorCalibration+0x398>)
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026da:	4a13      	ldr	r2, [pc, #76]	; (8002728 <sensorCalibration+0x3ac>)
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80026e4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026e8:	3301      	adds	r3, #1
 80026ea:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80026ee:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d9df      	bls.n	80026b6 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80026fc:	e027      	b.n	800274e <sensorCalibration+0x3d2>
 80026fe:	bf00      	nop
 8002700:	447a0000 	.word	0x447a0000
 8002704:	20000594 	.word	0x20000594
 8002708:	20000000 	.word	0x20000000
 800270c:	44bb8000 	.word	0x44bb8000
 8002710:	20000544 	.word	0x20000544
 8002714:	200005c4 	.word	0x200005c4
 8002718:	2000026c 	.word	0x2000026c
 800271c:	20000284 	.word	0x20000284
 8002720:	200004b8 	.word	0x200004b8
 8002724:	20000464 	.word	0x20000464
 8002728:	20000494 	.word	0x20000494
		side_offset_values[i] = side_min_values[i];
 800272c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002730:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002734:	490a      	ldr	r1, [pc, #40]	; (8002760 <sensorCalibration+0x3e4>)
 8002736:	0092      	lsls	r2, r2, #2
 8002738:	440a      	add	r2, r1
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	4909      	ldr	r1, [pc, #36]	; (8002764 <sensorCalibration+0x3e8>)
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002744:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002748:	3301      	adds	r3, #1
 800274a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800274e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002752:	2b01      	cmp	r3, #1
 8002754:	d9ea      	bls.n	800272c <sensorCalibration+0x3b0>
	}
}
 8002756:	bf00      	nop
 8002758:	3780      	adds	r7, #128	; 0x80
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200005c4 	.word	0x200005c4
 8002764:	2000045c 	.word	0x2000045c

08002768 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002778:	b2db      	uxtb	r3, r3
 800277a:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 800277c:	2200      	movs	r2, #0
 800277e:	2104      	movs	r1, #4
 8002780:	480d      	ldr	r0, [pc, #52]	; (80027b8 <read_byte+0x50>)
<<<<<<< HEAD
 8002782:	f003 fa01 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8002782:	f003 fa03 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8002786:	f107 010f 	add.w	r1, r7, #15
 800278a:	2364      	movs	r3, #100	; 0x64
 800278c:	2201      	movs	r2, #1
 800278e:	480b      	ldr	r0, [pc, #44]	; (80027bc <read_byte+0x54>)
<<<<<<< HEAD
 8002790:	f003 ffec 	bl	800676c <HAL_SPI_Transmit>
=======
 8002790:	f003 ffee 	bl	8006770 <HAL_SPI_Transmit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8002794:	f107 010e 	add.w	r1, r7, #14
 8002798:	2364      	movs	r3, #100	; 0x64
 800279a:	2201      	movs	r2, #1
 800279c:	4807      	ldr	r0, [pc, #28]	; (80027bc <read_byte+0x54>)
<<<<<<< HEAD
 800279e:	f004 f919 	bl	80069d4 <HAL_SPI_Receive>
=======
 800279e:	f004 f91b 	bl	80069d8 <HAL_SPI_Receive>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		CS_SET;
 80027a2:	2201      	movs	r2, #1
 80027a4:	2104      	movs	r1, #4
 80027a6:	4804      	ldr	r0, [pc, #16]	; (80027b8 <read_byte+0x50>)
<<<<<<< HEAD
 80027a8:	f003 f9ee 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80027a8:	f003 f9f0 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

	return val;
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	2000068c 	.word	0x2000068c

080027c0 <read_gyro_data>:
		write_byte(0x1B, 0x18);
	}
	return ret;
}

void read_gyro_data() {
 80027c0:	b598      	push	{r3, r4, r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80027c4:	2047      	movs	r0, #71	; 0x47
 80027c6:	f7ff ffcf 	bl	8002768 <read_byte>
 80027ca:	4603      	mov	r3, r0
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	b21c      	sxth	r4, r3
 80027d0:	2048      	movs	r0, #72	; 0x48
 80027d2:	f7ff ffc9 	bl	8002768 <read_byte>
 80027d6:	4603      	mov	r3, r0
 80027d8:	b21b      	sxth	r3, r3
 80027da:	4323      	orrs	r3, r4
 80027dc:	b21a      	sxth	r2, r3
 80027de:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <read_gyro_data+0x28>)
 80027e0:	801a      	strh	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	bd98      	pop	{r3, r4, r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200005cc 	.word	0x200005cc
 80027ec:	00000000 	.word	0x00000000

080027f0 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3500, ki = 40000, kd = 0.0;
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <calculateVelocityControlFlip+0xf0>)
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <calculateVelocityControlFlip+0xf4>)
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800280a:	f000 f8cd 	bl	80029a8 <getCurrentVelocity>
 800280e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <calculateVelocityControlFlip+0xf8>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d159      	bne.n	80028ce <calculateVelocityControlFlip+0xde>
		if(i_clear_flag == 1){
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <calculateVelocityControlFlip+0xfc>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d106      	bne.n	8002830 <calculateVelocityControlFlip+0x40>
			i = 0;
 8002822:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <calculateVelocityControlFlip+0x100>)
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <calculateVelocityControlFlip+0xfc>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8002830:	f000 f886 	bl	8002940 <setvariablespeed>
 8002834:	eeb0 7a40 	vmov.f32	s14, s0
 8002838:	edd7 7a03 	vldr	s15, [r7, #12]
 800283c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002840:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8002844:	ed97 7a07 	vldr	s14, [r7, #28]
 8002848:	edd7 7a04 	vldr	s15, [r7, #16]
 800284c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002850:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8002854:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <calculateVelocityControlFlip+0x100>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe75 	bl	8000548 <__aeabi_f2d>
 800285e:	4604      	mov	r4, r0
 8002860:	460d      	mov	r5, r1
 8002862:	ed97 7a06 	vldr	s14, [r7, #24]
 8002866:	edd7 7a04 	vldr	s15, [r7, #16]
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	ee17 0a90 	vmov	r0, s15
 8002872:	f7fd fe69 	bl	8000548 <__aeabi_f2d>
 8002876:	a318      	add	r3, pc, #96	; (adr r3, 80028d8 <calculateVelocityControlFlip+0xe8>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd febc 	bl	80005f8 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fd00 	bl	800028c <__adddf3>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	4618      	mov	r0, r3
 8002892:	4621      	mov	r1, r4
 8002894:	f7fe f9a8 	bl	8000be8 <__aeabi_d2f>
 8002898:	4602      	mov	r2, r0
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <calculateVelocityControlFlip+0x100>)
 800289c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		mon_p = p;
 800289e:	4a15      	ldr	r2, [pc, #84]	; (80028f4 <calculateVelocityControlFlip+0x104>)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <calculateVelocityControlFlip+0x100>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <calculateVelocityControlFlip+0x108>)
 80028aa:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <calculateVelocityControlFlip+0x100>)
 80028ae:	ed93 7a00 	vldr	s14, [r3]
 80028b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80028be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <calculateVelocityControlFlip+0x10c>)
 80028c4:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80028c8:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <calculateVelocityControlFlip+0x110>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6013      	str	r3, [r2, #0]

	}

}
 80028ce:	bf00      	nop
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bdb0      	pop	{r4, r5, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80028dc:	3f50624d 	.word	0x3f50624d
 80028e0:	455ac000 	.word	0x455ac000
 80028e4:	471c4000 	.word	0x471c4000
 80028e8:	200003a0 	.word	0x200003a0
 80028ec:	200003a1 	.word	0x200003a1
 80028f0:	200003b0 	.word	0x200003b0
 80028f4:	200005e4 	.word	0x200005e4
 80028f8:	200005dc 	.word	0x200005dc
 80028fc:	200003a4 	.word	0x200003a4
 8002900:	200003b4 	.word	0x200003b4

08002904 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <getVelocityControlTerm+0x18>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	ee07 3a90 	vmov	s15, r3
}
 8002910:	eeb0 0a67 	vmov.f32	s0, s15
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	200003a4 	.word	0x200003a4

08002920 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <setTargetVelocity+0x1c>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6013      	str	r3, [r2, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	200003a8 	.word	0x200003a8

08002940 <setvariablespeed>:

float setvariablespeed(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8002944:	f7fe fc3c 	bl	80011c0 <getspeedcount>
 8002948:	eeb0 7a40 	vmov.f32	s14, s0
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <setvariablespeed+0x5c>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	db04      	blt.n	8002966 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <setvariablespeed+0x5c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <setvariablespeed+0x60>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	e012      	b.n	800298c <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8002966:	f7fe fc2b 	bl	80011c0 <getspeedcount>
 800296a:	eeb0 7a40 	vmov.f32	s14, s0
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <setvariablespeed+0x5c>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	d506      	bpl.n	800298c <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800297e:	f7fe fc1f 	bl	80011c0 <getspeedcount>
 8002982:	eef0 7a40 	vmov.f32	s15, s0
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <setvariablespeed+0x60>)
 8002988:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <setvariablespeed+0x60>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	ee07 3a90 	vmov	s15, r3
}
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	200003a8 	.word	0x200003a8
 80029a0:	200003ac 	.word	0x200003ac
 80029a4:	00000000 	.word	0x00000000

080029a8 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	80fb      	strh	r3, [r7, #6]
 80029b2:	2300      	movs	r3, #0
 80029b4:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80029b6:	1d3a      	adds	r2, r7, #4
 80029b8:	1dbb      	adds	r3, r7, #6
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fbb5 	bl	800112c <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80029c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	0fda      	lsrs	r2, r3, #31
 80029d0:	4413      	add	r3, r2
 80029d2:	105b      	asrs	r3, r3, #1
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f7fd fdb1 	bl	8000548 <__aeabi_f2d>
 80029e6:	a30d      	add	r3, pc, #52	; (adr r3, 8002a1c <getCurrentVelocity+0x74>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe04 	bl	80005f8 <__aeabi_dmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	460c      	mov	r4, r1
 80029f4:	4618      	mov	r0, r3
 80029f6:	4621      	mov	r1, r4
 80029f8:	f7fe f8f6 	bl	8000be8 <__aeabi_d2f>
 80029fc:	4603      	mov	r3, r0
 80029fe:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8002a00:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <getCurrentVelocity+0x70>)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	ee07 3a90 	vmov	s15, r3
}
 8002a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200005d8 	.word	0x200005d8
 8002a1c:	31e7b585 	.word	0x31e7b585
 8002a20:	3f8e28c7 	.word	0x3f8e28c7

08002a24 <startVelocityControl>:
{
	return target_velocity;
}

void startVelocityControl(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <startVelocityControl+0x1c>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <startVelocityControl+0x20>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
}
 8002a34:	bf00      	nop
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200003a0 	.word	0x200003a0
 8002a44:	200003a1 	.word	0x200003a1

08002a48 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <stopVelocityControl+0x14>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	200003a0 	.word	0x200003a0

08002a60 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11f      	bne.n	8002ab2 <HAL_TIM_PeriodElapsedCallback+0x52>
      timer++;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a7a:	6013      	str	r3, [r2, #0]
      timer2++;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a16      	ldr	r2, [pc, #88]	; (8002adc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002a84:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8002a86:	f7fe fa9b 	bl	8000fc0 <updateEncoderCnt>
      updateIMUValue();
 8002a8a:	f7fe fbdd 	bl	8001248 <updateIMUValue>
      updateAnalogSensor();
 8002a8e:	f7ff fa83 	bl	8001f98 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8002a92:	f7fe fe75 	bl	8001780 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8002a96:	f7ff feab 	bl	80027f0 <calculateVelocityControlFlip>
      lineTraceFlip();
 8002a9a:	f7fe ff1f 	bl	80018dc <lineTraceFlip>
      motorCtrlFlip();
<<<<<<< HEAD
 8002a9e:	f000 ff61 	bl	8003964 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8002aa2:	f000 ffc3 	bl	8003a2c <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8002aa6:	f001 f82f 	bl	8003b08 <updateSideSensorStatus>
=======
 8002a9e:	f000 ff63 	bl	8003968 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8002aa2:	f000 ffc5 	bl	8003a30 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8002aa6:	f001 f831 	bl	8003b0c <updateSideSensorStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

      checkCourseOut();
 8002aaa:	f7fe ffef 	bl	8001a8c <checkCourseOut>

      resetEncoderCnt();
 8002aae:	f7fe fb73 	bl	8001198 <resetEncoderCnt>
   }

   if(htim->Instance == TIM7){//0.1ms
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <HAL_TIM_PeriodElapsedCallback+0x6a>
	   timer1++;
 8002abc:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002ac4:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8002ac6:	f7ff f865 	bl	8001b94 <storeAnalogSensorBuffer>

   }
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40001000 	.word	0x40001000
 8002ad8:	200005e8 	.word	0x200005e8
 8002adc:	20000630 	.word	0x20000630
 8002ae0:	40001400 	.word	0x40001400
 8002ae4:	20000808 	.word	0x20000808

08002ae8 <init>:

void init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	  initADC();
 8002aec:	f7ff f83c 	bl	8001b68 <initADC>
	  initEncoder();
 8002af0:	f7fe fa4a 	bl	8000f88 <initEncoder>
	  //sensorCalibration();
	  HAL_TIM_Base_Start_IT(&htim6);
 8002af4:	4809      	ldr	r0, [pc, #36]	; (8002b1c <init+0x34>)
<<<<<<< HEAD
 8002af6:	f004 fb54 	bl	80071a2 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <init+0x38>)
 8002afc:	f004 fb51 	bl	80071a2 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8002b00:	f000 ff18 	bl	8003934 <initMotor>
=======
 8002af6:	f004 fb56 	bl	80071a6 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8002afa:	4809      	ldr	r0, [pc, #36]	; (8002b20 <init+0x38>)
 8002afc:	f004 fb53 	bl	80071a6 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8002b00:	f000 ff1a 	bl	8003938 <initMotor>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

	  setLED('R');
 8002b04:	2052      	movs	r0, #82	; 0x52
 8002b06:	f7fe fc4b 	bl	80013a0 <setLED>

	  sensorCalibration();
 8002b0a:	f7ff fc37 	bl	800237c <sensorCalibration>

	  HAL_Delay(1000);
 8002b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 8002b12:	f001 fdf1 	bl	80046f8 <HAL_Delay>
=======
 8002b12:	f001 fdf3 	bl	80046fc <HAL_Delay>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000784 	.word	0x20000784
 8002b20:	2000086c 	.word	0x2000086c

08002b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8002b2a:	f001 fd73 	bl	8004614 <HAL_Init>
=======
 8002b2a:	f001 fd75 	bl	8004618 <HAL_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8002b2e:	f000 f9af 	bl	8002e90 <SystemClock_Config>
=======
 8002b2e:	f000 f9b1 	bl	8002e94 <SystemClock_Config>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8002b32:	f000 fe3d 	bl	80037b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b36:	f000 fe13 	bl	8003760 <MX_DMA_Init>
  MX_TIM1_Init();
 8002b3a:	f000 fbc3 	bl	80032c4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b3e:	f000 fc43 	bl	80033c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b42:	f000 fc95 	bl	8003470 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002b46:	f000 fd51 	bl	80035ec <MX_TIM8_Init>
  MX_ADC1_Init();
 8002b4a:	f000 fa0b 	bl	8002f64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b4e:	f000 fb55 	bl	80031fc <MX_I2C1_Init>
  MX_SPI3_Init();
 8002b52:	f000 fb81 	bl	8003258 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002b56:	f000 fdd9 	bl	800370c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002b5a:	f000 fcdd 	bl	8003518 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002b5e:	f000 fd11 	bl	8003584 <MX_TIM7_Init>
  MX_ADC2_Init();
 8002b62:	f000 fa5f 	bl	8003024 <MX_ADC2_Init>
=======
 8002b32:	f000 fe3f 	bl	80037b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b36:	f000 fe15 	bl	8003764 <MX_DMA_Init>
  MX_TIM1_Init();
 8002b3a:	f000 fbc5 	bl	80032c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b3e:	f000 fc45 	bl	80033cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b42:	f000 fc97 	bl	8003474 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002b46:	f000 fd53 	bl	80035f0 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002b4a:	f000 fa0d 	bl	8002f68 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b4e:	f000 fb57 	bl	8003200 <MX_I2C1_Init>
  MX_SPI3_Init();
 8002b52:	f000 fb83 	bl	800325c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002b56:	f000 fddb 	bl	8003710 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002b5a:	f000 fcdf 	bl	800351c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002b5e:	f000 fd13 	bl	8003588 <MX_TIM7_Init>
  MX_ADC2_Init();
 8002b62:	f000 fa61 	bl	8003028 <MX_ADC2_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN 2 */

  init();
 8002b66:	f7ff ffbf 	bl	8002ae8 <init>

  bool running_flag = false;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002b6e:	204c      	movs	r0, #76	; 0x4c
<<<<<<< HEAD
 8002b70:	f001 fcb0 	bl	80044d4 <getSwitchStatus>
=======
 8002b70:	f001 fcb2 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d109      	bne.n	8002b8e <main+0x6a>
 8002b7a:	4bbb      	ldr	r3, [pc, #748]	; (8002e68 <main+0x344>)
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <main+0x6a>
		  timer = 0;
 8002b82:	4bba      	ldr	r3, [pc, #744]	; (8002e6c <main+0x348>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8002b88:	4bb7      	ldr	r3, [pc, #732]	; (8002e68 <main+0x344>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8002b8e:	204c      	movs	r0, #76	; 0x4c
<<<<<<< HEAD
 8002b90:	f001 fca0 	bl	80044d4 <getSwitchStatus>
=======
 8002b90:	f001 fca2 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10a      	bne.n	8002bb0 <main+0x8c>
 8002b9a:	4bb4      	ldr	r3, [pc, #720]	; (8002e6c <main+0x348>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b14      	cmp	r3, #20
 8002ba0:	d906      	bls.n	8002bb0 <main+0x8c>
 8002ba2:	4bb1      	ldr	r3, [pc, #708]	; (8002e68 <main+0x344>)
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d102      	bne.n	8002bb0 <main+0x8c>
		  sw = 2;
 8002baa:	4baf      	ldr	r3, [pc, #700]	; (8002e68 <main+0x344>)
 8002bac:	2202      	movs	r2, #2
 8002bae:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8002bb0:	4bae      	ldr	r3, [pc, #696]	; (8002e6c <main+0x348>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b28      	cmp	r3, #40	; 0x28
 8002bb6:	d906      	bls.n	8002bc6 <main+0xa2>
 8002bb8:	4bab      	ldr	r3, [pc, #684]	; (8002e68 <main+0x344>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d102      	bne.n	8002bc6 <main+0xa2>
		  sw = 0;
 8002bc0:	4ba9      	ldr	r3, [pc, #676]	; (8002e68 <main+0x344>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8002bc6:	204c      	movs	r0, #76	; 0x4c
<<<<<<< HEAD
 8002bc8:	f001 fc84 	bl	80044d4 <getSwitchStatus>
=======
 8002bc8:	f001 fc86 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10c      	bne.n	8002bec <main+0xc8>
 8002bd2:	4ba5      	ldr	r3, [pc, #660]	; (8002e68 <main+0x344>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d108      	bne.n	8002bec <main+0xc8>
		  //mode_selector++;
		  soiya++;
 8002bda:	4ba5      	ldr	r3, [pc, #660]	; (8002e70 <main+0x34c>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	4ba3      	ldr	r3, [pc, #652]	; (8002e70 <main+0x34c>)
 8002be4:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8002be6:	4ba0      	ldr	r3, [pc, #640]	; (8002e68 <main+0x344>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8002bec:	2052      	movs	r0, #82	; 0x52
<<<<<<< HEAD
 8002bee:	f001 fc71 	bl	80044d4 <getSwitchStatus>
=======
 8002bee:	f001 fc73 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d109      	bne.n	8002c0c <main+0xe8>
 8002bf8:	4b9e      	ldr	r3, [pc, #632]	; (8002e74 <main+0x350>)
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <main+0xe8>
	  	  timer = 0;
 8002c00:	4b9a      	ldr	r3, [pc, #616]	; (8002e6c <main+0x348>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8002c06:	4b9b      	ldr	r3, [pc, #620]	; (8002e74 <main+0x350>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8002c0c:	2052      	movs	r0, #82	; 0x52
<<<<<<< HEAD
 8002c0e:	f001 fc61 	bl	80044d4 <getSwitchStatus>
=======
 8002c0e:	f001 fc63 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10a      	bne.n	8002c2e <main+0x10a>
 8002c18:	4b94      	ldr	r3, [pc, #592]	; (8002e6c <main+0x348>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b14      	cmp	r3, #20
 8002c1e:	d906      	bls.n	8002c2e <main+0x10a>
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <main+0x350>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d102      	bne.n	8002c2e <main+0x10a>
	  	  sw2 = 2;
 8002c28:	4b92      	ldr	r3, [pc, #584]	; (8002e74 <main+0x350>)
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8002c2e:	4b8f      	ldr	r3, [pc, #572]	; (8002e6c <main+0x348>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b28      	cmp	r3, #40	; 0x28
 8002c34:	d906      	bls.n	8002c44 <main+0x120>
 8002c36:	4b8f      	ldr	r3, [pc, #572]	; (8002e74 <main+0x350>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <main+0x120>
	  	  sw2 = 0;
 8002c3e:	4b8d      	ldr	r3, [pc, #564]	; (8002e74 <main+0x350>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8002c44:	2052      	movs	r0, #82	; 0x52
<<<<<<< HEAD
 8002c46:	f001 fc45 	bl	80044d4 <getSwitchStatus>
=======
 8002c46:	f001 fc47 	bl	80044d8 <getSwitchStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10c      	bne.n	8002c6a <main+0x146>
 8002c50:	4b88      	ldr	r3, [pc, #544]	; (8002e74 <main+0x350>)
 8002c52:	881b      	ldrh	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d108      	bne.n	8002c6a <main+0x146>
	  	  cnt++;
 8002c58:	4b87      	ldr	r3, [pc, #540]	; (8002e78 <main+0x354>)
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	4b85      	ldr	r3, [pc, #532]	; (8002e78 <main+0x354>)
 8002c62:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8002c64:	4b83      	ldr	r3, [pc, #524]	; (8002e74 <main+0x350>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8002c6a:	4b83      	ldr	r3, [pc, #524]	; (8002e78 <main+0x354>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d902      	bls.n	8002c78 <main+0x154>
		  cnt = 0;
 8002c72:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <main+0x354>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8002c78:	4b7f      	ldr	r3, [pc, #508]	; (8002e78 <main+0x354>)
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <main+0x174>
		  HAL_Delay(1000);
 8002c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
<<<<<<< HEAD
 8002c84:	f001 fd38 	bl	80046f8 <HAL_Delay>
=======
 8002c84:	f001 fd3a 	bl	80046fc <HAL_Delay>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		  running_flag = true;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8002c8c:	4b7b      	ldr	r3, [pc, #492]	; (8002e7c <main+0x358>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8002c92:	4b79      	ldr	r3, [pc, #484]	; (8002e78 <main+0x354>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <main+0x188>
		  stopLineTrace();
 8002ca4:	f7fe fee0 	bl	8001a68 <stopLineTrace>
		  stopVelocityControl();
 8002ca8:	f7ff fece 	bl	8002a48 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
<<<<<<< HEAD
 8002cac:	f001 f840 	bl	8003d30 <getgoalStatus>
=======
 8002cac:	f001 f842 	bl	8003d34 <getgoalStatus>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <main+0x1a2>
		  running_flag = false;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8002cba:	4b6f      	ldr	r3, [pc, #444]	; (8002e78 <main+0x354>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8002cc0:	2000      	movs	r0, #0
<<<<<<< HEAD
 8002cc2:	f000 ff03 	bl	8003acc <setsuctionMotor>
=======
 8002cc2:	f000 ff05 	bl	8003ad0 <setsuctionMotor>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
		  //getgoalStatus() = false;
	  }

	  if(soiya >= 7){
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <main+0x34c>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	2b06      	cmp	r3, #6
 8002ccc:	d902      	bls.n	8002cd4 <main+0x1b0>
		  soiya = 0;
 8002cce:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <main+0x34c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8002cd4:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <main+0x34c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	2b06      	cmp	r3, #6
 8002cda:	f200 80b5 	bhi.w	8002e48 <main+0x324>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <main+0x1c0>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d01 	.word	0x08002d01
 8002ce8:	08002d1d 	.word	0x08002d1d
 8002cec:	08002d51 	.word	0x08002d51
 8002cf0:	08002d83 	.word	0x08002d83
 8002cf4:	08002db5 	.word	0x08002db5
 8002cf8:	08002de7 	.word	0x08002de7
 8002cfc:	08002e1b 	.word	0x08002e1b

			  case 0:
				  setLED('W');
 8002d00:	2057      	movs	r0, #87	; 0x57
 8002d02:	f7fe fb4d 	bl	80013a0 <setLED>
				  setLED2('R');
 8002d06:	2052      	movs	r0, #82	; 0x52
 8002d08:	f7fe fc18 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 809c 	beq.w	8002e4c <main+0x328>
				  		  //startLineTrace();

				  		  //setTargetVelocity(0.6);
				  		  //startVelocityControl();

				  		  setsuctionMotor(250);
 8002d14:	20fa      	movs	r0, #250	; 0xfa
<<<<<<< HEAD
 8002d16:	f000 fed9 	bl	8003acc <setsuctionMotor>
=======
 8002d16:	f000 fedb 	bl	8003ad0 <setsuctionMotor>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
				  		  //running();
				  		  //setMotor(500, 500);
				  		  //while(1);
				  }

				  break;
 8002d1a:	e097      	b.n	8002e4c <main+0x328>

			  case 1:
				  setLED('G');
 8002d1c:	2047      	movs	r0, #71	; 0x47
 8002d1e:	f7fe fb3f 	bl	80013a0 <setLED>
				  setLED2('G');
 8002d22:	2047      	movs	r0, #71	; 0x47
 8002d24:	f7fe fc0a 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8090 	beq.w	8002e50 <main+0x32c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002d30:	f7fe fa7a 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(0.0);
 8002d34:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8002e80 <main+0x35c>
 8002d38:	f7ff fdf2 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002d3c:	20fa      	movs	r0, #250	; 0xfa
<<<<<<< HEAD
 8002d3e:	f000 fec5 	bl	8003acc <setsuctionMotor>

						  HAL_Delay(1000);
 8002d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d46:	f001 fcd7 	bl	80046f8 <HAL_Delay>

						  running();
 8002d4a:	f000 ff19 	bl	8003b80 <running>
=======
 8002d3e:	f000 fec7 	bl	8003ad0 <setsuctionMotor>

						  HAL_Delay(1000);
 8002d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d46:	f001 fcd9 	bl	80046fc <HAL_Delay>

						  running();
 8002d4a:	f000 ff1b 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //running();
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002d4e:	e07f      	b.n	8002e50 <main+0x32c>

			  case 2:
				  setLED('B');
 8002d50:	2042      	movs	r0, #66	; 0x42
 8002d52:	f7fe fb25 	bl	80013a0 <setLED>
				  setLED2('B');
 8002d56:	2042      	movs	r0, #66	; 0x42
 8002d58:	f7fe fbf0 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002d5c:	79fb      	ldrb	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d078      	beq.n	8002e54 <main+0x330>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002d62:	f7fe fa61 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.2);
 8002d66:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002e84 <main+0x360>
 8002d6a:	f7ff fdd9 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002d6e:	20fa      	movs	r0, #250	; 0xfa
<<<<<<< HEAD
 8002d70:	f000 feac 	bl	8003acc <setsuctionMotor>
						  HAL_Delay(1000);
 8002d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d78:	f001 fcbe 	bl	80046f8 <HAL_Delay>

						  running();
 8002d7c:	f000 ff00 	bl	8003b80 <running>
=======
 8002d70:	f000 feae 	bl	8003ad0 <setsuctionMotor>
						  HAL_Delay(1000);
 8002d74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d78:	f001 fcc0 	bl	80046fc <HAL_Delay>

						  running();
 8002d7c:	f000 ff02 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002d80:	e068      	b.n	8002e54 <main+0x330>

			  case 3:
				  setLED('M');
 8002d82:	204d      	movs	r0, #77	; 0x4d
 8002d84:	f7fe fb0c 	bl	80013a0 <setLED>
				  setLED2('W');
 8002d88:	2057      	movs	r0, #87	; 0x57
 8002d8a:	f7fe fbd7 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d061      	beq.n	8002e58 <main+0x334>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002d94:	f7fe fa48 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.4);
 8002d98:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8002e88 <main+0x364>
 8002d9c:	f7ff fdc0 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(200);
 8002da0:	20c8      	movs	r0, #200	; 0xc8
<<<<<<< HEAD
 8002da2:	f000 fe93 	bl	8003acc <setsuctionMotor>

						  HAL_Delay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f001 fca5 	bl	80046f8 <HAL_Delay>

						  running();
 8002dae:	f000 fee7 	bl	8003b80 <running>
=======
 8002da2:	f000 fe95 	bl	8003ad0 <setsuctionMotor>

						  HAL_Delay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f001 fca7 	bl	80046fc <HAL_Delay>

						  running();
 8002dae:	f000 fee9 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002db2:	e051      	b.n	8002e58 <main+0x334>

			  case 4:
				  setLED('Y');
 8002db4:	2059      	movs	r0, #89	; 0x59
 8002db6:	f7fe faf3 	bl	80013a0 <setLED>
				  setLED2('Y');
 8002dba:	2059      	movs	r0, #89	; 0x59
 8002dbc:	f7fe fbbe 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d04a      	beq.n	8002e5c <main+0x338>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002dc6:	f7fe fa2f 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.6);
 8002dca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002e8c <main+0x368>
 8002dce:	f7ff fda7 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002dd2:	20fa      	movs	r0, #250	; 0xfa
<<<<<<< HEAD
 8002dd4:	f000 fe7a 	bl	8003acc <setsuctionMotor>

						  HAL_Delay(1000);
 8002dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ddc:	f001 fc8c 	bl	80046f8 <HAL_Delay>

						  running();
 8002de0:	f000 fece 	bl	8003b80 <running>
=======
 8002dd4:	f000 fe7c 	bl	8003ad0 <setsuctionMotor>

						  HAL_Delay(1000);
 8002dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ddc:	f001 fc8e 	bl	80046fc <HAL_Delay>

						  running();
 8002de0:	f000 fed0 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002de4:	e03a      	b.n	8002e5c <main+0x338>

			  case 5:
				  setLED('C');
 8002de6:	2043      	movs	r0, #67	; 0x43
 8002de8:	f7fe fada 	bl	80013a0 <setLED>
				  setLED2('X');
 8002dec:	2058      	movs	r0, #88	; 0x58
 8002dee:	f7fe fba5 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d033      	beq.n	8002e60 <main+0x33c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002df8:	f7fe fa16 	bl	8001228 <clearspeedcount>

<<<<<<< HEAD
						  setTargetVelocity(2.0);
 8002dfc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002e00:	f7ff fd8e 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(350);
 8002e04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002e08:	f000 fe60 	bl	8003acc <setsuctionMotor>

						  HAL_Delay(1000);
 8002e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e10:	f001 fc72 	bl	80046f8 <HAL_Delay>

						  running();
 8002e14:	f000 feb4 	bl	8003b80 <running>
=======
						  setTargetVelocity(1.8);
 8002dfc:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002e90 <main+0x36c>
 8002e00:	f7ff fd8e 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(300);
 8002e04:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e08:	f000 fe62 	bl	8003ad0 <setsuctionMotor>

						  HAL_Delay(1000);
 8002e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e10:	f001 fc74 	bl	80046fc <HAL_Delay>

						  running();
 8002e14:	f000 feb6 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002e18:	e022      	b.n	8002e60 <main+0x33c>

			  case 6:
				  setLED('R');
 8002e1a:	2052      	movs	r0, #82	; 0x52
 8002e1c:	f7fe fac0 	bl	80013a0 <setLED>

				  if(running_flag == true){
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d01e      	beq.n	8002e64 <main+0x340>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8002e26:	f7fe f9ff 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(2.5);
 8002e2a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8002e2e:	f7ff fd77 	bl	8002920 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(750);
 8002e32:	f240 20ee 	movw	r0, #750	; 0x2ee
<<<<<<< HEAD
 8002e36:	f000 fe49 	bl	8003acc <setsuctionMotor>

						  HAL_Delay(1000);
 8002e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3e:	f001 fc5b 	bl	80046f8 <HAL_Delay>

						  running();
 8002e42:	f000 fe9d 	bl	8003b80 <running>
=======
 8002e36:	f000 fe4b 	bl	8003ad0 <setsuctionMotor>

						  HAL_Delay(1000);
 8002e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3e:	f001 fc5d 	bl	80046fc <HAL_Delay>

						  running();
 8002e42:	f000 fe9f 	bl	8003b84 <running>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002e46:	e00d      	b.n	8002e64 <main+0x340>

			  default:
				  break;
 8002e48:	bf00      	nop
 8002e4a:	e690      	b.n	8002b6e <main+0x4a>
				  break;
 8002e4c:	bf00      	nop
 8002e4e:	e68e      	b.n	8002b6e <main+0x4a>
				  break;
 8002e50:	bf00      	nop
 8002e52:	e68c      	b.n	8002b6e <main+0x4a>
				  break;
 8002e54:	bf00      	nop
 8002e56:	e68a      	b.n	8002b6e <main+0x4a>
				  break;
 8002e58:	bf00      	nop
 8002e5a:	e688      	b.n	8002b6e <main+0x4a>
				  break;
 8002e5c:	bf00      	nop
 8002e5e:	e686      	b.n	8002b6e <main+0x4a>
				  break;
 8002e60:	bf00      	nop
 8002e62:	e684      	b.n	8002b6e <main+0x4a>
				  break;
 8002e64:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002e66:	e682      	b.n	8002b6e <main+0x4a>
 8002e68:	20000804 	.word	0x20000804
 8002e6c:	200005e8 	.word	0x200005e8
 8002e70:	200003ba 	.word	0x200003ba
 8002e74:	200003b8 	.word	0x200003b8
 8002e78:	20000688 	.word	0x20000688
 8002e7c:	20000630 	.word	0x20000630
 8002e80:	00000000 	.word	0x00000000
 8002e84:	3f99999a 	.word	0x3f99999a
 8002e88:	3fb33333 	.word	0x3fb33333
 8002e8c:	3fcccccd 	.word	0x3fcccccd
<<<<<<< HEAD

08002e90 <SystemClock_Config>:
=======
 8002e90:	3fe66666 	.word	0x3fe66666

08002e94 <SystemClock_Config>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b094      	sub	sp, #80	; 0x50
 8002e94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	2230      	movs	r2, #48	; 0x30
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f005 fc23 	bl	80086ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea4:	f107 030c 	add.w	r3, r7, #12
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
=======
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b094      	sub	sp, #80	; 0x50
 8002e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e9a:	f107 0320 	add.w	r3, r7, #32
 8002e9e:	2230      	movs	r2, #48	; 0x30
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f005 fc23 	bl	80086ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <SystemClock_Config+0xcc>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a27      	ldr	r2, [pc, #156]	; (8002f5c <SystemClock_Config+0xcc>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec4:	4b25      	ldr	r3, [pc, #148]	; (8002f5c <SystemClock_Config+0xcc>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60bb      	str	r3, [r7, #8]
 8002ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <SystemClock_Config+0xd0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <SystemClock_Config+0xd0>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <SystemClock_Config+0xd0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
=======
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <SystemClock_Config+0xcc>)
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	4a27      	ldr	r2, [pc, #156]	; (8002f60 <SystemClock_Config+0xcc>)
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec8:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <SystemClock_Config+0xcc>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <SystemClock_Config+0xd0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <SystemClock_Config+0xd0>)
 8002ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <SystemClock_Config+0xd0>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 8002eec:	2302      	movs	r3, #2
 8002eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002efc:	2300      	movs	r3, #0
 8002efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f00:	2308      	movs	r3, #8
 8002f02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f04:	23a8      	movs	r3, #168	; 0xa8
 8002f06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f0c:	2304      	movs	r3, #4
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f10:	f107 0320 	add.w	r3, r7, #32
 8002f14:	4618      	mov	r0, r3
 8002f16:	f002 ff89 	bl	8005e2c <HAL_RCC_OscConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f20:	f000 fd04 	bl	800392c <Error_Handler>
=======
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002efc:	2302      	movs	r3, #2
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f00:	2300      	movs	r3, #0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f04:	2308      	movs	r3, #8
 8002f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f08:	23a8      	movs	r3, #168	; 0xa8
 8002f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f10:	2304      	movs	r3, #4
 8002f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f14:	f107 0320 	add.w	r3, r7, #32
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 ff89 	bl	8005e30 <HAL_RCC_OscConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002f24:	f000 fd04 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8002f24:	230f      	movs	r3, #15
 8002f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	2105      	movs	r1, #5
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 f9e2 	bl	800630c <HAL_RCC_ClockConfig>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f4e:	f000 fced 	bl	800392c <Error_Handler>
  }
}
 8002f52:	bf00      	nop
 8002f54:	3750      	adds	r7, #80	; 0x50
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000

08002f64 <MX_ADC1_Init>:
=======
 8002f28:	230f      	movs	r3, #15
 8002f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f40:	f107 030c 	add.w	r3, r7, #12
 8002f44:	2105      	movs	r1, #5
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 f9e2 	bl	8006310 <HAL_RCC_ClockConfig>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f52:	f000 fced 	bl	8003930 <Error_Handler>
  }
}
 8002f56:	bf00      	nop
 8002f58:	3750      	adds	r7, #80	; 0x50
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40007000 	.word	0x40007000

08002f68 <MX_ADC1_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
<<<<<<< HEAD
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
=======
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 8002f6a:	463b      	mov	r3, r7
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	60da      	str	r2, [r3, #12]
=======
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
<<<<<<< HEAD
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f78:	4a28      	ldr	r2, [pc, #160]	; (800301c <MX_ADC1_Init+0xb8>)
 8002f7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f84:	4b24      	ldr	r3, [pc, #144]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fa6:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <MX_ADC1_Init+0xbc>)
 8002fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002faa:	4b1b      	ldr	r3, [pc, #108]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fc4:	4814      	ldr	r0, [pc, #80]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fc6:	f001 fbb9 	bl	800473c <HAL_ADC_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fd0:	f000 fcac 	bl	800392c <Error_Handler>
=======
 8002f7a:	4b28      	ldr	r3, [pc, #160]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f7c:	4a28      	ldr	r2, [pc, #160]	; (8003020 <MX_ADC1_Init+0xb8>)
 8002f7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f80:	4b26      	ldr	r3, [pc, #152]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f88:	4b24      	ldr	r3, [pc, #144]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <MX_ADC1_Init+0xb4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <MX_ADC1_Init+0xb4>)
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <MX_ADC1_Init+0xbc>)
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002fc8:	4814      	ldr	r0, [pc, #80]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fca:	f001 fbb9 	bl	8004740 <HAL_ADC_Init>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fd4:	f000 fcac 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
<<<<<<< HEAD
 8002fd4:	230c      	movs	r3, #12
 8002fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002fdc:	2307      	movs	r3, #7
 8002fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <MX_ADC1_Init+0xb4>)
 8002fe6:	f001 fcfd 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ff0:	f000 fc9c 	bl	800392c <Error_Handler>
=======
 8002fd8:	230c      	movs	r3, #12
 8002fda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002fe0:	2307      	movs	r3, #7
 8002fe2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <MX_ADC1_Init+0xb4>)
 8002fea:	f001 fcfd 	bl	80049e8 <HAL_ADC_ConfigChannel>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ff4:	f000 fc9c 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
<<<<<<< HEAD
 8002ff4:	230d      	movs	r3, #13
 8002ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ffc:	463b      	mov	r3, r7
 8002ffe:	4619      	mov	r1, r3
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <MX_ADC1_Init+0xb4>)
 8003002:	f001 fcef 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800300c:	f000 fc8e 	bl	800392c <Error_Handler>
=======
 8002ff8:	230d      	movs	r3, #13
 8002ffa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003000:	463b      	mov	r3, r7
 8003002:	4619      	mov	r1, r3
 8003004:	4805      	ldr	r0, [pc, #20]	; (800301c <MX_ADC1_Init+0xb4>)
 8003006:	f001 fcef 	bl	80049e8 <HAL_ADC_ConfigChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003010:	f000 fc8e 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
<<<<<<< HEAD
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000054c 	.word	0x2000054c
 800301c:	40012000 	.word	0x40012000
 8003020:	0f000001 	.word	0x0f000001

08003024 <MX_ADC2_Init>:
=======
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	2000054c 	.word	0x2000054c
 8003020:	40012000 	.word	0x40012000
 8003024:	0f000001 	.word	0x0f000001

08003028 <MX_ADC2_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
<<<<<<< HEAD
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
=======
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
<<<<<<< HEAD
 800302a:	463b      	mov	r3, r7
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
=======
 800302e:	463b      	mov	r3, r7
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
<<<<<<< HEAD
 8003036:	4b6e      	ldr	r3, [pc, #440]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003038:	4a6e      	ldr	r2, [pc, #440]	; (80031f4 <MX_ADC2_Init+0x1d0>)
 800303a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800303c:	4b6c      	ldr	r3, [pc, #432]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 800303e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003042:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800304a:	4b69      	ldr	r3, [pc, #420]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 800304c:	2201      	movs	r2, #1
 800304e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003050:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003052:	2201      	movs	r2, #1
 8003054:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003056:	4b66      	ldr	r3, [pc, #408]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800305e:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003060:	2200      	movs	r2, #0
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003064:	4b62      	ldr	r3, [pc, #392]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003066:	4a64      	ldr	r2, [pc, #400]	; (80031f8 <MX_ADC2_Init+0x1d4>)
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800306a:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003070:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003072:	220c      	movs	r2, #12
 8003074:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003076:	4b5e      	ldr	r3, [pc, #376]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003080:	2201      	movs	r2, #1
 8003082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003084:	485a      	ldr	r0, [pc, #360]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003086:	f001 fb59 	bl	800473c <HAL_ADC_Init>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003090:	f000 fc4c 	bl	800392c <Error_Handler>
=======
 800303a:	4b6e      	ldr	r3, [pc, #440]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800303c:	4a6e      	ldr	r2, [pc, #440]	; (80031f8 <MX_ADC2_Init+0x1d0>)
 800303e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003040:	4b6c      	ldr	r3, [pc, #432]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003042:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003046:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003048:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800304e:	4b69      	ldr	r3, [pc, #420]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003050:	2201      	movs	r2, #1
 8003052:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003054:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003056:	2201      	movs	r2, #1
 8003058:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800305a:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003062:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003064:	2200      	movs	r2, #0
 8003066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800306a:	4a64      	ldr	r2, [pc, #400]	; (80031fc <MX_ADC2_Init+0x1d4>)
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800306e:	4b61      	ldr	r3, [pc, #388]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003070:	2200      	movs	r2, #0
 8003072:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003074:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003076:	220c      	movs	r2, #12
 8003078:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800307a:	4b5e      	ldr	r3, [pc, #376]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003082:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003084:	2201      	movs	r2, #1
 8003086:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003088:	485a      	ldr	r0, [pc, #360]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800308a:	f001 fb59 	bl	8004740 <HAL_ADC_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003094:	f000 fc4c 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
<<<<<<< HEAD
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003098:	2301      	movs	r3, #1
 800309a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800309c:	2307      	movs	r3, #7
 800309e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030a0:	463b      	mov	r3, r7
 80030a2:	4619      	mov	r1, r3
 80030a4:	4852      	ldr	r0, [pc, #328]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80030a6:	f001 fc9d 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80030b0:	f000 fc3c 	bl	800392c <Error_Handler>
=======
 8003098:	2300      	movs	r3, #0
 800309a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800309c:	2301      	movs	r3, #1
 800309e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80030a0:	2307      	movs	r3, #7
 80030a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030a4:	463b      	mov	r3, r7
 80030a6:	4619      	mov	r1, r3
 80030a8:	4852      	ldr	r0, [pc, #328]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80030aa:	f001 fc9d 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80030b4:	f000 fc3c 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
<<<<<<< HEAD
 80030b4:	2301      	movs	r3, #1
 80030b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030bc:	463b      	mov	r3, r7
 80030be:	4619      	mov	r1, r3
 80030c0:	484b      	ldr	r0, [pc, #300]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80030c2:	f001 fc8f 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80030cc:	f000 fc2e 	bl	800392c <Error_Handler>
=======
 80030b8:	2301      	movs	r3, #1
 80030ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80030bc:	2302      	movs	r3, #2
 80030be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030c0:	463b      	mov	r3, r7
 80030c2:	4619      	mov	r1, r3
 80030c4:	484b      	ldr	r0, [pc, #300]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80030c6:	f001 fc8f 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80030d0:	f000 fc2e 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
<<<<<<< HEAD
 80030d0:	2302      	movs	r3, #2
 80030d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80030d4:	2303      	movs	r3, #3
 80030d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030d8:	463b      	mov	r3, r7
 80030da:	4619      	mov	r1, r3
 80030dc:	4844      	ldr	r0, [pc, #272]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80030de:	f001 fc81 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80030e8:	f000 fc20 	bl	800392c <Error_Handler>
=======
 80030d4:	2302      	movs	r3, #2
 80030d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80030d8:	2303      	movs	r3, #3
 80030da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030dc:	463b      	mov	r3, r7
 80030de:	4619      	mov	r1, r3
 80030e0:	4844      	ldr	r0, [pc, #272]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80030e2:	f001 fc81 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80030ec:	f000 fc20 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
<<<<<<< HEAD
 80030ec:	2303      	movs	r3, #3
 80030ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80030f0:	2304      	movs	r3, #4
 80030f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030f4:	463b      	mov	r3, r7
 80030f6:	4619      	mov	r1, r3
 80030f8:	483d      	ldr	r0, [pc, #244]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80030fa:	f001 fc73 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003104:	f000 fc12 	bl	800392c <Error_Handler>
=======
 80030f0:	2303      	movs	r3, #3
 80030f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80030f4:	2304      	movs	r3, #4
 80030f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030f8:	463b      	mov	r3, r7
 80030fa:	4619      	mov	r1, r3
 80030fc:	483d      	ldr	r0, [pc, #244]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80030fe:	f001 fc73 	bl	80049e8 <HAL_ADC_ConfigChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003108:	f000 fc12 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
<<<<<<< HEAD
 8003108:	2304      	movs	r3, #4
 800310a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800310c:	2305      	movs	r3, #5
 800310e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003110:	463b      	mov	r3, r7
 8003112:	4619      	mov	r1, r3
 8003114:	4836      	ldr	r0, [pc, #216]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003116:	f001 fc65 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003120:	f000 fc04 	bl	800392c <Error_Handler>
=======
 800310c:	2304      	movs	r3, #4
 800310e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003110:	2305      	movs	r3, #5
 8003112:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003114:	463b      	mov	r3, r7
 8003116:	4619      	mov	r1, r3
 8003118:	4836      	ldr	r0, [pc, #216]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800311a:	f001 fc65 	bl	80049e8 <HAL_ADC_ConfigChannel>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003124:	f000 fc04 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
<<<<<<< HEAD
 8003124:	2305      	movs	r3, #5
 8003126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003128:	2306      	movs	r3, #6
 800312a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800312c:	463b      	mov	r3, r7
 800312e:	4619      	mov	r1, r3
 8003130:	482f      	ldr	r0, [pc, #188]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003132:	f001 fc57 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800313c:	f000 fbf6 	bl	800392c <Error_Handler>
=======
 8003128:	2305      	movs	r3, #5
 800312a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800312c:	2306      	movs	r3, #6
 800312e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003130:	463b      	mov	r3, r7
 8003132:	4619      	mov	r1, r3
 8003134:	482f      	ldr	r0, [pc, #188]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003136:	f001 fc57 	bl	80049e8 <HAL_ADC_ConfigChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003140:	f000 fbf6 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
<<<<<<< HEAD
 8003140:	2306      	movs	r3, #6
 8003142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003144:	2307      	movs	r3, #7
 8003146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003148:	463b      	mov	r3, r7
 800314a:	4619      	mov	r1, r3
 800314c:	4828      	ldr	r0, [pc, #160]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 800314e:	f001 fc49 	bl	80049e4 <HAL_ADC_ConfigChannel>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003158:	f000 fbe8 	bl	800392c <Error_Handler>
=======
 8003144:	2306      	movs	r3, #6
 8003146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003148:	2307      	movs	r3, #7
 800314a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800314c:	463b      	mov	r3, r7
 800314e:	4619      	mov	r1, r3
 8003150:	4828      	ldr	r0, [pc, #160]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 8003152:	f001 fc49 	bl	80049e8 <HAL_ADC_ConfigChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800315c:	f000 fbe8 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
<<<<<<< HEAD
 800315c:	2307      	movs	r3, #7
 800315e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003160:	2308      	movs	r3, #8
 8003162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003164:	463b      	mov	r3, r7
 8003166:	4619      	mov	r1, r3
 8003168:	4821      	ldr	r0, [pc, #132]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 800316a:	f001 fc3b 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003174:	f000 fbda 	bl	800392c <Error_Handler>
=======
 8003160:	2307      	movs	r3, #7
 8003162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003164:	2308      	movs	r3, #8
 8003166:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003168:	463b      	mov	r3, r7
 800316a:	4619      	mov	r1, r3
 800316c:	4821      	ldr	r0, [pc, #132]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800316e:	f001 fc3b 	bl	80049e8 <HAL_ADC_ConfigChannel>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003178:	f000 fbda 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
<<<<<<< HEAD
 8003178:	2308      	movs	r3, #8
 800317a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800317c:	2309      	movs	r3, #9
 800317e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003180:	463b      	mov	r3, r7
 8003182:	4619      	mov	r1, r3
 8003184:	481a      	ldr	r0, [pc, #104]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 8003186:	f001 fc2d 	bl	80049e4 <HAL_ADC_ConfigChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003190:	f000 fbcc 	bl	800392c <Error_Handler>
=======
 800317c:	2308      	movs	r3, #8
 800317e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003180:	2309      	movs	r3, #9
 8003182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003184:	463b      	mov	r3, r7
 8003186:	4619      	mov	r1, r3
 8003188:	481a      	ldr	r0, [pc, #104]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 800318a:	f001 fc2d 	bl	80049e8 <HAL_ADC_ConfigChannel>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003194:	f000 fbcc 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
<<<<<<< HEAD
 8003194:	2309      	movs	r3, #9
 8003196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003198:	230a      	movs	r3, #10
 800319a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800319c:	463b      	mov	r3, r7
 800319e:	4619      	mov	r1, r3
 80031a0:	4813      	ldr	r0, [pc, #76]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80031a2:	f001 fc1f 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80031ac:	f000 fbbe 	bl	800392c <Error_Handler>
=======
 8003198:	2309      	movs	r3, #9
 800319a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800319c:	230a      	movs	r3, #10
 800319e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031a0:	463b      	mov	r3, r7
 80031a2:	4619      	mov	r1, r3
 80031a4:	4813      	ldr	r0, [pc, #76]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80031a6:	f001 fc1f 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80031b0:	f000 fbbe 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
<<<<<<< HEAD
 80031b0:	230e      	movs	r3, #14
 80031b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80031b4:	230b      	movs	r3, #11
 80031b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031b8:	463b      	mov	r3, r7
 80031ba:	4619      	mov	r1, r3
 80031bc:	480c      	ldr	r0, [pc, #48]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80031be:	f001 fc11 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80031c8:	f000 fbb0 	bl	800392c <Error_Handler>
=======
 80031b4:	230e      	movs	r3, #14
 80031b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80031b8:	230b      	movs	r3, #11
 80031ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031bc:	463b      	mov	r3, r7
 80031be:	4619      	mov	r1, r3
 80031c0:	480c      	ldr	r0, [pc, #48]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80031c2:	f001 fc11 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80031cc:	f000 fbb0 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
<<<<<<< HEAD
 80031cc:	230f      	movs	r3, #15
 80031ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80031d0:	230c      	movs	r3, #12
 80031d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031d4:	463b      	mov	r3, r7
 80031d6:	4619      	mov	r1, r3
 80031d8:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_ADC2_Init+0x1cc>)
 80031da:	f001 fc03 	bl	80049e4 <HAL_ADC_ConfigChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80031e4:	f000 fba2 	bl	800392c <Error_Handler>
=======
 80031d0:	230f      	movs	r3, #15
 80031d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80031d4:	230c      	movs	r3, #12
 80031d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031d8:	463b      	mov	r3, r7
 80031da:	4619      	mov	r1, r3
 80031dc:	4805      	ldr	r0, [pc, #20]	; (80031f4 <MX_ADC2_Init+0x1cc>)
 80031de:	f001 fc03 	bl	80049e8 <HAL_ADC_ConfigChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80031e8:	f000 fba2 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
<<<<<<< HEAD
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	200004fc 	.word	0x200004fc
 80031f4:	40012100 	.word	0x40012100
 80031f8:	0f000001 	.word	0x0f000001

080031fc <MX_I2C1_Init>:
=======
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	200004fc 	.word	0x200004fc
 80031f8:	40012100 	.word	0x40012100
 80031fc:	0f000001 	.word	0x0f000001

08003200 <MX_I2C1_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
<<<<<<< HEAD
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
=======
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
<<<<<<< HEAD
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <MX_I2C1_Init+0x50>)
 8003202:	4a13      	ldr	r2, [pc, #76]	; (8003250 <MX_I2C1_Init+0x54>)
 8003204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_I2C1_Init+0x50>)
 8003208:	4a12      	ldr	r2, [pc, #72]	; (8003254 <MX_I2C1_Init+0x58>)
 800320a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_I2C1_Init+0x50>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_I2C1_Init+0x50>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <MX_I2C1_Init+0x50>)
 800321a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800321e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003220:	4b0a      	ldr	r3, [pc, #40]	; (800324c <MX_I2C1_Init+0x50>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <MX_I2C1_Init+0x50>)
 8003228:	2200      	movs	r2, #0
 800322a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800322c:	4b07      	ldr	r3, [pc, #28]	; (800324c <MX_I2C1_Init+0x50>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <MX_I2C1_Init+0x50>)
 8003234:	2200      	movs	r2, #0
 8003236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003238:	4804      	ldr	r0, [pc, #16]	; (800324c <MX_I2C1_Init+0x50>)
 800323a:	f002 fcbf 	bl	8005bbc <HAL_I2C_Init>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003244:	f000 fb72 	bl	800392c <Error_Handler>
=======
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <MX_I2C1_Init+0x50>)
 8003206:	4a13      	ldr	r2, [pc, #76]	; (8003254 <MX_I2C1_Init+0x54>)
 8003208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800320a:	4b11      	ldr	r3, [pc, #68]	; (8003250 <MX_I2C1_Init+0x50>)
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <MX_I2C1_Init+0x58>)
 800320e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003210:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <MX_I2C1_Init+0x50>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003216:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <MX_I2C1_Init+0x50>)
 8003218:	2200      	movs	r2, #0
 800321a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800321c:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <MX_I2C1_Init+0x50>)
 800321e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <MX_I2C1_Init+0x50>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <MX_I2C1_Init+0x50>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003230:	4b07      	ldr	r3, [pc, #28]	; (8003250 <MX_I2C1_Init+0x50>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <MX_I2C1_Init+0x50>)
 8003238:	2200      	movs	r2, #0
 800323a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800323c:	4804      	ldr	r0, [pc, #16]	; (8003250 <MX_I2C1_Init+0x50>)
 800323e:	f002 fcbf 	bl	8005bc0 <HAL_I2C_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003248:	f000 fb72 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
<<<<<<< HEAD
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000634 	.word	0x20000634
 8003250:	40005400 	.word	0x40005400
 8003254:	000186a0 	.word	0x000186a0

08003258 <MX_SPI3_Init>:
=======
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000634 	.word	0x20000634
 8003254:	40005400 	.word	0x40005400
 8003258:	000186a0 	.word	0x000186a0

0800325c <MX_SPI3_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
<<<<<<< HEAD
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
=======
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
<<<<<<< HEAD
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <MX_SPI3_Init+0x64>)
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <MX_SPI3_Init+0x68>)
 8003260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <MX_SPI3_Init+0x64>)
 8003264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <MX_SPI3_Init+0x64>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003270:	4b12      	ldr	r3, [pc, #72]	; (80032bc <MX_SPI3_Init+0x64>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <MX_SPI3_Init+0x64>)
 8003278:	2200      	movs	r2, #0
 800327a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <MX_SPI3_Init+0x64>)
 800327e:	2200      	movs	r2, #0
 8003280:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <MX_SPI3_Init+0x64>)
 8003284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003288:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <MX_SPI3_Init+0x64>)
 800328c:	2228      	movs	r2, #40	; 0x28
 800328e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003290:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <MX_SPI3_Init+0x64>)
 8003292:	2200      	movs	r2, #0
 8003294:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_SPI3_Init+0x64>)
 8003298:	2200      	movs	r2, #0
 800329a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <MX_SPI3_Init+0x64>)
 800329e:	2200      	movs	r2, #0
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_SPI3_Init+0x64>)
 80032a4:	220a      	movs	r2, #10
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80032a8:	4804      	ldr	r0, [pc, #16]	; (80032bc <MX_SPI3_Init+0x64>)
 80032aa:	f003 f9fb 	bl	80066a4 <HAL_SPI_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80032b4:	f000 fb3a 	bl	800392c <Error_Handler>
=======
 8003260:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <MX_SPI3_Init+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003268:	f44f 7282 	mov.w	r2, #260	; 0x104
 800326c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <MX_SPI3_Init+0x64>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003280:	4b0f      	ldr	r3, [pc, #60]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800328c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800328e:	4b0c      	ldr	r3, [pc, #48]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003290:	2228      	movs	r2, #40	; 0x28
 8003292:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003294:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <MX_SPI3_Init+0x64>)
 8003296:	2200      	movs	r2, #0
 8003298:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <MX_SPI3_Init+0x64>)
 800329c:	2200      	movs	r2, #0
 800329e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <MX_SPI3_Init+0x64>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <MX_SPI3_Init+0x64>)
 80032a8:	220a      	movs	r2, #10
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80032ac:	4804      	ldr	r0, [pc, #16]	; (80032c0 <MX_SPI3_Init+0x64>)
 80032ae:	f003 f9fb 	bl	80066a8 <HAL_SPI_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80032b8:	f000 fb3a 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
<<<<<<< HEAD
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000068c 	.word	0x2000068c
 80032c0:	40003c00 	.word	0x40003c00

080032c4 <MX_TIM1_Init>:
=======
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	2000068c 	.word	0x2000068c
 80032c4:	40003c00 	.word	0x40003c00

080032c8 <MX_TIM1_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b092      	sub	sp, #72	; 0x48
 80032c8:	af00      	add	r7, sp, #0
=======
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b092      	sub	sp, #72	; 0x48
 80032cc:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80032ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
 80032e4:	615a      	str	r2, [r3, #20]
 80032e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	2220      	movs	r2, #32
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f005 f9fb 	bl	80086ea <memset>
=======
 80032ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
 80032e8:	615a      	str	r2, [r3, #20]
 80032ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2220      	movs	r2, #32
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f005 f9fb 	bl	80086ee <memset>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 80032f4:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <MX_TIM1_Init+0xfc>)
 80032f6:	4a33      	ldr	r2, [pc, #204]	; (80033c4 <MX_TIM1_Init+0x100>)
 80032f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032fa:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <MX_TIM1_Init+0xfc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003300:	4b2f      	ldr	r3, [pc, #188]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003308:	f240 3247 	movw	r2, #839	; 0x347
 800330c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330e:	4b2c      	ldr	r3, [pc, #176]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003314:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003316:	2200      	movs	r2, #0
 8003318:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <MX_TIM1_Init+0xfc>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003320:	4827      	ldr	r0, [pc, #156]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003322:	f003 ff62 	bl	80071ea <HAL_TIM_PWM_Init>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800332c:	f000 fafe 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003334:	2300      	movs	r3, #0
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800333c:	4619      	mov	r1, r3
 800333e:	4820      	ldr	r0, [pc, #128]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003340:	f004 fcf2 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800334a:	f000 faef 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800334e:	2360      	movs	r3, #96	; 0x60
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003356:	2300      	movs	r3, #0
 8003358:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336a:	220c      	movs	r2, #12
 800336c:	4619      	mov	r1, r3
 800336e:	4814      	ldr	r0, [pc, #80]	; (80033c0 <MX_TIM1_Init+0xfc>)
 8003370:	f004 f976 	bl	8007660 <HAL_TIM_PWM_ConfigChannel>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800337a:	f000 fad7 	bl	800392c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003396:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800339c:	1d3b      	adds	r3, r7, #4
 800339e:	4619      	mov	r1, r3
 80033a0:	4807      	ldr	r0, [pc, #28]	; (80033c0 <MX_TIM1_Init+0xfc>)
 80033a2:	f004 fd3d 	bl	8007e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80033ac:	f000 fabe 	bl	800392c <Error_Handler>
=======
 80032f8:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <MX_TIM1_Init+0xfc>)
 80032fa:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <MX_TIM1_Init+0x100>)
 80032fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80032fe:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003304:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <MX_TIM1_Init+0xfc>)
 800330c:	f240 3247 	movw	r2, #839	; 0x347
 8003310:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003314:	2200      	movs	r2, #0
 8003316:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003318:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <MX_TIM1_Init+0xfc>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003324:	4827      	ldr	r0, [pc, #156]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003326:	f003 ff62 	bl	80071ee <HAL_TIM_PWM_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003330:	f000 fafe 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800333c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003340:	4619      	mov	r1, r3
 8003342:	4820      	ldr	r0, [pc, #128]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003344:	f004 fcf2 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800334e:	f000 faef 	bl	8003930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003352:	2360      	movs	r3, #96	; 0x60
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800336a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336e:	220c      	movs	r2, #12
 8003370:	4619      	mov	r1, r3
 8003372:	4814      	ldr	r0, [pc, #80]	; (80033c4 <MX_TIM1_Init+0xfc>)
 8003374:	f004 f976 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800337e:	f000 fad7 	bl	8003930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003396:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4807      	ldr	r0, [pc, #28]	; (80033c4 <MX_TIM1_Init+0xfc>)
 80033a6:	f004 fd3d 	bl	8007e24 <HAL_TIMEx_ConfigBreakDeadTime>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80033b0:	f000 fabe 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <MX_TIM1_Init+0xfc>)
 80033b2:	f000 ff91 	bl	80042d8 <HAL_TIM_MspPostInit>

}
 80033b6:	bf00      	nop
 80033b8:	3748      	adds	r7, #72	; 0x48
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200007c4 	.word	0x200007c4
 80033c4:	40010000 	.word	0x40010000

080033c8 <MX_TIM3_Init>:
=======
 80033b4:	4803      	ldr	r0, [pc, #12]	; (80033c4 <MX_TIM1_Init+0xfc>)
 80033b6:	f000 ff91 	bl	80042dc <HAL_TIM_MspPostInit>

}
 80033ba:	bf00      	nop
 80033bc:	3748      	adds	r7, #72	; 0x48
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200007c4 	.word	0x200007c4
 80033c8:	40010000 	.word	0x40010000

080033cc <MX_TIM3_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
=======
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08c      	sub	sp, #48	; 0x30
 80033d0:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 80033ce:	f107 030c 	add.w	r3, r7, #12
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f005 f987 	bl	80086ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
=======
 80033d2:	f107 030c 	add.w	r3, r7, #12
 80033d6:	2224      	movs	r2, #36	; 0x24
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f005 f987 	bl	80086ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	1d3b      	adds	r3, r7, #4
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 80033e4:	4b20      	ldr	r3, [pc, #128]	; (8003468 <MX_TIM3_Init+0xa0>)
 80033e6:	4a21      	ldr	r2, [pc, #132]	; (800346c <MX_TIM3_Init+0xa4>)
 80033e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <MX_TIM3_Init+0xa0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <MX_TIM3_Init+0xa0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <MX_TIM3_Init+0xa0>)
 80033f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fe:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <MX_TIM3_Init+0xa0>)
 8003400:	2200      	movs	r2, #0
 8003402:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <MX_TIM3_Init+0xa0>)
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800340a:	2301      	movs	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003412:	2301      	movs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003426:	2300      	movs	r3, #0
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	4619      	mov	r1, r3
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <MX_TIM3_Init+0xa0>)
 8003436:	f003 ff41 	bl	80072bc <HAL_TIM_Encoder_Init>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003440:	f000 fa74 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800344c:	1d3b      	adds	r3, r7, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4805      	ldr	r0, [pc, #20]	; (8003468 <MX_TIM3_Init+0xa0>)
 8003452:	f004 fc69 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800345c:	f000 fa66 	bl	800392c <Error_Handler>
=======
 80033e8:	4b20      	ldr	r3, [pc, #128]	; (800346c <MX_TIM3_Init+0xa0>)
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <MX_TIM3_Init+0xa4>)
 80033ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033ee:	4b1f      	ldr	r3, [pc, #124]	; (800346c <MX_TIM3_Init+0xa0>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f4:	4b1d      	ldr	r3, [pc, #116]	; (800346c <MX_TIM3_Init+0xa0>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <MX_TIM3_Init+0xa0>)
 80033fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003400:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003402:	4b1a      	ldr	r3, [pc, #104]	; (800346c <MX_TIM3_Init+0xa0>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b18      	ldr	r3, [pc, #96]	; (800346c <MX_TIM3_Init+0xa0>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800340e:	2301      	movs	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003416:	2301      	movs	r3, #1
 8003418:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800341a:	2300      	movs	r3, #0
 800341c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003422:	2300      	movs	r3, #0
 8003424:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003426:	2301      	movs	r3, #1
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800342a:	2300      	movs	r3, #0
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4619      	mov	r1, r3
 8003438:	480c      	ldr	r0, [pc, #48]	; (800346c <MX_TIM3_Init+0xa0>)
 800343a:	f003 ff41 	bl	80072c0 <HAL_TIM_Encoder_Init>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003444:	f000 fa74 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003448:	2300      	movs	r3, #0
 800344a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	4619      	mov	r1, r3
 8003454:	4805      	ldr	r0, [pc, #20]	; (800346c <MX_TIM3_Init+0xa0>)
 8003456:	f004 fc69 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003460:	f000 fa66 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 8003460:	bf00      	nop
 8003462:	3730      	adds	r7, #48	; 0x30
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000418 	.word	0x20000418
 800346c:	40000400 	.word	0x40000400

08003470 <MX_TIM4_Init>:
=======
 8003464:	bf00      	nop
 8003466:	3730      	adds	r7, #48	; 0x30
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000418 	.word	0x20000418
 8003470:	40000400 	.word	0x40000400

08003474 <MX_TIM4_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	; 0x30
 8003474:	af00      	add	r7, sp, #0
=======
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 8003476:	f107 030c 	add.w	r3, r7, #12
 800347a:	2224      	movs	r2, #36	; 0x24
 800347c:	2100      	movs	r1, #0
 800347e:	4618      	mov	r0, r3
 8003480:	f005 f933 	bl	80086ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003484:	1d3b      	adds	r3, r7, #4
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	605a      	str	r2, [r3, #4]
=======
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f005 f933 	bl	80086ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 800348c:	4b20      	ldr	r3, [pc, #128]	; (8003510 <MX_TIM4_Init+0xa0>)
 800348e:	4a21      	ldr	r2, [pc, #132]	; (8003514 <MX_TIM4_Init+0xa4>)
 8003490:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <MX_TIM4_Init+0xa0>)
 8003494:	2200      	movs	r2, #0
 8003496:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <MX_TIM4_Init+0xa0>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <MX_TIM4_Init+0xa0>)
 80034a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <MX_TIM4_Init+0xa0>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ac:	4b18      	ldr	r3, [pc, #96]	; (8003510 <MX_TIM4_Init+0xa0>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034b2:	2301      	movs	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034ba:	2301      	movs	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034be:	2300      	movs	r3, #0
 80034c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034c6:	2300      	movs	r3, #0
 80034c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034ca:	2301      	movs	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034ce:	2300      	movs	r3, #0
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034d6:	f107 030c 	add.w	r3, r7, #12
 80034da:	4619      	mov	r1, r3
 80034dc:	480c      	ldr	r0, [pc, #48]	; (8003510 <MX_TIM4_Init+0xa0>)
 80034de:	f003 feed 	bl	80072bc <HAL_TIM_Encoder_Init>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80034e8:	f000 fa20 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ec:	2300      	movs	r3, #0
 80034ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <MX_TIM4_Init+0xa0>)
 80034fa:	f004 fc15 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003504:	f000 fa12 	bl	800392c <Error_Handler>
=======
 8003490:	4b20      	ldr	r3, [pc, #128]	; (8003514 <MX_TIM4_Init+0xa0>)
 8003492:	4a21      	ldr	r2, [pc, #132]	; (8003518 <MX_TIM4_Init+0xa4>)
 8003494:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <MX_TIM4_Init+0xa0>)
 8003498:	2200      	movs	r2, #0
 800349a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349c:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <MX_TIM4_Init+0xa0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <MX_TIM4_Init+0xa0>)
 80034a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	; (8003514 <MX_TIM4_Init+0xa0>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034b0:	4b18      	ldr	r3, [pc, #96]	; (8003514 <MX_TIM4_Init+0xa0>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034be:	2301      	movs	r3, #1
 80034c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80034ca:	2300      	movs	r3, #0
 80034cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80034ce:	2301      	movs	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	4619      	mov	r1, r3
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <MX_TIM4_Init+0xa0>)
 80034e2:	f003 feed 	bl	80072c0 <HAL_TIM_Encoder_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80034ec:	f000 fa20 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f0:	2300      	movs	r3, #0
 80034f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4805      	ldr	r0, [pc, #20]	; (8003514 <MX_TIM4_Init+0xa0>)
 80034fe:	f004 fc15 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003508:	f000 fa12 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
<<<<<<< HEAD
 8003508:	bf00      	nop
 800350a:	3730      	adds	r7, #48	; 0x30
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200003d8 	.word	0x200003d8
 8003514:	40000800 	.word	0x40000800

08003518 <MX_TIM6_Init>:
=======
 800350c:	bf00      	nop
 800350e:	3730      	adds	r7, #48	; 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200003d8 	.word	0x200003d8
 8003518:	40000800 	.word	0x40000800

0800351c <MX_TIM6_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
<<<<<<< HEAD
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
=======
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800351e:	463b      	mov	r3, r7
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
=======
 8003522:	463b      	mov	r3, r7
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
<<<<<<< HEAD
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <MX_TIM6_Init+0x64>)
 8003528:	4a15      	ldr	r2, [pc, #84]	; (8003580 <MX_TIM6_Init+0x68>)
 800352a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800352c:	4b13      	ldr	r3, [pc, #76]	; (800357c <MX_TIM6_Init+0x64>)
 800352e:	2253      	movs	r2, #83	; 0x53
 8003530:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <MX_TIM6_Init+0x64>)
 8003534:	2200      	movs	r2, #0
 8003536:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003538:	4b10      	ldr	r3, [pc, #64]	; (800357c <MX_TIM6_Init+0x64>)
 800353a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800353e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_TIM6_Init+0x64>)
 8003542:	2200      	movs	r2, #0
 8003544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003546:	480d      	ldr	r0, [pc, #52]	; (800357c <MX_TIM6_Init+0x64>)
 8003548:	f003 fe00 	bl	800714c <HAL_TIM_Base_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003552:	f000 f9eb 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003556:	2300      	movs	r3, #0
 8003558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800355e:	463b      	mov	r3, r7
 8003560:	4619      	mov	r1, r3
 8003562:	4806      	ldr	r0, [pc, #24]	; (800357c <MX_TIM6_Init+0x64>)
 8003564:	f004 fbe0 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800356e:	f000 f9dd 	bl	800392c <Error_Handler>
=======
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <MX_TIM6_Init+0x64>)
 800352c:	4a15      	ldr	r2, [pc, #84]	; (8003584 <MX_TIM6_Init+0x68>)
 800352e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8003530:	4b13      	ldr	r3, [pc, #76]	; (8003580 <MX_TIM6_Init+0x64>)
 8003532:	2253      	movs	r2, #83	; 0x53
 8003534:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003536:	4b12      	ldr	r3, [pc, #72]	; (8003580 <MX_TIM6_Init+0x64>)
 8003538:	2200      	movs	r2, #0
 800353a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800353c:	4b10      	ldr	r3, [pc, #64]	; (8003580 <MX_TIM6_Init+0x64>)
 800353e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003542:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_TIM6_Init+0x64>)
 8003546:	2200      	movs	r2, #0
 8003548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800354a:	480d      	ldr	r0, [pc, #52]	; (8003580 <MX_TIM6_Init+0x64>)
 800354c:	f003 fe00 	bl	8007150 <HAL_TIM_Base_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003556:	f000 f9eb 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003562:	463b      	mov	r3, r7
 8003564:	4619      	mov	r1, r3
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <MX_TIM6_Init+0x64>)
 8003568:	f004 fbe0 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003572:	f000 f9dd 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
<<<<<<< HEAD
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000784 	.word	0x20000784
 8003580:	40001000 	.word	0x40001000

08003584 <MX_TIM7_Init>:
=======
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000784 	.word	0x20000784
 8003584:	40001000 	.word	0x40001000

08003588 <MX_TIM7_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
<<<<<<< HEAD
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
=======
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800358a:	463b      	mov	r3, r7
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
=======
 800358e:	463b      	mov	r3, r7
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
<<<<<<< HEAD
 8003592:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <MX_TIM7_Init+0x60>)
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <MX_TIM7_Init+0x64>)
 8003596:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <MX_TIM7_Init+0x60>)
 800359a:	2253      	movs	r2, #83	; 0x53
 800359c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <MX_TIM7_Init+0x60>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <MX_TIM7_Init+0x60>)
 80035a6:	2263      	movs	r2, #99	; 0x63
 80035a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <MX_TIM7_Init+0x60>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035b0:	480c      	ldr	r0, [pc, #48]	; (80035e4 <MX_TIM7_Init+0x60>)
 80035b2:	f003 fdcb 	bl	800714c <HAL_TIM_Base_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80035bc:	f000 f9b6 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c0:	2300      	movs	r3, #0
 80035c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035c8:	463b      	mov	r3, r7
 80035ca:	4619      	mov	r1, r3
 80035cc:	4805      	ldr	r0, [pc, #20]	; (80035e4 <MX_TIM7_Init+0x60>)
 80035ce:	f004 fbab 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80035d8:	f000 f9a8 	bl	800392c <Error_Handler>
=======
 8003596:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <MX_TIM7_Init+0x60>)
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <MX_TIM7_Init+0x64>)
 800359a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 800359c:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <MX_TIM7_Init+0x60>)
 800359e:	2253      	movs	r2, #83	; 0x53
 80035a0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <MX_TIM7_Init+0x60>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <MX_TIM7_Init+0x60>)
 80035aa:	2263      	movs	r2, #99	; 0x63
 80035ac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <MX_TIM7_Init+0x60>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035b4:	480c      	ldr	r0, [pc, #48]	; (80035e8 <MX_TIM7_Init+0x60>)
 80035b6:	f003 fdcb 	bl	8007150 <HAL_TIM_Base_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80035c0:	f000 f9b6 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c8:	2300      	movs	r3, #0
 80035ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035cc:	463b      	mov	r3, r7
 80035ce:	4619      	mov	r1, r3
 80035d0:	4805      	ldr	r0, [pc, #20]	; (80035e8 <MX_TIM7_Init+0x60>)
 80035d2:	f004 fbab 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80035dc:	f000 f9a8 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
<<<<<<< HEAD
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2000086c 	.word	0x2000086c
 80035e8:	40001400 	.word	0x40001400

080035ec <MX_TIM8_Init>:
=======
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000086c 	.word	0x2000086c
 80035ec:	40001400 	.word	0x40001400

080035f0 <MX_TIM8_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
<<<<<<< HEAD
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b092      	sub	sp, #72	; 0x48
 80035f0:	af00      	add	r7, sp, #0
=======
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b092      	sub	sp, #72	; 0x48
 80035f4:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80035f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
 800360c:	615a      	str	r2, [r3, #20]
 800360e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2220      	movs	r2, #32
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f005 f867 	bl	80086ea <memset>
=======
 80035f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
 8003610:	615a      	str	r2, [r3, #20]
 8003612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2220      	movs	r2, #32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f005 f867 	bl	80086ee <memset>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
<<<<<<< HEAD
 800361c:	4b39      	ldr	r3, [pc, #228]	; (8003704 <MX_TIM8_Init+0x118>)
 800361e:	4a3a      	ldr	r2, [pc, #232]	; (8003708 <MX_TIM8_Init+0x11c>)
 8003620:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8003622:	4b38      	ldr	r3, [pc, #224]	; (8003704 <MX_TIM8_Init+0x118>)
 8003624:	2203      	movs	r2, #3
 8003626:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <MX_TIM8_Init+0x118>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <MX_TIM8_Init+0x118>)
 8003630:	f240 628f 	movw	r2, #1679	; 0x68f
 8003634:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003636:	4b33      	ldr	r3, [pc, #204]	; (8003704 <MX_TIM8_Init+0x118>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <MX_TIM8_Init+0x118>)
 800363e:	2200      	movs	r2, #0
 8003640:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003642:	4b30      	ldr	r3, [pc, #192]	; (8003704 <MX_TIM8_Init+0x118>)
 8003644:	2200      	movs	r2, #0
 8003646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003648:	482e      	ldr	r0, [pc, #184]	; (8003704 <MX_TIM8_Init+0x118>)
 800364a:	f003 fdce 	bl	80071ea <HAL_TIM_PWM_Init>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003654:	f000 f96a 	bl	800392c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003658:	2300      	movs	r3, #0
 800365a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003660:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003664:	4619      	mov	r1, r3
 8003666:	4827      	ldr	r0, [pc, #156]	; (8003704 <MX_TIM8_Init+0x118>)
 8003668:	f004 fb5e 	bl	8007d28 <HAL_TIMEx_MasterConfigSynchronization>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003672:	f000 f95b 	bl	800392c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003676:	2360      	movs	r3, #96	; 0x60
 8003678:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800367e:	2300      	movs	r3, #0
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003682:	2300      	movs	r3, #0
 8003684:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003696:	2200      	movs	r2, #0
 8003698:	4619      	mov	r1, r3
 800369a:	481a      	ldr	r0, [pc, #104]	; (8003704 <MX_TIM8_Init+0x118>)
 800369c:	f003 ffe0 	bl	8007660 <HAL_TIM_PWM_ConfigChannel>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80036a6:	f000 f941 	bl	800392c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ae:	2208      	movs	r2, #8
 80036b0:	4619      	mov	r1, r3
 80036b2:	4814      	ldr	r0, [pc, #80]	; (8003704 <MX_TIM8_Init+0x118>)
 80036b4:	f003 ffd4 	bl	8007660 <HAL_TIM_PWM_ConfigChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80036be:	f000 f935 	bl	800392c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80036e0:	1d3b      	adds	r3, r7, #4
 80036e2:	4619      	mov	r1, r3
 80036e4:	4807      	ldr	r0, [pc, #28]	; (8003704 <MX_TIM8_Init+0x118>)
 80036e6:	f004 fb9b 	bl	8007e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80036f0:	f000 f91c 	bl	800392c <Error_Handler>
=======
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <MX_TIM8_Init+0x118>)
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <MX_TIM8_Init+0x11c>)
 8003624:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8003626:	4b38      	ldr	r3, [pc, #224]	; (8003708 <MX_TIM8_Init+0x118>)
 8003628:	2203      	movs	r2, #3
 800362a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b36      	ldr	r3, [pc, #216]	; (8003708 <MX_TIM8_Init+0x118>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8003632:	4b35      	ldr	r3, [pc, #212]	; (8003708 <MX_TIM8_Init+0x118>)
 8003634:	f240 628f 	movw	r2, #1679	; 0x68f
 8003638:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <MX_TIM8_Init+0x118>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003640:	4b31      	ldr	r3, [pc, #196]	; (8003708 <MX_TIM8_Init+0x118>)
 8003642:	2200      	movs	r2, #0
 8003644:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003646:	4b30      	ldr	r3, [pc, #192]	; (8003708 <MX_TIM8_Init+0x118>)
 8003648:	2200      	movs	r2, #0
 800364a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800364c:	482e      	ldr	r0, [pc, #184]	; (8003708 <MX_TIM8_Init+0x118>)
 800364e:	f003 fdce 	bl	80071ee <HAL_TIM_PWM_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003658:	f000 f96a 	bl	8003930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003668:	4619      	mov	r1, r3
 800366a:	4827      	ldr	r0, [pc, #156]	; (8003708 <MX_TIM8_Init+0x118>)
 800366c:	f004 fb5e 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003676:	f000 f95b 	bl	8003930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800367a:	2360      	movs	r3, #96	; 0x60
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003682:	2300      	movs	r3, #0
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003686:	2300      	movs	r3, #0
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003692:	2300      	movs	r3, #0
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369a:	2200      	movs	r2, #0
 800369c:	4619      	mov	r1, r3
 800369e:	481a      	ldr	r0, [pc, #104]	; (8003708 <MX_TIM8_Init+0x118>)
 80036a0:	f003 ffe0 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80036aa:	f000 f941 	bl	8003930 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b2:	2208      	movs	r2, #8
 80036b4:	4619      	mov	r1, r3
 80036b6:	4814      	ldr	r0, [pc, #80]	; (8003708 <MX_TIM8_Init+0x118>)
 80036b8:	f003 ffd4 	bl	8007664 <HAL_TIM_PWM_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80036c2:	f000 f935 	bl	8003930 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036e0:	2300      	movs	r3, #0
 80036e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80036e4:	1d3b      	adds	r3, r7, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4807      	ldr	r0, [pc, #28]	; (8003708 <MX_TIM8_Init+0x118>)
 80036ea:	f004 fb9b 	bl	8007e24 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80036f4:	f000 f91c 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
<<<<<<< HEAD
 80036f4:	4803      	ldr	r0, [pc, #12]	; (8003704 <MX_TIM8_Init+0x118>)
 80036f6:	f000 fdef 	bl	80042d8 <HAL_TIM_MspPostInit>

}
 80036fa:	bf00      	nop
 80036fc:	3748      	adds	r7, #72	; 0x48
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	200005ec 	.word	0x200005ec
 8003708:	40010400 	.word	0x40010400

0800370c <MX_USART1_UART_Init>:
=======
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <MX_TIM8_Init+0x118>)
 80036fa:	f000 fdef 	bl	80042dc <HAL_TIM_MspPostInit>

}
 80036fe:	bf00      	nop
 8003700:	3748      	adds	r7, #72	; 0x48
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200005ec 	.word	0x200005ec
 800370c:	40010400 	.word	0x40010400

08003710 <MX_USART1_UART_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
=======
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003712:	4a12      	ldr	r2, [pc, #72]	; (800375c <MX_USART1_UART_Init+0x50>)
 8003714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003716:	4b10      	ldr	r3, [pc, #64]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003718:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800371c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800371e:	4b0e      	ldr	r3, [pc, #56]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003720:	2200      	movs	r2, #0
 8003722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003726:	2200      	movs	r2, #0
 8003728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003732:	220c      	movs	r2, #12
 8003734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003736:	4b08      	ldr	r3, [pc, #32]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <MX_USART1_UART_Init+0x4c>)
 8003744:	f004 fbd2 	bl	8007eec <HAL_UART_Init>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800374e:	f000 f8ed 	bl	800392c <Error_Handler>
=======
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <MX_USART1_UART_Init+0x50>)
 8003718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <MX_USART1_UART_Init+0x4c>)
 800371c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <MX_USART1_UART_Init+0x4c>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <MX_USART1_UART_Init+0x4c>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003746:	4805      	ldr	r0, [pc, #20]	; (800375c <MX_USART1_UART_Init+0x4c>)
 8003748:	f004 fbd2 	bl	8007ef0 <HAL_UART_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003752:	f000 f8ed 	bl	8003930 <Error_Handler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	200006e4 	.word	0x200006e4
 800375c:	40011000 	.word	0x40011000

08003760 <MX_DMA_Init>:
=======
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200006e4 	.word	0x200006e4
 8003760:	40011000 	.word	0x40011000

08003764 <MX_DMA_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
<<<<<<< HEAD
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <MX_DMA_Init+0x4c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <MX_DMA_Init+0x4c>)
 8003770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <MX_DMA_Init+0x4c>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
=======
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <MX_DMA_Init+0x4c>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a0f      	ldr	r2, [pc, #60]	; (80037b0 <MX_DMA_Init+0x4c>)
 8003774:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <MX_DMA_Init+0x4c>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 8003782:	2200      	movs	r2, #0
 8003784:	2100      	movs	r1, #0
 8003786:	2038      	movs	r0, #56	; 0x38
 8003788:	f001 fca7 	bl	80050da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800378c:	2038      	movs	r0, #56	; 0x38
 800378e:	f001 fcc0 	bl	8005112 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	203a      	movs	r0, #58	; 0x3a
 8003798:	f001 fc9f 	bl	80050da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800379c:	203a      	movs	r0, #58	; 0x3a
 800379e:	f001 fcb8 	bl	8005112 <HAL_NVIC_EnableIRQ>

}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800

080037b0 <MX_GPIO_Init>:
=======
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	2038      	movs	r0, #56	; 0x38
 800378c:	f001 fca7 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003790:	2038      	movs	r0, #56	; 0x38
 8003792:	f001 fcc0 	bl	8005116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003796:	2200      	movs	r2, #0
 8003798:	2100      	movs	r1, #0
 800379a:	203a      	movs	r0, #58	; 0x3a
 800379c:	f001 fc9f 	bl	80050de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80037a0:	203a      	movs	r0, #58	; 0x3a
 80037a2:	f001 fcb8 	bl	8005116 <HAL_NVIC_EnableIRQ>

}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <MX_GPIO_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b6:	f107 0314 	add.w	r3, r7, #20
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	609a      	str	r2, [r3, #8]
 80037c2:	60da      	str	r2, [r3, #12]
 80037c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <MX_GPIO_Init+0x168>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4a52      	ldr	r2, [pc, #328]	; (8003918 <MX_GPIO_Init+0x168>)
 80037d0:	f043 0304 	orr.w	r3, r3, #4
 80037d4:	6313      	str	r3, [r2, #48]	; 0x30
 80037d6:	4b50      	ldr	r3, [pc, #320]	; (8003918 <MX_GPIO_Init+0x168>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <MX_GPIO_Init+0x168>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <MX_GPIO_Init+0x168>)
 80037ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <MX_GPIO_Init+0x168>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	4b45      	ldr	r3, [pc, #276]	; (8003918 <MX_GPIO_Init+0x168>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a44      	ldr	r2, [pc, #272]	; (8003918 <MX_GPIO_Init+0x168>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6313      	str	r3, [r2, #48]	; 0x30
 800380e:	4b42      	ldr	r3, [pc, #264]	; (8003918 <MX_GPIO_Init+0x168>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <MX_GPIO_Init+0x168>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <MX_GPIO_Init+0x168>)
 8003824:	f043 0302 	orr.w	r3, r3, #2
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <MX_GPIO_Init+0x168>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4b37      	ldr	r3, [pc, #220]	; (8003918 <MX_GPIO_Init+0x168>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4a36      	ldr	r2, [pc, #216]	; (8003918 <MX_GPIO_Init+0x168>)
 8003840:	f043 0308 	orr.w	r3, r3, #8
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b34      	ldr	r3, [pc, #208]	; (8003918 <MX_GPIO_Init+0x168>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8003852:	2200      	movs	r2, #0
 8003854:	f24e 2180 	movw	r1, #57984	; 0xe280
 8003858:	4830      	ldr	r0, [pc, #192]	; (800391c <MX_GPIO_Init+0x16c>)
 800385a:	f002 f995 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	; 0x28
 80037b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b53      	ldr	r3, [pc, #332]	; (800391c <MX_GPIO_Init+0x168>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a52      	ldr	r2, [pc, #328]	; (800391c <MX_GPIO_Init+0x168>)
 80037d4:	f043 0304 	orr.w	r3, r3, #4
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b50      	ldr	r3, [pc, #320]	; (800391c <MX_GPIO_Init+0x168>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b4c      	ldr	r3, [pc, #304]	; (800391c <MX_GPIO_Init+0x168>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a4b      	ldr	r2, [pc, #300]	; (800391c <MX_GPIO_Init+0x168>)
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b49      	ldr	r3, [pc, #292]	; (800391c <MX_GPIO_Init+0x168>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	4b45      	ldr	r3, [pc, #276]	; (800391c <MX_GPIO_Init+0x168>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <MX_GPIO_Init+0x168>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b42      	ldr	r3, [pc, #264]	; (800391c <MX_GPIO_Init+0x168>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <MX_GPIO_Init+0x168>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <MX_GPIO_Init+0x168>)
 8003828:	f043 0302 	orr.w	r3, r3, #2
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b3b      	ldr	r3, [pc, #236]	; (800391c <MX_GPIO_Init+0x168>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	607b      	str	r3, [r7, #4]
 8003838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <MX_GPIO_Init+0x168>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a36      	ldr	r2, [pc, #216]	; (800391c <MX_GPIO_Init+0x168>)
 8003844:	f043 0308 	orr.w	r3, r3, #8
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <MX_GPIO_Init+0x168>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8003856:	2200      	movs	r2, #0
 8003858:	f24e 2180 	movw	r1, #57984	; 0xe280
 800385c:	4830      	ldr	r0, [pc, #192]	; (8003920 <MX_GPIO_Init+0x16c>)
 800385e:	f002 f995 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
<<<<<<< HEAD
 800385e:	2200      	movs	r2, #0
 8003860:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8003864:	482e      	ldr	r0, [pc, #184]	; (8003920 <MX_GPIO_Init+0x170>)
 8003866:	f002 f98f 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 8003862:	2200      	movs	r2, #0
 8003864:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8003868:	482e      	ldr	r0, [pc, #184]	; (8003924 <MX_GPIO_Init+0x170>)
 800386a:	f002 f98f 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
<<<<<<< HEAD
 800386a:	2200      	movs	r2, #0
 800386c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003870:	482c      	ldr	r0, [pc, #176]	; (8003924 <MX_GPIO_Init+0x174>)
 8003872:	f002 f989 	bl	8005b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003876:	2200      	movs	r2, #0
 8003878:	2104      	movs	r1, #4
 800387a:	482b      	ldr	r0, [pc, #172]	; (8003928 <MX_GPIO_Init+0x178>)
 800387c:	f002 f984 	bl	8005b88 <HAL_GPIO_WritePin>
=======
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003874:	482c      	ldr	r0, [pc, #176]	; (8003928 <MX_GPIO_Init+0x174>)
 8003876:	f002 f989 	bl	8005b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800387a:	2200      	movs	r2, #0
 800387c:	2104      	movs	r1, #4
 800387e:	482b      	ldr	r0, [pc, #172]	; (800392c <MX_GPIO_Init+0x178>)
 8003880:	f002 f984 	bl	8005b8c <HAL_GPIO_WritePin>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
<<<<<<< HEAD
 8003880:	f24e 2380 	movw	r3, #57984	; 0xe280
 8003884:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	4619      	mov	r1, r3
 8003898:	4820      	ldr	r0, [pc, #128]	; (800391c <MX_GPIO_Init+0x16c>)
 800389a:	f001 ffc3 	bl	8005824 <HAL_GPIO_Init>
=======
 8003884:	f24e 2380 	movw	r3, #57984	; 0xe280
 8003888:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003896:	f107 0314 	add.w	r3, r7, #20
 800389a:	4619      	mov	r1, r3
 800389c:	4820      	ldr	r0, [pc, #128]	; (8003920 <MX_GPIO_Init+0x16c>)
 800389e:	f001 ffc3 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
<<<<<<< HEAD
 800389e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80038a2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	4619      	mov	r1, r3
 80038b6:	481a      	ldr	r0, [pc, #104]	; (8003920 <MX_GPIO_Init+0x170>)
 80038b8:	f001 ffb4 	bl	8005824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80038bc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80038c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	4814      	ldr	r0, [pc, #80]	; (8003924 <MX_GPIO_Init+0x174>)
 80038d2:	f001 ffa7 	bl	8005824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	480d      	ldr	r0, [pc, #52]	; (8003924 <MX_GPIO_Init+0x174>)
 80038f0:	f001 ff98 	bl	8005824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038f4:	2304      	movs	r3, #4
 80038f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f8:	2301      	movs	r3, #1
 80038fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003904:	f107 0314 	add.w	r3, r7, #20
 8003908:	4619      	mov	r1, r3
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <MX_GPIO_Init+0x178>)
 800390c:	f001 ff8a 	bl	8005824 <HAL_GPIO_Init>

}
 8003910:	bf00      	nop
 8003912:	3728      	adds	r7, #40	; 0x28
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	40020800 	.word	0x40020800
 8003920:	40020400 	.word	0x40020400
 8003924:	40020000 	.word	0x40020000
 8003928:	40020c00 	.word	0x40020c00

0800392c <Error_Handler>:
=======
 80038a2:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80038a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a8:	2301      	movs	r3, #1
 80038aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4619      	mov	r1, r3
 80038ba:	481a      	ldr	r0, [pc, #104]	; (8003924 <MX_GPIO_Init+0x170>)
 80038bc:	f001 ffb4 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80038c0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80038c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ce:	f107 0314 	add.w	r3, r7, #20
 80038d2:	4619      	mov	r1, r3
 80038d4:	4814      	ldr	r0, [pc, #80]	; (8003928 <MX_GPIO_Init+0x174>)
 80038d6:	f001 ffa7 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e8:	2300      	movs	r3, #0
 80038ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	f107 0314 	add.w	r3, r7, #20
 80038f0:	4619      	mov	r1, r3
 80038f2:	480d      	ldr	r0, [pc, #52]	; (8003928 <MX_GPIO_Init+0x174>)
 80038f4:	f001 ff98 	bl	8005828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038f8:	2304      	movs	r3, #4
 80038fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fc:	2301      	movs	r3, #1
 80038fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003904:	2300      	movs	r3, #0
 8003906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4619      	mov	r1, r3
 800390e:	4807      	ldr	r0, [pc, #28]	; (800392c <MX_GPIO_Init+0x178>)
 8003910:	f001 ff8a 	bl	8005828 <HAL_GPIO_Init>

}
 8003914:	bf00      	nop
 8003916:	3728      	adds	r7, #40	; 0x28
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40023800 	.word	0x40023800
 8003920:	40020800 	.word	0x40020800
 8003924:	40020400 	.word	0x40020400
 8003928:	40020000 	.word	0x40020000
 800392c:	40020c00 	.word	0x40020c00

08003930 <Error_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
=======
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8003930:	b672      	cpsid	i
=======
 8003934:	b672      	cpsid	i
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8003932:	e7fe      	b.n	8003932 <Error_Handler+0x6>

08003934 <initMotor>:
=======
 8003936:	e7fe      	b.n	8003936 <Error_Handler+0x6>

08003938 <initMotor>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
<<<<<<< HEAD
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8003938:	2100      	movs	r1, #0
 800393a:	4808      	ldr	r0, [pc, #32]	; (800395c <initMotor+0x28>)
 800393c:	f003 fc80 	bl	8007240 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8003940:	2108      	movs	r1, #8
 8003942:	4806      	ldr	r0, [pc, #24]	; (800395c <initMotor+0x28>)
 8003944:	f003 fc7c 	bl	8007240 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003948:	210c      	movs	r1, #12
 800394a:	4805      	ldr	r0, [pc, #20]	; (8003960 <initMotor+0x2c>)
 800394c:	f003 fc78 	bl	8007240 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8003950:	2064      	movs	r0, #100	; 0x64
 8003952:	f000 fed1 	bl	80046f8 <HAL_Delay>
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	200005ec 	.word	0x200005ec
 8003960:	200007c4 	.word	0x200007c4

08003964 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800396a:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <motorCtrlFlip+0xb0>)
 800396c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0d      	blt.n	8003990 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <motorCtrlFlip+0xb0>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800397a:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <motorCtrlFlip+0xb4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003984:	2201      	movs	r2, #1
 8003986:	2180      	movs	r1, #128	; 0x80
 8003988:	4824      	ldr	r0, [pc, #144]	; (8003a1c <motorCtrlFlip+0xb8>)
 800398a:	f002 f8fd 	bl	8005b88 <HAL_GPIO_WritePin>
 800398e:	e010      	b.n	80039b2 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <motorCtrlFlip+0xb0>)
 8003992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003996:	b29b      	uxth	r3, r3
 8003998:	425b      	negs	r3, r3
 800399a:	b29b      	uxth	r3, r3
 800399c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <motorCtrlFlip+0xb4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	481b      	ldr	r0, [pc, #108]	; (8003a1c <motorCtrlFlip+0xb8>)
 80039ae:	f002 f8eb 	bl	8005b88 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <motorCtrlFlip+0xbc>)
 80039b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0e      	blt.n	80039da <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <motorCtrlFlip+0xbc>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80039c2:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <motorCtrlFlip+0xb4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80039cc:	2201      	movs	r2, #1
 80039ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d2:	4812      	ldr	r0, [pc, #72]	; (8003a1c <motorCtrlFlip+0xb8>)
 80039d4:	f002 f8d8 	bl	8005b88 <HAL_GPIO_WritePin>
 80039d8:	e011      	b.n	80039fe <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <motorCtrlFlip+0xbc>)
 80039dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	425b      	negs	r3, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <motorCtrlFlip+0xb4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039f8:	4808      	ldr	r0, [pc, #32]	; (8003a1c <motorCtrlFlip+0xb8>)
 80039fa:	f002 f8c5 	bl	8005b88 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <motorCtrlFlip+0xc0>)
 8003a00:	88fb      	ldrh	r3, [r7, #6]
 8003a02:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <motorCtrlFlip+0xc4>)
 8003a06:	88bb      	ldrh	r3, [r7, #4]
 8003a08:	8013      	strh	r3, [r2, #0]
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200003bc 	.word	0x200003bc
 8003a18:	200005ec 	.word	0x200005ec
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	200003be 	.word	0x200003be
 8003a24:	200008b0 	.word	0x200008b0
 8003a28:	200008ae 	.word	0x200008ae

08003a2c <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <suctionmotorCtrlFlip+0x1c>)
 8003a32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <suctionmotorCtrlFlip+0x20>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200003c0 	.word	0x200003c0
 8003a4c:	200007c4 	.word	0x200007c4

08003a50 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	460a      	mov	r2, r1
 8003a5a:	80fb      	strh	r3, [r7, #6]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8003a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a64:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	dd03      	ble.n	8003a74 <setMotor+0x24>
 8003a6c:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a70:	80fb      	strh	r3, [r7, #6]
 8003a72:	e007      	b.n	8003a84 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8003a74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a78:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <setMotor+0x70>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	da02      	bge.n	8003a84 <setMotor+0x34>
 8003a7e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003a82:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8003a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a88:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	dd03      	ble.n	8003a98 <setMotor+0x48>
 8003a90:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a94:	80bb      	strh	r3, [r7, #4]
 8003a96:	e007      	b.n	8003aa8 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8003a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a9c:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <setMotor+0x70>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	da02      	bge.n	8003aa8 <setMotor+0x58>
 8003aa2:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003aa6:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8003aa8:	4a06      	ldr	r2, [pc, #24]	; (8003ac4 <setMotor+0x74>)
 8003aaa:	88fb      	ldrh	r3, [r7, #6]
 8003aac:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8003aae:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <setMotor+0x78>)
 8003ab0:	88bb      	ldrh	r3, [r7, #4]
 8003ab2:	8013      	strh	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	fffff972 	.word	0xfffff972
 8003ac4:	200003bc 	.word	0x200003bc
 8003ac8:	200003be 	.word	0x200003be

08003acc <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8003ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bfb8      	it	lt
 8003ade:	425b      	neglt	r3, r3
 8003ae0:	b21a      	sxth	r2, r3
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <setsuctionMotor+0x38>)
 8003ae4:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8003ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aea:	f240 3246 	movw	r2, #838	; 0x346
 8003aee:	4293      	cmp	r3, r2
 8003af0:	dd02      	ble.n	8003af8 <setsuctionMotor+0x2c>
 8003af2:	f240 3347 	movw	r3, #839	; 0x347
 8003af6:	80fb      	strh	r3, [r7, #6]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	200003c0 	.word	0x200003c0

08003b08 <updateSideSensorStatus>:
=======
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 800393c:	2100      	movs	r1, #0
 800393e:	4808      	ldr	r0, [pc, #32]	; (8003960 <initMotor+0x28>)
 8003940:	f003 fc80 	bl	8007244 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8003944:	2108      	movs	r1, #8
 8003946:	4806      	ldr	r0, [pc, #24]	; (8003960 <initMotor+0x28>)
 8003948:	f003 fc7c 	bl	8007244 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800394c:	210c      	movs	r1, #12
 800394e:	4805      	ldr	r0, [pc, #20]	; (8003964 <initMotor+0x2c>)
 8003950:	f003 fc78 	bl	8007244 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8003954:	2064      	movs	r0, #100	; 0x64
 8003956:	f000 fed1 	bl	80046fc <HAL_Delay>
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200005ec 	.word	0x200005ec
 8003964:	200007c4 	.word	0x200007c4

08003968 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800396e:	4b2a      	ldr	r3, [pc, #168]	; (8003a18 <motorCtrlFlip+0xb0>)
 8003970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db0d      	blt.n	8003994 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <motorCtrlFlip+0xb0>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <motorCtrlFlip+0xb4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003988:	2201      	movs	r2, #1
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	4824      	ldr	r0, [pc, #144]	; (8003a20 <motorCtrlFlip+0xb8>)
 800398e:	f002 f8fd 	bl	8005b8c <HAL_GPIO_WritePin>
 8003992:	e010      	b.n	80039b6 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <motorCtrlFlip+0xb0>)
 8003996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800399a:	b29b      	uxth	r3, r3
 800399c:	425b      	negs	r3, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <motorCtrlFlip+0xb4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80039aa:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	481b      	ldr	r0, [pc, #108]	; (8003a20 <motorCtrlFlip+0xb8>)
 80039b2:	f002 f8eb 	bl	8005b8c <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <motorCtrlFlip+0xbc>)
 80039b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0e      	blt.n	80039de <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80039c0:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <motorCtrlFlip+0xbc>)
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <motorCtrlFlip+0xb4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80039d0:	2201      	movs	r2, #1
 80039d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d6:	4812      	ldr	r0, [pc, #72]	; (8003a20 <motorCtrlFlip+0xb8>)
 80039d8:	f002 f8d8 	bl	8005b8c <HAL_GPIO_WritePin>
 80039dc:	e011      	b.n	8003a02 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <motorCtrlFlip+0xbc>)
 80039e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	425b      	negs	r3, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <motorCtrlFlip+0xb4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039f4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039fc:	4808      	ldr	r0, [pc, #32]	; (8003a20 <motorCtrlFlip+0xb8>)
 80039fe:	f002 f8c5 	bl	8005b8c <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <motorCtrlFlip+0xc0>)
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8003a08:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <motorCtrlFlip+0xc4>)
 8003a0a:	88bb      	ldrh	r3, [r7, #4]
 8003a0c:	8013      	strh	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200003bc 	.word	0x200003bc
 8003a1c:	200005ec 	.word	0x200005ec
 8003a20:	40020800 	.word	0x40020800
 8003a24:	200003be 	.word	0x200003be
 8003a28:	200008b0 	.word	0x200008b0
 8003a2c:	200008ae 	.word	0x200008ae

08003a30 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <suctionmotorCtrlFlip+0x1c>)
 8003a36:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <suctionmotorCtrlFlip+0x20>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	200003c0 	.word	0x200003c0
 8003a50:	200007c4 	.word	0x200007c4

08003a54 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	460a      	mov	r2, r1
 8003a5e:	80fb      	strh	r3, [r7, #6]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8003a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a68:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	dd03      	ble.n	8003a78 <setMotor+0x24>
 8003a70:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a74:	80fb      	strh	r3, [r7, #6]
 8003a76:	e007      	b.n	8003a88 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8003a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <setMotor+0x70>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	da02      	bge.n	8003a88 <setMotor+0x34>
 8003a82:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003a86:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8003a88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a8c:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a90:	4293      	cmp	r3, r2
 8003a92:	dd03      	ble.n	8003a9c <setMotor+0x48>
 8003a94:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a98:	80bb      	strh	r3, [r7, #4]
 8003a9a:	e007      	b.n	8003aac <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8003a9c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <setMotor+0x70>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	da02      	bge.n	8003aac <setMotor+0x58>
 8003aa6:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003aaa:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8003aac:	4a06      	ldr	r2, [pc, #24]	; (8003ac8 <setMotor+0x74>)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8003ab2:	4a06      	ldr	r2, [pc, #24]	; (8003acc <setMotor+0x78>)
 8003ab4:	88bb      	ldrh	r3, [r7, #4]
 8003ab6:	8013      	strh	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	fffff972 	.word	0xfffff972
 8003ac8:	200003bc 	.word	0x200003bc
 8003acc:	200003be 	.word	0x200003be

08003ad0 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8003ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	bfb8      	it	lt
 8003ae2:	425b      	neglt	r3, r3
 8003ae4:	b21a      	sxth	r2, r3
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <setsuctionMotor+0x38>)
 8003ae8:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8003aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aee:	f240 3246 	movw	r2, #838	; 0x346
 8003af2:	4293      	cmp	r3, r2
 8003af4:	dd02      	ble.n	8003afc <setsuctionMotor+0x2c>
 8003af6:	f240 3347 	movw	r3, #839	; 0x347
 8003afa:	80fb      	strh	r3, [r7, #6]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	200003c0 	.word	0x200003c0

08003b0c <updateSideSensorStatus>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

static float min_velocity, max_velocity;

//white <= 1700 black >= 1700

void updateSideSensorStatus(){
<<<<<<< HEAD
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
	goal_timer++;
 8003b0c:	4b17      	ldr	r3, [pc, #92]	; (8003b6c <updateSideSensorStatus+0x64>)
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <updateSideSensorStatus+0x64>)
 8003b16:	801a      	strh	r2, [r3, #0]

	if(goal_timer >= 10000){
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <updateSideSensorStatus+0x64>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d903      	bls.n	8003b2c <updateSideSensorStatus+0x24>
		goal_timer = 10000;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <updateSideSensorStatus+0x64>)
 8003b26:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b2a:	801a      	strh	r2, [r3, #0]
	}

	if(side_sensorL <= 500){
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <updateSideSensorStatus+0x68>)
 8003b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b36:	dc03      	bgt.n	8003b40 <updateSideSensorStatus+0x38>
		side_sensor_l = true;
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <updateSideSensorStatus+0x6c>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <updateSideSensorStatus+0x3e>
	}
	else{
		side_sensor_l = false;
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <updateSideSensorStatus+0x6c>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8003b46:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <updateSideSensorStatus+0x70>)
 8003b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b50:	dc03      	bgt.n	8003b5a <updateSideSensorStatus+0x52>
		side_sensor_r = true;
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <updateSideSensorStatus+0x74>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
=======
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
	goal_timer++;
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <updateSideSensorStatus+0x64>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <updateSideSensorStatus+0x64>)
 8003b1a:	801a      	strh	r2, [r3, #0]

	if(goal_timer >= 10000){
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <updateSideSensorStatus+0x64>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d903      	bls.n	8003b30 <updateSideSensorStatus+0x24>
		goal_timer = 10000;
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <updateSideSensorStatus+0x64>)
 8003b2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003b2e:	801a      	strh	r2, [r3, #0]
	}

	if(side_sensorL <= 500){
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <updateSideSensorStatus+0x68>)
 8003b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b3a:	dc03      	bgt.n	8003b44 <updateSideSensorStatus+0x38>
		side_sensor_l = true;
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <updateSideSensorStatus+0x6c>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	701a      	strb	r2, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <updateSideSensorStatus+0x3e>
	}
	else{
		side_sensor_l = false;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <updateSideSensorStatus+0x6c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <updateSideSensorStatus+0x70>)
 8003b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b54:	dc03      	bgt.n	8003b5e <updateSideSensorStatus+0x52>
		side_sensor_r = true;
 8003b56:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <updateSideSensorStatus+0x74>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	}
	else{
		side_sensor_r = false;
	}
}
<<<<<<< HEAD
 8003b58:	e002      	b.n	8003b60 <updateSideSensorStatus+0x58>
		side_sensor_r = false;
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <updateSideSensorStatus+0x74>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200003c2 	.word	0x200003c2
 8003b70:	200004b4 	.word	0x200004b4
 8003b74:	200003c4 	.word	0x200003c4
 8003b78:	20000458 	.word	0x20000458
 8003b7c:	200003c5 	.word	0x200003c5

08003b80 <running>:

void running(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	80fb      	strh	r3, [r7, #6]
	startLineTrace();
 8003b8a:	f7fd ff5b 	bl	8001a44 <startLineTrace>
	startVelocityControl();
 8003b8e:	f7fe ff49 	bl	8002a24 <startVelocityControl>
	//setTargetVelocity(min_velocity);

	while(goal_flag == false){
 8003b92:	e0a1      	b.n	8003cd8 <running+0x158>
		switch(pattern){
 8003b94:	88fb      	ldrh	r3, [r7, #6]
 8003b96:	2b14      	cmp	r3, #20
 8003b98:	f200 8097 	bhi.w	8003cca <running+0x14a>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <running+0x24>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003ccb 	.word	0x08003ccb
 8003bac:	08003ccb 	.word	0x08003ccb
 8003bb0:	08003ccb 	.word	0x08003ccb
 8003bb4:	08003ccb 	.word	0x08003ccb
 8003bb8:	08003c19 	.word	0x08003c19
 8003bbc:	08003ccb 	.word	0x08003ccb
 8003bc0:	08003ccb 	.word	0x08003ccb
 8003bc4:	08003ccb 	.word	0x08003ccb
 8003bc8:	08003ccb 	.word	0x08003ccb
 8003bcc:	08003c2d 	.word	0x08003c2d
 8003bd0:	08003ccb 	.word	0x08003ccb
 8003bd4:	08003ccb 	.word	0x08003ccb
 8003bd8:	08003ccb 	.word	0x08003ccb
 8003bdc:	08003ccb 	.word	0x08003ccb
 8003be0:	08003ccb 	.word	0x08003ccb
 8003be4:	08003ccb 	.word	0x08003ccb
 8003be8:	08003ccb 	.word	0x08003ccb
 8003bec:	08003ccb 	.word	0x08003ccb
 8003bf0:	08003ccb 	.word	0x08003ccb
 8003bf4:	08003cbd 	.word	0x08003cbd

				  case 0:
					  if(getSideSensorStatusR() == true){
 8003bf8:	f000 f88e 	bl	8003d18 <getSideSensorStatusR>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d060      	beq.n	8003cc4 <running+0x144>
						  start_goal_line_cnt++;
 8003c02:	4b3b      	ldr	r3, [pc, #236]	; (8003cf0 <running+0x170>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	3301      	adds	r3, #1
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <running+0x170>)
 8003c0c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c0e:	f7fd fab5 	bl	800117c <clearGoalJudgeDistance>
						  pattern = 5;
 8003c12:	2305      	movs	r3, #5
 8003c14:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8003c16:	e055      	b.n	8003cc4 <running+0x144>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8003c18:	f000 f87e 	bl	8003d18 <getSideSensorStatusR>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f083 0301 	eor.w	r3, r3, #1
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <running+0xac>
 8003c28:	230a      	movs	r3, #10
 8003c2a:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8003c2c:	f000 f868 	bl	8003d00 <getSideSensorStatusL>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <running+0xc0>
						  goal_judge_flag = false;
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <running+0x174>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c3c:	f7fd fa9e 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8003c40:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <running+0x174>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	f083 0301 	eor.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <running+0xfa>
 8003c4e:	f000 f863 	bl	8003d18 <getSideSensorStatusR>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <running+0xfa>
 8003c58:	f7fd fa82 	bl	8001160 <getGoalJudgeDistance>
 8003c5c:	eeb0 7a40 	vmov.f32	s14, s0
 8003c60:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003cf8 <running+0x178>
 8003c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	db05      	blt.n	8003c7a <running+0xfa>
						  goal_judge_flag = true;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <running+0x174>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c74:	f7fd fa82 	bl	800117c <clearGoalJudgeDistance>
 8003c78:	e019      	b.n	8003cae <running+0x12e>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <running+0x174>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <running+0x12e>
 8003c82:	f7fd fa6d 	bl	8001160 <getGoalJudgeDistance>
 8003c86:	eeb0 7a40 	vmov.f32	s14, s0
 8003c8a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003cf8 <running+0x178>
 8003c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	db0a      	blt.n	8003cae <running+0x12e>
						  start_goal_line_cnt++;
 8003c98:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <running+0x170>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <running+0x170>)
 8003ca2:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <running+0x174>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003caa:	f7fd fa67 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <running+0x170>)
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d908      	bls.n	8003cc8 <running+0x148>
						  pattern = 20;
 8003cb6:	2314      	movs	r3, #20
 8003cb8:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8003cba:	e005      	b.n	8003cc8 <running+0x148>
=======
 8003b5c:	e002      	b.n	8003b64 <updateSideSensorStatus+0x58>
		side_sensor_r = false;
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <updateSideSensorStatus+0x74>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	200003c2 	.word	0x200003c2
 8003b74:	200004b4 	.word	0x200004b4
 8003b78:	200003c4 	.word	0x200003c4
 8003b7c:	20000458 	.word	0x20000458
 8003b80:	200003c5 	.word	0x200003c5

08003b84 <running>:

void running(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	80fb      	strh	r3, [r7, #6]
	startLineTrace();
 8003b8e:	f7fd ff59 	bl	8001a44 <startLineTrace>
	startVelocityControl();
 8003b92:	f7fe ff47 	bl	8002a24 <startVelocityControl>
	//setTargetVelocity(min_velocity);

	while(goal_flag == false){
 8003b96:	e0a1      	b.n	8003cdc <running+0x158>
		switch(pattern){
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b14      	cmp	r3, #20
 8003b9c:	f200 8097 	bhi.w	8003cce <running+0x14a>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <running+0x24>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bfd 	.word	0x08003bfd
 8003bac:	08003ccf 	.word	0x08003ccf
 8003bb0:	08003ccf 	.word	0x08003ccf
 8003bb4:	08003ccf 	.word	0x08003ccf
 8003bb8:	08003ccf 	.word	0x08003ccf
 8003bbc:	08003c1d 	.word	0x08003c1d
 8003bc0:	08003ccf 	.word	0x08003ccf
 8003bc4:	08003ccf 	.word	0x08003ccf
 8003bc8:	08003ccf 	.word	0x08003ccf
 8003bcc:	08003ccf 	.word	0x08003ccf
 8003bd0:	08003c31 	.word	0x08003c31
 8003bd4:	08003ccf 	.word	0x08003ccf
 8003bd8:	08003ccf 	.word	0x08003ccf
 8003bdc:	08003ccf 	.word	0x08003ccf
 8003be0:	08003ccf 	.word	0x08003ccf
 8003be4:	08003ccf 	.word	0x08003ccf
 8003be8:	08003ccf 	.word	0x08003ccf
 8003bec:	08003ccf 	.word	0x08003ccf
 8003bf0:	08003ccf 	.word	0x08003ccf
 8003bf4:	08003ccf 	.word	0x08003ccf
 8003bf8:	08003cc1 	.word	0x08003cc1

				  case 0:
					  if(getSideSensorStatusR() == true){
 8003bfc:	f000 f88e 	bl	8003d1c <getSideSensorStatusR>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d060      	beq.n	8003cc8 <running+0x144>
						  start_goal_line_cnt++;
 8003c06:	4b3b      	ldr	r3, [pc, #236]	; (8003cf4 <running+0x170>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b39      	ldr	r3, [pc, #228]	; (8003cf4 <running+0x170>)
 8003c10:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c12:	f7fd fab3 	bl	800117c <clearGoalJudgeDistance>
						  pattern = 5;
 8003c16:	2305      	movs	r3, #5
 8003c18:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8003c1a:	e055      	b.n	8003cc8 <running+0x144>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8003c1c:	f000 f87e 	bl	8003d1c <getSideSensorStatusR>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f083 0301 	eor.w	r3, r3, #1
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <running+0xac>
 8003c2c:	230a      	movs	r3, #10
 8003c2e:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8003c30:	f000 f868 	bl	8003d04 <getSideSensorStatusL>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d004      	beq.n	8003c44 <running+0xc0>
						  goal_judge_flag = false;
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	; (8003cf8 <running+0x174>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c40:	f7fd fa9c 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <running+0x174>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f083 0301 	eor.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <running+0xfa>
 8003c52:	f000 f863 	bl	8003d1c <getSideSensorStatusR>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d010      	beq.n	8003c7e <running+0xfa>
 8003c5c:	f7fd fa80 	bl	8001160 <getGoalJudgeDistance>
 8003c60:	eeb0 7a40 	vmov.f32	s14, s0
 8003c64:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003cfc <running+0x178>
 8003c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c70:	db05      	blt.n	8003c7e <running+0xfa>
						  goal_judge_flag = true;
 8003c72:	4b21      	ldr	r3, [pc, #132]	; (8003cf8 <running+0x174>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003c78:	f7fd fa80 	bl	800117c <clearGoalJudgeDistance>
 8003c7c:	e019      	b.n	8003cb2 <running+0x12e>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8003c7e:	4b1e      	ldr	r3, [pc, #120]	; (8003cf8 <running+0x174>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <running+0x12e>
 8003c86:	f7fd fa6b 	bl	8001160 <getGoalJudgeDistance>
 8003c8a:	eeb0 7a40 	vmov.f32	s14, s0
 8003c8e:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003cfc <running+0x178>
 8003c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	db0a      	blt.n	8003cb2 <running+0x12e>
						  start_goal_line_cnt++;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <running+0x170>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <running+0x170>)
 8003ca6:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <running+0x174>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003cae:	f7fd fa65 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <running+0x170>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d908      	bls.n	8003ccc <running+0x148>
						  pattern = 20;
 8003cba:	2314      	movs	r3, #20
 8003cbc:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8003cbe:	e005      	b.n	8003ccc <running+0x148>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

				  case 20:

					  goal_flag = true;
<<<<<<< HEAD
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <running+0x17c>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]

					  break;
 8003cc2:	e002      	b.n	8003cca <running+0x14a>
					  break;
 8003cc4:	bf00      	nop
 8003cc6:	e000      	b.n	8003cca <running+0x14a>
					  break;
 8003cc8:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8003cca:	f7fd ff41 	bl	8001b50 <getCouseOutFlag>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <running+0x158>
		{
		    pattern = 20;
 8003cd4:	2314      	movs	r3, #20
 8003cd6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <running+0x17c>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f47f af56 	bne.w	8003b94 <running+0x14>
=======
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <running+0x17c>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]

					  break;
 8003cc6:	e002      	b.n	8003cce <running+0x14a>
					  break;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <running+0x14a>
					  break;
 8003ccc:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8003cce:	f7fd ff3f 	bl	8001b50 <getCouseOutFlag>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <running+0x158>
		{
		    pattern = 20;
 8003cd8:	2314      	movs	r3, #20
 8003cda:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <running+0x17c>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	f083 0301 	eor.w	r3, r3, #1
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f47f af56 	bne.w	8003b98 <running+0x14>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
<<<<<<< HEAD
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	200003c8 	.word	0x200003c8
 8003cf4:	200003c7 	.word	0x200003c7
 8003cf8:	428c0000 	.word	0x428c0000
 8003cfc:	200003c6 	.word	0x200003c6

08003d00 <getSideSensorStatusL>:

bool getSideSensorStatusL()
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <getSideSensorStatusL+0x14>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200003c4 	.word	0x200003c4

08003d18 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8003d1c:	4b03      	ldr	r3, [pc, #12]	; (8003d2c <getSideSensorStatusR+0x14>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	200003c5 	.word	0x200003c5

08003d30 <getgoalStatus>:

bool getgoalStatus()
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
	return goal_flag;
 8003d34:	4b03      	ldr	r3, [pc, #12]	; (8003d44 <getgoalStatus+0x14>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200003c6 	.word	0x200003c6

08003d48 <HAL_MspInit>:
=======
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	200003c8 	.word	0x200003c8
 8003cf8:	200003c7 	.word	0x200003c7
 8003cfc:	428c0000 	.word	0x428c0000
 8003d00:	200003c6 	.word	0x200003c6

08003d04 <getSideSensorStatusL>:

bool getSideSensorStatusL()
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <getSideSensorStatusL+0x14>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	200003c4 	.word	0x200003c4

08003d1c <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <getSideSensorStatusR+0x14>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	200003c5 	.word	0x200003c5

08003d34 <getgoalStatus>:

bool getgoalStatus()
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
	return goal_flag;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <getgoalStatus+0x14>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	200003c6 	.word	0x200003c6

08003d4c <HAL_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
=======
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_MspInit+0x4c>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	683b      	ldr	r3, [r7, #0]
=======
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a0f      	ldr	r2, [pc, #60]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	2300      	movs	r3, #0
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_MspInit+0x4c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40023800 	.word	0x40023800

08003d98 <HAL_ADC_MspInit>:
=======
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_ADC_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	; 0x38
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a79      	ldr	r2, [pc, #484]	; (8003f9c <HAL_ADC_MspInit+0x204>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d158      	bne.n	8003e6c <HAL_ADC_MspInit+0xd4>
=======
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a79      	ldr	r2, [pc, #484]	; (8003fa0 <HAL_ADC_MspInit+0x204>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d158      	bne.n	8003e70 <HAL_ADC_MspInit+0xd4>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a77      	ldr	r2, [pc, #476]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a70      	ldr	r2, [pc, #448]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b6e      	ldr	r3, [pc, #440]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	69fb      	ldr	r3, [r7, #28]
=======
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b75      	ldr	r3, [pc, #468]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	623b      	str	r3, [r7, #32]
 8003dd8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003de4:	f043 0304 	orr.w	r3, r3, #4
 8003de8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dea:	4b6e      	ldr	r3, [pc, #440]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
<<<<<<< HEAD
 8003df2:	230e      	movs	r3, #14
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003df6:	2303      	movs	r3, #3
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e02:	4619      	mov	r1, r3
 8003e04:	4867      	ldr	r0, [pc, #412]	; (8003fa4 <HAL_ADC_MspInit+0x20c>)
 8003e06:	f001 fd0d 	bl	8005824 <HAL_GPIO_Init>
=======
 8003df6:	230e      	movs	r3, #14
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e06:	4619      	mov	r1, r3
 8003e08:	4867      	ldr	r0, [pc, #412]	; (8003fa8 <HAL_ADC_MspInit+0x20c>)
 8003e0a:	f001 fd0d 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
<<<<<<< HEAD
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e0c:	4a67      	ldr	r2, [pc, #412]	; (8003fac <HAL_ADC_MspInit+0x214>)
 8003e0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e10:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e16:	4b64      	ldr	r3, [pc, #400]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e1c:	4b62      	ldr	r3, [pc, #392]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e22:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e3a:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e40:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e42:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e48:	4b57      	ldr	r3, [pc, #348]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e4e:	4856      	ldr	r0, [pc, #344]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e50:	f001 f97a 	bl	8005148 <HAL_DMA_Init>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e5a:	f7ff fd67 	bl	800392c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a51      	ldr	r2, [pc, #324]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38
 8003e64:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_ADC_MspInit+0x210>)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6393      	str	r3, [r2, #56]	; 0x38
=======
 8003e0e:	4b67      	ldr	r3, [pc, #412]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e10:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <HAL_ADC_MspInit+0x214>)
 8003e12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003e14:	4b65      	ldr	r3, [pc, #404]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1a:	4b64      	ldr	r3, [pc, #400]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e20:	4b62      	ldr	r3, [pc, #392]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e26:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e2e:	4b5f      	ldr	r3, [pc, #380]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e3e:	4b5b      	ldr	r3, [pc, #364]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e46:	4b59      	ldr	r3, [pc, #356]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e4c:	4b57      	ldr	r3, [pc, #348]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003e52:	4856      	ldr	r0, [pc, #344]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e54:	f001 f97a 	bl	800514c <HAL_DMA_Init>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e5e:	f7ff fd67 	bl	8003930 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
 8003e68:	4a50      	ldr	r2, [pc, #320]	; (8003fac <HAL_ADC_MspInit+0x210>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6393      	str	r3, [r2, #56]	; 0x38
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
<<<<<<< HEAD
 8003e6a:	e092      	b.n	8003f92 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a4f      	ldr	r2, [pc, #316]	; (8003fb0 <HAL_ADC_MspInit+0x218>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	f040 808d 	bne.w	8003f92 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e78:	2300      	movs	r3, #0
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	4b48      	ldr	r3, [pc, #288]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	4a47      	ldr	r2, [pc, #284]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	6453      	str	r3, [r2, #68]	; 0x44
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	4a40      	ldr	r2, [pc, #256]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec0:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	613b      	str	r3, [r7, #16]
 8003eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	4b33      	ldr	r3, [pc, #204]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4a32      	ldr	r2, [pc, #200]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	6313      	str	r3, [r2, #48]	; 0x30
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_ADC_MspInit+0x208>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003ee8:	23ff      	movs	r3, #255	; 0xff
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eec:	2303      	movs	r3, #3
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef8:	4619      	mov	r1, r3
 8003efa:	482e      	ldr	r0, [pc, #184]	; (8003fb4 <HAL_ADC_MspInit+0x21c>)
 8003efc:	f001 fc92 	bl	8005824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f00:	2330      	movs	r3, #48	; 0x30
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f04:	2303      	movs	r3, #3
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f10:	4619      	mov	r1, r3
 8003f12:	4824      	ldr	r0, [pc, #144]	; (8003fa4 <HAL_ADC_MspInit+0x20c>)
 8003f14:	f001 fc86 	bl	8005824 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4823      	ldr	r0, [pc, #140]	; (8003fb8 <HAL_ADC_MspInit+0x220>)
 8003f2c:	f001 fc7a 	bl	8005824 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003f30:	4b22      	ldr	r3, [pc, #136]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f32:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_ADC_MspInit+0x228>)
 8003f34:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003f36:	4b21      	ldr	r3, [pc, #132]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f3e:	4b1f      	ldr	r3, [pc, #124]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f44:	4b1d      	ldr	r3, [pc, #116]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003f4a:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f50:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f52:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f58:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f60:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f68:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f76:	4811      	ldr	r0, [pc, #68]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f78:	f001 f8e6 	bl	8005148 <HAL_DMA_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8003f82:	f7ff fcd3 	bl	800392c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0c      	ldr	r2, [pc, #48]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <HAL_ADC_MspInit+0x224>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f92:	bf00      	nop
 8003f94:	3738      	adds	r7, #56	; 0x38
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40012000 	.word	0x40012000
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	20000724 	.word	0x20000724
 8003fac:	40026410 	.word	0x40026410
 8003fb0:	40012100 	.word	0x40012100
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	2000080c 	.word	0x2000080c
 8003fc0:	40026440 	.word	0x40026440

08003fc4 <HAL_I2C_MspInit>:
=======
 8003e6e:	e092      	b.n	8003f96 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a4f      	ldr	r2, [pc, #316]	; (8003fb4 <HAL_ADC_MspInit+0x218>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f040 808d 	bne.w	8003f96 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	4b48      	ldr	r3, [pc, #288]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	4a47      	ldr	r2, [pc, #284]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003e86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e8a:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebc:	4a39      	ldr	r2, [pc, #228]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	4a32      	ldr	r2, [pc, #200]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee0:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_ADC_MspInit+0x208>)
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003eec:	23ff      	movs	r3, #255	; 0xff
 8003eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003efc:	4619      	mov	r1, r3
 8003efe:	482e      	ldr	r0, [pc, #184]	; (8003fb8 <HAL_ADC_MspInit+0x21c>)
 8003f00:	f001 fc92 	bl	8005828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f04:	2330      	movs	r3, #48	; 0x30
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f14:	4619      	mov	r1, r3
 8003f16:	4824      	ldr	r0, [pc, #144]	; (8003fa8 <HAL_ADC_MspInit+0x20c>)
 8003f18:	f001 fc86 	bl	8005828 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f20:	2303      	movs	r3, #3
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4823      	ldr	r0, [pc, #140]	; (8003fbc <HAL_ADC_MspInit+0x220>)
 8003f30:	f001 fc7a 	bl	8005828 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003f34:	4b22      	ldr	r3, [pc, #136]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f36:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_ADC_MspInit+0x228>)
 8003f38:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f40:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f54:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f5c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f64:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003f66:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f6c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f7a:	4811      	ldr	r0, [pc, #68]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f7c:	f001 f8e6 	bl	800514c <HAL_DMA_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8003f86:	f7ff fcd3 	bl	8003930 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8003f90:	4a0b      	ldr	r2, [pc, #44]	; (8003fc0 <HAL_ADC_MspInit+0x224>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f96:	bf00      	nop
 8003f98:	3738      	adds	r7, #56	; 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40012000 	.word	0x40012000
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020800 	.word	0x40020800
 8003fac:	20000724 	.word	0x20000724
 8003fb0:	40026410 	.word	0x40026410
 8003fb4:	40012100 	.word	0x40012100
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	2000080c 	.word	0x2000080c
 8003fc4:	40026440 	.word	0x40026440

08003fc8 <HAL_I2C_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
<<<<<<< HEAD
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_I2C_MspInit+0x84>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12c      	bne.n	8004040 <HAL_I2C_MspInit+0x7c>
=======
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	; 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_I2C_MspInit+0x84>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d12c      	bne.n	8004044 <HAL_I2C_MspInit+0x7c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_I2C_MspInit+0x88>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_I2C_MspInit+0x88>)
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_I2C_MspInit+0x88>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
=======
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	4b18      	ldr	r3, [pc, #96]	; (8004050 <HAL_I2C_MspInit+0x88>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_I2C_MspInit+0x88>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffa:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_I2C_MspInit+0x88>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8004002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004008:	2312      	movs	r3, #18
 800400a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800400c:	2301      	movs	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004010:	2303      	movs	r3, #3
 8004012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004014:	2304      	movs	r3, #4
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	4619      	mov	r1, r3
 800401e:	480c      	ldr	r0, [pc, #48]	; (8004050 <HAL_I2C_MspInit+0x8c>)
 8004020:	f001 fc00 	bl	8005824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_I2C_MspInit+0x88>)
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <HAL_I2C_MspInit+0x88>)
 800402e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004032:	6413      	str	r3, [r2, #64]	; 0x40
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_I2C_MspInit+0x88>)
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
=======
 8004006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800400a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400c:	2312      	movs	r3, #18
 800400e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004010:	2301      	movs	r3, #1
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004018:	2304      	movs	r3, #4
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4619      	mov	r1, r3
 8004022:	480c      	ldr	r0, [pc, #48]	; (8004054 <HAL_I2C_MspInit+0x8c>)
 8004024:	f001 fc00 	bl	8005828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_I2C_MspInit+0x88>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <HAL_I2C_MspInit+0x88>)
 8004032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_I2C_MspInit+0x88>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8004040:	bf00      	nop
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40005400 	.word	0x40005400
 800404c:	40023800 	.word	0x40023800
 8004050:	40020400 	.word	0x40020400

08004054 <HAL_SPI_MspInit>:
=======
 8004044:	bf00      	nop
 8004046:	3728      	adds	r7, #40	; 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40005400 	.word	0x40005400
 8004050:	40023800 	.word	0x40023800
 8004054:	40020400 	.word	0x40020400

08004058 <HAL_SPI_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
<<<<<<< HEAD
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	; 0x28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	605a      	str	r2, [r3, #4]
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	60da      	str	r2, [r3, #12]
 800406a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_SPI_MspInit+0x84>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d12c      	bne.n	80040d0 <HAL_SPI_MspInit+0x7c>
=======
 8004058:	b580      	push	{r7, lr}
 800405a:	b08a      	sub	sp, #40	; 0x28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	609a      	str	r2, [r3, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_SPI_MspInit+0x84>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d12c      	bne.n	80040d4 <HAL_SPI_MspInit+0x7c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
<<<<<<< HEAD
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <HAL_SPI_MspInit+0x88>)
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <HAL_SPI_MspInit+0x88>)
 8004080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004084:	6413      	str	r3, [r2, #64]	; 0x40
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_SPI_MspInit+0x88>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <HAL_SPI_MspInit+0x88>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_SPI_MspInit+0x88>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6313      	str	r3, [r2, #48]	; 0x30
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <HAL_SPI_MspInit+0x88>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
=======
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 8004084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004092:	613b      	str	r3, [r7, #16]
 8004094:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 80040a0:	f043 0304 	orr.w	r3, r3, #4
 80040a4:	6313      	str	r3, [r2, #48]	; 0x30
 80040a6:	4b0e      	ldr	r3, [pc, #56]	; (80040e0 <HAL_SPI_MspInit+0x88>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 80040ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040bc:	2303      	movs	r3, #3
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040c0:	2306      	movs	r3, #6
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	4619      	mov	r1, r3
 80040ca:	4805      	ldr	r0, [pc, #20]	; (80040e0 <HAL_SPI_MspInit+0x8c>)
 80040cc:	f001 fbaa 	bl	8005824 <HAL_GPIO_Init>
=======
 80040b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80040b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b8:	2302      	movs	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c0:	2303      	movs	r3, #3
 80040c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80040c4:	2306      	movs	r3, #6
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4619      	mov	r1, r3
 80040ce:	4805      	ldr	r0, [pc, #20]	; (80040e4 <HAL_SPI_MspInit+0x8c>)
 80040d0:	f001 fbaa 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
<<<<<<< HEAD
 80040d0:	bf00      	nop
 80040d2:	3728      	adds	r7, #40	; 0x28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40003c00 	.word	0x40003c00
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40020800 	.word	0x40020800

080040e4 <HAL_TIM_PWM_MspInit>:
=======
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40003c00 	.word	0x40003c00
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020800 	.word	0x40020800

080040e8 <HAL_TIM_PWM_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
<<<<<<< HEAD
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a15      	ldr	r2, [pc, #84]	; (8004148 <HAL_TIM_PWM_MspInit+0x64>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_PWM_MspInit+0x30>
=======
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a15      	ldr	r2, [pc, #84]	; (800414c <HAL_TIM_PWM_MspInit+0x64>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_PWM_MspInit+0x30>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 80040f6:	2300      	movs	r3, #0
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	4a13      	ldr	r2, [pc, #76]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6453      	str	r3, [r2, #68]	; 0x44
 8004106:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
=======
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6453      	str	r3, [r2, #68]	; 0x44
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
<<<<<<< HEAD
 8004112:	e012      	b.n	800413a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0d      	ldr	r2, [pc, #52]	; (8004150 <HAL_TIM_PWM_MspInit+0x6c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d10d      	bne.n	800413a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	4b0a      	ldr	r3, [pc, #40]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6453      	str	r3, [r2, #68]	; 0x44
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <HAL_TIM_PWM_MspInit+0x68>)
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40023800 	.word	0x40023800
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_TIM_Encoder_MspInit>:
=======
 8004116:	e012      	b.n	800413e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a0d      	ldr	r2, [pc, #52]	; (8004154 <HAL_TIM_PWM_MspInit+0x6c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10d      	bne.n	800413e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6453      	str	r3, [r2, #68]	; 0x44
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <HAL_TIM_PWM_MspInit+0x68>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
}
 800413e:	bf00      	nop
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40010000 	.word	0x40010000
 8004150:	40023800 	.word	0x40023800
 8004154:	40010400 	.word	0x40010400

08004158 <HAL_TIM_Encoder_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
<<<<<<< HEAD
 8004154:	b580      	push	{r7, lr}
 8004156:	b08c      	sub	sp, #48	; 0x30
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 031c 	add.w	r3, r7, #28
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a32      	ldr	r2, [pc, #200]	; (800423c <HAL_TIM_Encoder_MspInit+0xe8>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d12c      	bne.n	80041d0 <HAL_TIM_Encoder_MspInit+0x7c>
=======
 8004158:	b580      	push	{r7, lr}
 800415a:	b08c      	sub	sp, #48	; 0x30
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004160:	f107 031c 	add.w	r3, r7, #28
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a32      	ldr	r2, [pc, #200]	; (8004240 <HAL_TIM_Encoder_MspInit+0xe8>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d12c      	bne.n	80041d4 <HAL_TIM_Encoder_MspInit+0x7c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
<<<<<<< HEAD
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	6413      	str	r3, [r2, #64]	; 0x40
 8004186:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	61bb      	str	r3, [r7, #24]
 8004190:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a29      	ldr	r2, [pc, #164]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 800419c:	f043 0302 	orr.w	r3, r3, #2
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b27      	ldr	r3, [pc, #156]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
=======
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	4a30      	ldr	r2, [pc, #192]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	6413      	str	r3, [r2, #64]	; 0x40
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	6313      	str	r3, [r2, #48]	; 0x30
 80041a6:	4b27      	ldr	r3, [pc, #156]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	697b      	ldr	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
<<<<<<< HEAD
 80041ae:	2330      	movs	r3, #48	; 0x30
 80041b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	2300      	movs	r3, #0
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041be:	2302      	movs	r3, #2
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c2:	f107 031c 	add.w	r3, r7, #28
 80041c6:	4619      	mov	r1, r3
 80041c8:	481e      	ldr	r0, [pc, #120]	; (8004244 <HAL_TIM_Encoder_MspInit+0xf0>)
 80041ca:	f001 fb2b 	bl	8005824 <HAL_GPIO_Init>
=======
 80041b2:	2330      	movs	r3, #48	; 0x30
 80041b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b6:	2302      	movs	r3, #2
 80041b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041be:	2300      	movs	r3, #0
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041c2:	2302      	movs	r3, #2
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c6:	f107 031c 	add.w	r3, r7, #28
 80041ca:	4619      	mov	r1, r3
 80041cc:	481e      	ldr	r0, [pc, #120]	; (8004248 <HAL_TIM_Encoder_MspInit+0xf0>)
 80041ce:	f001 fb2b 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
<<<<<<< HEAD
 80041ce:	e030      	b.n	8004232 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1c      	ldr	r2, [pc, #112]	; (8004248 <HAL_TIM_Encoder_MspInit+0xf4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d12b      	bne.n	8004232 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b18      	ldr	r3, [pc, #96]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	4a17      	ldr	r2, [pc, #92]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 80041e4:	f043 0304 	orr.w	r3, r3, #4
 80041e8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 0304 	and.w	r3, r3, #4
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a10      	ldr	r2, [pc, #64]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_TIM_Encoder_MspInit+0xec>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004212:	23c0      	movs	r3, #192	; 0xc0
 8004214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004216:	2302      	movs	r3, #2
 8004218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800421e:	2300      	movs	r3, #0
 8004220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004222:	2302      	movs	r3, #2
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004226:	f107 031c 	add.w	r3, r7, #28
 800422a:	4619      	mov	r1, r3
 800422c:	4805      	ldr	r0, [pc, #20]	; (8004244 <HAL_TIM_Encoder_MspInit+0xf0>)
 800422e:	f001 faf9 	bl	8005824 <HAL_GPIO_Init>
}
 8004232:	bf00      	nop
 8004234:	3730      	adds	r7, #48	; 0x30
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40000400 	.word	0x40000400
 8004240:	40023800 	.word	0x40023800
 8004244:	40020400 	.word	0x40020400
 8004248:	40000800 	.word	0x40000800

0800424c <HAL_TIM_Base_MspInit>:
=======
 80041d2:	e030      	b.n	8004236 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1c      	ldr	r2, [pc, #112]	; (800424c <HAL_TIM_Encoder_MspInit+0xf4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d12b      	bne.n	8004236 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4a17      	ldr	r2, [pc, #92]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	6413      	str	r3, [r2, #64]	; 0x40
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	4a10      	ldr	r2, [pc, #64]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 8004204:	f043 0302 	orr.w	r3, r3, #2
 8004208:	6313      	str	r3, [r2, #48]	; 0x30
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_TIM_Encoder_MspInit+0xec>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004216:	23c0      	movs	r3, #192	; 0xc0
 8004218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004222:	2300      	movs	r3, #0
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004226:	2302      	movs	r3, #2
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422a:	f107 031c 	add.w	r3, r7, #28
 800422e:	4619      	mov	r1, r3
 8004230:	4805      	ldr	r0, [pc, #20]	; (8004248 <HAL_TIM_Encoder_MspInit+0xf0>)
 8004232:	f001 faf9 	bl	8005828 <HAL_GPIO_Init>
}
 8004236:	bf00      	nop
 8004238:	3730      	adds	r7, #48	; 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40000400 	.word	0x40000400
 8004244:	40023800 	.word	0x40023800
 8004248:	40020400 	.word	0x40020400
 800424c:	40000800 	.word	0x40000800

08004250 <HAL_TIM_Base_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_TIM_Base_MspInit+0x80>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d116      	bne.n	800428c <HAL_TIM_Base_MspInit+0x40>
=======
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_TIM_Base_MspInit+0x80>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d116      	bne.n	8004290 <HAL_TIM_Base_MspInit+0x40>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
<<<<<<< HEAD
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004266:	4a1a      	ldr	r2, [pc, #104]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 8004268:	f043 0310 	orr.w	r3, r3, #16
 800426c:	6413      	str	r3, [r2, #64]	; 0x40
 800426e:	4b18      	ldr	r3, [pc, #96]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800427a:	2200      	movs	r2, #0
 800427c:	2101      	movs	r1, #1
 800427e:	2036      	movs	r0, #54	; 0x36
 8004280:	f000 ff2b 	bl	80050da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004284:	2036      	movs	r0, #54	; 0x36
 8004286:	f000 ff44 	bl	8005112 <HAL_NVIC_EnableIRQ>
=======
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 800426c:	f043 0310 	orr.w	r3, r3, #16
 8004270:	6413      	str	r3, [r2, #64]	; 0x40
 8004272:	4b18      	ldr	r3, [pc, #96]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f003 0310 	and.w	r3, r3, #16
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2101      	movs	r1, #1
 8004282:	2036      	movs	r0, #54	; 0x36
 8004284:	f000 ff2b 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004288:	2036      	movs	r0, #54	; 0x36
 800428a:	f000 ff44 	bl	8005116 <HAL_NVIC_EnableIRQ>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
<<<<<<< HEAD
 800428a:	e01a      	b.n	80042c2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <HAL_TIM_Base_MspInit+0x88>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d115      	bne.n	80042c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a0c      	ldr	r2, [pc, #48]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_TIM_Base_MspInit+0x84>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80042b2:	2200      	movs	r2, #0
 80042b4:	2100      	movs	r1, #0
 80042b6:	2037      	movs	r0, #55	; 0x37
 80042b8:	f000 ff0f 	bl	80050da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042bc:	2037      	movs	r0, #55	; 0x37
 80042be:	f000 ff28 	bl	8005112 <HAL_NVIC_EnableIRQ>
}
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40001000 	.word	0x40001000
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40001400 	.word	0x40001400

080042d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 0314 	add.w	r3, r7, #20
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a25      	ldr	r2, [pc, #148]	; (800438c <HAL_TIM_MspPostInit+0xb4>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d11f      	bne.n	800433a <HAL_TIM_MspPostInit+0x62>
=======
 800428e:	e01a      	b.n	80042c6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_TIM_Base_MspInit+0x88>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d115      	bne.n	80042c6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60bb      	str	r3, [r7, #8]
 800429e:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 80042a4:	f043 0320 	orr.w	r3, r3, #32
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <HAL_TIM_Base_MspInit+0x84>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 0320 	and.w	r3, r3, #32
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2100      	movs	r1, #0
 80042ba:	2037      	movs	r0, #55	; 0x37
 80042bc:	f000 ff0f 	bl	80050de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042c0:	2037      	movs	r0, #55	; 0x37
 80042c2:	f000 ff28 	bl	8005116 <HAL_NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40001000 	.word	0x40001000
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40001400 	.word	0x40001400

080042dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	; 0x28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a25      	ldr	r2, [pc, #148]	; (8004390 <HAL_TIM_MspPostInit+0xb4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d11f      	bne.n	800433e <HAL_TIM_MspPostInit+0x62>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6313      	str	r3, [r2, #48]	; 0x30
 800430a:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
=======
 80042fe:	2300      	movs	r3, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	4b24      	ldr	r3, [pc, #144]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a23      	ldr	r2, [pc, #140]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b21      	ldr	r3, [pc, #132]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
<<<<<<< HEAD
 8004316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800431a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431c:	2302      	movs	r3, #2
 800431e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004324:	2300      	movs	r3, #0
 8004326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004328:	2301      	movs	r3, #1
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	4619      	mov	r1, r3
 8004332:	4818      	ldr	r0, [pc, #96]	; (8004394 <HAL_TIM_MspPostInit+0xbc>)
 8004334:	f001 fa76 	bl	8005824 <HAL_GPIO_Init>
=======
 800431a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800432c:	2301      	movs	r3, #1
 800432e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	4818      	ldr	r0, [pc, #96]	; (8004398 <HAL_TIM_MspPostInit+0xbc>)
 8004338:	f001 fa76 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8004338:	e023      	b.n	8004382 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a16      	ldr	r2, [pc, #88]	; (8004398 <HAL_TIM_MspPostInit+0xc0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d11e      	bne.n	8004382 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 800434e:	f043 0304 	orr.w	r3, r3, #4
 8004352:	6313      	str	r3, [r2, #48]	; 0x30
 8004354:	4b0e      	ldr	r3, [pc, #56]	; (8004390 <HAL_TIM_MspPostInit+0xb8>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004360:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004372:	2303      	movs	r3, #3
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004376:	f107 0314 	add.w	r3, r7, #20
 800437a:	4619      	mov	r1, r3
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <HAL_TIM_MspPostInit+0xc4>)
 800437e:	f001 fa51 	bl	8005824 <HAL_GPIO_Init>
}
 8004382:	bf00      	nop
 8004384:	3728      	adds	r7, #40	; 0x28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40023800 	.word	0x40023800
 8004394:	40020000 	.word	0x40020000
 8004398:	40010400 	.word	0x40010400
 800439c:	40020800 	.word	0x40020800

080043a0 <HAL_UART_MspInit>:
=======
 800433c:	e023      	b.n	8004386 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a16      	ldr	r2, [pc, #88]	; (800439c <HAL_TIM_MspPostInit+0xc0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d11e      	bne.n	8004386 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 800434e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004350:	4a10      	ldr	r2, [pc, #64]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6313      	str	r3, [r2, #48]	; 0x30
 8004358:	4b0e      	ldr	r3, [pc, #56]	; (8004394 <HAL_TIM_MspPostInit+0xb8>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004364:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436a:	2302      	movs	r3, #2
 800436c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004372:	2300      	movs	r3, #0
 8004374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004376:	2303      	movs	r3, #3
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800437a:	f107 0314 	add.w	r3, r7, #20
 800437e:	4619      	mov	r1, r3
 8004380:	4807      	ldr	r0, [pc, #28]	; (80043a0 <HAL_TIM_MspPostInit+0xc4>)
 8004382:	f001 fa51 	bl	8005828 <HAL_GPIO_Init>
}
 8004386:	bf00      	nop
 8004388:	3728      	adds	r7, #40	; 0x28
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40023800 	.word	0x40023800
 8004398:	40020000 	.word	0x40020000
 800439c:	40010400 	.word	0x40010400
 80043a0:	40020800 	.word	0x40020800

080043a4 <HAL_UART_MspInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a8:	f107 0314 	add.w	r3, r7, #20
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
 80043b2:	609a      	str	r2, [r3, #8]
 80043b4:	60da      	str	r2, [r3, #12]
 80043b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_UART_MspInit+0x84>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d12c      	bne.n	800441c <HAL_UART_MspInit+0x7c>
=======
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	605a      	str	r2, [r3, #4]
 80043b6:	609a      	str	r2, [r3, #8]
 80043b8:	60da      	str	r2, [r3, #12]
 80043ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a19      	ldr	r2, [pc, #100]	; (8004428 <HAL_UART_MspInit+0x84>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d12c      	bne.n	8004420 <HAL_UART_MspInit+0x7c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	4a17      	ldr	r2, [pc, #92]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043cc:	f043 0310 	orr.w	r3, r3, #16
 80043d0:	6453      	str	r3, [r2, #68]	; 0x44
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4a10      	ldr	r2, [pc, #64]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043e8:	f043 0301 	orr.w	r3, r3, #1
 80043ec:	6313      	str	r3, [r2, #48]	; 0x30
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_UART_MspInit+0x88>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	68fb      	ldr	r3, [r7, #12]
=======
 80043c6:	2300      	movs	r3, #0
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_UART_MspInit+0x88>)
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_UART_MspInit+0x88>)
 80043d0:	f043 0310 	orr.w	r3, r3, #16
 80043d4:	6453      	str	r3, [r2, #68]	; 0x44
 80043d6:	4b15      	ldr	r3, [pc, #84]	; (800442c <HAL_UART_MspInit+0x88>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_UART_MspInit+0x88>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_UART_MspInit+0x88>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_UART_MspInit+0x88>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
<<<<<<< HEAD
 80043fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004400:	2302      	movs	r3, #2
 8004402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004408:	2303      	movs	r3, #3
 800440a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800440c:	2307      	movs	r3, #7
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	4619      	mov	r1, r3
 8004416:	4805      	ldr	r0, [pc, #20]	; (800442c <HAL_UART_MspInit+0x8c>)
 8004418:	f001 fa04 	bl	8005824 <HAL_GPIO_Init>
=======
 80043fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440c:	2303      	movs	r3, #3
 800440e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004410:	2307      	movs	r3, #7
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4619      	mov	r1, r3
 800441a:	4805      	ldr	r0, [pc, #20]	; (8004430 <HAL_UART_MspInit+0x8c>)
 800441c:	f001 fa04 	bl	8005828 <HAL_GPIO_Init>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
<<<<<<< HEAD
 800441c:	bf00      	nop
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40011000 	.word	0x40011000
 8004428:	40023800 	.word	0x40023800
 800442c:	40020000 	.word	0x40020000

08004430 <NMI_Handler>:
=======
 8004420:	bf00      	nop
 8004422:	3728      	adds	r7, #40	; 0x28
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40011000 	.word	0x40011000
 800442c:	40023800 	.word	0x40023800
 8004430:	40020000 	.word	0x40020000

08004434 <NMI_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
=======
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8004434:	e7fe      	b.n	8004434 <NMI_Handler+0x4>

08004436 <HardFault_Handler>:
=======
 8004438:	e7fe      	b.n	8004438 <NMI_Handler+0x4>

0800443a <HardFault_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
=======
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800443a:	e7fe      	b.n	800443a <HardFault_Handler+0x4>

0800443c <MemManage_Handler>:
=======
 800443e:	e7fe      	b.n	800443e <HardFault_Handler+0x4>

08004440 <MemManage_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
=======
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8004440:	e7fe      	b.n	8004440 <MemManage_Handler+0x4>

08004442 <BusFault_Handler>:
=======
 8004444:	e7fe      	b.n	8004444 <MemManage_Handler+0x4>

08004446 <BusFault_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
=======
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8004446:	e7fe      	b.n	8004446 <BusFault_Handler+0x4>

08004448 <UsageFault_Handler>:
=======
 800444a:	e7fe      	b.n	800444a <BusFault_Handler+0x4>

0800444c <UsageFault_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
=======
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800444c:	e7fe      	b.n	800444c <UsageFault_Handler+0x4>

0800444e <SVC_Handler>:
=======
 8004450:	e7fe      	b.n	8004450 <UsageFault_Handler+0x4>

08004452 <SVC_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 800444e:	b480      	push	{r7}
 8004450:	af00      	add	r7, sp, #0
=======
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <DebugMon_Handler>:
=======
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <DebugMon_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
=======
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <PendSV_Handler>:
=======
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <PendSV_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
=======
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800446e:	bf00      	nop
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <SysTick_Handler>:
=======
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <SysTick_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
=======
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 800447c:	f000 f91c 	bl	80046b8 <HAL_IncTick>
=======
 8004480:	f000 f91c 	bl	80046bc <HAL_IncTick>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8004480:	bf00      	nop
 8004482:	bd80      	pop	{r7, pc}

08004484 <TIM6_DAC_IRQHandler>:
=======
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}

08004488 <TIM6_DAC_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
<<<<<<< HEAD
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
=======
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
<<<<<<< HEAD
 8004488:	4802      	ldr	r0, [pc, #8]	; (8004494 <TIM6_DAC_IRQHandler+0x10>)
 800448a:	f002 ffe0 	bl	800744e <HAL_TIM_IRQHandler>
=======
 800448c:	4802      	ldr	r0, [pc, #8]	; (8004498 <TIM6_DAC_IRQHandler+0x10>)
 800448e:	f002 ffe0 	bl	8007452 <HAL_TIM_IRQHandler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
<<<<<<< HEAD
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000784 	.word	0x20000784

08004498 <TIM7_IRQHandler>:
=======
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000784 	.word	0x20000784

0800449c <TIM7_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
<<<<<<< HEAD
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
=======
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
<<<<<<< HEAD
 800449c:	4802      	ldr	r0, [pc, #8]	; (80044a8 <TIM7_IRQHandler+0x10>)
 800449e:	f002 ffd6 	bl	800744e <HAL_TIM_IRQHandler>
=======
 80044a0:	4802      	ldr	r0, [pc, #8]	; (80044ac <TIM7_IRQHandler+0x10>)
 80044a2:	f002 ffd6 	bl	8007452 <HAL_TIM_IRQHandler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
<<<<<<< HEAD
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	2000086c 	.word	0x2000086c

080044ac <DMA2_Stream0_IRQHandler>:
=======
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	2000086c 	.word	0x2000086c

080044b0 <DMA2_Stream0_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
=======
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
<<<<<<< HEAD
 80044b0:	4802      	ldr	r0, [pc, #8]	; (80044bc <DMA2_Stream0_IRQHandler+0x10>)
 80044b2:	f000 ff4f 	bl	8005354 <HAL_DMA_IRQHandler>
=======
 80044b4:	4802      	ldr	r0, [pc, #8]	; (80044c0 <DMA2_Stream0_IRQHandler+0x10>)
 80044b6:	f000 ff4f 	bl	8005358 <HAL_DMA_IRQHandler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000724 	.word	0x20000724

080044c0 <DMA2_Stream2_IRQHandler>:
=======
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000724 	.word	0x20000724

080044c4 <DMA2_Stream2_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
<<<<<<< HEAD
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
=======
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
<<<<<<< HEAD
 80044c4:	4802      	ldr	r0, [pc, #8]	; (80044d0 <DMA2_Stream2_IRQHandler+0x10>)
 80044c6:	f000 ff45 	bl	8005354 <HAL_DMA_IRQHandler>
=======
 80044c8:	4802      	ldr	r0, [pc, #8]	; (80044d4 <DMA2_Stream2_IRQHandler+0x10>)
 80044ca:	f000 ff45 	bl	8005358 <HAL_DMA_IRQHandler>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
<<<<<<< HEAD
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2000080c 	.word	0x2000080c

080044d4 <getSwitchStatus>:
=======
 80044ce:	bf00      	nop
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	2000080c 	.word	0x2000080c

080044d8 <getSwitchStatus>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
<<<<<<< HEAD
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	2b52      	cmp	r3, #82	; 0x52
 80044e6:	d10a      	bne.n	80044fe <getSwitchStatus+0x2a>
 80044e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044ec:	480d      	ldr	r0, [pc, #52]	; (8004524 <getSwitchStatus+0x50>)
 80044ee:	f001 fb33 	bl	8005b58 <HAL_GPIO_ReadPin>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d102      	bne.n	80044fe <getSwitchStatus+0x2a>
		ret = 1;
 80044f8:	2301      	movs	r3, #1
 80044fa:	81fb      	strh	r3, [r7, #14]
 80044fc:	e00c      	b.n	8004518 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	2b4c      	cmp	r3, #76	; 0x4c
 8004502:	d109      	bne.n	8004518 <getSwitchStatus+0x44>
 8004504:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004508:	4806      	ldr	r0, [pc, #24]	; (8004524 <getSwitchStatus+0x50>)
 800450a:	f001 fb25 	bl	8005b58 <HAL_GPIO_ReadPin>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <getSwitchStatus+0x44>
		ret = 1;
 8004514:	2301      	movs	r3, #1
 8004516:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8004518:	89fb      	ldrh	r3, [r7, #14]

}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40020000 	.word	0x40020000

08004528 <_sbrk>:
=======
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	2b52      	cmp	r3, #82	; 0x52
 80044ea:	d10a      	bne.n	8004502 <getSwitchStatus+0x2a>
 80044ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044f0:	480d      	ldr	r0, [pc, #52]	; (8004528 <getSwitchStatus+0x50>)
 80044f2:	f001 fb33 	bl	8005b5c <HAL_GPIO_ReadPin>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <getSwitchStatus+0x2a>
		ret = 1;
 80044fc:	2301      	movs	r3, #1
 80044fe:	81fb      	strh	r3, [r7, #14]
 8004500:	e00c      	b.n	800451c <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b4c      	cmp	r3, #76	; 0x4c
 8004506:	d109      	bne.n	800451c <getSwitchStatus+0x44>
 8004508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800450c:	4806      	ldr	r0, [pc, #24]	; (8004528 <getSwitchStatus+0x50>)
 800450e:	f001 fb25 	bl	8005b5c <HAL_GPIO_ReadPin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <getSwitchStatus+0x44>
		ret = 1;
 8004518:	2301      	movs	r3, #1
 800451a:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800451c:	89fb      	ldrh	r3, [r7, #14]

}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40020000 	.word	0x40020000

0800452c <_sbrk>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
=======
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <_sbrk+0x5c>)
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <_sbrk+0x60>)
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	613b      	str	r3, [r7, #16]
=======
 8004534:	4a14      	ldr	r2, [pc, #80]	; (8004588 <_sbrk+0x5c>)
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <_sbrk+0x60>)
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 800453c:	4b13      	ldr	r3, [pc, #76]	; (800458c <_sbrk+0x64>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <_sbrk+0x64>)
 8004546:	4a12      	ldr	r2, [pc, #72]	; (8004590 <_sbrk+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
=======
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <_sbrk+0x64>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <_sbrk+0x64>)
 800454a:	4a12      	ldr	r2, [pc, #72]	; (8004594 <_sbrk+0x68>)
 800454c:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <_sbrk+0x64>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	429a      	cmp	r2, r3
 8004556:	d207      	bcs.n	8004568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004558:	f004 f892 	bl	8008680 <__errno>
 800455c:	4602      	mov	r2, r0
 800455e:	230c      	movs	r3, #12
 8004560:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004562:	f04f 33ff 	mov.w	r3, #4294967295
 8004566:	e009      	b.n	800457c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <_sbrk+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456e:	4b07      	ldr	r3, [pc, #28]	; (800458c <_sbrk+0x64>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4413      	add	r3, r2
 8004576:	4a05      	ldr	r2, [pc, #20]	; (800458c <_sbrk+0x64>)
 8004578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20020000 	.word	0x20020000
 8004588:	00000400 	.word	0x00000400
 800458c:	200003cc 	.word	0x200003cc
 8004590:	200008c0 	.word	0x200008c0

08004594 <SystemInit>:
=======
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <_sbrk+0x64>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4413      	add	r3, r2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	429a      	cmp	r2, r3
 800455a:	d207      	bcs.n	800456c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800455c:	f004 f892 	bl	8008684 <__errno>
 8004560:	4602      	mov	r2, r0
 8004562:	230c      	movs	r3, #12
 8004564:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	e009      	b.n	8004580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800456c:	4b08      	ldr	r3, [pc, #32]	; (8004590 <_sbrk+0x64>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004572:	4b07      	ldr	r3, [pc, #28]	; (8004590 <_sbrk+0x64>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	4a05      	ldr	r2, [pc, #20]	; (8004590 <_sbrk+0x64>)
 800457c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800457e:	68fb      	ldr	r3, [r7, #12]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20020000 	.word	0x20020000
 800458c:	00000400 	.word	0x00000400
 8004590:	200003cc 	.word	0x200003cc
 8004594:	200008c0 	.word	0x200008c0

08004598 <SystemInit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <SystemInit+0x28>)
 800459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459e:	4a07      	ldr	r2, [pc, #28]	; (80045bc <SystemInit+0x28>)
 80045a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <SystemInit+0x28>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	4a07      	ldr	r2, [pc, #28]	; (80045c0 <SystemInit+0x28>)
 80045a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <SystemInit+0x28>)
 80045aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ae:	609a      	str	r2, [r3, #8]
#endif
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <Reset_Handler>:
=======
 80045ac:	4b04      	ldr	r3, [pc, #16]	; (80045c0 <SystemInit+0x28>)
 80045ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045b2:	609a      	str	r2, [r3, #8]
#endif
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <Reset_Handler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 80045c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045c6:	e003      	b.n	80045d0 <LoopCopyDataInit>

080045c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045c8:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045ce:	3104      	adds	r1, #4

080045d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045d0:	480b      	ldr	r0, [pc, #44]	; (8004600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045d8:	d3f6      	bcc.n	80045c8 <CopyDataInit>
  ldr  r2, =_sbss
 80045da:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045dc:	e002      	b.n	80045e4 <LoopFillZerobss>

080045de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045e0:	f842 3b04 	str.w	r3, [r2], #4

080045e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045e4:	4b09      	ldr	r3, [pc, #36]	; (800460c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045e8:	d3f9      	bcc.n	80045de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045ea:	f7ff ffd3 	bl	8004594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ee:	f004 f84d 	bl	800868c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f2:	f7fe fa97 	bl	8002b24 <main>
  bx  lr    
 80045f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045fc:	0800c458 	.word	0x0800c458
  ldr  r0, =_sdata
 8004600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004604:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8004608:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800460c:	200008bc 	.word	0x200008bc

08004610 <ADC_IRQHandler>:
=======
 80045c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80045c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80045ca:	e003      	b.n	80045d4 <LoopCopyDataInit>

080045cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80045ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045d2:	3104      	adds	r1, #4

080045d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045d4:	480b      	ldr	r0, [pc, #44]	; (8004604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045dc:	d3f6      	bcc.n	80045cc <CopyDataInit>
  ldr  r2, =_sbss
 80045de:	4a0b      	ldr	r2, [pc, #44]	; (800460c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045e0:	e002      	b.n	80045e8 <LoopFillZerobss>

080045e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045e4:	f842 3b04 	str.w	r3, [r2], #4

080045e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045ec:	d3f9      	bcc.n	80045e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045ee:	f7ff ffd3 	bl	8004598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045f2:	f004 f84d 	bl	8008690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045f6:	f7fe fa95 	bl	8002b24 <main>
  bx  lr    
 80045fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004600:	0800c458 	.word	0x0800c458
  ldr  r0, =_sdata
 8004604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004608:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 800460c:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8004610:	200008bc 	.word	0x200008bc

08004614 <ADC_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8004610:	e7fe      	b.n	8004610 <ADC_IRQHandler>
	...

08004614 <HAL_Init>:
=======
 8004614:	e7fe      	b.n	8004614 <ADC_IRQHandler>
	...

08004618 <HAL_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_Init+0x40>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_Init+0x40>)
 800461e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004622:	6013      	str	r3, [r2, #0]
=======
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800461c:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <HAL_Init+0x40>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0d      	ldr	r2, [pc, #52]	; (8004658 <HAL_Init+0x40>)
 8004622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004626:	6013      	str	r3, [r2, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_Init+0x40>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_Init+0x40>)
 800462a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800462e:	6013      	str	r3, [r2, #0]
=======
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_Init+0x40>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_Init+0x40>)
 800462e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004632:	6013      	str	r3, [r2, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_Init+0x40>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a07      	ldr	r2, [pc, #28]	; (8004654 <HAL_Init+0x40>)
 8004636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463a:	6013      	str	r3, [r2, #0]
=======
 8004634:	4b08      	ldr	r3, [pc, #32]	; (8004658 <HAL_Init+0x40>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a07      	ldr	r2, [pc, #28]	; (8004658 <HAL_Init+0x40>)
 800463a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800463e:	6013      	str	r3, [r2, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 800463c:	2003      	movs	r0, #3
 800463e:	f000 fd41 	bl	80050c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004642:	2000      	movs	r0, #0
 8004644:	f000 f808 	bl	8004658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004648:	f7ff fb7e 	bl	8003d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00

08004658 <HAL_InitTick>:
=======
 8004640:	2003      	movs	r0, #3
 8004642:	f000 fd41 	bl	80050c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004646:	2000      	movs	r0, #0
 8004648:	f000 f808 	bl	800465c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800464c:	f7ff fb7e 	bl	8003d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40023c00 	.word	0x40023c00

0800465c <HAL_InitTick>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004660:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_InitTick+0x54>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_InitTick+0x58>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800466e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fd59 	bl	800512e <HAL_SYSTICK_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00e      	b.n	80046a4 <HAL_InitTick+0x4c>
=======
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004664:	4b12      	ldr	r3, [pc, #72]	; (80046b0 <HAL_InitTick+0x54>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	4b12      	ldr	r3, [pc, #72]	; (80046b4 <HAL_InitTick+0x58>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	4619      	mov	r1, r3
 800466e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004672:	fbb3 f3f1 	udiv	r3, r3, r1
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fd59 	bl	8005132 <HAL_SYSTICK_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e00e      	b.n	80046a8 <HAL_InitTick+0x4c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b0f      	cmp	r3, #15
 800468a:	d80a      	bhi.n	80046a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800468c:	2200      	movs	r2, #0
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f000 fd21 	bl	80050da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004698:	4a06      	ldr	r2, [pc, #24]	; (80046b4 <HAL_InitTick+0x5c>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6013      	str	r3, [r2, #0]
=======
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d80a      	bhi.n	80046a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004690:	2200      	movs	r2, #0
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f000 fd21 	bl	80050de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800469c:	4a06      	ldr	r2, [pc, #24]	; (80046b8 <HAL_InitTick+0x5c>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800469e:	2300      	movs	r3, #0
 80046a0:	e000      	b.n	80046a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000034 	.word	0x20000034
 80046b0:	2000003c 	.word	0x2000003c
 80046b4:	20000038 	.word	0x20000038

080046b8 <HAL_IncTick>:
=======
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000034 	.word	0x20000034
 80046b4:	2000003c 	.word	0x2000003c
 80046b8:	20000038 	.word	0x20000038

080046bc <HAL_IncTick>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <HAL_IncTick+0x20>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_IncTick+0x24>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	4a04      	ldr	r2, [pc, #16]	; (80046dc <HAL_IncTick+0x24>)
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	2000003c 	.word	0x2000003c
 80046dc:	200008b4 	.word	0x200008b4

080046e0 <HAL_GetTick>:
=======
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <HAL_IncTick+0x20>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_IncTick+0x24>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4413      	add	r3, r2
 80046cc:	4a04      	ldr	r2, [pc, #16]	; (80046e0 <HAL_IncTick+0x24>)
 80046ce:	6013      	str	r3, [r2, #0]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	2000003c 	.word	0x2000003c
 80046e0:	200008b4 	.word	0x200008b4

080046e4 <HAL_GetTick>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return uwTick;
 80046e4:	4b03      	ldr	r3, [pc, #12]	; (80046f4 <HAL_GetTick+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	200008b4 	.word	0x200008b4

080046f8 <HAL_Delay>:
=======
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return uwTick;
 80046e8:	4b03      	ldr	r3, [pc, #12]	; (80046f8 <HAL_GetTick+0x14>)
 80046ea:	681b      	ldr	r3, [r3, #0]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	200008b4 	.word	0x200008b4

080046fc <HAL_Delay>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004700:	f7ff ffee 	bl	80046e0 <HAL_GetTick>
 8004704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d005      	beq.n	800471e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_Delay+0x40>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800471e:	bf00      	nop
 8004720:	f7ff ffde 	bl	80046e0 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	429a      	cmp	r2, r3
 800472e:	d8f7      	bhi.n	8004720 <HAL_Delay+0x28>
  {
  }
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	2000003c 	.word	0x2000003c

0800473c <HAL_ADC_Init>:
=======
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff ffee 	bl	80046e4 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_Delay+0x40>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffde 	bl	80046e4 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000003c 	.word	0x2000003c

08004740 <HAL_ADC_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e033      	b.n	80047ba <HAL_ADC_Init+0x7e>
=======
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e033      	b.n	80047be <HAL_ADC_Init+0x7e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_ADC_Init+0x32>
=======
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	2b00      	cmp	r3, #0
 800475c:	d109      	bne.n	8004772 <HAL_ADC_Init+0x32>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fb1c 	bl	8003d98 <HAL_ADC_MspInit>
=======
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fb1c 	bl	8003d9c <HAL_ADC_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
<<<<<<< HEAD
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 0310 	and.w	r3, r3, #16
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004782:	f023 0302 	bic.w	r3, r3, #2
 8004786:	f043 0202 	orr.w	r2, r3, #2
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f003 0310 	and.w	r3, r3, #16
 800477a:	2b00      	cmp	r3, #0
 800477c:	d118      	bne.n	80047b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004786:	f023 0302 	bic.w	r3, r3, #2
 800478a:	f043 0202 	orr.w	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
<<<<<<< HEAD
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa4a 	bl	8004c28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f023 0303 	bic.w	r3, r3, #3
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
 80047aa:	e001      	b.n	80047b0 <HAL_ADC_Init+0x74>
=======
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa4a 	bl	8004c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f023 0303 	bic.w	r3, r3, #3
 80047a6:	f043 0201 	orr.w	r2, r3, #1
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40
 80047ae:	e001      	b.n	80047b4 <HAL_ADC_Init+0x74>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
<<<<<<< HEAD
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
=======
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_ADC_Start_DMA>:
=======
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_ADC_Start_DMA>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
<<<<<<< HEAD
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	613b      	str	r3, [r7, #16]
=======
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_Start_DMA+0x1e>
 80047de:	2302      	movs	r3, #2
 80047e0:	e0cc      	b.n	800497c <HAL_ADC_Start_DMA+0x1b8>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_ADC_Start_DMA+0x1e>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0cc      	b.n	8004980 <HAL_ADC_Start_DMA+0x1b8>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
<<<<<<< HEAD
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d018      	beq.n	800482a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	609a      	str	r2, [r3, #8]
=======
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d018      	beq.n	800482e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8004808:	4b5e      	ldr	r3, [pc, #376]	; (8004984 <HAL_ADC_Start_DMA+0x1c0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <HAL_ADC_Start_DMA+0x1c4>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0c9a      	lsrs	r2, r3, #18
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800481c:	e002      	b.n	8004824 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	3b01      	subs	r3, #1
 8004822:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f9      	bne.n	800481e <HAL_ADC_Start_DMA+0x5a>
=======
 800480c:	4b5e      	ldr	r3, [pc, #376]	; (8004988 <HAL_ADC_Start_DMA+0x1c0>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5e      	ldr	r2, [pc, #376]	; (800498c <HAL_ADC_Start_DMA+0x1c4>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0c9a      	lsrs	r2, r3, #18
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004820:	e002      	b.n	8004828 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	3b01      	subs	r3, #1
 8004826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f9      	bne.n	8004822 <HAL_ADC_Start_DMA+0x5a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
<<<<<<< HEAD
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b01      	cmp	r3, #1
 8004836:	f040 80a0 	bne.w	800497a <HAL_ADC_Start_DMA+0x1b6>
=======
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b01      	cmp	r3, #1
 800483a:	f040 80a0 	bne.w	800497e <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	641a      	str	r2, [r3, #64]	; 0x40
=======
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
<<<<<<< HEAD
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004864:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004868:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
<<<<<<< HEAD
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004878:	d106      	bne.n	8004888 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	f023 0206 	bic.w	r2, r3, #6
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
 8004886:	e002      	b.n	800488e <HAL_ADC_Start_DMA+0xca>
=======
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d106      	bne.n	800488c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f023 0206 	bic.w	r2, r3, #6
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
 800488a:	e002      	b.n	8004892 <HAL_ADC_Start_DMA+0xca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
<<<<<<< HEAD
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8004896:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_ADC_Start_DMA+0x1c8>)
 8004898:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <HAL_ADC_Start_DMA+0x1cc>)
 80048a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <HAL_ADC_Start_DMA+0x1d0>)
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	4a3a      	ldr	r2, [pc, #232]	; (8004998 <HAL_ADC_Start_DMA+0x1d4>)
 80048b0:	64da      	str	r2, [r3, #76]	; 0x4c
=======
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_ADC_Start_DMA+0x1c8>)
 800489c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <HAL_ADC_Start_DMA+0x1cc>)
 80048a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_ADC_Start_DMA+0x1d0>)
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	4a3a      	ldr	r2, [pc, #232]	; (800499c <HAL_ADC_Start_DMA+0x1d4>)
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
<<<<<<< HEAD
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	334c      	adds	r3, #76	; 0x4c
 80048e6:	4619      	mov	r1, r3
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f000 fcda 	bl	80052a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d12a      	bne.n	8004952 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a26      	ldr	r2, [pc, #152]	; (800499c <HAL_ADC_Start_DMA+0x1d8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d015      	beq.n	8004932 <HAL_ADC_Start_DMA+0x16e>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <HAL_ADC_Start_DMA+0x1dc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d105      	bne.n	800491c <HAL_ADC_Start_DMA+0x158>
 8004910:	4b1e      	ldr	r3, [pc, #120]	; (800498c <HAL_ADC_Start_DMA+0x1c8>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a20      	ldr	r2, [pc, #128]	; (80049a4 <HAL_ADC_Start_DMA+0x1e0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d129      	bne.n	800497a <HAL_ADC_Start_DMA+0x1b6>
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_ADC_Start_DMA+0x1c8>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	2b0f      	cmp	r3, #15
 8004930:	d823      	bhi.n	800497a <HAL_ADC_Start_DMA+0x1b6>
=======
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80048be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	334c      	adds	r3, #76	; 0x4c
 80048ea:	4619      	mov	r1, r3
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f000 fcda 	bl	80052a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 031f 	and.w	r3, r3, #31
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d12a      	bne.n	8004956 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <HAL_ADC_Start_DMA+0x1d8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d015      	beq.n	8004936 <HAL_ADC_Start_DMA+0x16e>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a25      	ldr	r2, [pc, #148]	; (80049a4 <HAL_ADC_Start_DMA+0x1dc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d105      	bne.n	8004920 <HAL_ADC_Start_DMA+0x158>
 8004914:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <HAL_ADC_Start_DMA+0x1c8>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <HAL_ADC_Start_DMA+0x1e0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d129      	bne.n	800497e <HAL_ADC_Start_DMA+0x1b6>
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_ADC_Start_DMA+0x1c8>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d823      	bhi.n	800497e <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
<<<<<<< HEAD
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11c      	bne.n	800497a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	e013      	b.n	800497a <HAL_ADC_Start_DMA+0x1b6>
=======
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11c      	bne.n	800497e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	e013      	b.n	800497e <HAL_ADC_Start_DMA+0x1b6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
<<<<<<< HEAD
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a11      	ldr	r2, [pc, #68]	; (800499c <HAL_ADC_Start_DMA+0x1d8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10e      	bne.n	800497a <HAL_ADC_Start_DMA+0x1b6>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d107      	bne.n	800497a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004978:	609a      	str	r2, [r3, #8]
=======
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <HAL_ADC_Start_DMA+0x1d8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d10e      	bne.n	800497e <HAL_ADC_Start_DMA+0x1b6>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d107      	bne.n	800497e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800497c:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000034 	.word	0x20000034
 8004988:	431bde83 	.word	0x431bde83
 800498c:	40012300 	.word	0x40012300
 8004990:	08004e21 	.word	0x08004e21
 8004994:	08004edb 	.word	0x08004edb
 8004998:	08004ef7 	.word	0x08004ef7
 800499c:	40012000 	.word	0x40012000
 80049a0:	40012100 	.word	0x40012100
 80049a4:	40012200 	.word	0x40012200

080049a8 <HAL_ADC_ConvCpltCallback>:
=======
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20000034 	.word	0x20000034
 800498c:	431bde83 	.word	0x431bde83
 8004990:	40012300 	.word	0x40012300
 8004994:	08004e25 	.word	0x08004e25
 8004998:	08004edf 	.word	0x08004edf
 800499c:	08004efb 	.word	0x08004efb
 80049a0:	40012000 	.word	0x40012000
 80049a4:	40012100 	.word	0x40012100
 80049a8:	40012200 	.word	0x40012200

080049ac <HAL_ADC_ConvCpltCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
=======
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_ADC_ConvHalfCpltCallback>:
=======
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_ADC_ConvHalfCpltCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
=======
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_ADC_ErrorCallback>:
=======
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_ADC_ErrorCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
<<<<<<< HEAD
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
=======
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_ADC_ConfigChannel>:
=======
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_ADC_ConfigChannel>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
<<<<<<< HEAD
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
=======
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x1c>
 80049fc:	2302      	movs	r3, #2
 80049fe:	e105      	b.n	8004c0c <HAL_ADC_ConfigChannel+0x228>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b09      	cmp	r3, #9
 8004a0e:	d925      	bls.n	8004a5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4613      	mov	r3, r2
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	4413      	add	r3, r2
 8004a24:	3b1e      	subs	r3, #30
 8004a26:	2207      	movs	r2, #7
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	400a      	ands	r2, r1
 8004a34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68d9      	ldr	r1, [r3, #12]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4618      	mov	r0, r3
 8004a48:	4603      	mov	r3, r0
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4403      	add	r3, r0
 8004a4e:	3b1e      	subs	r3, #30
 8004a50:	409a      	lsls	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	e022      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0xbe>
=======
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x1c>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e105      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x228>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d925      	bls.n	8004a60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68d9      	ldr	r1, [r3, #12]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	3b1e      	subs	r3, #30
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a30:	43da      	mvns	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	400a      	ands	r2, r1
 8004a38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68d9      	ldr	r1, [r3, #12]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	4403      	add	r3, r0
 8004a52:	3b1e      	subs	r3, #30
 8004a54:	409a      	lsls	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e022      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0xbe>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
<<<<<<< HEAD
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6919      	ldr	r1, [r3, #16]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	2207      	movs	r2, #7
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	43da      	mvns	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	400a      	ands	r2, r1
 8004a7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6919      	ldr	r1, [r3, #16]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4618      	mov	r0, r3
 8004a92:	4603      	mov	r3, r0
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4403      	add	r3, r0
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	611a      	str	r2, [r3, #16]
=======
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6919      	ldr	r1, [r3, #16]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4613      	mov	r3, r2
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	4413      	add	r3, r2
 8004a74:	2207      	movs	r2, #7
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	400a      	ands	r2, r1
 8004a82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6919      	ldr	r1, [r3, #16]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689a      	ldr	r2, [r3, #8]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4618      	mov	r0, r3
 8004a96:	4603      	mov	r3, r0
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	4403      	add	r3, r0
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b06      	cmp	r3, #6
 8004aa8:	d824      	bhi.n	8004af4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	3b05      	subs	r3, #5
 8004abc:	221f      	movs	r2, #31
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4618      	mov	r0, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	3b05      	subs	r3, #5
 8004ae6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34
 8004af2:	e04c      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	d824      	bhi.n	8004b46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3b23      	subs	r3, #35	; 0x23
 8004b0e:	221f      	movs	r2, #31
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43da      	mvns	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	3b23      	subs	r3, #35	; 0x23
 8004b38:	fa00 f203 	lsl.w	r2, r0, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
 8004b44:	e023      	b.n	8004b8e <HAL_ADC_ConfigChannel+0x1aa>
=======
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b06      	cmp	r3, #6
 8004aac:	d824      	bhi.n	8004af8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	3b05      	subs	r3, #5
 8004ac0:	221f      	movs	r2, #31
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	400a      	ands	r2, r1
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3b05      	subs	r3, #5
 8004aea:	fa00 f203 	lsl.w	r2, r0, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	635a      	str	r2, [r3, #52]	; 0x34
 8004af6:	e04c      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d824      	bhi.n	8004b4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	3b23      	subs	r3, #35	; 0x23
 8004b12:	221f      	movs	r2, #31
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	400a      	ands	r2, r1
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	4618      	mov	r0, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	4613      	mov	r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	3b23      	subs	r3, #35	; 0x23
 8004b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
 8004b48:	e023      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x1aa>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
<<<<<<< HEAD
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	3b41      	subs	r3, #65	; 0x41
 8004b58:	221f      	movs	r2, #31
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	400a      	ands	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b41      	subs	r3, #65	; 0x41
 8004b82:	fa00 f203 	lsl.w	r2, r0, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	3b41      	subs	r3, #65	; 0x41
 8004b5c:	221f      	movs	r2, #31
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	400a      	ands	r2, r1
 8004b6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	3b41      	subs	r3, #65	; 0x41
 8004b86:	fa00 f203 	lsl.w	r2, r0, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8004b8e:	4b22      	ldr	r3, [pc, #136]	; (8004c18 <HAL_ADC_ConfigChannel+0x234>)
 8004b90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a21      	ldr	r2, [pc, #132]	; (8004c1c <HAL_ADC_ConfigChannel+0x238>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d109      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x1cc>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b12      	cmp	r3, #18
 8004ba2:	d105      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x1cc>
=======
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_ADC_ConfigChannel+0x234>)
 8004b94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a21      	ldr	r2, [pc, #132]	; (8004c20 <HAL_ADC_ConfigChannel+0x238>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d109      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b12      	cmp	r3, #18
 8004ba6:	d105      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x1cc>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
<<<<<<< HEAD
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	605a      	str	r2, [r3, #4]
=======
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
<<<<<<< HEAD
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a19      	ldr	r2, [pc, #100]	; (8004c1c <HAL_ADC_ConfigChannel+0x238>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d123      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x21e>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b10      	cmp	r3, #16
 8004bc0:	d003      	beq.n	8004bca <HAL_ADC_ConfigChannel+0x1e6>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b11      	cmp	r3, #17
 8004bc8:	d11b      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x21e>
=======
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a19      	ldr	r2, [pc, #100]	; (8004c20 <HAL_ADC_ConfigChannel+0x238>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d123      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x21e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d003      	beq.n	8004bce <HAL_ADC_ConfigChannel+0x1e6>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b11      	cmp	r3, #17
 8004bcc:	d11b      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
<<<<<<< HEAD
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d111      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x21e>
=======
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b10      	cmp	r3, #16
 8004be0:	d111      	bne.n	8004c06 <HAL_ADC_ConfigChannel+0x21e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8004bde:	4b10      	ldr	r3, [pc, #64]	; (8004c20 <HAL_ADC_ConfigChannel+0x23c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <HAL_ADC_ConfigChannel+0x240>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	0c9a      	lsrs	r2, r3, #18
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bf4:	e002      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f9      	bne.n	8004bf6 <HAL_ADC_ConfigChannel+0x212>
=======
 8004be2:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <HAL_ADC_ConfigChannel+0x23c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a10      	ldr	r2, [pc, #64]	; (8004c28 <HAL_ADC_ConfigChannel+0x240>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	0c9a      	lsrs	r2, r3, #18
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bf8:	e002      	b.n	8004c00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f9      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x212>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40012300 	.word	0x40012300
 8004c1c:	40012000 	.word	0x40012000
 8004c20:	20000034 	.word	0x20000034
 8004c24:	431bde83 	.word	0x431bde83

08004c28 <ADC_Init>:
=======
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40012300 	.word	0x40012300
 8004c20:	40012000 	.word	0x40012000
 8004c24:	20000034 	.word	0x20000034
 8004c28:	431bde83 	.word	0x431bde83

08004c2c <ADC_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
=======
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
<<<<<<< HEAD
 8004c30:	4b79      	ldr	r3, [pc, #484]	; (8004e18 <ADC_Init+0x1f0>)
 8004c32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	609a      	str	r2, [r3, #8]
=======
 8004c34:	4b79      	ldr	r3, [pc, #484]	; (8004e1c <ADC_Init+0x1f0>)
 8004c36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6859      	ldr	r1, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	021a      	lsls	r2, r3, #8
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6899      	ldr	r1, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
<<<<<<< HEAD
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	4a58      	ldr	r2, [pc, #352]	; (8004e1c <ADC_Init+0x1f4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	e00f      	b.n	8004d26 <ADC_Init+0xfe>
=======
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	4a58      	ldr	r2, [pc, #352]	; (8004e20 <ADC_Init+0x1f4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d022      	beq.n	8004d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6899      	ldr	r1, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6899      	ldr	r1, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	e00f      	b.n	8004d2a <ADC_Init+0xfe>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
<<<<<<< HEAD
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d24:	609a      	str	r2, [r3, #8]
=======
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d28:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
<<<<<<< HEAD
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0202 	bic.w	r2, r2, #2
 8004d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6899      	ldr	r1, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	005a      	lsls	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <ADC_Init+0x164>
=======
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0202 	bic.w	r2, r2, #2
 8004d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6899      	ldr	r1, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
 8004d44:	005a      	lsls	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <ADC_Init+0x164>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
<<<<<<< HEAD
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6859      	ldr	r1, [r3, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	035a      	lsls	r2, r3, #13
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	e007      	b.n	8004d9c <ADC_Init+0x174>
=======
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6859      	ldr	r1, [r3, #4]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	3b01      	subs	r3, #1
 8004d84:	035a      	lsls	r2, r3, #13
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	e007      	b.n	8004da0 <ADC_Init+0x174>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
<<<<<<< HEAD
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9a:	605a      	str	r2, [r3, #4]
=======
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d9e:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
<<<<<<< HEAD
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	051a      	lsls	r2, r3, #20
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004dde:	025a      	lsls	r2, r3, #9
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	029a      	lsls	r2, r3, #10
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	40012300 	.word	0x40012300
 8004e1c:	0f000001 	.word	0x0f000001

08004e20 <ADC_DMAConvCplt>:
=======
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	051a      	lsls	r2, r3, #20
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6899      	ldr	r1, [r3, #8]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004de2:	025a      	lsls	r2, r3, #9
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6899      	ldr	r1, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	029a      	lsls	r2, r3, #10
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
}
 8004e10:	bf00      	nop
 8004e12:	3714      	adds	r7, #20
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40012300 	.word	0x40012300
 8004e20:	0f000001 	.word	0x0f000001

08004e24 <ADC_DMAConvCplt>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d13c      	bne.n	8004eb4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d13c      	bne.n	8004eb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
<<<<<<< HEAD
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d12b      	bne.n	8004eac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d127      	bne.n	8004eac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d006      	beq.n	8004e78 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d119      	bne.n	8004eac <ADC_DMAConvCplt+0x8c>
=======
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d12b      	bne.n	8004eb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d127      	bne.n	8004eb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d119      	bne.n	8004eb0 <ADC_DMAConvCplt+0x8c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
<<<<<<< HEAD
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0220 	bic.w	r2, r2, #32
 8004e86:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	f043 0201 	orr.w	r2, r3, #1
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
=======
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0220 	bic.w	r2, r2, #32
 8004e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
<<<<<<< HEAD
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff fd7b 	bl	80049a8 <HAL_ADC_ConvCpltCallback>
=======
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff fd7b 	bl	80049ac <HAL_ADC_ConvCpltCallback>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
<<<<<<< HEAD
 8004eb2:	e00e      	b.n	8004ed2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f003 0310 	and.w	r3, r3, #16
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff fd85 	bl	80049d0 <HAL_ADC_ErrorCallback>
}
 8004ec6:	e004      	b.n	8004ed2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <ADC_DMAHalfConvCplt>:
=======
 8004eb6:	e00e      	b.n	8004ed6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff fd85 	bl	80049d4 <HAL_ADC_ErrorCallback>
}
 8004eca:	e004      	b.n	8004ed6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ADC_DMAHalfConvCplt>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	60fb      	str	r3, [r7, #12]
=======
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	60fb      	str	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
<<<<<<< HEAD
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff fd67 	bl	80049bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <ADC_DMAError>:
=======
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fd67 	bl	80049c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <ADC_DMAError>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
<<<<<<< HEAD
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f043 0204 	orr.w	r2, r3, #4
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f043 0204 	orr.w	r2, r3, #4
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
<<<<<<< HEAD
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fd5a 	bl	80049d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <__NVIC_SetPriorityGrouping>:
=======
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff fd5a 	bl	80049d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <__NVIC_SetPriorityGrouping>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f40:	4013      	ands	r3, r2
 8004f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f56:	4a04      	ldr	r2, [pc, #16]	; (8004f68 <__NVIC_SetPriorityGrouping+0x44>)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	60d3      	str	r3, [r2, #12]
}
 8004f5c:	bf00      	nop
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <__NVIC_GetPriorityGrouping>:
=======
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f44:	4013      	ands	r3, r2
 8004f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f5a:	4a04      	ldr	r2, [pc, #16]	; (8004f6c <__NVIC_SetPriorityGrouping+0x44>)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	60d3      	str	r3, [r2, #12]
}
 8004f60:	bf00      	nop
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_GetPriorityGrouping>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f70:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <__NVIC_GetPriorityGrouping+0x18>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	0a1b      	lsrs	r3, r3, #8
 8004f76:	f003 0307 	and.w	r3, r3, #7
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	e000ed00 	.word	0xe000ed00

08004f88 <__NVIC_EnableIRQ>:
=======
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <__NVIC_GetPriorityGrouping+0x18>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	f003 0307 	and.w	r3, r3, #7
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_EnableIRQ>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	db0b      	blt.n	8004fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9a:	79fb      	ldrb	r3, [r7, #7]
 8004f9c:	f003 021f 	and.w	r2, r3, #31
 8004fa0:	4907      	ldr	r1, [pc, #28]	; (8004fc0 <__NVIC_EnableIRQ+0x38>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	2001      	movs	r0, #1
 8004faa:	fa00 f202 	lsl.w	r2, r0, r2
 8004fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	e000e100 	.word	0xe000e100

08004fc4 <__NVIC_SetPriority>:
=======
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4603      	mov	r3, r0
 8004f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	db0b      	blt.n	8004fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	f003 021f 	and.w	r2, r3, #31
 8004fa4:	4907      	ldr	r1, [pc, #28]	; (8004fc4 <__NVIC_EnableIRQ+0x38>)
 8004fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	2001      	movs	r0, #1
 8004fae:	fa00 f202 	lsl.w	r2, r0, r2
 8004fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	e000e100 	.word	0xe000e100

08004fc8 <__NVIC_SetPriority>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	6039      	str	r1, [r7, #0]
 8004fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	db0a      	blt.n	8004fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	b2da      	uxtb	r2, r3
 8004fdc:	490c      	ldr	r1, [pc, #48]	; (8005010 <__NVIC_SetPriority+0x4c>)
 8004fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db0a      	blt.n	8004ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	490c      	ldr	r1, [pc, #48]	; (8005014 <__NVIC_SetPriority+0x4c>)
 8004fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe6:	0112      	lsls	r2, r2, #4
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	440b      	add	r3, r1
 8004fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8004fec:	e00a      	b.n	8005004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	4908      	ldr	r1, [pc, #32]	; (8005014 <__NVIC_SetPriority+0x50>)
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	0112      	lsls	r2, r2, #4
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	440b      	add	r3, r1
 8005002:	761a      	strb	r2, [r3, #24]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	e000e100 	.word	0xe000e100
 8005014:	e000ed00 	.word	0xe000ed00

08005018 <NVIC_EncodePriority>:
=======
 8004ff0:	e00a      	b.n	8005008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	4908      	ldr	r1, [pc, #32]	; (8005018 <__NVIC_SetPriority+0x50>)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	f003 030f 	and.w	r3, r3, #15
 8004ffe:	3b04      	subs	r3, #4
 8005000:	0112      	lsls	r2, r2, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	440b      	add	r3, r1
 8005006:	761a      	strb	r2, [r3, #24]
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e100 	.word	0xe000e100
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <NVIC_EncodePriority>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	61fb      	str	r3, [r7, #28]
=======
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	61fb      	str	r3, [r7, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f1c3 0307 	rsb	r3, r3, #7
 8005032:	2b04      	cmp	r3, #4
 8005034:	bf28      	it	cs
 8005036:	2304      	movcs	r3, #4
 8005038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	3304      	adds	r3, #4
 800503e:	2b06      	cmp	r3, #6
 8005040:	d902      	bls.n	8005048 <NVIC_EncodePriority+0x30>
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	3b03      	subs	r3, #3
 8005046:	e000      	b.n	800504a <NVIC_EncodePriority+0x32>
 8005048:	2300      	movs	r3, #0
 800504a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800504c:	f04f 32ff 	mov.w	r2, #4294967295
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	401a      	ands	r2, r3
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005060:	f04f 31ff 	mov.w	r1, #4294967295
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	43d9      	mvns	r1, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005070:	4313      	orrs	r3, r2
         );
}
 8005072:	4618      	mov	r0, r3
 8005074:	3724      	adds	r7, #36	; 0x24
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <SysTick_Config>:
=======
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0307 	rsb	r3, r3, #7
 8005036:	2b04      	cmp	r3, #4
 8005038:	bf28      	it	cs
 800503a:	2304      	movcs	r3, #4
 800503c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3304      	adds	r3, #4
 8005042:	2b06      	cmp	r3, #6
 8005044:	d902      	bls.n	800504c <NVIC_EncodePriority+0x30>
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3b03      	subs	r3, #3
 800504a:	e000      	b.n	800504e <NVIC_EncodePriority+0x32>
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	401a      	ands	r2, r3
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005064:	f04f 31ff 	mov.w	r1, #4294967295
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	fa01 f303 	lsl.w	r3, r1, r3
 800506e:	43d9      	mvns	r1, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005074:	4313      	orrs	r3, r2
         );
}
 8005076:	4618      	mov	r0, r3
 8005078:	3724      	adds	r7, #36	; 0x24
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
	...

08005084 <SysTick_Config>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3b01      	subs	r3, #1
 800508c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005090:	d301      	bcc.n	8005096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005092:	2301      	movs	r3, #1
 8005094:	e00f      	b.n	80050b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005096:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <SysTick_Config+0x40>)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3b01      	subs	r3, #1
 800509c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800509e:	210f      	movs	r1, #15
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	f7ff ff8e 	bl	8004fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <SysTick_Config+0x40>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <SysTick_Config+0x40>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010

080050c4 <HAL_NVIC_SetPriorityGrouping>:
=======
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005094:	d301      	bcc.n	800509a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005096:	2301      	movs	r3, #1
 8005098:	e00f      	b.n	80050ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <SysTick_Config+0x40>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050a2:	210f      	movs	r1, #15
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	f7ff ff8e 	bl	8004fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <SysTick_Config+0x40>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050b2:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <SysTick_Config+0x40>)
 80050b4:	2207      	movs	r2, #7
 80050b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	e000e010 	.word	0xe000e010

080050c8 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
=======
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ff29 	bl	8004f24 <__NVIC_SetPriorityGrouping>
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_NVIC_SetPriority>:
=======
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff29 	bl	8004f28 <__NVIC_SetPriorityGrouping>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_NVIC_SetPriority>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	4603      	mov	r3, r0
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	617b      	str	r3, [r7, #20]
=======
 80050de:	b580      	push	{r7, lr}
 80050e0:	b086      	sub	sp, #24
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	4603      	mov	r3, r0
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
 80050ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80050ec:	f7ff ff3e 	bl	8004f6c <__NVIC_GetPriorityGrouping>
 80050f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	6978      	ldr	r0, [r7, #20]
 80050f8:	f7ff ff8e 	bl	8005018 <NVIC_EncodePriority>
 80050fc:	4602      	mov	r2, r0
 80050fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff5d 	bl	8004fc4 <__NVIC_SetPriority>
}
 800510a:	bf00      	nop
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_NVIC_EnableIRQ>:
=======
 80050f0:	f7ff ff3e 	bl	8004f70 <__NVIC_GetPriorityGrouping>
 80050f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff ff8e 	bl	800501c <NVIC_EncodePriority>
 8005100:	4602      	mov	r2, r0
 8005102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff5d 	bl	8004fc8 <__NVIC_SetPriority>
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_NVIC_EnableIRQ>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8005112:	b580      	push	{r7, lr}
 8005114:	b082      	sub	sp, #8
 8005116:	af00      	add	r7, sp, #0
 8005118:	4603      	mov	r3, r0
 800511a:	71fb      	strb	r3, [r7, #7]
=======
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	71fb      	strb	r3, [r7, #7]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800511c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff ff31 	bl	8004f88 <__NVIC_EnableIRQ>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_SYSTICK_Config>:
=======
 8005120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff31 	bl	8004f8c <__NVIC_EnableIRQ>
}
 800512a:	bf00      	nop
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_SYSTICK_Config>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7ff ffa2 	bl	8005080 <SysTick_Config>
 800513c:	4603      	mov	r3, r0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_DMA_Init>:
=======
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff ffa2 	bl	8005084 <SysTick_Config>
 8005140:	4603      	mov	r3, r0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <HAL_DMA_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005154:	f7ff fac4 	bl	80046e0 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]
=======
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005158:	f7ff fac4 	bl	80046e4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e099      	b.n	8005298 <HAL_DMA_Init+0x150>
=======
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e099      	b.n	800529c <HAL_DMA_Init+0x150>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005184:	e00f      	b.n	80051a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005186:	f7ff faab 	bl	80046e0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b05      	cmp	r3, #5
 8005192:	d908      	bls.n	80051a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e078      	b.n	8005298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e8      	bne.n	8005186 <HAL_DMA_Init+0x3e>
=======
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005188:	e00f      	b.n	80051aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800518a:	f7ff faab 	bl	80046e4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b05      	cmp	r3, #5
 8005196:	d908      	bls.n	80051aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2203      	movs	r2, #3
 80051a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e078      	b.n	800529c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e8      	bne.n	800518a <HAL_DMA_Init+0x3e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4b38      	ldr	r3, [pc, #224]	; (80052a0 <HAL_DMA_Init+0x158>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
=======
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_DMA_Init+0x158>)
 80051c4:	4013      	ands	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d107      	bne.n	8005210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005208:	4313      	orrs	r3, r2
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
=======
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	2b04      	cmp	r3, #4
 8005202:	d107      	bne.n	8005214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	4313      	orrs	r3, r2
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0307 	bic.w	r3, r3, #7
 8005226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	2b04      	cmp	r3, #4
 8005238:	d117      	bne.n	800526a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]
=======
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0307 	bic.w	r3, r3, #7
 800522a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b04      	cmp	r3, #4
 800523c:	d117      	bne.n	800526e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00e      	beq.n	800526a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa6f 	bl	8005730 <DMA_CheckFifoParam>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2240      	movs	r2, #64	; 0x40
 800525c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005266:	2301      	movs	r3, #1
 8005268:	e016      	b.n	8005298 <HAL_DMA_Init+0x150>
=======
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00e      	beq.n	800526e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa6f 	bl	8005734 <DMA_CheckFifoParam>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d008      	beq.n	800526e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800526a:	2301      	movs	r3, #1
 800526c:	e016      	b.n	800529c <HAL_DMA_Init+0x150>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	615a      	str	r2, [r3, #20]
=======
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	615a      	str	r2, [r3, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa26 	bl	80056c4 <DMA_CalcBaseAndBitshift>
 8005278:	4603      	mov	r3, r0
 800527a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005280:	223f      	movs	r2, #63	; 0x3f
 8005282:	409a      	lsls	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	f010803f 	.word	0xf010803f

080052a4 <HAL_DMA_Start_IT>:
=======
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fa26 	bl	80056c8 <DMA_CalcBaseAndBitshift>
 800527c:	4603      	mov	r3, r0
 800527e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	223f      	movs	r2, #63	; 0x3f
 8005286:	409a      	lsls	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	f010803f 	.word	0xf010803f

080052a8 <HAL_DMA_Start_IT>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ba:	613b      	str	r3, [r7, #16]
=======
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_DMA_Start_IT+0x26>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e040      	b.n	800534c <HAL_DMA_Start_IT+0xa8>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d12f      	bne.n	800533e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2202      	movs	r2, #2
 80052e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f9b8 	bl	8005668 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	223f      	movs	r2, #63	; 0x3f
 80052fe:	409a      	lsls	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0216 	orr.w	r2, r2, #22
 8005312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	601a      	str	r2, [r3, #0]
=======
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d101      	bne.n	80052ce <HAL_DMA_Start_IT+0x26>
 80052ca:	2302      	movs	r3, #2
 80052cc:	e040      	b.n	8005350 <HAL_DMA_Start_IT+0xa8>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d12f      	bne.n	8005342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f9b8 	bl	800566c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	223f      	movs	r2, #63	; 0x3f
 8005302:	409a      	lsls	r2, r3
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0216 	orr.w	r2, r2, #22
 8005316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0208 	orr.w	r2, r2, #8
 800532e:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0201 	orr.w	r2, r2, #1
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e005      	b.n	800534a <HAL_DMA_Start_IT+0xa6>
=======
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0201 	orr.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e005      	b.n	800534e <HAL_DMA_Start_IT+0xa6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005346:	2302      	movs	r3, #2
 8005348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800534a:	7dfb      	ldrb	r3, [r7, #23]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_DMA_IRQHandler>:
=======
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_DMA_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005360:	4b92      	ldr	r3, [pc, #584]	; (80055ac <HAL_DMA_IRQHandler+0x258>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a92      	ldr	r2, [pc, #584]	; (80055b0 <HAL_DMA_IRQHandler+0x25c>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	0a9b      	lsrs	r3, r3, #10
 800536c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005372:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	2208      	movs	r2, #8
 8005380:	409a      	lsls	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4013      	ands	r3, r2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01a      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d013      	beq.n	80053c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0204 	bic.w	r2, r2, #4
 80053a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	2208      	movs	r2, #8
 80053ae:	409a      	lsls	r2, r3
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005364:	4b92      	ldr	r3, [pc, #584]	; (80055b0 <HAL_DMA_IRQHandler+0x258>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a92      	ldr	r2, [pc, #584]	; (80055b4 <HAL_DMA_IRQHandler+0x25c>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0a9b      	lsrs	r3, r3, #10
 8005370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005382:	2208      	movs	r2, #8
 8005384:	409a      	lsls	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d01a      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f022 0204 	bic.w	r2, r2, #4
 80053aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	2208      	movs	r2, #8
 80053b2:	409a      	lsls	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053bc:	f043 0201 	orr.w	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c4:	2201      	movs	r2, #1
 80053c6:	409a      	lsls	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d012      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	2201      	movs	r2, #1
 80053e4:	409a      	lsls	r2, r3
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f043 0202 	orr.w	r2, r3, #2
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c8:	2201      	movs	r2, #1
 80053ca:	409a      	lsls	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4013      	ands	r3, r2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d012      	beq.n	80053fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e6:	2201      	movs	r2, #1
 80053e8:	409a      	lsls	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f043 0202 	orr.w	r2, r3, #2
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fa:	2204      	movs	r2, #4
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00b      	beq.n	800542c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005418:	2204      	movs	r2, #4
 800541a:	409a      	lsls	r2, r3
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	f043 0204 	orr.w	r2, r3, #4
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053fe:	2204      	movs	r2, #4
 8005400:	409a      	lsls	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d012      	beq.n	8005430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800541c:	2204      	movs	r2, #4
 800541e:	409a      	lsls	r2, r3
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	f043 0204 	orr.w	r2, r3, #4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005430:	2210      	movs	r2, #16
 8005432:	409a      	lsls	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d043      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03c      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544e:	2210      	movs	r2, #16
 8005450:	409a      	lsls	r2, r3
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d018      	beq.n	8005496 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d108      	bne.n	8005484 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d024      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
 8005482:	e01f      	b.n	80054c4 <HAL_DMA_IRQHandler+0x170>
=======
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	2210      	movs	r2, #16
 8005436:	409a      	lsls	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d043      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03c      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005452:	2210      	movs	r2, #16
 8005454:	409a      	lsls	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d018      	beq.n	800549a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d108      	bne.n	8005488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d024      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
 8005486:	e01f      	b.n	80054c8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	4798      	blx	r3
 8005494:	e016      	b.n	80054c4 <HAL_DMA_IRQHandler+0x170>
=======
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	4798      	blx	r3
 8005498:	e016      	b.n	80054c8 <HAL_DMA_IRQHandler+0x170>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0208 	bic.w	r2, r2, #8
 80054b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
=======
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d107      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0208 	bic.w	r2, r2, #8
 80054b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	2220      	movs	r2, #32
 80054ca:	409a      	lsls	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f000 808e 	beq.w	80055f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	2220      	movs	r2, #32
 80054ec:	409a      	lsls	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d136      	bne.n	800556c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0216 	bic.w	r2, r2, #22
 800550c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800551c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <HAL_DMA_IRQHandler+0x1da>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0208 	bic.w	r2, r2, #8
 800553c:	601a      	str	r2, [r3, #0]
=======
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054cc:	2220      	movs	r2, #32
 80054ce:	409a      	lsls	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4013      	ands	r3, r2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 808e 	beq.w	80055f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8086 	beq.w	80055f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ee:	2220      	movs	r2, #32
 80054f0:	409a      	lsls	r2, r3
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d136      	bne.n	8005570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0216 	bic.w	r2, r2, #22
 8005510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_DMA_IRQHandler+0x1da>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552e:	2b00      	cmp	r3, #0
 8005530:	d007      	beq.n	8005542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0208 	bic.w	r2, r2, #8
 8005540:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	223f      	movs	r2, #63	; 0x3f
 8005544:	409a      	lsls	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800555e:	2b00      	cmp	r3, #0
 8005560:	d07d      	beq.n	800565e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4798      	blx	r3
        }
        return;
 800556a:	e078      	b.n	800565e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d01c      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d108      	bne.n	800559a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558c:	2b00      	cmp	r3, #0
 800558e:	d030      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
 8005598:	e02b      	b.n	80055f2 <HAL_DMA_IRQHandler+0x29e>
=======
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	223f      	movs	r2, #63	; 0x3f
 8005548:	409a      	lsls	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	2b00      	cmp	r3, #0
 8005564:	d07d      	beq.n	8005662 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	4798      	blx	r3
        }
        return;
 800556e:	e078      	b.n	8005662 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d01c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d108      	bne.n	800559e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005590:	2b00      	cmp	r3, #0
 8005592:	d030      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
 800559c:	e02b      	b.n	80055f6 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d027      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
 80055aa:	e022      	b.n	80055f2 <HAL_DMA_IRQHandler+0x29e>
 80055ac:	20000034 	.word	0x20000034
 80055b0:	1b4e81b5 	.word	0x1b4e81b5
=======
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d027      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	4798      	blx	r3
 80055ae:	e022      	b.n	80055f6 <HAL_DMA_IRQHandler+0x29e>
 80055b0:	20000034 	.word	0x20000034
 80055b4:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10f      	bne.n	80055e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0210 	bic.w	r2, r2, #16
 80055d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
=======
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10f      	bne.n	80055e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0210 	bic.w	r2, r2, #16
 80055d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d032      	beq.n	8005660 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d022      	beq.n	800564c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2205      	movs	r2, #5
 800560a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]
=======
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d032      	beq.n	8005664 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d022      	beq.n	8005650 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2205      	movs	r2, #5
 800560e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	3301      	adds	r3, #1
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	429a      	cmp	r2, r3
 8005628:	d307      	bcc.n	800563a <HAL_DMA_IRQHandler+0x2e6>
=======
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3301      	adds	r3, #1
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	429a      	cmp	r2, r3
 800562c:	d307      	bcc.n	800563e <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f2      	bne.n	800561e <HAL_DMA_IRQHandler+0x2ca>
 8005638:	e000      	b.n	800563c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800563a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
 800565c:	e000      	b.n	8005660 <HAL_DMA_IRQHandler+0x30c>
        return;
 800565e:	bf00      	nop
    }
  }
}
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop

08005668 <DMA_SetConfig>:
=======
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f2      	bne.n	8005622 <HAL_DMA_IRQHandler+0x2ca>
 800563c:	e000      	b.n	8005640 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800563e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	4798      	blx	r3
 8005660:	e000      	b.n	8005664 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005662:	bf00      	nop
    }
  }
}
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop

0800566c <DMA_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005684:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b40      	cmp	r3, #64	; 0x40
 8005694:	d108      	bne.n	80056a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	60da      	str	r2, [r3, #12]
=======
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d108      	bne.n	80056ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	60da      	str	r2, [r3, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 80056a6:	e007      	b.n	80056b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	60da      	str	r2, [r3, #12]
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <DMA_CalcBaseAndBitshift>:
=======
 80056aa:	e007      	b.n	80056bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	60da      	str	r2, [r3, #12]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <DMA_CalcBaseAndBitshift>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	3b10      	subs	r3, #16
 80056d4:	4a14      	ldr	r2, [pc, #80]	; (8005728 <DMA_CalcBaseAndBitshift+0x64>)
 80056d6:	fba2 2303 	umull	r2, r3, r2, r3
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	60fb      	str	r3, [r7, #12]
=======
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	3b10      	subs	r3, #16
 80056d8:	4a14      	ldr	r2, [pc, #80]	; (800572c <DMA_CalcBaseAndBitshift+0x64>)
 80056da:	fba2 2303 	umull	r2, r3, r2, r3
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	60fb      	str	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 80056de:	4a13      	ldr	r2, [pc, #76]	; (800572c <DMA_CalcBaseAndBitshift+0x68>)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d909      	bls.n	8005706 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056fa:	f023 0303 	bic.w	r3, r3, #3
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	659a      	str	r2, [r3, #88]	; 0x58
 8005704:	e007      	b.n	8005716 <DMA_CalcBaseAndBitshift+0x52>
=======
 80056e2:	4a13      	ldr	r2, [pc, #76]	; (8005730 <DMA_CalcBaseAndBitshift+0x68>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d909      	bls.n	800570a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	1d1a      	adds	r2, r3, #4
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	659a      	str	r2, [r3, #88]	; 0x58
 8005708:	e007      	b.n	800571a <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	aaaaaaab 	.word	0xaaaaaaab
 800572c:	0800c188 	.word	0x0800c188

08005730 <DMA_CheckFifoParam>:
=======
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	aaaaaaab 	.word	0xaaaaaaab
 8005730:	0800c188 	.word	0x0800c188

08005734 <DMA_CheckFifoParam>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005740:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d11f      	bne.n	800578a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d855      	bhi.n	80057fc <DMA_CheckFifoParam+0xcc>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <DMA_CheckFifoParam+0x28>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005769 	.word	0x08005769
 800575c:	0800577b 	.word	0x0800577b
 8005760:	08005769 	.word	0x08005769
 8005764:	080057fd 	.word	0x080057fd
=======
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d11f      	bne.n	800578e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d855      	bhi.n	8005800 <DMA_CheckFifoParam+0xcc>
 8005754:	a201      	add	r2, pc, #4	; (adr r2, 800575c <DMA_CheckFifoParam+0x28>)
 8005756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575a:	bf00      	nop
 800575c:	0800576d 	.word	0x0800576d
 8005760:	0800577f 	.word	0x0800577f
 8005764:	0800576d 	.word	0x0800576d
 8005768:	08005801 	.word	0x08005801
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d045      	beq.n	8005800 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005778:	e042      	b.n	8005800 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005782:	d13f      	bne.n	8005804 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005788:	e03c      	b.n	8005804 <DMA_CheckFifoParam+0xd4>
=======
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d045      	beq.n	8005804 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800577c:	e042      	b.n	8005804 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005786:	d13f      	bne.n	8005808 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800578c:	e03c      	b.n	8005808 <DMA_CheckFifoParam+0xd4>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005792:	d121      	bne.n	80057d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b03      	cmp	r3, #3
 8005798:	d836      	bhi.n	8005808 <DMA_CheckFifoParam+0xd8>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <DMA_CheckFifoParam+0x70>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057b7 	.word	0x080057b7
 80057a8:	080057b1 	.word	0x080057b1
 80057ac:	080057c9 	.word	0x080057c9
=======
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005796:	d121      	bne.n	80057dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d836      	bhi.n	800580c <DMA_CheckFifoParam+0xd8>
 800579e:	a201      	add	r2, pc, #4	; (adr r2, 80057a4 <DMA_CheckFifoParam+0x70>)
 80057a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057bb 	.word	0x080057bb
 80057ac:	080057b5 	.word	0x080057b5
 80057b0:	080057cd 	.word	0x080057cd
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 80057b0:	2301      	movs	r3, #1
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e02f      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d024      	beq.n	800580c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057c6:	e021      	b.n	800580c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d0:	d11e      	bne.n	8005810 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057d6:	e01b      	b.n	8005810 <DMA_CheckFifoParam+0xe0>
=======
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
      break;
 80057b8:	e02f      	b.n	800581a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d024      	beq.n	8005810 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ca:	e021      	b.n	8005810 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057d4:	d11e      	bne.n	8005814 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057da:	e01b      	b.n	8005814 <DMA_CheckFifoParam+0xe0>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d902      	bls.n	80057e4 <DMA_CheckFifoParam+0xb4>
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d003      	beq.n	80057ea <DMA_CheckFifoParam+0xba>
=======
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <DMA_CheckFifoParam+0xb4>
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d003      	beq.n	80057ee <DMA_CheckFifoParam+0xba>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 80057e2:	e018      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
      break;
 80057e8:	e015      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
      break;
 80057fa:	e00b      	b.n	8005814 <DMA_CheckFifoParam+0xe4>
      break;
 80057fc:	bf00      	nop
 80057fe:	e00a      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 8005800:	bf00      	nop
 8005802:	e008      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 8005804:	bf00      	nop
 8005806:	e006      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 8005808:	bf00      	nop
 800580a:	e004      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;   
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <DMA_CheckFifoParam+0xe6>
      break;
 8005814:	bf00      	nop
=======
 80057e6:	e018      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e015      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	73fb      	strb	r3, [r7, #15]
      break;
 80057fe:	e00b      	b.n	8005818 <DMA_CheckFifoParam+0xe4>
      break;
 8005800:	bf00      	nop
 8005802:	e00a      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;
 8005804:	bf00      	nop
 8005806:	e008      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;
 8005808:	bf00      	nop
 800580a:	e006      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;
 800580c:	bf00      	nop
 800580e:	e004      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;
 8005810:	bf00      	nop
 8005812:	e002      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;   
 8005814:	bf00      	nop
 8005816:	e000      	b.n	800581a <DMA_CheckFifoParam+0xe6>
      break;
 8005818:	bf00      	nop
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  } 
  
  return status; 
<<<<<<< HEAD
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <HAL_GPIO_Init>:
=======
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_GPIO_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8005824:	b480      	push	{r7}
 8005826:	b089      	sub	sp, #36	; 0x24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	61bb      	str	r3, [r7, #24]
=======
 8005828:	b480      	push	{r7}
 800582a:	b089      	sub	sp, #36	; 0x24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	e16b      	b.n	8005b18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005840:	2201      	movs	r2, #1
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4013      	ands	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	429a      	cmp	r2, r3
 800585a:	f040 815a 	bne.w	8005b12 <HAL_GPIO_Init+0x2ee>
=======
 800583e:	2300      	movs	r3, #0
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	e16b      	b.n	8005b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005844:	2201      	movs	r2, #1
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	429a      	cmp	r2, r3
 800585e:	f040 815a 	bne.w	8005b16 <HAL_GPIO_Init+0x2ee>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d00b      	beq.n	800587e <HAL_GPIO_Init+0x5a>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b02      	cmp	r3, #2
 800586c:	d007      	beq.n	800587e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005872:	2b11      	cmp	r3, #17
 8005874:	d003      	beq.n	800587e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b12      	cmp	r3, #18
 800587c:	d130      	bne.n	80058e0 <HAL_GPIO_Init+0xbc>
=======
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d00b      	beq.n	8005882 <HAL_GPIO_Init+0x5a>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d007      	beq.n	8005882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005876:	2b11      	cmp	r3, #17
 8005878:	d003      	beq.n	8005882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b12      	cmp	r3, #18
 8005880:	d130      	bne.n	80058e4 <HAL_GPIO_Init+0xbc>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	005b      	lsls	r3, r3, #1
 8005888:	2203      	movs	r2, #3
 800588a:	fa02 f303 	lsl.w	r3, r2, r3
 800588e:	43db      	mvns	r3, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	4013      	ands	r3, r2
 8005894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058b4:	2201      	movs	r2, #1
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	43db      	mvns	r3, r3
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	091b      	lsrs	r3, r3, #4
 80058ca:	f003 0201 	and.w	r2, r3, #1
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	fa02 f303 	lsl.w	r3, r2, r3
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	605a      	str	r2, [r3, #4]
=======
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	2203      	movs	r2, #3
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4013      	ands	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058b8:	2201      	movs	r2, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	f003 0201 	and.w	r2, r3, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	005b      	lsls	r3, r3, #1
 80058ea:	2203      	movs	r2, #3
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d003      	beq.n	8005920 <HAL_GPIO_Init+0xfc>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b12      	cmp	r3, #18
 800591e:	d123      	bne.n	8005968 <HAL_GPIO_Init+0x144>
=======
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	2203      	movs	r2, #3
 80058f0:	fa02 f303 	lsl.w	r3, r2, r3
 80058f4:	43db      	mvns	r3, r3
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4013      	ands	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4313      	orrs	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d003      	beq.n	8005924 <HAL_GPIO_Init+0xfc>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b12      	cmp	r3, #18
 8005922:	d123      	bne.n	800596c <HAL_GPIO_Init+0x144>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	08da      	lsrs	r2, r3, #3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3208      	adds	r2, #8
 8005928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	220f      	movs	r2, #15
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4013      	ands	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4313      	orrs	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	08da      	lsrs	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3208      	adds	r2, #8
 8005962:	69b9      	ldr	r1, [r7, #24]
 8005964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	08da      	lsrs	r2, r3, #3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3208      	adds	r2, #8
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	220f      	movs	r2, #15
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	43db      	mvns	r3, r3
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	4013      	ands	r3, r2
 8005946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	08da      	lsrs	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3208      	adds	r2, #8
 8005966:	69b9      	ldr	r1, [r7, #24]
 8005968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	2203      	movs	r2, #3
 8005974:	fa02 f303 	lsl.w	r3, r2, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	69ba      	ldr	r2, [r7, #24]
 800597c:	4013      	ands	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 0203 	and.w	r2, r3, #3
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	fa02 f303 	lsl.w	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	601a      	str	r2, [r3, #0]
=======
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	4013      	ands	r3, r2
 8005982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	4313      	orrs	r3, r2
 8005998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 80b4 	beq.w	8005b12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_GPIO_Init+0x308>)
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	4a5e      	ldr	r2, [pc, #376]	; (8005b2c <HAL_GPIO_Init+0x308>)
 80059b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b8:	6453      	str	r3, [r2, #68]	; 0x44
 80059ba:	4b5c      	ldr	r3, [pc, #368]	; (8005b2c <HAL_GPIO_Init+0x308>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c2:	60fb      	str	r3, [r7, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059c6:	4a5a      	ldr	r2, [pc, #360]	; (8005b30 <HAL_GPIO_Init+0x30c>)
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	3302      	adds	r3, #2
 80059ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	220f      	movs	r2, #15
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43db      	mvns	r3, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4013      	ands	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a51      	ldr	r2, [pc, #324]	; (8005b34 <HAL_GPIO_Init+0x310>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <HAL_GPIO_Init+0x226>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a50      	ldr	r2, [pc, #320]	; (8005b38 <HAL_GPIO_Init+0x314>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d025      	beq.n	8005a46 <HAL_GPIO_Init+0x222>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a4f      	ldr	r2, [pc, #316]	; (8005b3c <HAL_GPIO_Init+0x318>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01f      	beq.n	8005a42 <HAL_GPIO_Init+0x21e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a4e      	ldr	r2, [pc, #312]	; (8005b40 <HAL_GPIO_Init+0x31c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d019      	beq.n	8005a3e <HAL_GPIO_Init+0x21a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a4d      	ldr	r2, [pc, #308]	; (8005b44 <HAL_GPIO_Init+0x320>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_GPIO_Init+0x216>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a4c      	ldr	r2, [pc, #304]	; (8005b48 <HAL_GPIO_Init+0x324>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00d      	beq.n	8005a36 <HAL_GPIO_Init+0x212>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a4b      	ldr	r2, [pc, #300]	; (8005b4c <HAL_GPIO_Init+0x328>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <HAL_GPIO_Init+0x20e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a4a      	ldr	r2, [pc, #296]	; (8005b50 <HAL_GPIO_Init+0x32c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d101      	bne.n	8005a2e <HAL_GPIO_Init+0x20a>
 8005a2a:	2307      	movs	r3, #7
 8005a2c:	e00e      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a2e:	2308      	movs	r3, #8
 8005a30:	e00c      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a32:	2306      	movs	r3, #6
 8005a34:	e00a      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a36:	2305      	movs	r3, #5
 8005a38:	e008      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e006      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e004      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_GPIO_Init+0x228>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f002 0203 	and.w	r2, r2, #3
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	4093      	lsls	r3, r2
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a5c:	4934      	ldr	r1, [pc, #208]	; (8005b30 <HAL_GPIO_Init+0x30c>)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	3302      	adds	r3, #2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a6a:	4b3a      	ldr	r3, [pc, #232]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a8e:	4a31      	ldr	r2, [pc, #196]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005abe:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b0c:	4a11      	ldr	r2, [pc, #68]	; (8005b54 <HAL_GPIO_Init+0x330>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	f67f ae90 	bls.w	8005840 <HAL_GPIO_Init+0x1c>
=======
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80b4 	beq.w	8005b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	4b5f      	ldr	r3, [pc, #380]	; (8005b30 <HAL_GPIO_Init+0x308>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	4a5e      	ldr	r2, [pc, #376]	; (8005b30 <HAL_GPIO_Init+0x308>)
 80059b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059bc:	6453      	str	r3, [r2, #68]	; 0x44
 80059be:	4b5c      	ldr	r3, [pc, #368]	; (8005b30 <HAL_GPIO_Init+0x308>)
 80059c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059ca:	4a5a      	ldr	r2, [pc, #360]	; (8005b34 <HAL_GPIO_Init+0x30c>)
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	3302      	adds	r3, #2
 80059d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	220f      	movs	r2, #15
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43db      	mvns	r3, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4013      	ands	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a51      	ldr	r2, [pc, #324]	; (8005b38 <HAL_GPIO_Init+0x310>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02b      	beq.n	8005a4e <HAL_GPIO_Init+0x226>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a50      	ldr	r2, [pc, #320]	; (8005b3c <HAL_GPIO_Init+0x314>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d025      	beq.n	8005a4a <HAL_GPIO_Init+0x222>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a4f      	ldr	r2, [pc, #316]	; (8005b40 <HAL_GPIO_Init+0x318>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01f      	beq.n	8005a46 <HAL_GPIO_Init+0x21e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a4e      	ldr	r2, [pc, #312]	; (8005b44 <HAL_GPIO_Init+0x31c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d019      	beq.n	8005a42 <HAL_GPIO_Init+0x21a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a4d      	ldr	r2, [pc, #308]	; (8005b48 <HAL_GPIO_Init+0x320>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_GPIO_Init+0x216>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a4c      	ldr	r2, [pc, #304]	; (8005b4c <HAL_GPIO_Init+0x324>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00d      	beq.n	8005a3a <HAL_GPIO_Init+0x212>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4b      	ldr	r2, [pc, #300]	; (8005b50 <HAL_GPIO_Init+0x328>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <HAL_GPIO_Init+0x20e>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4a      	ldr	r2, [pc, #296]	; (8005b54 <HAL_GPIO_Init+0x32c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_GPIO_Init+0x20a>
 8005a2e:	2307      	movs	r3, #7
 8005a30:	e00e      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a32:	2308      	movs	r3, #8
 8005a34:	e00c      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a36:	2306      	movs	r3, #6
 8005a38:	e00a      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a3a:	2305      	movs	r3, #5
 8005a3c:	e008      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a3e:	2304      	movs	r3, #4
 8005a40:	e006      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a42:	2303      	movs	r3, #3
 8005a44:	e004      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e002      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <HAL_GPIO_Init+0x228>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	f002 0203 	and.w	r2, r2, #3
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	4093      	lsls	r3, r2
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a60:	4934      	ldr	r1, [pc, #208]	; (8005b34 <HAL_GPIO_Init+0x30c>)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	3302      	adds	r3, #2
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a6e:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	43db      	mvns	r3, r3
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a92:	4a31      	ldr	r2, [pc, #196]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a98:	4b2f      	ldr	r3, [pc, #188]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ac2:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	43db      	mvns	r3, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ae6:	4a1c      	ldr	r2, [pc, #112]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aec:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b10:	4a11      	ldr	r2, [pc, #68]	; (8005b58 <HAL_GPIO_Init+0x330>)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	2b0f      	cmp	r3, #15
 8005b20:	f67f ae90 	bls.w	8005844 <HAL_GPIO_Init+0x1c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
}
<<<<<<< HEAD
 8005b20:	bf00      	nop
 8005b22:	3724      	adds	r7, #36	; 0x24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40013800 	.word	0x40013800
 8005b34:	40020000 	.word	0x40020000
 8005b38:	40020400 	.word	0x40020400
 8005b3c:	40020800 	.word	0x40020800
 8005b40:	40020c00 	.word	0x40020c00
 8005b44:	40021000 	.word	0x40021000
 8005b48:	40021400 	.word	0x40021400
 8005b4c:	40021800 	.word	0x40021800
 8005b50:	40021c00 	.word	0x40021c00
 8005b54:	40013c00 	.word	0x40013c00

08005b58 <HAL_GPIO_ReadPin>:
=======
 8005b24:	bf00      	nop
 8005b26:	3724      	adds	r7, #36	; 0x24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40013800 	.word	0x40013800
 8005b38:	40020000 	.word	0x40020000
 8005b3c:	40020400 	.word	0x40020400
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40020c00 	.word	0x40020c00
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40021400 	.word	0x40021400
 8005b50:	40021800 	.word	0x40021800
 8005b54:	40021c00 	.word	0x40021c00
 8005b58:	40013c00 	.word	0x40013c00

08005b5c <HAL_GPIO_ReadPin>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
=======
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	807b      	strh	r3, [r7, #2]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	887b      	ldrh	r3, [r7, #2]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
 8005b74:	e001      	b.n	8005b7a <HAL_GPIO_ReadPin+0x22>
=======
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	887b      	ldrh	r3, [r7, #2]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e001      	b.n	8005b7e <HAL_GPIO_ReadPin+0x22>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_GPIO_WritePin>:
=======
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_GPIO_WritePin>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	707b      	strb	r3, [r7, #1]
=======
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	807b      	strh	r3, [r7, #2]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	707b      	strb	r3, [r7, #1]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8005b98:	787b      	ldrb	r3, [r7, #1]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b9e:	887a      	ldrh	r2, [r7, #2]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	619a      	str	r2, [r3, #24]
=======
 8005b9c:	787b      	ldrb	r3, [r7, #1]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ba2:	887a      	ldrh	r2, [r7, #2]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	619a      	str	r2, [r3, #24]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8005ba4:	e003      	b.n	8005bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ba6:	887b      	ldrh	r3, [r7, #2]
 8005ba8:	041a      	lsls	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	619a      	str	r2, [r3, #24]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_I2C_Init>:
=======
 8005ba8:	e003      	b.n	8005bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005baa:	887b      	ldrh	r3, [r7, #2]
 8005bac:	041a      	lsls	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	619a      	str	r2, [r3, #24]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_I2C_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
<<<<<<< HEAD
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
=======
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
<<<<<<< HEAD
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e11f      	b.n	8005e0e <HAL_I2C_Init+0x252>
=======
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e11f      	b.n	8005e12 <HAL_I2C_Init+0x252>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
<<<<<<< HEAD
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
<<<<<<< HEAD
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fe f9ee 	bl	8003fc4 <HAL_I2C_MspInit>
=======
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fe f9ee 	bl	8003fc8 <HAL_I2C_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
<<<<<<< HEAD
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2224      	movs	r2, #36	; 0x24
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0201 	bic.w	r2, r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c20:	f000 fd18 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 8005c24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4a7b      	ldr	r2, [pc, #492]	; (8005e18 <HAL_I2C_Init+0x25c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d807      	bhi.n	8005c40 <HAL_I2C_Init+0x84>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a7a      	ldr	r2, [pc, #488]	; (8005e1c <HAL_I2C_Init+0x260>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	bf94      	ite	ls
 8005c38:	2301      	movls	r3, #1
 8005c3a:	2300      	movhi	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e006      	b.n	8005c4e <HAL_I2C_Init+0x92>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4a77      	ldr	r2, [pc, #476]	; (8005e20 <HAL_I2C_Init+0x264>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bf94      	ite	ls
 8005c48:	2301      	movls	r3, #1
 8005c4a:	2300      	movhi	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0db      	b.n	8005e0e <HAL_I2C_Init+0x252>
=======
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2224      	movs	r2, #36	; 0x24
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c24:	f000 fd18 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 8005c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4a7b      	ldr	r2, [pc, #492]	; (8005e1c <HAL_I2C_Init+0x25c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d807      	bhi.n	8005c44 <HAL_I2C_Init+0x84>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4a7a      	ldr	r2, [pc, #488]	; (8005e20 <HAL_I2C_Init+0x260>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	bf94      	ite	ls
 8005c3c:	2301      	movls	r3, #1
 8005c3e:	2300      	movhi	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e006      	b.n	8005c52 <HAL_I2C_Init+0x92>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4a77      	ldr	r2, [pc, #476]	; (8005e24 <HAL_I2C_Init+0x264>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	bf94      	ite	ls
 8005c4c:	2301      	movls	r3, #1
 8005c4e:	2300      	movhi	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e0db      	b.n	8005e12 <HAL_I2C_Init+0x252>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
<<<<<<< HEAD
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a72      	ldr	r2, [pc, #456]	; (8005e24 <HAL_I2C_Init+0x268>)
 8005c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5e:	0c9b      	lsrs	r3, r3, #18
 8005c60:	60bb      	str	r3, [r7, #8]
=======
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4a72      	ldr	r2, [pc, #456]	; (8005e28 <HAL_I2C_Init+0x268>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	0c9b      	lsrs	r3, r3, #18
 8005c64:	60bb      	str	r3, [r7, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
<<<<<<< HEAD
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
=======
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
<<<<<<< HEAD
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1b      	ldr	r3, [r3, #32]
 8005c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a64      	ldr	r2, [pc, #400]	; (8005e18 <HAL_I2C_Init+0x25c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d802      	bhi.n	8005c90 <HAL_I2C_Init+0xd4>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	e009      	b.n	8005ca4 <HAL_I2C_Init+0xe8>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	4a63      	ldr	r2, [pc, #396]	; (8005e28 <HAL_I2C_Init+0x26c>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6213      	str	r3, [r2, #32]
=======
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4a64      	ldr	r2, [pc, #400]	; (8005e1c <HAL_I2C_Init+0x25c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d802      	bhi.n	8005c94 <HAL_I2C_Init+0xd4>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3301      	adds	r3, #1
 8005c92:	e009      	b.n	8005ca8 <HAL_I2C_Init+0xe8>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c9a:	fb02 f303 	mul.w	r3, r2, r3
 8005c9e:	4a63      	ldr	r2, [pc, #396]	; (8005e2c <HAL_I2C_Init+0x26c>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	099b      	lsrs	r3, r3, #6
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	430b      	orrs	r3, r1
 8005cae:	6213      	str	r3, [r2, #32]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
<<<<<<< HEAD
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	4956      	ldr	r1, [pc, #344]	; (8005e18 <HAL_I2C_Init+0x25c>)
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	d80d      	bhi.n	8005ce0 <HAL_I2C_Init+0x124>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1e59      	subs	r1, r3, #1
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	bf38      	it	cc
 8005cdc:	2304      	movcc	r3, #4
 8005cde:	e04f      	b.n	8005d80 <HAL_I2C_Init+0x1c4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d111      	bne.n	8005d0c <HAL_I2C_Init+0x150>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	1e58      	subs	r0, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6859      	ldr	r1, [r3, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	440b      	add	r3, r1
 8005cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2301      	moveq	r3, #1
 8005d06:	2300      	movne	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	e012      	b.n	8005d32 <HAL_I2C_Init+0x176>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1e58      	subs	r0, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	0099      	lsls	r1, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	bf0c      	ite	eq
 8005d2c:	2301      	moveq	r3, #1
 8005d2e:	2300      	movne	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <HAL_I2C_Init+0x17e>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e022      	b.n	8005d80 <HAL_I2C_Init+0x1c4>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_I2C_Init+0x1a4>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1e58      	subs	r0, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	440b      	add	r3, r1
 8005d50:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5e:	e00f      	b.n	8005d80 <HAL_I2C_Init+0x1c4>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	1e58      	subs	r0, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	0099      	lsls	r1, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d76:	3301      	adds	r3, #1
 8005d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d80:	6879      	ldr	r1, [r7, #4]
 8005d82:	6809      	ldr	r1, [r1, #0]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	61cb      	str	r3, [r1, #28]
=======
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005cba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4956      	ldr	r1, [pc, #344]	; (8005e1c <HAL_I2C_Init+0x25c>)
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	d80d      	bhi.n	8005ce4 <HAL_I2C_Init+0x124>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1e59      	subs	r1, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	bf38      	it	cc
 8005ce0:	2304      	movcc	r3, #4
 8005ce2:	e04f      	b.n	8005d84 <HAL_I2C_Init+0x1c4>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d111      	bne.n	8005d10 <HAL_I2C_Init+0x150>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1e58      	subs	r0, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6859      	ldr	r1, [r3, #4]
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	440b      	add	r3, r1
 8005cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfe:	3301      	adds	r3, #1
 8005d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	e012      	b.n	8005d36 <HAL_I2C_Init+0x176>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1e58      	subs	r0, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	0099      	lsls	r1, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <HAL_I2C_Init+0x17e>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e022      	b.n	8005d84 <HAL_I2C_Init+0x1c4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d10e      	bne.n	8005d64 <HAL_I2C_Init+0x1a4>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	1e58      	subs	r0, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	005b      	lsls	r3, r3, #1
 8005d52:	440b      	add	r3, r1
 8005d54:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d62:	e00f      	b.n	8005d84 <HAL_I2C_Init+0x1c4>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1e58      	subs	r0, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	0099      	lsls	r1, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	6809      	ldr	r1, [r1, #0]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61cb      	str	r3, [r1, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
<<<<<<< HEAD
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69da      	ldr	r2, [r3, #28]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
=======
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
<<<<<<< HEAD
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005dae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6911      	ldr	r1, [r2, #16]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	68d2      	ldr	r2, [r2, #12]
 8005dba:	4311      	orrs	r1, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	6093      	str	r3, [r2, #8]
=======
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6911      	ldr	r1, [r2, #16]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68d2      	ldr	r2, [r2, #12]
 8005dbe:	4311      	orrs	r1, r2
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6812      	ldr	r2, [r2, #0]
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6093      	str	r3, [r2, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
<<<<<<< HEAD
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	000186a0 	.word	0x000186a0
 8005e1c:	001e847f 	.word	0x001e847f
 8005e20:	003d08ff 	.word	0x003d08ff
 8005e24:	431bde83 	.word	0x431bde83
 8005e28:	10624dd3 	.word	0x10624dd3

08005e2c <HAL_RCC_OscConfig>:
=======
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0201 	orr.w	r2, r2, #1
 8005df2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	000186a0 	.word	0x000186a0
 8005e20:	001e847f 	.word	0x001e847f
 8005e24:	003d08ff 	.word	0x003d08ff
 8005e28:	431bde83 	.word	0x431bde83
 8005e2c:	10624dd3 	.word	0x10624dd3

08005e30 <HAL_RCC_OscConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
=======
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e25b      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
=======
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e25b      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d075      	beq.n	8005f36 <HAL_RCC_OscConfig+0x10a>
=======
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d075      	beq.n	8005f3a <HAL_RCC_OscConfig+0x10a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8005e4a:	4ba3      	ldr	r3, [pc, #652]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d00c      	beq.n	8005e70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e56:	4ba0      	ldr	r3, [pc, #640]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d112      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e62:	4b9d      	ldr	r3, [pc, #628]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	4b99      	ldr	r3, [pc, #612]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05b      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d157      	bne.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e236      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
=======
 8005e4e:	4ba3      	ldr	r3, [pc, #652]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4ba0      	ldr	r3, [pc, #640]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d112      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b9d      	ldr	r3, [pc, #628]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e72:	d10b      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b99      	ldr	r3, [pc, #612]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x108>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d157      	bne.n	8005f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e236      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d106      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x74>
 8005e92:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a90      	ldr	r2, [pc, #576]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e01d      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b8b      	ldr	r3, [pc, #556]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a8a      	ldr	r2, [pc, #552]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a87      	ldr	r2, [pc, #540]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ec4:	4b84      	ldr	r3, [pc, #528]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a83      	ldr	r2, [pc, #524]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b81      	ldr	r3, [pc, #516]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a80      	ldr	r2, [pc, #512]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fe fbfc 	bl	80046e0 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fe fbf8 	bl	80046e0 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1fb      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005efe:	4b76      	ldr	r3, [pc, #472]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
=======
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x74>
 8005e96:	4b91      	ldr	r3, [pc, #580]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a90      	ldr	r2, [pc, #576]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x98>
 8005eae:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a8a      	ldr	r2, [pc, #552]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b88      	ldr	r3, [pc, #544]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a87      	ldr	r2, [pc, #540]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ec8:	4b84      	ldr	r3, [pc, #528]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a83      	ldr	r2, [pc, #524]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b81      	ldr	r3, [pc, #516]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a80      	ldr	r2, [pc, #512]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fe fbfc 	bl	80046e4 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fe fbf8 	bl	80046e4 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	; 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e1fb      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b76      	ldr	r3, [pc, #472]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xc0>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8005f0c:	f7fe fbe8 	bl	80046e0 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fe fbe4 	bl	80046e0 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	; 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e1e7      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f26:	4b6c      	ldr	r3, [pc, #432]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
=======
 8005f10:	f7fe fbe8 	bl	80046e4 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fe fbe4 	bl	80046e4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	; 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1e7      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	4b6c      	ldr	r3, [pc, #432]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0xe8>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d063      	beq.n	800600a <HAL_RCC_OscConfig+0x1de>
=======
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d063      	beq.n	800600e <HAL_RCC_OscConfig+0x1de>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8005f42:	4b65      	ldr	r3, [pc, #404]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f4e:	4b62      	ldr	r3, [pc, #392]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f56:	2b08      	cmp	r3, #8
 8005f58:	d11c      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5a:	4b5f      	ldr	r3, [pc, #380]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d116      	bne.n	8005f94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f66:	4b5c      	ldr	r3, [pc, #368]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d001      	beq.n	8005f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e1bb      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
=======
 8005f46:	4b65      	ldr	r3, [pc, #404]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b62      	ldr	r3, [pc, #392]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d11c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5e:	4b5f      	ldr	r3, [pc, #380]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	4b5c      	ldr	r3, [pc, #368]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e1bb      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005f7e:	4b56      	ldr	r3, [pc, #344]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4952      	ldr	r1, [pc, #328]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f92:	e03a      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
=======
 8005f82:	4b56      	ldr	r3, [pc, #344]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4952      	ldr	r1, [pc, #328]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	e03a      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d020      	beq.n	8005fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f9c:	4b4f      	ldr	r3, [pc, #316]	; (80060dc <HAL_RCC_OscConfig+0x2b0>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa2:	f7fe fb9d 	bl	80046e0 <HAL_GetTick>
 8005fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa8:	e008      	b.n	8005fbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005faa:	f7fe fb99 	bl	80046e0 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e19c      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fbc:	4b46      	ldr	r3, [pc, #280]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d0f0      	beq.n	8005faa <HAL_RCC_OscConfig+0x17e>
=======
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa0:	4b4f      	ldr	r3, [pc, #316]	; (80060e0 <HAL_RCC_OscConfig+0x2b0>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fe fb9d 	bl	80046e4 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fae:	f7fe fb99 	bl	80046e4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e19c      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	4b46      	ldr	r3, [pc, #280]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x17e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8005fc8:	4b43      	ldr	r3, [pc, #268]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	4940      	ldr	r1, [pc, #256]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
 8005fdc:	e015      	b.n	800600a <HAL_RCC_OscConfig+0x1de>
=======
 8005fcc:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4940      	ldr	r1, [pc, #256]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	e015      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <HAL_RCC_OscConfig+0x2b0>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe4:	f7fe fb7c 	bl	80046e0 <HAL_GetTick>
 8005fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fea:	e008      	b.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fec:	f7fe fb78 	bl	80046e0 <HAL_GetTick>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d901      	bls.n	8005ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e17b      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ffe:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1f0      	bne.n	8005fec <HAL_RCC_OscConfig+0x1c0>
=======
 8005fe2:	4b3f      	ldr	r3, [pc, #252]	; (80060e0 <HAL_RCC_OscConfig+0x2b0>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fe fb7c 	bl	80046e4 <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fe fb78 	bl	80046e4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e17b      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	4b36      	ldr	r3, [pc, #216]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d030      	beq.n	8006078 <HAL_RCC_OscConfig+0x24c>
=======
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d030      	beq.n	800607c <HAL_RCC_OscConfig+0x24c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601e:	4b30      	ldr	r3, [pc, #192]	; (80060e0 <HAL_RCC_OscConfig+0x2b4>)
 8006020:	2201      	movs	r2, #1
 8006022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fe fb5c 	bl	80046e0 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800602c:	f7fe fb58 	bl	80046e0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e15b      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800603e:	4b26      	ldr	r3, [pc, #152]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006042:	f003 0302 	and.w	r3, r3, #2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
 800604a:	e015      	b.n	8006078 <HAL_RCC_OscConfig+0x24c>
=======
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006022:	4b30      	ldr	r3, [pc, #192]	; (80060e4 <HAL_RCC_OscConfig+0x2b4>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fe fb5c 	bl	80046e4 <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006030:	f7fe fb58 	bl	80046e4 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e15b      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8006044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x200>
 800604e:	e015      	b.n	800607c <HAL_RCC_OscConfig+0x24c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800604c:	4b24      	ldr	r3, [pc, #144]	; (80060e0 <HAL_RCC_OscConfig+0x2b4>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006052:	f7fe fb45 	bl	80046e0 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605a:	f7fe fb41 	bl	80046e0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e144      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800606c:	4b1a      	ldr	r3, [pc, #104]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 800606e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1f0      	bne.n	800605a <HAL_RCC_OscConfig+0x22e>
=======
 8006050:	4b24      	ldr	r3, [pc, #144]	; (80060e4 <HAL_RCC_OscConfig+0x2b4>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006056:	f7fe fb45 	bl	80046e4 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605e:	f7fe fb41 	bl	80046e4 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e144      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f0      	bne.n	800605e <HAL_RCC_OscConfig+0x22e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0304 	and.w	r3, r3, #4
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80a0 	beq.w	80061c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]
=======
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80a0 	beq.w	80061ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006096:	2300      	movs	r3, #0
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	4b0f      	ldr	r3, [pc, #60]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	4a0e      	ldr	r2, [pc, #56]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a4:	6413      	str	r3, [r2, #64]	; 0x40
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ae:	60bb      	str	r3, [r7, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060b6:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_OscConfig+0x2b8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d121      	bne.n	8006106 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c2:	4b08      	ldr	r3, [pc, #32]	; (80060e4 <HAL_RCC_OscConfig+0x2b8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a07      	ldr	r2, [pc, #28]	; (80060e4 <HAL_RCC_OscConfig+0x2b8>)
 80060c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060ce:	f7fe fb07 	bl	80046e0 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d4:	e011      	b.n	80060fa <HAL_RCC_OscConfig+0x2ce>
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800
 80060dc:	42470000 	.word	0x42470000
 80060e0:	42470e80 	.word	0x42470e80
 80060e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e8:	f7fe fafa 	bl	80046e0 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0fd      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fa:	4b81      	ldr	r3, [pc, #516]	; (8006300 <HAL_RCC_OscConfig+0x4d4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	2b00      	cmp	r3, #0
 8006104:	d0f0      	beq.n	80060e8 <HAL_RCC_OscConfig+0x2bc>
=======
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 80060a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a8:	6413      	str	r3, [r2, #64]	; 0x40
 80060aa:	4b0c      	ldr	r3, [pc, #48]	; (80060dc <HAL_RCC_OscConfig+0x2ac>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <HAL_RCC_OscConfig+0x2b8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d121      	bne.n	800610a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c6:	4b08      	ldr	r3, [pc, #32]	; (80060e8 <HAL_RCC_OscConfig+0x2b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a07      	ldr	r2, [pc, #28]	; (80060e8 <HAL_RCC_OscConfig+0x2b8>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d2:	f7fe fb07 	bl	80046e4 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d8:	e011      	b.n	80060fe <HAL_RCC_OscConfig+0x2ce>
 80060da:	bf00      	nop
 80060dc:	40023800 	.word	0x40023800
 80060e0:	42470000 	.word	0x42470000
 80060e4:	42470e80 	.word	0x42470e80
 80060e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060ec:	f7fe fafa 	bl	80046e4 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e0fd      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060fe:	4b81      	ldr	r3, [pc, #516]	; (8006304 <HAL_RCC_OscConfig+0x4d4>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d0f0      	beq.n	80060ec <HAL_RCC_OscConfig+0x2bc>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d106      	bne.n	800611c <HAL_RCC_OscConfig+0x2f0>
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	4a7c      	ldr	r2, [pc, #496]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	6713      	str	r3, [r2, #112]	; 0x70
 800611a:	e01c      	b.n	8006156 <HAL_RCC_OscConfig+0x32a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	2b05      	cmp	r3, #5
 8006122:	d10c      	bne.n	800613e <HAL_RCC_OscConfig+0x312>
 8006124:	4b77      	ldr	r3, [pc, #476]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	4a76      	ldr	r2, [pc, #472]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 800612a:	f043 0304 	orr.w	r3, r3, #4
 800612e:	6713      	str	r3, [r2, #112]	; 0x70
 8006130:	4b74      	ldr	r3, [pc, #464]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	4a73      	ldr	r2, [pc, #460]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006136:	f043 0301 	orr.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	; 0x70
 800613c:	e00b      	b.n	8006156 <HAL_RCC_OscConfig+0x32a>
 800613e:	4b71      	ldr	r3, [pc, #452]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	4a70      	ldr	r2, [pc, #448]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	6713      	str	r3, [r2, #112]	; 0x70
 800614a:	4b6e      	ldr	r3, [pc, #440]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	4a6d      	ldr	r2, [pc, #436]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006150:	f023 0304 	bic.w	r3, r3, #4
 8006154:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d015      	beq.n	800618a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615e:	f7fe fabf 	bl	80046e0 <HAL_GetTick>
 8006162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006164:	e00a      	b.n	800617c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fe fabb 	bl	80046e0 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	4293      	cmp	r3, r2
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e0bc      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617c:	4b61      	ldr	r3, [pc, #388]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d0ee      	beq.n	8006166 <HAL_RCC_OscConfig+0x33a>
 8006188:	e014      	b.n	80061b4 <HAL_RCC_OscConfig+0x388>
=======
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d106      	bne.n	8006120 <HAL_RCC_OscConfig+0x2f0>
 8006112:	4b7d      	ldr	r3, [pc, #500]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006116:	4a7c      	ldr	r2, [pc, #496]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6713      	str	r3, [r2, #112]	; 0x70
 800611e:	e01c      	b.n	800615a <HAL_RCC_OscConfig+0x32a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	2b05      	cmp	r3, #5
 8006126:	d10c      	bne.n	8006142 <HAL_RCC_OscConfig+0x312>
 8006128:	4b77      	ldr	r3, [pc, #476]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800612a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612c:	4a76      	ldr	r2, [pc, #472]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800612e:	f043 0304 	orr.w	r3, r3, #4
 8006132:	6713      	str	r3, [r2, #112]	; 0x70
 8006134:	4b74      	ldr	r3, [pc, #464]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006138:	4a73      	ldr	r2, [pc, #460]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	; 0x70
 8006140:	e00b      	b.n	800615a <HAL_RCC_OscConfig+0x32a>
 8006142:	4b71      	ldr	r3, [pc, #452]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006146:	4a70      	ldr	r2, [pc, #448]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006148:	f023 0301 	bic.w	r3, r3, #1
 800614c:	6713      	str	r3, [r2, #112]	; 0x70
 800614e:	4b6e      	ldr	r3, [pc, #440]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	4a6d      	ldr	r2, [pc, #436]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006154:	f023 0304 	bic.w	r3, r3, #4
 8006158:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d015      	beq.n	800618e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006162:	f7fe fabf 	bl	80046e4 <HAL_GetTick>
 8006166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006168:	e00a      	b.n	8006180 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800616a:	f7fe fabb 	bl	80046e4 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f241 3288 	movw	r2, #5000	; 0x1388
 8006178:	4293      	cmp	r3, r2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e0bc      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006180:	4b61      	ldr	r3, [pc, #388]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0ee      	beq.n	800616a <HAL_RCC_OscConfig+0x33a>
 800618c:	e014      	b.n	80061b8 <HAL_RCC_OscConfig+0x388>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 800618a:	f7fe faa9 	bl	80046e0 <HAL_GetTick>
 800618e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006190:	e00a      	b.n	80061a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fe faa5 	bl	80046e0 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e0a6      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a8:	4b56      	ldr	r3, [pc, #344]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 80061aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1ee      	bne.n	8006192 <HAL_RCC_OscConfig+0x366>
=======
 800618e:	f7fe faa9 	bl	80046e4 <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006194:	e00a      	b.n	80061ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006196:	f7fe faa5 	bl	80046e4 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0a6      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ac:	4b56      	ldr	r3, [pc, #344]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1ee      	bne.n	8006196 <HAL_RCC_OscConfig+0x366>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d105      	bne.n	80061c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ba:	4b52      	ldr	r3, [pc, #328]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	4a51      	ldr	r2, [pc, #324]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 80061c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c4:	6413      	str	r3, [r2, #64]	; 0x40
=======
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061be:	4b52      	ldr	r3, [pc, #328]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	4a51      	ldr	r2, [pc, #324]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 80061c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c8:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 8092 	beq.w	80062f4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061d0:	4b4c      	ldr	r3, [pc, #304]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 030c 	and.w	r3, r3, #12
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d05c      	beq.n	8006296 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d141      	bne.n	8006268 <HAL_RCC_OscConfig+0x43c>
=======
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 8092 	beq.w	80062f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061d4:	4b4c      	ldr	r3, [pc, #304]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d05c      	beq.n	800629a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d141      	bne.n	800626c <HAL_RCC_OscConfig+0x43c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80061e4:	4b48      	ldr	r3, [pc, #288]	; (8006308 <HAL_RCC_OscConfig+0x4dc>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ea:	f7fe fa79 	bl	80046e0 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f2:	f7fe fa75 	bl	80046e0 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e078      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006204:	4b3f      	ldr	r3, [pc, #252]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1f0      	bne.n	80061f2 <HAL_RCC_OscConfig+0x3c6>
=======
 80061e8:	4b48      	ldr	r3, [pc, #288]	; (800630c <HAL_RCC_OscConfig+0x4dc>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ee:	f7fe fa79 	bl	80046e4 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f6:	f7fe fa75 	bl	80046e4 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e078      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006208:	4b3f      	ldr	r3, [pc, #252]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1f0      	bne.n	80061f6 <HAL_RCC_OscConfig+0x3c6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621e:	019b      	lsls	r3, r3, #6
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	085b      	lsrs	r3, r3, #1
 8006228:	3b01      	subs	r3, #1
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	061b      	lsls	r3, r3, #24
 8006234:	4933      	ldr	r1, [pc, #204]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 8006236:	4313      	orrs	r3, r2
 8006238:	604b      	str	r3, [r1, #4]
=======
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	019b      	lsls	r3, r3, #6
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	3b01      	subs	r3, #1
 800622e:	041b      	lsls	r3, r3, #16
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	4933      	ldr	r1, [pc, #204]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800623a:	4313      	orrs	r3, r2
 800623c:	604b      	str	r3, [r1, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800623a:	4b33      	ldr	r3, [pc, #204]	; (8006308 <HAL_RCC_OscConfig+0x4dc>)
 800623c:	2201      	movs	r2, #1
 800623e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006240:	f7fe fa4e 	bl	80046e0 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006248:	f7fe fa4a 	bl	80046e0 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e04d      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	4b2a      	ldr	r3, [pc, #168]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x41c>
 8006266:	e045      	b.n	80062f4 <HAL_RCC_OscConfig+0x4c8>
=======
 800623e:	4b33      	ldr	r3, [pc, #204]	; (800630c <HAL_RCC_OscConfig+0x4dc>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006244:	f7fe fa4e 	bl	80046e4 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800624c:	f7fe fa4a 	bl	80046e4 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e04d      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625e:	4b2a      	ldr	r3, [pc, #168]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x41c>
 800626a:	e045      	b.n	80062f8 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8006268:	4b27      	ldr	r3, [pc, #156]	; (8006308 <HAL_RCC_OscConfig+0x4dc>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626e:	f7fe fa37 	bl	80046e0 <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006274:	e008      	b.n	8006288 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006276:	f7fe fa33 	bl	80046e0 <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	2b02      	cmp	r3, #2
 8006282:	d901      	bls.n	8006288 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e036      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006288:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1f0      	bne.n	8006276 <HAL_RCC_OscConfig+0x44a>
 8006294:	e02e      	b.n	80062f4 <HAL_RCC_OscConfig+0x4c8>
=======
 800626c:	4b27      	ldr	r3, [pc, #156]	; (800630c <HAL_RCC_OscConfig+0x4dc>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fe fa37 	bl	80046e4 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800627a:	f7fe fa33 	bl	80046e4 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e036      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x44a>
 8006298:	e02e      	b.n	80062f8 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e029      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
=======
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e029      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80062a2:	4b18      	ldr	r3, [pc, #96]	; (8006304 <HAL_RCC_OscConfig+0x4d8>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d11c      	bne.n	80062f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d115      	bne.n	80062f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ca:	4013      	ands	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d10d      	bne.n	80062f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062de:	429a      	cmp	r2, r3
 80062e0:	d106      	bne.n	80062f0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d001      	beq.n	80062f4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_RCC_OscConfig+0x4ca>
=======
 80062a6:	4b18      	ldr	r3, [pc, #96]	; (8006308 <HAL_RCC_OscConfig+0x4d8>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d11c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d115      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062ce:	4013      	ands	r3, r2
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d10d      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d106      	bne.n	80062f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_RCC_OscConfig+0x4ca>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40007000 	.word	0x40007000
 8006304:	40023800 	.word	0x40023800
 8006308:	42470060 	.word	0x42470060

0800630c <HAL_RCC_ClockConfig>:
=======
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3718      	adds	r7, #24
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40007000 	.word	0x40007000
 8006308:	40023800 	.word	0x40023800
 800630c:	42470060 	.word	0x42470060

08006310 <HAL_RCC_ClockConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
=======
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0cc      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e0cc      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8006320:	4b68      	ldr	r3, [pc, #416]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d90c      	bls.n	8006348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800632e:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
=======
 8006324:	4b68      	ldr	r3, [pc, #416]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d90c      	bls.n	800634c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006332:	4b65      	ldr	r3, [pc, #404]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006336:	4b63      	ldr	r3, [pc, #396]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 030f 	and.w	r3, r3, #15
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	429a      	cmp	r2, r3
 8006342:	d001      	beq.n	8006348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0b8      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 800633a:	4b63      	ldr	r3, [pc, #396]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 030f 	and.w	r3, r3, #15
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d001      	beq.n	800634c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e0b8      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d020      	beq.n	8006396 <HAL_RCC_ClockConfig+0x8a>
=======
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d020      	beq.n	800639a <HAL_RCC_ClockConfig+0x8a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d005      	beq.n	800636c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006360:	4b59      	ldr	r3, [pc, #356]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4a58      	ldr	r2, [pc, #352]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800636a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0308 	and.w	r3, r3, #8
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006378:	4b53      	ldr	r3, [pc, #332]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	4a52      	ldr	r2, [pc, #328]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006382:	6093      	str	r3, [r2, #8]
=======
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006364:	4b59      	ldr	r3, [pc, #356]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4a58      	ldr	r2, [pc, #352]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800636e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800637c:	4b53      	ldr	r3, [pc, #332]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a52      	ldr	r2, [pc, #328]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006386:	6093      	str	r3, [r2, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8006384:	4b50      	ldr	r3, [pc, #320]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	494d      	ldr	r1, [pc, #308]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	4313      	orrs	r3, r2
 8006394:	608b      	str	r3, [r1, #8]
=======
 8006388:	4b50      	ldr	r3, [pc, #320]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	494d      	ldr	r1, [pc, #308]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d044      	beq.n	800642c <HAL_RCC_ClockConfig+0x120>
=======
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d044      	beq.n	8006430 <HAL_RCC_ClockConfig+0x120>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d107      	bne.n	80063ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063aa:	4b47      	ldr	r3, [pc, #284]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d119      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e07f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	4b47      	ldr	r3, [pc, #284]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d119      	bne.n	80063ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e07f      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c6:	2b03      	cmp	r3, #3
 80063c8:	d107      	bne.n	80063da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ca:	4b3f      	ldr	r3, [pc, #252]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e06f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d003      	beq.n	80063ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d107      	bne.n	80063de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ce:	4b3f      	ldr	r3, [pc, #252]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d109      	bne.n	80063ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e06f      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 80063da:	4b3b      	ldr	r3, [pc, #236]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e067      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 80063de:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e067      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 80063ea:	4b37      	ldr	r3, [pc, #220]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f023 0203 	bic.w	r2, r3, #3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4934      	ldr	r1, [pc, #208]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063fc:	f7fe f970 	bl	80046e0 <HAL_GetTick>
 8006400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006402:	e00a      	b.n	800641a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006404:	f7fe f96c 	bl	80046e0 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006412:	4293      	cmp	r3, r2
 8006414:	d901      	bls.n	800641a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e04f      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641a:	4b2b      	ldr	r3, [pc, #172]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 020c 	and.w	r2, r3, #12
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	429a      	cmp	r2, r3
 800642a:	d1eb      	bne.n	8006404 <HAL_RCC_ClockConfig+0xf8>
=======
 80063ee:	4b37      	ldr	r3, [pc, #220]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f023 0203 	bic.w	r2, r3, #3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4934      	ldr	r1, [pc, #208]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006400:	f7fe f970 	bl	80046e4 <HAL_GetTick>
 8006404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006406:	e00a      	b.n	800641e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006408:	f7fe f96c 	bl	80046e4 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	f241 3288 	movw	r2, #5000	; 0x1388
 8006416:	4293      	cmp	r3, r2
 8006418:	d901      	bls.n	800641e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e04f      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800641e:	4b2b      	ldr	r3, [pc, #172]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 020c 	and.w	r2, r3, #12
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	429a      	cmp	r2, r3
 800642e:	d1eb      	bne.n	8006408 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800642c:	4b25      	ldr	r3, [pc, #148]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d20c      	bcs.n	8006454 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
=======
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d20c      	bcs.n	8006458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8006442:	4b20      	ldr	r3, [pc, #128]	; (80064c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d001      	beq.n	8006454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e032      	b.n	80064ba <HAL_RCC_ClockConfig+0x1ae>
=======
 8006446:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	429a      	cmp	r2, r3
 8006452:	d001      	beq.n	8006458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e032      	b.n	80064be <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006460:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4916      	ldr	r1, [pc, #88]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
=======
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d008      	beq.n	8006476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006464:	4b19      	ldr	r3, [pc, #100]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	4916      	ldr	r1, [pc, #88]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	4313      	orrs	r3, r2
 8006474:	608b      	str	r3, [r1, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d009      	beq.n	8006492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800647e:	4b12      	ldr	r3, [pc, #72]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	490e      	ldr	r1, [pc, #56]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800648e:	4313      	orrs	r3, r2
 8006490:	608b      	str	r3, [r1, #8]
=======
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006482:	4b12      	ldr	r3, [pc, #72]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	490e      	ldr	r1, [pc, #56]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	4313      	orrs	r3, r2
 8006494:	608b      	str	r3, [r1, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8006492:	f000 f821 	bl	80064d8 <HAL_RCC_GetSysClockFreq>
 8006496:	4601      	mov	r1, r0
 8006498:	4b0b      	ldr	r3, [pc, #44]	; (80064c8 <HAL_RCC_ClockConfig+0x1bc>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <HAL_RCC_ClockConfig+0x1c0>)
 80064a4:	5cd3      	ldrb	r3, [r2, r3]
 80064a6:	fa21 f303 	lsr.w	r3, r1, r3
 80064aa:	4a09      	ldr	r2, [pc, #36]	; (80064d0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064ae:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_ClockConfig+0x1c8>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe f8d0 	bl	8004658 <HAL_InitTick>

  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	40023c00 	.word	0x40023c00
 80064c8:	40023800 	.word	0x40023800
 80064cc:	0800c170 	.word	0x0800c170
 80064d0:	20000034 	.word	0x20000034
 80064d4:	20000038 	.word	0x20000038

080064d8 <HAL_RCC_GetSysClockFreq>:
=======
 8006496:	f000 f821 	bl	80064dc <HAL_RCC_GetSysClockFreq>
 800649a:	4601      	mov	r1, r0
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	4a0a      	ldr	r2, [pc, #40]	; (80064d0 <HAL_RCC_ClockConfig+0x1c0>)
 80064a8:	5cd3      	ldrb	r3, [r2, r3]
 80064aa:	fa21 f303 	lsr.w	r3, r1, r3
 80064ae:	4a09      	ldr	r2, [pc, #36]	; (80064d4 <HAL_RCC_ClockConfig+0x1c4>)
 80064b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <HAL_RCC_ClockConfig+0x1c8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe f8d0 	bl	800465c <HAL_InitTick>

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	40023c00 	.word	0x40023c00
 80064cc:	40023800 	.word	0x40023800
 80064d0:	0800c170 	.word	0x0800c170
 80064d4:	20000034 	.word	0x20000034
 80064d8:	20000038 	.word	0x20000038

080064dc <HAL_RCC_GetSysClockFreq>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 80064d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	607b      	str	r3, [r7, #4]
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	2300      	movs	r3, #0
 80064e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ee:	4b50      	ldr	r3, [pc, #320]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d007      	beq.n	800650a <HAL_RCC_GetSysClockFreq+0x32>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d008      	beq.n	8006510 <HAL_RCC_GetSysClockFreq+0x38>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f040 808d 	bne.w	800661e <HAL_RCC_GetSysClockFreq+0x146>
=======
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	607b      	str	r3, [r7, #4]
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	2300      	movs	r3, #0
 80064ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f2:	4b50      	ldr	r3, [pc, #320]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d007      	beq.n	800650e <HAL_RCC_GetSysClockFreq+0x32>
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d008      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x38>
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 808d 	bne.w	8006622 <HAL_RCC_GetSysClockFreq+0x146>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8006504:	4b4b      	ldr	r3, [pc, #300]	; (8006634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006506:	60bb      	str	r3, [r7, #8]
       break;
 8006508:	e08c      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 8006508:	4b4b      	ldr	r3, [pc, #300]	; (8006638 <HAL_RCC_GetSysClockFreq+0x15c>)
 800650a:	60bb      	str	r3, [r7, #8]
       break;
 800650c:	e08c      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800650a:	4b4b      	ldr	r3, [pc, #300]	; (8006638 <HAL_RCC_GetSysClockFreq+0x160>)
 800650c:	60bb      	str	r3, [r7, #8]
      break;
 800650e:	e089      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 800650e:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_RCC_GetSysClockFreq+0x160>)
 8006510:	60bb      	str	r3, [r7, #8]
      break;
 8006512:	e089      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8006510:	4b47      	ldr	r3, [pc, #284]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006518:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800651a:	4b45      	ldr	r3, [pc, #276]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d023      	beq.n	800656e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006526:	4b42      	ldr	r3, [pc, #264]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	099b      	lsrs	r3, r3, #6
 800652c:	f04f 0400 	mov.w	r4, #0
 8006530:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	ea03 0501 	and.w	r5, r3, r1
 800653c:	ea04 0602 	and.w	r6, r4, r2
 8006540:	4a3d      	ldr	r2, [pc, #244]	; (8006638 <HAL_RCC_GetSysClockFreq+0x160>)
 8006542:	fb02 f106 	mul.w	r1, r2, r6
 8006546:	2200      	movs	r2, #0
 8006548:	fb02 f205 	mul.w	r2, r2, r5
 800654c:	440a      	add	r2, r1
 800654e:	493a      	ldr	r1, [pc, #232]	; (8006638 <HAL_RCC_GetSysClockFreq+0x160>)
 8006550:	fba5 0101 	umull	r0, r1, r5, r1
 8006554:	1853      	adds	r3, r2, r1
 8006556:	4619      	mov	r1, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f04f 0400 	mov.w	r4, #0
 800655e:	461a      	mov	r2, r3
 8006560:	4623      	mov	r3, r4
 8006562:	f7fa fb91 	bl	8000c88 <__aeabi_uldivmod>
 8006566:	4603      	mov	r3, r0
 8006568:	460c      	mov	r4, r1
 800656a:	60fb      	str	r3, [r7, #12]
 800656c:	e049      	b.n	8006602 <HAL_RCC_GetSysClockFreq+0x12a>
=======
 8006514:	4b47      	ldr	r3, [pc, #284]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800651c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800651e:	4b45      	ldr	r3, [pc, #276]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d023      	beq.n	8006572 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652a:	4b42      	ldr	r3, [pc, #264]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	099b      	lsrs	r3, r3, #6
 8006530:	f04f 0400 	mov.w	r4, #0
 8006534:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006538:	f04f 0200 	mov.w	r2, #0
 800653c:	ea03 0501 	and.w	r5, r3, r1
 8006540:	ea04 0602 	and.w	r6, r4, r2
 8006544:	4a3d      	ldr	r2, [pc, #244]	; (800663c <HAL_RCC_GetSysClockFreq+0x160>)
 8006546:	fb02 f106 	mul.w	r1, r2, r6
 800654a:	2200      	movs	r2, #0
 800654c:	fb02 f205 	mul.w	r2, r2, r5
 8006550:	440a      	add	r2, r1
 8006552:	493a      	ldr	r1, [pc, #232]	; (800663c <HAL_RCC_GetSysClockFreq+0x160>)
 8006554:	fba5 0101 	umull	r0, r1, r5, r1
 8006558:	1853      	adds	r3, r2, r1
 800655a:	4619      	mov	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f04f 0400 	mov.w	r4, #0
 8006562:	461a      	mov	r2, r3
 8006564:	4623      	mov	r3, r4
 8006566:	f7fa fb8f 	bl	8000c88 <__aeabi_uldivmod>
 800656a:	4603      	mov	r3, r0
 800656c:	460c      	mov	r4, r1
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e049      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x12a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 800656e:	4b30      	ldr	r3, [pc, #192]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	099b      	lsrs	r3, r3, #6
 8006574:	f04f 0400 	mov.w	r4, #0
 8006578:	f240 11ff 	movw	r1, #511	; 0x1ff
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	ea03 0501 	and.w	r5, r3, r1
 8006584:	ea04 0602 	and.w	r6, r4, r2
 8006588:	4629      	mov	r1, r5
 800658a:	4632      	mov	r2, r6
 800658c:	f04f 0300 	mov.w	r3, #0
 8006590:	f04f 0400 	mov.w	r4, #0
 8006594:	0154      	lsls	r4, r2, #5
 8006596:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800659a:	014b      	lsls	r3, r1, #5
 800659c:	4619      	mov	r1, r3
 800659e:	4622      	mov	r2, r4
 80065a0:	1b49      	subs	r1, r1, r5
 80065a2:	eb62 0206 	sbc.w	r2, r2, r6
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	f04f 0400 	mov.w	r4, #0
 80065ae:	0194      	lsls	r4, r2, #6
 80065b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065b4:	018b      	lsls	r3, r1, #6
 80065b6:	1a5b      	subs	r3, r3, r1
 80065b8:	eb64 0402 	sbc.w	r4, r4, r2
 80065bc:	f04f 0100 	mov.w	r1, #0
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	00e2      	lsls	r2, r4, #3
 80065c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065ca:	00d9      	lsls	r1, r3, #3
 80065cc:	460b      	mov	r3, r1
 80065ce:	4614      	mov	r4, r2
 80065d0:	195b      	adds	r3, r3, r5
 80065d2:	eb44 0406 	adc.w	r4, r4, r6
 80065d6:	f04f 0100 	mov.w	r1, #0
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	02a2      	lsls	r2, r4, #10
 80065e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065e4:	0299      	lsls	r1, r3, #10
 80065e6:	460b      	mov	r3, r1
 80065e8:	4614      	mov	r4, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	4621      	mov	r1, r4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f04f 0400 	mov.w	r4, #0
 80065f4:	461a      	mov	r2, r3
 80065f6:	4623      	mov	r3, r4
 80065f8:	f7fa fb46 	bl	8000c88 <__aeabi_uldivmod>
 80065fc:	4603      	mov	r3, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006602:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <HAL_RCC_GetSysClockFreq+0x158>)
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	0c1b      	lsrs	r3, r3, #16
 8006608:	f003 0303 	and.w	r3, r3, #3
 800660c:	3301      	adds	r3, #1
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	fbb2 f3f3 	udiv	r3, r2, r3
 800661a:	60bb      	str	r3, [r7, #8]
      break;
 800661c:	e002      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 8006572:	4b30      	ldr	r3, [pc, #192]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	f04f 0400 	mov.w	r4, #0
 800657c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	ea03 0501 	and.w	r5, r3, r1
 8006588:	ea04 0602 	and.w	r6, r4, r2
 800658c:	4629      	mov	r1, r5
 800658e:	4632      	mov	r2, r6
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	f04f 0400 	mov.w	r4, #0
 8006598:	0154      	lsls	r4, r2, #5
 800659a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800659e:	014b      	lsls	r3, r1, #5
 80065a0:	4619      	mov	r1, r3
 80065a2:	4622      	mov	r2, r4
 80065a4:	1b49      	subs	r1, r1, r5
 80065a6:	eb62 0206 	sbc.w	r2, r2, r6
 80065aa:	f04f 0300 	mov.w	r3, #0
 80065ae:	f04f 0400 	mov.w	r4, #0
 80065b2:	0194      	lsls	r4, r2, #6
 80065b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80065b8:	018b      	lsls	r3, r1, #6
 80065ba:	1a5b      	subs	r3, r3, r1
 80065bc:	eb64 0402 	sbc.w	r4, r4, r2
 80065c0:	f04f 0100 	mov.w	r1, #0
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	00e2      	lsls	r2, r4, #3
 80065ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065ce:	00d9      	lsls	r1, r3, #3
 80065d0:	460b      	mov	r3, r1
 80065d2:	4614      	mov	r4, r2
 80065d4:	195b      	adds	r3, r3, r5
 80065d6:	eb44 0406 	adc.w	r4, r4, r6
 80065da:	f04f 0100 	mov.w	r1, #0
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	02a2      	lsls	r2, r4, #10
 80065e4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80065e8:	0299      	lsls	r1, r3, #10
 80065ea:	460b      	mov	r3, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	4618      	mov	r0, r3
 80065f0:	4621      	mov	r1, r4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f04f 0400 	mov.w	r4, #0
 80065f8:	461a      	mov	r2, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	f7fa fb44 	bl	8000c88 <__aeabi_uldivmod>
 8006600:	4603      	mov	r3, r0
 8006602:	460c      	mov	r4, r1
 8006604:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <HAL_RCC_GetSysClockFreq+0x158>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	3301      	adds	r3, #1
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	60bb      	str	r3, [r7, #8]
      break;
 8006620:	e002      	b.n	8006628 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006620:	60bb      	str	r3, [r7, #8]
      break;
 8006622:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006624:	68bb      	ldr	r3, [r7, #8]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	00f42400 	.word	0x00f42400
 8006638:	00bebc20 	.word	0x00bebc20

0800663c <HAL_RCC_GetHCLKFreq>:
=======
 8006622:	4b05      	ldr	r3, [pc, #20]	; (8006638 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006624:	60bb      	str	r3, [r7, #8]
      break;
 8006626:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006628:	68bb      	ldr	r3, [r7, #8]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006632:	bf00      	nop
 8006634:	40023800 	.word	0x40023800
 8006638:	00f42400 	.word	0x00f42400
 800663c:	00bebc20 	.word	0x00bebc20

08006640 <HAL_RCC_GetHCLKFreq>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006640:	4b03      	ldr	r3, [pc, #12]	; (8006650 <HAL_RCC_GetHCLKFreq+0x14>)
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000034 	.word	0x20000034

08006654 <HAL_RCC_GetPCLK1Freq>:
=======
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006644:	4b03      	ldr	r3, [pc, #12]	; (8006654 <HAL_RCC_GetHCLKFreq+0x14>)
 8006646:	681b      	ldr	r3, [r3, #0]
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000034 	.word	0x20000034

08006658 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006658:	f7ff fff0 	bl	800663c <HAL_RCC_GetHCLKFreq>
 800665c:	4601      	mov	r1, r0
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	0a9b      	lsrs	r3, r3, #10
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4a03      	ldr	r2, [pc, #12]	; (8006678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800666a:	5cd3      	ldrb	r3, [r2, r3]
 800666c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006670:	4618      	mov	r0, r3
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40023800 	.word	0x40023800
 8006678:	0800c180 	.word	0x0800c180

0800667c <HAL_RCC_GetPCLK2Freq>:
=======
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800665c:	f7ff fff0 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006660:	4601      	mov	r1, r0
 8006662:	4b05      	ldr	r3, [pc, #20]	; (8006678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	0a9b      	lsrs	r3, r3, #10
 8006668:	f003 0307 	and.w	r3, r3, #7
 800666c:	4a03      	ldr	r2, [pc, #12]	; (800667c <HAL_RCC_GetPCLK1Freq+0x24>)
 800666e:	5cd3      	ldrb	r3, [r2, r3]
 8006670:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	40023800 	.word	0x40023800
 800667c:	0800c180 	.word	0x0800c180

08006680 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006680:	f7ff ffdc 	bl	800663c <HAL_RCC_GetHCLKFreq>
 8006684:	4601      	mov	r1, r0
 8006686:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	0b5b      	lsrs	r3, r3, #13
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4a03      	ldr	r2, [pc, #12]	; (80066a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006692:	5cd3      	ldrb	r3, [r2, r3]
 8006694:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40023800 	.word	0x40023800
 80066a0:	0800c180 	.word	0x0800c180

080066a4 <HAL_SPI_Init>:
=======
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006684:	f7ff ffdc 	bl	8006640 <HAL_RCC_GetHCLKFreq>
 8006688:	4601      	mov	r1, r0
 800668a:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	0b5b      	lsrs	r3, r3, #13
 8006690:	f003 0307 	and.w	r3, r3, #7
 8006694:	4a03      	ldr	r2, [pc, #12]	; (80066a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006696:	5cd3      	ldrb	r3, [r2, r3]
 8006698:	fa21 f303 	lsr.w	r3, r1, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0800c180 	.word	0x0800c180

080066a8 <HAL_SPI_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
<<<<<<< HEAD
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e056      	b.n	8006764 <HAL_SPI_Init+0xc0>
=======
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e056      	b.n	8006768 <HAL_SPI_Init+0xc0>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
<<<<<<< HEAD
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d106      	bne.n	80066d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
=======
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
<<<<<<< HEAD
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7fd fcbf 	bl	8004054 <HAL_SPI_MspInit>
=======
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7fd fcbf 	bl	8004058 <HAL_SPI_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
<<<<<<< HEAD
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2202      	movs	r2, #2
 80066da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ec:	601a      	str	r2, [r3, #0]
=======
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2202      	movs	r2, #2
 80066de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f0:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
<<<<<<< HEAD
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69db      	ldr	r3, [r3, #28]
 8006718:	431a      	orrs	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	ea42 0103 	orr.w	r1, r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	601a      	str	r2, [r3, #0]
=======
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	431a      	orrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	431a      	orrs	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	ea42 0103 	orr.w	r1, r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	430a      	orrs	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
<<<<<<< HEAD
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	f003 0104 	and.w	r1, r3, #4
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
=======
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	0c1b      	lsrs	r3, r3, #16
 8006738:	f003 0104 	and.w	r1, r3, #4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	605a      	str	r2, [r3, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
<<<<<<< HEAD
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_SPI_Transmit>:
=======
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69da      	ldr	r2, [r3, #28]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006756:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_SPI_Transmit>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	77fb      	strb	r3, [r7, #31]
=======
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	77fb      	strb	r3, [r7, #31]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006786:	2b01      	cmp	r3, #1
 8006788:	d101      	bne.n	800678e <HAL_SPI_Transmit+0x22>
 800678a:	2302      	movs	r3, #2
 800678c:	e11e      	b.n	80069cc <HAL_SPI_Transmit+0x260>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006796:	f7fd ffa3 	bl	80046e0 <HAL_GetTick>
 800679a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d002      	beq.n	80067b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067ac:	2302      	movs	r3, #2
 80067ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067b0:	e103      	b.n	80069ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_SPI_Transmit+0x52>
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c2:	e0fa      	b.n	80069ba <HAL_SPI_Transmit+0x24e>
=======
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_SPI_Transmit+0x22>
 800678e:	2302      	movs	r3, #2
 8006790:	e11e      	b.n	80069d0 <HAL_SPI_Transmit+0x260>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800679a:	f7fd ffa3 	bl	80046e4 <HAL_GetTick>
 800679e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067a0:	88fb      	ldrh	r3, [r7, #6]
 80067a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d002      	beq.n	80067b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067b0:	2302      	movs	r3, #2
 80067b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067b4:	e103      	b.n	80069be <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_SPI_Transmit+0x52>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d102      	bne.n	80067c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067c6:	e0fa      	b.n	80069be <HAL_SPI_Transmit+0x24e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
<<<<<<< HEAD
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2203      	movs	r2, #3
 80067c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	88fa      	ldrh	r2, [r7, #6]
 80067e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680a:	d107      	bne.n	800681c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800681a:	601a      	str	r2, [r3, #0]
=======
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2203      	movs	r2, #3
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	88fa      	ldrh	r2, [r7, #6]
 80067e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	88fa      	ldrh	r2, [r7, #6]
 80067e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800680e:	d107      	bne.n	8006820 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800681e:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d007      	beq.n	800683a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006838:	601a      	str	r2, [r3, #0]
=======
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	d007      	beq.n	800683e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800683c:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006842:	d14b      	bne.n	80068dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_SPI_Transmit+0xe6>
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d13e      	bne.n	80068d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	881a      	ldrh	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	1c9a      	adds	r2, r3, #2
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b29a      	uxth	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006876:	e02b      	b.n	80068d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b02      	cmp	r3, #2
 8006884:	d112      	bne.n	80068ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688a:	881a      	ldrh	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006896:	1c9a      	adds	r2, r3, #2
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80068aa:	e011      	b.n	80068d0 <HAL_SPI_Transmit+0x164>
=======
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006846:	d14b      	bne.n	80068e0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <HAL_SPI_Transmit+0xe6>
 8006850:	8afb      	ldrh	r3, [r7, #22]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d13e      	bne.n	80068d4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	881a      	ldrh	r2, [r3, #0]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	1c9a      	adds	r2, r3, #2
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800687a:	e02b      	b.n	80068d4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b02      	cmp	r3, #2
 8006888:	d112      	bne.n	80068b0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	881a      	ldrh	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	1c9a      	adds	r2, r3, #2
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	3b01      	subs	r3, #1
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80068ae:	e011      	b.n	80068d4 <HAL_SPI_Transmit+0x164>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 80068ac:	f7fd ff18 	bl	80046e0 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d803      	bhi.n	80068c4 <HAL_SPI_Transmit+0x158>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d102      	bne.n	80068ca <HAL_SPI_Transmit+0x15e>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068ce:	e074      	b.n	80069ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1ce      	bne.n	8006878 <HAL_SPI_Transmit+0x10c>
 80068da:	e04c      	b.n	8006976 <HAL_SPI_Transmit+0x20a>
=======
 80068b0:	f7fd ff18 	bl	80046e4 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d803      	bhi.n	80068c8 <HAL_SPI_Transmit+0x158>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d102      	bne.n	80068ce <HAL_SPI_Transmit+0x15e>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d102      	bne.n	80068d4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068d2:	e074      	b.n	80069be <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ce      	bne.n	800687c <HAL_SPI_Transmit+0x10c>
 80068de:	e04c      	b.n	800697a <HAL_SPI_Transmit+0x20a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_SPI_Transmit+0x17e>
 80068e4:	8afb      	ldrh	r3, [r7, #22]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d140      	bne.n	800696c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006910:	e02c      	b.n	800696c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b02      	cmp	r3, #2
 800691e:	d113      	bne.n	8006948 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	86da      	strh	r2, [r3, #54]	; 0x36
 8006946:	e011      	b.n	800696c <HAL_SPI_Transmit+0x200>
=======
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_SPI_Transmit+0x17e>
 80068e8:	8afb      	ldrh	r3, [r7, #22]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d140      	bne.n	8006970 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	7812      	ldrb	r2, [r2, #0]
 80068fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006914:	e02c      	b.n	8006970 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d113      	bne.n	800694c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	330c      	adds	r3, #12
 800692e:	7812      	ldrb	r2, [r2, #0]
 8006930:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	86da      	strh	r2, [r3, #54]	; 0x36
 800694a:	e011      	b.n	8006970 <HAL_SPI_Transmit+0x200>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8006948:	f7fd feca 	bl	80046e0 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	429a      	cmp	r2, r3
 8006956:	d803      	bhi.n	8006960 <HAL_SPI_Transmit+0x1f4>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d102      	bne.n	8006966 <HAL_SPI_Transmit+0x1fa>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d102      	bne.n	800696c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	77fb      	strb	r3, [r7, #31]
          goto error;
 800696a:	e026      	b.n	80069ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1cd      	bne.n	8006912 <HAL_SPI_Transmit+0x1a6>
=======
 800694c:	f7fd feca 	bl	80046e4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	429a      	cmp	r2, r3
 800695a:	d803      	bhi.n	8006964 <HAL_SPI_Transmit+0x1f4>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d102      	bne.n	800696a <HAL_SPI_Transmit+0x1fa>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d102      	bne.n	8006970 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800696e:	e026      	b.n	80069be <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006974:	b29b      	uxth	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1cd      	bne.n	8006916 <HAL_SPI_Transmit+0x1a6>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fba4 	bl	80070c8 <SPI_EndRxTxTransaction>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
=======
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 fba4 	bl	80070cc <SPI_EndRxTxTransaction>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e000      	b.n	80069ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80069b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_SPI_Receive>:
=======
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	613b      	str	r3, [r7, #16]
 80069ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e000      	b.n	80069be <HAL_SPI_Transmit+0x24e>
  }

error:
 80069bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80069ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3720      	adds	r7, #32
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <HAL_SPI_Receive>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f0:	d112      	bne.n	8006a18 <HAL_SPI_Receive+0x44>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10e      	bne.n	8006a18 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2204      	movs	r2, #4
 80069fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a02:	88fa      	ldrh	r2, [r7, #6]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 f8e9 	bl	8006be6 <HAL_SPI_TransmitReceive>
 8006a14:	4603      	mov	r3, r0
 8006a16:	e0e2      	b.n	8006bde <HAL_SPI_Receive+0x20a>
=======
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069f4:	d112      	bne.n	8006a1c <HAL_SPI_Receive+0x44>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10e      	bne.n	8006a1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2204      	movs	r2, #4
 8006a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f8e9 	bl	8006bea <HAL_SPI_TransmitReceive>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	e0e2      	b.n	8006be2 <HAL_SPI_Receive+0x20a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_SPI_Receive+0x52>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e0db      	b.n	8006bde <HAL_SPI_Receive+0x20a>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a2e:	f7fd fe57 	bl	80046e0 <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
 8006a42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a44:	e0c2      	b.n	8006bcc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <HAL_SPI_Receive+0x7e>
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d102      	bne.n	8006a58 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a56:	e0b9      	b.n	8006bcc <HAL_SPI_Receive+0x1f8>
=======
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_SPI_Receive+0x52>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e0db      	b.n	8006be2 <HAL_SPI_Receive+0x20a>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a32:	f7fd fe57 	bl	80046e4 <HAL_GetTick>
 8006a36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d002      	beq.n	8006a4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a44:	2302      	movs	r3, #2
 8006a46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a48:	e0c2      	b.n	8006bd0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <HAL_SPI_Receive+0x7e>
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d102      	bne.n	8006a5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a5a:	e0b9      	b.n	8006bd0 <HAL_SPI_Receive+0x1f8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
<<<<<<< HEAD
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2200      	movs	r2, #0
 8006a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	88fa      	ldrh	r2, [r7, #6]
 8006a70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	88fa      	ldrh	r2, [r7, #6]
 8006a76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2204      	movs	r2, #4
 8006a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	88fa      	ldrh	r2, [r7, #6]
 8006a74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	88fa      	ldrh	r2, [r7, #6]
 8006a7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
<<<<<<< HEAD
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9e:	d107      	bne.n	8006ab0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006aae:	601a      	str	r2, [r3, #0]
=======
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa2:	d107      	bne.n	8006ab4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ab2:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d007      	beq.n	8006ace <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006acc:	601a      	str	r2, [r3, #0]
=======
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d007      	beq.n	8006ad2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad0:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
<<<<<<< HEAD
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d162      	bne.n	8006b9c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ad6:	e02e      	b.n	8006b36 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d115      	bne.n	8006b12 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f103 020c 	add.w	r2, r3, #12
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	7812      	ldrb	r2, [r2, #0]
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b10:	e011      	b.n	8006b36 <HAL_SPI_Receive+0x162>
=======
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d162      	bne.n	8006ba0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006ada:	e02e      	b.n	8006b3a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d115      	bne.n	8006b16 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f103 020c 	add.w	r2, r3, #12
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b14:	e011      	b.n	8006b3a <HAL_SPI_Receive+0x162>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8006b12:	f7fd fde5 	bl	80046e0 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d803      	bhi.n	8006b2a <HAL_SPI_Receive+0x156>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d102      	bne.n	8006b30 <HAL_SPI_Receive+0x15c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b34:	e04a      	b.n	8006bcc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1cb      	bne.n	8006ad8 <HAL_SPI_Receive+0x104>
 8006b40:	e031      	b.n	8006ba6 <HAL_SPI_Receive+0x1d2>
=======
 8006b16:	f7fd fde5 	bl	80046e4 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d803      	bhi.n	8006b2e <HAL_SPI_Receive+0x156>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d102      	bne.n	8006b34 <HAL_SPI_Receive+0x15c>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b38:	e04a      	b.n	8006bd0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1cb      	bne.n	8006adc <HAL_SPI_Receive+0x104>
 8006b44:	e031      	b.n	8006baa <HAL_SPI_Receive+0x1d2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
<<<<<<< HEAD
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d113      	bne.n	8006b78 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	b292      	uxth	r2, r2
 8006b5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	1c9a      	adds	r2, r3, #2
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b76:	e011      	b.n	8006b9c <HAL_SPI_Receive+0x1c8>
=======
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d113      	bne.n	8006b7c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	1c9a      	adds	r2, r3, #2
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b7a:	e011      	b.n	8006ba0 <HAL_SPI_Receive+0x1c8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
<<<<<<< HEAD
 8006b78:	f7fd fdb2 	bl	80046e0 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	683a      	ldr	r2, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d803      	bhi.n	8006b90 <HAL_SPI_Receive+0x1bc>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8e:	d102      	bne.n	8006b96 <HAL_SPI_Receive+0x1c2>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b9a:	e017      	b.n	8006bcc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1cd      	bne.n	8006b42 <HAL_SPI_Receive+0x16e>
=======
 8006b7c:	f7fd fdb2 	bl	80046e4 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d803      	bhi.n	8006b94 <HAL_SPI_Receive+0x1bc>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d102      	bne.n	8006b9a <HAL_SPI_Receive+0x1c2>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b9e:	e017      	b.n	8006bd0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1cd      	bne.n	8006b46 <HAL_SPI_Receive+0x16e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 fa27 	bl	8006ffe <SPI_EndRxTransaction>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d002      	beq.n	8006bbc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fa27 	bl	8007002 <SPI_EndRxTransaction>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
<<<<<<< HEAD
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
 8006bc8:	e000      	b.n	8006bcc <HAL_SPI_Receive+0x1f8>
  }

error :
 8006bca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_SPI_TransmitReceive>:
=======
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	75fb      	strb	r3, [r7, #23]
 8006bcc:	e000      	b.n	8006bd0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_SPI_TransmitReceive>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
<<<<<<< HEAD
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08c      	sub	sp, #48	; 0x30
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	607a      	str	r2, [r7, #4]
 8006bf2:	807b      	strh	r3, [r7, #2]
=======
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b08c      	sub	sp, #48	; 0x30
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	807b      	strh	r3, [r7, #2]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
<<<<<<< HEAD
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
=======
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
<<<<<<< HEAD
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x26>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e18a      	b.n	8006f22 <HAL_SPI_TransmitReceive+0x33c>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c14:	f7fd fd64 	bl	80046e0 <HAL_GetTick>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c2a:	887b      	ldrh	r3, [r7, #2]
 8006c2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d00f      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x70>
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3c:	d107      	bne.n	8006c4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <HAL_SPI_TransmitReceive+0x68>
 8006c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d003      	beq.n	8006c56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c54:	e15b      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d005      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x82>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0x82>
 8006c62:	887b      	ldrh	r3, [r7, #2]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d103      	bne.n	8006c70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c6e:	e14e      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
=======
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_SPI_TransmitReceive+0x26>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e18a      	b.n	8006f26 <HAL_SPI_TransmitReceive+0x33c>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c18:	f7fd fd64 	bl	80046e4 <HAL_GetTick>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c2e:	887b      	ldrh	r3, [r7, #2]
 8006c30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d00f      	beq.n	8006c5a <HAL_SPI_TransmitReceive+0x70>
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c40:	d107      	bne.n	8006c52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <HAL_SPI_TransmitReceive+0x68>
 8006c4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d003      	beq.n	8006c5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
 8006c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c58:	e15b      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <HAL_SPI_TransmitReceive+0x82>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_SPI_TransmitReceive+0x82>
 8006c66:	887b      	ldrh	r3, [r7, #2]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006c72:	e14e      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
<<<<<<< HEAD
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d003      	beq.n	8006c84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2205      	movs	r2, #5
 8006c80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
=======
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d003      	beq.n	8006c88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2205      	movs	r2, #5
 8006c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
<<<<<<< HEAD
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	887a      	ldrh	r2, [r7, #2]
 8006c94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	887a      	ldrh	r2, [r7, #2]
 8006c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	887a      	ldrh	r2, [r7, #2]
 8006ca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	887a      	ldrh	r2, [r7, #2]
 8006c98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	887a      	ldrh	r2, [r7, #2]
 8006c9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	887a      	ldrh	r2, [r7, #2]
 8006cb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
<<<<<<< HEAD
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d007      	beq.n	8006cd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd6:	601a      	str	r2, [r3, #0]
=======
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d007      	beq.n	8006cdc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cda:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
<<<<<<< HEAD
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce0:	d178      	bne.n	8006dd4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SPI_TransmitReceive+0x10a>
 8006cea:	8b7b      	ldrh	r3, [r7, #26]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d166      	bne.n	8006dbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d14:	e053      	b.n	8006dbe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d11b      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0x176>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d016      	beq.n	8006d5c <HAL_SPI_TransmitReceive+0x176>
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d113      	bne.n	8006d5c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d38:	881a      	ldrh	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	1c9a      	adds	r2, r3, #2
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	3b01      	subs	r3, #1
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	d178      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x10a>
 8006cee:	8b7b      	ldrh	r3, [r7, #26]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d166      	bne.n	8006dc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	881a      	ldrh	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	1c9a      	adds	r2, r3, #2
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	3b01      	subs	r3, #1
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d18:	e053      	b.n	8006dc2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d11b      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x176>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d016      	beq.n	8006d60 <HAL_SPI_TransmitReceive+0x176>
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d113      	bne.n	8006d60 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	881a      	ldrh	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	1c9a      	adds	r2, r3, #2
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d119      	bne.n	8006d9e <HAL_SPI_TransmitReceive+0x1b8>
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d014      	beq.n	8006d9e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d86:	1c9a      	adds	r2, r3, #2
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d9e:	f7fd fc9f 	bl	80046e0 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d807      	bhi.n	8006dbe <HAL_SPI_TransmitReceive+0x1d8>
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d003      	beq.n	8006dbe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dbc:	e0a7      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1a6      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x130>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1a1      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x130>
 8006dd2:	e07c      	b.n	8006ece <HAL_SPI_TransmitReceive+0x2e8>
=======
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d119      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x1b8>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d014      	beq.n	8006da2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	b292      	uxth	r2, r2
 8006d84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	1c9a      	adds	r2, r3, #2
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	3b01      	subs	r3, #1
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006da2:	f7fd fc9f 	bl	80046e4 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d807      	bhi.n	8006dc2 <HAL_SPI_TransmitReceive+0x1d8>
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d003      	beq.n	8006dc2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006dc0:	e0a7      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1a6      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x130>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1a1      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x130>
 8006dd6:	e07c      	b.n	8006ed2 <HAL_SPI_TransmitReceive+0x2e8>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
<<<<<<< HEAD
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <HAL_SPI_TransmitReceive+0x1fc>
 8006ddc:	8b7b      	ldrh	r3, [r7, #26]
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d16b      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	330c      	adds	r3, #12
 8006dec:	7812      	ldrb	r2, [r2, #0]
 8006dee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e08:	e057      	b.n	8006eba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d11c      	bne.n	8006e52 <HAL_SPI_TransmitReceive+0x26c>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d017      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0x26c>
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d114      	bne.n	8006e52 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	7812      	ldrb	r2, [r2, #0]
 8006e34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	1c5a      	adds	r2, r3, #1
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62fb      	str	r3, [r7, #44]	; 0x2c
=======
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_TransmitReceive+0x1fc>
 8006de0:	8b7b      	ldrh	r3, [r7, #26]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d16b      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	330c      	adds	r3, #12
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0c:	e057      	b.n	8006ebe <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d11c      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x26c>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <HAL_SPI_TransmitReceive+0x26c>
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d114      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e52:	2300      	movs	r3, #0
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
<<<<<<< HEAD
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d119      	bne.n	8006e94 <HAL_SPI_TransmitReceive+0x2ae>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e90:	2301      	movs	r3, #1
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e94:	f7fd fc24 	bl	80046e0 <HAL_GetTick>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d803      	bhi.n	8006eac <HAL_SPI_TransmitReceive+0x2c6>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d102      	bne.n	8006eb2 <HAL_SPI_TransmitReceive+0x2cc>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006eb8:	e029      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1a2      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x224>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d19d      	bne.n	8006e0a <HAL_SPI_TransmitReceive+0x224>
=======
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d119      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x2ae>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d014      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68da      	ldr	r2, [r3, #12]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e94:	2301      	movs	r3, #1
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e98:	f7fd fc24 	bl	80046e4 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d803      	bhi.n	8006eb0 <HAL_SPI_TransmitReceive+0x2c6>
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eae:	d102      	bne.n	8006eb6 <HAL_SPI_TransmitReceive+0x2cc>
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ebc:	e029      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1a2      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x224>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d19d      	bne.n	8006e0e <HAL_SPI_TransmitReceive+0x224>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
<<<<<<< HEAD
 8006ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f8f8 	bl	80070c8 <SPI_EndRxTxTransaction>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d006      	beq.n	8006eec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006eea:	e010      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
=======
 8006ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f8f8 	bl	80070cc <SPI_EndRxTxTransaction>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d006      	beq.n	8006ef0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006eee:	e010      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
<<<<<<< HEAD
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10b      	bne.n	8006f0c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	e000      	b.n	8006f0e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f0c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3730      	adds	r7, #48	; 0x30
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <SPI_WaitFlagStateUntilTimeout>:
=======
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	e000      	b.n	8006f12 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3730      	adds	r7, #48	; 0x30
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <SPI_WaitFlagStateUntilTimeout>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	603b      	str	r3, [r7, #0]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f3a:	e04c      	b.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f42:	d048      	beq.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f44:	f7fd fbcc 	bl	80046e0 <HAL_GetTick>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d902      	bls.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d13d      	bne.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xac>
=======
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	60f8      	str	r0, [r7, #12]
 8006f36:	60b9      	str	r1, [r7, #8]
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f3e:	e04c      	b.n	8006fda <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f46:	d048      	beq.n	8006fda <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f48:	f7fd fbcc 	bl	80046e4 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d902      	bls.n	8006f5e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d13d      	bne.n	8006fda <SPI_WaitFlagStateUntilTimeout+0xac>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
<<<<<<< HEAD
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f72:	d111      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f7c:	d004      	beq.n	8006f88 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d107      	bne.n	8006f98 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f96:	601a      	str	r2, [r3, #0]
=======
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f76:	d111      	bne.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f80:	d004      	beq.n	8006f8c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8a:	d107      	bne.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f9a:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
<<<<<<< HEAD
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa0:	d10f      	bne.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e00f      	b.n	8006ff6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689a      	ldr	r2, [r3, #8]
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	bf0c      	ite	eq
 8006fe6:	2301      	moveq	r3, #1
 8006fe8:	2300      	movne	r3, #0
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	461a      	mov	r2, r3
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d1a3      	bne.n	8006f3c <SPI_WaitFlagStateUntilTimeout+0x12>
=======
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fa4:	d10f      	bne.n	8006fc6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2201      	movs	r2, #1
 8006fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e00f      	b.n	8006ffa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	bf0c      	ite	eq
 8006fea:	2301      	moveq	r3, #1
 8006fec:	2300      	movne	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d1a3      	bne.n	8006f40 <SPI_WaitFlagStateUntilTimeout+0x12>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <SPI_EndRxTransaction>:
=======
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <SPI_EndRxTransaction>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af02      	add	r7, sp, #8
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	60b9      	str	r1, [r7, #8]
 8007008:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007012:	d111      	bne.n	8007038 <SPI_EndRxTransaction+0x3a>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800701c:	d004      	beq.n	8007028 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007026:	d107      	bne.n	8007038 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007036:	601a      	str	r2, [r3, #0]
=======
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af02      	add	r7, sp, #8
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007016:	d111      	bne.n	800703c <SPI_EndRxTransaction+0x3a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007020:	d004      	beq.n	800702c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702a:	d107      	bne.n	800703c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
<<<<<<< HEAD
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007040:	d12a      	bne.n	8007098 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704a:	d012      	beq.n	8007072 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	2180      	movs	r1, #128	; 0x80
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff ff67 	bl	8006f2a <SPI_WaitFlagStateUntilTimeout>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d02d      	beq.n	80070be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007066:	f043 0220 	orr.w	r2, r3, #32
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e026      	b.n	80070c0 <SPI_EndRxTransaction+0xc2>
=======
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007044:	d12a      	bne.n	800709c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800704e:	d012      	beq.n	8007076 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff ff67 	bl	8006f2e <SPI_WaitFlagStateUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d02d      	beq.n	80070c2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e026      	b.n	80070c4 <SPI_EndRxTransaction+0xc2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2200      	movs	r2, #0
 800707a:	2101      	movs	r1, #1
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f7ff ff54 	bl	8006f2a <SPI_WaitFlagStateUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e013      	b.n	80070c0 <SPI_EndRxTransaction+0xc2>
=======
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	2101      	movs	r1, #1
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f7ff ff54 	bl	8006f2e <SPI_WaitFlagStateUntilTimeout>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d01a      	beq.n	80070c2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e013      	b.n	80070c4 <SPI_EndRxTransaction+0xc2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
<<<<<<< HEAD
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2200      	movs	r2, #0
 80070a0:	2101      	movs	r1, #1
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f7ff ff41 	bl	8006f2a <SPI_WaitFlagStateUntilTimeout>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b2:	f043 0220 	orr.w	r2, r3, #32
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e000      	b.n	80070c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <SPI_EndRxTxTransaction>:
=======
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	2200      	movs	r2, #0
 80070a4:	2101      	movs	r1, #1
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff ff41 	bl	8006f2e <SPI_WaitFlagStateUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b6:	f043 0220 	orr.w	r2, r3, #32
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e000      	b.n	80070c4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <SPI_EndRxTxTransaction>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
<<<<<<< HEAD
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b088      	sub	sp, #32
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070d4:	4b1b      	ldr	r3, [pc, #108]	; (8007144 <SPI_EndRxTxTransaction+0x7c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <SPI_EndRxTxTransaction+0x80>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	0d5b      	lsrs	r3, r3, #21
 80070e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f2:	d112      	bne.n	800711a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	9300      	str	r3, [sp, #0]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	2180      	movs	r1, #128	; 0x80
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff ff13 	bl	8006f2a <SPI_WaitFlagStateUntilTimeout>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710e:	f043 0220 	orr.w	r2, r3, #32
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e00f      	b.n	800713a <SPI_EndRxTxTransaction+0x72>
=======
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b088      	sub	sp, #32
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <SPI_EndRxTxTransaction+0x7c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1b      	ldr	r2, [pc, #108]	; (800714c <SPI_EndRxTxTransaction+0x80>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	0d5b      	lsrs	r3, r3, #21
 80070e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
 80070ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070f6:	d112      	bne.n	800711e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	9300      	str	r3, [sp, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff ff13 	bl	8006f2e <SPI_WaitFlagStateUntilTimeout>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d016      	beq.n	800713c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007112:	f043 0220 	orr.w	r2, r3, #32
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e00f      	b.n	800713e <SPI_EndRxTxTransaction+0x72>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
<<<<<<< HEAD
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <SPI_EndRxTxTransaction+0x6e>
=======
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <SPI_EndRxTxTransaction+0x6e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
        break;
      }
      count--;
<<<<<<< HEAD
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	3b01      	subs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d0f2      	beq.n	800711a <SPI_EndRxTxTransaction+0x52>
 8007134:	e000      	b.n	8007138 <SPI_EndRxTxTransaction+0x70>
        break;
 8007136:	bf00      	nop
  }

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3718      	adds	r7, #24
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	20000034 	.word	0x20000034
 8007148:	165e9f81 	.word	0x165e9f81

0800714c <HAL_TIM_Base_Init>:
=======
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	3b01      	subs	r3, #1
 8007128:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007134:	2b80      	cmp	r3, #128	; 0x80
 8007136:	d0f2      	beq.n	800711e <SPI_EndRxTxTransaction+0x52>
 8007138:	e000      	b.n	800713c <SPI_EndRxTxTransaction+0x70>
        break;
 800713a:	bf00      	nop
  }

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000034 	.word	0x20000034
 800714c:	165e9f81 	.word	0x165e9f81

08007150 <HAL_TIM_Base_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e01d      	b.n	800719a <HAL_TIM_Base_Init+0x4e>
=======
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e01d      	b.n	800719e <HAL_TIM_Base_Init+0x4e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d106      	bne.n	800717c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f7fd f86a 	bl	800424c <HAL_TIM_Base_MspInit>
=======
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fd f86a 	bl	8004250 <HAL_TIM_Base_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f000 fb56 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_Base_Start_IT>:
=======
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	4619      	mov	r1, r3
 800718e:	4610      	mov	r0, r2
 8007190:	f000 fb56 	bl	8007840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_Base_Start_IT>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
=======
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b06      	cmp	r3, #6
 80071ca:	d007      	beq.n	80071dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f042 0201 	orr.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]
=======
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 0307 	and.w	r3, r3, #7
 80071c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b06      	cmp	r3, #6
 80071ce:	d007      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_TIM_PWM_Init>:
=======
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_TIM_PWM_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d101      	bne.n	80071fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e01d      	b.n	8007238 <HAL_TIM_PWM_Init+0x4e>
=======
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e01d      	b.n	800723c <HAL_TIM_PWM_Init+0x4e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d106      	bne.n	8007216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d106      	bne.n	800721a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7fc ff67 	bl	80040e4 <HAL_TIM_PWM_MspInit>
=======
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fc ff67 	bl	80040e8 <HAL_TIM_PWM_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 fb07 	bl	800783c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_TIM_PWM_Start>:
=======
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3304      	adds	r3, #4
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f000 fb07 	bl	8007840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_PWM_Start>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
=======
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fd42 	bl	8007cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a15      	ldr	r2, [pc, #84]	; (80072b4 <HAL_TIM_PWM_Start+0x74>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_PWM_Start+0x2c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a14      	ldr	r2, [pc, #80]	; (80072b8 <HAL_TIM_PWM_Start+0x78>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d101      	bne.n	8007270 <HAL_TIM_PWM_Start+0x30>
 800726c:	2301      	movs	r3, #1
 800726e:	e000      	b.n	8007272 <HAL_TIM_PWM_Start+0x32>
 8007270:	2300      	movs	r3, #0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d007      	beq.n	8007286 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007284:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2201      	movs	r2, #1
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fd42 	bl	8007ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a15      	ldr	r2, [pc, #84]	; (80072b8 <HAL_TIM_PWM_Start+0x74>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d004      	beq.n	8007270 <HAL_TIM_PWM_Start+0x2c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a14      	ldr	r2, [pc, #80]	; (80072bc <HAL_TIM_PWM_Start+0x78>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d101      	bne.n	8007274 <HAL_TIM_PWM_Start+0x30>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <HAL_TIM_PWM_Start+0x32>
 8007274:	2300      	movs	r3, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007288:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b06      	cmp	r3, #6
 8007296:	d007      	beq.n	80072a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
=======
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2b06      	cmp	r3, #6
 800729a:	d007      	beq.n	80072ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40010000 	.word	0x40010000
 80072b8:	40010400 	.word	0x40010400

080072bc <HAL_TIM_Encoder_Init>:
=======
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400

080072c0 <HAL_TIM_Encoder_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
=======
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e083      	b.n	80073d8 <HAL_TIM_Encoder_Init+0x11c>
=======
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e083      	b.n	80073dc <HAL_TIM_Encoder_Init+0x11c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d106      	bne.n	80072ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f7fc ff35 	bl	8004154 <HAL_TIM_Encoder_MspInit>
=======
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fc ff35 	bl	8004158 <HAL_TIM_Encoder_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3304      	adds	r3, #4
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f000 fa93 	bl	800783c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	021b      	lsls	r3, r3, #8
 800734e:	4313      	orrs	r3, r2
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800735c:	f023 030c 	bic.w	r3, r3, #12
 8007360:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	4313      	orrs	r3, r2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	011a      	lsls	r2, r3, #4
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	031b      	lsls	r3, r3, #12
 800738c:	4313      	orrs	r3, r2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	4313      	orrs	r3, r2
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2201      	movs	r2, #1
 80073d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_TIM_Encoder_Start>:
=======
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007304:	f023 0307 	bic.w	r3, r3, #7
 8007308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3304      	adds	r3, #4
 8007312:	4619      	mov	r1, r3
 8007314:	4610      	mov	r0, r2
 8007316:	f000 fa93 	bl	8007840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	021b      	lsls	r3, r3, #8
 8007352:	4313      	orrs	r3, r2
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007360:	f023 030c 	bic.w	r3, r3, #12
 8007364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800736c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	021b      	lsls	r3, r3, #8
 800737c:	4313      	orrs	r3, r2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	011a      	lsls	r2, r3, #4
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	031b      	lsls	r3, r3, #12
 8007390:	4313      	orrs	r3, r2
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4313      	orrs	r3, r2
 8007396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	011b      	lsls	r3, r3, #4
 80073b2:	4313      	orrs	r3, r2
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_TIM_Encoder_Start>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
=======
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_TIM_Encoder_Start+0x16>
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d008      	beq.n	8007406 <HAL_TIM_Encoder_Start+0x26>
 80073f4:	e00f      	b.n	8007416 <HAL_TIM_Encoder_Start+0x36>
=======
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <HAL_TIM_Encoder_Start+0x16>
 80073f4:	2b04      	cmp	r3, #4
 80073f6:	d008      	beq.n	800740a <HAL_TIM_Encoder_Start+0x26>
 80073f8:	e00f      	b.n	800741a <HAL_TIM_Encoder_Start+0x36>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2201      	movs	r2, #1
 80073fc:	2100      	movs	r1, #0
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fc6c 	bl	8007cdc <TIM_CCxChannelCmd>
      break;
 8007404:	e016      	b.n	8007434 <HAL_TIM_Encoder_Start+0x54>
=======
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2201      	movs	r2, #1
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f000 fc6c 	bl	8007ce0 <TIM_CCxChannelCmd>
      break;
 8007408:	e016      	b.n	8007438 <HAL_TIM_Encoder_Start+0x54>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2201      	movs	r2, #1
 800740c:	2104      	movs	r1, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fc64 	bl	8007cdc <TIM_CCxChannelCmd>
      break;
 8007414:	e00e      	b.n	8007434 <HAL_TIM_Encoder_Start+0x54>
=======
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2201      	movs	r2, #1
 8007410:	2104      	movs	r1, #4
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fc64 	bl	8007ce0 <TIM_CCxChannelCmd>
      break;
 8007418:	e00e      	b.n	8007438 <HAL_TIM_Encoder_Start+0x54>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2201      	movs	r2, #1
 800741c:	2100      	movs	r1, #0
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fc5c 	bl	8007cdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2201      	movs	r2, #1
 800742a:	2104      	movs	r1, #4
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fc55 	bl	8007cdc <TIM_CCxChannelCmd>
      break;
 8007432:	bf00      	nop
=======
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2201      	movs	r2, #1
 8007420:	2100      	movs	r1, #0
 8007422:	4618      	mov	r0, r3
 8007424:	f000 fc5c 	bl	8007ce0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2201      	movs	r2, #1
 800742e:	2104      	movs	r1, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fc55 	bl	8007ce0 <TIM_CCxChannelCmd>
      break;
 8007436:	bf00      	nop
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_IRQHandler>:
=======
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <HAL_TIM_IRQHandler>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800744e:	b580      	push	{r7, lr}
 8007450:	b082      	sub	sp, #8
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	f003 0302 	and.w	r3, r3, #2
 8007460:	2b02      	cmp	r3, #2
 8007462:	d122      	bne.n	80074aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d11b      	bne.n	80074aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f06f 0202 	mvn.w	r2, #2
 800747a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_TIM_IRQHandler+0x4a>
=======
 8007452:	b580      	push	{r7, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b02      	cmp	r3, #2
 8007466:	d122      	bne.n	80074ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0302 	and.w	r3, r3, #2
 8007472:	2b02      	cmp	r3, #2
 8007474:	d11b      	bne.n	80074ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f06f 0202 	mvn.w	r2, #2
 800747e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	2b00      	cmp	r3, #0
 8007492:	d003      	beq.n	800749c <HAL_TIM_IRQHandler+0x4a>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f9b5 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 8007496:	e005      	b.n	80074a4 <HAL_TIM_IRQHandler+0x56>
=======
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f9b5 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 800749a:	e005      	b.n	80074a8 <HAL_TIM_IRQHandler+0x56>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9a7 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f9b8 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	771a      	strb	r2, [r3, #28]
=======
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f9a7 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9b8 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	771a      	strb	r2, [r3, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b04      	cmp	r3, #4
 80074b6:	d122      	bne.n	80074fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d11b      	bne.n	80074fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f06f 0204 	mvn.w	r2, #4
 80074ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_TIM_IRQHandler+0x9e>
=======
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d122      	bne.n	8007502 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d11b      	bne.n	8007502 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f06f 0204 	mvn.w	r2, #4
 80074d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f98b 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 80074ea:	e005      	b.n	80074f8 <HAL_TIM_IRQHandler+0xaa>
=======
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f98b 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 80074ee:	e005      	b.n	80074fc <HAL_TIM_IRQHandler+0xaa>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f97d 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f98e 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	771a      	strb	r2, [r3, #28]
=======
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f97d 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f98e 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	771a      	strb	r2, [r3, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d122      	bne.n	8007552 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b08      	cmp	r3, #8
 8007518:	d11b      	bne.n	8007552 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f06f 0208 	mvn.w	r2, #8
 8007522:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2204      	movs	r2, #4
 8007528:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	f003 0303 	and.w	r3, r3, #3
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_TIM_IRQHandler+0xf2>
=======
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0308 	and.w	r3, r3, #8
 800750c:	2b08      	cmp	r3, #8
 800750e:	d122      	bne.n	8007556 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b08      	cmp	r3, #8
 800751c:	d11b      	bne.n	8007556 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f06f 0208 	mvn.w	r2, #8
 8007526:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f003 0303 	and.w	r3, r3, #3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d003      	beq.n	8007544 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f961 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 800753e:	e005      	b.n	800754c <HAL_TIM_IRQHandler+0xfe>
=======
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f961 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007542:	e005      	b.n	8007550 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f953 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f964 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	771a      	strb	r2, [r3, #28]
=======
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f953 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f964 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	771a      	strb	r2, [r3, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	2b10      	cmp	r3, #16
 800755e:	d122      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d11b      	bne.n	80075a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0210 	mvn.w	r2, #16
 8007576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2208      	movs	r2, #8
 800757c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_TIM_IRQHandler+0x146>
=======
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b10      	cmp	r3, #16
 8007562:	d122      	bne.n	80075aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b10      	cmp	r3, #16
 8007570:	d11b      	bne.n	80075aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f06f 0210 	mvn.w	r2, #16
 800757a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2208      	movs	r2, #8
 8007580:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_TIM_IRQHandler+0x146>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f937 	bl	8007800 <HAL_TIM_IC_CaptureCallback>
 8007592:	e005      	b.n	80075a0 <HAL_TIM_IRQHandler+0x152>
=======
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f937 	bl	8007804 <HAL_TIM_IC_CaptureCallback>
 8007596:	e005      	b.n	80075a4 <HAL_TIM_IRQHandler+0x152>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f929 	bl	80077ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f93a 	bl	8007814 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	771a      	strb	r2, [r3, #28]
=======
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f929 	bl	80077f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f93a 	bl	8007818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	771a      	strb	r2, [r3, #28]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d10e      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d107      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f06f 0201 	mvn.w	r2, #1
 80075ca:	611a      	str	r2, [r3, #16]
=======
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10e      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d107      	bne.n	80075d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f06f 0201 	mvn.w	r2, #1
 80075ce:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fb fa47 	bl	8002a60 <HAL_TIM_PeriodElapsedCallback>
=======
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7fb fa45 	bl	8002a60 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075dc:	2b80      	cmp	r3, #128	; 0x80
 80075de:	d10e      	bne.n	80075fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ea:	2b80      	cmp	r3, #128	; 0x80
 80075ec:	d107      	bne.n	80075fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075f6:	611a      	str	r2, [r3, #16]
=======
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d10e      	bne.n	8007602 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ee:	2b80      	cmp	r3, #128	; 0x80
 80075f0:	d107      	bne.n	8007602 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075fa:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc6d 	bl	8007ed8 <HAL_TIMEx_BreakCallback>
=======
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc6d 	bl	8007edc <HAL_TIMEx_BreakCallback>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007608:	2b40      	cmp	r3, #64	; 0x40
 800760a:	d10e      	bne.n	800762a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d107      	bne.n	800762a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007622:	611a      	str	r2, [r3, #16]
=======
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d10e      	bne.n	800762e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761a:	2b40      	cmp	r3, #64	; 0x40
 800761c:	d107      	bne.n	800762e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007626:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f8ff 	bl	8007828 <HAL_TIM_TriggerCallback>
=======
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f8ff 	bl	800782c <HAL_TIM_TriggerCallback>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b20      	cmp	r3, #32
 8007636:	d10e      	bne.n	8007656 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b20      	cmp	r3, #32
 8007644:	d107      	bne.n	8007656 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0220 	mvn.w	r2, #32
 800764e:	611a      	str	r2, [r3, #16]
=======
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b20      	cmp	r3, #32
 800763a:	d10e      	bne.n	800765a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b20      	cmp	r3, #32
 8007648:	d107      	bne.n	800765a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f06f 0220 	mvn.w	r2, #32
 8007652:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc37 	bl	8007ec4 <HAL_TIMEx_CommutCallback>
=======
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fc37 	bl	8007ec8 <HAL_TIMEx_CommutCallback>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
	...

08007660 <HAL_TIM_PWM_ConfigChannel>:
=======
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
=======
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007672:	2b01      	cmp	r3, #1
 8007674:	d101      	bne.n	800767a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007676:	2302      	movs	r3, #2
 8007678:	e0b4      	b.n	80077e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b0c      	cmp	r3, #12
 800768e:	f200 809f 	bhi.w	80077d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007692:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076cd 	.word	0x080076cd
 800769c:	080077d1 	.word	0x080077d1
 80076a0:	080077d1 	.word	0x080077d1
 80076a4:	080077d1 	.word	0x080077d1
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	080077d1 	.word	0x080077d1
 80076b0:	080077d1 	.word	0x080077d1
 80076b4:	080077d1 	.word	0x080077d1
 80076b8:	0800774f 	.word	0x0800774f
 80076bc:	080077d1 	.word	0x080077d1
 80076c0:	080077d1 	.word	0x080077d1
 80076c4:	080077d1 	.word	0x080077d1
 80076c8:	0800778f 	.word	0x0800778f
=======
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800767a:	2302      	movs	r3, #2
 800767c:	e0b4      	b.n	80077e8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2202      	movs	r2, #2
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b0c      	cmp	r3, #12
 8007692:	f200 809f 	bhi.w	80077d4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080077d5 	.word	0x080077d5
 80076a4:	080077d5 	.word	0x080077d5
 80076a8:	080077d5 	.word	0x080077d5
 80076ac:	08007711 	.word	0x08007711
 80076b0:	080077d5 	.word	0x080077d5
 80076b4:	080077d5 	.word	0x080077d5
 80076b8:	080077d5 	.word	0x080077d5
 80076bc:	08007753 	.word	0x08007753
 80076c0:	080077d5 	.word	0x080077d5
 80076c4:	080077d5 	.word	0x080077d5
 80076c8:	080077d5 	.word	0x080077d5
 80076cc:	08007793 	.word	0x08007793
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68b9      	ldr	r1, [r7, #8]
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 f952 	bl	800797c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0208 	orr.w	r2, r2, #8
 80076e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0204 	bic.w	r2, r2, #4
 80076f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6999      	ldr	r1, [r3, #24]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	691a      	ldr	r2, [r3, #16]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	619a      	str	r2, [r3, #24]
      break;
 800770a:	e062      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68b9      	ldr	r1, [r7, #8]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f000 f952 	bl	8007980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0208 	orr.w	r2, r2, #8
 80076ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0204 	bic.w	r2, r2, #4
 80076fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6999      	ldr	r1, [r3, #24]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	619a      	str	r2, [r3, #24]
      break;
 800770e:	e062      	b.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 f9a2 	bl	8007a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	021a      	lsls	r2, r3, #8
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	619a      	str	r2, [r3, #24]
      break;
 800774c:	e041      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f9a2 	bl	8007a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	699a      	ldr	r2, [r3, #24]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6999      	ldr	r1, [r3, #24]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	021a      	lsls	r2, r3, #8
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	619a      	str	r2, [r3, #24]
      break;
 8007750:	e041      	b.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	4618      	mov	r0, r3
 8007756:	f000 f9f7 	bl	8007b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69da      	ldr	r2, [r3, #28]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0208 	orr.w	r2, r2, #8
 8007768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0204 	bic.w	r2, r2, #4
 8007778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69d9      	ldr	r1, [r3, #28]
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	61da      	str	r2, [r3, #28]
      break;
 800778c:	e021      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68b9      	ldr	r1, [r7, #8]
 8007758:	4618      	mov	r0, r3
 800775a:	f000 f9f7 	bl	8007b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69da      	ldr	r2, [r3, #28]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f042 0208 	orr.w	r2, r2, #8
 800776c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0204 	bic.w	r2, r2, #4
 800777c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69d9      	ldr	r1, [r3, #28]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	61da      	str	r2, [r3, #28]
      break;
 8007790:	e021      	b.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fa4b 	bl	8007c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	021a      	lsls	r2, r3, #8
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	61da      	str	r2, [r3, #28]
      break;
 80077ce:	e000      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fa4b 	bl	8007c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69da      	ldr	r2, [r3, #28]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69d9      	ldr	r1, [r3, #28]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	61da      	str	r2, [r3, #28]
      break;
 80077d2:	e000      	b.n	80077d6 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    }

    default:
      break;
<<<<<<< HEAD
 80077d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80077d4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
=======
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_IC_CaptureCallback>:
=======
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
=======
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
=======
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_TIM_TriggerCallback>:
=======
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_TriggerCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
=======
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TIM_Base_SetConfig>:
=======
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <TIM_Base_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a40      	ldr	r2, [pc, #256]	; (8007950 <TIM_Base_SetConfig+0x114>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d013      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785a:	d00f      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3d      	ldr	r2, [pc, #244]	; (8007954 <TIM_Base_SetConfig+0x118>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00b      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a3c      	ldr	r2, [pc, #240]	; (8007958 <TIM_Base_SetConfig+0x11c>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d007      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a3b      	ldr	r2, [pc, #236]	; (800795c <TIM_Base_SetConfig+0x120>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d003      	beq.n	800787c <TIM_Base_SetConfig+0x40>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a3a      	ldr	r2, [pc, #232]	; (8007960 <TIM_Base_SetConfig+0x124>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d108      	bne.n	800788e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2f      	ldr	r2, [pc, #188]	; (8007950 <TIM_Base_SetConfig+0x114>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d02b      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789c:	d027      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2c      	ldr	r2, [pc, #176]	; (8007954 <TIM_Base_SetConfig+0x118>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d023      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2b      	ldr	r2, [pc, #172]	; (8007958 <TIM_Base_SetConfig+0x11c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d01f      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2a      	ldr	r2, [pc, #168]	; (800795c <TIM_Base_SetConfig+0x120>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d01b      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a29      	ldr	r2, [pc, #164]	; (8007960 <TIM_Base_SetConfig+0x124>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d017      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a28      	ldr	r2, [pc, #160]	; (8007964 <TIM_Base_SetConfig+0x128>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d013      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a27      	ldr	r2, [pc, #156]	; (8007968 <TIM_Base_SetConfig+0x12c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00f      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a26      	ldr	r2, [pc, #152]	; (800796c <TIM_Base_SetConfig+0x130>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d00b      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a25      	ldr	r2, [pc, #148]	; (8007970 <TIM_Base_SetConfig+0x134>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d007      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a24      	ldr	r2, [pc, #144]	; (8007974 <TIM_Base_SetConfig+0x138>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a23      	ldr	r2, [pc, #140]	; (8007978 <TIM_Base_SetConfig+0x13c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d108      	bne.n	8007900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
=======
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a40      	ldr	r2, [pc, #256]	; (8007954 <TIM_Base_SetConfig+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d013      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785e:	d00f      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a3d      	ldr	r2, [pc, #244]	; (8007958 <TIM_Base_SetConfig+0x118>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00b      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a3c      	ldr	r2, [pc, #240]	; (800795c <TIM_Base_SetConfig+0x11c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d007      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a3b      	ldr	r2, [pc, #236]	; (8007960 <TIM_Base_SetConfig+0x120>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3a      	ldr	r2, [pc, #232]	; (8007964 <TIM_Base_SetConfig+0x124>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d108      	bne.n	8007892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <TIM_Base_SetConfig+0x114>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d02b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a0:	d027      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a2c      	ldr	r2, [pc, #176]	; (8007958 <TIM_Base_SetConfig+0x118>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d023      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a2b      	ldr	r2, [pc, #172]	; (800795c <TIM_Base_SetConfig+0x11c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d01f      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <TIM_Base_SetConfig+0x120>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d01b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a29      	ldr	r2, [pc, #164]	; (8007964 <TIM_Base_SetConfig+0x124>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d017      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a28      	ldr	r2, [pc, #160]	; (8007968 <TIM_Base_SetConfig+0x128>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d013      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a27      	ldr	r2, [pc, #156]	; (800796c <TIM_Base_SetConfig+0x12c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00f      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a26      	ldr	r2, [pc, #152]	; (8007970 <TIM_Base_SetConfig+0x130>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00b      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a25      	ldr	r2, [pc, #148]	; (8007974 <TIM_Base_SetConfig+0x134>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d007      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a24      	ldr	r2, [pc, #144]	; (8007978 <TIM_Base_SetConfig+0x138>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a23      	ldr	r2, [pc, #140]	; (800797c <TIM_Base_SetConfig+0x13c>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d108      	bne.n	8007904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <TIM_Base_SetConfig+0x114>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d003      	beq.n	8007934 <TIM_Base_SetConfig+0xf8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a0c      	ldr	r2, [pc, #48]	; (8007960 <TIM_Base_SetConfig+0x124>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d103      	bne.n	800793c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a0a      	ldr	r2, [pc, #40]	; (8007954 <TIM_Base_SetConfig+0x114>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d003      	beq.n	8007938 <TIM_Base_SetConfig+0xf8>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a0c      	ldr	r2, [pc, #48]	; (8007964 <TIM_Base_SetConfig+0x124>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d103      	bne.n	8007940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691a      	ldr	r2, [r3, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	615a      	str	r2, [r3, #20]
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40000c00 	.word	0x40000c00
 8007960:	40010400 	.word	0x40010400
 8007964:	40014000 	.word	0x40014000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800
 8007970:	40001800 	.word	0x40001800
 8007974:	40001c00 	.word	0x40001c00
 8007978:	40002000 	.word	0x40002000

0800797c <TIM_OC1_SetConfig>:
=======
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	615a      	str	r2, [r3, #20]
}
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40010000 	.word	0x40010000
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40010400 	.word	0x40010400
 8007968:	40014000 	.word	0x40014000
 800796c:	40014400 	.word	0x40014400
 8007970:	40014800 	.word	0x40014800
 8007974:	40001800 	.word	0x40001800
 8007978:	40001c00 	.word	0x40001c00
 800797c:	40002000 	.word	0x40002000

08007980 <TIM_OC1_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
=======
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	f023 0201 	bic.w	r2, r3, #1
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0303 	bic.w	r3, r3, #3
 80079b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f023 0302 	bic.w	r3, r3, #2
 80079c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a20      	ldr	r2, [pc, #128]	; (8007a54 <TIM_OC1_SetConfig+0xd8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d003      	beq.n	80079e0 <TIM_OC1_SetConfig+0x64>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a1f      	ldr	r2, [pc, #124]	; (8007a58 <TIM_OC1_SetConfig+0xdc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10c      	bne.n	80079fa <TIM_OC1_SetConfig+0x7e>
=======
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0201 	bic.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f023 0303 	bic.w	r3, r3, #3
 80079b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f023 0302 	bic.w	r3, r3, #2
 80079c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <TIM_OC1_SetConfig+0xd8>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_OC1_SetConfig+0x64>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a1f      	ldr	r2, [pc, #124]	; (8007a5c <TIM_OC1_SetConfig+0xdc>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d10c      	bne.n	80079fe <TIM_OC1_SetConfig+0x7e>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f023 0308 	bic.w	r3, r3, #8
 80079e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f023 0304 	bic.w	r3, r3, #4
 80079f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a15      	ldr	r2, [pc, #84]	; (8007a54 <TIM_OC1_SetConfig+0xd8>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d003      	beq.n	8007a0a <TIM_OC1_SetConfig+0x8e>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <TIM_OC1_SetConfig+0xdc>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d111      	bne.n	8007a2e <TIM_OC1_SetConfig+0xb2>
=======
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0308 	bic.w	r3, r3, #8
 80079ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 0304 	bic.w	r3, r3, #4
 80079fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a15      	ldr	r2, [pc, #84]	; (8007a58 <TIM_OC1_SetConfig+0xd8>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d003      	beq.n	8007a0e <TIM_OC1_SetConfig+0x8e>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a14      	ldr	r2, [pc, #80]	; (8007a5c <TIM_OC1_SetConfig+0xdc>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d111      	bne.n	8007a32 <TIM_OC1_SetConfig+0xb2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	613b      	str	r3, [r7, #16]
=======
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	621a      	str	r2, [r3, #32]
}
 8007a48:	bf00      	nop
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	40010000 	.word	0x40010000
 8007a58:	40010400 	.word	0x40010400

08007a5c <TIM_OC2_SetConfig>:
=======
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	685a      	ldr	r2, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	621a      	str	r2, [r3, #32]
}
 8007a4c:	bf00      	nop
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr
 8007a58:	40010000 	.word	0x40010000
 8007a5c:	40010400 	.word	0x40010400

08007a60 <TIM_OC2_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
=======
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
 8007a68:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f023 0210 	bic.w	r2, r3, #16
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f023 0320 	bic.w	r3, r3, #32
 8007aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a22      	ldr	r2, [pc, #136]	; (8007b40 <TIM_OC2_SetConfig+0xe4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d003      	beq.n	8007ac4 <TIM_OC2_SetConfig+0x68>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a21      	ldr	r2, [pc, #132]	; (8007b44 <TIM_OC2_SetConfig+0xe8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d10d      	bne.n	8007ae0 <TIM_OC2_SetConfig+0x84>
=======
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	f023 0210 	bic.w	r2, r3, #16
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f023 0320 	bic.w	r3, r3, #32
 8007aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	011b      	lsls	r3, r3, #4
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a22      	ldr	r2, [pc, #136]	; (8007b44 <TIM_OC2_SetConfig+0xe4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_OC2_SetConfig+0x68>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a21      	ldr	r2, [pc, #132]	; (8007b48 <TIM_OC2_SetConfig+0xe8>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d10d      	bne.n	8007ae4 <TIM_OC2_SetConfig+0x84>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	011b      	lsls	r3, r3, #4
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ade:	617b      	str	r3, [r7, #20]
=======
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae2:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <TIM_OC2_SetConfig+0xe4>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d003      	beq.n	8007af0 <TIM_OC2_SetConfig+0x94>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	4a16      	ldr	r2, [pc, #88]	; (8007b44 <TIM_OC2_SetConfig+0xe8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d113      	bne.n	8007b18 <TIM_OC2_SetConfig+0xbc>
=======
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a17      	ldr	r2, [pc, #92]	; (8007b44 <TIM_OC2_SetConfig+0xe4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d003      	beq.n	8007af4 <TIM_OC2_SetConfig+0x94>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a16      	ldr	r2, [pc, #88]	; (8007b48 <TIM_OC2_SetConfig+0xe8>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d113      	bne.n	8007b1c <TIM_OC2_SetConfig+0xbc>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	699b      	ldr	r3, [r3, #24]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]
=======
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	40010000 	.word	0x40010000
 8007b44:	40010400 	.word	0x40010400

08007b48 <TIM_OC3_SetConfig>:
=======
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	621a      	str	r2, [r3, #32]
}
 8007b36:	bf00      	nop
 8007b38:	371c      	adds	r7, #28
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	40010000 	.word	0x40010000
 8007b48:	40010400 	.word	0x40010400

08007b4c <TIM_OC3_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
=======
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f023 0303 	bic.w	r3, r3, #3
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	021b      	lsls	r3, r3, #8
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a21      	ldr	r2, [pc, #132]	; (8007c28 <TIM_OC3_SetConfig+0xe0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d003      	beq.n	8007bae <TIM_OC3_SetConfig+0x66>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a20      	ldr	r2, [pc, #128]	; (8007c2c <TIM_OC3_SetConfig+0xe4>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d10d      	bne.n	8007bca <TIM_OC3_SetConfig+0x82>
=======
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a21      	ldr	r2, [pc, #132]	; (8007c2c <TIM_OC3_SetConfig+0xe0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d003      	beq.n	8007bb2 <TIM_OC3_SetConfig+0x66>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a20      	ldr	r2, [pc, #128]	; (8007c30 <TIM_OC3_SetConfig+0xe4>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d10d      	bne.n	8007bce <TIM_OC3_SetConfig+0x82>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	021b      	lsls	r3, r3, #8
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a16      	ldr	r2, [pc, #88]	; (8007c28 <TIM_OC3_SetConfig+0xe0>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d003      	beq.n	8007bda <TIM_OC3_SetConfig+0x92>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a15      	ldr	r2, [pc, #84]	; (8007c2c <TIM_OC3_SetConfig+0xe4>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d113      	bne.n	8007c02 <TIM_OC3_SetConfig+0xba>
=======
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a16      	ldr	r2, [pc, #88]	; (8007c2c <TIM_OC3_SetConfig+0xe0>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_OC3_SetConfig+0x92>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <TIM_OC3_SetConfig+0xe4>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d113      	bne.n	8007c06 <TIM_OC3_SetConfig+0xba>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	011b      	lsls	r3, r3, #4
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
=======
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	011b      	lsls	r3, r3, #4
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	621a      	str	r2, [r3, #32]
}
 8007c1c:	bf00      	nop
 8007c1e:	371c      	adds	r7, #28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr
 8007c28:	40010000 	.word	0x40010000
 8007c2c:	40010400 	.word	0x40010400

08007c30 <TIM_OC4_SetConfig>:
=======
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	697a      	ldr	r2, [r7, #20]
 8007c1e:	621a      	str	r2, [r3, #32]
}
 8007c20:	bf00      	nop
 8007c22:	371c      	adds	r7, #28
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	40010400 	.word	0x40010400

08007c34 <TIM_OC4_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
=======
 8007c34:	b480      	push	{r7}
 8007c36:	b087      	sub	sp, #28
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	031b      	lsls	r3, r3, #12
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a12      	ldr	r2, [pc, #72]	; (8007cd4 <TIM_OC4_SetConfig+0xa4>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC4_SetConfig+0x68>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a11      	ldr	r2, [pc, #68]	; (8007cd8 <TIM_OC4_SetConfig+0xa8>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d109      	bne.n	8007cac <TIM_OC4_SetConfig+0x7c>
=======
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	031b      	lsls	r3, r3, #12
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a12      	ldr	r2, [pc, #72]	; (8007cd8 <TIM_OC4_SetConfig+0xa4>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d003      	beq.n	8007c9c <TIM_OC4_SetConfig+0x68>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a11      	ldr	r2, [pc, #68]	; (8007cdc <TIM_OC4_SetConfig+0xa8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d109      	bne.n	8007cb0 <TIM_OC4_SetConfig+0x7c>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	019b      	lsls	r3, r3, #6
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
=======
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	695b      	ldr	r3, [r3, #20]
 8007ca8:	019b      	lsls	r3, r3, #6
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	40010000 	.word	0x40010000
 8007cd8:	40010400 	.word	0x40010400

08007cdc <TIM_CCxChannelCmd>:
=======
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	621a      	str	r2, [r3, #32]
}
 8007cca:	bf00      	nop
 8007ccc:	371c      	adds	r7, #28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40010400 	.word	0x40010400

08007ce0 <TIM_CCxChannelCmd>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
=======
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	2201      	movs	r2, #1
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	401a      	ands	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1a      	ldr	r2, [r3, #32]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	fa01 f303 	lsl.w	r3, r1, r3
 8007d14:	431a      	orrs	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	43db      	mvns	r3, r3
 8007d02:	401a      	ands	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	fa01 f303 	lsl.w	r3, r1, r3
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
=======
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e05a      	b.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a21      	ldr	r2, [pc, #132]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d022      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8c:	d01d      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a1d      	ldr	r2, [pc, #116]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d018      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a1b      	ldr	r2, [pc, #108]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a1a      	ldr	r2, [pc, #104]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00e      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a17      	ldr	r2, [pc, #92]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a15      	ldr	r2, [pc, #84]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d10c      	bne.n	8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	609a      	str	r2, [r3, #8]
=======
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e05a      	b.n	8007dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a21      	ldr	r2, [pc, #132]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d90:	d01d      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1d      	ldr	r2, [pc, #116]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10c      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	40010000 	.word	0x40010000
 8007e08:	40000400 	.word	0x40000400
 8007e0c:	40000800 	.word	0x40000800
 8007e10:	40000c00 	.word	0x40000c00
 8007e14:	40010400 	.word	0x40010400
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	40001800 	.word	0x40001800

08007e20 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40001800 	.word	0x40001800

08007e24 <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
=======
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d101      	bne.n	8007e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e03d      	b.n	8007eb8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d101      	bne.n	8007e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e03d      	b.n	8007ebc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
=======
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIMEx_CommutCallback>:
=======
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_CommutCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
=======
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_TIMEx_BreakCallback>:
=======
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIMEx_BreakCallback>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
=======
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UART_Init>:
=======
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UART_Init>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e03f      	b.n	8007f7e <HAL_UART_Init+0x92>
=======
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e03f      	b.n	8007f82 <HAL_UART_Init+0x92>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d106      	bne.n	8007f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
=======
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7fc fa44 	bl	80043a0 <HAL_UART_MspInit>
=======
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fc fa44 	bl	80043a4 <HAL_UART_MspInit>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2224      	movs	r2, #36	; 0x24
 8007f1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68da      	ldr	r2, [r3, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f829 	bl	8007f88 <UART_SetConfig>
=======
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2224      	movs	r2, #36	; 0x24
 8007f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f829 	bl	8007f8c <UART_SetConfig>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <UART_SetConfig>:
=======
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	691a      	ldr	r2, [r3, #16]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695a      	ldr	r2, [r3, #20]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <UART_SetConfig>:
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
=======
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	611a      	str	r2, [r3, #16]
=======
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68da      	ldr	r2, [r3, #12]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	611a      	str	r2, [r3, #16]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fca:	f023 030c 	bic.w	r3, r3, #12
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	60d3      	str	r3, [r2, #12]
=======
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fce:	f023 030c 	bic.w	r3, r3, #12
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	60d3      	str	r3, [r2, #12]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	f040 818b 	bne.w	8008310 <UART_SetConfig+0x388>
=======
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffa:	f040 818b 	bne.w	8008314 <UART_SetConfig+0x388>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4ac1      	ldr	r2, [pc, #772]	; (8008304 <UART_SetConfig+0x37c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d005      	beq.n	8008010 <UART_SetConfig+0x88>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4abf      	ldr	r2, [pc, #764]	; (8008308 <UART_SetConfig+0x380>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f040 80bd 	bne.w	800818a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008010:	f7fe fb34 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 8008014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	461d      	mov	r5, r3
 800801a:	f04f 0600 	mov.w	r6, #0
 800801e:	46a8      	mov	r8, r5
 8008020:	46b1      	mov	r9, r6
 8008022:	eb18 0308 	adds.w	r3, r8, r8
 8008026:	eb49 0409 	adc.w	r4, r9, r9
 800802a:	4698      	mov	r8, r3
 800802c:	46a1      	mov	r9, r4
 800802e:	eb18 0805 	adds.w	r8, r8, r5
 8008032:	eb49 0906 	adc.w	r9, r9, r6
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800804a:	4688      	mov	r8, r1
 800804c:	4691      	mov	r9, r2
 800804e:	eb18 0005 	adds.w	r0, r8, r5
 8008052:	eb49 0106 	adc.w	r1, r9, r6
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	461d      	mov	r5, r3
 800805c:	f04f 0600 	mov.w	r6, #0
 8008060:	196b      	adds	r3, r5, r5
 8008062:	eb46 0406 	adc.w	r4, r6, r6
 8008066:	461a      	mov	r2, r3
 8008068:	4623      	mov	r3, r4
 800806a:	f7f8 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800806e:	4603      	mov	r3, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461a      	mov	r2, r3
 8008074:	4ba5      	ldr	r3, [pc, #660]	; (800830c <UART_SetConfig+0x384>)
 8008076:	fba3 2302 	umull	r2, r3, r3, r2
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	461d      	mov	r5, r3
 8008084:	f04f 0600 	mov.w	r6, #0
 8008088:	46a9      	mov	r9, r5
 800808a:	46b2      	mov	sl, r6
 800808c:	eb19 0309 	adds.w	r3, r9, r9
 8008090:	eb4a 040a 	adc.w	r4, sl, sl
 8008094:	4699      	mov	r9, r3
 8008096:	46a2      	mov	sl, r4
 8008098:	eb19 0905 	adds.w	r9, r9, r5
 800809c:	eb4a 0a06 	adc.w	sl, sl, r6
 80080a0:	f04f 0100 	mov.w	r1, #0
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080b4:	4689      	mov	r9, r1
 80080b6:	4692      	mov	sl, r2
 80080b8:	eb19 0005 	adds.w	r0, r9, r5
 80080bc:	eb4a 0106 	adc.w	r1, sl, r6
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	461d      	mov	r5, r3
 80080c6:	f04f 0600 	mov.w	r6, #0
 80080ca:	196b      	adds	r3, r5, r5
 80080cc:	eb46 0406 	adc.w	r4, r6, r6
 80080d0:	461a      	mov	r2, r3
 80080d2:	4623      	mov	r3, r4
 80080d4:	f7f8 fdd8 	bl	8000c88 <__aeabi_uldivmod>
 80080d8:	4603      	mov	r3, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	461a      	mov	r2, r3
 80080de:	4b8b      	ldr	r3, [pc, #556]	; (800830c <UART_SetConfig+0x384>)
 80080e0:	fba3 1302 	umull	r1, r3, r3, r2
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	2164      	movs	r1, #100	; 0x64
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	3332      	adds	r3, #50	; 0x32
 80080f2:	4a86      	ldr	r2, [pc, #536]	; (800830c <UART_SetConfig+0x384>)
 80080f4:	fba2 2303 	umull	r2, r3, r2, r3
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008100:	4498      	add	r8, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	461d      	mov	r5, r3
 8008106:	f04f 0600 	mov.w	r6, #0
 800810a:	46a9      	mov	r9, r5
 800810c:	46b2      	mov	sl, r6
 800810e:	eb19 0309 	adds.w	r3, r9, r9
 8008112:	eb4a 040a 	adc.w	r4, sl, sl
 8008116:	4699      	mov	r9, r3
 8008118:	46a2      	mov	sl, r4
 800811a:	eb19 0905 	adds.w	r9, r9, r5
 800811e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008122:	f04f 0100 	mov.w	r1, #0
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800812e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008136:	4689      	mov	r9, r1
 8008138:	4692      	mov	sl, r2
 800813a:	eb19 0005 	adds.w	r0, r9, r5
 800813e:	eb4a 0106 	adc.w	r1, sl, r6
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	461d      	mov	r5, r3
 8008148:	f04f 0600 	mov.w	r6, #0
 800814c:	196b      	adds	r3, r5, r5
 800814e:	eb46 0406 	adc.w	r4, r6, r6
 8008152:	461a      	mov	r2, r3
 8008154:	4623      	mov	r3, r4
 8008156:	f7f8 fd97 	bl	8000c88 <__aeabi_uldivmod>
 800815a:	4603      	mov	r3, r0
 800815c:	460c      	mov	r4, r1
 800815e:	461a      	mov	r2, r3
 8008160:	4b6a      	ldr	r3, [pc, #424]	; (800830c <UART_SetConfig+0x384>)
 8008162:	fba3 1302 	umull	r1, r3, r3, r2
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	2164      	movs	r1, #100	; 0x64
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	3332      	adds	r3, #50	; 0x32
 8008174:	4a65      	ldr	r2, [pc, #404]	; (800830c <UART_SetConfig+0x384>)
 8008176:	fba2 2303 	umull	r2, r3, r2, r3
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	f003 0207 	and.w	r2, r3, #7
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4442      	add	r2, r8
 8008186:	609a      	str	r2, [r3, #8]
 8008188:	e26f      	b.n	800866a <UART_SetConfig+0x6e2>
=======
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4ac1      	ldr	r2, [pc, #772]	; (8008308 <UART_SetConfig+0x37c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d005      	beq.n	8008014 <UART_SetConfig+0x88>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4abf      	ldr	r2, [pc, #764]	; (800830c <UART_SetConfig+0x380>)
 800800e:	4293      	cmp	r3, r2
 8008010:	f040 80bd 	bne.w	800818e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008014:	f7fe fb34 	bl	8006680 <HAL_RCC_GetPCLK2Freq>
 8008018:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	461d      	mov	r5, r3
 800801e:	f04f 0600 	mov.w	r6, #0
 8008022:	46a8      	mov	r8, r5
 8008024:	46b1      	mov	r9, r6
 8008026:	eb18 0308 	adds.w	r3, r8, r8
 800802a:	eb49 0409 	adc.w	r4, r9, r9
 800802e:	4698      	mov	r8, r3
 8008030:	46a1      	mov	r9, r4
 8008032:	eb18 0805 	adds.w	r8, r8, r5
 8008036:	eb49 0906 	adc.w	r9, r9, r6
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008046:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800804a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800804e:	4688      	mov	r8, r1
 8008050:	4691      	mov	r9, r2
 8008052:	eb18 0005 	adds.w	r0, r8, r5
 8008056:	eb49 0106 	adc.w	r1, r9, r6
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	461d      	mov	r5, r3
 8008060:	f04f 0600 	mov.w	r6, #0
 8008064:	196b      	adds	r3, r5, r5
 8008066:	eb46 0406 	adc.w	r4, r6, r6
 800806a:	461a      	mov	r2, r3
 800806c:	4623      	mov	r3, r4
 800806e:	f7f8 fe0b 	bl	8000c88 <__aeabi_uldivmod>
 8008072:	4603      	mov	r3, r0
 8008074:	460c      	mov	r4, r1
 8008076:	461a      	mov	r2, r3
 8008078:	4ba5      	ldr	r3, [pc, #660]	; (8008310 <UART_SetConfig+0x384>)
 800807a:	fba3 2302 	umull	r2, r3, r3, r2
 800807e:	095b      	lsrs	r3, r3, #5
 8008080:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	461d      	mov	r5, r3
 8008088:	f04f 0600 	mov.w	r6, #0
 800808c:	46a9      	mov	r9, r5
 800808e:	46b2      	mov	sl, r6
 8008090:	eb19 0309 	adds.w	r3, r9, r9
 8008094:	eb4a 040a 	adc.w	r4, sl, sl
 8008098:	4699      	mov	r9, r3
 800809a:	46a2      	mov	sl, r4
 800809c:	eb19 0905 	adds.w	r9, r9, r5
 80080a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80080a4:	f04f 0100 	mov.w	r1, #0
 80080a8:	f04f 0200 	mov.w	r2, #0
 80080ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080b8:	4689      	mov	r9, r1
 80080ba:	4692      	mov	sl, r2
 80080bc:	eb19 0005 	adds.w	r0, r9, r5
 80080c0:	eb4a 0106 	adc.w	r1, sl, r6
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	461d      	mov	r5, r3
 80080ca:	f04f 0600 	mov.w	r6, #0
 80080ce:	196b      	adds	r3, r5, r5
 80080d0:	eb46 0406 	adc.w	r4, r6, r6
 80080d4:	461a      	mov	r2, r3
 80080d6:	4623      	mov	r3, r4
 80080d8:	f7f8 fdd6 	bl	8000c88 <__aeabi_uldivmod>
 80080dc:	4603      	mov	r3, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	461a      	mov	r2, r3
 80080e2:	4b8b      	ldr	r3, [pc, #556]	; (8008310 <UART_SetConfig+0x384>)
 80080e4:	fba3 1302 	umull	r1, r3, r3, r2
 80080e8:	095b      	lsrs	r3, r3, #5
 80080ea:	2164      	movs	r1, #100	; 0x64
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	3332      	adds	r3, #50	; 0x32
 80080f6:	4a86      	ldr	r2, [pc, #536]	; (8008310 <UART_SetConfig+0x384>)
 80080f8:	fba2 2303 	umull	r2, r3, r2, r3
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008104:	4498      	add	r8, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	461d      	mov	r5, r3
 800810a:	f04f 0600 	mov.w	r6, #0
 800810e:	46a9      	mov	r9, r5
 8008110:	46b2      	mov	sl, r6
 8008112:	eb19 0309 	adds.w	r3, r9, r9
 8008116:	eb4a 040a 	adc.w	r4, sl, sl
 800811a:	4699      	mov	r9, r3
 800811c:	46a2      	mov	sl, r4
 800811e:	eb19 0905 	adds.w	r9, r9, r5
 8008122:	eb4a 0a06 	adc.w	sl, sl, r6
 8008126:	f04f 0100 	mov.w	r1, #0
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800813a:	4689      	mov	r9, r1
 800813c:	4692      	mov	sl, r2
 800813e:	eb19 0005 	adds.w	r0, r9, r5
 8008142:	eb4a 0106 	adc.w	r1, sl, r6
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	461d      	mov	r5, r3
 800814c:	f04f 0600 	mov.w	r6, #0
 8008150:	196b      	adds	r3, r5, r5
 8008152:	eb46 0406 	adc.w	r4, r6, r6
 8008156:	461a      	mov	r2, r3
 8008158:	4623      	mov	r3, r4
 800815a:	f7f8 fd95 	bl	8000c88 <__aeabi_uldivmod>
 800815e:	4603      	mov	r3, r0
 8008160:	460c      	mov	r4, r1
 8008162:	461a      	mov	r2, r3
 8008164:	4b6a      	ldr	r3, [pc, #424]	; (8008310 <UART_SetConfig+0x384>)
 8008166:	fba3 1302 	umull	r1, r3, r3, r2
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	2164      	movs	r1, #100	; 0x64
 800816e:	fb01 f303 	mul.w	r3, r1, r3
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	00db      	lsls	r3, r3, #3
 8008176:	3332      	adds	r3, #50	; 0x32
 8008178:	4a65      	ldr	r2, [pc, #404]	; (8008310 <UART_SetConfig+0x384>)
 800817a:	fba2 2303 	umull	r2, r3, r2, r3
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	f003 0207 	and.w	r2, r3, #7
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4442      	add	r2, r8
 800818a:	609a      	str	r2, [r3, #8]
 800818c:	e26f      	b.n	800866e <UART_SetConfig+0x6e2>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800818a:	f7fe fa63 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 800818e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	461d      	mov	r5, r3
 8008194:	f04f 0600 	mov.w	r6, #0
 8008198:	46a8      	mov	r8, r5
 800819a:	46b1      	mov	r9, r6
 800819c:	eb18 0308 	adds.w	r3, r8, r8
 80081a0:	eb49 0409 	adc.w	r4, r9, r9
 80081a4:	4698      	mov	r8, r3
 80081a6:	46a1      	mov	r9, r4
 80081a8:	eb18 0805 	adds.w	r8, r8, r5
 80081ac:	eb49 0906 	adc.w	r9, r9, r6
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081c4:	4688      	mov	r8, r1
 80081c6:	4691      	mov	r9, r2
 80081c8:	eb18 0005 	adds.w	r0, r8, r5
 80081cc:	eb49 0106 	adc.w	r1, r9, r6
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	461d      	mov	r5, r3
 80081d6:	f04f 0600 	mov.w	r6, #0
 80081da:	196b      	adds	r3, r5, r5
 80081dc:	eb46 0406 	adc.w	r4, r6, r6
 80081e0:	461a      	mov	r2, r3
 80081e2:	4623      	mov	r3, r4
 80081e4:	f7f8 fd50 	bl	8000c88 <__aeabi_uldivmod>
 80081e8:	4603      	mov	r3, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b47      	ldr	r3, [pc, #284]	; (800830c <UART_SetConfig+0x384>)
 80081f0:	fba3 2302 	umull	r2, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	461d      	mov	r5, r3
 80081fe:	f04f 0600 	mov.w	r6, #0
 8008202:	46a9      	mov	r9, r5
 8008204:	46b2      	mov	sl, r6
 8008206:	eb19 0309 	adds.w	r3, r9, r9
 800820a:	eb4a 040a 	adc.w	r4, sl, sl
 800820e:	4699      	mov	r9, r3
 8008210:	46a2      	mov	sl, r4
 8008212:	eb19 0905 	adds.w	r9, r9, r5
 8008216:	eb4a 0a06 	adc.w	sl, sl, r6
 800821a:	f04f 0100 	mov.w	r1, #0
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008226:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800822a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800822e:	4689      	mov	r9, r1
 8008230:	4692      	mov	sl, r2
 8008232:	eb19 0005 	adds.w	r0, r9, r5
 8008236:	eb4a 0106 	adc.w	r1, sl, r6
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	461d      	mov	r5, r3
 8008240:	f04f 0600 	mov.w	r6, #0
 8008244:	196b      	adds	r3, r5, r5
 8008246:	eb46 0406 	adc.w	r4, r6, r6
 800824a:	461a      	mov	r2, r3
 800824c:	4623      	mov	r3, r4
 800824e:	f7f8 fd1b 	bl	8000c88 <__aeabi_uldivmod>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	461a      	mov	r2, r3
 8008258:	4b2c      	ldr	r3, [pc, #176]	; (800830c <UART_SetConfig+0x384>)
 800825a:	fba3 1302 	umull	r1, r3, r3, r2
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	2164      	movs	r1, #100	; 0x64
 8008262:	fb01 f303 	mul.w	r3, r1, r3
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	3332      	adds	r3, #50	; 0x32
 800826c:	4a27      	ldr	r2, [pc, #156]	; (800830c <UART_SetConfig+0x384>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800827a:	4498      	add	r8, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	461d      	mov	r5, r3
 8008280:	f04f 0600 	mov.w	r6, #0
 8008284:	46a9      	mov	r9, r5
 8008286:	46b2      	mov	sl, r6
 8008288:	eb19 0309 	adds.w	r3, r9, r9
 800828c:	eb4a 040a 	adc.w	r4, sl, sl
 8008290:	4699      	mov	r9, r3
 8008292:	46a2      	mov	sl, r4
 8008294:	eb19 0905 	adds.w	r9, r9, r5
 8008298:	eb4a 0a06 	adc.w	sl, sl, r6
 800829c:	f04f 0100 	mov.w	r1, #0
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082b0:	4689      	mov	r9, r1
 80082b2:	4692      	mov	sl, r2
 80082b4:	eb19 0005 	adds.w	r0, r9, r5
 80082b8:	eb4a 0106 	adc.w	r1, sl, r6
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	461d      	mov	r5, r3
 80082c2:	f04f 0600 	mov.w	r6, #0
 80082c6:	196b      	adds	r3, r5, r5
 80082c8:	eb46 0406 	adc.w	r4, r6, r6
 80082cc:	461a      	mov	r2, r3
 80082ce:	4623      	mov	r3, r4
 80082d0:	f7f8 fcda 	bl	8000c88 <__aeabi_uldivmod>
 80082d4:	4603      	mov	r3, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	461a      	mov	r2, r3
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <UART_SetConfig+0x384>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a07      	ldr	r2, [pc, #28]	; (800830c <UART_SetConfig+0x384>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0207 	and.w	r2, r3, #7
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4442      	add	r2, r8
 8008300:	609a      	str	r2, [r3, #8]
=======
 800818e:	f7fe fa63 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 8008192:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	461d      	mov	r5, r3
 8008198:	f04f 0600 	mov.w	r6, #0
 800819c:	46a8      	mov	r8, r5
 800819e:	46b1      	mov	r9, r6
 80081a0:	eb18 0308 	adds.w	r3, r8, r8
 80081a4:	eb49 0409 	adc.w	r4, r9, r9
 80081a8:	4698      	mov	r8, r3
 80081aa:	46a1      	mov	r9, r4
 80081ac:	eb18 0805 	adds.w	r8, r8, r5
 80081b0:	eb49 0906 	adc.w	r9, r9, r6
 80081b4:	f04f 0100 	mov.w	r1, #0
 80081b8:	f04f 0200 	mov.w	r2, #0
 80081bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081c8:	4688      	mov	r8, r1
 80081ca:	4691      	mov	r9, r2
 80081cc:	eb18 0005 	adds.w	r0, r8, r5
 80081d0:	eb49 0106 	adc.w	r1, r9, r6
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	461d      	mov	r5, r3
 80081da:	f04f 0600 	mov.w	r6, #0
 80081de:	196b      	adds	r3, r5, r5
 80081e0:	eb46 0406 	adc.w	r4, r6, r6
 80081e4:	461a      	mov	r2, r3
 80081e6:	4623      	mov	r3, r4
 80081e8:	f7f8 fd4e 	bl	8000c88 <__aeabi_uldivmod>
 80081ec:	4603      	mov	r3, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b47      	ldr	r3, [pc, #284]	; (8008310 <UART_SetConfig+0x384>)
 80081f4:	fba3 2302 	umull	r2, r3, r3, r2
 80081f8:	095b      	lsrs	r3, r3, #5
 80081fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	461d      	mov	r5, r3
 8008202:	f04f 0600 	mov.w	r6, #0
 8008206:	46a9      	mov	r9, r5
 8008208:	46b2      	mov	sl, r6
 800820a:	eb19 0309 	adds.w	r3, r9, r9
 800820e:	eb4a 040a 	adc.w	r4, sl, sl
 8008212:	4699      	mov	r9, r3
 8008214:	46a2      	mov	sl, r4
 8008216:	eb19 0905 	adds.w	r9, r9, r5
 800821a:	eb4a 0a06 	adc.w	sl, sl, r6
 800821e:	f04f 0100 	mov.w	r1, #0
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800822a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800822e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008232:	4689      	mov	r9, r1
 8008234:	4692      	mov	sl, r2
 8008236:	eb19 0005 	adds.w	r0, r9, r5
 800823a:	eb4a 0106 	adc.w	r1, sl, r6
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	461d      	mov	r5, r3
 8008244:	f04f 0600 	mov.w	r6, #0
 8008248:	196b      	adds	r3, r5, r5
 800824a:	eb46 0406 	adc.w	r4, r6, r6
 800824e:	461a      	mov	r2, r3
 8008250:	4623      	mov	r3, r4
 8008252:	f7f8 fd19 	bl	8000c88 <__aeabi_uldivmod>
 8008256:	4603      	mov	r3, r0
 8008258:	460c      	mov	r4, r1
 800825a:	461a      	mov	r2, r3
 800825c:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <UART_SetConfig+0x384>)
 800825e:	fba3 1302 	umull	r1, r3, r3, r2
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	2164      	movs	r1, #100	; 0x64
 8008266:	fb01 f303 	mul.w	r3, r1, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	3332      	adds	r3, #50	; 0x32
 8008270:	4a27      	ldr	r2, [pc, #156]	; (8008310 <UART_SetConfig+0x384>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800827e:	4498      	add	r8, r3
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	461d      	mov	r5, r3
 8008284:	f04f 0600 	mov.w	r6, #0
 8008288:	46a9      	mov	r9, r5
 800828a:	46b2      	mov	sl, r6
 800828c:	eb19 0309 	adds.w	r3, r9, r9
 8008290:	eb4a 040a 	adc.w	r4, sl, sl
 8008294:	4699      	mov	r9, r3
 8008296:	46a2      	mov	sl, r4
 8008298:	eb19 0905 	adds.w	r9, r9, r5
 800829c:	eb4a 0a06 	adc.w	sl, sl, r6
 80082a0:	f04f 0100 	mov.w	r1, #0
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082b4:	4689      	mov	r9, r1
 80082b6:	4692      	mov	sl, r2
 80082b8:	eb19 0005 	adds.w	r0, r9, r5
 80082bc:	eb4a 0106 	adc.w	r1, sl, r6
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	461d      	mov	r5, r3
 80082c6:	f04f 0600 	mov.w	r6, #0
 80082ca:	196b      	adds	r3, r5, r5
 80082cc:	eb46 0406 	adc.w	r4, r6, r6
 80082d0:	461a      	mov	r2, r3
 80082d2:	4623      	mov	r3, r4
 80082d4:	f7f8 fcd8 	bl	8000c88 <__aeabi_uldivmod>
 80082d8:	4603      	mov	r3, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	461a      	mov	r2, r3
 80082de:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <UART_SetConfig+0x384>)
 80082e0:	fba3 1302 	umull	r1, r3, r3, r2
 80082e4:	095b      	lsrs	r3, r3, #5
 80082e6:	2164      	movs	r1, #100	; 0x64
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	1ad3      	subs	r3, r2, r3
 80082ee:	00db      	lsls	r3, r3, #3
 80082f0:	3332      	adds	r3, #50	; 0x32
 80082f2:	4a07      	ldr	r2, [pc, #28]	; (8008310 <UART_SetConfig+0x384>)
 80082f4:	fba2 2303 	umull	r2, r3, r2, r3
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f003 0207 	and.w	r2, r3, #7
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4442      	add	r2, r8
 8008304:	609a      	str	r2, [r3, #8]
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
<<<<<<< HEAD
 8008302:	e1b2      	b.n	800866a <UART_SetConfig+0x6e2>
 8008304:	40011000 	.word	0x40011000
 8008308:	40011400 	.word	0x40011400
 800830c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4ad7      	ldr	r2, [pc, #860]	; (8008674 <UART_SetConfig+0x6ec>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d005      	beq.n	8008326 <UART_SetConfig+0x39e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4ad6      	ldr	r2, [pc, #856]	; (8008678 <UART_SetConfig+0x6f0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	f040 80d1 	bne.w	80084c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008326:	f7fe f9a9 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 800832a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	469a      	mov	sl, r3
 8008330:	f04f 0b00 	mov.w	fp, #0
 8008334:	46d0      	mov	r8, sl
 8008336:	46d9      	mov	r9, fp
 8008338:	eb18 0308 	adds.w	r3, r8, r8
 800833c:	eb49 0409 	adc.w	r4, r9, r9
 8008340:	4698      	mov	r8, r3
 8008342:	46a1      	mov	r9, r4
 8008344:	eb18 080a 	adds.w	r8, r8, sl
 8008348:	eb49 090b 	adc.w	r9, r9, fp
 800834c:	f04f 0100 	mov.w	r1, #0
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008358:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800835c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008360:	4688      	mov	r8, r1
 8008362:	4691      	mov	r9, r2
 8008364:	eb1a 0508 	adds.w	r5, sl, r8
 8008368:	eb4b 0609 	adc.w	r6, fp, r9
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4619      	mov	r1, r3
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	f04f 0400 	mov.w	r4, #0
 800837e:	0094      	lsls	r4, r2, #2
 8008380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008384:	008b      	lsls	r3, r1, #2
 8008386:	461a      	mov	r2, r3
 8008388:	4623      	mov	r3, r4
 800838a:	4628      	mov	r0, r5
 800838c:	4631      	mov	r1, r6
 800838e:	f7f8 fc7b 	bl	8000c88 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	461a      	mov	r2, r3
 8008398:	4bb8      	ldr	r3, [pc, #736]	; (800867c <UART_SetConfig+0x6f4>)
 800839a:	fba3 2302 	umull	r2, r3, r3, r2
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	469b      	mov	fp, r3
 80083a8:	f04f 0c00 	mov.w	ip, #0
 80083ac:	46d9      	mov	r9, fp
 80083ae:	46e2      	mov	sl, ip
 80083b0:	eb19 0309 	adds.w	r3, r9, r9
 80083b4:	eb4a 040a 	adc.w	r4, sl, sl
 80083b8:	4699      	mov	r9, r3
 80083ba:	46a2      	mov	sl, r4
 80083bc:	eb19 090b 	adds.w	r9, r9, fp
 80083c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083c4:	f04f 0100 	mov.w	r1, #0
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083d8:	4689      	mov	r9, r1
 80083da:	4692      	mov	sl, r2
 80083dc:	eb1b 0509 	adds.w	r5, fp, r9
 80083e0:	eb4c 060a 	adc.w	r6, ip, sl
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	f04f 0400 	mov.w	r4, #0
 80083f6:	0094      	lsls	r4, r2, #2
 80083f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083fc:	008b      	lsls	r3, r1, #2
 80083fe:	461a      	mov	r2, r3
 8008400:	4623      	mov	r3, r4
 8008402:	4628      	mov	r0, r5
 8008404:	4631      	mov	r1, r6
 8008406:	f7f8 fc3f 	bl	8000c88 <__aeabi_uldivmod>
 800840a:	4603      	mov	r3, r0
 800840c:	460c      	mov	r4, r1
 800840e:	461a      	mov	r2, r3
 8008410:	4b9a      	ldr	r3, [pc, #616]	; (800867c <UART_SetConfig+0x6f4>)
 8008412:	fba3 1302 	umull	r1, r3, r3, r2
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	2164      	movs	r1, #100	; 0x64
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	3332      	adds	r3, #50	; 0x32
 8008424:	4a95      	ldr	r2, [pc, #596]	; (800867c <UART_SetConfig+0x6f4>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008430:	4498      	add	r8, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	469b      	mov	fp, r3
 8008436:	f04f 0c00 	mov.w	ip, #0
 800843a:	46d9      	mov	r9, fp
 800843c:	46e2      	mov	sl, ip
 800843e:	eb19 0309 	adds.w	r3, r9, r9
 8008442:	eb4a 040a 	adc.w	r4, sl, sl
 8008446:	4699      	mov	r9, r3
 8008448:	46a2      	mov	sl, r4
 800844a:	eb19 090b 	adds.w	r9, r9, fp
 800844e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800845e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008466:	4689      	mov	r9, r1
 8008468:	4692      	mov	sl, r2
 800846a:	eb1b 0509 	adds.w	r5, fp, r9
 800846e:	eb4c 060a 	adc.w	r6, ip, sl
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	4619      	mov	r1, r3
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	f04f 0400 	mov.w	r4, #0
 8008484:	0094      	lsls	r4, r2, #2
 8008486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800848a:	008b      	lsls	r3, r1, #2
 800848c:	461a      	mov	r2, r3
 800848e:	4623      	mov	r3, r4
 8008490:	4628      	mov	r0, r5
 8008492:	4631      	mov	r1, r6
 8008494:	f7f8 fbf8 	bl	8000c88 <__aeabi_uldivmod>
 8008498:	4603      	mov	r3, r0
 800849a:	460c      	mov	r4, r1
 800849c:	461a      	mov	r2, r3
 800849e:	4b77      	ldr	r3, [pc, #476]	; (800867c <UART_SetConfig+0x6f4>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a72      	ldr	r2, [pc, #456]	; (800867c <UART_SetConfig+0x6f4>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 020f 	and.w	r2, r3, #15
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4442      	add	r2, r8
 80084c4:	609a      	str	r2, [r3, #8]
 80084c6:	e0d0      	b.n	800866a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80084c8:	f7fe f8c4 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 80084cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	469a      	mov	sl, r3
 80084d2:	f04f 0b00 	mov.w	fp, #0
 80084d6:	46d0      	mov	r8, sl
 80084d8:	46d9      	mov	r9, fp
 80084da:	eb18 0308 	adds.w	r3, r8, r8
 80084de:	eb49 0409 	adc.w	r4, r9, r9
 80084e2:	4698      	mov	r8, r3
 80084e4:	46a1      	mov	r9, r4
 80084e6:	eb18 080a 	adds.w	r8, r8, sl
 80084ea:	eb49 090b 	adc.w	r9, r9, fp
 80084ee:	f04f 0100 	mov.w	r1, #0
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008502:	4688      	mov	r8, r1
 8008504:	4691      	mov	r9, r2
 8008506:	eb1a 0508 	adds.w	r5, sl, r8
 800850a:	eb4b 0609 	adc.w	r6, fp, r9
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	0094      	lsls	r4, r2, #2
 8008522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008526:	008b      	lsls	r3, r1, #2
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	4628      	mov	r0, r5
 800852e:	4631      	mov	r1, r6
 8008530:	f7f8 fbaa 	bl	8000c88 <__aeabi_uldivmod>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	461a      	mov	r2, r3
 800853a:	4b50      	ldr	r3, [pc, #320]	; (800867c <UART_SetConfig+0x6f4>)
 800853c:	fba3 2302 	umull	r2, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	469b      	mov	fp, r3
 800854a:	f04f 0c00 	mov.w	ip, #0
 800854e:	46d9      	mov	r9, fp
 8008550:	46e2      	mov	sl, ip
 8008552:	eb19 0309 	adds.w	r3, r9, r9
 8008556:	eb4a 040a 	adc.w	r4, sl, sl
 800855a:	4699      	mov	r9, r3
 800855c:	46a2      	mov	sl, r4
 800855e:	eb19 090b 	adds.w	r9, r9, fp
 8008562:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008566:	f04f 0100 	mov.w	r1, #0
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800857a:	4689      	mov	r9, r1
 800857c:	4692      	mov	sl, r2
 800857e:	eb1b 0509 	adds.w	r5, fp, r9
 8008582:	eb4c 060a 	adc.w	r6, ip, sl
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	4619      	mov	r1, r3
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f04f 0400 	mov.w	r4, #0
 8008598:	0094      	lsls	r4, r2, #2
 800859a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800859e:	008b      	lsls	r3, r1, #2
 80085a0:	461a      	mov	r2, r3
 80085a2:	4623      	mov	r3, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	4631      	mov	r1, r6
 80085a8:	f7f8 fb6e 	bl	8000c88 <__aeabi_uldivmod>
 80085ac:	4603      	mov	r3, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b32      	ldr	r3, [pc, #200]	; (800867c <UART_SetConfig+0x6f4>)
 80085b4:	fba3 1302 	umull	r1, r3, r3, r2
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	2164      	movs	r1, #100	; 0x64
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	3332      	adds	r3, #50	; 0x32
 80085c6:	4a2d      	ldr	r2, [pc, #180]	; (800867c <UART_SetConfig+0x6f4>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d2:	4498      	add	r8, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	469b      	mov	fp, r3
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	46d9      	mov	r9, fp
 80085de:	46e2      	mov	sl, ip
 80085e0:	eb19 0309 	adds.w	r3, r9, r9
 80085e4:	eb4a 040a 	adc.w	r4, sl, sl
 80085e8:	4699      	mov	r9, r3
 80085ea:	46a2      	mov	sl, r4
 80085ec:	eb19 090b 	adds.w	r9, r9, fp
 80085f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008608:	4689      	mov	r9, r1
 800860a:	4692      	mov	sl, r2
 800860c:	eb1b 0509 	adds.w	r5, fp, r9
 8008610:	eb4c 060a 	adc.w	r6, ip, sl
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4619      	mov	r1, r3
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f04f 0400 	mov.w	r4, #0
 8008626:	0094      	lsls	r4, r2, #2
 8008628:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800862c:	008b      	lsls	r3, r1, #2
 800862e:	461a      	mov	r2, r3
 8008630:	4623      	mov	r3, r4
 8008632:	4628      	mov	r0, r5
 8008634:	4631      	mov	r1, r6
 8008636:	f7f8 fb27 	bl	8000c88 <__aeabi_uldivmod>
 800863a:	4603      	mov	r3, r0
 800863c:	460c      	mov	r4, r1
 800863e:	461a      	mov	r2, r3
 8008640:	4b0e      	ldr	r3, [pc, #56]	; (800867c <UART_SetConfig+0x6f4>)
 8008642:	fba3 1302 	umull	r1, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	2164      	movs	r1, #100	; 0x64
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	3332      	adds	r3, #50	; 0x32
 8008654:	4a09      	ldr	r2, [pc, #36]	; (800867c <UART_SetConfig+0x6f4>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4442      	add	r2, r8
 8008666:	609a      	str	r2, [r3, #8]
}
 8008668:	e7ff      	b.n	800866a <UART_SetConfig+0x6e2>
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	40011000 	.word	0x40011000
 8008678:	40011400 	.word	0x40011400
 800867c:	51eb851f 	.word	0x51eb851f

08008680 <__errno>:
 8008680:	4b01      	ldr	r3, [pc, #4]	; (8008688 <__errno+0x8>)
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20000040 	.word	0x20000040

0800868c <__libc_init_array>:
 800868c:	b570      	push	{r4, r5, r6, lr}
 800868e:	4e0d      	ldr	r6, [pc, #52]	; (80086c4 <__libc_init_array+0x38>)
 8008690:	4c0d      	ldr	r4, [pc, #52]	; (80086c8 <__libc_init_array+0x3c>)
 8008692:	1ba4      	subs	r4, r4, r6
 8008694:	10a4      	asrs	r4, r4, #2
 8008696:	2500      	movs	r5, #0
 8008698:	42a5      	cmp	r5, r4
 800869a:	d109      	bne.n	80086b0 <__libc_init_array+0x24>
 800869c:	4e0b      	ldr	r6, [pc, #44]	; (80086cc <__libc_init_array+0x40>)
 800869e:	4c0c      	ldr	r4, [pc, #48]	; (80086d0 <__libc_init_array+0x44>)
 80086a0:	f003 fd5a 	bl	800c158 <_init>
 80086a4:	1ba4      	subs	r4, r4, r6
 80086a6:	10a4      	asrs	r4, r4, #2
 80086a8:	2500      	movs	r5, #0
 80086aa:	42a5      	cmp	r5, r4
 80086ac:	d105      	bne.n	80086ba <__libc_init_array+0x2e>
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086b4:	4798      	blx	r3
 80086b6:	3501      	adds	r5, #1
 80086b8:	e7ee      	b.n	8008698 <__libc_init_array+0xc>
 80086ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086be:	4798      	blx	r3
 80086c0:	3501      	adds	r5, #1
 80086c2:	e7f2      	b.n	80086aa <__libc_init_array+0x1e>
 80086c4:	0800c450 	.word	0x0800c450
 80086c8:	0800c450 	.word	0x0800c450
 80086cc:	0800c450 	.word	0x0800c450
 80086d0:	0800c454 	.word	0x0800c454

080086d4 <memcpy>:
 80086d4:	b510      	push	{r4, lr}
 80086d6:	1e43      	subs	r3, r0, #1
 80086d8:	440a      	add	r2, r1
 80086da:	4291      	cmp	r1, r2
 80086dc:	d100      	bne.n	80086e0 <memcpy+0xc>
 80086de:	bd10      	pop	{r4, pc}
 80086e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086e8:	e7f7      	b.n	80086da <memcpy+0x6>

080086ea <memset>:
 80086ea:	4402      	add	r2, r0
 80086ec:	4603      	mov	r3, r0
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d100      	bne.n	80086f4 <memset+0xa>
 80086f2:	4770      	bx	lr
 80086f4:	f803 1b01 	strb.w	r1, [r3], #1
 80086f8:	e7f9      	b.n	80086ee <memset+0x4>

080086fa <__cvt>:
 80086fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086fe:	ec55 4b10 	vmov	r4, r5, d0
 8008702:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008704:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008708:	2d00      	cmp	r5, #0
 800870a:	460e      	mov	r6, r1
 800870c:	4691      	mov	r9, r2
 800870e:	4619      	mov	r1, r3
 8008710:	bfb8      	it	lt
 8008712:	4622      	movlt	r2, r4
 8008714:	462b      	mov	r3, r5
 8008716:	f027 0720 	bic.w	r7, r7, #32
 800871a:	bfbb      	ittet	lt
 800871c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008720:	461d      	movlt	r5, r3
 8008722:	2300      	movge	r3, #0
 8008724:	232d      	movlt	r3, #45	; 0x2d
 8008726:	bfb8      	it	lt
 8008728:	4614      	movlt	r4, r2
 800872a:	2f46      	cmp	r7, #70	; 0x46
 800872c:	700b      	strb	r3, [r1, #0]
 800872e:	d004      	beq.n	800873a <__cvt+0x40>
 8008730:	2f45      	cmp	r7, #69	; 0x45
 8008732:	d100      	bne.n	8008736 <__cvt+0x3c>
 8008734:	3601      	adds	r6, #1
 8008736:	2102      	movs	r1, #2
 8008738:	e000      	b.n	800873c <__cvt+0x42>
 800873a:	2103      	movs	r1, #3
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9301      	str	r3, [sp, #4]
 8008740:	ab02      	add	r3, sp, #8
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4632      	mov	r2, r6
 8008746:	4653      	mov	r3, sl
 8008748:	ec45 4b10 	vmov	d0, r4, r5
 800874c:	f001 fd78 	bl	800a240 <_dtoa_r>
 8008750:	2f47      	cmp	r7, #71	; 0x47
 8008752:	4680      	mov	r8, r0
 8008754:	d102      	bne.n	800875c <__cvt+0x62>
 8008756:	f019 0f01 	tst.w	r9, #1
 800875a:	d026      	beq.n	80087aa <__cvt+0xb0>
 800875c:	2f46      	cmp	r7, #70	; 0x46
 800875e:	eb08 0906 	add.w	r9, r8, r6
 8008762:	d111      	bne.n	8008788 <__cvt+0x8e>
 8008764:	f898 3000 	ldrb.w	r3, [r8]
 8008768:	2b30      	cmp	r3, #48	; 0x30
 800876a:	d10a      	bne.n	8008782 <__cvt+0x88>
 800876c:	2200      	movs	r2, #0
 800876e:	2300      	movs	r3, #0
 8008770:	4620      	mov	r0, r4
 8008772:	4629      	mov	r1, r5
 8008774:	f7f8 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008778:	b918      	cbnz	r0, 8008782 <__cvt+0x88>
 800877a:	f1c6 0601 	rsb	r6, r6, #1
 800877e:	f8ca 6000 	str.w	r6, [sl]
 8008782:	f8da 3000 	ldr.w	r3, [sl]
 8008786:	4499      	add	r9, r3
 8008788:	2200      	movs	r2, #0
 800878a:	2300      	movs	r3, #0
 800878c:	4620      	mov	r0, r4
 800878e:	4629      	mov	r1, r5
 8008790:	f7f8 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008794:	b938      	cbnz	r0, 80087a6 <__cvt+0xac>
 8008796:	2230      	movs	r2, #48	; 0x30
 8008798:	9b03      	ldr	r3, [sp, #12]
 800879a:	454b      	cmp	r3, r9
 800879c:	d205      	bcs.n	80087aa <__cvt+0xb0>
 800879e:	1c59      	adds	r1, r3, #1
 80087a0:	9103      	str	r1, [sp, #12]
 80087a2:	701a      	strb	r2, [r3, #0]
 80087a4:	e7f8      	b.n	8008798 <__cvt+0x9e>
 80087a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087ae:	eba3 0308 	sub.w	r3, r3, r8
 80087b2:	4640      	mov	r0, r8
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	b004      	add	sp, #16
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087bc <__exponent>:
 80087bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087be:	2900      	cmp	r1, #0
 80087c0:	4604      	mov	r4, r0
 80087c2:	bfba      	itte	lt
 80087c4:	4249      	neglt	r1, r1
 80087c6:	232d      	movlt	r3, #45	; 0x2d
 80087c8:	232b      	movge	r3, #43	; 0x2b
 80087ca:	2909      	cmp	r1, #9
 80087cc:	f804 2b02 	strb.w	r2, [r4], #2
 80087d0:	7043      	strb	r3, [r0, #1]
 80087d2:	dd20      	ble.n	8008816 <__exponent+0x5a>
 80087d4:	f10d 0307 	add.w	r3, sp, #7
 80087d8:	461f      	mov	r7, r3
 80087da:	260a      	movs	r6, #10
 80087dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80087e0:	fb06 1115 	mls	r1, r6, r5, r1
 80087e4:	3130      	adds	r1, #48	; 0x30
 80087e6:	2d09      	cmp	r5, #9
 80087e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80087f0:	4629      	mov	r1, r5
 80087f2:	dc09      	bgt.n	8008808 <__exponent+0x4c>
 80087f4:	3130      	adds	r1, #48	; 0x30
 80087f6:	3b02      	subs	r3, #2
 80087f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087fc:	42bb      	cmp	r3, r7
 80087fe:	4622      	mov	r2, r4
 8008800:	d304      	bcc.n	800880c <__exponent+0x50>
 8008802:	1a10      	subs	r0, r2, r0
 8008804:	b003      	add	sp, #12
 8008806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008808:	4613      	mov	r3, r2
 800880a:	e7e7      	b.n	80087dc <__exponent+0x20>
 800880c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008810:	f804 2b01 	strb.w	r2, [r4], #1
 8008814:	e7f2      	b.n	80087fc <__exponent+0x40>
 8008816:	2330      	movs	r3, #48	; 0x30
 8008818:	4419      	add	r1, r3
 800881a:	7083      	strb	r3, [r0, #2]
 800881c:	1d02      	adds	r2, r0, #4
 800881e:	70c1      	strb	r1, [r0, #3]
 8008820:	e7ef      	b.n	8008802 <__exponent+0x46>
	...

08008824 <_printf_float>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	b08d      	sub	sp, #52	; 0x34
 800882a:	460c      	mov	r4, r1
 800882c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008830:	4616      	mov	r6, r2
 8008832:	461f      	mov	r7, r3
 8008834:	4605      	mov	r5, r0
 8008836:	f002 fde7 	bl	800b408 <_localeconv_r>
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	4618      	mov	r0, r3
 8008840:	f7f7 fcc6 	bl	80001d0 <strlen>
 8008844:	2300      	movs	r3, #0
 8008846:	930a      	str	r3, [sp, #40]	; 0x28
 8008848:	f8d8 3000 	ldr.w	r3, [r8]
 800884c:	9005      	str	r0, [sp, #20]
 800884e:	3307      	adds	r3, #7
 8008850:	f023 0307 	bic.w	r3, r3, #7
 8008854:	f103 0208 	add.w	r2, r3, #8
 8008858:	f894 a018 	ldrb.w	sl, [r4, #24]
 800885c:	f8d4 b000 	ldr.w	fp, [r4]
 8008860:	f8c8 2000 	str.w	r2, [r8]
 8008864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008868:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800886c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008874:	9307      	str	r3, [sp, #28]
 8008876:	f8cd 8018 	str.w	r8, [sp, #24]
 800887a:	f04f 32ff 	mov.w	r2, #4294967295
 800887e:	4ba7      	ldr	r3, [pc, #668]	; (8008b1c <_printf_float+0x2f8>)
 8008880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008884:	f7f8 f952 	bl	8000b2c <__aeabi_dcmpun>
 8008888:	bb70      	cbnz	r0, 80088e8 <_printf_float+0xc4>
 800888a:	f04f 32ff 	mov.w	r2, #4294967295
 800888e:	4ba3      	ldr	r3, [pc, #652]	; (8008b1c <_printf_float+0x2f8>)
 8008890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008894:	f7f8 f92c 	bl	8000af0 <__aeabi_dcmple>
 8008898:	bb30      	cbnz	r0, 80088e8 <_printf_float+0xc4>
 800889a:	2200      	movs	r2, #0
 800889c:	2300      	movs	r3, #0
 800889e:	4640      	mov	r0, r8
 80088a0:	4649      	mov	r1, r9
 80088a2:	f7f8 f91b 	bl	8000adc <__aeabi_dcmplt>
 80088a6:	b110      	cbz	r0, 80088ae <_printf_float+0x8a>
 80088a8:	232d      	movs	r3, #45	; 0x2d
 80088aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ae:	4a9c      	ldr	r2, [pc, #624]	; (8008b20 <_printf_float+0x2fc>)
 80088b0:	4b9c      	ldr	r3, [pc, #624]	; (8008b24 <_printf_float+0x300>)
 80088b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80088b6:	bf8c      	ite	hi
 80088b8:	4690      	movhi	r8, r2
 80088ba:	4698      	movls	r8, r3
 80088bc:	2303      	movs	r3, #3
 80088be:	f02b 0204 	bic.w	r2, fp, #4
 80088c2:	6123      	str	r3, [r4, #16]
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	f04f 0900 	mov.w	r9, #0
 80088ca:	9700      	str	r7, [sp, #0]
 80088cc:	4633      	mov	r3, r6
 80088ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f9e6 	bl	8008ca4 <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	f040 808d 	bne.w	80089f8 <_printf_float+0x1d4>
 80088de:	f04f 30ff 	mov.w	r0, #4294967295
 80088e2:	b00d      	add	sp, #52	; 0x34
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	4642      	mov	r2, r8
 80088ea:	464b      	mov	r3, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	4649      	mov	r1, r9
 80088f0:	f7f8 f91c 	bl	8000b2c <__aeabi_dcmpun>
 80088f4:	b110      	cbz	r0, 80088fc <_printf_float+0xd8>
 80088f6:	4a8c      	ldr	r2, [pc, #560]	; (8008b28 <_printf_float+0x304>)
 80088f8:	4b8c      	ldr	r3, [pc, #560]	; (8008b2c <_printf_float+0x308>)
 80088fa:	e7da      	b.n	80088b2 <_printf_float+0x8e>
 80088fc:	6861      	ldr	r1, [r4, #4]
 80088fe:	1c4b      	adds	r3, r1, #1
 8008900:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008904:	a80a      	add	r0, sp, #40	; 0x28
 8008906:	d13e      	bne.n	8008986 <_printf_float+0x162>
 8008908:	2306      	movs	r3, #6
 800890a:	6063      	str	r3, [r4, #4]
 800890c:	2300      	movs	r3, #0
 800890e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008912:	ab09      	add	r3, sp, #36	; 0x24
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	ec49 8b10 	vmov	d0, r8, r9
 800891a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800891e:	6022      	str	r2, [r4, #0]
 8008920:	f8cd a004 	str.w	sl, [sp, #4]
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	4628      	mov	r0, r5
 8008928:	f7ff fee7 	bl	80086fa <__cvt>
 800892c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008930:	2b47      	cmp	r3, #71	; 0x47
 8008932:	4680      	mov	r8, r0
 8008934:	d109      	bne.n	800894a <_printf_float+0x126>
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	1cd8      	adds	r0, r3, #3
 800893a:	db02      	blt.n	8008942 <_printf_float+0x11e>
 800893c:	6862      	ldr	r2, [r4, #4]
 800893e:	4293      	cmp	r3, r2
 8008940:	dd47      	ble.n	80089d2 <_printf_float+0x1ae>
 8008942:	f1aa 0a02 	sub.w	sl, sl, #2
 8008946:	fa5f fa8a 	uxtb.w	sl, sl
 800894a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800894e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008950:	d824      	bhi.n	800899c <_printf_float+0x178>
 8008952:	3901      	subs	r1, #1
 8008954:	4652      	mov	r2, sl
 8008956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800895a:	9109      	str	r1, [sp, #36]	; 0x24
 800895c:	f7ff ff2e 	bl	80087bc <__exponent>
 8008960:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008962:	1813      	adds	r3, r2, r0
 8008964:	2a01      	cmp	r2, #1
 8008966:	4681      	mov	r9, r0
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	dc02      	bgt.n	8008972 <_printf_float+0x14e>
 800896c:	6822      	ldr	r2, [r4, #0]
 800896e:	07d1      	lsls	r1, r2, #31
 8008970:	d501      	bpl.n	8008976 <_printf_float+0x152>
 8008972:	3301      	adds	r3, #1
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0a5      	beq.n	80088ca <_printf_float+0xa6>
 800897e:	232d      	movs	r3, #45	; 0x2d
 8008980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008984:	e7a1      	b.n	80088ca <_printf_float+0xa6>
 8008986:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800898a:	f000 8177 	beq.w	8008c7c <_printf_float+0x458>
 800898e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008992:	d1bb      	bne.n	800890c <_printf_float+0xe8>
 8008994:	2900      	cmp	r1, #0
 8008996:	d1b9      	bne.n	800890c <_printf_float+0xe8>
 8008998:	2301      	movs	r3, #1
 800899a:	e7b6      	b.n	800890a <_printf_float+0xe6>
 800899c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80089a0:	d119      	bne.n	80089d6 <_printf_float+0x1b2>
 80089a2:	2900      	cmp	r1, #0
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	dd0c      	ble.n	80089c2 <_printf_float+0x19e>
 80089a8:	6121      	str	r1, [r4, #16]
 80089aa:	b913      	cbnz	r3, 80089b2 <_printf_float+0x18e>
 80089ac:	6822      	ldr	r2, [r4, #0]
 80089ae:	07d2      	lsls	r2, r2, #31
 80089b0:	d502      	bpl.n	80089b8 <_printf_float+0x194>
 80089b2:	3301      	adds	r3, #1
 80089b4:	440b      	add	r3, r1
 80089b6:	6123      	str	r3, [r4, #16]
 80089b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80089bc:	f04f 0900 	mov.w	r9, #0
 80089c0:	e7d9      	b.n	8008976 <_printf_float+0x152>
 80089c2:	b913      	cbnz	r3, 80089ca <_printf_float+0x1a6>
 80089c4:	6822      	ldr	r2, [r4, #0]
 80089c6:	07d0      	lsls	r0, r2, #31
 80089c8:	d501      	bpl.n	80089ce <_printf_float+0x1aa>
 80089ca:	3302      	adds	r3, #2
 80089cc:	e7f3      	b.n	80089b6 <_printf_float+0x192>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7f1      	b.n	80089b6 <_printf_float+0x192>
 80089d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80089d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089da:	4293      	cmp	r3, r2
 80089dc:	db05      	blt.n	80089ea <_printf_float+0x1c6>
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	07d1      	lsls	r1, r2, #31
 80089e4:	d5e8      	bpl.n	80089b8 <_printf_float+0x194>
 80089e6:	3301      	adds	r3, #1
 80089e8:	e7e5      	b.n	80089b6 <_printf_float+0x192>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	bfd4      	ite	le
 80089ee:	f1c3 0302 	rsble	r3, r3, #2
 80089f2:	2301      	movgt	r3, #1
 80089f4:	4413      	add	r3, r2
 80089f6:	e7de      	b.n	80089b6 <_printf_float+0x192>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	055a      	lsls	r2, r3, #21
 80089fc:	d407      	bmi.n	8008a0e <_printf_float+0x1ea>
 80089fe:	6923      	ldr	r3, [r4, #16]
 8008a00:	4642      	mov	r2, r8
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	47b8      	blx	r7
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d12b      	bne.n	8008a64 <_printf_float+0x240>
 8008a0c:	e767      	b.n	80088de <_printf_float+0xba>
 8008a0e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a12:	f240 80dc 	bls.w	8008bce <_printf_float+0x3aa>
 8008a16:	2200      	movs	r2, #0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a1e:	f7f8 f853 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d033      	beq.n	8008a8e <_printf_float+0x26a>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4a41      	ldr	r2, [pc, #260]	; (8008b30 <_printf_float+0x30c>)
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f af54 	beq.w	80088de <_printf_float+0xba>
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	db02      	blt.n	8008a44 <_printf_float+0x220>
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	07d8      	lsls	r0, r3, #31
 8008a42:	d50f      	bpl.n	8008a64 <_printf_float+0x240>
 8008a44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a48:	4631      	mov	r1, r6
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	47b8      	blx	r7
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f43f af45 	beq.w	80088de <_printf_float+0xba>
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	f104 091a 	add.w	r9, r4, #26
 8008a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4543      	cmp	r3, r8
 8008a62:	dc09      	bgt.n	8008a78 <_printf_float+0x254>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	079b      	lsls	r3, r3, #30
 8008a68:	f100 8103 	bmi.w	8008c72 <_printf_float+0x44e>
 8008a6c:	68e0      	ldr	r0, [r4, #12]
 8008a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a70:	4298      	cmp	r0, r3
 8008a72:	bfb8      	it	lt
 8008a74:	4618      	movlt	r0, r3
 8008a76:	e734      	b.n	80088e2 <_printf_float+0xbe>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	464a      	mov	r2, r9
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4628      	mov	r0, r5
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f af2b 	beq.w	80088de <_printf_float+0xba>
 8008a88:	f108 0801 	add.w	r8, r8, #1
 8008a8c:	e7e6      	b.n	8008a5c <_printf_float+0x238>
 8008a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	dc2b      	bgt.n	8008aec <_printf_float+0x2c8>
 8008a94:	2301      	movs	r3, #1
 8008a96:	4a26      	ldr	r2, [pc, #152]	; (8008b30 <_printf_float+0x30c>)
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af1d 	beq.w	80088de <_printf_float+0xba>
 8008aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aa6:	b923      	cbnz	r3, 8008ab2 <_printf_float+0x28e>
 8008aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aaa:	b913      	cbnz	r3, 8008ab2 <_printf_float+0x28e>
 8008aac:	6823      	ldr	r3, [r4, #0]
 8008aae:	07d9      	lsls	r1, r3, #31
 8008ab0:	d5d8      	bpl.n	8008a64 <_printf_float+0x240>
 8008ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f af0e 	beq.w	80088de <_printf_float+0xba>
 8008ac2:	f04f 0900 	mov.w	r9, #0
 8008ac6:	f104 0a1a 	add.w	sl, r4, #26
 8008aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008acc:	425b      	negs	r3, r3
 8008ace:	454b      	cmp	r3, r9
 8008ad0:	dc01      	bgt.n	8008ad6 <_printf_float+0x2b2>
 8008ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad4:	e794      	b.n	8008a00 <_printf_float+0x1dc>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	4652      	mov	r2, sl
 8008ada:	4631      	mov	r1, r6
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b8      	blx	r7
 8008ae0:	3001      	adds	r0, #1
 8008ae2:	f43f aefc 	beq.w	80088de <_printf_float+0xba>
 8008ae6:	f109 0901 	add.w	r9, r9, #1
 8008aea:	e7ee      	b.n	8008aca <_printf_float+0x2a6>
 8008aec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008af0:	429a      	cmp	r2, r3
 8008af2:	bfa8      	it	ge
 8008af4:	461a      	movge	r2, r3
 8008af6:	2a00      	cmp	r2, #0
 8008af8:	4691      	mov	r9, r2
 8008afa:	dd07      	ble.n	8008b0c <_printf_float+0x2e8>
 8008afc:	4613      	mov	r3, r2
 8008afe:	4631      	mov	r1, r6
 8008b00:	4642      	mov	r2, r8
 8008b02:	4628      	mov	r0, r5
 8008b04:	47b8      	blx	r7
 8008b06:	3001      	adds	r0, #1
 8008b08:	f43f aee9 	beq.w	80088de <_printf_float+0xba>
 8008b0c:	f104 031a 	add.w	r3, r4, #26
 8008b10:	f04f 0b00 	mov.w	fp, #0
 8008b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b18:	9306      	str	r3, [sp, #24]
 8008b1a:	e015      	b.n	8008b48 <_printf_float+0x324>
 8008b1c:	7fefffff 	.word	0x7fefffff
 8008b20:	0800c194 	.word	0x0800c194
 8008b24:	0800c190 	.word	0x0800c190
 8008b28:	0800c19c 	.word	0x0800c19c
 8008b2c:	0800c198 	.word	0x0800c198
 8008b30:	0800c1a0 	.word	0x0800c1a0
 8008b34:	2301      	movs	r3, #1
 8008b36:	9a06      	ldr	r2, [sp, #24]
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	47b8      	blx	r7
 8008b3e:	3001      	adds	r0, #1
 8008b40:	f43f aecd 	beq.w	80088de <_printf_float+0xba>
 8008b44:	f10b 0b01 	add.w	fp, fp, #1
 8008b48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b4c:	ebaa 0309 	sub.w	r3, sl, r9
 8008b50:	455b      	cmp	r3, fp
 8008b52:	dcef      	bgt.n	8008b34 <_printf_float+0x310>
 8008b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	44d0      	add	r8, sl
 8008b5c:	db15      	blt.n	8008b8a <_printf_float+0x366>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	07da      	lsls	r2, r3, #31
 8008b62:	d412      	bmi.n	8008b8a <_printf_float+0x366>
 8008b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b68:	eba3 020a 	sub.w	r2, r3, sl
 8008b6c:	eba3 0a01 	sub.w	sl, r3, r1
 8008b70:	4592      	cmp	sl, r2
 8008b72:	bfa8      	it	ge
 8008b74:	4692      	movge	sl, r2
 8008b76:	f1ba 0f00 	cmp.w	sl, #0
 8008b7a:	dc0e      	bgt.n	8008b9a <_printf_float+0x376>
 8008b7c:	f04f 0800 	mov.w	r8, #0
 8008b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b84:	f104 091a 	add.w	r9, r4, #26
 8008b88:	e019      	b.n	8008bbe <_printf_float+0x39a>
 8008b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	47b8      	blx	r7
 8008b94:	3001      	adds	r0, #1
 8008b96:	d1e5      	bne.n	8008b64 <_printf_float+0x340>
 8008b98:	e6a1      	b.n	80088de <_printf_float+0xba>
 8008b9a:	4653      	mov	r3, sl
 8008b9c:	4642      	mov	r2, r8
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1e9      	bne.n	8008b7c <_printf_float+0x358>
 8008ba8:	e699      	b.n	80088de <_printf_float+0xba>
 8008baa:	2301      	movs	r3, #1
 8008bac:	464a      	mov	r2, r9
 8008bae:	4631      	mov	r1, r6
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	f43f ae92 	beq.w	80088de <_printf_float+0xba>
 8008bba:	f108 0801 	add.w	r8, r8, #1
 8008bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc2:	1a9b      	subs	r3, r3, r2
 8008bc4:	eba3 030a 	sub.w	r3, r3, sl
 8008bc8:	4543      	cmp	r3, r8
 8008bca:	dcee      	bgt.n	8008baa <_printf_float+0x386>
 8008bcc:	e74a      	b.n	8008a64 <_printf_float+0x240>
 8008bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd0:	2a01      	cmp	r2, #1
 8008bd2:	dc01      	bgt.n	8008bd8 <_printf_float+0x3b4>
 8008bd4:	07db      	lsls	r3, r3, #31
 8008bd6:	d53a      	bpl.n	8008c4e <_printf_float+0x42a>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	4642      	mov	r2, r8
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f ae7b 	beq.w	80088de <_printf_float+0xba>
 8008be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f108 0801 	add.w	r8, r8, #1
 8008bf8:	f43f ae71 	beq.w	80088de <_printf_float+0xba>
 8008bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bfe:	2200      	movs	r2, #0
 8008c00:	f103 3aff 	add.w	sl, r3, #4294967295
 8008c04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f7f7 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c0e:	b9c8      	cbnz	r0, 8008c44 <_printf_float+0x420>
 8008c10:	4653      	mov	r3, sl
 8008c12:	4642      	mov	r2, r8
 8008c14:	4631      	mov	r1, r6
 8008c16:	4628      	mov	r0, r5
 8008c18:	47b8      	blx	r7
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d10e      	bne.n	8008c3c <_printf_float+0x418>
 8008c1e:	e65e      	b.n	80088de <_printf_float+0xba>
 8008c20:	2301      	movs	r3, #1
 8008c22:	4652      	mov	r2, sl
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	47b8      	blx	r7
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f ae57 	beq.w	80088de <_printf_float+0xba>
 8008c30:	f108 0801 	add.w	r8, r8, #1
 8008c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4543      	cmp	r3, r8
 8008c3a:	dcf1      	bgt.n	8008c20 <_printf_float+0x3fc>
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c42:	e6de      	b.n	8008a02 <_printf_float+0x1de>
 8008c44:	f04f 0800 	mov.w	r8, #0
 8008c48:	f104 0a1a 	add.w	sl, r4, #26
 8008c4c:	e7f2      	b.n	8008c34 <_printf_float+0x410>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e7df      	b.n	8008c12 <_printf_float+0x3ee>
 8008c52:	2301      	movs	r3, #1
 8008c54:	464a      	mov	r2, r9
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	47b8      	blx	r7
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	f43f ae3e 	beq.w	80088de <_printf_float+0xba>
 8008c62:	f108 0801 	add.w	r8, r8, #1
 8008c66:	68e3      	ldr	r3, [r4, #12]
 8008c68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	4543      	cmp	r3, r8
 8008c6e:	dcf0      	bgt.n	8008c52 <_printf_float+0x42e>
 8008c70:	e6fc      	b.n	8008a6c <_printf_float+0x248>
 8008c72:	f04f 0800 	mov.w	r8, #0
 8008c76:	f104 0919 	add.w	r9, r4, #25
 8008c7a:	e7f4      	b.n	8008c66 <_printf_float+0x442>
 8008c7c:	2900      	cmp	r1, #0
 8008c7e:	f43f ae8b 	beq.w	8008998 <_printf_float+0x174>
 8008c82:	2300      	movs	r3, #0
 8008c84:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c88:	ab09      	add	r3, sp, #36	; 0x24
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	ec49 8b10 	vmov	d0, r8, r9
 8008c90:	6022      	str	r2, [r4, #0]
 8008c92:	f8cd a004 	str.w	sl, [sp, #4]
 8008c96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f7ff fd2d 	bl	80086fa <__cvt>
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	e648      	b.n	8008936 <_printf_float+0x112>

08008ca4 <_printf_common>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	4691      	mov	r9, r2
 8008caa:	461f      	mov	r7, r3
 8008cac:	688a      	ldr	r2, [r1, #8]
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	bfb8      	it	lt
 8008cb8:	4613      	movlt	r3, r2
 8008cba:	f8c9 3000 	str.w	r3, [r9]
 8008cbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	b112      	cbz	r2, 8008cce <_printf_common+0x2a>
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f8c9 3000 	str.w	r3, [r9]
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	0699      	lsls	r1, r3, #26
 8008cd2:	bf42      	ittt	mi
 8008cd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cd8:	3302      	addmi	r3, #2
 8008cda:	f8c9 3000 	strmi.w	r3, [r9]
 8008cde:	6825      	ldr	r5, [r4, #0]
 8008ce0:	f015 0506 	ands.w	r5, r5, #6
 8008ce4:	d107      	bne.n	8008cf6 <_printf_common+0x52>
 8008ce6:	f104 0a19 	add.w	sl, r4, #25
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	f8d9 2000 	ldr.w	r2, [r9]
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	42ab      	cmp	r3, r5
 8008cf4:	dc28      	bgt.n	8008d48 <_printf_common+0xa4>
 8008cf6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	3300      	adds	r3, #0
 8008cfe:	bf18      	it	ne
 8008d00:	2301      	movne	r3, #1
 8008d02:	0692      	lsls	r2, r2, #26
 8008d04:	d42d      	bmi.n	8008d62 <_printf_common+0xbe>
 8008d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	47c0      	blx	r8
 8008d10:	3001      	adds	r0, #1
 8008d12:	d020      	beq.n	8008d56 <_printf_common+0xb2>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	68e5      	ldr	r5, [r4, #12]
 8008d18:	f8d9 2000 	ldr.w	r2, [r9]
 8008d1c:	f003 0306 	and.w	r3, r3, #6
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	bf08      	it	eq
 8008d24:	1aad      	subeq	r5, r5, r2
 8008d26:	68a3      	ldr	r3, [r4, #8]
 8008d28:	6922      	ldr	r2, [r4, #16]
 8008d2a:	bf0c      	ite	eq
 8008d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d30:	2500      	movne	r5, #0
 8008d32:	4293      	cmp	r3, r2
 8008d34:	bfc4      	itt	gt
 8008d36:	1a9b      	subgt	r3, r3, r2
 8008d38:	18ed      	addgt	r5, r5, r3
 8008d3a:	f04f 0900 	mov.w	r9, #0
 8008d3e:	341a      	adds	r4, #26
 8008d40:	454d      	cmp	r5, r9
 8008d42:	d11a      	bne.n	8008d7a <_printf_common+0xd6>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e008      	b.n	8008d5a <_printf_common+0xb6>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4630      	mov	r0, r6
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d103      	bne.n	8008d5e <_printf_common+0xba>
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	3501      	adds	r5, #1
 8008d60:	e7c3      	b.n	8008cea <_printf_common+0x46>
 8008d62:	18e1      	adds	r1, r4, r3
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	2030      	movs	r0, #48	; 0x30
 8008d68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d6c:	4422      	add	r2, r4
 8008d6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d76:	3302      	adds	r3, #2
 8008d78:	e7c5      	b.n	8008d06 <_printf_common+0x62>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4630      	mov	r0, r6
 8008d82:	47c0      	blx	r8
 8008d84:	3001      	adds	r0, #1
 8008d86:	d0e6      	beq.n	8008d56 <_printf_common+0xb2>
 8008d88:	f109 0901 	add.w	r9, r9, #1
 8008d8c:	e7d8      	b.n	8008d40 <_printf_common+0x9c>
	...

08008d90 <_printf_i>:
 8008d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d98:	460c      	mov	r4, r1
 8008d9a:	7e09      	ldrb	r1, [r1, #24]
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	296e      	cmp	r1, #110	; 0x6e
 8008da0:	4617      	mov	r7, r2
 8008da2:	4606      	mov	r6, r0
 8008da4:	4698      	mov	r8, r3
 8008da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da8:	f000 80b3 	beq.w	8008f12 <_printf_i+0x182>
 8008dac:	d822      	bhi.n	8008df4 <_printf_i+0x64>
 8008dae:	2963      	cmp	r1, #99	; 0x63
 8008db0:	d036      	beq.n	8008e20 <_printf_i+0x90>
 8008db2:	d80a      	bhi.n	8008dca <_printf_i+0x3a>
 8008db4:	2900      	cmp	r1, #0
 8008db6:	f000 80b9 	beq.w	8008f2c <_printf_i+0x19c>
 8008dba:	2958      	cmp	r1, #88	; 0x58
 8008dbc:	f000 8083 	beq.w	8008ec6 <_printf_i+0x136>
 8008dc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008dc8:	e032      	b.n	8008e30 <_printf_i+0xa0>
 8008dca:	2964      	cmp	r1, #100	; 0x64
 8008dcc:	d001      	beq.n	8008dd2 <_printf_i+0x42>
 8008dce:	2969      	cmp	r1, #105	; 0x69
 8008dd0:	d1f6      	bne.n	8008dc0 <_printf_i+0x30>
 8008dd2:	6820      	ldr	r0, [r4, #0]
 8008dd4:	6813      	ldr	r3, [r2, #0]
 8008dd6:	0605      	lsls	r5, r0, #24
 8008dd8:	f103 0104 	add.w	r1, r3, #4
 8008ddc:	d52a      	bpl.n	8008e34 <_printf_i+0xa4>
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6011      	str	r1, [r2, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	da03      	bge.n	8008dee <_printf_i+0x5e>
 8008de6:	222d      	movs	r2, #45	; 0x2d
 8008de8:	425b      	negs	r3, r3
 8008dea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008dee:	486f      	ldr	r0, [pc, #444]	; (8008fac <_printf_i+0x21c>)
 8008df0:	220a      	movs	r2, #10
 8008df2:	e039      	b.n	8008e68 <_printf_i+0xd8>
 8008df4:	2973      	cmp	r1, #115	; 0x73
 8008df6:	f000 809d 	beq.w	8008f34 <_printf_i+0x1a4>
 8008dfa:	d808      	bhi.n	8008e0e <_printf_i+0x7e>
 8008dfc:	296f      	cmp	r1, #111	; 0x6f
 8008dfe:	d020      	beq.n	8008e42 <_printf_i+0xb2>
 8008e00:	2970      	cmp	r1, #112	; 0x70
 8008e02:	d1dd      	bne.n	8008dc0 <_printf_i+0x30>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	f043 0320 	orr.w	r3, r3, #32
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	e003      	b.n	8008e16 <_printf_i+0x86>
 8008e0e:	2975      	cmp	r1, #117	; 0x75
 8008e10:	d017      	beq.n	8008e42 <_printf_i+0xb2>
 8008e12:	2978      	cmp	r1, #120	; 0x78
 8008e14:	d1d4      	bne.n	8008dc0 <_printf_i+0x30>
 8008e16:	2378      	movs	r3, #120	; 0x78
 8008e18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e1c:	4864      	ldr	r0, [pc, #400]	; (8008fb0 <_printf_i+0x220>)
 8008e1e:	e055      	b.n	8008ecc <_printf_i+0x13c>
 8008e20:	6813      	ldr	r3, [r2, #0]
 8008e22:	1d19      	adds	r1, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	6011      	str	r1, [r2, #0]
 8008e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e30:	2301      	movs	r3, #1
 8008e32:	e08c      	b.n	8008f4e <_printf_i+0x1be>
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6011      	str	r1, [r2, #0]
 8008e38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e3c:	bf18      	it	ne
 8008e3e:	b21b      	sxthne	r3, r3
 8008e40:	e7cf      	b.n	8008de2 <_printf_i+0x52>
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	6825      	ldr	r5, [r4, #0]
 8008e46:	1d18      	adds	r0, r3, #4
 8008e48:	6010      	str	r0, [r2, #0]
 8008e4a:	0628      	lsls	r0, r5, #24
 8008e4c:	d501      	bpl.n	8008e52 <_printf_i+0xc2>
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	e002      	b.n	8008e58 <_printf_i+0xc8>
 8008e52:	0668      	lsls	r0, r5, #25
 8008e54:	d5fb      	bpl.n	8008e4e <_printf_i+0xbe>
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	4854      	ldr	r0, [pc, #336]	; (8008fac <_printf_i+0x21c>)
 8008e5a:	296f      	cmp	r1, #111	; 0x6f
 8008e5c:	bf14      	ite	ne
 8008e5e:	220a      	movne	r2, #10
 8008e60:	2208      	moveq	r2, #8
 8008e62:	2100      	movs	r1, #0
 8008e64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e68:	6865      	ldr	r5, [r4, #4]
 8008e6a:	60a5      	str	r5, [r4, #8]
 8008e6c:	2d00      	cmp	r5, #0
 8008e6e:	f2c0 8095 	blt.w	8008f9c <_printf_i+0x20c>
 8008e72:	6821      	ldr	r1, [r4, #0]
 8008e74:	f021 0104 	bic.w	r1, r1, #4
 8008e78:	6021      	str	r1, [r4, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d13d      	bne.n	8008efa <_printf_i+0x16a>
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	f040 808e 	bne.w	8008fa0 <_printf_i+0x210>
 8008e84:	4665      	mov	r5, ip
 8008e86:	2a08      	cmp	r2, #8
 8008e88:	d10b      	bne.n	8008ea2 <_printf_i+0x112>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	07db      	lsls	r3, r3, #31
 8008e8e:	d508      	bpl.n	8008ea2 <_printf_i+0x112>
 8008e90:	6923      	ldr	r3, [r4, #16]
 8008e92:	6862      	ldr	r2, [r4, #4]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	bfde      	ittt	le
 8008e98:	2330      	movle	r3, #48	; 0x30
 8008e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ea2:	ebac 0305 	sub.w	r3, ip, r5
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	f8cd 8000 	str.w	r8, [sp]
 8008eac:	463b      	mov	r3, r7
 8008eae:	aa03      	add	r2, sp, #12
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff fef6 	bl	8008ca4 <_printf_common>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	d14d      	bne.n	8008f58 <_printf_i+0x1c8>
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	b005      	add	sp, #20
 8008ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	4839      	ldr	r0, [pc, #228]	; (8008fac <_printf_i+0x21c>)
 8008ec8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ecc:	6813      	ldr	r3, [r2, #0]
 8008ece:	6821      	ldr	r1, [r4, #0]
 8008ed0:	1d1d      	adds	r5, r3, #4
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	6015      	str	r5, [r2, #0]
 8008ed6:	060a      	lsls	r2, r1, #24
 8008ed8:	d50b      	bpl.n	8008ef2 <_printf_i+0x162>
 8008eda:	07ca      	lsls	r2, r1, #31
 8008edc:	bf44      	itt	mi
 8008ede:	f041 0120 	orrmi.w	r1, r1, #32
 8008ee2:	6021      	strmi	r1, [r4, #0]
 8008ee4:	b91b      	cbnz	r3, 8008eee <_printf_i+0x15e>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	f022 0220 	bic.w	r2, r2, #32
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	2210      	movs	r2, #16
 8008ef0:	e7b7      	b.n	8008e62 <_printf_i+0xd2>
 8008ef2:	064d      	lsls	r5, r1, #25
 8008ef4:	bf48      	it	mi
 8008ef6:	b29b      	uxthmi	r3, r3
 8008ef8:	e7ef      	b.n	8008eda <_printf_i+0x14a>
 8008efa:	4665      	mov	r5, ip
 8008efc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f00:	fb02 3311 	mls	r3, r2, r1, r3
 8008f04:	5cc3      	ldrb	r3, [r0, r3]
 8008f06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d1f5      	bne.n	8008efc <_printf_i+0x16c>
 8008f10:	e7b9      	b.n	8008e86 <_printf_i+0xf6>
 8008f12:	6813      	ldr	r3, [r2, #0]
 8008f14:	6825      	ldr	r5, [r4, #0]
 8008f16:	6961      	ldr	r1, [r4, #20]
 8008f18:	1d18      	adds	r0, r3, #4
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	0628      	lsls	r0, r5, #24
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	d501      	bpl.n	8008f26 <_printf_i+0x196>
 8008f22:	6019      	str	r1, [r3, #0]
 8008f24:	e002      	b.n	8008f2c <_printf_i+0x19c>
 8008f26:	066a      	lsls	r2, r5, #25
 8008f28:	d5fb      	bpl.n	8008f22 <_printf_i+0x192>
 8008f2a:	8019      	strh	r1, [r3, #0]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	6123      	str	r3, [r4, #16]
 8008f30:	4665      	mov	r5, ip
 8008f32:	e7b9      	b.n	8008ea8 <_printf_i+0x118>
 8008f34:	6813      	ldr	r3, [r2, #0]
 8008f36:	1d19      	adds	r1, r3, #4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	681d      	ldr	r5, [r3, #0]
 8008f3c:	6862      	ldr	r2, [r4, #4]
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4628      	mov	r0, r5
 8008f42:	f7f7 f94d 	bl	80001e0 <memchr>
 8008f46:	b108      	cbz	r0, 8008f4c <_printf_i+0x1bc>
 8008f48:	1b40      	subs	r0, r0, r5
 8008f4a:	6060      	str	r0, [r4, #4]
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	6123      	str	r3, [r4, #16]
 8008f50:	2300      	movs	r3, #0
 8008f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f56:	e7a7      	b.n	8008ea8 <_printf_i+0x118>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	462a      	mov	r2, r5
 8008f5c:	4639      	mov	r1, r7
 8008f5e:	4630      	mov	r0, r6
 8008f60:	47c0      	blx	r8
 8008f62:	3001      	adds	r0, #1
 8008f64:	d0aa      	beq.n	8008ebc <_printf_i+0x12c>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	079b      	lsls	r3, r3, #30
 8008f6a:	d413      	bmi.n	8008f94 <_printf_i+0x204>
 8008f6c:	68e0      	ldr	r0, [r4, #12]
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	4298      	cmp	r0, r3
 8008f72:	bfb8      	it	lt
 8008f74:	4618      	movlt	r0, r3
 8008f76:	e7a3      	b.n	8008ec0 <_printf_i+0x130>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	464a      	mov	r2, r9
 8008f7c:	4639      	mov	r1, r7
 8008f7e:	4630      	mov	r0, r6
 8008f80:	47c0      	blx	r8
 8008f82:	3001      	adds	r0, #1
 8008f84:	d09a      	beq.n	8008ebc <_printf_i+0x12c>
 8008f86:	3501      	adds	r5, #1
 8008f88:	68e3      	ldr	r3, [r4, #12]
 8008f8a:	9a03      	ldr	r2, [sp, #12]
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	42ab      	cmp	r3, r5
 8008f90:	dcf2      	bgt.n	8008f78 <_printf_i+0x1e8>
 8008f92:	e7eb      	b.n	8008f6c <_printf_i+0x1dc>
 8008f94:	2500      	movs	r5, #0
 8008f96:	f104 0919 	add.w	r9, r4, #25
 8008f9a:	e7f5      	b.n	8008f88 <_printf_i+0x1f8>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ac      	bne.n	8008efa <_printf_i+0x16a>
 8008fa0:	7803      	ldrb	r3, [r0, #0]
 8008fa2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008faa:	e76c      	b.n	8008e86 <_printf_i+0xf6>
 8008fac:	0800c1a2 	.word	0x0800c1a2
 8008fb0:	0800c1b3 	.word	0x0800c1b3

08008fb4 <_scanf_float>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	469a      	mov	sl, r3
 8008fba:	688b      	ldr	r3, [r1, #8]
 8008fbc:	4616      	mov	r6, r2
 8008fbe:	1e5a      	subs	r2, r3, #1
 8008fc0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fc4:	b087      	sub	sp, #28
 8008fc6:	bf83      	ittte	hi
 8008fc8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008fcc:	189b      	addhi	r3, r3, r2
 8008fce:	9301      	strhi	r3, [sp, #4]
 8008fd0:	2300      	movls	r3, #0
 8008fd2:	bf86      	itte	hi
 8008fd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fd8:	608b      	strhi	r3, [r1, #8]
 8008fda:	9301      	strls	r3, [sp, #4]
 8008fdc:	680b      	ldr	r3, [r1, #0]
 8008fde:	4688      	mov	r8, r1
 8008fe0:	f04f 0b00 	mov.w	fp, #0
 8008fe4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008fe8:	f848 3b1c 	str.w	r3, [r8], #28
 8008fec:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008ff0:	4607      	mov	r7, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4645      	mov	r5, r8
 8008ff6:	465a      	mov	r2, fp
 8008ff8:	46d9      	mov	r9, fp
 8008ffa:	f8cd b008 	str.w	fp, [sp, #8]
 8008ffe:	68a1      	ldr	r1, [r4, #8]
 8009000:	b181      	cbz	r1, 8009024 <_scanf_float+0x70>
 8009002:	6833      	ldr	r3, [r6, #0]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b49      	cmp	r3, #73	; 0x49
 8009008:	d071      	beq.n	80090ee <_scanf_float+0x13a>
 800900a:	d84d      	bhi.n	80090a8 <_scanf_float+0xf4>
 800900c:	2b39      	cmp	r3, #57	; 0x39
 800900e:	d840      	bhi.n	8009092 <_scanf_float+0xde>
 8009010:	2b31      	cmp	r3, #49	; 0x31
 8009012:	f080 8088 	bcs.w	8009126 <_scanf_float+0x172>
 8009016:	2b2d      	cmp	r3, #45	; 0x2d
 8009018:	f000 8090 	beq.w	800913c <_scanf_float+0x188>
 800901c:	d815      	bhi.n	800904a <_scanf_float+0x96>
 800901e:	2b2b      	cmp	r3, #43	; 0x2b
 8009020:	f000 808c 	beq.w	800913c <_scanf_float+0x188>
 8009024:	f1b9 0f00 	cmp.w	r9, #0
 8009028:	d003      	beq.n	8009032 <_scanf_float+0x7e>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	3a01      	subs	r2, #1
 8009034:	2a01      	cmp	r2, #1
 8009036:	f200 80ea 	bhi.w	800920e <_scanf_float+0x25a>
 800903a:	4545      	cmp	r5, r8
 800903c:	f200 80dc 	bhi.w	80091f8 <_scanf_float+0x244>
 8009040:	2601      	movs	r6, #1
 8009042:	4630      	mov	r0, r6
 8009044:	b007      	add	sp, #28
 8009046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904a:	2b2e      	cmp	r3, #46	; 0x2e
 800904c:	f000 809f 	beq.w	800918e <_scanf_float+0x1da>
 8009050:	2b30      	cmp	r3, #48	; 0x30
 8009052:	d1e7      	bne.n	8009024 <_scanf_float+0x70>
 8009054:	6820      	ldr	r0, [r4, #0]
 8009056:	f410 7f80 	tst.w	r0, #256	; 0x100
 800905a:	d064      	beq.n	8009126 <_scanf_float+0x172>
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f109 0901 	add.w	r9, r9, #1
 8009068:	b11b      	cbz	r3, 8009072 <_scanf_float+0xbe>
 800906a:	3b01      	subs	r3, #1
 800906c:	3101      	adds	r1, #1
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	60a1      	str	r1, [r4, #8]
 8009072:	68a3      	ldr	r3, [r4, #8]
 8009074:	3b01      	subs	r3, #1
 8009076:	60a3      	str	r3, [r4, #8]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	3301      	adds	r3, #1
 800907c:	6123      	str	r3, [r4, #16]
 800907e:	6873      	ldr	r3, [r6, #4]
 8009080:	3b01      	subs	r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	6073      	str	r3, [r6, #4]
 8009086:	f340 80ac 	ble.w	80091e2 <_scanf_float+0x22e>
 800908a:	6833      	ldr	r3, [r6, #0]
 800908c:	3301      	adds	r3, #1
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	e7b5      	b.n	8008ffe <_scanf_float+0x4a>
 8009092:	2b45      	cmp	r3, #69	; 0x45
 8009094:	f000 8085 	beq.w	80091a2 <_scanf_float+0x1ee>
 8009098:	2b46      	cmp	r3, #70	; 0x46
 800909a:	d06a      	beq.n	8009172 <_scanf_float+0x1be>
 800909c:	2b41      	cmp	r3, #65	; 0x41
 800909e:	d1c1      	bne.n	8009024 <_scanf_float+0x70>
 80090a0:	2a01      	cmp	r2, #1
 80090a2:	d1bf      	bne.n	8009024 <_scanf_float+0x70>
 80090a4:	2202      	movs	r2, #2
 80090a6:	e046      	b.n	8009136 <_scanf_float+0x182>
 80090a8:	2b65      	cmp	r3, #101	; 0x65
 80090aa:	d07a      	beq.n	80091a2 <_scanf_float+0x1ee>
 80090ac:	d818      	bhi.n	80090e0 <_scanf_float+0x12c>
 80090ae:	2b54      	cmp	r3, #84	; 0x54
 80090b0:	d066      	beq.n	8009180 <_scanf_float+0x1cc>
 80090b2:	d811      	bhi.n	80090d8 <_scanf_float+0x124>
 80090b4:	2b4e      	cmp	r3, #78	; 0x4e
 80090b6:	d1b5      	bne.n	8009024 <_scanf_float+0x70>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	d146      	bne.n	800914a <_scanf_float+0x196>
 80090bc:	f1b9 0f00 	cmp.w	r9, #0
 80090c0:	d145      	bne.n	800914e <_scanf_float+0x19a>
 80090c2:	6821      	ldr	r1, [r4, #0]
 80090c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80090c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80090cc:	d13f      	bne.n	800914e <_scanf_float+0x19a>
 80090ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80090d2:	6021      	str	r1, [r4, #0]
 80090d4:	2201      	movs	r2, #1
 80090d6:	e02e      	b.n	8009136 <_scanf_float+0x182>
 80090d8:	2b59      	cmp	r3, #89	; 0x59
 80090da:	d01e      	beq.n	800911a <_scanf_float+0x166>
 80090dc:	2b61      	cmp	r3, #97	; 0x61
 80090de:	e7de      	b.n	800909e <_scanf_float+0xea>
 80090e0:	2b6e      	cmp	r3, #110	; 0x6e
 80090e2:	d0e9      	beq.n	80090b8 <_scanf_float+0x104>
 80090e4:	d815      	bhi.n	8009112 <_scanf_float+0x15e>
 80090e6:	2b66      	cmp	r3, #102	; 0x66
 80090e8:	d043      	beq.n	8009172 <_scanf_float+0x1be>
 80090ea:	2b69      	cmp	r3, #105	; 0x69
 80090ec:	d19a      	bne.n	8009024 <_scanf_float+0x70>
 80090ee:	f1bb 0f00 	cmp.w	fp, #0
 80090f2:	d138      	bne.n	8009166 <_scanf_float+0x1b2>
 80090f4:	f1b9 0f00 	cmp.w	r9, #0
 80090f8:	d197      	bne.n	800902a <_scanf_float+0x76>
 80090fa:	6821      	ldr	r1, [r4, #0]
 80090fc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009100:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009104:	d195      	bne.n	8009032 <_scanf_float+0x7e>
 8009106:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800910a:	6021      	str	r1, [r4, #0]
 800910c:	f04f 0b01 	mov.w	fp, #1
 8009110:	e011      	b.n	8009136 <_scanf_float+0x182>
 8009112:	2b74      	cmp	r3, #116	; 0x74
 8009114:	d034      	beq.n	8009180 <_scanf_float+0x1cc>
 8009116:	2b79      	cmp	r3, #121	; 0x79
 8009118:	d184      	bne.n	8009024 <_scanf_float+0x70>
 800911a:	f1bb 0f07 	cmp.w	fp, #7
 800911e:	d181      	bne.n	8009024 <_scanf_float+0x70>
 8009120:	f04f 0b08 	mov.w	fp, #8
 8009124:	e007      	b.n	8009136 <_scanf_float+0x182>
 8009126:	eb12 0f0b 	cmn.w	r2, fp
 800912a:	f47f af7b 	bne.w	8009024 <_scanf_float+0x70>
 800912e:	6821      	ldr	r1, [r4, #0]
 8009130:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009134:	6021      	str	r1, [r4, #0]
 8009136:	702b      	strb	r3, [r5, #0]
 8009138:	3501      	adds	r5, #1
 800913a:	e79a      	b.n	8009072 <_scanf_float+0xbe>
 800913c:	6821      	ldr	r1, [r4, #0]
 800913e:	0608      	lsls	r0, r1, #24
 8009140:	f57f af70 	bpl.w	8009024 <_scanf_float+0x70>
 8009144:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009148:	e7f4      	b.n	8009134 <_scanf_float+0x180>
 800914a:	2a02      	cmp	r2, #2
 800914c:	d047      	beq.n	80091de <_scanf_float+0x22a>
 800914e:	f1bb 0f01 	cmp.w	fp, #1
 8009152:	d003      	beq.n	800915c <_scanf_float+0x1a8>
 8009154:	f1bb 0f04 	cmp.w	fp, #4
 8009158:	f47f af64 	bne.w	8009024 <_scanf_float+0x70>
 800915c:	f10b 0b01 	add.w	fp, fp, #1
 8009160:	fa5f fb8b 	uxtb.w	fp, fp
 8009164:	e7e7      	b.n	8009136 <_scanf_float+0x182>
 8009166:	f1bb 0f03 	cmp.w	fp, #3
 800916a:	d0f7      	beq.n	800915c <_scanf_float+0x1a8>
 800916c:	f1bb 0f05 	cmp.w	fp, #5
 8009170:	e7f2      	b.n	8009158 <_scanf_float+0x1a4>
 8009172:	f1bb 0f02 	cmp.w	fp, #2
 8009176:	f47f af55 	bne.w	8009024 <_scanf_float+0x70>
 800917a:	f04f 0b03 	mov.w	fp, #3
 800917e:	e7da      	b.n	8009136 <_scanf_float+0x182>
 8009180:	f1bb 0f06 	cmp.w	fp, #6
 8009184:	f47f af4e 	bne.w	8009024 <_scanf_float+0x70>
 8009188:	f04f 0b07 	mov.w	fp, #7
 800918c:	e7d3      	b.n	8009136 <_scanf_float+0x182>
 800918e:	6821      	ldr	r1, [r4, #0]
 8009190:	0588      	lsls	r0, r1, #22
 8009192:	f57f af47 	bpl.w	8009024 <_scanf_float+0x70>
 8009196:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800919a:	6021      	str	r1, [r4, #0]
 800919c:	f8cd 9008 	str.w	r9, [sp, #8]
 80091a0:	e7c9      	b.n	8009136 <_scanf_float+0x182>
 80091a2:	6821      	ldr	r1, [r4, #0]
 80091a4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80091a8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80091ac:	d006      	beq.n	80091bc <_scanf_float+0x208>
 80091ae:	0548      	lsls	r0, r1, #21
 80091b0:	f57f af38 	bpl.w	8009024 <_scanf_float+0x70>
 80091b4:	f1b9 0f00 	cmp.w	r9, #0
 80091b8:	f43f af3b 	beq.w	8009032 <_scanf_float+0x7e>
 80091bc:	0588      	lsls	r0, r1, #22
 80091be:	bf58      	it	pl
 80091c0:	9802      	ldrpl	r0, [sp, #8]
 80091c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80091c6:	bf58      	it	pl
 80091c8:	eba9 0000 	subpl.w	r0, r9, r0
 80091cc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80091d0:	bf58      	it	pl
 80091d2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80091d6:	6021      	str	r1, [r4, #0]
 80091d8:	f04f 0900 	mov.w	r9, #0
 80091dc:	e7ab      	b.n	8009136 <_scanf_float+0x182>
 80091de:	2203      	movs	r2, #3
 80091e0:	e7a9      	b.n	8009136 <_scanf_float+0x182>
 80091e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091e6:	9205      	str	r2, [sp, #20]
 80091e8:	4631      	mov	r1, r6
 80091ea:	4638      	mov	r0, r7
 80091ec:	4798      	blx	r3
 80091ee:	9a05      	ldr	r2, [sp, #20]
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f43f af04 	beq.w	8008ffe <_scanf_float+0x4a>
 80091f6:	e715      	b.n	8009024 <_scanf_float+0x70>
 80091f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009200:	4632      	mov	r2, r6
 8009202:	4638      	mov	r0, r7
 8009204:	4798      	blx	r3
 8009206:	6923      	ldr	r3, [r4, #16]
 8009208:	3b01      	subs	r3, #1
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	e715      	b.n	800903a <_scanf_float+0x86>
 800920e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009212:	2b06      	cmp	r3, #6
 8009214:	d80a      	bhi.n	800922c <_scanf_float+0x278>
 8009216:	f1bb 0f02 	cmp.w	fp, #2
 800921a:	d968      	bls.n	80092ee <_scanf_float+0x33a>
 800921c:	f1ab 0b03 	sub.w	fp, fp, #3
 8009220:	fa5f fb8b 	uxtb.w	fp, fp
 8009224:	eba5 0b0b 	sub.w	fp, r5, fp
 8009228:	455d      	cmp	r5, fp
 800922a:	d14b      	bne.n	80092c4 <_scanf_float+0x310>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	05da      	lsls	r2, r3, #23
 8009230:	d51f      	bpl.n	8009272 <_scanf_float+0x2be>
 8009232:	055b      	lsls	r3, r3, #21
 8009234:	d468      	bmi.n	8009308 <_scanf_float+0x354>
 8009236:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800923a:	6923      	ldr	r3, [r4, #16]
 800923c:	2965      	cmp	r1, #101	; 0x65
 800923e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009242:	f105 3bff 	add.w	fp, r5, #4294967295
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	d00d      	beq.n	8009266 <_scanf_float+0x2b2>
 800924a:	2945      	cmp	r1, #69	; 0x45
 800924c:	d00b      	beq.n	8009266 <_scanf_float+0x2b2>
 800924e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009252:	4632      	mov	r2, r6
 8009254:	4638      	mov	r0, r7
 8009256:	4798      	blx	r3
 8009258:	6923      	ldr	r3, [r4, #16]
 800925a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800925e:	3b01      	subs	r3, #1
 8009260:	f1a5 0b02 	sub.w	fp, r5, #2
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800926a:	4632      	mov	r2, r6
 800926c:	4638      	mov	r0, r7
 800926e:	4798      	blx	r3
 8009270:	465d      	mov	r5, fp
 8009272:	6826      	ldr	r6, [r4, #0]
 8009274:	f016 0610 	ands.w	r6, r6, #16
 8009278:	d17a      	bne.n	8009370 <_scanf_float+0x3bc>
 800927a:	702e      	strb	r6, [r5, #0]
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009286:	d142      	bne.n	800930e <_scanf_float+0x35a>
 8009288:	9b02      	ldr	r3, [sp, #8]
 800928a:	eba9 0303 	sub.w	r3, r9, r3
 800928e:	425a      	negs	r2, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d149      	bne.n	8009328 <_scanf_float+0x374>
 8009294:	2200      	movs	r2, #0
 8009296:	4641      	mov	r1, r8
 8009298:	4638      	mov	r0, r7
 800929a:	f000 fea5 	bl	8009fe8 <_strtod_r>
 800929e:	6825      	ldr	r5, [r4, #0]
 80092a0:	f8da 3000 	ldr.w	r3, [sl]
 80092a4:	f015 0f02 	tst.w	r5, #2
 80092a8:	f103 0204 	add.w	r2, r3, #4
 80092ac:	ec59 8b10 	vmov	r8, r9, d0
 80092b0:	f8ca 2000 	str.w	r2, [sl]
 80092b4:	d043      	beq.n	800933e <_scanf_float+0x38a>
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	e9c3 8900 	strd	r8, r9, [r3]
 80092bc:	68e3      	ldr	r3, [r4, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60e3      	str	r3, [r4, #12]
 80092c2:	e6be      	b.n	8009042 <_scanf_float+0x8e>
 80092c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80092cc:	4632      	mov	r2, r6
 80092ce:	4638      	mov	r0, r7
 80092d0:	4798      	blx	r3
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	6123      	str	r3, [r4, #16]
 80092d8:	e7a6      	b.n	8009228 <_scanf_float+0x274>
 80092da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092de:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80092e2:	4632      	mov	r2, r6
 80092e4:	4638      	mov	r0, r7
 80092e6:	4798      	blx	r3
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	3b01      	subs	r3, #1
 80092ec:	6123      	str	r3, [r4, #16]
 80092ee:	4545      	cmp	r5, r8
 80092f0:	d8f3      	bhi.n	80092da <_scanf_float+0x326>
 80092f2:	e6a5      	b.n	8009040 <_scanf_float+0x8c>
 80092f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80092fc:	4632      	mov	r2, r6
 80092fe:	4638      	mov	r0, r7
 8009300:	4798      	blx	r3
 8009302:	6923      	ldr	r3, [r4, #16]
 8009304:	3b01      	subs	r3, #1
 8009306:	6123      	str	r3, [r4, #16]
 8009308:	4545      	cmp	r5, r8
 800930a:	d8f3      	bhi.n	80092f4 <_scanf_float+0x340>
 800930c:	e698      	b.n	8009040 <_scanf_float+0x8c>
 800930e:	9b03      	ldr	r3, [sp, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0bf      	beq.n	8009294 <_scanf_float+0x2e0>
 8009314:	9904      	ldr	r1, [sp, #16]
 8009316:	230a      	movs	r3, #10
 8009318:	4632      	mov	r2, r6
 800931a:	3101      	adds	r1, #1
 800931c:	4638      	mov	r0, r7
 800931e:	f000 feef 	bl	800a100 <_strtol_r>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	9d04      	ldr	r5, [sp, #16]
 8009326:	1ac2      	subs	r2, r0, r3
 8009328:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800932c:	429d      	cmp	r5, r3
 800932e:	bf28      	it	cs
 8009330:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009334:	490f      	ldr	r1, [pc, #60]	; (8009374 <_scanf_float+0x3c0>)
 8009336:	4628      	mov	r0, r5
 8009338:	f000 f824 	bl	8009384 <siprintf>
 800933c:	e7aa      	b.n	8009294 <_scanf_float+0x2e0>
 800933e:	f015 0504 	ands.w	r5, r5, #4
 8009342:	d1b8      	bne.n	80092b6 <_scanf_float+0x302>
 8009344:	681f      	ldr	r7, [r3, #0]
 8009346:	ee10 2a10 	vmov	r2, s0
 800934a:	464b      	mov	r3, r9
 800934c:	ee10 0a10 	vmov	r0, s0
 8009350:	4649      	mov	r1, r9
 8009352:	f7f7 fbeb 	bl	8000b2c <__aeabi_dcmpun>
 8009356:	b128      	cbz	r0, 8009364 <_scanf_float+0x3b0>
 8009358:	4628      	mov	r0, r5
 800935a:	f000 f80d 	bl	8009378 <nanf>
 800935e:	ed87 0a00 	vstr	s0, [r7]
 8009362:	e7ab      	b.n	80092bc <_scanf_float+0x308>
 8009364:	4640      	mov	r0, r8
 8009366:	4649      	mov	r1, r9
 8009368:	f7f7 fc3e 	bl	8000be8 <__aeabi_d2f>
 800936c:	6038      	str	r0, [r7, #0]
 800936e:	e7a5      	b.n	80092bc <_scanf_float+0x308>
 8009370:	2600      	movs	r6, #0
 8009372:	e666      	b.n	8009042 <_scanf_float+0x8e>
 8009374:	0800c1c4 	.word	0x0800c1c4

08009378 <nanf>:
 8009378:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009380 <nanf+0x8>
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	7fc00000 	.word	0x7fc00000

08009384 <siprintf>:
 8009384:	b40e      	push	{r1, r2, r3}
 8009386:	b500      	push	{lr}
 8009388:	b09c      	sub	sp, #112	; 0x70
 800938a:	ab1d      	add	r3, sp, #116	; 0x74
 800938c:	9002      	str	r0, [sp, #8]
 800938e:	9006      	str	r0, [sp, #24]
 8009390:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009394:	4809      	ldr	r0, [pc, #36]	; (80093bc <siprintf+0x38>)
 8009396:	9107      	str	r1, [sp, #28]
 8009398:	9104      	str	r1, [sp, #16]
 800939a:	4909      	ldr	r1, [pc, #36]	; (80093c0 <siprintf+0x3c>)
 800939c:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a0:	9105      	str	r1, [sp, #20]
 80093a2:	6800      	ldr	r0, [r0, #0]
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	a902      	add	r1, sp, #8
 80093a8:	f002 fd66 	bl	800be78 <_svfiprintf_r>
 80093ac:	9b02      	ldr	r3, [sp, #8]
 80093ae:	2200      	movs	r2, #0
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	b01c      	add	sp, #112	; 0x70
 80093b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b8:	b003      	add	sp, #12
 80093ba:	4770      	bx	lr
 80093bc:	20000040 	.word	0x20000040
 80093c0:	ffff0208 	.word	0xffff0208

080093c4 <sulp>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	ec45 4b10 	vmov	d0, r4, r5
 80093ce:	4616      	mov	r6, r2
 80093d0:	f002 fb0e 	bl	800b9f0 <__ulp>
 80093d4:	ec51 0b10 	vmov	r0, r1, d0
 80093d8:	b17e      	cbz	r6, 80093fa <sulp+0x36>
 80093da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dd09      	ble.n	80093fa <sulp+0x36>
 80093e6:	051b      	lsls	r3, r3, #20
 80093e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093ec:	2400      	movs	r4, #0
 80093ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093f2:	4622      	mov	r2, r4
 80093f4:	462b      	mov	r3, r5
 80093f6:	f7f7 f8ff 	bl	80005f8 <__aeabi_dmul>
 80093fa:	bd70      	pop	{r4, r5, r6, pc}
 80093fc:	0000      	movs	r0, r0
	...
=======
 8008306:	e1b2      	b.n	800866e <UART_SetConfig+0x6e2>
 8008308:	40011000 	.word	0x40011000
 800830c:	40011400 	.word	0x40011400
 8008310:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4ad7      	ldr	r2, [pc, #860]	; (8008678 <UART_SetConfig+0x6ec>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d005      	beq.n	800832a <UART_SetConfig+0x39e>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4ad6      	ldr	r2, [pc, #856]	; (800867c <UART_SetConfig+0x6f0>)
 8008324:	4293      	cmp	r3, r2
 8008326:	f040 80d1 	bne.w	80084cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800832a:	f7fe f9a9 	bl	8006680 <HAL_RCC_GetPCLK2Freq>
 800832e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	469a      	mov	sl, r3
 8008334:	f04f 0b00 	mov.w	fp, #0
 8008338:	46d0      	mov	r8, sl
 800833a:	46d9      	mov	r9, fp
 800833c:	eb18 0308 	adds.w	r3, r8, r8
 8008340:	eb49 0409 	adc.w	r4, r9, r9
 8008344:	4698      	mov	r8, r3
 8008346:	46a1      	mov	r9, r4
 8008348:	eb18 080a 	adds.w	r8, r8, sl
 800834c:	eb49 090b 	adc.w	r9, r9, fp
 8008350:	f04f 0100 	mov.w	r1, #0
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800835c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008360:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008364:	4688      	mov	r8, r1
 8008366:	4691      	mov	r9, r2
 8008368:	eb1a 0508 	adds.w	r5, sl, r8
 800836c:	eb4b 0609 	adc.w	r6, fp, r9
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4619      	mov	r1, r3
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	f04f 0400 	mov.w	r4, #0
 8008382:	0094      	lsls	r4, r2, #2
 8008384:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008388:	008b      	lsls	r3, r1, #2
 800838a:	461a      	mov	r2, r3
 800838c:	4623      	mov	r3, r4
 800838e:	4628      	mov	r0, r5
 8008390:	4631      	mov	r1, r6
 8008392:	f7f8 fc79 	bl	8000c88 <__aeabi_uldivmod>
 8008396:	4603      	mov	r3, r0
 8008398:	460c      	mov	r4, r1
 800839a:	461a      	mov	r2, r3
 800839c:	4bb8      	ldr	r3, [pc, #736]	; (8008680 <UART_SetConfig+0x6f4>)
 800839e:	fba3 2302 	umull	r2, r3, r3, r2
 80083a2:	095b      	lsrs	r3, r3, #5
 80083a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	469b      	mov	fp, r3
 80083ac:	f04f 0c00 	mov.w	ip, #0
 80083b0:	46d9      	mov	r9, fp
 80083b2:	46e2      	mov	sl, ip
 80083b4:	eb19 0309 	adds.w	r3, r9, r9
 80083b8:	eb4a 040a 	adc.w	r4, sl, sl
 80083bc:	4699      	mov	r9, r3
 80083be:	46a2      	mov	sl, r4
 80083c0:	eb19 090b 	adds.w	r9, r9, fp
 80083c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083c8:	f04f 0100 	mov.w	r1, #0
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083dc:	4689      	mov	r9, r1
 80083de:	4692      	mov	sl, r2
 80083e0:	eb1b 0509 	adds.w	r5, fp, r9
 80083e4:	eb4c 060a 	adc.w	r6, ip, sl
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4619      	mov	r1, r3
 80083ee:	f04f 0200 	mov.w	r2, #0
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	f04f 0400 	mov.w	r4, #0
 80083fa:	0094      	lsls	r4, r2, #2
 80083fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008400:	008b      	lsls	r3, r1, #2
 8008402:	461a      	mov	r2, r3
 8008404:	4623      	mov	r3, r4
 8008406:	4628      	mov	r0, r5
 8008408:	4631      	mov	r1, r6
 800840a:	f7f8 fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800840e:	4603      	mov	r3, r0
 8008410:	460c      	mov	r4, r1
 8008412:	461a      	mov	r2, r3
 8008414:	4b9a      	ldr	r3, [pc, #616]	; (8008680 <UART_SetConfig+0x6f4>)
 8008416:	fba3 1302 	umull	r1, r3, r3, r2
 800841a:	095b      	lsrs	r3, r3, #5
 800841c:	2164      	movs	r1, #100	; 0x64
 800841e:	fb01 f303 	mul.w	r3, r1, r3
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	011b      	lsls	r3, r3, #4
 8008426:	3332      	adds	r3, #50	; 0x32
 8008428:	4a95      	ldr	r2, [pc, #596]	; (8008680 <UART_SetConfig+0x6f4>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	095b      	lsrs	r3, r3, #5
 8008430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008434:	4498      	add	r8, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	469b      	mov	fp, r3
 800843a:	f04f 0c00 	mov.w	ip, #0
 800843e:	46d9      	mov	r9, fp
 8008440:	46e2      	mov	sl, ip
 8008442:	eb19 0309 	adds.w	r3, r9, r9
 8008446:	eb4a 040a 	adc.w	r4, sl, sl
 800844a:	4699      	mov	r9, r3
 800844c:	46a2      	mov	sl, r4
 800844e:	eb19 090b 	adds.w	r9, r9, fp
 8008452:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008456:	f04f 0100 	mov.w	r1, #0
 800845a:	f04f 0200 	mov.w	r2, #0
 800845e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008462:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008466:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800846a:	4689      	mov	r9, r1
 800846c:	4692      	mov	sl, r2
 800846e:	eb1b 0509 	adds.w	r5, fp, r9
 8008472:	eb4c 060a 	adc.w	r6, ip, sl
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4619      	mov	r1, r3
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	f04f 0300 	mov.w	r3, #0
 8008484:	f04f 0400 	mov.w	r4, #0
 8008488:	0094      	lsls	r4, r2, #2
 800848a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800848e:	008b      	lsls	r3, r1, #2
 8008490:	461a      	mov	r2, r3
 8008492:	4623      	mov	r3, r4
 8008494:	4628      	mov	r0, r5
 8008496:	4631      	mov	r1, r6
 8008498:	f7f8 fbf6 	bl	8000c88 <__aeabi_uldivmod>
 800849c:	4603      	mov	r3, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	461a      	mov	r2, r3
 80084a2:	4b77      	ldr	r3, [pc, #476]	; (8008680 <UART_SetConfig+0x6f4>)
 80084a4:	fba3 1302 	umull	r1, r3, r3, r2
 80084a8:	095b      	lsrs	r3, r3, #5
 80084aa:	2164      	movs	r1, #100	; 0x64
 80084ac:	fb01 f303 	mul.w	r3, r1, r3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	3332      	adds	r3, #50	; 0x32
 80084b6:	4a72      	ldr	r2, [pc, #456]	; (8008680 <UART_SetConfig+0x6f4>)
 80084b8:	fba2 2303 	umull	r2, r3, r2, r3
 80084bc:	095b      	lsrs	r3, r3, #5
 80084be:	f003 020f 	and.w	r2, r3, #15
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4442      	add	r2, r8
 80084c8:	609a      	str	r2, [r3, #8]
 80084ca:	e0d0      	b.n	800866e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80084cc:	f7fe f8c4 	bl	8006658 <HAL_RCC_GetPCLK1Freq>
 80084d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	469a      	mov	sl, r3
 80084d6:	f04f 0b00 	mov.w	fp, #0
 80084da:	46d0      	mov	r8, sl
 80084dc:	46d9      	mov	r9, fp
 80084de:	eb18 0308 	adds.w	r3, r8, r8
 80084e2:	eb49 0409 	adc.w	r4, r9, r9
 80084e6:	4698      	mov	r8, r3
 80084e8:	46a1      	mov	r9, r4
 80084ea:	eb18 080a 	adds.w	r8, r8, sl
 80084ee:	eb49 090b 	adc.w	r9, r9, fp
 80084f2:	f04f 0100 	mov.w	r1, #0
 80084f6:	f04f 0200 	mov.w	r2, #0
 80084fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008502:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008506:	4688      	mov	r8, r1
 8008508:	4691      	mov	r9, r2
 800850a:	eb1a 0508 	adds.w	r5, sl, r8
 800850e:	eb4b 0609 	adc.w	r6, fp, r9
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	4619      	mov	r1, r3
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	f04f 0400 	mov.w	r4, #0
 8008524:	0094      	lsls	r4, r2, #2
 8008526:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800852a:	008b      	lsls	r3, r1, #2
 800852c:	461a      	mov	r2, r3
 800852e:	4623      	mov	r3, r4
 8008530:	4628      	mov	r0, r5
 8008532:	4631      	mov	r1, r6
 8008534:	f7f8 fba8 	bl	8000c88 <__aeabi_uldivmod>
 8008538:	4603      	mov	r3, r0
 800853a:	460c      	mov	r4, r1
 800853c:	461a      	mov	r2, r3
 800853e:	4b50      	ldr	r3, [pc, #320]	; (8008680 <UART_SetConfig+0x6f4>)
 8008540:	fba3 2302 	umull	r2, r3, r3, r2
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	469b      	mov	fp, r3
 800854e:	f04f 0c00 	mov.w	ip, #0
 8008552:	46d9      	mov	r9, fp
 8008554:	46e2      	mov	sl, ip
 8008556:	eb19 0309 	adds.w	r3, r9, r9
 800855a:	eb4a 040a 	adc.w	r4, sl, sl
 800855e:	4699      	mov	r9, r3
 8008560:	46a2      	mov	sl, r4
 8008562:	eb19 090b 	adds.w	r9, r9, fp
 8008566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800856a:	f04f 0100 	mov.w	r1, #0
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800857a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800857e:	4689      	mov	r9, r1
 8008580:	4692      	mov	sl, r2
 8008582:	eb1b 0509 	adds.w	r5, fp, r9
 8008586:	eb4c 060a 	adc.w	r6, ip, sl
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4619      	mov	r1, r3
 8008590:	f04f 0200 	mov.w	r2, #0
 8008594:	f04f 0300 	mov.w	r3, #0
 8008598:	f04f 0400 	mov.w	r4, #0
 800859c:	0094      	lsls	r4, r2, #2
 800859e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085a2:	008b      	lsls	r3, r1, #2
 80085a4:	461a      	mov	r2, r3
 80085a6:	4623      	mov	r3, r4
 80085a8:	4628      	mov	r0, r5
 80085aa:	4631      	mov	r1, r6
 80085ac:	f7f8 fb6c 	bl	8000c88 <__aeabi_uldivmod>
 80085b0:	4603      	mov	r3, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b32      	ldr	r3, [pc, #200]	; (8008680 <UART_SetConfig+0x6f4>)
 80085b8:	fba3 1302 	umull	r1, r3, r3, r2
 80085bc:	095b      	lsrs	r3, r3, #5
 80085be:	2164      	movs	r1, #100	; 0x64
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	3332      	adds	r3, #50	; 0x32
 80085ca:	4a2d      	ldr	r2, [pc, #180]	; (8008680 <UART_SetConfig+0x6f4>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d6:	4498      	add	r8, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	469b      	mov	fp, r3
 80085dc:	f04f 0c00 	mov.w	ip, #0
 80085e0:	46d9      	mov	r9, fp
 80085e2:	46e2      	mov	sl, ip
 80085e4:	eb19 0309 	adds.w	r3, r9, r9
 80085e8:	eb4a 040a 	adc.w	r4, sl, sl
 80085ec:	4699      	mov	r9, r3
 80085ee:	46a2      	mov	sl, r4
 80085f0:	eb19 090b 	adds.w	r9, r9, fp
 80085f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80085f8:	f04f 0100 	mov.w	r1, #0
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008604:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008608:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800860c:	4689      	mov	r9, r1
 800860e:	4692      	mov	sl, r2
 8008610:	eb1b 0509 	adds.w	r5, fp, r9
 8008614:	eb4c 060a 	adc.w	r6, ip, sl
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	4619      	mov	r1, r3
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	f04f 0400 	mov.w	r4, #0
 800862a:	0094      	lsls	r4, r2, #2
 800862c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008630:	008b      	lsls	r3, r1, #2
 8008632:	461a      	mov	r2, r3
 8008634:	4623      	mov	r3, r4
 8008636:	4628      	mov	r0, r5
 8008638:	4631      	mov	r1, r6
 800863a:	f7f8 fb25 	bl	8000c88 <__aeabi_uldivmod>
 800863e:	4603      	mov	r3, r0
 8008640:	460c      	mov	r4, r1
 8008642:	461a      	mov	r2, r3
 8008644:	4b0e      	ldr	r3, [pc, #56]	; (8008680 <UART_SetConfig+0x6f4>)
 8008646:	fba3 1302 	umull	r1, r3, r3, r2
 800864a:	095b      	lsrs	r3, r3, #5
 800864c:	2164      	movs	r1, #100	; 0x64
 800864e:	fb01 f303 	mul.w	r3, r1, r3
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	011b      	lsls	r3, r3, #4
 8008656:	3332      	adds	r3, #50	; 0x32
 8008658:	4a09      	ldr	r2, [pc, #36]	; (8008680 <UART_SetConfig+0x6f4>)
 800865a:	fba2 2303 	umull	r2, r3, r2, r3
 800865e:	095b      	lsrs	r3, r3, #5
 8008660:	f003 020f 	and.w	r2, r3, #15
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4442      	add	r2, r8
 800866a:	609a      	str	r2, [r3, #8]
}
 800866c:	e7ff      	b.n	800866e <UART_SetConfig+0x6e2>
 800866e:	bf00      	nop
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	40011000 	.word	0x40011000
 800867c:	40011400 	.word	0x40011400
 8008680:	51eb851f 	.word	0x51eb851f

08008684 <__errno>:
 8008684:	4b01      	ldr	r3, [pc, #4]	; (800868c <__errno+0x8>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	20000040 	.word	0x20000040

08008690 <__libc_init_array>:
 8008690:	b570      	push	{r4, r5, r6, lr}
 8008692:	4e0d      	ldr	r6, [pc, #52]	; (80086c8 <__libc_init_array+0x38>)
 8008694:	4c0d      	ldr	r4, [pc, #52]	; (80086cc <__libc_init_array+0x3c>)
 8008696:	1ba4      	subs	r4, r4, r6
 8008698:	10a4      	asrs	r4, r4, #2
 800869a:	2500      	movs	r5, #0
 800869c:	42a5      	cmp	r5, r4
 800869e:	d109      	bne.n	80086b4 <__libc_init_array+0x24>
 80086a0:	4e0b      	ldr	r6, [pc, #44]	; (80086d0 <__libc_init_array+0x40>)
 80086a2:	4c0c      	ldr	r4, [pc, #48]	; (80086d4 <__libc_init_array+0x44>)
 80086a4:	f003 fd58 	bl	800c158 <_init>
 80086a8:	1ba4      	subs	r4, r4, r6
 80086aa:	10a4      	asrs	r4, r4, #2
 80086ac:	2500      	movs	r5, #0
 80086ae:	42a5      	cmp	r5, r4
 80086b0:	d105      	bne.n	80086be <__libc_init_array+0x2e>
 80086b2:	bd70      	pop	{r4, r5, r6, pc}
 80086b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086b8:	4798      	blx	r3
 80086ba:	3501      	adds	r5, #1
 80086bc:	e7ee      	b.n	800869c <__libc_init_array+0xc>
 80086be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086c2:	4798      	blx	r3
 80086c4:	3501      	adds	r5, #1
 80086c6:	e7f2      	b.n	80086ae <__libc_init_array+0x1e>
 80086c8:	0800c450 	.word	0x0800c450
 80086cc:	0800c450 	.word	0x0800c450
 80086d0:	0800c450 	.word	0x0800c450
 80086d4:	0800c454 	.word	0x0800c454

080086d8 <memcpy>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	1e43      	subs	r3, r0, #1
 80086dc:	440a      	add	r2, r1
 80086de:	4291      	cmp	r1, r2
 80086e0:	d100      	bne.n	80086e4 <memcpy+0xc>
 80086e2:	bd10      	pop	{r4, pc}
 80086e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086ec:	e7f7      	b.n	80086de <memcpy+0x6>

080086ee <memset>:
 80086ee:	4402      	add	r2, r0
 80086f0:	4603      	mov	r3, r0
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d100      	bne.n	80086f8 <memset+0xa>
 80086f6:	4770      	bx	lr
 80086f8:	f803 1b01 	strb.w	r1, [r3], #1
 80086fc:	e7f9      	b.n	80086f2 <memset+0x4>

080086fe <__cvt>:
 80086fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008702:	ec55 4b10 	vmov	r4, r5, d0
 8008706:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008708:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800870c:	2d00      	cmp	r5, #0
 800870e:	460e      	mov	r6, r1
 8008710:	4691      	mov	r9, r2
 8008712:	4619      	mov	r1, r3
 8008714:	bfb8      	it	lt
 8008716:	4622      	movlt	r2, r4
 8008718:	462b      	mov	r3, r5
 800871a:	f027 0720 	bic.w	r7, r7, #32
 800871e:	bfbb      	ittet	lt
 8008720:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008724:	461d      	movlt	r5, r3
 8008726:	2300      	movge	r3, #0
 8008728:	232d      	movlt	r3, #45	; 0x2d
 800872a:	bfb8      	it	lt
 800872c:	4614      	movlt	r4, r2
 800872e:	2f46      	cmp	r7, #70	; 0x46
 8008730:	700b      	strb	r3, [r1, #0]
 8008732:	d004      	beq.n	800873e <__cvt+0x40>
 8008734:	2f45      	cmp	r7, #69	; 0x45
 8008736:	d100      	bne.n	800873a <__cvt+0x3c>
 8008738:	3601      	adds	r6, #1
 800873a:	2102      	movs	r1, #2
 800873c:	e000      	b.n	8008740 <__cvt+0x42>
 800873e:	2103      	movs	r1, #3
 8008740:	ab03      	add	r3, sp, #12
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	ab02      	add	r3, sp, #8
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	4632      	mov	r2, r6
 800874a:	4653      	mov	r3, sl
 800874c:	ec45 4b10 	vmov	d0, r4, r5
 8008750:	f001 fd76 	bl	800a240 <_dtoa_r>
 8008754:	2f47      	cmp	r7, #71	; 0x47
 8008756:	4680      	mov	r8, r0
 8008758:	d102      	bne.n	8008760 <__cvt+0x62>
 800875a:	f019 0f01 	tst.w	r9, #1
 800875e:	d026      	beq.n	80087ae <__cvt+0xb0>
 8008760:	2f46      	cmp	r7, #70	; 0x46
 8008762:	eb08 0906 	add.w	r9, r8, r6
 8008766:	d111      	bne.n	800878c <__cvt+0x8e>
 8008768:	f898 3000 	ldrb.w	r3, [r8]
 800876c:	2b30      	cmp	r3, #48	; 0x30
 800876e:	d10a      	bne.n	8008786 <__cvt+0x88>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f8 f9a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800877c:	b918      	cbnz	r0, 8008786 <__cvt+0x88>
 800877e:	f1c6 0601 	rsb	r6, r6, #1
 8008782:	f8ca 6000 	str.w	r6, [sl]
 8008786:	f8da 3000 	ldr.w	r3, [sl]
 800878a:	4499      	add	r9, r3
 800878c:	2200      	movs	r2, #0
 800878e:	2300      	movs	r3, #0
 8008790:	4620      	mov	r0, r4
 8008792:	4629      	mov	r1, r5
 8008794:	f7f8 f998 	bl	8000ac8 <__aeabi_dcmpeq>
 8008798:	b938      	cbnz	r0, 80087aa <__cvt+0xac>
 800879a:	2230      	movs	r2, #48	; 0x30
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	454b      	cmp	r3, r9
 80087a0:	d205      	bcs.n	80087ae <__cvt+0xb0>
 80087a2:	1c59      	adds	r1, r3, #1
 80087a4:	9103      	str	r1, [sp, #12]
 80087a6:	701a      	strb	r2, [r3, #0]
 80087a8:	e7f8      	b.n	800879c <__cvt+0x9e>
 80087aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b2:	eba3 0308 	sub.w	r3, r3, r8
 80087b6:	4640      	mov	r0, r8
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	b004      	add	sp, #16
 80087bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087c0 <__exponent>:
 80087c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c2:	2900      	cmp	r1, #0
 80087c4:	4604      	mov	r4, r0
 80087c6:	bfba      	itte	lt
 80087c8:	4249      	neglt	r1, r1
 80087ca:	232d      	movlt	r3, #45	; 0x2d
 80087cc:	232b      	movge	r3, #43	; 0x2b
 80087ce:	2909      	cmp	r1, #9
 80087d0:	f804 2b02 	strb.w	r2, [r4], #2
 80087d4:	7043      	strb	r3, [r0, #1]
 80087d6:	dd20      	ble.n	800881a <__exponent+0x5a>
 80087d8:	f10d 0307 	add.w	r3, sp, #7
 80087dc:	461f      	mov	r7, r3
 80087de:	260a      	movs	r6, #10
 80087e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80087e4:	fb06 1115 	mls	r1, r6, r5, r1
 80087e8:	3130      	adds	r1, #48	; 0x30
 80087ea:	2d09      	cmp	r5, #9
 80087ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80087f4:	4629      	mov	r1, r5
 80087f6:	dc09      	bgt.n	800880c <__exponent+0x4c>
 80087f8:	3130      	adds	r1, #48	; 0x30
 80087fa:	3b02      	subs	r3, #2
 80087fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008800:	42bb      	cmp	r3, r7
 8008802:	4622      	mov	r2, r4
 8008804:	d304      	bcc.n	8008810 <__exponent+0x50>
 8008806:	1a10      	subs	r0, r2, r0
 8008808:	b003      	add	sp, #12
 800880a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800880c:	4613      	mov	r3, r2
 800880e:	e7e7      	b.n	80087e0 <__exponent+0x20>
 8008810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008814:	f804 2b01 	strb.w	r2, [r4], #1
 8008818:	e7f2      	b.n	8008800 <__exponent+0x40>
 800881a:	2330      	movs	r3, #48	; 0x30
 800881c:	4419      	add	r1, r3
 800881e:	7083      	strb	r3, [r0, #2]
 8008820:	1d02      	adds	r2, r0, #4
 8008822:	70c1      	strb	r1, [r0, #3]
 8008824:	e7ef      	b.n	8008806 <__exponent+0x46>
	...

08008828 <_printf_float>:
 8008828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800882c:	b08d      	sub	sp, #52	; 0x34
 800882e:	460c      	mov	r4, r1
 8008830:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008834:	4616      	mov	r6, r2
 8008836:	461f      	mov	r7, r3
 8008838:	4605      	mov	r5, r0
 800883a:	f002 fde5 	bl	800b408 <_localeconv_r>
 800883e:	6803      	ldr	r3, [r0, #0]
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	4618      	mov	r0, r3
 8008844:	f7f7 fcc4 	bl	80001d0 <strlen>
 8008848:	2300      	movs	r3, #0
 800884a:	930a      	str	r3, [sp, #40]	; 0x28
 800884c:	f8d8 3000 	ldr.w	r3, [r8]
 8008850:	9005      	str	r0, [sp, #20]
 8008852:	3307      	adds	r3, #7
 8008854:	f023 0307 	bic.w	r3, r3, #7
 8008858:	f103 0208 	add.w	r2, r3, #8
 800885c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008860:	f8d4 b000 	ldr.w	fp, [r4]
 8008864:	f8c8 2000 	str.w	r2, [r8]
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008870:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008874:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008878:	9307      	str	r3, [sp, #28]
 800887a:	f8cd 8018 	str.w	r8, [sp, #24]
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	4ba7      	ldr	r3, [pc, #668]	; (8008b20 <_printf_float+0x2f8>)
 8008884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008888:	f7f8 f950 	bl	8000b2c <__aeabi_dcmpun>
 800888c:	bb70      	cbnz	r0, 80088ec <_printf_float+0xc4>
 800888e:	f04f 32ff 	mov.w	r2, #4294967295
 8008892:	4ba3      	ldr	r3, [pc, #652]	; (8008b20 <_printf_float+0x2f8>)
 8008894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008898:	f7f8 f92a 	bl	8000af0 <__aeabi_dcmple>
 800889c:	bb30      	cbnz	r0, 80088ec <_printf_float+0xc4>
 800889e:	2200      	movs	r2, #0
 80088a0:	2300      	movs	r3, #0
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f8 f919 	bl	8000adc <__aeabi_dcmplt>
 80088aa:	b110      	cbz	r0, 80088b2 <_printf_float+0x8a>
 80088ac:	232d      	movs	r3, #45	; 0x2d
 80088ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088b2:	4a9c      	ldr	r2, [pc, #624]	; (8008b24 <_printf_float+0x2fc>)
 80088b4:	4b9c      	ldr	r3, [pc, #624]	; (8008b28 <_printf_float+0x300>)
 80088b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80088ba:	bf8c      	ite	hi
 80088bc:	4690      	movhi	r8, r2
 80088be:	4698      	movls	r8, r3
 80088c0:	2303      	movs	r3, #3
 80088c2:	f02b 0204 	bic.w	r2, fp, #4
 80088c6:	6123      	str	r3, [r4, #16]
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	f04f 0900 	mov.w	r9, #0
 80088ce:	9700      	str	r7, [sp, #0]
 80088d0:	4633      	mov	r3, r6
 80088d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80088d4:	4621      	mov	r1, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f9e6 	bl	8008ca8 <_printf_common>
 80088dc:	3001      	adds	r0, #1
 80088de:	f040 808d 	bne.w	80089fc <_printf_float+0x1d4>
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	b00d      	add	sp, #52	; 0x34
 80088e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f8 f91a 	bl	8000b2c <__aeabi_dcmpun>
 80088f8:	b110      	cbz	r0, 8008900 <_printf_float+0xd8>
 80088fa:	4a8c      	ldr	r2, [pc, #560]	; (8008b2c <_printf_float+0x304>)
 80088fc:	4b8c      	ldr	r3, [pc, #560]	; (8008b30 <_printf_float+0x308>)
 80088fe:	e7da      	b.n	80088b6 <_printf_float+0x8e>
 8008900:	6861      	ldr	r1, [r4, #4]
 8008902:	1c4b      	adds	r3, r1, #1
 8008904:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008908:	a80a      	add	r0, sp, #40	; 0x28
 800890a:	d13e      	bne.n	800898a <_printf_float+0x162>
 800890c:	2306      	movs	r3, #6
 800890e:	6063      	str	r3, [r4, #4]
 8008910:	2300      	movs	r3, #0
 8008912:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008916:	ab09      	add	r3, sp, #36	; 0x24
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	ec49 8b10 	vmov	d0, r8, r9
 800891e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	f8cd a004 	str.w	sl, [sp, #4]
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	4628      	mov	r0, r5
 800892c:	f7ff fee7 	bl	80086fe <__cvt>
 8008930:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008934:	2b47      	cmp	r3, #71	; 0x47
 8008936:	4680      	mov	r8, r0
 8008938:	d109      	bne.n	800894e <_printf_float+0x126>
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	1cd8      	adds	r0, r3, #3
 800893e:	db02      	blt.n	8008946 <_printf_float+0x11e>
 8008940:	6862      	ldr	r2, [r4, #4]
 8008942:	4293      	cmp	r3, r2
 8008944:	dd47      	ble.n	80089d6 <_printf_float+0x1ae>
 8008946:	f1aa 0a02 	sub.w	sl, sl, #2
 800894a:	fa5f fa8a 	uxtb.w	sl, sl
 800894e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008952:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008954:	d824      	bhi.n	80089a0 <_printf_float+0x178>
 8008956:	3901      	subs	r1, #1
 8008958:	4652      	mov	r2, sl
 800895a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800895e:	9109      	str	r1, [sp, #36]	; 0x24
 8008960:	f7ff ff2e 	bl	80087c0 <__exponent>
 8008964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008966:	1813      	adds	r3, r2, r0
 8008968:	2a01      	cmp	r2, #1
 800896a:	4681      	mov	r9, r0
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	dc02      	bgt.n	8008976 <_printf_float+0x14e>
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	07d1      	lsls	r1, r2, #31
 8008974:	d501      	bpl.n	800897a <_printf_float+0x152>
 8008976:	3301      	adds	r3, #1
 8008978:	6123      	str	r3, [r4, #16]
 800897a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0a5      	beq.n	80088ce <_printf_float+0xa6>
 8008982:	232d      	movs	r3, #45	; 0x2d
 8008984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008988:	e7a1      	b.n	80088ce <_printf_float+0xa6>
 800898a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800898e:	f000 8177 	beq.w	8008c80 <_printf_float+0x458>
 8008992:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008996:	d1bb      	bne.n	8008910 <_printf_float+0xe8>
 8008998:	2900      	cmp	r1, #0
 800899a:	d1b9      	bne.n	8008910 <_printf_float+0xe8>
 800899c:	2301      	movs	r3, #1
 800899e:	e7b6      	b.n	800890e <_printf_float+0xe6>
 80089a0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80089a4:	d119      	bne.n	80089da <_printf_float+0x1b2>
 80089a6:	2900      	cmp	r1, #0
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	dd0c      	ble.n	80089c6 <_printf_float+0x19e>
 80089ac:	6121      	str	r1, [r4, #16]
 80089ae:	b913      	cbnz	r3, 80089b6 <_printf_float+0x18e>
 80089b0:	6822      	ldr	r2, [r4, #0]
 80089b2:	07d2      	lsls	r2, r2, #31
 80089b4:	d502      	bpl.n	80089bc <_printf_float+0x194>
 80089b6:	3301      	adds	r3, #1
 80089b8:	440b      	add	r3, r1
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089be:	65a3      	str	r3, [r4, #88]	; 0x58
 80089c0:	f04f 0900 	mov.w	r9, #0
 80089c4:	e7d9      	b.n	800897a <_printf_float+0x152>
 80089c6:	b913      	cbnz	r3, 80089ce <_printf_float+0x1a6>
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	07d0      	lsls	r0, r2, #31
 80089cc:	d501      	bpl.n	80089d2 <_printf_float+0x1aa>
 80089ce:	3302      	adds	r3, #2
 80089d0:	e7f3      	b.n	80089ba <_printf_float+0x192>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e7f1      	b.n	80089ba <_printf_float+0x192>
 80089d6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80089da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089de:	4293      	cmp	r3, r2
 80089e0:	db05      	blt.n	80089ee <_printf_float+0x1c6>
 80089e2:	6822      	ldr	r2, [r4, #0]
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	07d1      	lsls	r1, r2, #31
 80089e8:	d5e8      	bpl.n	80089bc <_printf_float+0x194>
 80089ea:	3301      	adds	r3, #1
 80089ec:	e7e5      	b.n	80089ba <_printf_float+0x192>
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	bfd4      	ite	le
 80089f2:	f1c3 0302 	rsble	r3, r3, #2
 80089f6:	2301      	movgt	r3, #1
 80089f8:	4413      	add	r3, r2
 80089fa:	e7de      	b.n	80089ba <_printf_float+0x192>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	055a      	lsls	r2, r3, #21
 8008a00:	d407      	bmi.n	8008a12 <_printf_float+0x1ea>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	4642      	mov	r2, r8
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d12b      	bne.n	8008a68 <_printf_float+0x240>
 8008a10:	e767      	b.n	80088e2 <_printf_float+0xba>
 8008a12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a16:	f240 80dc 	bls.w	8008bd2 <_printf_float+0x3aa>
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a22:	f7f8 f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	d033      	beq.n	8008a92 <_printf_float+0x26a>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4a41      	ldr	r2, [pc, #260]	; (8008b34 <_printf_float+0x30c>)
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	47b8      	blx	r7
 8008a34:	3001      	adds	r0, #1
 8008a36:	f43f af54 	beq.w	80088e2 <_printf_float+0xba>
 8008a3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	db02      	blt.n	8008a48 <_printf_float+0x220>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	07d8      	lsls	r0, r3, #31
 8008a46:	d50f      	bpl.n	8008a68 <_printf_float+0x240>
 8008a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4628      	mov	r0, r5
 8008a50:	47b8      	blx	r7
 8008a52:	3001      	adds	r0, #1
 8008a54:	f43f af45 	beq.w	80088e2 <_printf_float+0xba>
 8008a58:	f04f 0800 	mov.w	r8, #0
 8008a5c:	f104 091a 	add.w	r9, r4, #26
 8008a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a62:	3b01      	subs	r3, #1
 8008a64:	4543      	cmp	r3, r8
 8008a66:	dc09      	bgt.n	8008a7c <_printf_float+0x254>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	079b      	lsls	r3, r3, #30
 8008a6c:	f100 8103 	bmi.w	8008c76 <_printf_float+0x44e>
 8008a70:	68e0      	ldr	r0, [r4, #12]
 8008a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a74:	4298      	cmp	r0, r3
 8008a76:	bfb8      	it	lt
 8008a78:	4618      	movlt	r0, r3
 8008a7a:	e734      	b.n	80088e6 <_printf_float+0xbe>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	464a      	mov	r2, r9
 8008a80:	4631      	mov	r1, r6
 8008a82:	4628      	mov	r0, r5
 8008a84:	47b8      	blx	r7
 8008a86:	3001      	adds	r0, #1
 8008a88:	f43f af2b 	beq.w	80088e2 <_printf_float+0xba>
 8008a8c:	f108 0801 	add.w	r8, r8, #1
 8008a90:	e7e6      	b.n	8008a60 <_printf_float+0x238>
 8008a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dc2b      	bgt.n	8008af0 <_printf_float+0x2c8>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4a26      	ldr	r2, [pc, #152]	; (8008b34 <_printf_float+0x30c>)
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	f43f af1d 	beq.w	80088e2 <_printf_float+0xba>
 8008aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aaa:	b923      	cbnz	r3, 8008ab6 <_printf_float+0x28e>
 8008aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aae:	b913      	cbnz	r3, 8008ab6 <_printf_float+0x28e>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	07d9      	lsls	r1, r3, #31
 8008ab4:	d5d8      	bpl.n	8008a68 <_printf_float+0x240>
 8008ab6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f af0e 	beq.w	80088e2 <_printf_float+0xba>
 8008ac6:	f04f 0900 	mov.w	r9, #0
 8008aca:	f104 0a1a 	add.w	sl, r4, #26
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	425b      	negs	r3, r3
 8008ad2:	454b      	cmp	r3, r9
 8008ad4:	dc01      	bgt.n	8008ada <_printf_float+0x2b2>
 8008ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad8:	e794      	b.n	8008a04 <_printf_float+0x1dc>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4652      	mov	r2, sl
 8008ade:	4631      	mov	r1, r6
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	47b8      	blx	r7
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	f43f aefc 	beq.w	80088e2 <_printf_float+0xba>
 8008aea:	f109 0901 	add.w	r9, r9, #1
 8008aee:	e7ee      	b.n	8008ace <_printf_float+0x2a6>
 8008af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008af2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008af4:	429a      	cmp	r2, r3
 8008af6:	bfa8      	it	ge
 8008af8:	461a      	movge	r2, r3
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	4691      	mov	r9, r2
 8008afe:	dd07      	ble.n	8008b10 <_printf_float+0x2e8>
 8008b00:	4613      	mov	r3, r2
 8008b02:	4631      	mov	r1, r6
 8008b04:	4642      	mov	r2, r8
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b8      	blx	r7
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f43f aee9 	beq.w	80088e2 <_printf_float+0xba>
 8008b10:	f104 031a 	add.w	r3, r4, #26
 8008b14:	f04f 0b00 	mov.w	fp, #0
 8008b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b1c:	9306      	str	r3, [sp, #24]
 8008b1e:	e015      	b.n	8008b4c <_printf_float+0x324>
 8008b20:	7fefffff 	.word	0x7fefffff
 8008b24:	0800c194 	.word	0x0800c194
 8008b28:	0800c190 	.word	0x0800c190
 8008b2c:	0800c19c 	.word	0x0800c19c
 8008b30:	0800c198 	.word	0x0800c198
 8008b34:	0800c1a0 	.word	0x0800c1a0
 8008b38:	2301      	movs	r3, #1
 8008b3a:	9a06      	ldr	r2, [sp, #24]
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f aecd 	beq.w	80088e2 <_printf_float+0xba>
 8008b48:	f10b 0b01 	add.w	fp, fp, #1
 8008b4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b50:	ebaa 0309 	sub.w	r3, sl, r9
 8008b54:	455b      	cmp	r3, fp
 8008b56:	dcef      	bgt.n	8008b38 <_printf_float+0x310>
 8008b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	44d0      	add	r8, sl
 8008b60:	db15      	blt.n	8008b8e <_printf_float+0x366>
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	07da      	lsls	r2, r3, #31
 8008b66:	d412      	bmi.n	8008b8e <_printf_float+0x366>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6c:	eba3 020a 	sub.w	r2, r3, sl
 8008b70:	eba3 0a01 	sub.w	sl, r3, r1
 8008b74:	4592      	cmp	sl, r2
 8008b76:	bfa8      	it	ge
 8008b78:	4692      	movge	sl, r2
 8008b7a:	f1ba 0f00 	cmp.w	sl, #0
 8008b7e:	dc0e      	bgt.n	8008b9e <_printf_float+0x376>
 8008b80:	f04f 0800 	mov.w	r8, #0
 8008b84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b88:	f104 091a 	add.w	r9, r4, #26
 8008b8c:	e019      	b.n	8008bc2 <_printf_float+0x39a>
 8008b8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b92:	4631      	mov	r1, r6
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b8      	blx	r7
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d1e5      	bne.n	8008b68 <_printf_float+0x340>
 8008b9c:	e6a1      	b.n	80088e2 <_printf_float+0xba>
 8008b9e:	4653      	mov	r3, sl
 8008ba0:	4642      	mov	r2, r8
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d1e9      	bne.n	8008b80 <_printf_float+0x358>
 8008bac:	e699      	b.n	80088e2 <_printf_float+0xba>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	464a      	mov	r2, r9
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	47b8      	blx	r7
 8008bb8:	3001      	adds	r0, #1
 8008bba:	f43f ae92 	beq.w	80088e2 <_printf_float+0xba>
 8008bbe:	f108 0801 	add.w	r8, r8, #1
 8008bc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	eba3 030a 	sub.w	r3, r3, sl
 8008bcc:	4543      	cmp	r3, r8
 8008bce:	dcee      	bgt.n	8008bae <_printf_float+0x386>
 8008bd0:	e74a      	b.n	8008a68 <_printf_float+0x240>
 8008bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd4:	2a01      	cmp	r2, #1
 8008bd6:	dc01      	bgt.n	8008bdc <_printf_float+0x3b4>
 8008bd8:	07db      	lsls	r3, r3, #31
 8008bda:	d53a      	bpl.n	8008c52 <_printf_float+0x42a>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4642      	mov	r2, r8
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f ae7b 	beq.w	80088e2 <_printf_float+0xba>
 8008bec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	47b8      	blx	r7
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	f108 0801 	add.w	r8, r8, #1
 8008bfc:	f43f ae71 	beq.w	80088e2 <_printf_float+0xba>
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	2200      	movs	r2, #0
 8008c04:	f103 3aff 	add.w	sl, r3, #4294967295
 8008c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f7f7 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c12:	b9c8      	cbnz	r0, 8008c48 <_printf_float+0x420>
 8008c14:	4653      	mov	r3, sl
 8008c16:	4642      	mov	r2, r8
 8008c18:	4631      	mov	r1, r6
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	47b8      	blx	r7
 8008c1e:	3001      	adds	r0, #1
 8008c20:	d10e      	bne.n	8008c40 <_printf_float+0x418>
 8008c22:	e65e      	b.n	80088e2 <_printf_float+0xba>
 8008c24:	2301      	movs	r3, #1
 8008c26:	4652      	mov	r2, sl
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b8      	blx	r7
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f43f ae57 	beq.w	80088e2 <_printf_float+0xba>
 8008c34:	f108 0801 	add.w	r8, r8, #1
 8008c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	4543      	cmp	r3, r8
 8008c3e:	dcf1      	bgt.n	8008c24 <_printf_float+0x3fc>
 8008c40:	464b      	mov	r3, r9
 8008c42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c46:	e6de      	b.n	8008a06 <_printf_float+0x1de>
 8008c48:	f04f 0800 	mov.w	r8, #0
 8008c4c:	f104 0a1a 	add.w	sl, r4, #26
 8008c50:	e7f2      	b.n	8008c38 <_printf_float+0x410>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e7df      	b.n	8008c16 <_printf_float+0x3ee>
 8008c56:	2301      	movs	r3, #1
 8008c58:	464a      	mov	r2, r9
 8008c5a:	4631      	mov	r1, r6
 8008c5c:	4628      	mov	r0, r5
 8008c5e:	47b8      	blx	r7
 8008c60:	3001      	adds	r0, #1
 8008c62:	f43f ae3e 	beq.w	80088e2 <_printf_float+0xba>
 8008c66:	f108 0801 	add.w	r8, r8, #1
 8008c6a:	68e3      	ldr	r3, [r4, #12]
 8008c6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c6e:	1a9b      	subs	r3, r3, r2
 8008c70:	4543      	cmp	r3, r8
 8008c72:	dcf0      	bgt.n	8008c56 <_printf_float+0x42e>
 8008c74:	e6fc      	b.n	8008a70 <_printf_float+0x248>
 8008c76:	f04f 0800 	mov.w	r8, #0
 8008c7a:	f104 0919 	add.w	r9, r4, #25
 8008c7e:	e7f4      	b.n	8008c6a <_printf_float+0x442>
 8008c80:	2900      	cmp	r1, #0
 8008c82:	f43f ae8b 	beq.w	800899c <_printf_float+0x174>
 8008c86:	2300      	movs	r3, #0
 8008c88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c8c:	ab09      	add	r3, sp, #36	; 0x24
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	ec49 8b10 	vmov	d0, r8, r9
 8008c94:	6022      	str	r2, [r4, #0]
 8008c96:	f8cd a004 	str.w	sl, [sp, #4]
 8008c9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f7ff fd2d 	bl	80086fe <__cvt>
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	e648      	b.n	800893a <_printf_float+0x112>

08008ca8 <_printf_common>:
 8008ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	4691      	mov	r9, r2
 8008cae:	461f      	mov	r7, r3
 8008cb0:	688a      	ldr	r2, [r1, #8]
 8008cb2:	690b      	ldr	r3, [r1, #16]
 8008cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	bfb8      	it	lt
 8008cbc:	4613      	movlt	r3, r2
 8008cbe:	f8c9 3000 	str.w	r3, [r9]
 8008cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	b112      	cbz	r2, 8008cd2 <_printf_common+0x2a>
 8008ccc:	3301      	adds	r3, #1
 8008cce:	f8c9 3000 	str.w	r3, [r9]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	0699      	lsls	r1, r3, #26
 8008cd6:	bf42      	ittt	mi
 8008cd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cdc:	3302      	addmi	r3, #2
 8008cde:	f8c9 3000 	strmi.w	r3, [r9]
 8008ce2:	6825      	ldr	r5, [r4, #0]
 8008ce4:	f015 0506 	ands.w	r5, r5, #6
 8008ce8:	d107      	bne.n	8008cfa <_printf_common+0x52>
 8008cea:	f104 0a19 	add.w	sl, r4, #25
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	f8d9 2000 	ldr.w	r2, [r9]
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	42ab      	cmp	r3, r5
 8008cf8:	dc28      	bgt.n	8008d4c <_printf_common+0xa4>
 8008cfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	3300      	adds	r3, #0
 8008d02:	bf18      	it	ne
 8008d04:	2301      	movne	r3, #1
 8008d06:	0692      	lsls	r2, r2, #26
 8008d08:	d42d      	bmi.n	8008d66 <_printf_common+0xbe>
 8008d0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d0e:	4639      	mov	r1, r7
 8008d10:	4630      	mov	r0, r6
 8008d12:	47c0      	blx	r8
 8008d14:	3001      	adds	r0, #1
 8008d16:	d020      	beq.n	8008d5a <_printf_common+0xb2>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	68e5      	ldr	r5, [r4, #12]
 8008d1c:	f8d9 2000 	ldr.w	r2, [r9]
 8008d20:	f003 0306 	and.w	r3, r3, #6
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	bf08      	it	eq
 8008d28:	1aad      	subeq	r5, r5, r2
 8008d2a:	68a3      	ldr	r3, [r4, #8]
 8008d2c:	6922      	ldr	r2, [r4, #16]
 8008d2e:	bf0c      	ite	eq
 8008d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d34:	2500      	movne	r5, #0
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bfc4      	itt	gt
 8008d3a:	1a9b      	subgt	r3, r3, r2
 8008d3c:	18ed      	addgt	r5, r5, r3
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	341a      	adds	r4, #26
 8008d44:	454d      	cmp	r5, r9
 8008d46:	d11a      	bne.n	8008d7e <_printf_common+0xd6>
 8008d48:	2000      	movs	r0, #0
 8008d4a:	e008      	b.n	8008d5e <_printf_common+0xb6>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4652      	mov	r2, sl
 8008d50:	4639      	mov	r1, r7
 8008d52:	4630      	mov	r0, r6
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d103      	bne.n	8008d62 <_printf_common+0xba>
 8008d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	3501      	adds	r5, #1
 8008d64:	e7c3      	b.n	8008cee <_printf_common+0x46>
 8008d66:	18e1      	adds	r1, r4, r3
 8008d68:	1c5a      	adds	r2, r3, #1
 8008d6a:	2030      	movs	r0, #48	; 0x30
 8008d6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d70:	4422      	add	r2, r4
 8008d72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	e7c5      	b.n	8008d0a <_printf_common+0x62>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4622      	mov	r2, r4
 8008d82:	4639      	mov	r1, r7
 8008d84:	4630      	mov	r0, r6
 8008d86:	47c0      	blx	r8
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d0e6      	beq.n	8008d5a <_printf_common+0xb2>
 8008d8c:	f109 0901 	add.w	r9, r9, #1
 8008d90:	e7d8      	b.n	8008d44 <_printf_common+0x9c>
	...

08008d94 <_printf_i>:
 8008d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	7e09      	ldrb	r1, [r1, #24]
 8008da0:	b085      	sub	sp, #20
 8008da2:	296e      	cmp	r1, #110	; 0x6e
 8008da4:	4617      	mov	r7, r2
 8008da6:	4606      	mov	r6, r0
 8008da8:	4698      	mov	r8, r3
 8008daa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dac:	f000 80b3 	beq.w	8008f16 <_printf_i+0x182>
 8008db0:	d822      	bhi.n	8008df8 <_printf_i+0x64>
 8008db2:	2963      	cmp	r1, #99	; 0x63
 8008db4:	d036      	beq.n	8008e24 <_printf_i+0x90>
 8008db6:	d80a      	bhi.n	8008dce <_printf_i+0x3a>
 8008db8:	2900      	cmp	r1, #0
 8008dba:	f000 80b9 	beq.w	8008f30 <_printf_i+0x19c>
 8008dbe:	2958      	cmp	r1, #88	; 0x58
 8008dc0:	f000 8083 	beq.w	8008eca <_printf_i+0x136>
 8008dc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008dcc:	e032      	b.n	8008e34 <_printf_i+0xa0>
 8008dce:	2964      	cmp	r1, #100	; 0x64
 8008dd0:	d001      	beq.n	8008dd6 <_printf_i+0x42>
 8008dd2:	2969      	cmp	r1, #105	; 0x69
 8008dd4:	d1f6      	bne.n	8008dc4 <_printf_i+0x30>
 8008dd6:	6820      	ldr	r0, [r4, #0]
 8008dd8:	6813      	ldr	r3, [r2, #0]
 8008dda:	0605      	lsls	r5, r0, #24
 8008ddc:	f103 0104 	add.w	r1, r3, #4
 8008de0:	d52a      	bpl.n	8008e38 <_printf_i+0xa4>
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	da03      	bge.n	8008df2 <_printf_i+0x5e>
 8008dea:	222d      	movs	r2, #45	; 0x2d
 8008dec:	425b      	negs	r3, r3
 8008dee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008df2:	486f      	ldr	r0, [pc, #444]	; (8008fb0 <_printf_i+0x21c>)
 8008df4:	220a      	movs	r2, #10
 8008df6:	e039      	b.n	8008e6c <_printf_i+0xd8>
 8008df8:	2973      	cmp	r1, #115	; 0x73
 8008dfa:	f000 809d 	beq.w	8008f38 <_printf_i+0x1a4>
 8008dfe:	d808      	bhi.n	8008e12 <_printf_i+0x7e>
 8008e00:	296f      	cmp	r1, #111	; 0x6f
 8008e02:	d020      	beq.n	8008e46 <_printf_i+0xb2>
 8008e04:	2970      	cmp	r1, #112	; 0x70
 8008e06:	d1dd      	bne.n	8008dc4 <_printf_i+0x30>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	f043 0320 	orr.w	r3, r3, #32
 8008e0e:	6023      	str	r3, [r4, #0]
 8008e10:	e003      	b.n	8008e1a <_printf_i+0x86>
 8008e12:	2975      	cmp	r1, #117	; 0x75
 8008e14:	d017      	beq.n	8008e46 <_printf_i+0xb2>
 8008e16:	2978      	cmp	r1, #120	; 0x78
 8008e18:	d1d4      	bne.n	8008dc4 <_printf_i+0x30>
 8008e1a:	2378      	movs	r3, #120	; 0x78
 8008e1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e20:	4864      	ldr	r0, [pc, #400]	; (8008fb4 <_printf_i+0x220>)
 8008e22:	e055      	b.n	8008ed0 <_printf_i+0x13c>
 8008e24:	6813      	ldr	r3, [r2, #0]
 8008e26:	1d19      	adds	r1, r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6011      	str	r1, [r2, #0]
 8008e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e34:	2301      	movs	r3, #1
 8008e36:	e08c      	b.n	8008f52 <_printf_i+0x1be>
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6011      	str	r1, [r2, #0]
 8008e3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e40:	bf18      	it	ne
 8008e42:	b21b      	sxthne	r3, r3
 8008e44:	e7cf      	b.n	8008de6 <_printf_i+0x52>
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	6825      	ldr	r5, [r4, #0]
 8008e4a:	1d18      	adds	r0, r3, #4
 8008e4c:	6010      	str	r0, [r2, #0]
 8008e4e:	0628      	lsls	r0, r5, #24
 8008e50:	d501      	bpl.n	8008e56 <_printf_i+0xc2>
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	e002      	b.n	8008e5c <_printf_i+0xc8>
 8008e56:	0668      	lsls	r0, r5, #25
 8008e58:	d5fb      	bpl.n	8008e52 <_printf_i+0xbe>
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	4854      	ldr	r0, [pc, #336]	; (8008fb0 <_printf_i+0x21c>)
 8008e5e:	296f      	cmp	r1, #111	; 0x6f
 8008e60:	bf14      	ite	ne
 8008e62:	220a      	movne	r2, #10
 8008e64:	2208      	moveq	r2, #8
 8008e66:	2100      	movs	r1, #0
 8008e68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e6c:	6865      	ldr	r5, [r4, #4]
 8008e6e:	60a5      	str	r5, [r4, #8]
 8008e70:	2d00      	cmp	r5, #0
 8008e72:	f2c0 8095 	blt.w	8008fa0 <_printf_i+0x20c>
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	f021 0104 	bic.w	r1, r1, #4
 8008e7c:	6021      	str	r1, [r4, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d13d      	bne.n	8008efe <_printf_i+0x16a>
 8008e82:	2d00      	cmp	r5, #0
 8008e84:	f040 808e 	bne.w	8008fa4 <_printf_i+0x210>
 8008e88:	4665      	mov	r5, ip
 8008e8a:	2a08      	cmp	r2, #8
 8008e8c:	d10b      	bne.n	8008ea6 <_printf_i+0x112>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	07db      	lsls	r3, r3, #31
 8008e92:	d508      	bpl.n	8008ea6 <_printf_i+0x112>
 8008e94:	6923      	ldr	r3, [r4, #16]
 8008e96:	6862      	ldr	r2, [r4, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	bfde      	ittt	le
 8008e9c:	2330      	movle	r3, #48	; 0x30
 8008e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ea6:	ebac 0305 	sub.w	r3, ip, r5
 8008eaa:	6123      	str	r3, [r4, #16]
 8008eac:	f8cd 8000 	str.w	r8, [sp]
 8008eb0:	463b      	mov	r3, r7
 8008eb2:	aa03      	add	r2, sp, #12
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	f7ff fef6 	bl	8008ca8 <_printf_common>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d14d      	bne.n	8008f5c <_printf_i+0x1c8>
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	b005      	add	sp, #20
 8008ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eca:	4839      	ldr	r0, [pc, #228]	; (8008fb0 <_printf_i+0x21c>)
 8008ecc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	6821      	ldr	r1, [r4, #0]
 8008ed4:	1d1d      	adds	r5, r3, #4
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6015      	str	r5, [r2, #0]
 8008eda:	060a      	lsls	r2, r1, #24
 8008edc:	d50b      	bpl.n	8008ef6 <_printf_i+0x162>
 8008ede:	07ca      	lsls	r2, r1, #31
 8008ee0:	bf44      	itt	mi
 8008ee2:	f041 0120 	orrmi.w	r1, r1, #32
 8008ee6:	6021      	strmi	r1, [r4, #0]
 8008ee8:	b91b      	cbnz	r3, 8008ef2 <_printf_i+0x15e>
 8008eea:	6822      	ldr	r2, [r4, #0]
 8008eec:	f022 0220 	bic.w	r2, r2, #32
 8008ef0:	6022      	str	r2, [r4, #0]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	e7b7      	b.n	8008e66 <_printf_i+0xd2>
 8008ef6:	064d      	lsls	r5, r1, #25
 8008ef8:	bf48      	it	mi
 8008efa:	b29b      	uxthmi	r3, r3
 8008efc:	e7ef      	b.n	8008ede <_printf_i+0x14a>
 8008efe:	4665      	mov	r5, ip
 8008f00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f04:	fb02 3311 	mls	r3, r2, r1, r3
 8008f08:	5cc3      	ldrb	r3, [r0, r3]
 8008f0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f0e:	460b      	mov	r3, r1
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d1f5      	bne.n	8008f00 <_printf_i+0x16c>
 8008f14:	e7b9      	b.n	8008e8a <_printf_i+0xf6>
 8008f16:	6813      	ldr	r3, [r2, #0]
 8008f18:	6825      	ldr	r5, [r4, #0]
 8008f1a:	6961      	ldr	r1, [r4, #20]
 8008f1c:	1d18      	adds	r0, r3, #4
 8008f1e:	6010      	str	r0, [r2, #0]
 8008f20:	0628      	lsls	r0, r5, #24
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	d501      	bpl.n	8008f2a <_printf_i+0x196>
 8008f26:	6019      	str	r1, [r3, #0]
 8008f28:	e002      	b.n	8008f30 <_printf_i+0x19c>
 8008f2a:	066a      	lsls	r2, r5, #25
 8008f2c:	d5fb      	bpl.n	8008f26 <_printf_i+0x192>
 8008f2e:	8019      	strh	r1, [r3, #0]
 8008f30:	2300      	movs	r3, #0
 8008f32:	6123      	str	r3, [r4, #16]
 8008f34:	4665      	mov	r5, ip
 8008f36:	e7b9      	b.n	8008eac <_printf_i+0x118>
 8008f38:	6813      	ldr	r3, [r2, #0]
 8008f3a:	1d19      	adds	r1, r3, #4
 8008f3c:	6011      	str	r1, [r2, #0]
 8008f3e:	681d      	ldr	r5, [r3, #0]
 8008f40:	6862      	ldr	r2, [r4, #4]
 8008f42:	2100      	movs	r1, #0
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7f7 f94b 	bl	80001e0 <memchr>
 8008f4a:	b108      	cbz	r0, 8008f50 <_printf_i+0x1bc>
 8008f4c:	1b40      	subs	r0, r0, r5
 8008f4e:	6060      	str	r0, [r4, #4]
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	6123      	str	r3, [r4, #16]
 8008f54:	2300      	movs	r3, #0
 8008f56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5a:	e7a7      	b.n	8008eac <_printf_i+0x118>
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4639      	mov	r1, r7
 8008f62:	4630      	mov	r0, r6
 8008f64:	47c0      	blx	r8
 8008f66:	3001      	adds	r0, #1
 8008f68:	d0aa      	beq.n	8008ec0 <_printf_i+0x12c>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	079b      	lsls	r3, r3, #30
 8008f6e:	d413      	bmi.n	8008f98 <_printf_i+0x204>
 8008f70:	68e0      	ldr	r0, [r4, #12]
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	4298      	cmp	r0, r3
 8008f76:	bfb8      	it	lt
 8008f78:	4618      	movlt	r0, r3
 8008f7a:	e7a3      	b.n	8008ec4 <_printf_i+0x130>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	464a      	mov	r2, r9
 8008f80:	4639      	mov	r1, r7
 8008f82:	4630      	mov	r0, r6
 8008f84:	47c0      	blx	r8
 8008f86:	3001      	adds	r0, #1
 8008f88:	d09a      	beq.n	8008ec0 <_printf_i+0x12c>
 8008f8a:	3501      	adds	r5, #1
 8008f8c:	68e3      	ldr	r3, [r4, #12]
 8008f8e:	9a03      	ldr	r2, [sp, #12]
 8008f90:	1a9b      	subs	r3, r3, r2
 8008f92:	42ab      	cmp	r3, r5
 8008f94:	dcf2      	bgt.n	8008f7c <_printf_i+0x1e8>
 8008f96:	e7eb      	b.n	8008f70 <_printf_i+0x1dc>
 8008f98:	2500      	movs	r5, #0
 8008f9a:	f104 0919 	add.w	r9, r4, #25
 8008f9e:	e7f5      	b.n	8008f8c <_printf_i+0x1f8>
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1ac      	bne.n	8008efe <_printf_i+0x16a>
 8008fa4:	7803      	ldrb	r3, [r0, #0]
 8008fa6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008faa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fae:	e76c      	b.n	8008e8a <_printf_i+0xf6>
 8008fb0:	0800c1a2 	.word	0x0800c1a2
 8008fb4:	0800c1b3 	.word	0x0800c1b3

08008fb8 <_scanf_float>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	469a      	mov	sl, r3
 8008fbe:	688b      	ldr	r3, [r1, #8]
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	1e5a      	subs	r2, r3, #1
 8008fc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fc8:	b087      	sub	sp, #28
 8008fca:	bf83      	ittte	hi
 8008fcc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008fd0:	189b      	addhi	r3, r3, r2
 8008fd2:	9301      	strhi	r3, [sp, #4]
 8008fd4:	2300      	movls	r3, #0
 8008fd6:	bf86      	itte	hi
 8008fd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008fdc:	608b      	strhi	r3, [r1, #8]
 8008fde:	9301      	strls	r3, [sp, #4]
 8008fe0:	680b      	ldr	r3, [r1, #0]
 8008fe2:	4688      	mov	r8, r1
 8008fe4:	f04f 0b00 	mov.w	fp, #0
 8008fe8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008fec:	f848 3b1c 	str.w	r3, [r8], #28
 8008ff0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	465a      	mov	r2, fp
 8008ffc:	46d9      	mov	r9, fp
 8008ffe:	f8cd b008 	str.w	fp, [sp, #8]
 8009002:	68a1      	ldr	r1, [r4, #8]
 8009004:	b181      	cbz	r1, 8009028 <_scanf_float+0x70>
 8009006:	6833      	ldr	r3, [r6, #0]
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	2b49      	cmp	r3, #73	; 0x49
 800900c:	d071      	beq.n	80090f2 <_scanf_float+0x13a>
 800900e:	d84d      	bhi.n	80090ac <_scanf_float+0xf4>
 8009010:	2b39      	cmp	r3, #57	; 0x39
 8009012:	d840      	bhi.n	8009096 <_scanf_float+0xde>
 8009014:	2b31      	cmp	r3, #49	; 0x31
 8009016:	f080 8088 	bcs.w	800912a <_scanf_float+0x172>
 800901a:	2b2d      	cmp	r3, #45	; 0x2d
 800901c:	f000 8090 	beq.w	8009140 <_scanf_float+0x188>
 8009020:	d815      	bhi.n	800904e <_scanf_float+0x96>
 8009022:	2b2b      	cmp	r3, #43	; 0x2b
 8009024:	f000 808c 	beq.w	8009140 <_scanf_float+0x188>
 8009028:	f1b9 0f00 	cmp.w	r9, #0
 800902c:	d003      	beq.n	8009036 <_scanf_float+0x7e>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	3a01      	subs	r2, #1
 8009038:	2a01      	cmp	r2, #1
 800903a:	f200 80ea 	bhi.w	8009212 <_scanf_float+0x25a>
 800903e:	4545      	cmp	r5, r8
 8009040:	f200 80dc 	bhi.w	80091fc <_scanf_float+0x244>
 8009044:	2601      	movs	r6, #1
 8009046:	4630      	mov	r0, r6
 8009048:	b007      	add	sp, #28
 800904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904e:	2b2e      	cmp	r3, #46	; 0x2e
 8009050:	f000 809f 	beq.w	8009192 <_scanf_float+0x1da>
 8009054:	2b30      	cmp	r3, #48	; 0x30
 8009056:	d1e7      	bne.n	8009028 <_scanf_float+0x70>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800905e:	d064      	beq.n	800912a <_scanf_float+0x172>
 8009060:	9b01      	ldr	r3, [sp, #4]
 8009062:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f109 0901 	add.w	r9, r9, #1
 800906c:	b11b      	cbz	r3, 8009076 <_scanf_float+0xbe>
 800906e:	3b01      	subs	r3, #1
 8009070:	3101      	adds	r1, #1
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	60a1      	str	r1, [r4, #8]
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	3b01      	subs	r3, #1
 800907a:	60a3      	str	r3, [r4, #8]
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	3301      	adds	r3, #1
 8009080:	6123      	str	r3, [r4, #16]
 8009082:	6873      	ldr	r3, [r6, #4]
 8009084:	3b01      	subs	r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	6073      	str	r3, [r6, #4]
 800908a:	f340 80ac 	ble.w	80091e6 <_scanf_float+0x22e>
 800908e:	6833      	ldr	r3, [r6, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	e7b5      	b.n	8009002 <_scanf_float+0x4a>
 8009096:	2b45      	cmp	r3, #69	; 0x45
 8009098:	f000 8085 	beq.w	80091a6 <_scanf_float+0x1ee>
 800909c:	2b46      	cmp	r3, #70	; 0x46
 800909e:	d06a      	beq.n	8009176 <_scanf_float+0x1be>
 80090a0:	2b41      	cmp	r3, #65	; 0x41
 80090a2:	d1c1      	bne.n	8009028 <_scanf_float+0x70>
 80090a4:	2a01      	cmp	r2, #1
 80090a6:	d1bf      	bne.n	8009028 <_scanf_float+0x70>
 80090a8:	2202      	movs	r2, #2
 80090aa:	e046      	b.n	800913a <_scanf_float+0x182>
 80090ac:	2b65      	cmp	r3, #101	; 0x65
 80090ae:	d07a      	beq.n	80091a6 <_scanf_float+0x1ee>
 80090b0:	d818      	bhi.n	80090e4 <_scanf_float+0x12c>
 80090b2:	2b54      	cmp	r3, #84	; 0x54
 80090b4:	d066      	beq.n	8009184 <_scanf_float+0x1cc>
 80090b6:	d811      	bhi.n	80090dc <_scanf_float+0x124>
 80090b8:	2b4e      	cmp	r3, #78	; 0x4e
 80090ba:	d1b5      	bne.n	8009028 <_scanf_float+0x70>
 80090bc:	2a00      	cmp	r2, #0
 80090be:	d146      	bne.n	800914e <_scanf_float+0x196>
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	d145      	bne.n	8009152 <_scanf_float+0x19a>
 80090c6:	6821      	ldr	r1, [r4, #0]
 80090c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80090cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80090d0:	d13f      	bne.n	8009152 <_scanf_float+0x19a>
 80090d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80090d6:	6021      	str	r1, [r4, #0]
 80090d8:	2201      	movs	r2, #1
 80090da:	e02e      	b.n	800913a <_scanf_float+0x182>
 80090dc:	2b59      	cmp	r3, #89	; 0x59
 80090de:	d01e      	beq.n	800911e <_scanf_float+0x166>
 80090e0:	2b61      	cmp	r3, #97	; 0x61
 80090e2:	e7de      	b.n	80090a2 <_scanf_float+0xea>
 80090e4:	2b6e      	cmp	r3, #110	; 0x6e
 80090e6:	d0e9      	beq.n	80090bc <_scanf_float+0x104>
 80090e8:	d815      	bhi.n	8009116 <_scanf_float+0x15e>
 80090ea:	2b66      	cmp	r3, #102	; 0x66
 80090ec:	d043      	beq.n	8009176 <_scanf_float+0x1be>
 80090ee:	2b69      	cmp	r3, #105	; 0x69
 80090f0:	d19a      	bne.n	8009028 <_scanf_float+0x70>
 80090f2:	f1bb 0f00 	cmp.w	fp, #0
 80090f6:	d138      	bne.n	800916a <_scanf_float+0x1b2>
 80090f8:	f1b9 0f00 	cmp.w	r9, #0
 80090fc:	d197      	bne.n	800902e <_scanf_float+0x76>
 80090fe:	6821      	ldr	r1, [r4, #0]
 8009100:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009104:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009108:	d195      	bne.n	8009036 <_scanf_float+0x7e>
 800910a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800910e:	6021      	str	r1, [r4, #0]
 8009110:	f04f 0b01 	mov.w	fp, #1
 8009114:	e011      	b.n	800913a <_scanf_float+0x182>
 8009116:	2b74      	cmp	r3, #116	; 0x74
 8009118:	d034      	beq.n	8009184 <_scanf_float+0x1cc>
 800911a:	2b79      	cmp	r3, #121	; 0x79
 800911c:	d184      	bne.n	8009028 <_scanf_float+0x70>
 800911e:	f1bb 0f07 	cmp.w	fp, #7
 8009122:	d181      	bne.n	8009028 <_scanf_float+0x70>
 8009124:	f04f 0b08 	mov.w	fp, #8
 8009128:	e007      	b.n	800913a <_scanf_float+0x182>
 800912a:	eb12 0f0b 	cmn.w	r2, fp
 800912e:	f47f af7b 	bne.w	8009028 <_scanf_float+0x70>
 8009132:	6821      	ldr	r1, [r4, #0]
 8009134:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009138:	6021      	str	r1, [r4, #0]
 800913a:	702b      	strb	r3, [r5, #0]
 800913c:	3501      	adds	r5, #1
 800913e:	e79a      	b.n	8009076 <_scanf_float+0xbe>
 8009140:	6821      	ldr	r1, [r4, #0]
 8009142:	0608      	lsls	r0, r1, #24
 8009144:	f57f af70 	bpl.w	8009028 <_scanf_float+0x70>
 8009148:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800914c:	e7f4      	b.n	8009138 <_scanf_float+0x180>
 800914e:	2a02      	cmp	r2, #2
 8009150:	d047      	beq.n	80091e2 <_scanf_float+0x22a>
 8009152:	f1bb 0f01 	cmp.w	fp, #1
 8009156:	d003      	beq.n	8009160 <_scanf_float+0x1a8>
 8009158:	f1bb 0f04 	cmp.w	fp, #4
 800915c:	f47f af64 	bne.w	8009028 <_scanf_float+0x70>
 8009160:	f10b 0b01 	add.w	fp, fp, #1
 8009164:	fa5f fb8b 	uxtb.w	fp, fp
 8009168:	e7e7      	b.n	800913a <_scanf_float+0x182>
 800916a:	f1bb 0f03 	cmp.w	fp, #3
 800916e:	d0f7      	beq.n	8009160 <_scanf_float+0x1a8>
 8009170:	f1bb 0f05 	cmp.w	fp, #5
 8009174:	e7f2      	b.n	800915c <_scanf_float+0x1a4>
 8009176:	f1bb 0f02 	cmp.w	fp, #2
 800917a:	f47f af55 	bne.w	8009028 <_scanf_float+0x70>
 800917e:	f04f 0b03 	mov.w	fp, #3
 8009182:	e7da      	b.n	800913a <_scanf_float+0x182>
 8009184:	f1bb 0f06 	cmp.w	fp, #6
 8009188:	f47f af4e 	bne.w	8009028 <_scanf_float+0x70>
 800918c:	f04f 0b07 	mov.w	fp, #7
 8009190:	e7d3      	b.n	800913a <_scanf_float+0x182>
 8009192:	6821      	ldr	r1, [r4, #0]
 8009194:	0588      	lsls	r0, r1, #22
 8009196:	f57f af47 	bpl.w	8009028 <_scanf_float+0x70>
 800919a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800919e:	6021      	str	r1, [r4, #0]
 80091a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80091a4:	e7c9      	b.n	800913a <_scanf_float+0x182>
 80091a6:	6821      	ldr	r1, [r4, #0]
 80091a8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80091ac:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80091b0:	d006      	beq.n	80091c0 <_scanf_float+0x208>
 80091b2:	0548      	lsls	r0, r1, #21
 80091b4:	f57f af38 	bpl.w	8009028 <_scanf_float+0x70>
 80091b8:	f1b9 0f00 	cmp.w	r9, #0
 80091bc:	f43f af3b 	beq.w	8009036 <_scanf_float+0x7e>
 80091c0:	0588      	lsls	r0, r1, #22
 80091c2:	bf58      	it	pl
 80091c4:	9802      	ldrpl	r0, [sp, #8]
 80091c6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80091ca:	bf58      	it	pl
 80091cc:	eba9 0000 	subpl.w	r0, r9, r0
 80091d0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80091d4:	bf58      	it	pl
 80091d6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80091da:	6021      	str	r1, [r4, #0]
 80091dc:	f04f 0900 	mov.w	r9, #0
 80091e0:	e7ab      	b.n	800913a <_scanf_float+0x182>
 80091e2:	2203      	movs	r2, #3
 80091e4:	e7a9      	b.n	800913a <_scanf_float+0x182>
 80091e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80091ea:	9205      	str	r2, [sp, #20]
 80091ec:	4631      	mov	r1, r6
 80091ee:	4638      	mov	r0, r7
 80091f0:	4798      	blx	r3
 80091f2:	9a05      	ldr	r2, [sp, #20]
 80091f4:	2800      	cmp	r0, #0
 80091f6:	f43f af04 	beq.w	8009002 <_scanf_float+0x4a>
 80091fa:	e715      	b.n	8009028 <_scanf_float+0x70>
 80091fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009200:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009204:	4632      	mov	r2, r6
 8009206:	4638      	mov	r0, r7
 8009208:	4798      	blx	r3
 800920a:	6923      	ldr	r3, [r4, #16]
 800920c:	3b01      	subs	r3, #1
 800920e:	6123      	str	r3, [r4, #16]
 8009210:	e715      	b.n	800903e <_scanf_float+0x86>
 8009212:	f10b 33ff 	add.w	r3, fp, #4294967295
 8009216:	2b06      	cmp	r3, #6
 8009218:	d80a      	bhi.n	8009230 <_scanf_float+0x278>
 800921a:	f1bb 0f02 	cmp.w	fp, #2
 800921e:	d968      	bls.n	80092f2 <_scanf_float+0x33a>
 8009220:	f1ab 0b03 	sub.w	fp, fp, #3
 8009224:	fa5f fb8b 	uxtb.w	fp, fp
 8009228:	eba5 0b0b 	sub.w	fp, r5, fp
 800922c:	455d      	cmp	r5, fp
 800922e:	d14b      	bne.n	80092c8 <_scanf_float+0x310>
 8009230:	6823      	ldr	r3, [r4, #0]
 8009232:	05da      	lsls	r2, r3, #23
 8009234:	d51f      	bpl.n	8009276 <_scanf_float+0x2be>
 8009236:	055b      	lsls	r3, r3, #21
 8009238:	d468      	bmi.n	800930c <_scanf_float+0x354>
 800923a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800923e:	6923      	ldr	r3, [r4, #16]
 8009240:	2965      	cmp	r1, #101	; 0x65
 8009242:	f103 33ff 	add.w	r3, r3, #4294967295
 8009246:	f105 3bff 	add.w	fp, r5, #4294967295
 800924a:	6123      	str	r3, [r4, #16]
 800924c:	d00d      	beq.n	800926a <_scanf_float+0x2b2>
 800924e:	2945      	cmp	r1, #69	; 0x45
 8009250:	d00b      	beq.n	800926a <_scanf_float+0x2b2>
 8009252:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009256:	4632      	mov	r2, r6
 8009258:	4638      	mov	r0, r7
 800925a:	4798      	blx	r3
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009262:	3b01      	subs	r3, #1
 8009264:	f1a5 0b02 	sub.w	fp, r5, #2
 8009268:	6123      	str	r3, [r4, #16]
 800926a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800926e:	4632      	mov	r2, r6
 8009270:	4638      	mov	r0, r7
 8009272:	4798      	blx	r3
 8009274:	465d      	mov	r5, fp
 8009276:	6826      	ldr	r6, [r4, #0]
 8009278:	f016 0610 	ands.w	r6, r6, #16
 800927c:	d17a      	bne.n	8009374 <_scanf_float+0x3bc>
 800927e:	702e      	strb	r6, [r5, #0]
 8009280:	6823      	ldr	r3, [r4, #0]
 8009282:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800928a:	d142      	bne.n	8009312 <_scanf_float+0x35a>
 800928c:	9b02      	ldr	r3, [sp, #8]
 800928e:	eba9 0303 	sub.w	r3, r9, r3
 8009292:	425a      	negs	r2, r3
 8009294:	2b00      	cmp	r3, #0
 8009296:	d149      	bne.n	800932c <_scanf_float+0x374>
 8009298:	2200      	movs	r2, #0
 800929a:	4641      	mov	r1, r8
 800929c:	4638      	mov	r0, r7
 800929e:	f000 fea3 	bl	8009fe8 <_strtod_r>
 80092a2:	6825      	ldr	r5, [r4, #0]
 80092a4:	f8da 3000 	ldr.w	r3, [sl]
 80092a8:	f015 0f02 	tst.w	r5, #2
 80092ac:	f103 0204 	add.w	r2, r3, #4
 80092b0:	ec59 8b10 	vmov	r8, r9, d0
 80092b4:	f8ca 2000 	str.w	r2, [sl]
 80092b8:	d043      	beq.n	8009342 <_scanf_float+0x38a>
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	e9c3 8900 	strd	r8, r9, [r3]
 80092c0:	68e3      	ldr	r3, [r4, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60e3      	str	r3, [r4, #12]
 80092c6:	e6be      	b.n	8009046 <_scanf_float+0x8e>
 80092c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80092d0:	4632      	mov	r2, r6
 80092d2:	4638      	mov	r0, r7
 80092d4:	4798      	blx	r3
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	3b01      	subs	r3, #1
 80092da:	6123      	str	r3, [r4, #16]
 80092dc:	e7a6      	b.n	800922c <_scanf_float+0x274>
 80092de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092e2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80092e6:	4632      	mov	r2, r6
 80092e8:	4638      	mov	r0, r7
 80092ea:	4798      	blx	r3
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	4545      	cmp	r5, r8
 80092f4:	d8f3      	bhi.n	80092de <_scanf_float+0x326>
 80092f6:	e6a5      	b.n	8009044 <_scanf_float+0x8c>
 80092f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009300:	4632      	mov	r2, r6
 8009302:	4638      	mov	r0, r7
 8009304:	4798      	blx	r3
 8009306:	6923      	ldr	r3, [r4, #16]
 8009308:	3b01      	subs	r3, #1
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	4545      	cmp	r5, r8
 800930e:	d8f3      	bhi.n	80092f8 <_scanf_float+0x340>
 8009310:	e698      	b.n	8009044 <_scanf_float+0x8c>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0bf      	beq.n	8009298 <_scanf_float+0x2e0>
 8009318:	9904      	ldr	r1, [sp, #16]
 800931a:	230a      	movs	r3, #10
 800931c:	4632      	mov	r2, r6
 800931e:	3101      	adds	r1, #1
 8009320:	4638      	mov	r0, r7
 8009322:	f000 feed 	bl	800a100 <_strtol_r>
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	9d04      	ldr	r5, [sp, #16]
 800932a:	1ac2      	subs	r2, r0, r3
 800932c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009330:	429d      	cmp	r5, r3
 8009332:	bf28      	it	cs
 8009334:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009338:	490f      	ldr	r1, [pc, #60]	; (8009378 <_scanf_float+0x3c0>)
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f824 	bl	8009388 <siprintf>
 8009340:	e7aa      	b.n	8009298 <_scanf_float+0x2e0>
 8009342:	f015 0504 	ands.w	r5, r5, #4
 8009346:	d1b8      	bne.n	80092ba <_scanf_float+0x302>
 8009348:	681f      	ldr	r7, [r3, #0]
 800934a:	ee10 2a10 	vmov	r2, s0
 800934e:	464b      	mov	r3, r9
 8009350:	ee10 0a10 	vmov	r0, s0
 8009354:	4649      	mov	r1, r9
 8009356:	f7f7 fbe9 	bl	8000b2c <__aeabi_dcmpun>
 800935a:	b128      	cbz	r0, 8009368 <_scanf_float+0x3b0>
 800935c:	4628      	mov	r0, r5
 800935e:	f000 f80d 	bl	800937c <nanf>
 8009362:	ed87 0a00 	vstr	s0, [r7]
 8009366:	e7ab      	b.n	80092c0 <_scanf_float+0x308>
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 fc3c 	bl	8000be8 <__aeabi_d2f>
 8009370:	6038      	str	r0, [r7, #0]
 8009372:	e7a5      	b.n	80092c0 <_scanf_float+0x308>
 8009374:	2600      	movs	r6, #0
 8009376:	e666      	b.n	8009046 <_scanf_float+0x8e>
 8009378:	0800c1c4 	.word	0x0800c1c4

0800937c <nanf>:
 800937c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009384 <nanf+0x8>
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	7fc00000 	.word	0x7fc00000

08009388 <siprintf>:
 8009388:	b40e      	push	{r1, r2, r3}
 800938a:	b500      	push	{lr}
 800938c:	b09c      	sub	sp, #112	; 0x70
 800938e:	ab1d      	add	r3, sp, #116	; 0x74
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	9006      	str	r0, [sp, #24]
 8009394:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009398:	4809      	ldr	r0, [pc, #36]	; (80093c0 <siprintf+0x38>)
 800939a:	9107      	str	r1, [sp, #28]
 800939c:	9104      	str	r1, [sp, #16]
 800939e:	4909      	ldr	r1, [pc, #36]	; (80093c4 <siprintf+0x3c>)
 80093a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a4:	9105      	str	r1, [sp, #20]
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	a902      	add	r1, sp, #8
 80093ac:	f002 fd64 	bl	800be78 <_svfiprintf_r>
 80093b0:	9b02      	ldr	r3, [sp, #8]
 80093b2:	2200      	movs	r2, #0
 80093b4:	701a      	strb	r2, [r3, #0]
 80093b6:	b01c      	add	sp, #112	; 0x70
 80093b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80093bc:	b003      	add	sp, #12
 80093be:	4770      	bx	lr
 80093c0:	20000040 	.word	0x20000040
 80093c4:	ffff0208 	.word	0xffff0208

080093c8 <sulp>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	4604      	mov	r4, r0
 80093cc:	460d      	mov	r5, r1
 80093ce:	ec45 4b10 	vmov	d0, r4, r5
 80093d2:	4616      	mov	r6, r2
 80093d4:	f002 fb0c 	bl	800b9f0 <__ulp>
 80093d8:	ec51 0b10 	vmov	r0, r1, d0
 80093dc:	b17e      	cbz	r6, 80093fe <sulp+0x36>
 80093de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	dd09      	ble.n	80093fe <sulp+0x36>
 80093ea:	051b      	lsls	r3, r3, #20
 80093ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093f0:	2400      	movs	r4, #0
 80093f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093f6:	4622      	mov	r2, r4
 80093f8:	462b      	mov	r3, r5
 80093fa:	f7f7 f8fd 	bl	80005f8 <__aeabi_dmul>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc

08009400 <_strtod_l>:
 8009400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009404:	461f      	mov	r7, r3
 8009406:	b0a1      	sub	sp, #132	; 0x84
 8009408:	2300      	movs	r3, #0
 800940a:	4681      	mov	r9, r0
 800940c:	4638      	mov	r0, r7
 800940e:	460e      	mov	r6, r1
 8009410:	9217      	str	r2, [sp, #92]	; 0x5c
 8009412:	931c      	str	r3, [sp, #112]	; 0x70
 8009414:	f001 fff5 	bl	800b402 <__localeconv_l>
 8009418:	4680      	mov	r8, r0
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	f7f6 fed8 	bl	80001d0 <strlen>
 8009420:	f04f 0a00 	mov.w	sl, #0
 8009424:	4604      	mov	r4, r0
 8009426:	f04f 0b00 	mov.w	fp, #0
 800942a:	961b      	str	r6, [sp, #108]	; 0x6c
 800942c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	2a0d      	cmp	r2, #13
 8009432:	d832      	bhi.n	800949a <_strtod_l+0x9a>
 8009434:	2a09      	cmp	r2, #9
 8009436:	d236      	bcs.n	80094a6 <_strtod_l+0xa6>
 8009438:	2a00      	cmp	r2, #0
 800943a:	d03e      	beq.n	80094ba <_strtod_l+0xba>
 800943c:	2300      	movs	r3, #0
 800943e:	930d      	str	r3, [sp, #52]	; 0x34
 8009440:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009442:	782b      	ldrb	r3, [r5, #0]
 8009444:	2b30      	cmp	r3, #48	; 0x30
 8009446:	f040 80ac 	bne.w	80095a2 <_strtod_l+0x1a2>
 800944a:	786b      	ldrb	r3, [r5, #1]
 800944c:	2b58      	cmp	r3, #88	; 0x58
 800944e:	d001      	beq.n	8009454 <_strtod_l+0x54>
 8009450:	2b78      	cmp	r3, #120	; 0x78
 8009452:	d167      	bne.n	8009524 <_strtod_l+0x124>
 8009454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009456:	9301      	str	r3, [sp, #4]
 8009458:	ab1c      	add	r3, sp, #112	; 0x70
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	9702      	str	r7, [sp, #8]
 800945e:	ab1d      	add	r3, sp, #116	; 0x74
 8009460:	4a88      	ldr	r2, [pc, #544]	; (8009684 <_strtod_l+0x284>)
 8009462:	a91b      	add	r1, sp, #108	; 0x6c
 8009464:	4648      	mov	r0, r9
 8009466:	f001 fcf2 	bl	800ae4e <__gethex>
 800946a:	f010 0407 	ands.w	r4, r0, #7
 800946e:	4606      	mov	r6, r0
 8009470:	d005      	beq.n	800947e <_strtod_l+0x7e>
 8009472:	2c06      	cmp	r4, #6
 8009474:	d12b      	bne.n	80094ce <_strtod_l+0xce>
 8009476:	3501      	adds	r5, #1
 8009478:	2300      	movs	r3, #0
 800947a:	951b      	str	r5, [sp, #108]	; 0x6c
 800947c:	930d      	str	r3, [sp, #52]	; 0x34
 800947e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009480:	2b00      	cmp	r3, #0
 8009482:	f040 859a 	bne.w	8009fba <_strtod_l+0xbba>
 8009486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009488:	b1e3      	cbz	r3, 80094c4 <_strtod_l+0xc4>
 800948a:	4652      	mov	r2, sl
 800948c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009490:	ec43 2b10 	vmov	d0, r2, r3
 8009494:	b021      	add	sp, #132	; 0x84
 8009496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949a:	2a2b      	cmp	r2, #43	; 0x2b
 800949c:	d015      	beq.n	80094ca <_strtod_l+0xca>
 800949e:	2a2d      	cmp	r2, #45	; 0x2d
 80094a0:	d004      	beq.n	80094ac <_strtod_l+0xac>
 80094a2:	2a20      	cmp	r2, #32
 80094a4:	d1ca      	bne.n	800943c <_strtod_l+0x3c>
 80094a6:	3301      	adds	r3, #1
 80094a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80094aa:	e7bf      	b.n	800942c <_strtod_l+0x2c>
 80094ac:	2201      	movs	r2, #1
 80094ae:	920d      	str	r2, [sp, #52]	; 0x34
 80094b0:	1c5a      	adds	r2, r3, #1
 80094b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1c2      	bne.n	8009440 <_strtod_l+0x40>
 80094ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f040 8579 	bne.w	8009fb6 <_strtod_l+0xbb6>
 80094c4:	4652      	mov	r2, sl
 80094c6:	465b      	mov	r3, fp
 80094c8:	e7e2      	b.n	8009490 <_strtod_l+0x90>
 80094ca:	2200      	movs	r2, #0
 80094cc:	e7ef      	b.n	80094ae <_strtod_l+0xae>
 80094ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094d0:	b13a      	cbz	r2, 80094e2 <_strtod_l+0xe2>
 80094d2:	2135      	movs	r1, #53	; 0x35
 80094d4:	a81e      	add	r0, sp, #120	; 0x78
 80094d6:	f002 fb83 	bl	800bbe0 <__copybits>
 80094da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094dc:	4648      	mov	r0, r9
 80094de:	f001 ffef 	bl	800b4c0 <_Bfree>
 80094e2:	3c01      	subs	r4, #1
 80094e4:	2c04      	cmp	r4, #4
 80094e6:	d806      	bhi.n	80094f6 <_strtod_l+0xf6>
 80094e8:	e8df f004 	tbb	[pc, r4]
 80094ec:	1714030a 	.word	0x1714030a
 80094f0:	0a          	.byte	0x0a
 80094f1:	00          	.byte	0x00
 80094f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80094f6:	0730      	lsls	r0, r6, #28
 80094f8:	d5c1      	bpl.n	800947e <_strtod_l+0x7e>
 80094fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80094fe:	e7be      	b.n	800947e <_strtod_l+0x7e>
 8009500:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8009504:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009506:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800950a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800950e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009512:	e7f0      	b.n	80094f6 <_strtod_l+0xf6>
 8009514:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009688 <_strtod_l+0x288>
 8009518:	e7ed      	b.n	80094f6 <_strtod_l+0xf6>
 800951a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800951e:	f04f 3aff 	mov.w	sl, #4294967295
 8009522:	e7e8      	b.n	80094f6 <_strtod_l+0xf6>
 8009524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	921b      	str	r2, [sp, #108]	; 0x6c
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b30      	cmp	r3, #48	; 0x30
 800952e:	d0f9      	beq.n	8009524 <_strtod_l+0x124>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0a4      	beq.n	800947e <_strtod_l+0x7e>
 8009534:	2301      	movs	r3, #1
 8009536:	2500      	movs	r5, #0
 8009538:	9306      	str	r3, [sp, #24]
 800953a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800953c:	9308      	str	r3, [sp, #32]
 800953e:	9507      	str	r5, [sp, #28]
 8009540:	9505      	str	r5, [sp, #20]
 8009542:	220a      	movs	r2, #10
 8009544:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009546:	7807      	ldrb	r7, [r0, #0]
 8009548:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800954c:	b2d9      	uxtb	r1, r3
 800954e:	2909      	cmp	r1, #9
 8009550:	d929      	bls.n	80095a6 <_strtod_l+0x1a6>
 8009552:	4622      	mov	r2, r4
 8009554:	f8d8 1000 	ldr.w	r1, [r8]
 8009558:	f002 fd96 	bl	800c088 <strncmp>
 800955c:	2800      	cmp	r0, #0
 800955e:	d031      	beq.n	80095c4 <_strtod_l+0x1c4>
 8009560:	2000      	movs	r0, #0
 8009562:	9c05      	ldr	r4, [sp, #20]
 8009564:	9004      	str	r0, [sp, #16]
 8009566:	463b      	mov	r3, r7
 8009568:	4602      	mov	r2, r0
 800956a:	2b65      	cmp	r3, #101	; 0x65
 800956c:	d001      	beq.n	8009572 <_strtod_l+0x172>
 800956e:	2b45      	cmp	r3, #69	; 0x45
 8009570:	d114      	bne.n	800959c <_strtod_l+0x19c>
 8009572:	b924      	cbnz	r4, 800957e <_strtod_l+0x17e>
 8009574:	b910      	cbnz	r0, 800957c <_strtod_l+0x17c>
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d09e      	beq.n	80094ba <_strtod_l+0xba>
 800957c:	2400      	movs	r4, #0
 800957e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009580:	1c73      	adds	r3, r6, #1
 8009582:	931b      	str	r3, [sp, #108]	; 0x6c
 8009584:	7873      	ldrb	r3, [r6, #1]
 8009586:	2b2b      	cmp	r3, #43	; 0x2b
 8009588:	d078      	beq.n	800967c <_strtod_l+0x27c>
 800958a:	2b2d      	cmp	r3, #45	; 0x2d
 800958c:	d070      	beq.n	8009670 <_strtod_l+0x270>
 800958e:	f04f 0c00 	mov.w	ip, #0
 8009592:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009596:	2f09      	cmp	r7, #9
 8009598:	d97c      	bls.n	8009694 <_strtod_l+0x294>
 800959a:	961b      	str	r6, [sp, #108]	; 0x6c
 800959c:	f04f 0e00 	mov.w	lr, #0
 80095a0:	e09a      	b.n	80096d8 <_strtod_l+0x2d8>
 80095a2:	2300      	movs	r3, #0
 80095a4:	e7c7      	b.n	8009536 <_strtod_l+0x136>
 80095a6:	9905      	ldr	r1, [sp, #20]
 80095a8:	2908      	cmp	r1, #8
 80095aa:	bfdd      	ittte	le
 80095ac:	9907      	ldrle	r1, [sp, #28]
 80095ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80095b2:	9307      	strle	r3, [sp, #28]
 80095b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80095b8:	9b05      	ldr	r3, [sp, #20]
 80095ba:	3001      	adds	r0, #1
 80095bc:	3301      	adds	r3, #1
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80095c2:	e7bf      	b.n	8009544 <_strtod_l+0x144>
 80095c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095c6:	191a      	adds	r2, r3, r4
 80095c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80095ca:	9a05      	ldr	r2, [sp, #20]
 80095cc:	5d1b      	ldrb	r3, [r3, r4]
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	d037      	beq.n	8009642 <_strtod_l+0x242>
 80095d2:	9c05      	ldr	r4, [sp, #20]
 80095d4:	4602      	mov	r2, r0
 80095d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80095da:	2909      	cmp	r1, #9
 80095dc:	d913      	bls.n	8009606 <_strtod_l+0x206>
 80095de:	2101      	movs	r1, #1
 80095e0:	9104      	str	r1, [sp, #16]
 80095e2:	e7c2      	b.n	800956a <_strtod_l+0x16a>
 80095e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	3001      	adds	r0, #1
 80095ee:	2b30      	cmp	r3, #48	; 0x30
 80095f0:	d0f8      	beq.n	80095e4 <_strtod_l+0x1e4>
 80095f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80095f6:	2a08      	cmp	r2, #8
 80095f8:	f200 84e4 	bhi.w	8009fc4 <_strtod_l+0xbc4>
 80095fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80095fe:	9208      	str	r2, [sp, #32]
 8009600:	4602      	mov	r2, r0
 8009602:	2000      	movs	r0, #0
 8009604:	4604      	mov	r4, r0
 8009606:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800960a:	f100 0101 	add.w	r1, r0, #1
 800960e:	d012      	beq.n	8009636 <_strtod_l+0x236>
 8009610:	440a      	add	r2, r1
 8009612:	eb00 0c04 	add.w	ip, r0, r4
 8009616:	4621      	mov	r1, r4
 8009618:	270a      	movs	r7, #10
 800961a:	458c      	cmp	ip, r1
 800961c:	d113      	bne.n	8009646 <_strtod_l+0x246>
 800961e:	1821      	adds	r1, r4, r0
 8009620:	2908      	cmp	r1, #8
 8009622:	f104 0401 	add.w	r4, r4, #1
 8009626:	4404      	add	r4, r0
 8009628:	dc19      	bgt.n	800965e <_strtod_l+0x25e>
 800962a:	9b07      	ldr	r3, [sp, #28]
 800962c:	210a      	movs	r1, #10
 800962e:	fb01 e303 	mla	r3, r1, r3, lr
 8009632:	9307      	str	r3, [sp, #28]
 8009634:	2100      	movs	r1, #0
 8009636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009638:	1c58      	adds	r0, r3, #1
 800963a:	901b      	str	r0, [sp, #108]	; 0x6c
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	4608      	mov	r0, r1
 8009640:	e7c9      	b.n	80095d6 <_strtod_l+0x1d6>
 8009642:	9805      	ldr	r0, [sp, #20]
 8009644:	e7d3      	b.n	80095ee <_strtod_l+0x1ee>
 8009646:	2908      	cmp	r1, #8
 8009648:	f101 0101 	add.w	r1, r1, #1
 800964c:	dc03      	bgt.n	8009656 <_strtod_l+0x256>
 800964e:	9b07      	ldr	r3, [sp, #28]
 8009650:	437b      	muls	r3, r7
 8009652:	9307      	str	r3, [sp, #28]
 8009654:	e7e1      	b.n	800961a <_strtod_l+0x21a>
 8009656:	2910      	cmp	r1, #16
 8009658:	bfd8      	it	le
 800965a:	437d      	mulle	r5, r7
 800965c:	e7dd      	b.n	800961a <_strtod_l+0x21a>
 800965e:	2c10      	cmp	r4, #16
 8009660:	bfdc      	itt	le
 8009662:	210a      	movle	r1, #10
 8009664:	fb01 e505 	mlale	r5, r1, r5, lr
 8009668:	e7e4      	b.n	8009634 <_strtod_l+0x234>
 800966a:	2301      	movs	r3, #1
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	e781      	b.n	8009574 <_strtod_l+0x174>
 8009670:	f04f 0c01 	mov.w	ip, #1
 8009674:	1cb3      	adds	r3, r6, #2
 8009676:	931b      	str	r3, [sp, #108]	; 0x6c
 8009678:	78b3      	ldrb	r3, [r6, #2]
 800967a:	e78a      	b.n	8009592 <_strtod_l+0x192>
 800967c:	f04f 0c00 	mov.w	ip, #0
 8009680:	e7f8      	b.n	8009674 <_strtod_l+0x274>
 8009682:	bf00      	nop
 8009684:	0800c1cc 	.word	0x0800c1cc
 8009688:	7ff00000 	.word	0x7ff00000
 800968c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800968e:	1c5f      	adds	r7, r3, #1
 8009690:	971b      	str	r7, [sp, #108]	; 0x6c
 8009692:	785b      	ldrb	r3, [r3, #1]
 8009694:	2b30      	cmp	r3, #48	; 0x30
 8009696:	d0f9      	beq.n	800968c <_strtod_l+0x28c>
 8009698:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800969c:	2f08      	cmp	r7, #8
 800969e:	f63f af7d 	bhi.w	800959c <_strtod_l+0x19c>
 80096a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80096a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096a8:	930a      	str	r3, [sp, #40]	; 0x28
 80096aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80096ac:	1c5f      	adds	r7, r3, #1
 80096ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80096b6:	f1b8 0f09 	cmp.w	r8, #9
 80096ba:	d937      	bls.n	800972c <_strtod_l+0x32c>
 80096bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80096be:	1a7f      	subs	r7, r7, r1
 80096c0:	2f08      	cmp	r7, #8
 80096c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80096c6:	dc37      	bgt.n	8009738 <_strtod_l+0x338>
 80096c8:	45be      	cmp	lr, r7
 80096ca:	bfa8      	it	ge
 80096cc:	46be      	movge	lr, r7
 80096ce:	f1bc 0f00 	cmp.w	ip, #0
 80096d2:	d001      	beq.n	80096d8 <_strtod_l+0x2d8>
 80096d4:	f1ce 0e00 	rsb	lr, lr, #0
 80096d8:	2c00      	cmp	r4, #0
 80096da:	d151      	bne.n	8009780 <_strtod_l+0x380>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f47f aece 	bne.w	800947e <_strtod_l+0x7e>
 80096e2:	9a06      	ldr	r2, [sp, #24]
 80096e4:	2a00      	cmp	r2, #0
 80096e6:	f47f aeca 	bne.w	800947e <_strtod_l+0x7e>
 80096ea:	9a04      	ldr	r2, [sp, #16]
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	f47f aee4 	bne.w	80094ba <_strtod_l+0xba>
 80096f2:	2b4e      	cmp	r3, #78	; 0x4e
 80096f4:	d027      	beq.n	8009746 <_strtod_l+0x346>
 80096f6:	dc21      	bgt.n	800973c <_strtod_l+0x33c>
 80096f8:	2b49      	cmp	r3, #73	; 0x49
 80096fa:	f47f aede 	bne.w	80094ba <_strtod_l+0xba>
 80096fe:	49a0      	ldr	r1, [pc, #640]	; (8009980 <_strtod_l+0x580>)
 8009700:	a81b      	add	r0, sp, #108	; 0x6c
 8009702:	f001 fdd7 	bl	800b2b4 <__match>
 8009706:	2800      	cmp	r0, #0
 8009708:	f43f aed7 	beq.w	80094ba <_strtod_l+0xba>
 800970c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800970e:	499d      	ldr	r1, [pc, #628]	; (8009984 <_strtod_l+0x584>)
 8009710:	3b01      	subs	r3, #1
 8009712:	a81b      	add	r0, sp, #108	; 0x6c
 8009714:	931b      	str	r3, [sp, #108]	; 0x6c
 8009716:	f001 fdcd 	bl	800b2b4 <__match>
 800971a:	b910      	cbnz	r0, 8009722 <_strtod_l+0x322>
 800971c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800971e:	3301      	adds	r3, #1
 8009720:	931b      	str	r3, [sp, #108]	; 0x6c
 8009722:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009998 <_strtod_l+0x598>
 8009726:	f04f 0a00 	mov.w	sl, #0
 800972a:	e6a8      	b.n	800947e <_strtod_l+0x7e>
 800972c:	210a      	movs	r1, #10
 800972e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009732:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009736:	e7b8      	b.n	80096aa <_strtod_l+0x2aa>
 8009738:	46be      	mov	lr, r7
 800973a:	e7c8      	b.n	80096ce <_strtod_l+0x2ce>
 800973c:	2b69      	cmp	r3, #105	; 0x69
 800973e:	d0de      	beq.n	80096fe <_strtod_l+0x2fe>
 8009740:	2b6e      	cmp	r3, #110	; 0x6e
 8009742:	f47f aeba 	bne.w	80094ba <_strtod_l+0xba>
 8009746:	4990      	ldr	r1, [pc, #576]	; (8009988 <_strtod_l+0x588>)
 8009748:	a81b      	add	r0, sp, #108	; 0x6c
 800974a:	f001 fdb3 	bl	800b2b4 <__match>
 800974e:	2800      	cmp	r0, #0
 8009750:	f43f aeb3 	beq.w	80094ba <_strtod_l+0xba>
 8009754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	2b28      	cmp	r3, #40	; 0x28
 800975a:	d10e      	bne.n	800977a <_strtod_l+0x37a>
 800975c:	aa1e      	add	r2, sp, #120	; 0x78
 800975e:	498b      	ldr	r1, [pc, #556]	; (800998c <_strtod_l+0x58c>)
 8009760:	a81b      	add	r0, sp, #108	; 0x6c
 8009762:	f001 fdbb 	bl	800b2dc <__hexnan>
 8009766:	2805      	cmp	r0, #5
 8009768:	d107      	bne.n	800977a <_strtod_l+0x37a>
 800976a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800976c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009770:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009774:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009778:	e681      	b.n	800947e <_strtod_l+0x7e>
 800977a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80099a0 <_strtod_l+0x5a0>
 800977e:	e7d2      	b.n	8009726 <_strtod_l+0x326>
 8009780:	ebae 0302 	sub.w	r3, lr, r2
 8009784:	9306      	str	r3, [sp, #24]
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	9807      	ldr	r0, [sp, #28]
 800978a:	2b00      	cmp	r3, #0
 800978c:	bf08      	it	eq
 800978e:	4623      	moveq	r3, r4
 8009790:	2c10      	cmp	r4, #16
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	46a0      	mov	r8, r4
 8009796:	bfa8      	it	ge
 8009798:	f04f 0810 	movge.w	r8, #16
 800979c:	f7f6 feb2 	bl	8000504 <__aeabi_ui2d>
 80097a0:	2c09      	cmp	r4, #9
 80097a2:	4682      	mov	sl, r0
 80097a4:	468b      	mov	fp, r1
 80097a6:	dc13      	bgt.n	80097d0 <_strtod_l+0x3d0>
 80097a8:	9b06      	ldr	r3, [sp, #24]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f43f ae67 	beq.w	800947e <_strtod_l+0x7e>
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	dd7a      	ble.n	80098aa <_strtod_l+0x4aa>
 80097b4:	2b16      	cmp	r3, #22
 80097b6:	dc61      	bgt.n	800987c <_strtod_l+0x47c>
 80097b8:	4a75      	ldr	r2, [pc, #468]	; (8009990 <_strtod_l+0x590>)
 80097ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80097be:	e9de 0100 	ldrd	r0, r1, [lr]
 80097c2:	4652      	mov	r2, sl
 80097c4:	465b      	mov	r3, fp
 80097c6:	f7f6 ff17 	bl	80005f8 <__aeabi_dmul>
 80097ca:	4682      	mov	sl, r0
 80097cc:	468b      	mov	fp, r1
 80097ce:	e656      	b.n	800947e <_strtod_l+0x7e>
 80097d0:	4b6f      	ldr	r3, [pc, #444]	; (8009990 <_strtod_l+0x590>)
 80097d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80097da:	f7f6 ff0d 	bl	80005f8 <__aeabi_dmul>
 80097de:	4606      	mov	r6, r0
 80097e0:	4628      	mov	r0, r5
 80097e2:	460f      	mov	r7, r1
 80097e4:	f7f6 fe8e 	bl	8000504 <__aeabi_ui2d>
 80097e8:	4602      	mov	r2, r0
 80097ea:	460b      	mov	r3, r1
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f6 fd4c 	bl	800028c <__adddf3>
 80097f4:	2c0f      	cmp	r4, #15
 80097f6:	4682      	mov	sl, r0
 80097f8:	468b      	mov	fp, r1
 80097fa:	ddd5      	ble.n	80097a8 <_strtod_l+0x3a8>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	eba4 0808 	sub.w	r8, r4, r8
 8009802:	4498      	add	r8, r3
 8009804:	f1b8 0f00 	cmp.w	r8, #0
 8009808:	f340 8096 	ble.w	8009938 <_strtod_l+0x538>
 800980c:	f018 030f 	ands.w	r3, r8, #15
 8009810:	d00a      	beq.n	8009828 <_strtod_l+0x428>
 8009812:	495f      	ldr	r1, [pc, #380]	; (8009990 <_strtod_l+0x590>)
 8009814:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009818:	4652      	mov	r2, sl
 800981a:	465b      	mov	r3, fp
 800981c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009820:	f7f6 feea 	bl	80005f8 <__aeabi_dmul>
 8009824:	4682      	mov	sl, r0
 8009826:	468b      	mov	fp, r1
 8009828:	f038 080f 	bics.w	r8, r8, #15
 800982c:	d073      	beq.n	8009916 <_strtod_l+0x516>
 800982e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009832:	dd47      	ble.n	80098c4 <_strtod_l+0x4c4>
 8009834:	2400      	movs	r4, #0
 8009836:	46a0      	mov	r8, r4
 8009838:	9407      	str	r4, [sp, #28]
 800983a:	9405      	str	r4, [sp, #20]
 800983c:	2322      	movs	r3, #34	; 0x22
 800983e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009998 <_strtod_l+0x598>
 8009842:	f8c9 3000 	str.w	r3, [r9]
 8009846:	f04f 0a00 	mov.w	sl, #0
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f43f ae16 	beq.w	800947e <_strtod_l+0x7e>
 8009852:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009854:	4648      	mov	r0, r9
 8009856:	f001 fe33 	bl	800b4c0 <_Bfree>
 800985a:	9905      	ldr	r1, [sp, #20]
 800985c:	4648      	mov	r0, r9
 800985e:	f001 fe2f 	bl	800b4c0 <_Bfree>
 8009862:	4641      	mov	r1, r8
 8009864:	4648      	mov	r0, r9
 8009866:	f001 fe2b 	bl	800b4c0 <_Bfree>
 800986a:	9907      	ldr	r1, [sp, #28]
 800986c:	4648      	mov	r0, r9
 800986e:	f001 fe27 	bl	800b4c0 <_Bfree>
 8009872:	4621      	mov	r1, r4
 8009874:	4648      	mov	r0, r9
 8009876:	f001 fe23 	bl	800b4c0 <_Bfree>
 800987a:	e600      	b.n	800947e <_strtod_l+0x7e>
 800987c:	9a06      	ldr	r2, [sp, #24]
 800987e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009882:	4293      	cmp	r3, r2
 8009884:	dbba      	blt.n	80097fc <_strtod_l+0x3fc>
 8009886:	4d42      	ldr	r5, [pc, #264]	; (8009990 <_strtod_l+0x590>)
 8009888:	f1c4 040f 	rsb	r4, r4, #15
 800988c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009890:	4652      	mov	r2, sl
 8009892:	465b      	mov	r3, fp
 8009894:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009898:	f7f6 feae 	bl	80005f8 <__aeabi_dmul>
 800989c:	9b06      	ldr	r3, [sp, #24]
 800989e:	1b1c      	subs	r4, r3, r4
 80098a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80098a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098a8:	e78d      	b.n	80097c6 <_strtod_l+0x3c6>
 80098aa:	f113 0f16 	cmn.w	r3, #22
 80098ae:	dba5      	blt.n	80097fc <_strtod_l+0x3fc>
 80098b0:	4a37      	ldr	r2, [pc, #220]	; (8009990 <_strtod_l+0x590>)
 80098b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80098b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80098ba:	4650      	mov	r0, sl
 80098bc:	4659      	mov	r1, fp
 80098be:	f7f6 ffc5 	bl	800084c <__aeabi_ddiv>
 80098c2:	e782      	b.n	80097ca <_strtod_l+0x3ca>
 80098c4:	2300      	movs	r3, #0
 80098c6:	4e33      	ldr	r6, [pc, #204]	; (8009994 <_strtod_l+0x594>)
 80098c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80098cc:	4650      	mov	r0, sl
 80098ce:	4659      	mov	r1, fp
 80098d0:	461d      	mov	r5, r3
 80098d2:	f1b8 0f01 	cmp.w	r8, #1
 80098d6:	dc21      	bgt.n	800991c <_strtod_l+0x51c>
 80098d8:	b10b      	cbz	r3, 80098de <_strtod_l+0x4de>
 80098da:	4682      	mov	sl, r0
 80098dc:	468b      	mov	fp, r1
 80098de:	4b2d      	ldr	r3, [pc, #180]	; (8009994 <_strtod_l+0x594>)
 80098e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80098e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80098e8:	4652      	mov	r2, sl
 80098ea:	465b      	mov	r3, fp
 80098ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80098f0:	f7f6 fe82 	bl	80005f8 <__aeabi_dmul>
 80098f4:	4b28      	ldr	r3, [pc, #160]	; (8009998 <_strtod_l+0x598>)
 80098f6:	460a      	mov	r2, r1
 80098f8:	400b      	ands	r3, r1
 80098fa:	4928      	ldr	r1, [pc, #160]	; (800999c <_strtod_l+0x59c>)
 80098fc:	428b      	cmp	r3, r1
 80098fe:	4682      	mov	sl, r0
 8009900:	d898      	bhi.n	8009834 <_strtod_l+0x434>
 8009902:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009906:	428b      	cmp	r3, r1
 8009908:	bf86      	itte	hi
 800990a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80099a4 <_strtod_l+0x5a4>
 800990e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009912:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009916:	2300      	movs	r3, #0
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	e077      	b.n	8009a0c <_strtod_l+0x60c>
 800991c:	f018 0f01 	tst.w	r8, #1
 8009920:	d006      	beq.n	8009930 <_strtod_l+0x530>
 8009922:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	2301      	movs	r3, #1
 8009930:	3501      	adds	r5, #1
 8009932:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009936:	e7cc      	b.n	80098d2 <_strtod_l+0x4d2>
 8009938:	d0ed      	beq.n	8009916 <_strtod_l+0x516>
 800993a:	f1c8 0800 	rsb	r8, r8, #0
 800993e:	f018 020f 	ands.w	r2, r8, #15
 8009942:	d00a      	beq.n	800995a <_strtod_l+0x55a>
 8009944:	4b12      	ldr	r3, [pc, #72]	; (8009990 <_strtod_l+0x590>)
 8009946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800994a:	4650      	mov	r0, sl
 800994c:	4659      	mov	r1, fp
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 ff7b 	bl	800084c <__aeabi_ddiv>
 8009956:	4682      	mov	sl, r0
 8009958:	468b      	mov	fp, r1
 800995a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800995e:	d0da      	beq.n	8009916 <_strtod_l+0x516>
 8009960:	f1b8 0f1f 	cmp.w	r8, #31
 8009964:	dd20      	ble.n	80099a8 <_strtod_l+0x5a8>
 8009966:	2400      	movs	r4, #0
 8009968:	46a0      	mov	r8, r4
 800996a:	9407      	str	r4, [sp, #28]
 800996c:	9405      	str	r4, [sp, #20]
 800996e:	2322      	movs	r3, #34	; 0x22
 8009970:	f04f 0a00 	mov.w	sl, #0
 8009974:	f04f 0b00 	mov.w	fp, #0
 8009978:	f8c9 3000 	str.w	r3, [r9]
 800997c:	e765      	b.n	800984a <_strtod_l+0x44a>
 800997e:	bf00      	nop
 8009980:	0800c195 	.word	0x0800c195
 8009984:	0800c223 	.word	0x0800c223
 8009988:	0800c19d 	.word	0x0800c19d
 800998c:	0800c1e0 	.word	0x0800c1e0
 8009990:	0800c260 	.word	0x0800c260
 8009994:	0800c238 	.word	0x0800c238
 8009998:	7ff00000 	.word	0x7ff00000
 800999c:	7ca00000 	.word	0x7ca00000
 80099a0:	fff80000 	.word	0xfff80000
 80099a4:	7fefffff 	.word	0x7fefffff
 80099a8:	f018 0310 	ands.w	r3, r8, #16
 80099ac:	bf18      	it	ne
 80099ae:	236a      	movne	r3, #106	; 0x6a
 80099b0:	4da0      	ldr	r5, [pc, #640]	; (8009c34 <_strtod_l+0x834>)
 80099b2:	9304      	str	r3, [sp, #16]
 80099b4:	4650      	mov	r0, sl
 80099b6:	4659      	mov	r1, fp
 80099b8:	2300      	movs	r3, #0
 80099ba:	f1b8 0f00 	cmp.w	r8, #0
 80099be:	f300 810a 	bgt.w	8009bd6 <_strtod_l+0x7d6>
 80099c2:	b10b      	cbz	r3, 80099c8 <_strtod_l+0x5c8>
 80099c4:	4682      	mov	sl, r0
 80099c6:	468b      	mov	fp, r1
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	b1bb      	cbz	r3, 80099fc <_strtod_l+0x5fc>
 80099cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80099d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	4659      	mov	r1, fp
 80099d8:	dd10      	ble.n	80099fc <_strtod_l+0x5fc>
 80099da:	2b1f      	cmp	r3, #31
 80099dc:	f340 8107 	ble.w	8009bee <_strtod_l+0x7ee>
 80099e0:	2b34      	cmp	r3, #52	; 0x34
 80099e2:	bfde      	ittt	le
 80099e4:	3b20      	suble	r3, #32
 80099e6:	f04f 32ff 	movle.w	r2, #4294967295
 80099ea:	fa02 f303 	lslle.w	r3, r2, r3
 80099ee:	f04f 0a00 	mov.w	sl, #0
 80099f2:	bfcc      	ite	gt
 80099f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80099f8:	ea03 0b01 	andle.w	fp, r3, r1
 80099fc:	2200      	movs	r2, #0
 80099fe:	2300      	movs	r3, #0
 8009a00:	4650      	mov	r0, sl
 8009a02:	4659      	mov	r1, fp
 8009a04:	f7f7 f860 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a08:	2800      	cmp	r0, #0
 8009a0a:	d1ac      	bne.n	8009966 <_strtod_l+0x566>
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	9a05      	ldr	r2, [sp, #20]
 8009a12:	9908      	ldr	r1, [sp, #32]
 8009a14:	4623      	mov	r3, r4
 8009a16:	4648      	mov	r0, r9
 8009a18:	f001 fda4 	bl	800b564 <__s2b>
 8009a1c:	9007      	str	r0, [sp, #28]
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	f43f af08 	beq.w	8009834 <_strtod_l+0x434>
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	9b06      	ldr	r3, [sp, #24]
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	f1c3 0300 	rsb	r3, r3, #0
 8009a2e:	bfa8      	it	ge
 8009a30:	2300      	movge	r3, #0
 8009a32:	930e      	str	r3, [sp, #56]	; 0x38
 8009a34:	2400      	movs	r4, #0
 8009a36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a3a:	9316      	str	r3, [sp, #88]	; 0x58
 8009a3c:	46a0      	mov	r8, r4
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	4648      	mov	r0, r9
 8009a42:	6859      	ldr	r1, [r3, #4]
 8009a44:	f001 fd08 	bl	800b458 <_Balloc>
 8009a48:	9005      	str	r0, [sp, #20]
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f aef6 	beq.w	800983c <_strtod_l+0x43c>
 8009a50:	9b07      	ldr	r3, [sp, #28]
 8009a52:	691a      	ldr	r2, [r3, #16]
 8009a54:	3202      	adds	r2, #2
 8009a56:	f103 010c 	add.w	r1, r3, #12
 8009a5a:	0092      	lsls	r2, r2, #2
 8009a5c:	300c      	adds	r0, #12
<<<<<<< HEAD
 8009a5e:	f7fe fe39 	bl	80086d4 <memcpy>
=======
 8009a5e:	f7fe fe3b 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8009a62:	aa1e      	add	r2, sp, #120	; 0x78
 8009a64:	a91d      	add	r1, sp, #116	; 0x74
 8009a66:	ec4b ab10 	vmov	d0, sl, fp
 8009a6a:	4648      	mov	r0, r9
 8009a6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009a70:	f002 f834 	bl	800badc <__d2b>
 8009a74:	901c      	str	r0, [sp, #112]	; 0x70
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f aee0 	beq.w	800983c <_strtod_l+0x43c>
 8009a7c:	2101      	movs	r1, #1
 8009a7e:	4648      	mov	r0, r9
 8009a80:	f001 fdfc 	bl	800b67c <__i2b>
 8009a84:	4680      	mov	r8, r0
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f43f aed8 	beq.w	800983c <_strtod_l+0x43c>
 8009a8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009a8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	bfab      	itete	ge
 8009a94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009a96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009a98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009a9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009a9c:	bfac      	ite	ge
 8009a9e:	18f7      	addge	r7, r6, r3
 8009aa0:	1b9d      	sublt	r5, r3, r6
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	1af6      	subs	r6, r6, r3
 8009aa6:	4416      	add	r6, r2
 8009aa8:	4b63      	ldr	r3, [pc, #396]	; (8009c38 <_strtod_l+0x838>)
 8009aaa:	3e01      	subs	r6, #1
 8009aac:	429e      	cmp	r6, r3
 8009aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ab2:	f280 80af 	bge.w	8009c14 <_strtod_l+0x814>
 8009ab6:	1b9b      	subs	r3, r3, r6
 8009ab8:	2b1f      	cmp	r3, #31
 8009aba:	eba2 0203 	sub.w	r2, r2, r3
 8009abe:	f04f 0101 	mov.w	r1, #1
 8009ac2:	f300 809b 	bgt.w	8009bfc <_strtod_l+0x7fc>
 8009ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aca:	930f      	str	r3, [sp, #60]	; 0x3c
 8009acc:	2300      	movs	r3, #0
 8009ace:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad0:	18be      	adds	r6, r7, r2
 8009ad2:	9b04      	ldr	r3, [sp, #16]
 8009ad4:	42b7      	cmp	r7, r6
 8009ad6:	4415      	add	r5, r2
 8009ad8:	441d      	add	r5, r3
 8009ada:	463b      	mov	r3, r7
 8009adc:	bfa8      	it	ge
 8009ade:	4633      	movge	r3, r6
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	bfa8      	it	ge
 8009ae4:	462b      	movge	r3, r5
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	bfc2      	ittt	gt
 8009aea:	1af6      	subgt	r6, r6, r3
 8009aec:	1aed      	subgt	r5, r5, r3
 8009aee:	1aff      	subgt	r7, r7, r3
 8009af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009af2:	b1bb      	cbz	r3, 8009b24 <_strtod_l+0x724>
 8009af4:	4641      	mov	r1, r8
 8009af6:	461a      	mov	r2, r3
 8009af8:	4648      	mov	r0, r9
 8009afa:	f001 fe5f 	bl	800b7bc <__pow5mult>
 8009afe:	4680      	mov	r8, r0
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f43f ae9b 	beq.w	800983c <_strtod_l+0x43c>
 8009b06:	4601      	mov	r1, r0
 8009b08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	f001 fdbf 	bl	800b68e <__multiply>
 8009b10:	900c      	str	r0, [sp, #48]	; 0x30
 8009b12:	2800      	cmp	r0, #0
 8009b14:	f43f ae92 	beq.w	800983c <_strtod_l+0x43c>
 8009b18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	f001 fcd0 	bl	800b4c0 <_Bfree>
 8009b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b22:	931c      	str	r3, [sp, #112]	; 0x70
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	dc7a      	bgt.n	8009c1e <_strtod_l+0x81e>
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	dd08      	ble.n	8009b40 <_strtod_l+0x740>
 8009b2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b30:	9905      	ldr	r1, [sp, #20]
 8009b32:	4648      	mov	r0, r9
 8009b34:	f001 fe42 	bl	800b7bc <__pow5mult>
 8009b38:	9005      	str	r0, [sp, #20]
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	f43f ae7e 	beq.w	800983c <_strtod_l+0x43c>
 8009b40:	2d00      	cmp	r5, #0
 8009b42:	dd08      	ble.n	8009b56 <_strtod_l+0x756>
 8009b44:	462a      	mov	r2, r5
 8009b46:	9905      	ldr	r1, [sp, #20]
 8009b48:	4648      	mov	r0, r9
 8009b4a:	f001 fe85 	bl	800b858 <__lshift>
 8009b4e:	9005      	str	r0, [sp, #20]
 8009b50:	2800      	cmp	r0, #0
 8009b52:	f43f ae73 	beq.w	800983c <_strtod_l+0x43c>
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	dd08      	ble.n	8009b6c <_strtod_l+0x76c>
 8009b5a:	4641      	mov	r1, r8
 8009b5c:	463a      	mov	r2, r7
 8009b5e:	4648      	mov	r0, r9
 8009b60:	f001 fe7a 	bl	800b858 <__lshift>
 8009b64:	4680      	mov	r8, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f ae68 	beq.w	800983c <_strtod_l+0x43c>
 8009b6c:	9a05      	ldr	r2, [sp, #20]
 8009b6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b70:	4648      	mov	r0, r9
 8009b72:	f001 fedf 	bl	800b934 <__mdiff>
 8009b76:	4604      	mov	r4, r0
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f43f ae5f 	beq.w	800983c <_strtod_l+0x43c>
 8009b7e:	68c3      	ldr	r3, [r0, #12]
 8009b80:	930c      	str	r3, [sp, #48]	; 0x30
 8009b82:	2300      	movs	r3, #0
 8009b84:	60c3      	str	r3, [r0, #12]
 8009b86:	4641      	mov	r1, r8
 8009b88:	f001 feba 	bl	800b900 <__mcmp>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	da55      	bge.n	8009c3c <_strtod_l+0x83c>
 8009b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b92:	b9e3      	cbnz	r3, 8009bce <_strtod_l+0x7ce>
 8009b94:	f1ba 0f00 	cmp.w	sl, #0
 8009b98:	d119      	bne.n	8009bce <_strtod_l+0x7ce>
 8009b9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b9e:	b9b3      	cbnz	r3, 8009bce <_strtod_l+0x7ce>
 8009ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ba4:	0d1b      	lsrs	r3, r3, #20
 8009ba6:	051b      	lsls	r3, r3, #20
 8009ba8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009bac:	d90f      	bls.n	8009bce <_strtod_l+0x7ce>
 8009bae:	6963      	ldr	r3, [r4, #20]
 8009bb0:	b913      	cbnz	r3, 8009bb8 <_strtod_l+0x7b8>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	dd0a      	ble.n	8009bce <_strtod_l+0x7ce>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	2201      	movs	r2, #1
 8009bbc:	4648      	mov	r0, r9
 8009bbe:	f001 fe4b 	bl	800b858 <__lshift>
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	f001 fe9b 	bl	800b900 <__mcmp>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	dc67      	bgt.n	8009c9e <_strtod_l+0x89e>
 8009bce:	9b04      	ldr	r3, [sp, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d171      	bne.n	8009cb8 <_strtod_l+0x8b8>
 8009bd4:	e63d      	b.n	8009852 <_strtod_l+0x452>
 8009bd6:	f018 0f01 	tst.w	r8, #1
 8009bda:	d004      	beq.n	8009be6 <_strtod_l+0x7e6>
 8009bdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	2301      	movs	r3, #1
 8009be6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009bea:	3508      	adds	r5, #8
 8009bec:	e6e5      	b.n	80099ba <_strtod_l+0x5ba>
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	ea03 0a0a 	and.w	sl, r3, sl
 8009bfa:	e6ff      	b.n	80099fc <_strtod_l+0x5fc>
 8009bfc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009c00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009c04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009c08:	36e2      	adds	r6, #226	; 0xe2
 8009c0a:	fa01 f306 	lsl.w	r3, r1, r6
 8009c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c10:	910f      	str	r1, [sp, #60]	; 0x3c
 8009c12:	e75d      	b.n	8009ad0 <_strtod_l+0x6d0>
 8009c14:	2300      	movs	r3, #0
 8009c16:	930a      	str	r3, [sp, #40]	; 0x28
 8009c18:	2301      	movs	r3, #1
 8009c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c1c:	e758      	b.n	8009ad0 <_strtod_l+0x6d0>
 8009c1e:	4632      	mov	r2, r6
 8009c20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009c22:	4648      	mov	r0, r9
 8009c24:	f001 fe18 	bl	800b858 <__lshift>
 8009c28:	901c      	str	r0, [sp, #112]	; 0x70
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f47f af7c 	bne.w	8009b28 <_strtod_l+0x728>
 8009c30:	e604      	b.n	800983c <_strtod_l+0x43c>
 8009c32:	bf00      	nop
 8009c34:	0800c1f8 	.word	0x0800c1f8
 8009c38:	fffffc02 	.word	0xfffffc02
 8009c3c:	465d      	mov	r5, fp
 8009c3e:	f040 8086 	bne.w	8009d4e <_strtod_l+0x94e>
 8009c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c48:	b32a      	cbz	r2, 8009c96 <_strtod_l+0x896>
 8009c4a:	4aaf      	ldr	r2, [pc, #700]	; (8009f08 <_strtod_l+0xb08>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d153      	bne.n	8009cf8 <_strtod_l+0x8f8>
 8009c50:	9b04      	ldr	r3, [sp, #16]
 8009c52:	4650      	mov	r0, sl
 8009c54:	b1d3      	cbz	r3, 8009c8c <_strtod_l+0x88c>
 8009c56:	4aad      	ldr	r2, [pc, #692]	; (8009f0c <_strtod_l+0xb0c>)
 8009c58:	402a      	ands	r2, r5
 8009c5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8009c62:	d816      	bhi.n	8009c92 <_strtod_l+0x892>
 8009c64:	0d12      	lsrs	r2, r2, #20
 8009c66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c6e:	4298      	cmp	r0, r3
 8009c70:	d142      	bne.n	8009cf8 <_strtod_l+0x8f8>
 8009c72:	4ba7      	ldr	r3, [pc, #668]	; (8009f10 <_strtod_l+0xb10>)
 8009c74:	429d      	cmp	r5, r3
 8009c76:	d102      	bne.n	8009c7e <_strtod_l+0x87e>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f addf 	beq.w	800983c <_strtod_l+0x43c>
 8009c7e:	4ba3      	ldr	r3, [pc, #652]	; (8009f0c <_strtod_l+0xb0c>)
 8009c80:	402b      	ands	r3, r5
 8009c82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009c86:	f04f 0a00 	mov.w	sl, #0
 8009c8a:	e7a0      	b.n	8009bce <_strtod_l+0x7ce>
 8009c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c90:	e7ed      	b.n	8009c6e <_strtod_l+0x86e>
 8009c92:	460b      	mov	r3, r1
 8009c94:	e7eb      	b.n	8009c6e <_strtod_l+0x86e>
 8009c96:	bb7b      	cbnz	r3, 8009cf8 <_strtod_l+0x8f8>
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d12c      	bne.n	8009cf8 <_strtod_l+0x8f8>
 8009c9e:	9904      	ldr	r1, [sp, #16]
 8009ca0:	4a9a      	ldr	r2, [pc, #616]	; (8009f0c <_strtod_l+0xb0c>)
 8009ca2:	465b      	mov	r3, fp
 8009ca4:	b1f1      	cbz	r1, 8009ce4 <_strtod_l+0x8e4>
 8009ca6:	ea02 010b 	and.w	r1, r2, fp
 8009caa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009cae:	dc19      	bgt.n	8009ce4 <_strtod_l+0x8e4>
 8009cb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009cb4:	f77f ae5b 	ble.w	800996e <_strtod_l+0x56e>
 8009cb8:	4a96      	ldr	r2, [pc, #600]	; (8009f14 <_strtod_l+0xb14>)
 8009cba:	2300      	movs	r3, #0
 8009cbc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009cc0:	4650      	mov	r0, sl
 8009cc2:	4659      	mov	r1, fp
 8009cc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	468b      	mov	fp, r1
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	f47f adbe 	bne.w	8009852 <_strtod_l+0x452>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f47f adbb 	bne.w	8009852 <_strtod_l+0x452>
 8009cdc:	2322      	movs	r3, #34	; 0x22
 8009cde:	f8c9 3000 	str.w	r3, [r9]
 8009ce2:	e5b6      	b.n	8009852 <_strtod_l+0x452>
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009cea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cf2:	f04f 3aff 	mov.w	sl, #4294967295
 8009cf6:	e76a      	b.n	8009bce <_strtod_l+0x7ce>
 8009cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfa:	b193      	cbz	r3, 8009d22 <_strtod_l+0x922>
 8009cfc:	422b      	tst	r3, r5
 8009cfe:	f43f af66 	beq.w	8009bce <_strtod_l+0x7ce>
 8009d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	4650      	mov	r0, sl
 8009d08:	4659      	mov	r1, fp
 8009d0a:	b173      	cbz	r3, 8009d2a <_strtod_l+0x92a>
<<<<<<< HEAD
 8009d0c:	f7ff fb5a 	bl	80093c4 <sulp>
=======
 8009d0c:	f7ff fb5c 	bl	80093c8 <sulp>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d18:	f7f6 fab8 	bl	800028c <__adddf3>
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	e755      	b.n	8009bce <_strtod_l+0x7ce>
 8009d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d24:	ea13 0f0a 	tst.w	r3, sl
 8009d28:	e7e9      	b.n	8009cfe <_strtod_l+0x8fe>
<<<<<<< HEAD
 8009d2a:	f7ff fb4b 	bl	80093c4 <sulp>
=======
 8009d2a:	f7ff fb4d 	bl	80093c8 <sulp>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4682      	mov	sl, r0
 8009d40:	468b      	mov	fp, r1
 8009d42:	f7f6 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f47f ae11 	bne.w	800996e <_strtod_l+0x56e>
 8009d4c:	e73f      	b.n	8009bce <_strtod_l+0x7ce>
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4620      	mov	r0, r4
 8009d52:	f001 ff12 	bl	800bb7a <__ratio>
 8009d56:	ec57 6b10 	vmov	r6, r7, d0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d60:	ee10 0a10 	vmov	r0, s0
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fec3 	bl	8000af0 <__aeabi_dcmple>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d077      	beq.n	8009e5e <_strtod_l+0xa5e>
 8009d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d04a      	beq.n	8009e0a <_strtod_l+0xa0a>
 8009d74:	4b68      	ldr	r3, [pc, #416]	; (8009f18 <_strtod_l+0xb18>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d7c:	4f66      	ldr	r7, [pc, #408]	; (8009f18 <_strtod_l+0xb18>)
 8009d7e:	2600      	movs	r6, #0
 8009d80:	4b62      	ldr	r3, [pc, #392]	; (8009f0c <_strtod_l+0xb0c>)
 8009d82:	402b      	ands	r3, r5
 8009d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d88:	4b64      	ldr	r3, [pc, #400]	; (8009f1c <_strtod_l+0xb1c>)
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	f040 80ce 	bne.w	8009f2c <_strtod_l+0xb2c>
 8009d90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d98:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009d9c:	ec4b ab10 	vmov	d0, sl, fp
 8009da0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009da4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009da8:	f001 fe22 	bl	800b9f0 <__ulp>
 8009dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009db0:	ec53 2b10 	vmov	r2, r3, d0
 8009db4:	f7f6 fc20 	bl	80005f8 <__aeabi_dmul>
 8009db8:	4652      	mov	r2, sl
 8009dba:	465b      	mov	r3, fp
 8009dbc:	f7f6 fa66 	bl	800028c <__adddf3>
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4952      	ldr	r1, [pc, #328]	; (8009f0c <_strtod_l+0xb0c>)
 8009dc4:	4a56      	ldr	r2, [pc, #344]	; (8009f20 <_strtod_l+0xb20>)
 8009dc6:	4019      	ands	r1, r3
 8009dc8:	4291      	cmp	r1, r2
 8009dca:	4682      	mov	sl, r0
 8009dcc:	d95b      	bls.n	8009e86 <_strtod_l+0xa86>
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d103      	bne.n	8009de0 <_strtod_l+0x9e0>
 8009dd8:	9b08      	ldr	r3, [sp, #32]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	f43f ad2e 	beq.w	800983c <_strtod_l+0x43c>
 8009de0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009f10 <_strtod_l+0xb10>
 8009de4:	f04f 3aff 	mov.w	sl, #4294967295
 8009de8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009dea:	4648      	mov	r0, r9
 8009dec:	f001 fb68 	bl	800b4c0 <_Bfree>
 8009df0:	9905      	ldr	r1, [sp, #20]
 8009df2:	4648      	mov	r0, r9
 8009df4:	f001 fb64 	bl	800b4c0 <_Bfree>
 8009df8:	4641      	mov	r1, r8
 8009dfa:	4648      	mov	r0, r9
 8009dfc:	f001 fb60 	bl	800b4c0 <_Bfree>
 8009e00:	4621      	mov	r1, r4
 8009e02:	4648      	mov	r0, r9
 8009e04:	f001 fb5c 	bl	800b4c0 <_Bfree>
 8009e08:	e619      	b.n	8009a3e <_strtod_l+0x63e>
 8009e0a:	f1ba 0f00 	cmp.w	sl, #0
 8009e0e:	d11a      	bne.n	8009e46 <_strtod_l+0xa46>
 8009e10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e14:	b9eb      	cbnz	r3, 8009e52 <_strtod_l+0xa52>
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b3f      	ldr	r3, [pc, #252]	; (8009f18 <_strtod_l+0xb18>)
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	f7f6 fe5d 	bl	8000adc <__aeabi_dcmplt>
 8009e22:	b9c8      	cbnz	r0, 8009e58 <_strtod_l+0xa58>
 8009e24:	4630      	mov	r0, r6
 8009e26:	4639      	mov	r1, r7
 8009e28:	2200      	movs	r2, #0
 8009e2a:	4b3e      	ldr	r3, [pc, #248]	; (8009f24 <_strtod_l+0xb24>)
 8009e2c:	f7f6 fbe4 	bl	80005f8 <__aeabi_dmul>
 8009e30:	4606      	mov	r6, r0
 8009e32:	460f      	mov	r7, r1
 8009e34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009e38:	9618      	str	r6, [sp, #96]	; 0x60
 8009e3a:	9319      	str	r3, [sp, #100]	; 0x64
 8009e3c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009e40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e44:	e79c      	b.n	8009d80 <_strtod_l+0x980>
 8009e46:	f1ba 0f01 	cmp.w	sl, #1
 8009e4a:	d102      	bne.n	8009e52 <_strtod_l+0xa52>
 8009e4c:	2d00      	cmp	r5, #0
 8009e4e:	f43f ad8e 	beq.w	800996e <_strtod_l+0x56e>
 8009e52:	2200      	movs	r2, #0
 8009e54:	4b34      	ldr	r3, [pc, #208]	; (8009f28 <_strtod_l+0xb28>)
 8009e56:	e78f      	b.n	8009d78 <_strtod_l+0x978>
 8009e58:	2600      	movs	r6, #0
 8009e5a:	4f32      	ldr	r7, [pc, #200]	; (8009f24 <_strtod_l+0xb24>)
 8009e5c:	e7ea      	b.n	8009e34 <_strtod_l+0xa34>
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <_strtod_l+0xb24>)
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	2200      	movs	r2, #0
 8009e66:	f7f6 fbc7 	bl	80005f8 <__aeabi_dmul>
 8009e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6c:	4606      	mov	r6, r0
 8009e6e:	460f      	mov	r7, r1
 8009e70:	b933      	cbnz	r3, 8009e80 <_strtod_l+0xa80>
 8009e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e76:	9010      	str	r0, [sp, #64]	; 0x40
 8009e78:	9311      	str	r3, [sp, #68]	; 0x44
 8009e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e7e:	e7df      	b.n	8009e40 <_strtod_l+0xa40>
 8009e80:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009e84:	e7f9      	b.n	8009e7a <_strtod_l+0xa7a>
 8009e86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e8a:	9b04      	ldr	r3, [sp, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1ab      	bne.n	8009de8 <_strtod_l+0x9e8>
 8009e90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e94:	0d1b      	lsrs	r3, r3, #20
 8009e96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e98:	051b      	lsls	r3, r3, #20
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	465d      	mov	r5, fp
 8009e9e:	d1a3      	bne.n	8009de8 <_strtod_l+0x9e8>
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7f6 fe58 	bl	8000b58 <__aeabi_d2iz>
 8009ea8:	f7f6 fb3c 	bl	8000524 <__aeabi_i2d>
 8009eac:	460b      	mov	r3, r1
 8009eae:	4602      	mov	r2, r0
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7f6 f9e8 	bl	8000288 <__aeabi_dsub>
 8009eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eba:	4606      	mov	r6, r0
 8009ebc:	460f      	mov	r7, r1
 8009ebe:	b933      	cbnz	r3, 8009ece <_strtod_l+0xace>
 8009ec0:	f1ba 0f00 	cmp.w	sl, #0
 8009ec4:	d103      	bne.n	8009ece <_strtod_l+0xace>
 8009ec6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009eca:	2d00      	cmp	r5, #0
 8009ecc:	d06d      	beq.n	8009faa <_strtod_l+0xbaa>
 8009ece:	a30a      	add	r3, pc, #40	; (adr r3, 8009ef8 <_strtod_l+0xaf8>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 fe00 	bl	8000adc <__aeabi_dcmplt>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f47f acb8 	bne.w	8009852 <_strtod_l+0x452>
 8009ee2:	a307      	add	r3, pc, #28	; (adr r3, 8009f00 <_strtod_l+0xb00>)
 8009ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee8:	4630      	mov	r0, r6
 8009eea:	4639      	mov	r1, r7
 8009eec:	f7f6 fe14 	bl	8000b18 <__aeabi_dcmpgt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	f43f af79 	beq.w	8009de8 <_strtod_l+0x9e8>
 8009ef6:	e4ac      	b.n	8009852 <_strtod_l+0x452>
 8009ef8:	94a03595 	.word	0x94a03595
 8009efc:	3fdfffff 	.word	0x3fdfffff
 8009f00:	35afe535 	.word	0x35afe535
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	000fffff 	.word	0x000fffff
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	7fefffff 	.word	0x7fefffff
 8009f14:	39500000 	.word	0x39500000
 8009f18:	3ff00000 	.word	0x3ff00000
 8009f1c:	7fe00000 	.word	0x7fe00000
 8009f20:	7c9fffff 	.word	0x7c9fffff
 8009f24:	3fe00000 	.word	0x3fe00000
 8009f28:	bff00000 	.word	0xbff00000
 8009f2c:	9b04      	ldr	r3, [sp, #16]
 8009f2e:	b333      	cbz	r3, 8009f7e <_strtod_l+0xb7e>
 8009f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f36:	d822      	bhi.n	8009f7e <_strtod_l+0xb7e>
 8009f38:	a327      	add	r3, pc, #156	; (adr r3, 8009fd8 <_strtod_l+0xbd8>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	4630      	mov	r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	f7f6 fdd5 	bl	8000af0 <__aeabi_dcmple>
 8009f46:	b1a0      	cbz	r0, 8009f72 <_strtod_l+0xb72>
 8009f48:	4639      	mov	r1, r7
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7f6 fe2c 	bl	8000ba8 <__aeabi_d2uiz>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	bf08      	it	eq
 8009f54:	2001      	moveq	r0, #1
 8009f56:	f7f6 fad5 	bl	8000504 <__aeabi_ui2d>
 8009f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	460f      	mov	r7, r1
 8009f60:	bb03      	cbnz	r3, 8009fa4 <_strtod_l+0xba4>
 8009f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f66:	9012      	str	r0, [sp, #72]	; 0x48
 8009f68:	9313      	str	r3, [sp, #76]	; 0x4c
 8009f6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009f6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009f72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f76:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009f82:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009f86:	f001 fd33 	bl	800b9f0 <__ulp>
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	ec53 2b10 	vmov	r2, r3, d0
 8009f90:	4659      	mov	r1, fp
 8009f92:	f7f6 fb31 	bl	80005f8 <__aeabi_dmul>
 8009f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f9a:	f7f6 f977 	bl	800028c <__adddf3>
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	468b      	mov	fp, r1
 8009fa2:	e772      	b.n	8009e8a <_strtod_l+0xa8a>
 8009fa4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009fa8:	e7df      	b.n	8009f6a <_strtod_l+0xb6a>
 8009faa:	a30d      	add	r3, pc, #52	; (adr r3, 8009fe0 <_strtod_l+0xbe0>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 fd94 	bl	8000adc <__aeabi_dcmplt>
 8009fb4:	e79c      	b.n	8009ef0 <_strtod_l+0xaf0>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	930d      	str	r3, [sp, #52]	; 0x34
 8009fba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fbe:	6013      	str	r3, [r2, #0]
 8009fc0:	f7ff ba61 	b.w	8009486 <_strtod_l+0x86>
 8009fc4:	2b65      	cmp	r3, #101	; 0x65
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	f43f ab4e 	beq.w	800966a <_strtod_l+0x26a>
 8009fce:	2101      	movs	r1, #1
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	9104      	str	r1, [sp, #16]
 8009fd4:	f7ff bacb 	b.w	800956e <_strtod_l+0x16e>
 8009fd8:	ffc00000 	.word	0xffc00000
 8009fdc:	41dfffff 	.word	0x41dfffff
 8009fe0:	94a03595 	.word	0x94a03595
 8009fe4:	3fcfffff 	.word	0x3fcfffff

08009fe8 <_strtod_r>:
 8009fe8:	4b05      	ldr	r3, [pc, #20]	; (800a000 <_strtod_r+0x18>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	b410      	push	{r4}
 8009fee:	6a1b      	ldr	r3, [r3, #32]
 8009ff0:	4c04      	ldr	r4, [pc, #16]	; (800a004 <_strtod_r+0x1c>)
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bf08      	it	eq
 8009ff6:	4623      	moveq	r3, r4
 8009ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ffc:	f7ff ba00 	b.w	8009400 <_strtod_l>
 800a000:	20000040 	.word	0x20000040
 800a004:	200000a4 	.word	0x200000a4

0800a008 <_strtol_l.isra.0>:
 800a008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a00c:	4680      	mov	r8, r0
 800a00e:	4689      	mov	r9, r1
 800a010:	4692      	mov	sl, r2
 800a012:	461e      	mov	r6, r3
 800a014:	460f      	mov	r7, r1
 800a016:	463d      	mov	r5, r7
 800a018:	9808      	ldr	r0, [sp, #32]
 800a01a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a01e:	f001 f9ed 	bl	800b3fc <__locale_ctype_ptr_l>
 800a022:	4420      	add	r0, r4
 800a024:	7843      	ldrb	r3, [r0, #1]
 800a026:	f013 0308 	ands.w	r3, r3, #8
 800a02a:	d132      	bne.n	800a092 <_strtol_l.isra.0+0x8a>
 800a02c:	2c2d      	cmp	r4, #45	; 0x2d
 800a02e:	d132      	bne.n	800a096 <_strtol_l.isra.0+0x8e>
 800a030:	787c      	ldrb	r4, [r7, #1]
 800a032:	1cbd      	adds	r5, r7, #2
 800a034:	2201      	movs	r2, #1
 800a036:	2e00      	cmp	r6, #0
 800a038:	d05d      	beq.n	800a0f6 <_strtol_l.isra.0+0xee>
 800a03a:	2e10      	cmp	r6, #16
 800a03c:	d109      	bne.n	800a052 <_strtol_l.isra.0+0x4a>
 800a03e:	2c30      	cmp	r4, #48	; 0x30
 800a040:	d107      	bne.n	800a052 <_strtol_l.isra.0+0x4a>
 800a042:	782b      	ldrb	r3, [r5, #0]
 800a044:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a048:	2b58      	cmp	r3, #88	; 0x58
 800a04a:	d14f      	bne.n	800a0ec <_strtol_l.isra.0+0xe4>
 800a04c:	786c      	ldrb	r4, [r5, #1]
 800a04e:	2610      	movs	r6, #16
 800a050:	3502      	adds	r5, #2
 800a052:	2a00      	cmp	r2, #0
 800a054:	bf14      	ite	ne
 800a056:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a05a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a05e:	2700      	movs	r7, #0
 800a060:	fbb1 fcf6 	udiv	ip, r1, r6
 800a064:	4638      	mov	r0, r7
 800a066:	fb06 1e1c 	mls	lr, r6, ip, r1
 800a06a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a06e:	2b09      	cmp	r3, #9
 800a070:	d817      	bhi.n	800a0a2 <_strtol_l.isra.0+0x9a>
 800a072:	461c      	mov	r4, r3
 800a074:	42a6      	cmp	r6, r4
 800a076:	dd23      	ble.n	800a0c0 <_strtol_l.isra.0+0xb8>
 800a078:	1c7b      	adds	r3, r7, #1
 800a07a:	d007      	beq.n	800a08c <_strtol_l.isra.0+0x84>
 800a07c:	4584      	cmp	ip, r0
 800a07e:	d31c      	bcc.n	800a0ba <_strtol_l.isra.0+0xb2>
 800a080:	d101      	bne.n	800a086 <_strtol_l.isra.0+0x7e>
 800a082:	45a6      	cmp	lr, r4
 800a084:	db19      	blt.n	800a0ba <_strtol_l.isra.0+0xb2>
 800a086:	fb00 4006 	mla	r0, r0, r6, r4
 800a08a:	2701      	movs	r7, #1
 800a08c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a090:	e7eb      	b.n	800a06a <_strtol_l.isra.0+0x62>
 800a092:	462f      	mov	r7, r5
 800a094:	e7bf      	b.n	800a016 <_strtol_l.isra.0+0xe>
 800a096:	2c2b      	cmp	r4, #43	; 0x2b
 800a098:	bf04      	itt	eq
 800a09a:	1cbd      	addeq	r5, r7, #2
 800a09c:	787c      	ldrbeq	r4, [r7, #1]
 800a09e:	461a      	mov	r2, r3
 800a0a0:	e7c9      	b.n	800a036 <_strtol_l.isra.0+0x2e>
 800a0a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a0a6:	2b19      	cmp	r3, #25
 800a0a8:	d801      	bhi.n	800a0ae <_strtol_l.isra.0+0xa6>
 800a0aa:	3c37      	subs	r4, #55	; 0x37
 800a0ac:	e7e2      	b.n	800a074 <_strtol_l.isra.0+0x6c>
 800a0ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a0b2:	2b19      	cmp	r3, #25
 800a0b4:	d804      	bhi.n	800a0c0 <_strtol_l.isra.0+0xb8>
 800a0b6:	3c57      	subs	r4, #87	; 0x57
 800a0b8:	e7dc      	b.n	800a074 <_strtol_l.isra.0+0x6c>
 800a0ba:	f04f 37ff 	mov.w	r7, #4294967295
 800a0be:	e7e5      	b.n	800a08c <_strtol_l.isra.0+0x84>
 800a0c0:	1c7b      	adds	r3, r7, #1
 800a0c2:	d108      	bne.n	800a0d6 <_strtol_l.isra.0+0xce>
 800a0c4:	2322      	movs	r3, #34	; 0x22
 800a0c6:	f8c8 3000 	str.w	r3, [r8]
 800a0ca:	4608      	mov	r0, r1
 800a0cc:	f1ba 0f00 	cmp.w	sl, #0
 800a0d0:	d107      	bne.n	800a0e2 <_strtol_l.isra.0+0xda>
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	b102      	cbz	r2, 800a0da <_strtol_l.isra.0+0xd2>
 800a0d8:	4240      	negs	r0, r0
 800a0da:	f1ba 0f00 	cmp.w	sl, #0
 800a0de:	d0f8      	beq.n	800a0d2 <_strtol_l.isra.0+0xca>
 800a0e0:	b10f      	cbz	r7, 800a0e6 <_strtol_l.isra.0+0xde>
 800a0e2:	f105 39ff 	add.w	r9, r5, #4294967295
 800a0e6:	f8ca 9000 	str.w	r9, [sl]
 800a0ea:	e7f2      	b.n	800a0d2 <_strtol_l.isra.0+0xca>
 800a0ec:	2430      	movs	r4, #48	; 0x30
 800a0ee:	2e00      	cmp	r6, #0
 800a0f0:	d1af      	bne.n	800a052 <_strtol_l.isra.0+0x4a>
 800a0f2:	2608      	movs	r6, #8
 800a0f4:	e7ad      	b.n	800a052 <_strtol_l.isra.0+0x4a>
 800a0f6:	2c30      	cmp	r4, #48	; 0x30
 800a0f8:	d0a3      	beq.n	800a042 <_strtol_l.isra.0+0x3a>
 800a0fa:	260a      	movs	r6, #10
 800a0fc:	e7a9      	b.n	800a052 <_strtol_l.isra.0+0x4a>
	...

0800a100 <_strtol_r>:
 800a100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a102:	4c06      	ldr	r4, [pc, #24]	; (800a11c <_strtol_r+0x1c>)
 800a104:	4d06      	ldr	r5, [pc, #24]	; (800a120 <_strtol_r+0x20>)
 800a106:	6824      	ldr	r4, [r4, #0]
 800a108:	6a24      	ldr	r4, [r4, #32]
 800a10a:	2c00      	cmp	r4, #0
 800a10c:	bf08      	it	eq
 800a10e:	462c      	moveq	r4, r5
 800a110:	9400      	str	r4, [sp, #0]
 800a112:	f7ff ff79 	bl	800a008 <_strtol_l.isra.0>
 800a116:	b003      	add	sp, #12
 800a118:	bd30      	pop	{r4, r5, pc}
 800a11a:	bf00      	nop
 800a11c:	20000040 	.word	0x20000040
 800a120:	200000a4 	.word	0x200000a4

0800a124 <quorem>:
 800a124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	6903      	ldr	r3, [r0, #16]
 800a12a:	690c      	ldr	r4, [r1, #16]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	4680      	mov	r8, r0
 800a130:	f2c0 8082 	blt.w	800a238 <quorem+0x114>
 800a134:	3c01      	subs	r4, #1
 800a136:	f101 0714 	add.w	r7, r1, #20
 800a13a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a13e:	f100 0614 	add.w	r6, r0, #20
 800a142:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a146:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a14a:	eb06 030c 	add.w	r3, r6, ip
 800a14e:	3501      	adds	r5, #1
 800a150:	eb07 090c 	add.w	r9, r7, ip
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	fbb0 f5f5 	udiv	r5, r0, r5
 800a15a:	b395      	cbz	r5, 800a1c2 <quorem+0x9e>
 800a15c:	f04f 0a00 	mov.w	sl, #0
 800a160:	4638      	mov	r0, r7
 800a162:	46b6      	mov	lr, r6
 800a164:	46d3      	mov	fp, sl
 800a166:	f850 2b04 	ldr.w	r2, [r0], #4
 800a16a:	b293      	uxth	r3, r2
 800a16c:	fb05 a303 	mla	r3, r5, r3, sl
 800a170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a174:	b29b      	uxth	r3, r3
 800a176:	ebab 0303 	sub.w	r3, fp, r3
 800a17a:	0c12      	lsrs	r2, r2, #16
 800a17c:	f8de b000 	ldr.w	fp, [lr]
 800a180:	fb05 a202 	mla	r2, r5, r2, sl
 800a184:	fa13 f38b 	uxtah	r3, r3, fp
 800a188:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a18c:	fa1f fb82 	uxth.w	fp, r2
 800a190:	f8de 2000 	ldr.w	r2, [lr]
 800a194:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1a2:	4581      	cmp	r9, r0
 800a1a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a1a8:	f84e 3b04 	str.w	r3, [lr], #4
 800a1ac:	d2db      	bcs.n	800a166 <quorem+0x42>
 800a1ae:	f856 300c 	ldr.w	r3, [r6, ip]
 800a1b2:	b933      	cbnz	r3, 800a1c2 <quorem+0x9e>
 800a1b4:	9b01      	ldr	r3, [sp, #4]
 800a1b6:	3b04      	subs	r3, #4
 800a1b8:	429e      	cmp	r6, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	d330      	bcc.n	800a220 <quorem+0xfc>
 800a1be:	f8c8 4010 	str.w	r4, [r8, #16]
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	f001 fb9c 	bl	800b900 <__mcmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	db25      	blt.n	800a218 <quorem+0xf4>
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f04f 0c00 	mov.w	ip, #0
 800a1d4:	f857 2b04 	ldr.w	r2, [r7], #4
 800a1d8:	f8d0 e000 	ldr.w	lr, [r0]
 800a1dc:	b293      	uxth	r3, r2
 800a1de:	ebac 0303 	sub.w	r3, ip, r3
 800a1e2:	0c12      	lsrs	r2, r2, #16
 800a1e4:	fa13 f38e 	uxtah	r3, r3, lr
 800a1e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f6:	45b9      	cmp	r9, r7
 800a1f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1fc:	f840 3b04 	str.w	r3, [r0], #4
 800a200:	d2e8      	bcs.n	800a1d4 <quorem+0xb0>
 800a202:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a206:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a20a:	b92a      	cbnz	r2, 800a218 <quorem+0xf4>
 800a20c:	3b04      	subs	r3, #4
 800a20e:	429e      	cmp	r6, r3
 800a210:	461a      	mov	r2, r3
 800a212:	d30b      	bcc.n	800a22c <quorem+0x108>
 800a214:	f8c8 4010 	str.w	r4, [r8, #16]
 800a218:	4628      	mov	r0, r5
 800a21a:	b003      	add	sp, #12
 800a21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	3b04      	subs	r3, #4
 800a224:	2a00      	cmp	r2, #0
 800a226:	d1ca      	bne.n	800a1be <quorem+0x9a>
 800a228:	3c01      	subs	r4, #1
 800a22a:	e7c5      	b.n	800a1b8 <quorem+0x94>
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	3b04      	subs	r3, #4
 800a230:	2a00      	cmp	r2, #0
 800a232:	d1ef      	bne.n	800a214 <quorem+0xf0>
 800a234:	3c01      	subs	r4, #1
 800a236:	e7ea      	b.n	800a20e <quorem+0xea>
 800a238:	2000      	movs	r0, #0
 800a23a:	e7ee      	b.n	800a21a <quorem+0xf6>
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <_dtoa_r>:
 800a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	ec57 6b10 	vmov	r6, r7, d0
 800a248:	b097      	sub	sp, #92	; 0x5c
 800a24a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a24c:	9106      	str	r1, [sp, #24]
 800a24e:	4604      	mov	r4, r0
 800a250:	920b      	str	r2, [sp, #44]	; 0x2c
 800a252:	9312      	str	r3, [sp, #72]	; 0x48
 800a254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a258:	e9cd 6700 	strd	r6, r7, [sp]
 800a25c:	b93d      	cbnz	r5, 800a26e <_dtoa_r+0x2e>
 800a25e:	2010      	movs	r0, #16
 800a260:	f001 f8e0 	bl	800b424 <malloc>
 800a264:	6260      	str	r0, [r4, #36]	; 0x24
 800a266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a26a:	6005      	str	r5, [r0, #0]
 800a26c:	60c5      	str	r5, [r0, #12]
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	6819      	ldr	r1, [r3, #0]
 800a272:	b151      	cbz	r1, 800a28a <_dtoa_r+0x4a>
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	604a      	str	r2, [r1, #4]
 800a278:	2301      	movs	r3, #1
 800a27a:	4093      	lsls	r3, r2
 800a27c:	608b      	str	r3, [r1, #8]
 800a27e:	4620      	mov	r0, r4
 800a280:	f001 f91e 	bl	800b4c0 <_Bfree>
 800a284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	1e3b      	subs	r3, r7, #0
 800a28c:	bfbb      	ittet	lt
 800a28e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a292:	9301      	strlt	r3, [sp, #4]
 800a294:	2300      	movge	r3, #0
 800a296:	2201      	movlt	r2, #1
 800a298:	bfac      	ite	ge
 800a29a:	f8c8 3000 	strge.w	r3, [r8]
 800a29e:	f8c8 2000 	strlt.w	r2, [r8]
 800a2a2:	4baf      	ldr	r3, [pc, #700]	; (800a560 <_dtoa_r+0x320>)
 800a2a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a2a8:	ea33 0308 	bics.w	r3, r3, r8
 800a2ac:	d114      	bne.n	800a2d8 <_dtoa_r+0x98>
 800a2ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	9b00      	ldr	r3, [sp, #0]
 800a2b8:	b923      	cbnz	r3, 800a2c4 <_dtoa_r+0x84>
 800a2ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f000 8542 	beq.w	800ad48 <_dtoa_r+0xb08>
 800a2c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a574 <_dtoa_r+0x334>
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 8544 	beq.w	800ad58 <_dtoa_r+0xb18>
 800a2d0:	f10b 0303 	add.w	r3, fp, #3
 800a2d4:	f000 bd3e 	b.w	800ad54 <_dtoa_r+0xb14>
 800a2d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2e8:	4681      	mov	r9, r0
 800a2ea:	b168      	cbz	r0, 800a308 <_dtoa_r+0xc8>
 800a2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 8524 	beq.w	800ad42 <_dtoa_r+0xb02>
 800a2fa:	4b9a      	ldr	r3, [pc, #616]	; (800a564 <_dtoa_r+0x324>)
 800a2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2fe:	f103 3bff 	add.w	fp, r3, #4294967295
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	f000 bd28 	b.w	800ad58 <_dtoa_r+0xb18>
 800a308:	aa14      	add	r2, sp, #80	; 0x50
 800a30a:	a915      	add	r1, sp, #84	; 0x54
 800a30c:	ec47 6b10 	vmov	d0, r6, r7
 800a310:	4620      	mov	r0, r4
 800a312:	f001 fbe3 	bl	800badc <__d2b>
 800a316:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a31a:	9004      	str	r0, [sp, #16]
 800a31c:	2d00      	cmp	r5, #0
 800a31e:	d07c      	beq.n	800a41a <_dtoa_r+0x1da>
 800a320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a324:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a328:	46b2      	mov	sl, r6
 800a32a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a332:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a336:	2200      	movs	r2, #0
 800a338:	4b8b      	ldr	r3, [pc, #556]	; (800a568 <_dtoa_r+0x328>)
 800a33a:	4650      	mov	r0, sl
 800a33c:	4659      	mov	r1, fp
 800a33e:	f7f5 ffa3 	bl	8000288 <__aeabi_dsub>
 800a342:	a381      	add	r3, pc, #516	; (adr r3, 800a548 <_dtoa_r+0x308>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	a380      	add	r3, pc, #512	; (adr r3, 800a550 <_dtoa_r+0x310>)
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f7f5 ff9b 	bl	800028c <__adddf3>
 800a356:	4606      	mov	r6, r0
 800a358:	4628      	mov	r0, r5
 800a35a:	460f      	mov	r7, r1
 800a35c:	f7f6 f8e2 	bl	8000524 <__aeabi_i2d>
 800a360:	a37d      	add	r3, pc, #500	; (adr r3, 800a558 <_dtoa_r+0x318>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f947 	bl	80005f8 <__aeabi_dmul>
 800a36a:	4602      	mov	r2, r0
 800a36c:	460b      	mov	r3, r1
 800a36e:	4630      	mov	r0, r6
 800a370:	4639      	mov	r1, r7
 800a372:	f7f5 ff8b 	bl	800028c <__adddf3>
 800a376:	4606      	mov	r6, r0
 800a378:	460f      	mov	r7, r1
 800a37a:	f7f6 fbed 	bl	8000b58 <__aeabi_d2iz>
 800a37e:	2200      	movs	r2, #0
 800a380:	4682      	mov	sl, r0
 800a382:	2300      	movs	r3, #0
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 fba8 	bl	8000adc <__aeabi_dcmplt>
 800a38c:	b148      	cbz	r0, 800a3a2 <_dtoa_r+0x162>
 800a38e:	4650      	mov	r0, sl
 800a390:	f7f6 f8c8 	bl	8000524 <__aeabi_i2d>
 800a394:	4632      	mov	r2, r6
 800a396:	463b      	mov	r3, r7
 800a398:	f7f6 fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 800a39c:	b908      	cbnz	r0, 800a3a2 <_dtoa_r+0x162>
 800a39e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3a2:	f1ba 0f16 	cmp.w	sl, #22
 800a3a6:	d859      	bhi.n	800a45c <_dtoa_r+0x21c>
 800a3a8:	4970      	ldr	r1, [pc, #448]	; (800a56c <_dtoa_r+0x32c>)
 800a3aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3b6:	f7f6 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d050      	beq.n	800a460 <_dtoa_r+0x220>
 800a3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3c8:	1b5d      	subs	r5, r3, r5
 800a3ca:	f1b5 0801 	subs.w	r8, r5, #1
 800a3ce:	bf49      	itett	mi
 800a3d0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3d4:	2300      	movpl	r3, #0
 800a3d6:	9305      	strmi	r3, [sp, #20]
 800a3d8:	f04f 0800 	movmi.w	r8, #0
 800a3dc:	bf58      	it	pl
 800a3de:	9305      	strpl	r3, [sp, #20]
 800a3e0:	f1ba 0f00 	cmp.w	sl, #0
 800a3e4:	db3e      	blt.n	800a464 <_dtoa_r+0x224>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	44d0      	add	r8, sl
 800a3ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	9b06      	ldr	r3, [sp, #24]
 800a3f2:	2b09      	cmp	r3, #9
 800a3f4:	f200 8090 	bhi.w	800a518 <_dtoa_r+0x2d8>
 800a3f8:	2b05      	cmp	r3, #5
 800a3fa:	bfc4      	itt	gt
 800a3fc:	3b04      	subgt	r3, #4
 800a3fe:	9306      	strgt	r3, [sp, #24]
 800a400:	9b06      	ldr	r3, [sp, #24]
 800a402:	f1a3 0302 	sub.w	r3, r3, #2
 800a406:	bfcc      	ite	gt
 800a408:	2500      	movgt	r5, #0
 800a40a:	2501      	movle	r5, #1
 800a40c:	2b03      	cmp	r3, #3
 800a40e:	f200 808f 	bhi.w	800a530 <_dtoa_r+0x2f0>
 800a412:	e8df f003 	tbb	[pc, r3]
 800a416:	7f7d      	.short	0x7f7d
 800a418:	7131      	.short	0x7131
 800a41a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a41e:	441d      	add	r5, r3
 800a420:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a424:	2820      	cmp	r0, #32
 800a426:	dd13      	ble.n	800a450 <_dtoa_r+0x210>
 800a428:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a42c:	9b00      	ldr	r3, [sp, #0]
 800a42e:	fa08 f800 	lsl.w	r8, r8, r0
 800a432:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a436:	fa23 f000 	lsr.w	r0, r3, r0
 800a43a:	ea48 0000 	orr.w	r0, r8, r0
 800a43e:	f7f6 f861 	bl	8000504 <__aeabi_ui2d>
 800a442:	2301      	movs	r3, #1
 800a444:	4682      	mov	sl, r0
 800a446:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a44a:	3d01      	subs	r5, #1
 800a44c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a44e:	e772      	b.n	800a336 <_dtoa_r+0xf6>
 800a450:	9b00      	ldr	r3, [sp, #0]
 800a452:	f1c0 0020 	rsb	r0, r0, #32
 800a456:	fa03 f000 	lsl.w	r0, r3, r0
 800a45a:	e7f0      	b.n	800a43e <_dtoa_r+0x1fe>
 800a45c:	2301      	movs	r3, #1
 800a45e:	e7b1      	b.n	800a3c4 <_dtoa_r+0x184>
 800a460:	900f      	str	r0, [sp, #60]	; 0x3c
 800a462:	e7b0      	b.n	800a3c6 <_dtoa_r+0x186>
 800a464:	9b05      	ldr	r3, [sp, #20]
 800a466:	eba3 030a 	sub.w	r3, r3, sl
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	f1ca 0300 	rsb	r3, sl, #0
 800a470:	9307      	str	r3, [sp, #28]
 800a472:	2300      	movs	r3, #0
 800a474:	930e      	str	r3, [sp, #56]	; 0x38
 800a476:	e7bb      	b.n	800a3f0 <_dtoa_r+0x1b0>
 800a478:	2301      	movs	r3, #1
 800a47a:	930a      	str	r3, [sp, #40]	; 0x28
 800a47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a47e:	2b00      	cmp	r3, #0
 800a480:	dd59      	ble.n	800a536 <_dtoa_r+0x2f6>
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	4699      	mov	r9, r3
 800a486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a488:	2200      	movs	r2, #0
 800a48a:	6072      	str	r2, [r6, #4]
 800a48c:	2204      	movs	r2, #4
 800a48e:	f102 0014 	add.w	r0, r2, #20
 800a492:	4298      	cmp	r0, r3
 800a494:	6871      	ldr	r1, [r6, #4]
 800a496:	d953      	bls.n	800a540 <_dtoa_r+0x300>
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 ffdd 	bl	800b458 <_Balloc>
 800a49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4a0:	6030      	str	r0, [r6, #0]
 800a4a2:	f1b9 0f0e 	cmp.w	r9, #14
 800a4a6:	f8d3 b000 	ldr.w	fp, [r3]
 800a4aa:	f200 80e6 	bhi.w	800a67a <_dtoa_r+0x43a>
 800a4ae:	2d00      	cmp	r5, #0
 800a4b0:	f000 80e3 	beq.w	800a67a <_dtoa_r+0x43a>
 800a4b4:	ed9d 7b00 	vldr	d7, [sp]
 800a4b8:	f1ba 0f00 	cmp.w	sl, #0
 800a4bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a4c0:	dd74      	ble.n	800a5ac <_dtoa_r+0x36c>
 800a4c2:	4a2a      	ldr	r2, [pc, #168]	; (800a56c <_dtoa_r+0x32c>)
 800a4c4:	f00a 030f 	and.w	r3, sl, #15
 800a4c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a4cc:	ed93 7b00 	vldr	d7, [r3]
 800a4d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a4d4:	06f0      	lsls	r0, r6, #27
 800a4d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a4da:	d565      	bpl.n	800a5a8 <_dtoa_r+0x368>
 800a4dc:	4b24      	ldr	r3, [pc, #144]	; (800a570 <_dtoa_r+0x330>)
 800a4de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4e6:	f7f6 f9b1 	bl	800084c <__aeabi_ddiv>
 800a4ea:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ee:	f006 060f 	and.w	r6, r6, #15
 800a4f2:	2503      	movs	r5, #3
 800a4f4:	4f1e      	ldr	r7, [pc, #120]	; (800a570 <_dtoa_r+0x330>)
 800a4f6:	e04c      	b.n	800a592 <_dtoa_r+0x352>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4fe:	4453      	add	r3, sl
 800a500:	f103 0901 	add.w	r9, r3, #1
 800a504:	9302      	str	r3, [sp, #8]
 800a506:	464b      	mov	r3, r9
 800a508:	2b01      	cmp	r3, #1
 800a50a:	bfb8      	it	lt
 800a50c:	2301      	movlt	r3, #1
 800a50e:	e7ba      	b.n	800a486 <_dtoa_r+0x246>
 800a510:	2300      	movs	r3, #0
 800a512:	e7b2      	b.n	800a47a <_dtoa_r+0x23a>
 800a514:	2300      	movs	r3, #0
 800a516:	e7f0      	b.n	800a4fa <_dtoa_r+0x2ba>
 800a518:	2501      	movs	r5, #1
 800a51a:	2300      	movs	r3, #0
 800a51c:	9306      	str	r3, [sp, #24]
 800a51e:	950a      	str	r5, [sp, #40]	; 0x28
 800a520:	f04f 33ff 	mov.w	r3, #4294967295
 800a524:	9302      	str	r3, [sp, #8]
 800a526:	4699      	mov	r9, r3
 800a528:	2200      	movs	r2, #0
 800a52a:	2312      	movs	r3, #18
 800a52c:	920b      	str	r2, [sp, #44]	; 0x2c
 800a52e:	e7aa      	b.n	800a486 <_dtoa_r+0x246>
 800a530:	2301      	movs	r3, #1
 800a532:	930a      	str	r3, [sp, #40]	; 0x28
 800a534:	e7f4      	b.n	800a520 <_dtoa_r+0x2e0>
 800a536:	2301      	movs	r3, #1
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	4699      	mov	r9, r3
 800a53c:	461a      	mov	r2, r3
 800a53e:	e7f5      	b.n	800a52c <_dtoa_r+0x2ec>
 800a540:	3101      	adds	r1, #1
 800a542:	6071      	str	r1, [r6, #4]
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	e7a2      	b.n	800a48e <_dtoa_r+0x24e>
 800a548:	636f4361 	.word	0x636f4361
 800a54c:	3fd287a7 	.word	0x3fd287a7
 800a550:	8b60c8b3 	.word	0x8b60c8b3
 800a554:	3fc68a28 	.word	0x3fc68a28
 800a558:	509f79fb 	.word	0x509f79fb
 800a55c:	3fd34413 	.word	0x3fd34413
 800a560:	7ff00000 	.word	0x7ff00000
 800a564:	0800c1a1 	.word	0x0800c1a1
 800a568:	3ff80000 	.word	0x3ff80000
 800a56c:	0800c260 	.word	0x0800c260
 800a570:	0800c238 	.word	0x0800c238
 800a574:	0800c229 	.word	0x0800c229
 800a578:	07f1      	lsls	r1, r6, #31
 800a57a:	d508      	bpl.n	800a58e <_dtoa_r+0x34e>
 800a57c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a580:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a584:	f7f6 f838 	bl	80005f8 <__aeabi_dmul>
 800a588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a58c:	3501      	adds	r5, #1
 800a58e:	1076      	asrs	r6, r6, #1
 800a590:	3708      	adds	r7, #8
 800a592:	2e00      	cmp	r6, #0
 800a594:	d1f0      	bne.n	800a578 <_dtoa_r+0x338>
 800a596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a59a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a59e:	f7f6 f955 	bl	800084c <__aeabi_ddiv>
 800a5a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a5a6:	e01a      	b.n	800a5de <_dtoa_r+0x39e>
 800a5a8:	2502      	movs	r5, #2
 800a5aa:	e7a3      	b.n	800a4f4 <_dtoa_r+0x2b4>
 800a5ac:	f000 80a0 	beq.w	800a6f0 <_dtoa_r+0x4b0>
 800a5b0:	f1ca 0600 	rsb	r6, sl, #0
 800a5b4:	4b9f      	ldr	r3, [pc, #636]	; (800a834 <_dtoa_r+0x5f4>)
 800a5b6:	4fa0      	ldr	r7, [pc, #640]	; (800a838 <_dtoa_r+0x5f8>)
 800a5b8:	f006 020f 	and.w	r2, r6, #15
 800a5bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5c8:	f7f6 f816 	bl	80005f8 <__aeabi_dmul>
 800a5cc:	e9cd 0100 	strd	r0, r1, [sp]
 800a5d0:	1136      	asrs	r6, r6, #4
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2502      	movs	r5, #2
 800a5d6:	2e00      	cmp	r6, #0
 800a5d8:	d17f      	bne.n	800a6da <_dtoa_r+0x49a>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1e1      	bne.n	800a5a2 <_dtoa_r+0x362>
 800a5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 8087 	beq.w	800a6f4 <_dtoa_r+0x4b4>
 800a5e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4b93      	ldr	r3, [pc, #588]	; (800a83c <_dtoa_r+0x5fc>)
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	4639      	mov	r1, r7
 800a5f2:	f7f6 fa73 	bl	8000adc <__aeabi_dcmplt>
 800a5f6:	2800      	cmp	r0, #0
 800a5f8:	d07c      	beq.n	800a6f4 <_dtoa_r+0x4b4>
 800a5fa:	f1b9 0f00 	cmp.w	r9, #0
 800a5fe:	d079      	beq.n	800a6f4 <_dtoa_r+0x4b4>
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	2b00      	cmp	r3, #0
 800a604:	dd35      	ble.n	800a672 <_dtoa_r+0x432>
 800a606:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a60a:	9308      	str	r3, [sp, #32]
 800a60c:	4639      	mov	r1, r7
 800a60e:	2200      	movs	r2, #0
 800a610:	4b8b      	ldr	r3, [pc, #556]	; (800a840 <_dtoa_r+0x600>)
 800a612:	4630      	mov	r0, r6
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	e9cd 0100 	strd	r0, r1, [sp]
 800a61c:	9f02      	ldr	r7, [sp, #8]
 800a61e:	3501      	adds	r5, #1
 800a620:	4628      	mov	r0, r5
 800a622:	f7f5 ff7f 	bl	8000524 <__aeabi_i2d>
 800a626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62a:	f7f5 ffe5 	bl	80005f8 <__aeabi_dmul>
 800a62e:	2200      	movs	r2, #0
 800a630:	4b84      	ldr	r3, [pc, #528]	; (800a844 <_dtoa_r+0x604>)
 800a632:	f7f5 fe2b 	bl	800028c <__adddf3>
 800a636:	4605      	mov	r5, r0
 800a638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a63c:	2f00      	cmp	r7, #0
 800a63e:	d15d      	bne.n	800a6fc <_dtoa_r+0x4bc>
 800a640:	2200      	movs	r2, #0
 800a642:	4b81      	ldr	r3, [pc, #516]	; (800a848 <_dtoa_r+0x608>)
 800a644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a648:	f7f5 fe1e 	bl	8000288 <__aeabi_dsub>
 800a64c:	462a      	mov	r2, r5
 800a64e:	4633      	mov	r3, r6
 800a650:	e9cd 0100 	strd	r0, r1, [sp]
 800a654:	f7f6 fa60 	bl	8000b18 <__aeabi_dcmpgt>
 800a658:	2800      	cmp	r0, #0
 800a65a:	f040 8288 	bne.w	800ab6e <_dtoa_r+0x92e>
 800a65e:	462a      	mov	r2, r5
 800a660:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a668:	f7f6 fa38 	bl	8000adc <__aeabi_dcmplt>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f040 827c 	bne.w	800ab6a <_dtoa_r+0x92a>
 800a672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a676:	e9cd 2300 	strd	r2, r3, [sp]
 800a67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f2c0 8150 	blt.w	800a922 <_dtoa_r+0x6e2>
 800a682:	f1ba 0f0e 	cmp.w	sl, #14
 800a686:	f300 814c 	bgt.w	800a922 <_dtoa_r+0x6e2>
 800a68a:	4b6a      	ldr	r3, [pc, #424]	; (800a834 <_dtoa_r+0x5f4>)
 800a68c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a690:	ed93 7b00 	vldr	d7, [r3]
 800a694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a696:	2b00      	cmp	r3, #0
 800a698:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a69c:	f280 80d8 	bge.w	800a850 <_dtoa_r+0x610>
 800a6a0:	f1b9 0f00 	cmp.w	r9, #0
 800a6a4:	f300 80d4 	bgt.w	800a850 <_dtoa_r+0x610>
 800a6a8:	f040 825e 	bne.w	800ab68 <_dtoa_r+0x928>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4b66      	ldr	r3, [pc, #408]	; (800a848 <_dtoa_r+0x608>)
 800a6b0:	ec51 0b17 	vmov	r0, r1, d7
 800a6b4:	f7f5 ffa0 	bl	80005f8 <__aeabi_dmul>
 800a6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6bc:	f7f6 fa22 	bl	8000b04 <__aeabi_dcmpge>
 800a6c0:	464f      	mov	r7, r9
 800a6c2:	464e      	mov	r6, r9
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f040 8234 	bne.w	800ab32 <_dtoa_r+0x8f2>
 800a6ca:	2331      	movs	r3, #49	; 0x31
 800a6cc:	f10b 0501 	add.w	r5, fp, #1
 800a6d0:	f88b 3000 	strb.w	r3, [fp]
 800a6d4:	f10a 0a01 	add.w	sl, sl, #1
 800a6d8:	e22f      	b.n	800ab3a <_dtoa_r+0x8fa>
 800a6da:	07f2      	lsls	r2, r6, #31
 800a6dc:	d505      	bpl.n	800a6ea <_dtoa_r+0x4aa>
 800a6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	3501      	adds	r5, #1
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	1076      	asrs	r6, r6, #1
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	e772      	b.n	800a5d6 <_dtoa_r+0x396>
 800a6f0:	2502      	movs	r5, #2
 800a6f2:	e774      	b.n	800a5de <_dtoa_r+0x39e>
 800a6f4:	f8cd a020 	str.w	sl, [sp, #32]
 800a6f8:	464f      	mov	r7, r9
 800a6fa:	e791      	b.n	800a620 <_dtoa_r+0x3e0>
 800a6fc:	4b4d      	ldr	r3, [pc, #308]	; (800a834 <_dtoa_r+0x5f4>)
 800a6fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a702:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d047      	beq.n	800a79c <_dtoa_r+0x55c>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	2000      	movs	r0, #0
 800a712:	494e      	ldr	r1, [pc, #312]	; (800a84c <_dtoa_r+0x60c>)
 800a714:	f7f6 f89a 	bl	800084c <__aeabi_ddiv>
 800a718:	462a      	mov	r2, r5
 800a71a:	4633      	mov	r3, r6
 800a71c:	f7f5 fdb4 	bl	8000288 <__aeabi_dsub>
 800a720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a724:	465d      	mov	r5, fp
 800a726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72a:	f7f6 fa15 	bl	8000b58 <__aeabi_d2iz>
 800a72e:	4606      	mov	r6, r0
 800a730:	f7f5 fef8 	bl	8000524 <__aeabi_i2d>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a73c:	f7f5 fda4 	bl	8000288 <__aeabi_dsub>
 800a740:	3630      	adds	r6, #48	; 0x30
 800a742:	f805 6b01 	strb.w	r6, [r5], #1
 800a746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a74a:	e9cd 0100 	strd	r0, r1, [sp]
 800a74e:	f7f6 f9c5 	bl	8000adc <__aeabi_dcmplt>
 800a752:	2800      	cmp	r0, #0
 800a754:	d163      	bne.n	800a81e <_dtoa_r+0x5de>
 800a756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75a:	2000      	movs	r0, #0
 800a75c:	4937      	ldr	r1, [pc, #220]	; (800a83c <_dtoa_r+0x5fc>)
 800a75e:	f7f5 fd93 	bl	8000288 <__aeabi_dsub>
 800a762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a766:	f7f6 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	f040 80b7 	bne.w	800a8de <_dtoa_r+0x69e>
 800a770:	eba5 030b 	sub.w	r3, r5, fp
 800a774:	429f      	cmp	r7, r3
 800a776:	f77f af7c 	ble.w	800a672 <_dtoa_r+0x432>
 800a77a:	2200      	movs	r2, #0
 800a77c:	4b30      	ldr	r3, [pc, #192]	; (800a840 <_dtoa_r+0x600>)
 800a77e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a782:	f7f5 ff39 	bl	80005f8 <__aeabi_dmul>
 800a786:	2200      	movs	r2, #0
 800a788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a78c:	4b2c      	ldr	r3, [pc, #176]	; (800a840 <_dtoa_r+0x600>)
 800a78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a792:	f7f5 ff31 	bl	80005f8 <__aeabi_dmul>
 800a796:	e9cd 0100 	strd	r0, r1, [sp]
 800a79a:	e7c4      	b.n	800a726 <_dtoa_r+0x4e6>
 800a79c:	462a      	mov	r2, r5
 800a79e:	4633      	mov	r3, r6
 800a7a0:	f7f5 ff2a 	bl	80005f8 <__aeabi_dmul>
 800a7a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a7a8:	eb0b 0507 	add.w	r5, fp, r7
 800a7ac:	465e      	mov	r6, fp
 800a7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7b2:	f7f6 f9d1 	bl	8000b58 <__aeabi_d2iz>
 800a7b6:	4607      	mov	r7, r0
 800a7b8:	f7f5 feb4 	bl	8000524 <__aeabi_i2d>
 800a7bc:	3730      	adds	r7, #48	; 0x30
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7c6:	f7f5 fd5f 	bl	8000288 <__aeabi_dsub>
 800a7ca:	f806 7b01 	strb.w	r7, [r6], #1
 800a7ce:	42ae      	cmp	r6, r5
 800a7d0:	e9cd 0100 	strd	r0, r1, [sp]
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	d126      	bne.n	800a828 <_dtoa_r+0x5e8>
 800a7da:	4b1c      	ldr	r3, [pc, #112]	; (800a84c <_dtoa_r+0x60c>)
 800a7dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7e0:	f7f5 fd54 	bl	800028c <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7ec:	f7f6 f994 	bl	8000b18 <__aeabi_dcmpgt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d174      	bne.n	800a8de <_dtoa_r+0x69e>
 800a7f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	4914      	ldr	r1, [pc, #80]	; (800a84c <_dtoa_r+0x60c>)
 800a7fc:	f7f5 fd44 	bl	8000288 <__aeabi_dsub>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a808:	f7f6 f968 	bl	8000adc <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f43f af30 	beq.w	800a672 <_dtoa_r+0x432>
 800a812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a816:	2b30      	cmp	r3, #48	; 0x30
 800a818:	f105 32ff 	add.w	r2, r5, #4294967295
 800a81c:	d002      	beq.n	800a824 <_dtoa_r+0x5e4>
 800a81e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a822:	e04a      	b.n	800a8ba <_dtoa_r+0x67a>
 800a824:	4615      	mov	r5, r2
 800a826:	e7f4      	b.n	800a812 <_dtoa_r+0x5d2>
 800a828:	4b05      	ldr	r3, [pc, #20]	; (800a840 <_dtoa_r+0x600>)
 800a82a:	f7f5 fee5 	bl	80005f8 <__aeabi_dmul>
 800a82e:	e9cd 0100 	strd	r0, r1, [sp]
 800a832:	e7bc      	b.n	800a7ae <_dtoa_r+0x56e>
 800a834:	0800c260 	.word	0x0800c260
 800a838:	0800c238 	.word	0x0800c238
 800a83c:	3ff00000 	.word	0x3ff00000
 800a840:	40240000 	.word	0x40240000
 800a844:	401c0000 	.word	0x401c0000
 800a848:	40140000 	.word	0x40140000
 800a84c:	3fe00000 	.word	0x3fe00000
 800a850:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a854:	465d      	mov	r5, fp
 800a856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a85a:	4630      	mov	r0, r6
 800a85c:	4639      	mov	r1, r7
 800a85e:	f7f5 fff5 	bl	800084c <__aeabi_ddiv>
 800a862:	f7f6 f979 	bl	8000b58 <__aeabi_d2iz>
 800a866:	4680      	mov	r8, r0
 800a868:	f7f5 fe5c 	bl	8000524 <__aeabi_i2d>
 800a86c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a870:	f7f5 fec2 	bl	80005f8 <__aeabi_dmul>
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	f805 6b01 	strb.w	r6, [r5], #1
 800a888:	eba5 060b 	sub.w	r6, r5, fp
 800a88c:	45b1      	cmp	r9, r6
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	d139      	bne.n	800a908 <_dtoa_r+0x6c8>
 800a894:	f7f5 fcfa 	bl	800028c <__adddf3>
 800a898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a89c:	4606      	mov	r6, r0
 800a89e:	460f      	mov	r7, r1
 800a8a0:	f7f6 f93a 	bl	8000b18 <__aeabi_dcmpgt>
 800a8a4:	b9c8      	cbnz	r0, 800a8da <_dtoa_r+0x69a>
 800a8a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	f7f6 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8b2:	b110      	cbz	r0, 800a8ba <_dtoa_r+0x67a>
 800a8b4:	f018 0f01 	tst.w	r8, #1
 800a8b8:	d10f      	bne.n	800a8da <_dtoa_r+0x69a>
 800a8ba:	9904      	ldr	r1, [sp, #16]
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fdff 	bl	800b4c0 <_Bfree>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a8c6:	702b      	strb	r3, [r5, #0]
 800a8c8:	f10a 0301 	add.w	r3, sl, #1
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8241 	beq.w	800ad58 <_dtoa_r+0xb18>
 800a8d6:	601d      	str	r5, [r3, #0]
 800a8d8:	e23e      	b.n	800ad58 <_dtoa_r+0xb18>
 800a8da:	f8cd a020 	str.w	sl, [sp, #32]
 800a8de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a8e2:	2a39      	cmp	r2, #57	; 0x39
 800a8e4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a8e8:	d108      	bne.n	800a8fc <_dtoa_r+0x6bc>
 800a8ea:	459b      	cmp	fp, r3
 800a8ec:	d10a      	bne.n	800a904 <_dtoa_r+0x6c4>
 800a8ee:	9b08      	ldr	r3, [sp, #32]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	9308      	str	r3, [sp, #32]
 800a8f4:	2330      	movs	r3, #48	; 0x30
 800a8f6:	f88b 3000 	strb.w	r3, [fp]
 800a8fa:	465b      	mov	r3, fp
 800a8fc:	781a      	ldrb	r2, [r3, #0]
 800a8fe:	3201      	adds	r2, #1
 800a900:	701a      	strb	r2, [r3, #0]
 800a902:	e78c      	b.n	800a81e <_dtoa_r+0x5de>
 800a904:	461d      	mov	r5, r3
 800a906:	e7ea      	b.n	800a8de <_dtoa_r+0x69e>
 800a908:	2200      	movs	r2, #0
 800a90a:	4b9b      	ldr	r3, [pc, #620]	; (800ab78 <_dtoa_r+0x938>)
 800a90c:	f7f5 fe74 	bl	80005f8 <__aeabi_dmul>
 800a910:	2200      	movs	r2, #0
 800a912:	2300      	movs	r3, #0
 800a914:	4606      	mov	r6, r0
 800a916:	460f      	mov	r7, r1
 800a918:	f7f6 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d09a      	beq.n	800a856 <_dtoa_r+0x616>
 800a920:	e7cb      	b.n	800a8ba <_dtoa_r+0x67a>
 800a922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a924:	2a00      	cmp	r2, #0
 800a926:	f000 808b 	beq.w	800aa40 <_dtoa_r+0x800>
 800a92a:	9a06      	ldr	r2, [sp, #24]
 800a92c:	2a01      	cmp	r2, #1
 800a92e:	dc6e      	bgt.n	800aa0e <_dtoa_r+0x7ce>
 800a930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a932:	2a00      	cmp	r2, #0
 800a934:	d067      	beq.n	800aa06 <_dtoa_r+0x7c6>
 800a936:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a93a:	9f07      	ldr	r7, [sp, #28]
 800a93c:	9d05      	ldr	r5, [sp, #20]
 800a93e:	9a05      	ldr	r2, [sp, #20]
 800a940:	2101      	movs	r1, #1
 800a942:	441a      	add	r2, r3
 800a944:	4620      	mov	r0, r4
 800a946:	9205      	str	r2, [sp, #20]
 800a948:	4498      	add	r8, r3
 800a94a:	f000 fe97 	bl	800b67c <__i2b>
 800a94e:	4606      	mov	r6, r0
 800a950:	2d00      	cmp	r5, #0
 800a952:	dd0c      	ble.n	800a96e <_dtoa_r+0x72e>
 800a954:	f1b8 0f00 	cmp.w	r8, #0
 800a958:	dd09      	ble.n	800a96e <_dtoa_r+0x72e>
 800a95a:	4545      	cmp	r5, r8
 800a95c:	9a05      	ldr	r2, [sp, #20]
 800a95e:	462b      	mov	r3, r5
 800a960:	bfa8      	it	ge
 800a962:	4643      	movge	r3, r8
 800a964:	1ad2      	subs	r2, r2, r3
 800a966:	9205      	str	r2, [sp, #20]
 800a968:	1aed      	subs	r5, r5, r3
 800a96a:	eba8 0803 	sub.w	r8, r8, r3
 800a96e:	9b07      	ldr	r3, [sp, #28]
 800a970:	b1eb      	cbz	r3, 800a9ae <_dtoa_r+0x76e>
 800a972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a974:	2b00      	cmp	r3, #0
 800a976:	d067      	beq.n	800aa48 <_dtoa_r+0x808>
 800a978:	b18f      	cbz	r7, 800a99e <_dtoa_r+0x75e>
 800a97a:	4631      	mov	r1, r6
 800a97c:	463a      	mov	r2, r7
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 ff1c 	bl	800b7bc <__pow5mult>
 800a984:	9a04      	ldr	r2, [sp, #16]
 800a986:	4601      	mov	r1, r0
 800a988:	4606      	mov	r6, r0
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 fe7f 	bl	800b68e <__multiply>
 800a990:	9904      	ldr	r1, [sp, #16]
 800a992:	9008      	str	r0, [sp, #32]
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fd93 	bl	800b4c0 <_Bfree>
 800a99a:	9b08      	ldr	r3, [sp, #32]
 800a99c:	9304      	str	r3, [sp, #16]
 800a99e:	9b07      	ldr	r3, [sp, #28]
 800a9a0:	1bda      	subs	r2, r3, r7
 800a9a2:	d004      	beq.n	800a9ae <_dtoa_r+0x76e>
 800a9a4:	9904      	ldr	r1, [sp, #16]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f000 ff08 	bl	800b7bc <__pow5mult>
 800a9ac:	9004      	str	r0, [sp, #16]
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	f000 fe63 	bl	800b67c <__i2b>
 800a9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9b8:	4607      	mov	r7, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f000 81d0 	beq.w	800ad60 <_dtoa_r+0xb20>
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fef9 	bl	800b7bc <__pow5mult>
 800a9ca:	9b06      	ldr	r3, [sp, #24]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	4607      	mov	r7, r0
 800a9d0:	dc40      	bgt.n	800aa54 <_dtoa_r+0x814>
 800a9d2:	9b00      	ldr	r3, [sp, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d139      	bne.n	800aa4c <_dtoa_r+0x80c>
 800a9d8:	9b01      	ldr	r3, [sp, #4]
 800a9da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d136      	bne.n	800aa50 <_dtoa_r+0x810>
 800a9e2:	9b01      	ldr	r3, [sp, #4]
 800a9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9e8:	0d1b      	lsrs	r3, r3, #20
 800a9ea:	051b      	lsls	r3, r3, #20
 800a9ec:	b12b      	cbz	r3, 800a9fa <_dtoa_r+0x7ba>
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	9305      	str	r3, [sp, #20]
 800a9f4:	f108 0801 	add.w	r8, r8, #1
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	9307      	str	r3, [sp, #28]
 800a9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d12a      	bne.n	800aa58 <_dtoa_r+0x818>
 800aa02:	2001      	movs	r0, #1
 800aa04:	e030      	b.n	800aa68 <_dtoa_r+0x828>
 800aa06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa0c:	e795      	b.n	800a93a <_dtoa_r+0x6fa>
 800aa0e:	9b07      	ldr	r3, [sp, #28]
 800aa10:	f109 37ff 	add.w	r7, r9, #4294967295
 800aa14:	42bb      	cmp	r3, r7
 800aa16:	bfbf      	itttt	lt
 800aa18:	9b07      	ldrlt	r3, [sp, #28]
 800aa1a:	9707      	strlt	r7, [sp, #28]
 800aa1c:	1afa      	sublt	r2, r7, r3
 800aa1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800aa20:	bfbb      	ittet	lt
 800aa22:	189b      	addlt	r3, r3, r2
 800aa24:	930e      	strlt	r3, [sp, #56]	; 0x38
 800aa26:	1bdf      	subge	r7, r3, r7
 800aa28:	2700      	movlt	r7, #0
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	bfb5      	itete	lt
 800aa30:	9b05      	ldrlt	r3, [sp, #20]
 800aa32:	9d05      	ldrge	r5, [sp, #20]
 800aa34:	eba3 0509 	sublt.w	r5, r3, r9
 800aa38:	464b      	movge	r3, r9
 800aa3a:	bfb8      	it	lt
 800aa3c:	2300      	movlt	r3, #0
 800aa3e:	e77e      	b.n	800a93e <_dtoa_r+0x6fe>
 800aa40:	9f07      	ldr	r7, [sp, #28]
 800aa42:	9d05      	ldr	r5, [sp, #20]
 800aa44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800aa46:	e783      	b.n	800a950 <_dtoa_r+0x710>
 800aa48:	9a07      	ldr	r2, [sp, #28]
 800aa4a:	e7ab      	b.n	800a9a4 <_dtoa_r+0x764>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	e7d4      	b.n	800a9fa <_dtoa_r+0x7ba>
 800aa50:	9b00      	ldr	r3, [sp, #0]
 800aa52:	e7d2      	b.n	800a9fa <_dtoa_r+0x7ba>
 800aa54:	2300      	movs	r3, #0
 800aa56:	9307      	str	r3, [sp, #28]
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800aa5e:	6918      	ldr	r0, [r3, #16]
 800aa60:	f000 fdbe 	bl	800b5e0 <__hi0bits>
 800aa64:	f1c0 0020 	rsb	r0, r0, #32
 800aa68:	4440      	add	r0, r8
 800aa6a:	f010 001f 	ands.w	r0, r0, #31
 800aa6e:	d047      	beq.n	800ab00 <_dtoa_r+0x8c0>
 800aa70:	f1c0 0320 	rsb	r3, r0, #32
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	dd3b      	ble.n	800aaf0 <_dtoa_r+0x8b0>
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	f1c0 001c 	rsb	r0, r0, #28
 800aa7e:	4403      	add	r3, r0
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	4405      	add	r5, r0
 800aa84:	4480      	add	r8, r0
 800aa86:	9b05      	ldr	r3, [sp, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	dd05      	ble.n	800aa98 <_dtoa_r+0x858>
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	9904      	ldr	r1, [sp, #16]
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fee1 	bl	800b858 <__lshift>
 800aa96:	9004      	str	r0, [sp, #16]
 800aa98:	f1b8 0f00 	cmp.w	r8, #0
 800aa9c:	dd05      	ble.n	800aaaa <_dtoa_r+0x86a>
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	4642      	mov	r2, r8
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f000 fed8 	bl	800b858 <__lshift>
 800aaa8:	4607      	mov	r7, r0
 800aaaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaac:	b353      	cbz	r3, 800ab04 <_dtoa_r+0x8c4>
 800aaae:	4639      	mov	r1, r7
 800aab0:	9804      	ldr	r0, [sp, #16]
 800aab2:	f000 ff25 	bl	800b900 <__mcmp>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	da24      	bge.n	800ab04 <_dtoa_r+0x8c4>
 800aaba:	2300      	movs	r3, #0
 800aabc:	220a      	movs	r2, #10
 800aabe:	9904      	ldr	r1, [sp, #16]
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 fd14 	bl	800b4ee <__multadd>
 800aac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aac8:	9004      	str	r0, [sp, #16]
 800aaca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aace:	2b00      	cmp	r3, #0
 800aad0:	f000 814d 	beq.w	800ad6e <_dtoa_r+0xb2e>
 800aad4:	2300      	movs	r3, #0
 800aad6:	4631      	mov	r1, r6
 800aad8:	220a      	movs	r2, #10
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fd07 	bl	800b4ee <__multadd>
 800aae0:	9b02      	ldr	r3, [sp, #8]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	4606      	mov	r6, r0
 800aae6:	dc4f      	bgt.n	800ab88 <_dtoa_r+0x948>
 800aae8:	9b06      	ldr	r3, [sp, #24]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	dd4c      	ble.n	800ab88 <_dtoa_r+0x948>
 800aaee:	e011      	b.n	800ab14 <_dtoa_r+0x8d4>
 800aaf0:	d0c9      	beq.n	800aa86 <_dtoa_r+0x846>
 800aaf2:	9a05      	ldr	r2, [sp, #20]
 800aaf4:	331c      	adds	r3, #28
 800aaf6:	441a      	add	r2, r3
 800aaf8:	9205      	str	r2, [sp, #20]
 800aafa:	441d      	add	r5, r3
 800aafc:	4498      	add	r8, r3
 800aafe:	e7c2      	b.n	800aa86 <_dtoa_r+0x846>
 800ab00:	4603      	mov	r3, r0
 800ab02:	e7f6      	b.n	800aaf2 <_dtoa_r+0x8b2>
 800ab04:	f1b9 0f00 	cmp.w	r9, #0
 800ab08:	dc38      	bgt.n	800ab7c <_dtoa_r+0x93c>
 800ab0a:	9b06      	ldr	r3, [sp, #24]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	dd35      	ble.n	800ab7c <_dtoa_r+0x93c>
 800ab10:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab14:	9b02      	ldr	r3, [sp, #8]
 800ab16:	b963      	cbnz	r3, 800ab32 <_dtoa_r+0x8f2>
 800ab18:	4639      	mov	r1, r7
 800ab1a:	2205      	movs	r2, #5
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fce6 	bl	800b4ee <__multadd>
 800ab22:	4601      	mov	r1, r0
 800ab24:	4607      	mov	r7, r0
 800ab26:	9804      	ldr	r0, [sp, #16]
 800ab28:	f000 feea 	bl	800b900 <__mcmp>
 800ab2c:	2800      	cmp	r0, #0
 800ab2e:	f73f adcc 	bgt.w	800a6ca <_dtoa_r+0x48a>
 800ab32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab34:	465d      	mov	r5, fp
 800ab36:	ea6f 0a03 	mvn.w	sl, r3
 800ab3a:	f04f 0900 	mov.w	r9, #0
 800ab3e:	4639      	mov	r1, r7
 800ab40:	4620      	mov	r0, r4
 800ab42:	f000 fcbd 	bl	800b4c0 <_Bfree>
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	f43f aeb7 	beq.w	800a8ba <_dtoa_r+0x67a>
 800ab4c:	f1b9 0f00 	cmp.w	r9, #0
 800ab50:	d005      	beq.n	800ab5e <_dtoa_r+0x91e>
 800ab52:	45b1      	cmp	r9, r6
 800ab54:	d003      	beq.n	800ab5e <_dtoa_r+0x91e>
 800ab56:	4649      	mov	r1, r9
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f000 fcb1 	bl	800b4c0 <_Bfree>
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4620      	mov	r0, r4
 800ab62:	f000 fcad 	bl	800b4c0 <_Bfree>
 800ab66:	e6a8      	b.n	800a8ba <_dtoa_r+0x67a>
 800ab68:	2700      	movs	r7, #0
 800ab6a:	463e      	mov	r6, r7
 800ab6c:	e7e1      	b.n	800ab32 <_dtoa_r+0x8f2>
 800ab6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ab72:	463e      	mov	r6, r7
 800ab74:	e5a9      	b.n	800a6ca <_dtoa_r+0x48a>
 800ab76:	bf00      	nop
 800ab78:	40240000 	.word	0x40240000
 800ab7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	f000 80fa 	beq.w	800ad7c <_dtoa_r+0xb3c>
 800ab88:	2d00      	cmp	r5, #0
 800ab8a:	dd05      	ble.n	800ab98 <_dtoa_r+0x958>
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	462a      	mov	r2, r5
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 fe61 	bl	800b858 <__lshift>
 800ab96:	4606      	mov	r6, r0
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04c      	beq.n	800ac38 <_dtoa_r+0x9f8>
 800ab9e:	6871      	ldr	r1, [r6, #4]
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fc59 	bl	800b458 <_Balloc>
 800aba6:	6932      	ldr	r2, [r6, #16]
 800aba8:	3202      	adds	r2, #2
 800abaa:	4605      	mov	r5, r0
 800abac:	0092      	lsls	r2, r2, #2
 800abae:	f106 010c 	add.w	r1, r6, #12
 800abb2:	300c      	adds	r0, #12
<<<<<<< HEAD
 800abb4:	f7fd fd8e 	bl	80086d4 <memcpy>
=======
 800abb4:	f7fd fd90 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800abb8:	2201      	movs	r2, #1
 800abba:	4629      	mov	r1, r5
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fe4b 	bl	800b858 <__lshift>
 800abc2:	9b00      	ldr	r3, [sp, #0]
 800abc4:	f8cd b014 	str.w	fp, [sp, #20]
 800abc8:	f003 0301 	and.w	r3, r3, #1
 800abcc:	46b1      	mov	r9, r6
 800abce:	9307      	str	r3, [sp, #28]
 800abd0:	4606      	mov	r6, r0
 800abd2:	4639      	mov	r1, r7
 800abd4:	9804      	ldr	r0, [sp, #16]
 800abd6:	f7ff faa5 	bl	800a124 <quorem>
 800abda:	4649      	mov	r1, r9
 800abdc:	4605      	mov	r5, r0
 800abde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800abe2:	9804      	ldr	r0, [sp, #16]
 800abe4:	f000 fe8c 	bl	800b900 <__mcmp>
 800abe8:	4632      	mov	r2, r6
 800abea:	9000      	str	r0, [sp, #0]
 800abec:	4639      	mov	r1, r7
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fea0 	bl	800b934 <__mdiff>
 800abf4:	68c3      	ldr	r3, [r0, #12]
 800abf6:	4602      	mov	r2, r0
 800abf8:	bb03      	cbnz	r3, 800ac3c <_dtoa_r+0x9fc>
 800abfa:	4601      	mov	r1, r0
 800abfc:	9008      	str	r0, [sp, #32]
 800abfe:	9804      	ldr	r0, [sp, #16]
 800ac00:	f000 fe7e 	bl	800b900 <__mcmp>
 800ac04:	9a08      	ldr	r2, [sp, #32]
 800ac06:	4603      	mov	r3, r0
 800ac08:	4611      	mov	r1, r2
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	9308      	str	r3, [sp, #32]
 800ac0e:	f000 fc57 	bl	800b4c0 <_Bfree>
 800ac12:	9b08      	ldr	r3, [sp, #32]
 800ac14:	b9a3      	cbnz	r3, 800ac40 <_dtoa_r+0xa00>
 800ac16:	9a06      	ldr	r2, [sp, #24]
 800ac18:	b992      	cbnz	r2, 800ac40 <_dtoa_r+0xa00>
 800ac1a:	9a07      	ldr	r2, [sp, #28]
 800ac1c:	b982      	cbnz	r2, 800ac40 <_dtoa_r+0xa00>
 800ac1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac22:	d029      	beq.n	800ac78 <_dtoa_r+0xa38>
 800ac24:	9b00      	ldr	r3, [sp, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	dd01      	ble.n	800ac2e <_dtoa_r+0x9ee>
 800ac2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ac2e:	9b05      	ldr	r3, [sp, #20]
 800ac30:	1c5d      	adds	r5, r3, #1
 800ac32:	f883 8000 	strb.w	r8, [r3]
 800ac36:	e782      	b.n	800ab3e <_dtoa_r+0x8fe>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	e7c2      	b.n	800abc2 <_dtoa_r+0x982>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e7e3      	b.n	800ac08 <_dtoa_r+0x9c8>
 800ac40:	9a00      	ldr	r2, [sp, #0]
 800ac42:	2a00      	cmp	r2, #0
 800ac44:	db04      	blt.n	800ac50 <_dtoa_r+0xa10>
 800ac46:	d125      	bne.n	800ac94 <_dtoa_r+0xa54>
 800ac48:	9a06      	ldr	r2, [sp, #24]
 800ac4a:	bb1a      	cbnz	r2, 800ac94 <_dtoa_r+0xa54>
 800ac4c:	9a07      	ldr	r2, [sp, #28]
 800ac4e:	bb0a      	cbnz	r2, 800ac94 <_dtoa_r+0xa54>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	ddec      	ble.n	800ac2e <_dtoa_r+0x9ee>
 800ac54:	2201      	movs	r2, #1
 800ac56:	9904      	ldr	r1, [sp, #16]
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f000 fdfd 	bl	800b858 <__lshift>
 800ac5e:	4639      	mov	r1, r7
 800ac60:	9004      	str	r0, [sp, #16]
 800ac62:	f000 fe4d 	bl	800b900 <__mcmp>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	dc03      	bgt.n	800ac72 <_dtoa_r+0xa32>
 800ac6a:	d1e0      	bne.n	800ac2e <_dtoa_r+0x9ee>
 800ac6c:	f018 0f01 	tst.w	r8, #1
 800ac70:	d0dd      	beq.n	800ac2e <_dtoa_r+0x9ee>
 800ac72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ac76:	d1d8      	bne.n	800ac2a <_dtoa_r+0x9ea>
 800ac78:	9b05      	ldr	r3, [sp, #20]
 800ac7a:	9a05      	ldr	r2, [sp, #20]
 800ac7c:	1c5d      	adds	r5, r3, #1
 800ac7e:	2339      	movs	r3, #57	; 0x39
 800ac80:	7013      	strb	r3, [r2, #0]
 800ac82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac86:	2b39      	cmp	r3, #57	; 0x39
 800ac88:	f105 32ff 	add.w	r2, r5, #4294967295
 800ac8c:	d04f      	beq.n	800ad2e <_dtoa_r+0xaee>
 800ac8e:	3301      	adds	r3, #1
 800ac90:	7013      	strb	r3, [r2, #0]
 800ac92:	e754      	b.n	800ab3e <_dtoa_r+0x8fe>
 800ac94:	9a05      	ldr	r2, [sp, #20]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	f102 0501 	add.w	r5, r2, #1
 800ac9c:	dd06      	ble.n	800acac <_dtoa_r+0xa6c>
 800ac9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aca2:	d0e9      	beq.n	800ac78 <_dtoa_r+0xa38>
 800aca4:	f108 0801 	add.w	r8, r8, #1
 800aca8:	9b05      	ldr	r3, [sp, #20]
 800acaa:	e7c2      	b.n	800ac32 <_dtoa_r+0x9f2>
 800acac:	9a02      	ldr	r2, [sp, #8]
 800acae:	f805 8c01 	strb.w	r8, [r5, #-1]
 800acb2:	eba5 030b 	sub.w	r3, r5, fp
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d021      	beq.n	800acfe <_dtoa_r+0xabe>
 800acba:	2300      	movs	r3, #0
 800acbc:	220a      	movs	r2, #10
 800acbe:	9904      	ldr	r1, [sp, #16]
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 fc14 	bl	800b4ee <__multadd>
 800acc6:	45b1      	cmp	r9, r6
 800acc8:	9004      	str	r0, [sp, #16]
 800acca:	f04f 0300 	mov.w	r3, #0
 800acce:	f04f 020a 	mov.w	r2, #10
 800acd2:	4649      	mov	r1, r9
 800acd4:	4620      	mov	r0, r4
 800acd6:	d105      	bne.n	800ace4 <_dtoa_r+0xaa4>
 800acd8:	f000 fc09 	bl	800b4ee <__multadd>
 800acdc:	4681      	mov	r9, r0
 800acde:	4606      	mov	r6, r0
 800ace0:	9505      	str	r5, [sp, #20]
 800ace2:	e776      	b.n	800abd2 <_dtoa_r+0x992>
 800ace4:	f000 fc03 	bl	800b4ee <__multadd>
 800ace8:	4631      	mov	r1, r6
 800acea:	4681      	mov	r9, r0
 800acec:	2300      	movs	r3, #0
 800acee:	220a      	movs	r2, #10
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fbfc 	bl	800b4ee <__multadd>
 800acf6:	4606      	mov	r6, r0
 800acf8:	e7f2      	b.n	800ace0 <_dtoa_r+0xaa0>
 800acfa:	f04f 0900 	mov.w	r9, #0
 800acfe:	2201      	movs	r2, #1
 800ad00:	9904      	ldr	r1, [sp, #16]
 800ad02:	4620      	mov	r0, r4
 800ad04:	f000 fda8 	bl	800b858 <__lshift>
 800ad08:	4639      	mov	r1, r7
 800ad0a:	9004      	str	r0, [sp, #16]
 800ad0c:	f000 fdf8 	bl	800b900 <__mcmp>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	dcb6      	bgt.n	800ac82 <_dtoa_r+0xa42>
 800ad14:	d102      	bne.n	800ad1c <_dtoa_r+0xadc>
 800ad16:	f018 0f01 	tst.w	r8, #1
 800ad1a:	d1b2      	bne.n	800ac82 <_dtoa_r+0xa42>
 800ad1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad20:	2b30      	cmp	r3, #48	; 0x30
 800ad22:	f105 32ff 	add.w	r2, r5, #4294967295
 800ad26:	f47f af0a 	bne.w	800ab3e <_dtoa_r+0x8fe>
 800ad2a:	4615      	mov	r5, r2
 800ad2c:	e7f6      	b.n	800ad1c <_dtoa_r+0xadc>
 800ad2e:	4593      	cmp	fp, r2
 800ad30:	d105      	bne.n	800ad3e <_dtoa_r+0xafe>
 800ad32:	2331      	movs	r3, #49	; 0x31
 800ad34:	f10a 0a01 	add.w	sl, sl, #1
 800ad38:	f88b 3000 	strb.w	r3, [fp]
 800ad3c:	e6ff      	b.n	800ab3e <_dtoa_r+0x8fe>
 800ad3e:	4615      	mov	r5, r2
 800ad40:	e79f      	b.n	800ac82 <_dtoa_r+0xa42>
 800ad42:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ada8 <_dtoa_r+0xb68>
 800ad46:	e007      	b.n	800ad58 <_dtoa_r+0xb18>
 800ad48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800adac <_dtoa_r+0xb6c>
 800ad4e:	b11b      	cbz	r3, 800ad58 <_dtoa_r+0xb18>
 800ad50:	f10b 0308 	add.w	r3, fp, #8
 800ad54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	4658      	mov	r0, fp
 800ad5a:	b017      	add	sp, #92	; 0x5c
 800ad5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad60:	9b06      	ldr	r3, [sp, #24]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	f77f ae35 	ble.w	800a9d2 <_dtoa_r+0x792>
 800ad68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad6a:	9307      	str	r3, [sp, #28]
 800ad6c:	e649      	b.n	800aa02 <_dtoa_r+0x7c2>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dc03      	bgt.n	800ad7c <_dtoa_r+0xb3c>
 800ad74:	9b06      	ldr	r3, [sp, #24]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	f73f aecc 	bgt.w	800ab14 <_dtoa_r+0x8d4>
 800ad7c:	465d      	mov	r5, fp
 800ad7e:	4639      	mov	r1, r7
 800ad80:	9804      	ldr	r0, [sp, #16]
 800ad82:	f7ff f9cf 	bl	800a124 <quorem>
 800ad86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ad8a:	f805 8b01 	strb.w	r8, [r5], #1
 800ad8e:	9a02      	ldr	r2, [sp, #8]
 800ad90:	eba5 030b 	sub.w	r3, r5, fp
 800ad94:	429a      	cmp	r2, r3
 800ad96:	ddb0      	ble.n	800acfa <_dtoa_r+0xaba>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	220a      	movs	r2, #10
 800ad9c:	9904      	ldr	r1, [sp, #16]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f000 fba5 	bl	800b4ee <__multadd>
 800ada4:	9004      	str	r0, [sp, #16]
 800ada6:	e7ea      	b.n	800ad7e <_dtoa_r+0xb3e>
 800ada8:	0800c1a0 	.word	0x0800c1a0
 800adac:	0800c220 	.word	0x0800c220

0800adb0 <rshift>:
 800adb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb2:	6906      	ldr	r6, [r0, #16]
 800adb4:	114b      	asrs	r3, r1, #5
 800adb6:	429e      	cmp	r6, r3
 800adb8:	f100 0414 	add.w	r4, r0, #20
 800adbc:	dd30      	ble.n	800ae20 <rshift+0x70>
 800adbe:	f011 011f 	ands.w	r1, r1, #31
 800adc2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800adc6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800adca:	d108      	bne.n	800adde <rshift+0x2e>
 800adcc:	4621      	mov	r1, r4
 800adce:	42b2      	cmp	r2, r6
 800add0:	460b      	mov	r3, r1
 800add2:	d211      	bcs.n	800adf8 <rshift+0x48>
 800add4:	f852 3b04 	ldr.w	r3, [r2], #4
 800add8:	f841 3b04 	str.w	r3, [r1], #4
 800addc:	e7f7      	b.n	800adce <rshift+0x1e>
 800adde:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ade2:	f1c1 0c20 	rsb	ip, r1, #32
 800ade6:	40cd      	lsrs	r5, r1
 800ade8:	3204      	adds	r2, #4
 800adea:	4623      	mov	r3, r4
 800adec:	42b2      	cmp	r2, r6
 800adee:	4617      	mov	r7, r2
 800adf0:	d30c      	bcc.n	800ae0c <rshift+0x5c>
 800adf2:	601d      	str	r5, [r3, #0]
 800adf4:	b105      	cbz	r5, 800adf8 <rshift+0x48>
 800adf6:	3304      	adds	r3, #4
 800adf8:	1b1a      	subs	r2, r3, r4
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae00:	bf08      	it	eq
 800ae02:	2300      	moveq	r3, #0
 800ae04:	6102      	str	r2, [r0, #16]
 800ae06:	bf08      	it	eq
 800ae08:	6143      	streq	r3, [r0, #20]
 800ae0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae0c:	683f      	ldr	r7, [r7, #0]
 800ae0e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ae12:	433d      	orrs	r5, r7
 800ae14:	f843 5b04 	str.w	r5, [r3], #4
 800ae18:	f852 5b04 	ldr.w	r5, [r2], #4
 800ae1c:	40cd      	lsrs	r5, r1
 800ae1e:	e7e5      	b.n	800adec <rshift+0x3c>
 800ae20:	4623      	mov	r3, r4
 800ae22:	e7e9      	b.n	800adf8 <rshift+0x48>

0800ae24 <__hexdig_fun>:
 800ae24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ae28:	2b09      	cmp	r3, #9
 800ae2a:	d802      	bhi.n	800ae32 <__hexdig_fun+0xe>
 800ae2c:	3820      	subs	r0, #32
 800ae2e:	b2c0      	uxtb	r0, r0
 800ae30:	4770      	bx	lr
 800ae32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ae36:	2b05      	cmp	r3, #5
 800ae38:	d801      	bhi.n	800ae3e <__hexdig_fun+0x1a>
 800ae3a:	3847      	subs	r0, #71	; 0x47
 800ae3c:	e7f7      	b.n	800ae2e <__hexdig_fun+0xa>
 800ae3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	d801      	bhi.n	800ae4a <__hexdig_fun+0x26>
 800ae46:	3827      	subs	r0, #39	; 0x27
 800ae48:	e7f1      	b.n	800ae2e <__hexdig_fun+0xa>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	4770      	bx	lr

0800ae4e <__gethex>:
 800ae4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae52:	b08b      	sub	sp, #44	; 0x2c
 800ae54:	468a      	mov	sl, r1
 800ae56:	9002      	str	r0, [sp, #8]
 800ae58:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ae5a:	9306      	str	r3, [sp, #24]
 800ae5c:	4690      	mov	r8, r2
 800ae5e:	f000 fad0 	bl	800b402 <__localeconv_l>
 800ae62:	6803      	ldr	r3, [r0, #0]
 800ae64:	9303      	str	r3, [sp, #12]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f5 f9b2 	bl	80001d0 <strlen>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	9001      	str	r0, [sp, #4]
 800ae70:	4403      	add	r3, r0
 800ae72:	f04f 0b00 	mov.w	fp, #0
 800ae76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ae7a:	9307      	str	r3, [sp, #28]
 800ae7c:	f8da 3000 	ldr.w	r3, [sl]
 800ae80:	3302      	adds	r3, #2
 800ae82:	461f      	mov	r7, r3
 800ae84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae88:	2830      	cmp	r0, #48	; 0x30
 800ae8a:	d06c      	beq.n	800af66 <__gethex+0x118>
 800ae8c:	f7ff ffca 	bl	800ae24 <__hexdig_fun>
 800ae90:	4604      	mov	r4, r0
 800ae92:	2800      	cmp	r0, #0
 800ae94:	d16a      	bne.n	800af6c <__gethex+0x11e>
 800ae96:	9a01      	ldr	r2, [sp, #4]
 800ae98:	9903      	ldr	r1, [sp, #12]
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f001 f8f4 	bl	800c088 <strncmp>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d166      	bne.n	800af72 <__gethex+0x124>
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	5cf8      	ldrb	r0, [r7, r3]
 800aea8:	18fe      	adds	r6, r7, r3
 800aeaa:	f7ff ffbb 	bl	800ae24 <__hexdig_fun>
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	d062      	beq.n	800af78 <__gethex+0x12a>
 800aeb2:	4633      	mov	r3, r6
 800aeb4:	7818      	ldrb	r0, [r3, #0]
 800aeb6:	2830      	cmp	r0, #48	; 0x30
 800aeb8:	461f      	mov	r7, r3
 800aeba:	f103 0301 	add.w	r3, r3, #1
 800aebe:	d0f9      	beq.n	800aeb4 <__gethex+0x66>
 800aec0:	f7ff ffb0 	bl	800ae24 <__hexdig_fun>
 800aec4:	fab0 f580 	clz	r5, r0
 800aec8:	096d      	lsrs	r5, r5, #5
 800aeca:	4634      	mov	r4, r6
 800aecc:	f04f 0b01 	mov.w	fp, #1
 800aed0:	463a      	mov	r2, r7
 800aed2:	4616      	mov	r6, r2
 800aed4:	3201      	adds	r2, #1
 800aed6:	7830      	ldrb	r0, [r6, #0]
 800aed8:	f7ff ffa4 	bl	800ae24 <__hexdig_fun>
 800aedc:	2800      	cmp	r0, #0
 800aede:	d1f8      	bne.n	800aed2 <__gethex+0x84>
 800aee0:	9a01      	ldr	r2, [sp, #4]
 800aee2:	9903      	ldr	r1, [sp, #12]
 800aee4:	4630      	mov	r0, r6
 800aee6:	f001 f8cf 	bl	800c088 <strncmp>
 800aeea:	b950      	cbnz	r0, 800af02 <__gethex+0xb4>
 800aeec:	b954      	cbnz	r4, 800af04 <__gethex+0xb6>
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	18f4      	adds	r4, r6, r3
 800aef2:	4622      	mov	r2, r4
 800aef4:	4616      	mov	r6, r2
 800aef6:	3201      	adds	r2, #1
 800aef8:	7830      	ldrb	r0, [r6, #0]
 800aefa:	f7ff ff93 	bl	800ae24 <__hexdig_fun>
 800aefe:	2800      	cmp	r0, #0
 800af00:	d1f8      	bne.n	800aef4 <__gethex+0xa6>
 800af02:	b10c      	cbz	r4, 800af08 <__gethex+0xba>
 800af04:	1ba4      	subs	r4, r4, r6
 800af06:	00a4      	lsls	r4, r4, #2
 800af08:	7833      	ldrb	r3, [r6, #0]
 800af0a:	2b50      	cmp	r3, #80	; 0x50
 800af0c:	d001      	beq.n	800af12 <__gethex+0xc4>
 800af0e:	2b70      	cmp	r3, #112	; 0x70
 800af10:	d140      	bne.n	800af94 <__gethex+0x146>
 800af12:	7873      	ldrb	r3, [r6, #1]
 800af14:	2b2b      	cmp	r3, #43	; 0x2b
 800af16:	d031      	beq.n	800af7c <__gethex+0x12e>
 800af18:	2b2d      	cmp	r3, #45	; 0x2d
 800af1a:	d033      	beq.n	800af84 <__gethex+0x136>
 800af1c:	1c71      	adds	r1, r6, #1
 800af1e:	f04f 0900 	mov.w	r9, #0
 800af22:	7808      	ldrb	r0, [r1, #0]
 800af24:	f7ff ff7e 	bl	800ae24 <__hexdig_fun>
 800af28:	1e43      	subs	r3, r0, #1
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b18      	cmp	r3, #24
 800af2e:	d831      	bhi.n	800af94 <__gethex+0x146>
 800af30:	f1a0 0210 	sub.w	r2, r0, #16
 800af34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800af38:	f7ff ff74 	bl	800ae24 <__hexdig_fun>
 800af3c:	1e43      	subs	r3, r0, #1
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b18      	cmp	r3, #24
 800af42:	d922      	bls.n	800af8a <__gethex+0x13c>
 800af44:	f1b9 0f00 	cmp.w	r9, #0
 800af48:	d000      	beq.n	800af4c <__gethex+0xfe>
 800af4a:	4252      	negs	r2, r2
 800af4c:	4414      	add	r4, r2
 800af4e:	f8ca 1000 	str.w	r1, [sl]
 800af52:	b30d      	cbz	r5, 800af98 <__gethex+0x14a>
 800af54:	f1bb 0f00 	cmp.w	fp, #0
 800af58:	bf0c      	ite	eq
 800af5a:	2706      	moveq	r7, #6
 800af5c:	2700      	movne	r7, #0
 800af5e:	4638      	mov	r0, r7
 800af60:	b00b      	add	sp, #44	; 0x2c
 800af62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af66:	f10b 0b01 	add.w	fp, fp, #1
 800af6a:	e78a      	b.n	800ae82 <__gethex+0x34>
 800af6c:	2500      	movs	r5, #0
 800af6e:	462c      	mov	r4, r5
 800af70:	e7ae      	b.n	800aed0 <__gethex+0x82>
 800af72:	463e      	mov	r6, r7
 800af74:	2501      	movs	r5, #1
 800af76:	e7c7      	b.n	800af08 <__gethex+0xba>
 800af78:	4604      	mov	r4, r0
 800af7a:	e7fb      	b.n	800af74 <__gethex+0x126>
 800af7c:	f04f 0900 	mov.w	r9, #0
 800af80:	1cb1      	adds	r1, r6, #2
 800af82:	e7ce      	b.n	800af22 <__gethex+0xd4>
 800af84:	f04f 0901 	mov.w	r9, #1
 800af88:	e7fa      	b.n	800af80 <__gethex+0x132>
 800af8a:	230a      	movs	r3, #10
 800af8c:	fb03 0202 	mla	r2, r3, r2, r0
 800af90:	3a10      	subs	r2, #16
 800af92:	e7cf      	b.n	800af34 <__gethex+0xe6>
 800af94:	4631      	mov	r1, r6
 800af96:	e7da      	b.n	800af4e <__gethex+0x100>
 800af98:	1bf3      	subs	r3, r6, r7
 800af9a:	3b01      	subs	r3, #1
 800af9c:	4629      	mov	r1, r5
 800af9e:	2b07      	cmp	r3, #7
 800afa0:	dc49      	bgt.n	800b036 <__gethex+0x1e8>
 800afa2:	9802      	ldr	r0, [sp, #8]
 800afa4:	f000 fa58 	bl	800b458 <_Balloc>
 800afa8:	9b01      	ldr	r3, [sp, #4]
 800afaa:	f100 0914 	add.w	r9, r0, #20
 800afae:	f04f 0b00 	mov.w	fp, #0
 800afb2:	f1c3 0301 	rsb	r3, r3, #1
 800afb6:	4605      	mov	r5, r0
 800afb8:	f8cd 9010 	str.w	r9, [sp, #16]
 800afbc:	46da      	mov	sl, fp
 800afbe:	9308      	str	r3, [sp, #32]
 800afc0:	42b7      	cmp	r7, r6
 800afc2:	d33b      	bcc.n	800b03c <__gethex+0x1ee>
 800afc4:	9804      	ldr	r0, [sp, #16]
 800afc6:	f840 ab04 	str.w	sl, [r0], #4
 800afca:	eba0 0009 	sub.w	r0, r0, r9
 800afce:	1080      	asrs	r0, r0, #2
 800afd0:	6128      	str	r0, [r5, #16]
 800afd2:	0147      	lsls	r7, r0, #5
 800afd4:	4650      	mov	r0, sl
 800afd6:	f000 fb03 	bl	800b5e0 <__hi0bits>
 800afda:	f8d8 6000 	ldr.w	r6, [r8]
 800afde:	1a3f      	subs	r7, r7, r0
 800afe0:	42b7      	cmp	r7, r6
 800afe2:	dd64      	ble.n	800b0ae <__gethex+0x260>
 800afe4:	1bbf      	subs	r7, r7, r6
 800afe6:	4639      	mov	r1, r7
 800afe8:	4628      	mov	r0, r5
 800afea:	f000 fe13 	bl	800bc14 <__any_on>
 800afee:	4682      	mov	sl, r0
 800aff0:	b178      	cbz	r0, 800b012 <__gethex+0x1c4>
 800aff2:	1e7b      	subs	r3, r7, #1
 800aff4:	1159      	asrs	r1, r3, #5
 800aff6:	f003 021f 	and.w	r2, r3, #31
 800affa:	f04f 0a01 	mov.w	sl, #1
 800affe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b002:	fa0a f202 	lsl.w	r2, sl, r2
 800b006:	420a      	tst	r2, r1
 800b008:	d003      	beq.n	800b012 <__gethex+0x1c4>
 800b00a:	4553      	cmp	r3, sl
 800b00c:	dc46      	bgt.n	800b09c <__gethex+0x24e>
 800b00e:	f04f 0a02 	mov.w	sl, #2
 800b012:	4639      	mov	r1, r7
 800b014:	4628      	mov	r0, r5
 800b016:	f7ff fecb 	bl	800adb0 <rshift>
 800b01a:	443c      	add	r4, r7
 800b01c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b020:	42a3      	cmp	r3, r4
 800b022:	da52      	bge.n	800b0ca <__gethex+0x27c>
 800b024:	4629      	mov	r1, r5
 800b026:	9802      	ldr	r0, [sp, #8]
 800b028:	f000 fa4a 	bl	800b4c0 <_Bfree>
 800b02c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b02e:	2300      	movs	r3, #0
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	27a3      	movs	r7, #163	; 0xa3
 800b034:	e793      	b.n	800af5e <__gethex+0x110>
 800b036:	3101      	adds	r1, #1
 800b038:	105b      	asrs	r3, r3, #1
 800b03a:	e7b0      	b.n	800af9e <__gethex+0x150>
 800b03c:	1e73      	subs	r3, r6, #1
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	9a07      	ldr	r2, [sp, #28]
 800b042:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b046:	4293      	cmp	r3, r2
 800b048:	d018      	beq.n	800b07c <__gethex+0x22e>
 800b04a:	f1bb 0f20 	cmp.w	fp, #32
 800b04e:	d107      	bne.n	800b060 <__gethex+0x212>
 800b050:	9b04      	ldr	r3, [sp, #16]
 800b052:	f8c3 a000 	str.w	sl, [r3]
 800b056:	3304      	adds	r3, #4
 800b058:	f04f 0a00 	mov.w	sl, #0
 800b05c:	9304      	str	r3, [sp, #16]
 800b05e:	46d3      	mov	fp, sl
 800b060:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b064:	f7ff fede 	bl	800ae24 <__hexdig_fun>
 800b068:	f000 000f 	and.w	r0, r0, #15
 800b06c:	fa00 f00b 	lsl.w	r0, r0, fp
 800b070:	ea4a 0a00 	orr.w	sl, sl, r0
 800b074:	f10b 0b04 	add.w	fp, fp, #4
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	e00d      	b.n	800b098 <__gethex+0x24a>
 800b07c:	9b05      	ldr	r3, [sp, #20]
 800b07e:	9a08      	ldr	r2, [sp, #32]
 800b080:	4413      	add	r3, r2
 800b082:	42bb      	cmp	r3, r7
 800b084:	d3e1      	bcc.n	800b04a <__gethex+0x1fc>
 800b086:	4618      	mov	r0, r3
 800b088:	9a01      	ldr	r2, [sp, #4]
 800b08a:	9903      	ldr	r1, [sp, #12]
 800b08c:	9309      	str	r3, [sp, #36]	; 0x24
 800b08e:	f000 fffb 	bl	800c088 <strncmp>
 800b092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b094:	2800      	cmp	r0, #0
 800b096:	d1d8      	bne.n	800b04a <__gethex+0x1fc>
 800b098:	461e      	mov	r6, r3
 800b09a:	e791      	b.n	800afc0 <__gethex+0x172>
 800b09c:	1eb9      	subs	r1, r7, #2
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f000 fdb8 	bl	800bc14 <__any_on>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d0b2      	beq.n	800b00e <__gethex+0x1c0>
 800b0a8:	f04f 0a03 	mov.w	sl, #3
 800b0ac:	e7b1      	b.n	800b012 <__gethex+0x1c4>
 800b0ae:	da09      	bge.n	800b0c4 <__gethex+0x276>
 800b0b0:	1bf7      	subs	r7, r6, r7
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	463a      	mov	r2, r7
 800b0b6:	9802      	ldr	r0, [sp, #8]
 800b0b8:	f000 fbce 	bl	800b858 <__lshift>
 800b0bc:	1be4      	subs	r4, r4, r7
 800b0be:	4605      	mov	r5, r0
 800b0c0:	f100 0914 	add.w	r9, r0, #20
 800b0c4:	f04f 0a00 	mov.w	sl, #0
 800b0c8:	e7a8      	b.n	800b01c <__gethex+0x1ce>
 800b0ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b0ce:	42a0      	cmp	r0, r4
 800b0d0:	dd6a      	ble.n	800b1a8 <__gethex+0x35a>
 800b0d2:	1b04      	subs	r4, r0, r4
 800b0d4:	42a6      	cmp	r6, r4
 800b0d6:	dc2e      	bgt.n	800b136 <__gethex+0x2e8>
 800b0d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d022      	beq.n	800b126 <__gethex+0x2d8>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d024      	beq.n	800b12e <__gethex+0x2e0>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d115      	bne.n	800b114 <__gethex+0x2c6>
 800b0e8:	42a6      	cmp	r6, r4
 800b0ea:	d113      	bne.n	800b114 <__gethex+0x2c6>
 800b0ec:	2e01      	cmp	r6, #1
 800b0ee:	dc0b      	bgt.n	800b108 <__gethex+0x2ba>
 800b0f0:	9a06      	ldr	r2, [sp, #24]
 800b0f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	612b      	str	r3, [r5, #16]
 800b0fc:	f8c9 3000 	str.w	r3, [r9]
 800b100:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b102:	2762      	movs	r7, #98	; 0x62
 800b104:	601d      	str	r5, [r3, #0]
 800b106:	e72a      	b.n	800af5e <__gethex+0x110>
 800b108:	1e71      	subs	r1, r6, #1
 800b10a:	4628      	mov	r0, r5
 800b10c:	f000 fd82 	bl	800bc14 <__any_on>
 800b110:	2800      	cmp	r0, #0
 800b112:	d1ed      	bne.n	800b0f0 <__gethex+0x2a2>
 800b114:	4629      	mov	r1, r5
 800b116:	9802      	ldr	r0, [sp, #8]
 800b118:	f000 f9d2 	bl	800b4c0 <_Bfree>
 800b11c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b11e:	2300      	movs	r3, #0
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	2750      	movs	r7, #80	; 0x50
 800b124:	e71b      	b.n	800af5e <__gethex+0x110>
 800b126:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0e1      	beq.n	800b0f0 <__gethex+0x2a2>
 800b12c:	e7f2      	b.n	800b114 <__gethex+0x2c6>
 800b12e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1dd      	bne.n	800b0f0 <__gethex+0x2a2>
 800b134:	e7ee      	b.n	800b114 <__gethex+0x2c6>
 800b136:	1e67      	subs	r7, r4, #1
 800b138:	f1ba 0f00 	cmp.w	sl, #0
 800b13c:	d131      	bne.n	800b1a2 <__gethex+0x354>
 800b13e:	b127      	cbz	r7, 800b14a <__gethex+0x2fc>
 800b140:	4639      	mov	r1, r7
 800b142:	4628      	mov	r0, r5
 800b144:	f000 fd66 	bl	800bc14 <__any_on>
 800b148:	4682      	mov	sl, r0
 800b14a:	117a      	asrs	r2, r7, #5
 800b14c:	2301      	movs	r3, #1
 800b14e:	f007 071f 	and.w	r7, r7, #31
 800b152:	fa03 f707 	lsl.w	r7, r3, r7
 800b156:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b15a:	4621      	mov	r1, r4
 800b15c:	421f      	tst	r7, r3
 800b15e:	4628      	mov	r0, r5
 800b160:	bf18      	it	ne
 800b162:	f04a 0a02 	orrne.w	sl, sl, #2
 800b166:	1b36      	subs	r6, r6, r4
 800b168:	f7ff fe22 	bl	800adb0 <rshift>
 800b16c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b170:	2702      	movs	r7, #2
 800b172:	f1ba 0f00 	cmp.w	sl, #0
 800b176:	d048      	beq.n	800b20a <__gethex+0x3bc>
 800b178:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d015      	beq.n	800b1ac <__gethex+0x35e>
 800b180:	2b03      	cmp	r3, #3
 800b182:	d017      	beq.n	800b1b4 <__gethex+0x366>
 800b184:	2b01      	cmp	r3, #1
 800b186:	d109      	bne.n	800b19c <__gethex+0x34e>
 800b188:	f01a 0f02 	tst.w	sl, #2
 800b18c:	d006      	beq.n	800b19c <__gethex+0x34e>
 800b18e:	f8d9 3000 	ldr.w	r3, [r9]
 800b192:	ea4a 0a03 	orr.w	sl, sl, r3
 800b196:	f01a 0f01 	tst.w	sl, #1
 800b19a:	d10e      	bne.n	800b1ba <__gethex+0x36c>
 800b19c:	f047 0710 	orr.w	r7, r7, #16
 800b1a0:	e033      	b.n	800b20a <__gethex+0x3bc>
 800b1a2:	f04f 0a01 	mov.w	sl, #1
 800b1a6:	e7d0      	b.n	800b14a <__gethex+0x2fc>
 800b1a8:	2701      	movs	r7, #1
 800b1aa:	e7e2      	b.n	800b172 <__gethex+0x324>
 800b1ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ae:	f1c3 0301 	rsb	r3, r3, #1
 800b1b2:	9315      	str	r3, [sp, #84]	; 0x54
 800b1b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d0f0      	beq.n	800b19c <__gethex+0x34e>
 800b1ba:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b1be:	f105 0314 	add.w	r3, r5, #20
 800b1c2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b1c6:	eb03 010a 	add.w	r1, r3, sl
 800b1ca:	f04f 0c00 	mov.w	ip, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b1d8:	d01c      	beq.n	800b214 <__gethex+0x3c6>
 800b1da:	3201      	adds	r2, #1
 800b1dc:	6002      	str	r2, [r0, #0]
 800b1de:	2f02      	cmp	r7, #2
 800b1e0:	f105 0314 	add.w	r3, r5, #20
 800b1e4:	d138      	bne.n	800b258 <__gethex+0x40a>
 800b1e6:	f8d8 2000 	ldr.w	r2, [r8]
 800b1ea:	3a01      	subs	r2, #1
 800b1ec:	42b2      	cmp	r2, r6
 800b1ee:	d10a      	bne.n	800b206 <__gethex+0x3b8>
 800b1f0:	1171      	asrs	r1, r6, #5
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f006 061f 	and.w	r6, r6, #31
 800b1f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b1fc:	fa02 f606 	lsl.w	r6, r2, r6
 800b200:	421e      	tst	r6, r3
 800b202:	bf18      	it	ne
 800b204:	4617      	movne	r7, r2
 800b206:	f047 0720 	orr.w	r7, r7, #32
 800b20a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b20c:	601d      	str	r5, [r3, #0]
 800b20e:	9b06      	ldr	r3, [sp, #24]
 800b210:	601c      	str	r4, [r3, #0]
 800b212:	e6a4      	b.n	800af5e <__gethex+0x110>
 800b214:	4299      	cmp	r1, r3
 800b216:	f843 cc04 	str.w	ip, [r3, #-4]
 800b21a:	d8d8      	bhi.n	800b1ce <__gethex+0x380>
 800b21c:	68ab      	ldr	r3, [r5, #8]
 800b21e:	4599      	cmp	r9, r3
 800b220:	db12      	blt.n	800b248 <__gethex+0x3fa>
 800b222:	6869      	ldr	r1, [r5, #4]
 800b224:	9802      	ldr	r0, [sp, #8]
 800b226:	3101      	adds	r1, #1
 800b228:	f000 f916 	bl	800b458 <_Balloc>
 800b22c:	692a      	ldr	r2, [r5, #16]
 800b22e:	3202      	adds	r2, #2
 800b230:	f105 010c 	add.w	r1, r5, #12
 800b234:	4683      	mov	fp, r0
 800b236:	0092      	lsls	r2, r2, #2
 800b238:	300c      	adds	r0, #12
<<<<<<< HEAD
 800b23a:	f7fd fa4b 	bl	80086d4 <memcpy>
=======
 800b23a:	f7fd fa4d 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800b23e:	4629      	mov	r1, r5
 800b240:	9802      	ldr	r0, [sp, #8]
 800b242:	f000 f93d 	bl	800b4c0 <_Bfree>
 800b246:	465d      	mov	r5, fp
 800b248:	692b      	ldr	r3, [r5, #16]
 800b24a:	1c5a      	adds	r2, r3, #1
 800b24c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b250:	612a      	str	r2, [r5, #16]
 800b252:	2201      	movs	r2, #1
 800b254:	615a      	str	r2, [r3, #20]
 800b256:	e7c2      	b.n	800b1de <__gethex+0x390>
 800b258:	692a      	ldr	r2, [r5, #16]
 800b25a:	454a      	cmp	r2, r9
 800b25c:	dd0b      	ble.n	800b276 <__gethex+0x428>
 800b25e:	2101      	movs	r1, #1
 800b260:	4628      	mov	r0, r5
 800b262:	f7ff fda5 	bl	800adb0 <rshift>
 800b266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b26a:	3401      	adds	r4, #1
 800b26c:	42a3      	cmp	r3, r4
 800b26e:	f6ff aed9 	blt.w	800b024 <__gethex+0x1d6>
 800b272:	2701      	movs	r7, #1
 800b274:	e7c7      	b.n	800b206 <__gethex+0x3b8>
 800b276:	f016 061f 	ands.w	r6, r6, #31
 800b27a:	d0fa      	beq.n	800b272 <__gethex+0x424>
 800b27c:	449a      	add	sl, r3
 800b27e:	f1c6 0620 	rsb	r6, r6, #32
 800b282:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b286:	f000 f9ab 	bl	800b5e0 <__hi0bits>
 800b28a:	42b0      	cmp	r0, r6
 800b28c:	dbe7      	blt.n	800b25e <__gethex+0x410>
 800b28e:	e7f0      	b.n	800b272 <__gethex+0x424>

0800b290 <L_shift>:
 800b290:	f1c2 0208 	rsb	r2, r2, #8
 800b294:	0092      	lsls	r2, r2, #2
 800b296:	b570      	push	{r4, r5, r6, lr}
 800b298:	f1c2 0620 	rsb	r6, r2, #32
 800b29c:	6843      	ldr	r3, [r0, #4]
 800b29e:	6804      	ldr	r4, [r0, #0]
 800b2a0:	fa03 f506 	lsl.w	r5, r3, r6
 800b2a4:	432c      	orrs	r4, r5
 800b2a6:	40d3      	lsrs	r3, r2
 800b2a8:	6004      	str	r4, [r0, #0]
 800b2aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b2ae:	4288      	cmp	r0, r1
 800b2b0:	d3f4      	bcc.n	800b29c <L_shift+0xc>
 800b2b2:	bd70      	pop	{r4, r5, r6, pc}

0800b2b4 <__match>:
 800b2b4:	b530      	push	{r4, r5, lr}
 800b2b6:	6803      	ldr	r3, [r0, #0]
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2be:	b914      	cbnz	r4, 800b2c6 <__match+0x12>
 800b2c0:	6003      	str	r3, [r0, #0]
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	bd30      	pop	{r4, r5, pc}
 800b2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b2ce:	2d19      	cmp	r5, #25
 800b2d0:	bf98      	it	ls
 800b2d2:	3220      	addls	r2, #32
 800b2d4:	42a2      	cmp	r2, r4
 800b2d6:	d0f0      	beq.n	800b2ba <__match+0x6>
 800b2d8:	2000      	movs	r0, #0
 800b2da:	e7f3      	b.n	800b2c4 <__match+0x10>

0800b2dc <__hexnan>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	680b      	ldr	r3, [r1, #0]
 800b2e2:	6801      	ldr	r1, [r0, #0]
 800b2e4:	115f      	asrs	r7, r3, #5
 800b2e6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b2ea:	f013 031f 	ands.w	r3, r3, #31
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	bf18      	it	ne
 800b2f2:	3704      	addne	r7, #4
 800b2f4:	2500      	movs	r5, #0
 800b2f6:	1f3e      	subs	r6, r7, #4
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	4690      	mov	r8, r2
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	f847 5c04 	str.w	r5, [r7, #-4]
 800b302:	46b1      	mov	r9, r6
 800b304:	4634      	mov	r4, r6
 800b306:	9502      	str	r5, [sp, #8]
 800b308:	46ab      	mov	fp, r5
 800b30a:	784a      	ldrb	r2, [r1, #1]
 800b30c:	1c4b      	adds	r3, r1, #1
 800b30e:	9303      	str	r3, [sp, #12]
 800b310:	b342      	cbz	r2, 800b364 <__hexnan+0x88>
 800b312:	4610      	mov	r0, r2
 800b314:	9105      	str	r1, [sp, #20]
 800b316:	9204      	str	r2, [sp, #16]
 800b318:	f7ff fd84 	bl	800ae24 <__hexdig_fun>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d143      	bne.n	800b3a8 <__hexnan+0xcc>
 800b320:	9a04      	ldr	r2, [sp, #16]
 800b322:	9905      	ldr	r1, [sp, #20]
 800b324:	2a20      	cmp	r2, #32
 800b326:	d818      	bhi.n	800b35a <__hexnan+0x7e>
 800b328:	9b02      	ldr	r3, [sp, #8]
 800b32a:	459b      	cmp	fp, r3
 800b32c:	dd13      	ble.n	800b356 <__hexnan+0x7a>
 800b32e:	454c      	cmp	r4, r9
 800b330:	d206      	bcs.n	800b340 <__hexnan+0x64>
 800b332:	2d07      	cmp	r5, #7
 800b334:	dc04      	bgt.n	800b340 <__hexnan+0x64>
 800b336:	462a      	mov	r2, r5
 800b338:	4649      	mov	r1, r9
 800b33a:	4620      	mov	r0, r4
 800b33c:	f7ff ffa8 	bl	800b290 <L_shift>
 800b340:	4544      	cmp	r4, r8
 800b342:	d944      	bls.n	800b3ce <__hexnan+0xf2>
 800b344:	2300      	movs	r3, #0
 800b346:	f1a4 0904 	sub.w	r9, r4, #4
 800b34a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b34e:	f8cd b008 	str.w	fp, [sp, #8]
 800b352:	464c      	mov	r4, r9
 800b354:	461d      	mov	r5, r3
 800b356:	9903      	ldr	r1, [sp, #12]
 800b358:	e7d7      	b.n	800b30a <__hexnan+0x2e>
 800b35a:	2a29      	cmp	r2, #41	; 0x29
 800b35c:	d14a      	bne.n	800b3f4 <__hexnan+0x118>
 800b35e:	3102      	adds	r1, #2
 800b360:	f8ca 1000 	str.w	r1, [sl]
 800b364:	f1bb 0f00 	cmp.w	fp, #0
 800b368:	d044      	beq.n	800b3f4 <__hexnan+0x118>
 800b36a:	454c      	cmp	r4, r9
 800b36c:	d206      	bcs.n	800b37c <__hexnan+0xa0>
 800b36e:	2d07      	cmp	r5, #7
 800b370:	dc04      	bgt.n	800b37c <__hexnan+0xa0>
 800b372:	462a      	mov	r2, r5
 800b374:	4649      	mov	r1, r9
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff ff8a 	bl	800b290 <L_shift>
 800b37c:	4544      	cmp	r4, r8
 800b37e:	d928      	bls.n	800b3d2 <__hexnan+0xf6>
 800b380:	4643      	mov	r3, r8
 800b382:	f854 2b04 	ldr.w	r2, [r4], #4
 800b386:	f843 2b04 	str.w	r2, [r3], #4
 800b38a:	42a6      	cmp	r6, r4
 800b38c:	d2f9      	bcs.n	800b382 <__hexnan+0xa6>
 800b38e:	2200      	movs	r2, #0
 800b390:	f843 2b04 	str.w	r2, [r3], #4
 800b394:	429e      	cmp	r6, r3
 800b396:	d2fb      	bcs.n	800b390 <__hexnan+0xb4>
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	b91b      	cbnz	r3, 800b3a4 <__hexnan+0xc8>
 800b39c:	4546      	cmp	r6, r8
 800b39e:	d127      	bne.n	800b3f0 <__hexnan+0x114>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	6033      	str	r3, [r6, #0]
 800b3a4:	2005      	movs	r0, #5
 800b3a6:	e026      	b.n	800b3f6 <__hexnan+0x11a>
 800b3a8:	3501      	adds	r5, #1
 800b3aa:	2d08      	cmp	r5, #8
 800b3ac:	f10b 0b01 	add.w	fp, fp, #1
 800b3b0:	dd06      	ble.n	800b3c0 <__hexnan+0xe4>
 800b3b2:	4544      	cmp	r4, r8
 800b3b4:	d9cf      	bls.n	800b356 <__hexnan+0x7a>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3bc:	2501      	movs	r5, #1
 800b3be:	3c04      	subs	r4, #4
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	f000 000f 	and.w	r0, r0, #15
 800b3c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b3ca:	6020      	str	r0, [r4, #0]
 800b3cc:	e7c3      	b.n	800b356 <__hexnan+0x7a>
 800b3ce:	2508      	movs	r5, #8
 800b3d0:	e7c1      	b.n	800b356 <__hexnan+0x7a>
 800b3d2:	9b01      	ldr	r3, [sp, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d0df      	beq.n	800b398 <__hexnan+0xbc>
 800b3d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3dc:	f1c3 0320 	rsb	r3, r3, #32
 800b3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3e4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b3e8:	401a      	ands	r2, r3
 800b3ea:	f847 2c04 	str.w	r2, [r7, #-4]
 800b3ee:	e7d3      	b.n	800b398 <__hexnan+0xbc>
 800b3f0:	3e04      	subs	r6, #4
 800b3f2:	e7d1      	b.n	800b398 <__hexnan+0xbc>
 800b3f4:	2004      	movs	r0, #4
 800b3f6:	b007      	add	sp, #28
 800b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b3fc <__locale_ctype_ptr_l>:
 800b3fc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b400:	4770      	bx	lr

0800b402 <__localeconv_l>:
 800b402:	30f0      	adds	r0, #240	; 0xf0
 800b404:	4770      	bx	lr
	...

0800b408 <_localeconv_r>:
 800b408:	4b04      	ldr	r3, [pc, #16]	; (800b41c <_localeconv_r+0x14>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6a18      	ldr	r0, [r3, #32]
 800b40e:	4b04      	ldr	r3, [pc, #16]	; (800b420 <_localeconv_r+0x18>)
 800b410:	2800      	cmp	r0, #0
 800b412:	bf08      	it	eq
 800b414:	4618      	moveq	r0, r3
 800b416:	30f0      	adds	r0, #240	; 0xf0
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	20000040 	.word	0x20000040
 800b420:	200000a4 	.word	0x200000a4

0800b424 <malloc>:
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <malloc+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f000 bc71 	b.w	800bd10 <_malloc_r>
 800b42e:	bf00      	nop
 800b430:	20000040 	.word	0x20000040

0800b434 <__ascii_mbtowc>:
 800b434:	b082      	sub	sp, #8
 800b436:	b901      	cbnz	r1, 800b43a <__ascii_mbtowc+0x6>
 800b438:	a901      	add	r1, sp, #4
 800b43a:	b142      	cbz	r2, 800b44e <__ascii_mbtowc+0x1a>
 800b43c:	b14b      	cbz	r3, 800b452 <__ascii_mbtowc+0x1e>
 800b43e:	7813      	ldrb	r3, [r2, #0]
 800b440:	600b      	str	r3, [r1, #0]
 800b442:	7812      	ldrb	r2, [r2, #0]
 800b444:	1c10      	adds	r0, r2, #0
 800b446:	bf18      	it	ne
 800b448:	2001      	movne	r0, #1
 800b44a:	b002      	add	sp, #8
 800b44c:	4770      	bx	lr
 800b44e:	4610      	mov	r0, r2
 800b450:	e7fb      	b.n	800b44a <__ascii_mbtowc+0x16>
 800b452:	f06f 0001 	mvn.w	r0, #1
 800b456:	e7f8      	b.n	800b44a <__ascii_mbtowc+0x16>

0800b458 <_Balloc>:
 800b458:	b570      	push	{r4, r5, r6, lr}
 800b45a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b45c:	4604      	mov	r4, r0
 800b45e:	460e      	mov	r6, r1
 800b460:	b93d      	cbnz	r5, 800b472 <_Balloc+0x1a>
 800b462:	2010      	movs	r0, #16
 800b464:	f7ff ffde 	bl	800b424 <malloc>
 800b468:	6260      	str	r0, [r4, #36]	; 0x24
 800b46a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b46e:	6005      	str	r5, [r0, #0]
 800b470:	60c5      	str	r5, [r0, #12]
 800b472:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b474:	68eb      	ldr	r3, [r5, #12]
 800b476:	b183      	cbz	r3, 800b49a <_Balloc+0x42>
 800b478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b480:	b9b8      	cbnz	r0, 800b4b2 <_Balloc+0x5a>
 800b482:	2101      	movs	r1, #1
 800b484:	fa01 f506 	lsl.w	r5, r1, r6
 800b488:	1d6a      	adds	r2, r5, #5
 800b48a:	0092      	lsls	r2, r2, #2
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fbe2 	bl	800bc56 <_calloc_r>
 800b492:	b160      	cbz	r0, 800b4ae <_Balloc+0x56>
 800b494:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b498:	e00e      	b.n	800b4b8 <_Balloc+0x60>
 800b49a:	2221      	movs	r2, #33	; 0x21
 800b49c:	2104      	movs	r1, #4
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f000 fbd9 	bl	800bc56 <_calloc_r>
 800b4a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4a6:	60e8      	str	r0, [r5, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d1e4      	bne.n	800b478 <_Balloc+0x20>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	bd70      	pop	{r4, r5, r6, pc}
 800b4b2:	6802      	ldr	r2, [r0, #0]
 800b4b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4be:	e7f7      	b.n	800b4b0 <_Balloc+0x58>

0800b4c0 <_Bfree>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	460d      	mov	r5, r1
 800b4c8:	b93c      	cbnz	r4, 800b4da <_Bfree+0x1a>
 800b4ca:	2010      	movs	r0, #16
 800b4cc:	f7ff ffaa 	bl	800b424 <malloc>
 800b4d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4d6:	6004      	str	r4, [r0, #0]
 800b4d8:	60c4      	str	r4, [r0, #12]
 800b4da:	b13d      	cbz	r5, 800b4ec <_Bfree+0x2c>
 800b4dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4de:	686a      	ldr	r2, [r5, #4]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4e6:	6029      	str	r1, [r5, #0]
 800b4e8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b4ec:	bd70      	pop	{r4, r5, r6, pc}

0800b4ee <__multadd>:
 800b4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f2:	690d      	ldr	r5, [r1, #16]
 800b4f4:	461f      	mov	r7, r3
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	f101 0c14 	add.w	ip, r1, #20
 800b4fe:	2300      	movs	r3, #0
 800b500:	f8dc 0000 	ldr.w	r0, [ip]
 800b504:	b281      	uxth	r1, r0
 800b506:	fb02 7101 	mla	r1, r2, r1, r7
 800b50a:	0c0f      	lsrs	r7, r1, #16
 800b50c:	0c00      	lsrs	r0, r0, #16
 800b50e:	fb02 7000 	mla	r0, r2, r0, r7
 800b512:	b289      	uxth	r1, r1
 800b514:	3301      	adds	r3, #1
 800b516:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b51a:	429d      	cmp	r5, r3
 800b51c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b520:	f84c 1b04 	str.w	r1, [ip], #4
 800b524:	dcec      	bgt.n	800b500 <__multadd+0x12>
 800b526:	b1d7      	cbz	r7, 800b55e <__multadd+0x70>
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	42ab      	cmp	r3, r5
 800b52c:	dc12      	bgt.n	800b554 <__multadd+0x66>
 800b52e:	6861      	ldr	r1, [r4, #4]
 800b530:	4630      	mov	r0, r6
 800b532:	3101      	adds	r1, #1
 800b534:	f7ff ff90 	bl	800b458 <_Balloc>
 800b538:	6922      	ldr	r2, [r4, #16]
 800b53a:	3202      	adds	r2, #2
 800b53c:	f104 010c 	add.w	r1, r4, #12
 800b540:	4680      	mov	r8, r0
 800b542:	0092      	lsls	r2, r2, #2
 800b544:	300c      	adds	r0, #12
<<<<<<< HEAD
 800b546:	f7fd f8c5 	bl	80086d4 <memcpy>
=======
 800b546:	f7fd f8c7 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800b54a:	4621      	mov	r1, r4
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7ff ffb7 	bl	800b4c0 <_Bfree>
 800b552:	4644      	mov	r4, r8
 800b554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b558:	3501      	adds	r5, #1
 800b55a:	615f      	str	r7, [r3, #20]
 800b55c:	6125      	str	r5, [r4, #16]
 800b55e:	4620      	mov	r0, r4
 800b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b564 <__s2b>:
 800b564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b568:	460c      	mov	r4, r1
 800b56a:	4615      	mov	r5, r2
 800b56c:	461f      	mov	r7, r3
 800b56e:	2209      	movs	r2, #9
 800b570:	3308      	adds	r3, #8
 800b572:	4606      	mov	r6, r0
 800b574:	fb93 f3f2 	sdiv	r3, r3, r2
 800b578:	2100      	movs	r1, #0
 800b57a:	2201      	movs	r2, #1
 800b57c:	429a      	cmp	r2, r3
 800b57e:	db20      	blt.n	800b5c2 <__s2b+0x5e>
 800b580:	4630      	mov	r0, r6
 800b582:	f7ff ff69 	bl	800b458 <_Balloc>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	6143      	str	r3, [r0, #20]
 800b58a:	2d09      	cmp	r5, #9
 800b58c:	f04f 0301 	mov.w	r3, #1
 800b590:	6103      	str	r3, [r0, #16]
 800b592:	dd19      	ble.n	800b5c8 <__s2b+0x64>
 800b594:	f104 0809 	add.w	r8, r4, #9
 800b598:	46c1      	mov	r9, r8
 800b59a:	442c      	add	r4, r5
 800b59c:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b5a0:	4601      	mov	r1, r0
 800b5a2:	3b30      	subs	r3, #48	; 0x30
 800b5a4:	220a      	movs	r2, #10
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f7ff ffa1 	bl	800b4ee <__multadd>
 800b5ac:	45a1      	cmp	r9, r4
 800b5ae:	d1f5      	bne.n	800b59c <__s2b+0x38>
 800b5b0:	eb08 0405 	add.w	r4, r8, r5
 800b5b4:	3c08      	subs	r4, #8
 800b5b6:	1b2d      	subs	r5, r5, r4
 800b5b8:	1963      	adds	r3, r4, r5
 800b5ba:	42bb      	cmp	r3, r7
 800b5bc:	db07      	blt.n	800b5ce <__s2b+0x6a>
 800b5be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5c2:	0052      	lsls	r2, r2, #1
 800b5c4:	3101      	adds	r1, #1
 800b5c6:	e7d9      	b.n	800b57c <__s2b+0x18>
 800b5c8:	340a      	adds	r4, #10
 800b5ca:	2509      	movs	r5, #9
 800b5cc:	e7f3      	b.n	800b5b6 <__s2b+0x52>
 800b5ce:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	3b30      	subs	r3, #48	; 0x30
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff ff88 	bl	800b4ee <__multadd>
 800b5de:	e7eb      	b.n	800b5b8 <__s2b+0x54>

0800b5e0 <__hi0bits>:
 800b5e0:	0c02      	lsrs	r2, r0, #16
 800b5e2:	0412      	lsls	r2, r2, #16
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	b9b2      	cbnz	r2, 800b616 <__hi0bits+0x36>
 800b5e8:	0403      	lsls	r3, r0, #16
 800b5ea:	2010      	movs	r0, #16
 800b5ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b5f0:	bf04      	itt	eq
 800b5f2:	021b      	lsleq	r3, r3, #8
 800b5f4:	3008      	addeq	r0, #8
 800b5f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b5fa:	bf04      	itt	eq
 800b5fc:	011b      	lsleq	r3, r3, #4
 800b5fe:	3004      	addeq	r0, #4
 800b600:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b604:	bf04      	itt	eq
 800b606:	009b      	lsleq	r3, r3, #2
 800b608:	3002      	addeq	r0, #2
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	db06      	blt.n	800b61c <__hi0bits+0x3c>
 800b60e:	005b      	lsls	r3, r3, #1
 800b610:	d503      	bpl.n	800b61a <__hi0bits+0x3a>
 800b612:	3001      	adds	r0, #1
 800b614:	4770      	bx	lr
 800b616:	2000      	movs	r0, #0
 800b618:	e7e8      	b.n	800b5ec <__hi0bits+0xc>
 800b61a:	2020      	movs	r0, #32
 800b61c:	4770      	bx	lr

0800b61e <__lo0bits>:
 800b61e:	6803      	ldr	r3, [r0, #0]
 800b620:	f013 0207 	ands.w	r2, r3, #7
 800b624:	4601      	mov	r1, r0
 800b626:	d00b      	beq.n	800b640 <__lo0bits+0x22>
 800b628:	07da      	lsls	r2, r3, #31
 800b62a:	d423      	bmi.n	800b674 <__lo0bits+0x56>
 800b62c:	0798      	lsls	r0, r3, #30
 800b62e:	bf49      	itett	mi
 800b630:	085b      	lsrmi	r3, r3, #1
 800b632:	089b      	lsrpl	r3, r3, #2
 800b634:	2001      	movmi	r0, #1
 800b636:	600b      	strmi	r3, [r1, #0]
 800b638:	bf5c      	itt	pl
 800b63a:	600b      	strpl	r3, [r1, #0]
 800b63c:	2002      	movpl	r0, #2
 800b63e:	4770      	bx	lr
 800b640:	b298      	uxth	r0, r3
 800b642:	b9a8      	cbnz	r0, 800b670 <__lo0bits+0x52>
 800b644:	0c1b      	lsrs	r3, r3, #16
 800b646:	2010      	movs	r0, #16
 800b648:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b64c:	bf04      	itt	eq
 800b64e:	0a1b      	lsreq	r3, r3, #8
 800b650:	3008      	addeq	r0, #8
 800b652:	071a      	lsls	r2, r3, #28
 800b654:	bf04      	itt	eq
 800b656:	091b      	lsreq	r3, r3, #4
 800b658:	3004      	addeq	r0, #4
 800b65a:	079a      	lsls	r2, r3, #30
 800b65c:	bf04      	itt	eq
 800b65e:	089b      	lsreq	r3, r3, #2
 800b660:	3002      	addeq	r0, #2
 800b662:	07da      	lsls	r2, r3, #31
 800b664:	d402      	bmi.n	800b66c <__lo0bits+0x4e>
 800b666:	085b      	lsrs	r3, r3, #1
 800b668:	d006      	beq.n	800b678 <__lo0bits+0x5a>
 800b66a:	3001      	adds	r0, #1
 800b66c:	600b      	str	r3, [r1, #0]
 800b66e:	4770      	bx	lr
 800b670:	4610      	mov	r0, r2
 800b672:	e7e9      	b.n	800b648 <__lo0bits+0x2a>
 800b674:	2000      	movs	r0, #0
 800b676:	4770      	bx	lr
 800b678:	2020      	movs	r0, #32
 800b67a:	4770      	bx	lr

0800b67c <__i2b>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	460c      	mov	r4, r1
 800b680:	2101      	movs	r1, #1
 800b682:	f7ff fee9 	bl	800b458 <_Balloc>
 800b686:	2201      	movs	r2, #1
 800b688:	6144      	str	r4, [r0, #20]
 800b68a:	6102      	str	r2, [r0, #16]
 800b68c:	bd10      	pop	{r4, pc}

0800b68e <__multiply>:
 800b68e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b692:	4614      	mov	r4, r2
 800b694:	690a      	ldr	r2, [r1, #16]
 800b696:	6923      	ldr	r3, [r4, #16]
 800b698:	429a      	cmp	r2, r3
 800b69a:	bfb8      	it	lt
 800b69c:	460b      	movlt	r3, r1
 800b69e:	4688      	mov	r8, r1
 800b6a0:	bfbc      	itt	lt
 800b6a2:	46a0      	movlt	r8, r4
 800b6a4:	461c      	movlt	r4, r3
 800b6a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b6b6:	eb07 0609 	add.w	r6, r7, r9
 800b6ba:	42b3      	cmp	r3, r6
 800b6bc:	bfb8      	it	lt
 800b6be:	3101      	addlt	r1, #1
 800b6c0:	f7ff feca 	bl	800b458 <_Balloc>
 800b6c4:	f100 0514 	add.w	r5, r0, #20
 800b6c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4573      	cmp	r3, lr
 800b6d2:	d316      	bcc.n	800b702 <__multiply+0x74>
 800b6d4:	f104 0214 	add.w	r2, r4, #20
 800b6d8:	f108 0114 	add.w	r1, r8, #20
 800b6dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b6e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	9b00      	ldr	r3, [sp, #0]
 800b6e8:	9201      	str	r2, [sp, #4]
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d80c      	bhi.n	800b708 <__multiply+0x7a>
 800b6ee:	2e00      	cmp	r6, #0
 800b6f0:	dd03      	ble.n	800b6fa <__multiply+0x6c>
 800b6f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d05d      	beq.n	800b7b6 <__multiply+0x128>
 800b6fa:	6106      	str	r6, [r0, #16]
 800b6fc:	b003      	add	sp, #12
 800b6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b702:	f843 2b04 	str.w	r2, [r3], #4
 800b706:	e7e3      	b.n	800b6d0 <__multiply+0x42>
 800b708:	f8b2 b000 	ldrh.w	fp, [r2]
 800b70c:	f1bb 0f00 	cmp.w	fp, #0
 800b710:	d023      	beq.n	800b75a <__multiply+0xcc>
 800b712:	4689      	mov	r9, r1
 800b714:	46ac      	mov	ip, r5
 800b716:	f04f 0800 	mov.w	r8, #0
 800b71a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b71e:	f8dc a000 	ldr.w	sl, [ip]
 800b722:	b2a3      	uxth	r3, r4
 800b724:	fa1f fa8a 	uxth.w	sl, sl
 800b728:	fb0b a303 	mla	r3, fp, r3, sl
 800b72c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b730:	f8dc 4000 	ldr.w	r4, [ip]
 800b734:	4443      	add	r3, r8
 800b736:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b73a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b73e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b742:	46e2      	mov	sl, ip
 800b744:	b29b      	uxth	r3, r3
 800b746:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b74a:	454f      	cmp	r7, r9
 800b74c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b750:	f84a 3b04 	str.w	r3, [sl], #4
 800b754:	d82b      	bhi.n	800b7ae <__multiply+0x120>
 800b756:	f8cc 8004 	str.w	r8, [ip, #4]
 800b75a:	9b01      	ldr	r3, [sp, #4]
 800b75c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b760:	3204      	adds	r2, #4
 800b762:	f1ba 0f00 	cmp.w	sl, #0
 800b766:	d020      	beq.n	800b7aa <__multiply+0x11c>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	4689      	mov	r9, r1
 800b76c:	46a8      	mov	r8, r5
 800b76e:	f04f 0b00 	mov.w	fp, #0
 800b772:	f8b9 c000 	ldrh.w	ip, [r9]
 800b776:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b77a:	fb0a 440c 	mla	r4, sl, ip, r4
 800b77e:	445c      	add	r4, fp
 800b780:	46c4      	mov	ip, r8
 800b782:	b29b      	uxth	r3, r3
 800b784:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b788:	f84c 3b04 	str.w	r3, [ip], #4
 800b78c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b790:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b794:	0c1b      	lsrs	r3, r3, #16
 800b796:	fb0a b303 	mla	r3, sl, r3, fp
 800b79a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b79e:	454f      	cmp	r7, r9
 800b7a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b7a4:	d805      	bhi.n	800b7b2 <__multiply+0x124>
 800b7a6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b7aa:	3504      	adds	r5, #4
 800b7ac:	e79b      	b.n	800b6e6 <__multiply+0x58>
 800b7ae:	46d4      	mov	ip, sl
 800b7b0:	e7b3      	b.n	800b71a <__multiply+0x8c>
 800b7b2:	46e0      	mov	r8, ip
 800b7b4:	e7dd      	b.n	800b772 <__multiply+0xe4>
 800b7b6:	3e01      	subs	r6, #1
 800b7b8:	e799      	b.n	800b6ee <__multiply+0x60>
	...

0800b7bc <__pow5mult>:
 800b7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c0:	4615      	mov	r5, r2
 800b7c2:	f012 0203 	ands.w	r2, r2, #3
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460f      	mov	r7, r1
 800b7ca:	d007      	beq.n	800b7dc <__pow5mult+0x20>
 800b7cc:	3a01      	subs	r2, #1
 800b7ce:	4c21      	ldr	r4, [pc, #132]	; (800b854 <__pow5mult+0x98>)
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7d6:	f7ff fe8a 	bl	800b4ee <__multadd>
 800b7da:	4607      	mov	r7, r0
 800b7dc:	10ad      	asrs	r5, r5, #2
 800b7de:	d035      	beq.n	800b84c <__pow5mult+0x90>
 800b7e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7e2:	b93c      	cbnz	r4, 800b7f4 <__pow5mult+0x38>
 800b7e4:	2010      	movs	r0, #16
 800b7e6:	f7ff fe1d 	bl	800b424 <malloc>
 800b7ea:	6270      	str	r0, [r6, #36]	; 0x24
 800b7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f0:	6004      	str	r4, [r0, #0]
 800b7f2:	60c4      	str	r4, [r0, #12]
 800b7f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7fc:	b94c      	cbnz	r4, 800b812 <__pow5mult+0x56>
 800b7fe:	f240 2171 	movw	r1, #625	; 0x271
 800b802:	4630      	mov	r0, r6
 800b804:	f7ff ff3a 	bl	800b67c <__i2b>
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80e:	4604      	mov	r4, r0
 800b810:	6003      	str	r3, [r0, #0]
 800b812:	f04f 0800 	mov.w	r8, #0
 800b816:	07eb      	lsls	r3, r5, #31
 800b818:	d50a      	bpl.n	800b830 <__pow5mult+0x74>
 800b81a:	4639      	mov	r1, r7
 800b81c:	4622      	mov	r2, r4
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff ff35 	bl	800b68e <__multiply>
 800b824:	4639      	mov	r1, r7
 800b826:	4681      	mov	r9, r0
 800b828:	4630      	mov	r0, r6
 800b82a:	f7ff fe49 	bl	800b4c0 <_Bfree>
 800b82e:	464f      	mov	r7, r9
 800b830:	106d      	asrs	r5, r5, #1
 800b832:	d00b      	beq.n	800b84c <__pow5mult+0x90>
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	b938      	cbnz	r0, 800b848 <__pow5mult+0x8c>
 800b838:	4622      	mov	r2, r4
 800b83a:	4621      	mov	r1, r4
 800b83c:	4630      	mov	r0, r6
 800b83e:	f7ff ff26 	bl	800b68e <__multiply>
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	f8c0 8000 	str.w	r8, [r0]
 800b848:	4604      	mov	r4, r0
 800b84a:	e7e4      	b.n	800b816 <__pow5mult+0x5a>
 800b84c:	4638      	mov	r0, r7
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	bf00      	nop
 800b854:	0800c328 	.word	0x0800c328

0800b858 <__lshift>:
 800b858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85c:	460c      	mov	r4, r1
 800b85e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	6849      	ldr	r1, [r1, #4]
 800b866:	eb0a 0903 	add.w	r9, sl, r3
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	4607      	mov	r7, r0
 800b86e:	4616      	mov	r6, r2
 800b870:	f109 0501 	add.w	r5, r9, #1
 800b874:	42ab      	cmp	r3, r5
 800b876:	db32      	blt.n	800b8de <__lshift+0x86>
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff fded 	bl	800b458 <_Balloc>
 800b87e:	2300      	movs	r3, #0
 800b880:	4680      	mov	r8, r0
 800b882:	f100 0114 	add.w	r1, r0, #20
 800b886:	461a      	mov	r2, r3
 800b888:	4553      	cmp	r3, sl
 800b88a:	db2b      	blt.n	800b8e4 <__lshift+0x8c>
 800b88c:	6920      	ldr	r0, [r4, #16]
 800b88e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b892:	f104 0314 	add.w	r3, r4, #20
 800b896:	f016 021f 	ands.w	r2, r6, #31
 800b89a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b89e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8a2:	d025      	beq.n	800b8f0 <__lshift+0x98>
 800b8a4:	f1c2 0e20 	rsb	lr, r2, #32
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	681e      	ldr	r6, [r3, #0]
 800b8ac:	468a      	mov	sl, r1
 800b8ae:	4096      	lsls	r6, r2
 800b8b0:	4330      	orrs	r0, r6
 800b8b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8b6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b8ba:	459c      	cmp	ip, r3
 800b8bc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b8c0:	d814      	bhi.n	800b8ec <__lshift+0x94>
 800b8c2:	6048      	str	r0, [r1, #4]
 800b8c4:	b108      	cbz	r0, 800b8ca <__lshift+0x72>
 800b8c6:	f109 0502 	add.w	r5, r9, #2
 800b8ca:	3d01      	subs	r5, #1
 800b8cc:	4638      	mov	r0, r7
 800b8ce:	f8c8 5010 	str.w	r5, [r8, #16]
 800b8d2:	4621      	mov	r1, r4
 800b8d4:	f7ff fdf4 	bl	800b4c0 <_Bfree>
 800b8d8:	4640      	mov	r0, r8
 800b8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8de:	3101      	adds	r1, #1
 800b8e0:	005b      	lsls	r3, r3, #1
 800b8e2:	e7c7      	b.n	800b874 <__lshift+0x1c>
 800b8e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	e7cd      	b.n	800b888 <__lshift+0x30>
 800b8ec:	4651      	mov	r1, sl
 800b8ee:	e7dc      	b.n	800b8aa <__lshift+0x52>
 800b8f0:	3904      	subs	r1, #4
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8fa:	459c      	cmp	ip, r3
 800b8fc:	d8f9      	bhi.n	800b8f2 <__lshift+0x9a>
 800b8fe:	e7e4      	b.n	800b8ca <__lshift+0x72>

0800b900 <__mcmp>:
 800b900:	6903      	ldr	r3, [r0, #16]
 800b902:	690a      	ldr	r2, [r1, #16]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	b530      	push	{r4, r5, lr}
 800b908:	d10c      	bne.n	800b924 <__mcmp+0x24>
 800b90a:	0092      	lsls	r2, r2, #2
 800b90c:	3014      	adds	r0, #20
 800b90e:	3114      	adds	r1, #20
 800b910:	1884      	adds	r4, r0, r2
 800b912:	4411      	add	r1, r2
 800b914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b918:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b91c:	4295      	cmp	r5, r2
 800b91e:	d003      	beq.n	800b928 <__mcmp+0x28>
 800b920:	d305      	bcc.n	800b92e <__mcmp+0x2e>
 800b922:	2301      	movs	r3, #1
 800b924:	4618      	mov	r0, r3
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d3f3      	bcc.n	800b914 <__mcmp+0x14>
 800b92c:	e7fa      	b.n	800b924 <__mcmp+0x24>
 800b92e:	f04f 33ff 	mov.w	r3, #4294967295
 800b932:	e7f7      	b.n	800b924 <__mcmp+0x24>

0800b934 <__mdiff>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	460d      	mov	r5, r1
 800b93a:	4607      	mov	r7, r0
 800b93c:	4611      	mov	r1, r2
 800b93e:	4628      	mov	r0, r5
 800b940:	4614      	mov	r4, r2
 800b942:	f7ff ffdd 	bl	800b900 <__mcmp>
 800b946:	1e06      	subs	r6, r0, #0
 800b948:	d108      	bne.n	800b95c <__mdiff+0x28>
 800b94a:	4631      	mov	r1, r6
 800b94c:	4638      	mov	r0, r7
 800b94e:	f7ff fd83 	bl	800b458 <_Balloc>
 800b952:	2301      	movs	r3, #1
 800b954:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95c:	bfa4      	itt	ge
 800b95e:	4623      	movge	r3, r4
 800b960:	462c      	movge	r4, r5
 800b962:	4638      	mov	r0, r7
 800b964:	6861      	ldr	r1, [r4, #4]
 800b966:	bfa6      	itte	ge
 800b968:	461d      	movge	r5, r3
 800b96a:	2600      	movge	r6, #0
 800b96c:	2601      	movlt	r6, #1
 800b96e:	f7ff fd73 	bl	800b458 <_Balloc>
 800b972:	692b      	ldr	r3, [r5, #16]
 800b974:	60c6      	str	r6, [r0, #12]
 800b976:	6926      	ldr	r6, [r4, #16]
 800b978:	f105 0914 	add.w	r9, r5, #20
 800b97c:	f104 0214 	add.w	r2, r4, #20
 800b980:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b984:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b988:	f100 0514 	add.w	r5, r0, #20
 800b98c:	f04f 0e00 	mov.w	lr, #0
 800b990:	f852 ab04 	ldr.w	sl, [r2], #4
 800b994:	f859 4b04 	ldr.w	r4, [r9], #4
 800b998:	fa1e f18a 	uxtah	r1, lr, sl
 800b99c:	b2a3      	uxth	r3, r4
 800b99e:	1ac9      	subs	r1, r1, r3
 800b9a0:	0c23      	lsrs	r3, r4, #16
 800b9a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b9a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b9aa:	b289      	uxth	r1, r1
 800b9ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b9b0:	45c8      	cmp	r8, r9
 800b9b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b9b6:	4694      	mov	ip, r2
 800b9b8:	f845 3b04 	str.w	r3, [r5], #4
 800b9bc:	d8e8      	bhi.n	800b990 <__mdiff+0x5c>
 800b9be:	45bc      	cmp	ip, r7
 800b9c0:	d304      	bcc.n	800b9cc <__mdiff+0x98>
 800b9c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b9c6:	b183      	cbz	r3, 800b9ea <__mdiff+0xb6>
 800b9c8:	6106      	str	r6, [r0, #16]
 800b9ca:	e7c5      	b.n	800b958 <__mdiff+0x24>
 800b9cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b9d0:	fa1e f381 	uxtah	r3, lr, r1
 800b9d4:	141a      	asrs	r2, r3, #16
 800b9d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b9e4:	f845 3b04 	str.w	r3, [r5], #4
 800b9e8:	e7e9      	b.n	800b9be <__mdiff+0x8a>
 800b9ea:	3e01      	subs	r6, #1
 800b9ec:	e7e9      	b.n	800b9c2 <__mdiff+0x8e>
	...

0800b9f0 <__ulp>:
 800b9f0:	4b12      	ldr	r3, [pc, #72]	; (800ba3c <__ulp+0x4c>)
 800b9f2:	ee10 2a90 	vmov	r2, s1
 800b9f6:	401a      	ands	r2, r3
 800b9f8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	dd04      	ble.n	800ba0a <__ulp+0x1a>
 800ba00:	2000      	movs	r0, #0
 800ba02:	4619      	mov	r1, r3
 800ba04:	ec41 0b10 	vmov	d0, r0, r1
 800ba08:	4770      	bx	lr
 800ba0a:	425b      	negs	r3, r3
 800ba0c:	151b      	asrs	r3, r3, #20
 800ba0e:	2b13      	cmp	r3, #19
 800ba10:	f04f 0000 	mov.w	r0, #0
 800ba14:	f04f 0100 	mov.w	r1, #0
 800ba18:	dc04      	bgt.n	800ba24 <__ulp+0x34>
 800ba1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ba1e:	fa42 f103 	asr.w	r1, r2, r3
 800ba22:	e7ef      	b.n	800ba04 <__ulp+0x14>
 800ba24:	3b14      	subs	r3, #20
 800ba26:	2b1e      	cmp	r3, #30
 800ba28:	f04f 0201 	mov.w	r2, #1
 800ba2c:	bfda      	itte	le
 800ba2e:	f1c3 031f 	rsble	r3, r3, #31
 800ba32:	fa02 f303 	lslle.w	r3, r2, r3
 800ba36:	4613      	movgt	r3, r2
 800ba38:	4618      	mov	r0, r3
 800ba3a:	e7e3      	b.n	800ba04 <__ulp+0x14>
 800ba3c:	7ff00000 	.word	0x7ff00000

0800ba40 <__b2d>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	6905      	ldr	r5, [r0, #16]
 800ba44:	f100 0714 	add.w	r7, r0, #20
 800ba48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba4c:	1f2e      	subs	r6, r5, #4
 800ba4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba52:	4620      	mov	r0, r4
 800ba54:	f7ff fdc4 	bl	800b5e0 <__hi0bits>
 800ba58:	f1c0 0320 	rsb	r3, r0, #32
 800ba5c:	280a      	cmp	r0, #10
 800ba5e:	600b      	str	r3, [r1, #0]
 800ba60:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bad8 <__b2d+0x98>
 800ba64:	dc14      	bgt.n	800ba90 <__b2d+0x50>
 800ba66:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba6a:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba6e:	42b7      	cmp	r7, r6
 800ba70:	ea41 030c 	orr.w	r3, r1, ip
 800ba74:	bf34      	ite	cc
 800ba76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba7a:	2100      	movcs	r1, #0
 800ba7c:	3015      	adds	r0, #21
 800ba7e:	fa04 f000 	lsl.w	r0, r4, r0
 800ba82:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba86:	ea40 0201 	orr.w	r2, r0, r1
 800ba8a:	ec43 2b10 	vmov	d0, r2, r3
 800ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba90:	42b7      	cmp	r7, r6
 800ba92:	bf3a      	itte	cc
 800ba94:	f1a5 0608 	subcc.w	r6, r5, #8
 800ba98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba9c:	2100      	movcs	r1, #0
 800ba9e:	380b      	subs	r0, #11
 800baa0:	d015      	beq.n	800bace <__b2d+0x8e>
 800baa2:	4084      	lsls	r4, r0
 800baa4:	f1c0 0520 	rsb	r5, r0, #32
 800baa8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800baac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800bab0:	42be      	cmp	r6, r7
 800bab2:	fa21 fc05 	lsr.w	ip, r1, r5
 800bab6:	ea44 030c 	orr.w	r3, r4, ip
 800baba:	bf8c      	ite	hi
 800babc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bac0:	2400      	movls	r4, #0
 800bac2:	fa01 f000 	lsl.w	r0, r1, r0
 800bac6:	40ec      	lsrs	r4, r5
 800bac8:	ea40 0204 	orr.w	r2, r0, r4
 800bacc:	e7dd      	b.n	800ba8a <__b2d+0x4a>
 800bace:	ea44 030c 	orr.w	r3, r4, ip
 800bad2:	460a      	mov	r2, r1
 800bad4:	e7d9      	b.n	800ba8a <__b2d+0x4a>
 800bad6:	bf00      	nop
 800bad8:	3ff00000 	.word	0x3ff00000

0800badc <__d2b>:
 800badc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bae0:	460e      	mov	r6, r1
 800bae2:	2101      	movs	r1, #1
 800bae4:	ec59 8b10 	vmov	r8, r9, d0
 800bae8:	4615      	mov	r5, r2
 800baea:	f7ff fcb5 	bl	800b458 <_Balloc>
 800baee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800baf2:	4607      	mov	r7, r0
 800baf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baf8:	bb34      	cbnz	r4, 800bb48 <__d2b+0x6c>
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	f1b8 0300 	subs.w	r3, r8, #0
 800bb00:	d027      	beq.n	800bb52 <__d2b+0x76>
 800bb02:	a802      	add	r0, sp, #8
 800bb04:	f840 3d08 	str.w	r3, [r0, #-8]!
 800bb08:	f7ff fd89 	bl	800b61e <__lo0bits>
 800bb0c:	9900      	ldr	r1, [sp, #0]
 800bb0e:	b1f0      	cbz	r0, 800bb4e <__d2b+0x72>
 800bb10:	9a01      	ldr	r2, [sp, #4]
 800bb12:	f1c0 0320 	rsb	r3, r0, #32
 800bb16:	fa02 f303 	lsl.w	r3, r2, r3
 800bb1a:	430b      	orrs	r3, r1
 800bb1c:	40c2      	lsrs	r2, r0
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	9201      	str	r2, [sp, #4]
 800bb22:	9b01      	ldr	r3, [sp, #4]
 800bb24:	61bb      	str	r3, [r7, #24]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bf14      	ite	ne
 800bb2a:	2102      	movne	r1, #2
 800bb2c:	2101      	moveq	r1, #1
 800bb2e:	6139      	str	r1, [r7, #16]
 800bb30:	b1c4      	cbz	r4, 800bb64 <__d2b+0x88>
 800bb32:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bb36:	4404      	add	r4, r0
 800bb38:	6034      	str	r4, [r6, #0]
 800bb3a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb3e:	6028      	str	r0, [r5, #0]
 800bb40:	4638      	mov	r0, r7
 800bb42:	b003      	add	sp, #12
 800bb44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb4c:	e7d5      	b.n	800bafa <__d2b+0x1e>
 800bb4e:	6179      	str	r1, [r7, #20]
 800bb50:	e7e7      	b.n	800bb22 <__d2b+0x46>
 800bb52:	a801      	add	r0, sp, #4
 800bb54:	f7ff fd63 	bl	800b61e <__lo0bits>
 800bb58:	9b01      	ldr	r3, [sp, #4]
 800bb5a:	617b      	str	r3, [r7, #20]
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	6139      	str	r1, [r7, #16]
 800bb60:	3020      	adds	r0, #32
 800bb62:	e7e5      	b.n	800bb30 <__d2b+0x54>
 800bb64:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bb68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb6c:	6030      	str	r0, [r6, #0]
 800bb6e:	6918      	ldr	r0, [r3, #16]
 800bb70:	f7ff fd36 	bl	800b5e0 <__hi0bits>
 800bb74:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bb78:	e7e1      	b.n	800bb3e <__d2b+0x62>

0800bb7a <__ratio>:
 800bb7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7e:	4688      	mov	r8, r1
 800bb80:	4669      	mov	r1, sp
 800bb82:	4681      	mov	r9, r0
 800bb84:	f7ff ff5c 	bl	800ba40 <__b2d>
 800bb88:	a901      	add	r1, sp, #4
 800bb8a:	4640      	mov	r0, r8
 800bb8c:	ec57 6b10 	vmov	r6, r7, d0
 800bb90:	f7ff ff56 	bl	800ba40 <__b2d>
 800bb94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bb9c:	eba3 0c02 	sub.w	ip, r3, r2
 800bba0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbaa:	ec5b ab10 	vmov	sl, fp, d0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bfce      	itee	gt
 800bbb2:	463a      	movgt	r2, r7
 800bbb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbb8:	465a      	movle	r2, fp
 800bbba:	4659      	mov	r1, fp
 800bbbc:	463d      	mov	r5, r7
 800bbbe:	bfd4      	ite	le
 800bbc0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bbc4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800bbc8:	4630      	mov	r0, r6
 800bbca:	ee10 2a10 	vmov	r2, s0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	f7f4 fe3b 	bl	800084c <__aeabi_ddiv>
 800bbd6:	ec41 0b10 	vmov	d0, r0, r1
 800bbda:	b003      	add	sp, #12
 800bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbe0 <__copybits>:
 800bbe0:	3901      	subs	r1, #1
 800bbe2:	b510      	push	{r4, lr}
 800bbe4:	1149      	asrs	r1, r1, #5
 800bbe6:	6914      	ldr	r4, [r2, #16]
 800bbe8:	3101      	adds	r1, #1
 800bbea:	f102 0314 	add.w	r3, r2, #20
 800bbee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bbf2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bbf6:	42a3      	cmp	r3, r4
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	d303      	bcc.n	800bc04 <__copybits+0x24>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	428a      	cmp	r2, r1
 800bc00:	d305      	bcc.n	800bc0e <__copybits+0x2e>
 800bc02:	bd10      	pop	{r4, pc}
 800bc04:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc08:	f840 2b04 	str.w	r2, [r0], #4
 800bc0c:	e7f3      	b.n	800bbf6 <__copybits+0x16>
 800bc0e:	f842 3b04 	str.w	r3, [r2], #4
 800bc12:	e7f4      	b.n	800bbfe <__copybits+0x1e>

0800bc14 <__any_on>:
 800bc14:	f100 0214 	add.w	r2, r0, #20
 800bc18:	6900      	ldr	r0, [r0, #16]
 800bc1a:	114b      	asrs	r3, r1, #5
 800bc1c:	4298      	cmp	r0, r3
 800bc1e:	b510      	push	{r4, lr}
 800bc20:	db11      	blt.n	800bc46 <__any_on+0x32>
 800bc22:	dd0a      	ble.n	800bc3a <__any_on+0x26>
 800bc24:	f011 011f 	ands.w	r1, r1, #31
 800bc28:	d007      	beq.n	800bc3a <__any_on+0x26>
 800bc2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc2e:	fa24 f001 	lsr.w	r0, r4, r1
 800bc32:	fa00 f101 	lsl.w	r1, r0, r1
 800bc36:	428c      	cmp	r4, r1
 800bc38:	d10b      	bne.n	800bc52 <__any_on+0x3e>
 800bc3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d803      	bhi.n	800bc4a <__any_on+0x36>
 800bc42:	2000      	movs	r0, #0
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	4603      	mov	r3, r0
 800bc48:	e7f7      	b.n	800bc3a <__any_on+0x26>
 800bc4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc4e:	2900      	cmp	r1, #0
 800bc50:	d0f5      	beq.n	800bc3e <__any_on+0x2a>
 800bc52:	2001      	movs	r0, #1
 800bc54:	e7f6      	b.n	800bc44 <__any_on+0x30>

0800bc56 <_calloc_r>:
 800bc56:	b538      	push	{r3, r4, r5, lr}
 800bc58:	fb02 f401 	mul.w	r4, r2, r1
 800bc5c:	4621      	mov	r1, r4
 800bc5e:	f000 f857 	bl	800bd10 <_malloc_r>
 800bc62:	4605      	mov	r5, r0
 800bc64:	b118      	cbz	r0, 800bc6e <_calloc_r+0x18>
 800bc66:	4622      	mov	r2, r4
 800bc68:	2100      	movs	r1, #0
<<<<<<< HEAD
 800bc6a:	f7fc fd3e 	bl	80086ea <memset>
=======
 800bc6a:	f7fc fd40 	bl	80086ee <memset>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800bc6e:	4628      	mov	r0, r5
 800bc70:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bc74 <_free_r>:
 800bc74:	b538      	push	{r3, r4, r5, lr}
 800bc76:	4605      	mov	r5, r0
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	d045      	beq.n	800bd08 <_free_r+0x94>
 800bc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc80:	1f0c      	subs	r4, r1, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bfb8      	it	lt
 800bc86:	18e4      	addlt	r4, r4, r3
 800bc88:	f000 fa36 	bl	800c0f8 <__malloc_lock>
 800bc8c:	4a1f      	ldr	r2, [pc, #124]	; (800bd0c <_free_r+0x98>)
 800bc8e:	6813      	ldr	r3, [r2, #0]
 800bc90:	4610      	mov	r0, r2
 800bc92:	b933      	cbnz	r3, 800bca2 <_free_r+0x2e>
 800bc94:	6063      	str	r3, [r4, #4]
 800bc96:	6014      	str	r4, [r2, #0]
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc9e:	f000 ba2c 	b.w	800c0fa <__malloc_unlock>
 800bca2:	42a3      	cmp	r3, r4
 800bca4:	d90c      	bls.n	800bcc0 <_free_r+0x4c>
 800bca6:	6821      	ldr	r1, [r4, #0]
 800bca8:	1862      	adds	r2, r4, r1
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	bf04      	itt	eq
 800bcae:	681a      	ldreq	r2, [r3, #0]
 800bcb0:	685b      	ldreq	r3, [r3, #4]
 800bcb2:	6063      	str	r3, [r4, #4]
 800bcb4:	bf04      	itt	eq
 800bcb6:	1852      	addeq	r2, r2, r1
 800bcb8:	6022      	streq	r2, [r4, #0]
 800bcba:	6004      	str	r4, [r0, #0]
 800bcbc:	e7ec      	b.n	800bc98 <_free_r+0x24>
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	685a      	ldr	r2, [r3, #4]
 800bcc2:	b10a      	cbz	r2, 800bcc8 <_free_r+0x54>
 800bcc4:	42a2      	cmp	r2, r4
 800bcc6:	d9fa      	bls.n	800bcbe <_free_r+0x4a>
 800bcc8:	6819      	ldr	r1, [r3, #0]
 800bcca:	1858      	adds	r0, r3, r1
 800bccc:	42a0      	cmp	r0, r4
 800bcce:	d10b      	bne.n	800bce8 <_free_r+0x74>
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	4401      	add	r1, r0
 800bcd4:	1858      	adds	r0, r3, r1
 800bcd6:	4282      	cmp	r2, r0
 800bcd8:	6019      	str	r1, [r3, #0]
 800bcda:	d1dd      	bne.n	800bc98 <_free_r+0x24>
 800bcdc:	6810      	ldr	r0, [r2, #0]
 800bcde:	6852      	ldr	r2, [r2, #4]
 800bce0:	605a      	str	r2, [r3, #4]
 800bce2:	4401      	add	r1, r0
 800bce4:	6019      	str	r1, [r3, #0]
 800bce6:	e7d7      	b.n	800bc98 <_free_r+0x24>
 800bce8:	d902      	bls.n	800bcf0 <_free_r+0x7c>
 800bcea:	230c      	movs	r3, #12
 800bcec:	602b      	str	r3, [r5, #0]
 800bcee:	e7d3      	b.n	800bc98 <_free_r+0x24>
 800bcf0:	6820      	ldr	r0, [r4, #0]
 800bcf2:	1821      	adds	r1, r4, r0
 800bcf4:	428a      	cmp	r2, r1
 800bcf6:	bf04      	itt	eq
 800bcf8:	6811      	ldreq	r1, [r2, #0]
 800bcfa:	6852      	ldreq	r2, [r2, #4]
 800bcfc:	6062      	str	r2, [r4, #4]
 800bcfe:	bf04      	itt	eq
 800bd00:	1809      	addeq	r1, r1, r0
 800bd02:	6021      	streq	r1, [r4, #0]
 800bd04:	605c      	str	r4, [r3, #4]
 800bd06:	e7c7      	b.n	800bc98 <_free_r+0x24>
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	200003d0 	.word	0x200003d0

0800bd10 <_malloc_r>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	1ccd      	adds	r5, r1, #3
 800bd14:	f025 0503 	bic.w	r5, r5, #3
 800bd18:	3508      	adds	r5, #8
 800bd1a:	2d0c      	cmp	r5, #12
 800bd1c:	bf38      	it	cc
 800bd1e:	250c      	movcc	r5, #12
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	4606      	mov	r6, r0
 800bd24:	db01      	blt.n	800bd2a <_malloc_r+0x1a>
 800bd26:	42a9      	cmp	r1, r5
 800bd28:	d903      	bls.n	800bd32 <_malloc_r+0x22>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	6033      	str	r3, [r6, #0]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	bd70      	pop	{r4, r5, r6, pc}
 800bd32:	f000 f9e1 	bl	800c0f8 <__malloc_lock>
 800bd36:	4a21      	ldr	r2, [pc, #132]	; (800bdbc <_malloc_r+0xac>)
 800bd38:	6814      	ldr	r4, [r2, #0]
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	b991      	cbnz	r1, 800bd64 <_malloc_r+0x54>
 800bd3e:	4c20      	ldr	r4, [pc, #128]	; (800bdc0 <_malloc_r+0xb0>)
 800bd40:	6823      	ldr	r3, [r4, #0]
 800bd42:	b91b      	cbnz	r3, 800bd4c <_malloc_r+0x3c>
 800bd44:	4630      	mov	r0, r6
 800bd46:	f000 f98f 	bl	800c068 <_sbrk_r>
 800bd4a:	6020      	str	r0, [r4, #0]
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f98a 	bl	800c068 <_sbrk_r>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d124      	bne.n	800bda2 <_malloc_r+0x92>
 800bd58:	230c      	movs	r3, #12
 800bd5a:	6033      	str	r3, [r6, #0]
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f000 f9cc 	bl	800c0fa <__malloc_unlock>
 800bd62:	e7e4      	b.n	800bd2e <_malloc_r+0x1e>
 800bd64:	680b      	ldr	r3, [r1, #0]
 800bd66:	1b5b      	subs	r3, r3, r5
 800bd68:	d418      	bmi.n	800bd9c <_malloc_r+0x8c>
 800bd6a:	2b0b      	cmp	r3, #11
 800bd6c:	d90f      	bls.n	800bd8e <_malloc_r+0x7e>
 800bd6e:	600b      	str	r3, [r1, #0]
 800bd70:	50cd      	str	r5, [r1, r3]
 800bd72:	18cc      	adds	r4, r1, r3
 800bd74:	4630      	mov	r0, r6
 800bd76:	f000 f9c0 	bl	800c0fa <__malloc_unlock>
 800bd7a:	f104 000b 	add.w	r0, r4, #11
 800bd7e:	1d23      	adds	r3, r4, #4
 800bd80:	f020 0007 	bic.w	r0, r0, #7
 800bd84:	1ac3      	subs	r3, r0, r3
 800bd86:	d0d3      	beq.n	800bd30 <_malloc_r+0x20>
 800bd88:	425a      	negs	r2, r3
 800bd8a:	50e2      	str	r2, [r4, r3]
 800bd8c:	e7d0      	b.n	800bd30 <_malloc_r+0x20>
 800bd8e:	428c      	cmp	r4, r1
 800bd90:	684b      	ldr	r3, [r1, #4]
 800bd92:	bf16      	itet	ne
 800bd94:	6063      	strne	r3, [r4, #4]
 800bd96:	6013      	streq	r3, [r2, #0]
 800bd98:	460c      	movne	r4, r1
 800bd9a:	e7eb      	b.n	800bd74 <_malloc_r+0x64>
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	6849      	ldr	r1, [r1, #4]
 800bda0:	e7cc      	b.n	800bd3c <_malloc_r+0x2c>
 800bda2:	1cc4      	adds	r4, r0, #3
 800bda4:	f024 0403 	bic.w	r4, r4, #3
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d005      	beq.n	800bdb8 <_malloc_r+0xa8>
 800bdac:	1a21      	subs	r1, r4, r0
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 f95a 	bl	800c068 <_sbrk_r>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d0cf      	beq.n	800bd58 <_malloc_r+0x48>
 800bdb8:	6025      	str	r5, [r4, #0]
 800bdba:	e7db      	b.n	800bd74 <_malloc_r+0x64>
 800bdbc:	200003d0 	.word	0x200003d0
 800bdc0:	200003d4 	.word	0x200003d4

0800bdc4 <__ssputs_r>:
 800bdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc8:	688e      	ldr	r6, [r1, #8]
 800bdca:	429e      	cmp	r6, r3
 800bdcc:	4682      	mov	sl, r0
 800bdce:	460c      	mov	r4, r1
 800bdd0:	4690      	mov	r8, r2
 800bdd2:	4699      	mov	r9, r3
 800bdd4:	d837      	bhi.n	800be46 <__ssputs_r+0x82>
 800bdd6:	898a      	ldrh	r2, [r1, #12]
 800bdd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bddc:	d031      	beq.n	800be42 <__ssputs_r+0x7e>
 800bdde:	6825      	ldr	r5, [r4, #0]
 800bde0:	6909      	ldr	r1, [r1, #16]
 800bde2:	1a6f      	subs	r7, r5, r1
 800bde4:	6965      	ldr	r5, [r4, #20]
 800bde6:	2302      	movs	r3, #2
 800bde8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdec:	fb95 f5f3 	sdiv	r5, r5, r3
 800bdf0:	f109 0301 	add.w	r3, r9, #1
 800bdf4:	443b      	add	r3, r7
 800bdf6:	429d      	cmp	r5, r3
 800bdf8:	bf38      	it	cc
 800bdfa:	461d      	movcc	r5, r3
 800bdfc:	0553      	lsls	r3, r2, #21
 800bdfe:	d530      	bpl.n	800be62 <__ssputs_r+0x9e>
 800be00:	4629      	mov	r1, r5
 800be02:	f7ff ff85 	bl	800bd10 <_malloc_r>
 800be06:	4606      	mov	r6, r0
 800be08:	b950      	cbnz	r0, 800be20 <__ssputs_r+0x5c>
 800be0a:	230c      	movs	r3, #12
 800be0c:	f8ca 3000 	str.w	r3, [sl]
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be16:	81a3      	strh	r3, [r4, #12]
 800be18:	f04f 30ff 	mov.w	r0, #4294967295
 800be1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be20:	463a      	mov	r2, r7
 800be22:	6921      	ldr	r1, [r4, #16]
<<<<<<< HEAD
 800be24:	f7fc fc56 	bl	80086d4 <memcpy>
=======
 800be24:	f7fc fc58 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	6126      	str	r6, [r4, #16]
 800be36:	6165      	str	r5, [r4, #20]
 800be38:	443e      	add	r6, r7
 800be3a:	1bed      	subs	r5, r5, r7
 800be3c:	6026      	str	r6, [r4, #0]
 800be3e:	60a5      	str	r5, [r4, #8]
 800be40:	464e      	mov	r6, r9
 800be42:	454e      	cmp	r6, r9
 800be44:	d900      	bls.n	800be48 <__ssputs_r+0x84>
 800be46:	464e      	mov	r6, r9
 800be48:	4632      	mov	r2, r6
 800be4a:	4641      	mov	r1, r8
 800be4c:	6820      	ldr	r0, [r4, #0]
 800be4e:	f000 f93a 	bl	800c0c6 <memmove>
 800be52:	68a3      	ldr	r3, [r4, #8]
 800be54:	1b9b      	subs	r3, r3, r6
 800be56:	60a3      	str	r3, [r4, #8]
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	441e      	add	r6, r3
 800be5c:	6026      	str	r6, [r4, #0]
 800be5e:	2000      	movs	r0, #0
 800be60:	e7dc      	b.n	800be1c <__ssputs_r+0x58>
 800be62:	462a      	mov	r2, r5
 800be64:	f000 f94a 	bl	800c0fc <_realloc_r>
 800be68:	4606      	mov	r6, r0
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d1e2      	bne.n	800be34 <__ssputs_r+0x70>
 800be6e:	6921      	ldr	r1, [r4, #16]
 800be70:	4650      	mov	r0, sl
 800be72:	f7ff feff 	bl	800bc74 <_free_r>
 800be76:	e7c8      	b.n	800be0a <__ssputs_r+0x46>

0800be78 <_svfiprintf_r>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	461d      	mov	r5, r3
 800be7e:	898b      	ldrh	r3, [r1, #12]
 800be80:	061f      	lsls	r7, r3, #24
 800be82:	b09d      	sub	sp, #116	; 0x74
 800be84:	4680      	mov	r8, r0
 800be86:	460c      	mov	r4, r1
 800be88:	4616      	mov	r6, r2
 800be8a:	d50f      	bpl.n	800beac <_svfiprintf_r+0x34>
 800be8c:	690b      	ldr	r3, [r1, #16]
 800be8e:	b96b      	cbnz	r3, 800beac <_svfiprintf_r+0x34>
 800be90:	2140      	movs	r1, #64	; 0x40
 800be92:	f7ff ff3d 	bl	800bd10 <_malloc_r>
 800be96:	6020      	str	r0, [r4, #0]
 800be98:	6120      	str	r0, [r4, #16]
 800be9a:	b928      	cbnz	r0, 800bea8 <_svfiprintf_r+0x30>
 800be9c:	230c      	movs	r3, #12
 800be9e:	f8c8 3000 	str.w	r3, [r8]
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295
 800bea6:	e0c8      	b.n	800c03a <_svfiprintf_r+0x1c2>
 800bea8:	2340      	movs	r3, #64	; 0x40
 800beaa:	6163      	str	r3, [r4, #20]
 800beac:	2300      	movs	r3, #0
 800beae:	9309      	str	r3, [sp, #36]	; 0x24
 800beb0:	2320      	movs	r3, #32
 800beb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800beb6:	2330      	movs	r3, #48	; 0x30
 800beb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bebc:	9503      	str	r5, [sp, #12]
 800bebe:	f04f 0b01 	mov.w	fp, #1
 800bec2:	4637      	mov	r7, r6
 800bec4:	463d      	mov	r5, r7
 800bec6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beca:	b10b      	cbz	r3, 800bed0 <_svfiprintf_r+0x58>
 800becc:	2b25      	cmp	r3, #37	; 0x25
 800bece:	d13e      	bne.n	800bf4e <_svfiprintf_r+0xd6>
 800bed0:	ebb7 0a06 	subs.w	sl, r7, r6
 800bed4:	d00b      	beq.n	800beee <_svfiprintf_r+0x76>
 800bed6:	4653      	mov	r3, sl
 800bed8:	4632      	mov	r2, r6
 800beda:	4621      	mov	r1, r4
 800bedc:	4640      	mov	r0, r8
 800bede:	f7ff ff71 	bl	800bdc4 <__ssputs_r>
 800bee2:	3001      	adds	r0, #1
 800bee4:	f000 80a4 	beq.w	800c030 <_svfiprintf_r+0x1b8>
 800bee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beea:	4453      	add	r3, sl
 800beec:	9309      	str	r3, [sp, #36]	; 0x24
 800beee:	783b      	ldrb	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f000 809d 	beq.w	800c030 <_svfiprintf_r+0x1b8>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f04f 32ff 	mov.w	r2, #4294967295
 800befc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	9307      	str	r3, [sp, #28]
 800bf04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf08:	931a      	str	r3, [sp, #104]	; 0x68
 800bf0a:	462f      	mov	r7, r5
 800bf0c:	2205      	movs	r2, #5
 800bf0e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bf12:	4850      	ldr	r0, [pc, #320]	; (800c054 <_svfiprintf_r+0x1dc>)
 800bf14:	f7f4 f964 	bl	80001e0 <memchr>
 800bf18:	9b04      	ldr	r3, [sp, #16]
 800bf1a:	b9d0      	cbnz	r0, 800bf52 <_svfiprintf_r+0xda>
 800bf1c:	06d9      	lsls	r1, r3, #27
 800bf1e:	bf44      	itt	mi
 800bf20:	2220      	movmi	r2, #32
 800bf22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf26:	071a      	lsls	r2, r3, #28
 800bf28:	bf44      	itt	mi
 800bf2a:	222b      	movmi	r2, #43	; 0x2b
 800bf2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bf30:	782a      	ldrb	r2, [r5, #0]
 800bf32:	2a2a      	cmp	r2, #42	; 0x2a
 800bf34:	d015      	beq.n	800bf62 <_svfiprintf_r+0xea>
 800bf36:	9a07      	ldr	r2, [sp, #28]
 800bf38:	462f      	mov	r7, r5
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	250a      	movs	r5, #10
 800bf3e:	4639      	mov	r1, r7
 800bf40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf44:	3b30      	subs	r3, #48	; 0x30
 800bf46:	2b09      	cmp	r3, #9
 800bf48:	d94d      	bls.n	800bfe6 <_svfiprintf_r+0x16e>
 800bf4a:	b1b8      	cbz	r0, 800bf7c <_svfiprintf_r+0x104>
 800bf4c:	e00f      	b.n	800bf6e <_svfiprintf_r+0xf6>
 800bf4e:	462f      	mov	r7, r5
 800bf50:	e7b8      	b.n	800bec4 <_svfiprintf_r+0x4c>
 800bf52:	4a40      	ldr	r2, [pc, #256]	; (800c054 <_svfiprintf_r+0x1dc>)
 800bf54:	1a80      	subs	r0, r0, r2
 800bf56:	fa0b f000 	lsl.w	r0, fp, r0
 800bf5a:	4318      	orrs	r0, r3
 800bf5c:	9004      	str	r0, [sp, #16]
 800bf5e:	463d      	mov	r5, r7
 800bf60:	e7d3      	b.n	800bf0a <_svfiprintf_r+0x92>
 800bf62:	9a03      	ldr	r2, [sp, #12]
 800bf64:	1d11      	adds	r1, r2, #4
 800bf66:	6812      	ldr	r2, [r2, #0]
 800bf68:	9103      	str	r1, [sp, #12]
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	db01      	blt.n	800bf72 <_svfiprintf_r+0xfa>
 800bf6e:	9207      	str	r2, [sp, #28]
 800bf70:	e004      	b.n	800bf7c <_svfiprintf_r+0x104>
 800bf72:	4252      	negs	r2, r2
 800bf74:	f043 0302 	orr.w	r3, r3, #2
 800bf78:	9207      	str	r2, [sp, #28]
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	783b      	ldrb	r3, [r7, #0]
 800bf7e:	2b2e      	cmp	r3, #46	; 0x2e
 800bf80:	d10c      	bne.n	800bf9c <_svfiprintf_r+0x124>
 800bf82:	787b      	ldrb	r3, [r7, #1]
 800bf84:	2b2a      	cmp	r3, #42	; 0x2a
 800bf86:	d133      	bne.n	800bff0 <_svfiprintf_r+0x178>
 800bf88:	9b03      	ldr	r3, [sp, #12]
 800bf8a:	1d1a      	adds	r2, r3, #4
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	9203      	str	r2, [sp, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	bfb8      	it	lt
 800bf94:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf98:	3702      	adds	r7, #2
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	4d2e      	ldr	r5, [pc, #184]	; (800c058 <_svfiprintf_r+0x1e0>)
 800bf9e:	7839      	ldrb	r1, [r7, #0]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	f7f4 f91c 	bl	80001e0 <memchr>
 800bfa8:	b138      	cbz	r0, 800bfba <_svfiprintf_r+0x142>
 800bfaa:	2340      	movs	r3, #64	; 0x40
 800bfac:	1b40      	subs	r0, r0, r5
 800bfae:	fa03 f000 	lsl.w	r0, r3, r0
 800bfb2:	9b04      	ldr	r3, [sp, #16]
 800bfb4:	4303      	orrs	r3, r0
 800bfb6:	3701      	adds	r7, #1
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	7839      	ldrb	r1, [r7, #0]
 800bfbc:	4827      	ldr	r0, [pc, #156]	; (800c05c <_svfiprintf_r+0x1e4>)
 800bfbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bfc2:	2206      	movs	r2, #6
 800bfc4:	1c7e      	adds	r6, r7, #1
 800bfc6:	f7f4 f90b 	bl	80001e0 <memchr>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d038      	beq.n	800c040 <_svfiprintf_r+0x1c8>
 800bfce:	4b24      	ldr	r3, [pc, #144]	; (800c060 <_svfiprintf_r+0x1e8>)
 800bfd0:	bb13      	cbnz	r3, 800c018 <_svfiprintf_r+0x1a0>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	3307      	adds	r3, #7
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	3308      	adds	r3, #8
 800bfdc:	9303      	str	r3, [sp, #12]
 800bfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfe0:	444b      	add	r3, r9
 800bfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800bfe4:	e76d      	b.n	800bec2 <_svfiprintf_r+0x4a>
 800bfe6:	fb05 3202 	mla	r2, r5, r2, r3
 800bfea:	2001      	movs	r0, #1
 800bfec:	460f      	mov	r7, r1
 800bfee:	e7a6      	b.n	800bf3e <_svfiprintf_r+0xc6>
 800bff0:	2300      	movs	r3, #0
 800bff2:	3701      	adds	r7, #1
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	4619      	mov	r1, r3
 800bff8:	250a      	movs	r5, #10
 800bffa:	4638      	mov	r0, r7
 800bffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c000:	3a30      	subs	r2, #48	; 0x30
 800c002:	2a09      	cmp	r2, #9
 800c004:	d903      	bls.n	800c00e <_svfiprintf_r+0x196>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d0c8      	beq.n	800bf9c <_svfiprintf_r+0x124>
 800c00a:	9105      	str	r1, [sp, #20]
 800c00c:	e7c6      	b.n	800bf9c <_svfiprintf_r+0x124>
 800c00e:	fb05 2101 	mla	r1, r5, r1, r2
 800c012:	2301      	movs	r3, #1
 800c014:	4607      	mov	r7, r0
 800c016:	e7f0      	b.n	800bffa <_svfiprintf_r+0x182>
 800c018:	ab03      	add	r3, sp, #12
 800c01a:	9300      	str	r3, [sp, #0]
 800c01c:	4622      	mov	r2, r4
 800c01e:	4b11      	ldr	r3, [pc, #68]	; (800c064 <_svfiprintf_r+0x1ec>)
 800c020:	a904      	add	r1, sp, #16
 800c022:	4640      	mov	r0, r8
<<<<<<< HEAD
 800c024:	f7fc fbfe 	bl	8008824 <_printf_float>
=======
 800c024:	f7fc fc00 	bl	8008828 <_printf_float>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800c028:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c02c:	4681      	mov	r9, r0
 800c02e:	d1d6      	bne.n	800bfde <_svfiprintf_r+0x166>
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	065b      	lsls	r3, r3, #25
 800c034:	f53f af35 	bmi.w	800bea2 <_svfiprintf_r+0x2a>
 800c038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c03a:	b01d      	add	sp, #116	; 0x74
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	ab03      	add	r3, sp, #12
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	4622      	mov	r2, r4
 800c046:	4b07      	ldr	r3, [pc, #28]	; (800c064 <_svfiprintf_r+0x1ec>)
 800c048:	a904      	add	r1, sp, #16
 800c04a:	4640      	mov	r0, r8
<<<<<<< HEAD
 800c04c:	f7fc fea0 	bl	8008d90 <_printf_i>
=======
 800c04c:	f7fc fea2 	bl	8008d94 <_printf_i>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800c050:	e7ea      	b.n	800c028 <_svfiprintf_r+0x1b0>
 800c052:	bf00      	nop
 800c054:	0800c334 	.word	0x0800c334
 800c058:	0800c33a 	.word	0x0800c33a
 800c05c:	0800c33e 	.word	0x0800c33e
<<<<<<< HEAD
 800c060:	08008825 	.word	0x08008825
=======
 800c060:	08008829 	.word	0x08008829
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800c064:	0800bdc5 	.word	0x0800bdc5

0800c068 <_sbrk_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4c06      	ldr	r4, [pc, #24]	; (800c084 <_sbrk_r+0x1c>)
 800c06c:	2300      	movs	r3, #0
 800c06e:	4605      	mov	r5, r0
 800c070:	4608      	mov	r0, r1
 800c072:	6023      	str	r3, [r4, #0]
<<<<<<< HEAD
 800c074:	f7f8 fa58 	bl	8004528 <_sbrk>
=======
 800c074:	f7f8 fa5a 	bl	800452c <_sbrk>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_sbrk_r+0x1a>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_sbrk_r+0x1a>
 800c080:	602b      	str	r3, [r5, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	200008b8 	.word	0x200008b8

0800c088 <strncmp>:
 800c088:	b510      	push	{r4, lr}
 800c08a:	b16a      	cbz	r2, 800c0a8 <strncmp+0x20>
 800c08c:	3901      	subs	r1, #1
 800c08e:	1884      	adds	r4, r0, r2
 800c090:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c094:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c098:	4293      	cmp	r3, r2
 800c09a:	d103      	bne.n	800c0a4 <strncmp+0x1c>
 800c09c:	42a0      	cmp	r0, r4
 800c09e:	d001      	beq.n	800c0a4 <strncmp+0x1c>
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1f5      	bne.n	800c090 <strncmp+0x8>
 800c0a4:	1a98      	subs	r0, r3, r2
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	e7fc      	b.n	800c0a6 <strncmp+0x1e>

0800c0ac <__ascii_wctomb>:
 800c0ac:	b149      	cbz	r1, 800c0c2 <__ascii_wctomb+0x16>
 800c0ae:	2aff      	cmp	r2, #255	; 0xff
 800c0b0:	bf85      	ittet	hi
 800c0b2:	238a      	movhi	r3, #138	; 0x8a
 800c0b4:	6003      	strhi	r3, [r0, #0]
 800c0b6:	700a      	strbls	r2, [r1, #0]
 800c0b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800c0bc:	bf98      	it	ls
 800c0be:	2001      	movls	r0, #1
 800c0c0:	4770      	bx	lr
 800c0c2:	4608      	mov	r0, r1
 800c0c4:	4770      	bx	lr

0800c0c6 <memmove>:
 800c0c6:	4288      	cmp	r0, r1
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	eb01 0302 	add.w	r3, r1, r2
 800c0ce:	d807      	bhi.n	800c0e0 <memmove+0x1a>
 800c0d0:	1e42      	subs	r2, r0, #1
 800c0d2:	4299      	cmp	r1, r3
 800c0d4:	d00a      	beq.n	800c0ec <memmove+0x26>
 800c0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0da:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c0de:	e7f8      	b.n	800c0d2 <memmove+0xc>
 800c0e0:	4283      	cmp	r3, r0
 800c0e2:	d9f5      	bls.n	800c0d0 <memmove+0xa>
 800c0e4:	1881      	adds	r1, r0, r2
 800c0e6:	1ad2      	subs	r2, r2, r3
 800c0e8:	42d3      	cmn	r3, r2
 800c0ea:	d100      	bne.n	800c0ee <memmove+0x28>
 800c0ec:	bd10      	pop	{r4, pc}
 800c0ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c0f6:	e7f7      	b.n	800c0e8 <memmove+0x22>

0800c0f8 <__malloc_lock>:
 800c0f8:	4770      	bx	lr

0800c0fa <__malloc_unlock>:
 800c0fa:	4770      	bx	lr

0800c0fc <_realloc_r>:
 800c0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0fe:	4607      	mov	r7, r0
 800c100:	4614      	mov	r4, r2
 800c102:	460e      	mov	r6, r1
 800c104:	b921      	cbnz	r1, 800c110 <_realloc_r+0x14>
 800c106:	4611      	mov	r1, r2
 800c108:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c10c:	f7ff be00 	b.w	800bd10 <_malloc_r>
 800c110:	b922      	cbnz	r2, 800c11c <_realloc_r+0x20>
 800c112:	f7ff fdaf 	bl	800bc74 <_free_r>
 800c116:	4625      	mov	r5, r4
 800c118:	4628      	mov	r0, r5
 800c11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c11c:	f000 f814 	bl	800c148 <_malloc_usable_size_r>
 800c120:	42a0      	cmp	r0, r4
 800c122:	d20f      	bcs.n	800c144 <_realloc_r+0x48>
 800c124:	4621      	mov	r1, r4
 800c126:	4638      	mov	r0, r7
 800c128:	f7ff fdf2 	bl	800bd10 <_malloc_r>
 800c12c:	4605      	mov	r5, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d0f2      	beq.n	800c118 <_realloc_r+0x1c>
 800c132:	4631      	mov	r1, r6
 800c134:	4622      	mov	r2, r4
<<<<<<< HEAD
 800c136:	f7fc facd 	bl	80086d4 <memcpy>
=======
 800c136:	f7fc facf 	bl	80086d8 <memcpy>
>>>>>>> bfab13d99c63e57e7b85457cc3989b0020f7f8dc
 800c13a:	4631      	mov	r1, r6
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff fd99 	bl	800bc74 <_free_r>
 800c142:	e7e9      	b.n	800c118 <_realloc_r+0x1c>
 800c144:	4635      	mov	r5, r6
 800c146:	e7e7      	b.n	800c118 <_realloc_r+0x1c>

0800c148 <_malloc_usable_size_r>:
 800c148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c14c:	1f18      	subs	r0, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bfbc      	itt	lt
 800c152:	580b      	ldrlt	r3, [r1, r0]
 800c154:	18c0      	addlt	r0, r0, r3
 800c156:	4770      	bx	lr

0800c158 <_init>:
 800c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15a:	bf00      	nop
 800c15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15e:	bc08      	pop	{r3}
 800c160:	469e      	mov	lr, r3
 800c162:	4770      	bx	lr

0800c164 <_fini>:
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c166:	bf00      	nop
 800c168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c16a:	bc08      	pop	{r3}
 800c16c:	469e      	mov	lr, r3
 800c16e:	4770      	bx	lr

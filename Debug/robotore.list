
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  08010df8  08010df8  00020df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011748  08011748  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08011748  08011748  00021748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011750  08011750  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011750  08011750  00021750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011754  08011754  00021754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08011758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ef08  20000210  08011968  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f118  08011968  0003f118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c17  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000491b  00000000  00000000  00052e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019b8  00000000  00000000  00057778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c8  00000000  00000000  00059130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017362  00000000  00000000  0007f382  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb4ba  00000000  00000000  000966e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008058  00000000  00000000  00161c1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010ddc 	.word	0x08010ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010ddc 	.word	0x08010ddc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc53 	bl	800184c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fbee 	bl	80098cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fbea 	bl	80098cc <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001eccc 	.word	0x2001eccc
 8001110:	2001ec8c 	.word	0x2001ec8c
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <updateEncoderCnt+0x178>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b59      	ldr	r3, [pc, #356]	; (800129c <updateEncoderCnt+0x17c>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b59      	ldr	r3, [pc, #356]	; (80012a0 <updateEncoderCnt+0x180>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <updateEncoderCnt+0x184>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <updateEncoderCnt+0x188>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b51      	ldr	r3, [pc, #324]	; (800129c <updateEncoderCnt+0x17c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <updateEncoderCnt+0x188>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <updateEncoderCnt+0x18c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <updateEncoderCnt+0x184>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <updateEncoderCnt+0x18c>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <updateEncoderCnt+0x17c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <updateEncoderCnt+0x184>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a33e      	add	r3, pc, #248	; (adr r3, 8001290 <updateEncoderCnt+0x170>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <updateEncoderCnt+0x190>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <updateEncoderCnt+0x194>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <updateEncoderCnt+0x190>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <updateEncoderCnt+0x194>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	distance_30mm += distance_1ms;
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <updateEncoderCnt+0x198>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b33      	ldr	r3, [pc, #204]	; (80012b0 <updateEncoderCnt+0x190>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b32      	ldr	r3, [pc, #200]	; (80012b8 <updateEncoderCnt+0x198>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <updateEncoderCnt+0x19c>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <updateEncoderCnt+0x190>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <updateEncoderCnt+0x19c>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001208:	4b2d      	ldr	r3, [pc, #180]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <updateEncoderCnt+0x190>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <updateEncoderCnt+0x1a0>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <updateEncoderCnt+0x190>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <updateEncoderCnt+0x1a4>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001234:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <updateEncoderCnt+0x190>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <updateEncoderCnt+0x1a8>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <updateEncoderCnt+0x1ac>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <updateEncoderCnt+0x190>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <updateEncoderCnt+0x1ac>)
 800125c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001262:	ed93 7a00 	vldr	s14, [r3]
 8001266:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <updateEncoderCnt+0x190>)
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <updateEncoderCnt+0x1b0>)
 8001272:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <updateEncoderCnt+0x178>)
 8001278:	f242 7210 	movw	r2, #10000	; 0x2710
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <updateEncoderCnt+0x180>)
 8001280:	f242 7210 	movw	r2, #10000	; 0x2710
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001286:	bf00      	nop
 8001288:	bd98      	pop	{r3, r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	bec93a2d 	.word	0xbec93a2d
 8001294:	3f8c463a 	.word	0x3f8c463a
 8001298:	40000400 	.word	0x40000400
 800129c:	20000244 	.word	0x20000244
 80012a0:	40000800 	.word	0x40000800
 80012a4:	20000246 	.word	0x20000246
 80012a8:	20000248 	.word	0x20000248
 80012ac:	2000024a 	.word	0x2000024a
 80012b0:	2000024c 	.word	0x2000024c
 80012b4:	20000250 	.word	0x20000250
 80012b8:	20000254 	.word	0x20000254
 80012bc:	20000258 	.word	0x20000258
 80012c0:	2000025c 	.word	0x2000025c
 80012c4:	20000260 	.word	0x20000260
 80012c8:	20000264 	.word	0x20000264
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000026c 	.word	0x2000026c

080012d4 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <getEncoderCnt+0x2c>)
 80012e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <getEncoderCnt+0x30>)
 80012ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000244 	.word	0x20000244
 8001304:	20000246 	.word	0x20000246

08001308 <getTotalDistance>:

float getTotalDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return total_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getTotalDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getGoalJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001344:	4b04      	ldr	r3, [pc, #16]	; (8001358 <getSideLineJudgeDistance+0x18>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	ee07 3a90 	vmov	s15, r3
}
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000264 	.word	0x20000264

0800135c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <setTotalDistance+0x1c>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	2000025c 	.word	0x2000025c

0800137c <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <getCrossLineIgnoreDistance+0x18>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	20000268 	.word	0x20000268

08001398 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	total_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearTotalDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearGoalJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearSideLineJudgeDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearCrossLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <clearSideLineIgnoreDistance+0x18>)
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000026c 	.word	0x2000026c

08001424 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <getDistance10mm+0x18>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000250 	.word	0x20000250

08001440 <clearDistance10mm>:

void clearDistance10mm(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <clearDistance10mm+0x18>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000250 	.word	0x20000250

0800145c <getDistance30mm>:

float getDistance30mm(void){
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	return distance_30mm;
 8001460:	4b04      	ldr	r3, [pc, #16]	; (8001474 <getDistance30mm+0x18>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ee07 3a90 	vmov	s15, r3
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20000254 	.word	0x20000254

08001478 <clearDistance30mm>:

void clearDistance30mm(void){
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	distance_30mm = 0;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <clearDistance30mm+0x18>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000254 	.word	0x20000254
 8001494:	00000000 	.word	0x00000000

08001498 <getspeedcount>:

float getspeedcount(void){
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <getspeedcount+0x60>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	db16      	blt.n	80014de <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <getspeedcount+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f847 	bl	8000548 <__aeabi_f2d>
 80014ba:	a30d      	add	r3, pc, #52	; (adr r3, 80014f0 <getspeedcount+0x58>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f7fe fee4 	bl	800028c <__adddf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	460c      	mov	r4, r1
 80014c8:	4618      	mov	r0, r3
 80014ca:	4621      	mov	r1, r4
 80014cc:	f7ff fb8c 	bl	8000be8 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <getspeedcount+0x64>)
 80014d4:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <getspeedcount+0x60>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <getspeedcount+0x64>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	bd98      	pop	{r3, r4, r7, pc}
 80014ec:	f3af 8000 	nop.w
 80014f0:	9999999a 	.word	0x9999999a
 80014f4:	3fb99999 	.word	0x3fb99999
 80014f8:	20000258 	.word	0x20000258
 80014fc:	20000270 	.word	0x20000270

08001500 <clearspeedcount>:

void clearspeedcount(void){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <clearspeedcount+0x14>)
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <clearspeedcount+0x18>)
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	20000270 	.word	0x20000270
 8001518:	3dcccccd 	.word	0x3dcccccd

0800151c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <FLASH_Unlock+0x1c>)
 8001522:	4a06      	ldr	r2, [pc, #24]	; (800153c <FLASH_Unlock+0x20>)
 8001524:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <FLASH_Unlock+0x1c>)
 8001528:	4a05      	ldr	r2, [pc, #20]	; (8001540 <FLASH_Unlock+0x24>)
 800152a:	605a      	str	r2, [r3, #4]
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023c00 	.word	0x40023c00
 800153c:	45670123 	.word	0x45670123
 8001540:	cdef89ab 	.word	0xcdef89ab

08001544 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <FLASH_Lock+0x1c>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <FLASH_Lock+0x1c>)
 800154e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001552:	6113      	str	r3, [r2, #16]

}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40023c00 	.word	0x40023c00

08001564 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001568:	bf00      	nop
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <FLASH_WaitBusy+0x1c>)
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f9      	bne.n	800156a <FLASH_WaitBusy+0x6>
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40023c00 	.word	0x40023c00

08001584 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800158e:	f006 f9d5 	bl	800793c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 800159e:	2302      	movs	r3, #2
 80015a0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f006 fa8b 	bl	8007acc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015b6:	f006 f9e3 	bl	8007980 <HAL_FLASH_Lock>
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 80015d0:	f7ff ffa4 	bl	800151c <FLASH_Unlock>

	FLASH_WaitBusy();
 80015d4:	f7ff ffc6 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e2:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 80015f6:	f7ff ffb5 	bl	8001564 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <FLASH_Write_Word_F+0x50>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <FLASH_Write_Word_F+0x50>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001606:	f7ff ff9d 	bl	8001544 <FLASH_Lock>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023c00 	.word	0x40023c00

08001618 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800161e:	f001 ffad 	bl	800357c <IMU_init>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001626:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800162a:	f005 f8f1 	bl	8006810 <HAL_Delay>

	return who_i_am;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <updateIMUValue>:

void updateIMUValue(){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800163e:	f001 ffc1 	bl	80035c4 <read_gyro_data>
	zg_ = zg;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <updateIMUValue+0x188>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <updateIMUValue+0x18c>)
 800164a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <updateIMUValue+0x188>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff66 	bl	8000524 <__aeabi_i2d>
 8001658:	4604      	mov	r4, r0
 800165a:	460d      	mov	r5, r1
 800165c:	4b5a      	ldr	r3, [pc, #360]	; (80017c8 <updateIMUValue+0x190>)
 800165e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff5e 	bl	8000524 <__aeabi_i2d>
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	f7fe ffc2 	bl	80005f8 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4620      	mov	r0, r4
 800167a:	4629      	mov	r1, r5
 800167c:	f7fe fe06 	bl	800028c <__adddf3>
 8001680:	4603      	mov	r3, r0
 8001682:	460c      	mov	r4, r1
 8001684:	4618      	mov	r0, r3
 8001686:	4621      	mov	r1, r4
 8001688:	f7ff fa66 	bl	8000b58 <__aeabi_d2iz>
 800168c:	4603      	mov	r3, r0
 800168e:	b21a      	sxth	r2, r3
 8001690:	4b4c      	ldr	r3, [pc, #304]	; (80017c4 <updateIMUValue+0x18c>)
 8001692:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <updateIMUValue+0x18c>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a2:	4b4a      	ldr	r3, [pc, #296]	; (80017cc <updateIMUValue+0x194>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	b21a      	sxth	r2, r3
 80016b6:	4b43      	ldr	r3, [pc, #268]	; (80017c4 <updateIMUValue+0x18c>)
 80016b8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016ba:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <updateIMUValue+0x18c>)
 80016bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016c0:	4b41      	ldr	r3, [pc, #260]	; (80017c8 <updateIMUValue+0x190>)
 80016c2:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80016c4:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <updateIMUValue+0x18c>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	ee07 3a90 	vmov	s15, r3
 80016ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d2:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a332      	add	r3, pc, #200	; (adr r3, 80017a8 <updateIMUValue+0x170>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7ff f8b3 	bl	800084c <__aeabi_ddiv>
 80016e6:	4603      	mov	r3, r0
 80016e8:	460c      	mov	r4, r1
 80016ea:	4618      	mov	r0, r3
 80016ec:	4621      	mov	r1, r4
 80016ee:	a330      	add	r3, pc, #192	; (adr r3, 80017b0 <updateIMUValue+0x178>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ff80 	bl	80005f8 <__aeabi_dmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	4618      	mov	r0, r3
 80016fe:	4621      	mov	r1, r4
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <updateIMUValue+0x198>)
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff fa69 	bl	8000be8 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <updateIMUValue+0x19c>)
 800171a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <updateIMUValue+0x1a0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe ff11 	bl	8000548 <__aeabi_f2d>
 8001726:	4604      	mov	r4, r0
 8001728:	460d      	mov	r5, r1
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <updateIMUValue+0x19c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff0a 	bl	8000548 <__aeabi_f2d>
 8001734:	a320      	add	r3, pc, #128	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe ff5d 	bl	80005f8 <__aeabi_dmul>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4620      	mov	r0, r4
 8001744:	4629      	mov	r1, r5
 8001746:	f7fe fda1 	bl	800028c <__adddf3>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <updateIMUValue+0x1a0>)
 800175a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800175c:	4b1f      	ldr	r3, [pc, #124]	; (80017dc <updateIMUValue+0x1a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a310      	add	r3, pc, #64	; (adr r3, 80017b8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <updateIMUValue+0x1a4>)
 800179a:	601a      	str	r2, [r3, #0]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bdb0      	pop	{r4, r5, r7, pc}
 80017a4:	f3af 8000 	nop.w
 80017a8:	66666666 	.word	0x66666666
 80017ac:	40306666 	.word	0x40306666
 80017b0:	54411744 	.word	0x54411744
 80017b4:	400921fb 	.word	0x400921fb
 80017b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017bc:	3f50624d 	.word	0x3f50624d
 80017c0:	2001edf4 	.word	0x2001edf4
 80017c4:	2001ed0c 	.word	0x2001ed0c
 80017c8:	20000278 	.word	0x20000278
 80017cc:	20000274 	.word	0x20000274
 80017d0:	40668000 	.word	0x40668000
 80017d4:	2001ed1c 	.word	0x2001ed1c
 80017d8:	2001ed14 	.word	0x2001ed14
 80017dc:	2001ed18 	.word	0x2001ed18

080017e0 <IMU_average>:

void IMU_average(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	float average = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	e015      	b.n	800181e <IMU_average+0x3e>
		average = average+zg;
 80017f2:	4b13      	ldr	r3, [pc, #76]	; (8001840 <IMU_average+0x60>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ed97 7a01 	vldr	s14, [r7, #4]
 8001804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001808:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800180c:	2001      	movs	r0, #1
 800180e:	f004 ffff 	bl	8006810 <HAL_Delay>
		setLED2('A');
 8001812:	2041      	movs	r0, #65	; 0x41
 8001814:	f000 f920 	bl	8001a58 <setLED2>
	for(int i = 0; i <= 1000; i++){
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001824:	dde5      	ble.n	80017f2 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001826:	ed97 7a01 	vldr	s14, [r7, #4]
 800182a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001844 <IMU_average+0x64>
 800182e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <IMU_average+0x68>)
 8001834:	edc3 7a00 	vstr	s15, [r3]
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2001edf4 	.word	0x2001edf4
 8001844:	447a0000 	.word	0x447a0000
 8001848:	20000274 	.word	0x20000274

0800184c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <getTheta10mm+0x18>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	ee07 3a90 	vmov	s15, r3
}
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2001ed14 	.word	0x2001ed14

08001868 <clearTheta10mm>:

void clearTheta10mm()
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <clearTheta10mm+0x18>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	2001ed14 	.word	0x2001ed14

08001884 <getaddTheta>:

float getaddTheta()
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
	return add_theta;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <getaddTheta+0x18>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ee07 3a90 	vmov	s15, r3
}
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	2001ed18 	.word	0x2001ed18

080018a0 <clearaddTheta>:

void clearaddTheta()
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <clearaddTheta+0x18>)
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2001ed18 	.word	0x2001ed18

080018bc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b52      	cmp	r3, #82	; 0x52
 80018ca:	d112      	bne.n	80018f2 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80018cc:	2200      	movs	r2, #0
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	4860      	ldr	r0, [pc, #384]	; (8001a54 <setLED+0x198>)
 80018d4:	f006 fbce 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	485d      	ldr	r0, [pc, #372]	; (8001a54 <setLED+0x198>)
 80018e0:	f006 fbc8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	485a      	ldr	r0, [pc, #360]	; (8001a54 <setLED+0x198>)
 80018ec:	f006 fbc2 	bl	8008074 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80018f0:	e0ab      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'G'){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b47      	cmp	r3, #71	; 0x47
 80018f6:	d112      	bne.n	800191e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	4855      	ldr	r0, [pc, #340]	; (8001a54 <setLED+0x198>)
 8001900:	f006 fbb8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001904:	2200      	movs	r2, #0
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4852      	ldr	r0, [pc, #328]	; (8001a54 <setLED+0x198>)
 800190c:	f006 fbb2 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	484f      	ldr	r0, [pc, #316]	; (8001a54 <setLED+0x198>)
 8001918:	f006 fbac 	bl	8008074 <HAL_GPIO_WritePin>
}
 800191c:	e095      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'B'){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b42      	cmp	r3, #66	; 0x42
 8001922:	d112      	bne.n	800194a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	484a      	ldr	r0, [pc, #296]	; (8001a54 <setLED+0x198>)
 800192c:	f006 fba2 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4847      	ldr	r0, [pc, #284]	; (8001a54 <setLED+0x198>)
 8001938:	f006 fb9c 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800193c:	2200      	movs	r2, #0
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	4844      	ldr	r0, [pc, #272]	; (8001a54 <setLED+0x198>)
 8001944:	f006 fb96 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001948:	e07f      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'M'){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b4d      	cmp	r3, #77	; 0x4d
 800194e:	d112      	bne.n	8001976 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	483f      	ldr	r0, [pc, #252]	; (8001a54 <setLED+0x198>)
 8001958:	f006 fb8c 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	483c      	ldr	r0, [pc, #240]	; (8001a54 <setLED+0x198>)
 8001964:	f006 fb86 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4839      	ldr	r0, [pc, #228]	; (8001a54 <setLED+0x198>)
 8001970:	f006 fb80 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001974:	e069      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'Y'){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b59      	cmp	r3, #89	; 0x59
 800197a:	d112      	bne.n	80019a2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	4834      	ldr	r0, [pc, #208]	; (8001a54 <setLED+0x198>)
 8001984:	f006 fb76 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198e:	4831      	ldr	r0, [pc, #196]	; (8001a54 <setLED+0x198>)
 8001990:	f006 fb70 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	482e      	ldr	r0, [pc, #184]	; (8001a54 <setLED+0x198>)
 800199c:	f006 fb6a 	bl	8008074 <HAL_GPIO_WritePin>
}
 80019a0:	e053      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'C'){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b43      	cmp	r3, #67	; 0x43
 80019a6:	d112      	bne.n	80019ce <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4829      	ldr	r0, [pc, #164]	; (8001a54 <setLED+0x198>)
 80019b0:	f006 fb60 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4826      	ldr	r0, [pc, #152]	; (8001a54 <setLED+0x198>)
 80019bc:	f006 fb5a 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	4823      	ldr	r0, [pc, #140]	; (8001a54 <setLED+0x198>)
 80019c8:	f006 fb54 	bl	8008074 <HAL_GPIO_WritePin>
}
 80019cc:	e03d      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'W'){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2b57      	cmp	r3, #87	; 0x57
 80019d2:	d112      	bne.n	80019fa <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d4:	2200      	movs	r2, #0
 80019d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019da:	481e      	ldr	r0, [pc, #120]	; (8001a54 <setLED+0x198>)
 80019dc:	f006 fb4a 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e6:	481b      	ldr	r0, [pc, #108]	; (8001a54 <setLED+0x198>)
 80019e8:	f006 fb44 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f2:	4818      	ldr	r0, [pc, #96]	; (8001a54 <setLED+0x198>)
 80019f4:	f006 fb3e 	bl	8008074 <HAL_GPIO_WritePin>
}
 80019f8:	e027      	b.n	8001a4a <setLED+0x18e>
	else if(color == 'N'){
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b4e      	cmp	r3, #78	; 0x4e
 80019fe:	d112      	bne.n	8001a26 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a06:	4813      	ldr	r0, [pc, #76]	; (8001a54 <setLED+0x198>)
 8001a08:	f006 fb34 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <setLED+0x198>)
 8001a14:	f006 fb2e 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1e:	480d      	ldr	r0, [pc, #52]	; (8001a54 <setLED+0x198>)
 8001a20:	f006 fb28 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001a24:	e011      	b.n	8001a4a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2c:	4809      	ldr	r0, [pc, #36]	; (8001a54 <setLED+0x198>)
 8001a2e:	f006 fb21 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a38:	4806      	ldr	r0, [pc, #24]	; (8001a54 <setLED+0x198>)
 8001a3a:	f006 fb1b 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a44:	4803      	ldr	r0, [pc, #12]	; (8001a54 <setLED+0x198>)
 8001a46:	f006 fb15 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020800 	.word	0x40020800

08001a58 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b52      	cmp	r3, #82	; 0x52
 8001a66:	d124      	bne.n	8001ab2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6e:	48c5      	ldr	r0, [pc, #788]	; (8001d84 <setLED2+0x32c>)
 8001a70:	f006 fb00 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a74:	2201      	movs	r2, #1
 8001a76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7a:	48c3      	ldr	r0, [pc, #780]	; (8001d88 <setLED2+0x330>)
 8001a7c:	f006 fafa 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a86:	48c0      	ldr	r0, [pc, #768]	; (8001d88 <setLED2+0x330>)
 8001a88:	f006 faf4 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a92:	48bd      	ldr	r0, [pc, #756]	; (8001d88 <setLED2+0x330>)
 8001a94:	f006 faee 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9e:	48ba      	ldr	r0, [pc, #744]	; (8001d88 <setLED2+0x330>)
 8001aa0:	f006 fae8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aaa:	48b7      	ldr	r0, [pc, #732]	; (8001d88 <setLED2+0x330>)
 8001aac:	f006 fae2 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001ab0:	e163      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'G'){
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b47      	cmp	r3, #71	; 0x47
 8001ab6:	d124      	bne.n	8001b02 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abe:	48b1      	ldr	r0, [pc, #708]	; (8001d84 <setLED2+0x32c>)
 8001ac0:	f006 fad8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aca:	48af      	ldr	r0, [pc, #700]	; (8001d88 <setLED2+0x330>)
 8001acc:	f006 fad2 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ad6:	48ac      	ldr	r0, [pc, #688]	; (8001d88 <setLED2+0x330>)
 8001ad8:	f006 facc 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	48a9      	ldr	r0, [pc, #676]	; (8001d88 <setLED2+0x330>)
 8001ae4:	f006 fac6 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	48a6      	ldr	r0, [pc, #664]	; (8001d88 <setLED2+0x330>)
 8001af0:	f006 fac0 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001afa:	48a3      	ldr	r0, [pc, #652]	; (8001d88 <setLED2+0x330>)
 8001afc:	f006 faba 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001b00:	e13b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'B'){
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b42      	cmp	r3, #66	; 0x42
 8001b06:	d124      	bne.n	8001b52 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b0e:	489d      	ldr	r0, [pc, #628]	; (8001d84 <setLED2+0x32c>)
 8001b10:	f006 fab0 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b1a:	489b      	ldr	r0, [pc, #620]	; (8001d88 <setLED2+0x330>)
 8001b1c:	f006 faaa 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b26:	4898      	ldr	r0, [pc, #608]	; (8001d88 <setLED2+0x330>)
 8001b28:	f006 faa4 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b32:	4895      	ldr	r0, [pc, #596]	; (8001d88 <setLED2+0x330>)
 8001b34:	f006 fa9e 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3e:	4892      	ldr	r0, [pc, #584]	; (8001d88 <setLED2+0x330>)
 8001b40:	f006 fa98 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b4a:	488f      	ldr	r0, [pc, #572]	; (8001d88 <setLED2+0x330>)
 8001b4c:	f006 fa92 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001b50:	e113      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'W'){
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	2b57      	cmp	r3, #87	; 0x57
 8001b56:	d124      	bne.n	8001ba2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b5e:	4889      	ldr	r0, [pc, #548]	; (8001d84 <setLED2+0x32c>)
 8001b60:	f006 fa88 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6a:	4887      	ldr	r0, [pc, #540]	; (8001d88 <setLED2+0x330>)
 8001b6c:	f006 fa82 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b76:	4884      	ldr	r0, [pc, #528]	; (8001d88 <setLED2+0x330>)
 8001b78:	f006 fa7c 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b82:	4881      	ldr	r0, [pc, #516]	; (8001d88 <setLED2+0x330>)
 8001b84:	f006 fa76 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b8e:	487e      	ldr	r0, [pc, #504]	; (8001d88 <setLED2+0x330>)
 8001b90:	f006 fa70 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b94:	2201      	movs	r2, #1
 8001b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9a:	487b      	ldr	r0, [pc, #492]	; (8001d88 <setLED2+0x330>)
 8001b9c:	f006 fa6a 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001ba0:	e0eb      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'Y'){
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b59      	cmp	r3, #89	; 0x59
 8001ba6:	d124      	bne.n	8001bf2 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <setLED2+0x32c>)
 8001bb0:	f006 fa60 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bba:	4873      	ldr	r0, [pc, #460]	; (8001d88 <setLED2+0x330>)
 8001bbc:	f006 fa5a 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc6:	4870      	ldr	r0, [pc, #448]	; (8001d88 <setLED2+0x330>)
 8001bc8:	f006 fa54 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	486d      	ldr	r0, [pc, #436]	; (8001d88 <setLED2+0x330>)
 8001bd4:	f006 fa4e 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bde:	486a      	ldr	r0, [pc, #424]	; (8001d88 <setLED2+0x330>)
 8001be0:	f006 fa48 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bea:	4867      	ldr	r0, [pc, #412]	; (8001d88 <setLED2+0x330>)
 8001bec:	f006 fa42 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001bf0:	e0c3      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'X'){
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b58      	cmp	r3, #88	; 0x58
 8001bf6:	d124      	bne.n	8001c42 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfe:	4861      	ldr	r0, [pc, #388]	; (8001d84 <setLED2+0x32c>)
 8001c00:	f006 fa38 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c04:	2201      	movs	r2, #1
 8001c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0a:	485f      	ldr	r0, [pc, #380]	; (8001d88 <setLED2+0x330>)
 8001c0c:	f006 fa32 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <setLED2+0x330>)
 8001c18:	f006 fa2c 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c22:	4859      	ldr	r0, [pc, #356]	; (8001d88 <setLED2+0x330>)
 8001c24:	f006 fa26 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2e:	4856      	ldr	r0, [pc, #344]	; (8001d88 <setLED2+0x330>)
 8001c30:	f006 fa20 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c3a:	4853      	ldr	r0, [pc, #332]	; (8001d88 <setLED2+0x330>)
 8001c3c:	f006 fa1a 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001c40:	e09b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'V'){
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b56      	cmp	r3, #86	; 0x56
 8001c46:	d124      	bne.n	8001c92 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c4e:	484d      	ldr	r0, [pc, #308]	; (8001d84 <setLED2+0x32c>)
 8001c50:	f006 fa10 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	484b      	ldr	r0, [pc, #300]	; (8001d88 <setLED2+0x330>)
 8001c5c:	f006 fa0a 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	4848      	ldr	r0, [pc, #288]	; (8001d88 <setLED2+0x330>)
 8001c68:	f006 fa04 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <setLED2+0x330>)
 8001c74:	f006 f9fe 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c7e:	4842      	ldr	r0, [pc, #264]	; (8001d88 <setLED2+0x330>)
 8001c80:	f006 f9f8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8a:	483f      	ldr	r0, [pc, #252]	; (8001d88 <setLED2+0x330>)
 8001c8c:	f006 f9f2 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001c90:	e073      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'T'){
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b54      	cmp	r3, #84	; 0x54
 8001c96:	d124      	bne.n	8001ce2 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <setLED2+0x32c>)
 8001ca0:	f006 f9e8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001caa:	4837      	ldr	r0, [pc, #220]	; (8001d88 <setLED2+0x330>)
 8001cac:	f006 f9e2 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <setLED2+0x330>)
 8001cb8:	f006 f9dc 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc2:	4831      	ldr	r0, [pc, #196]	; (8001d88 <setLED2+0x330>)
 8001cc4:	f006 f9d6 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cce:	482e      	ldr	r0, [pc, #184]	; (8001d88 <setLED2+0x330>)
 8001cd0:	f006 f9d0 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	482b      	ldr	r0, [pc, #172]	; (8001d88 <setLED2+0x330>)
 8001cdc:	f006 f9ca 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001ce0:	e04b      	b.n	8001d7a <setLED2+0x322>
	else if(color2 == 'A'){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b41      	cmp	r3, #65	; 0x41
 8001ce6:	d124      	bne.n	8001d32 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <setLED2+0x32c>)
 8001cf0:	f006 f9c0 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfa:	4823      	ldr	r0, [pc, #140]	; (8001d88 <setLED2+0x330>)
 8001cfc:	f006 f9ba 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d06:	4820      	ldr	r0, [pc, #128]	; (8001d88 <setLED2+0x330>)
 8001d08:	f006 f9b4 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d12:	481d      	ldr	r0, [pc, #116]	; (8001d88 <setLED2+0x330>)
 8001d14:	f006 f9ae 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	481a      	ldr	r0, [pc, #104]	; (8001d88 <setLED2+0x330>)
 8001d20:	f006 f9a8 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2a:	4817      	ldr	r0, [pc, #92]	; (8001d88 <setLED2+0x330>)
 8001d2c:	f006 f9a2 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001d30:	e023      	b.n	8001d7a <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d32:	2201      	movs	r2, #1
 8001d34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d38:	4812      	ldr	r0, [pc, #72]	; (8001d84 <setLED2+0x32c>)
 8001d3a:	f006 f99b 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <setLED2+0x330>)
 8001d46:	f006 f995 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d50:	480d      	ldr	r0, [pc, #52]	; (8001d88 <setLED2+0x330>)
 8001d52:	f006 f98f 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d56:	2201      	movs	r2, #1
 8001d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d5c:	480a      	ldr	r0, [pc, #40]	; (8001d88 <setLED2+0x330>)
 8001d5e:	f006 f989 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <setLED2+0x330>)
 8001d6a:	f006 f983 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <setLED2+0x330>)
 8001d76:	f006 f97d 	bl	8008074 <HAL_GPIO_WritePin>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	00000000 	.word	0x00000000

08001d90 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001d98:	4bb3      	ldr	r3, [pc, #716]	; (8002068 <calculateLineFollowingTermFlip+0x2d8>)
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	4bb3      	ldr	r3, [pc, #716]	; (800206c <calculateLineFollowingTermFlip+0x2dc>)
 8001d9e:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001da6:	4bb2      	ldr	r3, [pc, #712]	; (8002070 <calculateLineFollowingTermFlip+0x2e0>)
 8001da8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	f040 8140 	bne.w	8002032 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001db2:	4bb0      	ldr	r3, [pc, #704]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dba:	4baf      	ldr	r3, [pc, #700]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001dc2:	4bac      	ldr	r3, [pc, #688]	; (8002074 <calculateLineFollowingTermFlip+0x2e4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001dc8:	4bac      	ldr	r3, [pc, #688]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fba8 	bl	8000524 <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4ba9      	ldr	r3, [pc, #676]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001dda:	f7fe fc0d 	bl	80005f8 <__aeabi_dmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	460c      	mov	r4, r1
 8001de2:	4625      	mov	r5, r4
 8001de4:	461c      	mov	r4, r3
 8001de6:	4ba5      	ldr	r3, [pc, #660]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb99 	bl	8000524 <__aeabi_i2d>
 8001df2:	a393      	add	r3, pc, #588	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4625      	mov	r5, r4
 8001e0e:	461c      	mov	r4, r3
 8001e10:	4b9a      	ldr	r3, [pc, #616]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb84 	bl	8000524 <__aeabi_i2d>
 8001e1c:	a38a      	add	r3, pc, #552	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e22:	f7fe fbe9 	bl	80005f8 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fa2d 	bl	800028c <__adddf3>
 8001e32:	4603      	mov	r3, r0
 8001e34:	460c      	mov	r4, r1
 8001e36:	4625      	mov	r5, r4
 8001e38:	461c      	mov	r4, r3
 8001e3a:	4b90      	ldr	r3, [pc, #576]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	a382      	add	r3, pc, #520	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4c:	f7fe fbd4 	bl	80005f8 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fa18 	bl	800028c <__adddf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4625      	mov	r5, r4
 8001e62:	461c      	mov	r4, r3
 8001e64:	4b85      	ldr	r3, [pc, #532]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb5a 	bl	8000524 <__aeabi_i2d>
 8001e70:	a379      	add	r3, pc, #484	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fbbf 	bl	80005f8 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4629      	mov	r1, r5
 8001e82:	f7fe fa03 	bl	800028c <__adddf3>
 8001e86:	4603      	mov	r3, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	4625      	mov	r5, r4
 8001e8c:	461c      	mov	r4, r3
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001e90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	4b74      	ldr	r3, [pc, #464]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001eb4:	f7fe fcca 	bl	800084c <__aeabi_ddiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4625      	mov	r5, r4
 8001ebe:	461c      	mov	r4, r3
 8001ec0:	4b6e      	ldr	r3, [pc, #440]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	4680      	mov	r8, r0
 8001ece:	4689      	mov	r9, r1
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001ed2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_i2d>
 8001edc:	a35e      	add	r3, pc, #376	; (adr r3, 8002058 <calculateLineFollowingTermFlip+0x2c8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb89 	bl	80005f8 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4640      	mov	r0, r8
 8001eec:	4649      	mov	r1, r9
 8001eee:	f7fe f9cd 	bl	800028c <__adddf3>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4690      	mov	r8, r2
 8001ef8:	4699      	mov	r9, r3
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001efc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb0f 	bl	8000524 <__aeabi_i2d>
 8001f06:	a352      	add	r3, pc, #328	; (adr r3, 8002050 <calculateLineFollowingTermFlip+0x2c0>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4640      	mov	r0, r8
 8001f16:	4649      	mov	r1, r9
 8001f18:	f7fe f9b8 	bl	800028c <__adddf3>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4690      	mov	r8, r2
 8001f22:	4699      	mov	r9, r3
 8001f24:	4b55      	ldr	r3, [pc, #340]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fafa 	bl	8000524 <__aeabi_i2d>
 8001f30:	a345      	add	r3, pc, #276	; (adr r3, 8002048 <calculateLineFollowingTermFlip+0x2b8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	f7fe fb5f 	bl	80005f8 <__aeabi_dmul>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4640      	mov	r0, r8
 8001f40:	4649      	mov	r1, r9
 8001f42:	f7fe f9a3 	bl	800028c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4690      	mov	r8, r2
 8001f4c:	4699      	mov	r9, r3
 8001f4e:	4b4b      	ldr	r3, [pc, #300]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fae5 	bl	8000524 <__aeabi_i2d>
 8001f5a:	a339      	add	r3, pc, #228	; (adr r3, 8002040 <calculateLineFollowingTermFlip+0x2b0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb4a 	bl	80005f8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4640      	mov	r0, r8
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	f7fe f98e 	bl	800028c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4690      	mov	r8, r2
 8001f76:	4699      	mov	r9, r3
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <calculateLineFollowingTermFlip+0x2ec>)
 8001f7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fad0 	bl	8000524 <__aeabi_i2d>
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <calculateLineFollowingTermFlip+0x2f0>)
 8001f8a:	f7fe fb35 	bl	80005f8 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4640      	mov	r0, r8
 8001f94:	4649      	mov	r1, r9
 8001f96:	f7fe f979 	bl	800028c <__adddf3>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <calculateLineFollowingTermFlip+0x2f4>)
 8001fa8:	f7fe fc50 	bl	800084c <__aeabi_ddiv>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	4629      	mov	r1, r5
 8001fb4:	f7fe f968 	bl	8000288 <__aeabi_dsub>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	f7fe fe12 	bl	8000be8 <__aeabi_d2f>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001fc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ee17 0a90 	vmov	r0, s15
 8001ff2:	f7fe faa9 	bl	8000548 <__aeabi_f2d>
 8001ff6:	a31a      	add	r3, pc, #104	; (adr r3, 8002060 <calculateLineFollowingTermFlip+0x2d0>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	f7fe fc26 	bl	800084c <__aeabi_ddiv>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	4618      	mov	r0, r3
 8002006:	4621      	mov	r1, r4
 8002008:	f7fe fdee 	bl	8000be8 <__aeabi_d2f>
 800200c:	4603      	mov	r3, r0
 800200e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <calculateLineFollowingTermFlip+0x2e8>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a02 	vldr	s15, [r7, #8]
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b19      	ldr	r3, [pc, #100]	; (800208c <calculateLineFollowingTermFlip+0x2fc>)
 8002028:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <calculateLineFollowingTermFlip+0x2f8>)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6013      	str	r3, [r2, #0]
	}
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800203c:	f3af 8000 	nop.w
 8002040:	9999999a 	.word	0x9999999a
 8002044:	3ff99999 	.word	0x3ff99999
 8002048:	33333333 	.word	0x33333333
 800204c:	3ff73333 	.word	0x3ff73333
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	3ff4cccc 	.word	0x3ff4cccc
 8002058:	66666666 	.word	0x66666666
 800205c:	3ff26666 	.word	0x3ff26666
 8002060:	d2f1a9fc 	.word	0xd2f1a9fc
 8002064:	3f50624d 	.word	0x3f50624d
 8002068:	40733333 	.word	0x40733333
 800206c:	3ccccccd 	.word	0x3ccccccd
 8002070:	2000027a 	.word	0x2000027a
 8002074:	2000027b 	.word	0x2000027b
 8002078:	20000288 	.word	0x20000288
 800207c:	2001ec38 	.word	0x2001ec38
 8002080:	3ffc0000 	.word	0x3ffc0000
 8002084:	40180000 	.word	0x40180000
 8002088:	20000284 	.word	0x20000284
 800208c:	2000027c 	.word	0x2000027c

08002090 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <lineTraceFlip+0x150>)
 8002098:	f993 3000 	ldrsb.w	r3, [r3]
 800209c:	2b01      	cmp	r3, #1
 800209e:	f040 8097 	bne.w	80021d0 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 80020a2:	f001 fb3d 	bl	8003720 <getVelocityControlTerm>
 80020a6:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 80020aa:	4b4e      	ldr	r3, [pc, #312]	; (80021e4 <lineTraceFlip+0x154>)
 80020ac:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020be:	db02      	blt.n	80020c6 <lineTraceFlip+0x36>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e010      	b.n	80020e8 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 80020c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	d805      	bhi.n	80020e8 <lineTraceFlip+0x58>
 80020dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e0:	eef1 7a67 	vneg.f32	s15, s15
 80020e4:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <lineTraceFlip+0x158>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80021ec <lineTraceFlip+0x15c>
 8002100:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002108:	db0d      	blt.n	8002126 <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <lineTraceFlip+0x158>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a05 	vldr	s15, [r7, #20]
 8002114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002118:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80021ec <lineTraceFlip+0x15c>
 800211c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002120:	edc7 7a04 	vstr	s15, [r7, #16]
 8002124:	e01a      	b.n	800215c <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <lineTraceFlip+0x158>)
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80021f0 <lineTraceFlip+0x160>
 8002138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	d80c      	bhi.n	800215c <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002142:	4b29      	ldr	r3, [pc, #164]	; (80021e8 <lineTraceFlip+0x158>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ed97 7a05 	vldr	s14, [r7, #20]
 800214c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002150:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80021f0 <lineTraceFlip+0x160>
 8002154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002158:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 800215c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002160:	edd7 7a04 	vldr	s15, [r7, #16]
 8002164:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002168:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 800216c:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <lineTraceFlip+0x158>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	edd7 7a04 	vldr	s15, [r7, #16]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <lineTraceFlip+0x158>)
 800217c:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <lineTraceFlip+0x158>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ed97 7a05 	vldr	s14, [r7, #20]
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <lineTraceFlip+0x158>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed97 7a05 	vldr	s14, [r7, #20]
 800219c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a0:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <lineTraceFlip+0x164>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 80021aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80021ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b2:	ee17 3a90 	vmov	r3, s15
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80021bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c0:	ee17 2a90 	vmov	r2, s15
 80021c4:	b212      	sxth	r2, r2
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f002 ffdb 	bl	8005184 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021ce:	e003      	b.n	80021d8 <lineTraceFlip+0x148>
		setMotor(0, 0);
 80021d0:	2100      	movs	r1, #0
 80021d2:	2000      	movs	r0, #0
 80021d4:	f002 ffd6 	bl	8005184 <setMotor>
}
 80021d8:	bf00      	nop
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000027a 	.word	0x2000027a
 80021e4:	44b264cd 	.word	0x44b264cd
 80021e8:	2000027c 	.word	0x2000027c
 80021ec:	44d1e000 	.word	0x44d1e000
 80021f0:	c4d1e000 	.word	0xc4d1e000
 80021f4:	2001ed20 	.word	0x2001ed20

080021f8 <startLineTrace>:

void startLineTrace()
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <startLineTrace+0x1c>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <startLineTrace+0x20>)
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000027a 	.word	0x2000027a
 8002218:	2000027b 	.word	0x2000027b

0800221c <stopLineTrace>:

void stopLineTrace()
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <stopLineTrace+0x1c>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <stopLineTrace+0x20>)
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2000027a 	.word	0x2000027a
 800223c:	2000027c 	.word	0x2000027c

08002240 <checkCourseOut>:

void checkCourseOut(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 8002246:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <checkCourseOut+0xb4>)
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	461a      	mov	r2, r3
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <checkCourseOut+0xb4>)
 8002250:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002254:	4413      	add	r3, r2
 8002256:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <checkCourseOut+0xb4>)
 8002258:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <checkCourseOut+0xb4>)
 8002260:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002264:	4413      	add	r3, r2
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <checkCourseOut+0xb4>)
 8002268:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800226c:	4413      	add	r3, r2
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <checkCourseOut+0xb4>)
 8002270:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002274:	4413      	add	r3, r2
 8002276:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <checkCourseOut+0xb4>)
 8002278:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800227c:	4413      	add	r3, r2
 800227e:	4a1d      	ldr	r2, [pc, #116]	; (80022f4 <checkCourseOut+0xb4>)
 8002280:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002284:	4413      	add	r3, r2
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <checkCourseOut+0xb4>)
 8002288:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800228c:	4413      	add	r3, r2
 800228e:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <checkCourseOut+0xb4>)
 8002290:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002294:	4413      	add	r3, r2
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <checkCourseOut+0xb4>)
 8002298:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 800229c:	4413      	add	r3, r2
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <checkCourseOut+0xb4>)
 80022a0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <checkCourseOut+0xb8>)
 80022a8:	fb82 1203 	smull	r1, r2, r2, r3
 80022ac:	1052      	asrs	r2, r2, #1
 80022ae:	17db      	asrs	r3, r3, #31
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80022ba:	d906      	bls.n	80022ca <checkCourseOut+0x8a>
		dark_cnt++;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <checkCourseOut+0xbc>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <checkCourseOut+0xbc>)
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e002      	b.n	80022d0 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80022ca:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <checkCourseOut+0xbc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <checkCourseOut+0xbc>)
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	2b13      	cmp	r3, #19
 80022d6:	d903      	bls.n	80022e0 <checkCourseOut+0xa0>
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <checkCourseOut+0xc0>)
 80022da:	2201      	movs	r2, #1
 80022dc:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 80022de:	e002      	b.n	80022e6 <checkCourseOut+0xa6>
	else dark_flag = false;
 80022e0:	4b07      	ldr	r3, [pc, #28]	; (8002300 <checkCourseOut+0xc0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2001ec38 	.word	0x2001ec38
 80022f8:	2aaaaaab 	.word	0x2aaaaaab
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000280 	.word	0x20000280

08002304 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
	return dark_flag;
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <getCouseOutFlag+0x14>)
 800230a:	781b      	ldrb	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000280 	.word	0x20000280

0800231c <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002320:	2202      	movs	r2, #2
 8002322:	4905      	ldr	r1, [pc, #20]	; (8002338 <initADC+0x1c>)
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <initADC+0x20>)
 8002326:	f004 fad9 	bl	80068dc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800232a:	220c      	movs	r2, #12
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <initADC+0x24>)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <initADC+0x28>)
 8002330:	f004 fad4 	bl	80068dc <HAL_ADC_Start_DMA>
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200002a8 	.word	0x200002a8
 800233c:	2001ed74 	.word	0x2001ed74
 8002340:	20000290 	.word	0x20000290
 8002344:	2001ed24 	.word	0x2001ed24

08002348 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 800234c:	4bc9      	ldr	r3, [pc, #804]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800234e:	885b      	ldrh	r3, [r3, #2]
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002358:	4bc7      	ldr	r3, [pc, #796]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800235a:	edd3 7a01 	vldr	s15, [r3, #4]
 800235e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002362:	4bc6      	ldr	r3, [pc, #792]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002364:	ed93 7a01 	vldr	s14, [r3, #4]
 8002368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800236c:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002374:	4bc3      	ldr	r3, [pc, #780]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 3a90 	vmov	r3, s15
 8002382:	b219      	sxth	r1, r3
 8002384:	4bc0      	ldr	r3, [pc, #768]	; (8002688 <storeAnalogSensorBuffer+0x340>)
 8002386:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800238a:	4bba      	ldr	r3, [pc, #744]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002396:	4bb8      	ldr	r3, [pc, #736]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023a0:	4bb6      	ldr	r3, [pc, #728]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023aa:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b2:	4bb4      	ldr	r3, [pc, #720]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	461a      	mov	r2, r3
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	b219      	sxth	r1, r3
 80023c2:	4bb2      	ldr	r3, [pc, #712]	; (800268c <storeAnalogSensorBuffer+0x344>)
 80023c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023c8:	4baa      	ldr	r3, [pc, #680]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4ba8      	ldr	r3, [pc, #672]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80023d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80023da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023de:	4ba7      	ldr	r3, [pc, #668]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80023e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80023e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e8:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80023ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023f0:	4ba4      	ldr	r3, [pc, #656]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023fa:	ee17 3a90 	vmov	r3, s15
 80023fe:	b219      	sxth	r1, r3
 8002400:	4ba3      	ldr	r3, [pc, #652]	; (8002690 <storeAnalogSensorBuffer+0x348>)
 8002402:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002406:	4b9b      	ldr	r3, [pc, #620]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002408:	88db      	ldrh	r3, [r3, #6]
 800240a:	ee07 3a90 	vmov	s15, r3
 800240e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002412:	4b99      	ldr	r3, [pc, #612]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002414:	edd3 7a03 	vldr	s15, [r3, #12]
 8002418:	ee77 6a67 	vsub.f32	s13, s14, s15
 800241c:	4b97      	ldr	r3, [pc, #604]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800241e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002426:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800242a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800242e:	4b95      	ldr	r3, [pc, #596]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	b219      	sxth	r1, r3
 800243e:	4b95      	ldr	r3, [pc, #596]	; (8002694 <storeAnalogSensorBuffer+0x34c>)
 8002440:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002444:	4b8b      	ldr	r3, [pc, #556]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002446:	891b      	ldrh	r3, [r3, #8]
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002452:	edd3 7a04 	vldr	s15, [r3, #16]
 8002456:	ee77 6a67 	vsub.f32	s13, s14, s15
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800245c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002464:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	4b85      	ldr	r3, [pc, #532]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002476:	ee17 3a90 	vmov	r3, s15
 800247a:	b219      	sxth	r1, r3
 800247c:	4b86      	ldr	r3, [pc, #536]	; (8002698 <storeAnalogSensorBuffer+0x350>)
 800247e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002482:	4b7c      	ldr	r3, [pc, #496]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002484:	895b      	ldrh	r3, [r3, #10]
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248e:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002490:	edd3 7a05 	vldr	s15, [r3, #20]
 8002494:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002498:	4b78      	ldr	r3, [pc, #480]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800249a:	ed93 7a05 	vldr	s14, [r3, #20]
 800249e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024aa:	4b76      	ldr	r3, [pc, #472]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 3a90 	vmov	r3, s15
 80024b8:	b219      	sxth	r1, r3
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <storeAnalogSensorBuffer+0x354>)
 80024bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80024c2:	899b      	ldrh	r3, [r3, #12]
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80024ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80024d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024d6:	4b69      	ldr	r3, [pc, #420]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80024d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80024e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e8:	4b66      	ldr	r3, [pc, #408]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f2:	ee17 3a90 	vmov	r3, s15
 80024f6:	b219      	sxth	r1, r3
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <storeAnalogSensorBuffer+0x358>)
 80024fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 8002500:	89db      	ldrh	r3, [r3, #14]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800250c:	edd3 7a07 	vldr	s15, [r3, #28]
 8002510:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002514:	4b59      	ldr	r3, [pc, #356]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002516:	ed93 7a07 	vldr	s14, [r3, #28]
 800251a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	b219      	sxth	r1, r3
 8002536:	4b5b      	ldr	r3, [pc, #364]	; (80026a4 <storeAnalogSensorBuffer+0x35c>)
 8002538:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800253e:	8a1b      	ldrh	r3, [r3, #16]
 8002540:	ee07 3a90 	vmov	s15, r3
 8002544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 800254a:	edd3 7a08 	vldr	s15, [r3, #32]
 800254e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002554:	ed93 7a08 	vldr	s14, [r3, #32]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002564:	4b47      	ldr	r3, [pc, #284]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800256e:	ee17 3a90 	vmov	r3, s15
 8002572:	b219      	sxth	r1, r3
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <storeAnalogSensorBuffer+0x360>)
 8002576:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800257a:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 800257c:	8a5b      	ldrh	r3, [r3, #18]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002586:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002588:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800258c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <storeAnalogSensorBuffer+0x334>)
 8002592:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002596:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800259a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800259e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	b219      	sxth	r1, r3
 80025b2:	4b3e      	ldr	r3, [pc, #248]	; (80026ac <storeAnalogSensorBuffer+0x364>)
 80025b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025ba:	8a9b      	ldrh	r3, [r3, #20]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c4:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 80025c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025ce:	4b2b      	ldr	r3, [pc, #172]	; (800267c <storeAnalogSensorBuffer+0x334>)
 80025d0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002680 <storeAnalogSensorBuffer+0x338>
 80025dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 3a90 	vmov	r3, s15
 80025ee:	b219      	sxth	r1, r3
 80025f0:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <storeAnalogSensorBuffer+0x368>)
 80025f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <storeAnalogSensorBuffer+0x32c>)
 80025f8:	8adb      	ldrh	r3, [r3, #22]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002602:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <storeAnalogSensorBuffer+0x330>)
 8002604:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002608:	ee77 6a67 	vsub.f32	s13, s14, s15
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <storeAnalogSensorBuffer+0x334>)
 800260e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002616:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002680 <storeAnalogSensorBuffer+0x338>
 800261a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	b219      	sxth	r1, r3
 800262e:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <storeAnalogSensorBuffer+0x36c>)
 8002630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002634:	4b20      	ldr	r3, [pc, #128]	; (80026b8 <storeAnalogSensorBuffer+0x370>)
 8002636:	885b      	ldrh	r3, [r3, #2]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002640:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <storeAnalogSensorBuffer+0x374>)
 8002642:	edd3 7a01 	vldr	s15, [r3, #4]
 8002646:	ee77 6a67 	vsub.f32	s13, s14, s15
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <storeAnalogSensorBuffer+0x378>)
 800264c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002654:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002680 <storeAnalogSensorBuffer+0x338>
 8002658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <storeAnalogSensorBuffer+0x33c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002666:	ee17 3a90 	vmov	r3, s15
 800266a:	b219      	sxth	r1, r3
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <storeAnalogSensorBuffer+0x37c>)
 800266e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002672:	e029      	b.n	80026c8 <storeAnalogSensorBuffer+0x380>
 8002674:	20000290 	.word	0x20000290
 8002678:	2001ebf8 	.word	0x2001ebf8
 800267c:	2001ec5c 	.word	0x2001ec5c
 8002680:	447a0000 	.word	0x447a0000
 8002684:	20000030 	.word	0x20000030
 8002688:	200002c0 	.word	0x200002c0
 800268c:	200002ac 	.word	0x200002ac
 8002690:	200002d4 	.word	0x200002d4
 8002694:	200002e8 	.word	0x200002e8
 8002698:	200002fc 	.word	0x200002fc
 800269c:	20000310 	.word	0x20000310
 80026a0:	20000324 	.word	0x20000324
 80026a4:	20000338 	.word	0x20000338
 80026a8:	2000034c 	.word	0x2000034c
 80026ac:	20000360 	.word	0x20000360
 80026b0:	20000374 	.word	0x20000374
 80026b4:	20000388 	.word	0x20000388
 80026b8:	200002a8 	.word	0x200002a8
 80026bc:	2001ebf0 	.word	0x2001ebf0
 80026c0:	2001ec30 	.word	0x2001ec30
 80026c4:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <storeAnalogSensorBuffer+0x3d4>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <storeAnalogSensorBuffer+0x3d8>)
 80026d6:	edd3 7a00 	vldr	s15, [r3]
 80026da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <storeAnalogSensorBuffer+0x3dc>)
 80026e0:	ed93 7a00 	vldr	s14, [r3]
 80026e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002728 <storeAnalogSensorBuffer+0x3e0>
 80026ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026fa:	ee17 3a90 	vmov	r3, s15
 80026fe:	b219      	sxth	r1, r3
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <storeAnalogSensorBuffer+0x3e8>)
 8002702:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <storeAnalogSensorBuffer+0x3e4>)
 8002710:	701a      	strb	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	200002a8 	.word	0x200002a8
 8002720:	2001ebf0 	.word	0x2001ebf0
 8002724:	2001ec30 	.word	0x2001ec30
 8002728:	447a0000 	.word	0x447a0000
 800272c:	20000030 	.word	0x20000030
 8002730:	200003b0 	.word	0x200003b0

08002734 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800273a:	4bc9      	ldr	r3, [pc, #804]	; (8002a60 <updateAnalogSensor+0x32c>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002746:	4bc7      	ldr	r3, [pc, #796]	; (8002a64 <updateAnalogSensor+0x330>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002750:	4bc5      	ldr	r3, [pc, #788]	; (8002a68 <updateAnalogSensor+0x334>)
 8002752:	ed93 7a00 	vldr	s14, [r3]
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a6c <updateAnalogSensor+0x338>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002766:	ee17 3a90 	vmov	r3, s15
 800276a:	b21a      	sxth	r2, r3
 800276c:	4bc0      	ldr	r3, [pc, #768]	; (8002a70 <updateAnalogSensor+0x33c>)
 800276e:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002770:	4bbb      	ldr	r3, [pc, #748]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002772:	885b      	ldrh	r3, [r3, #2]
 8002774:	ee07 3a90 	vmov	s15, r3
 8002778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277c:	4bb9      	ldr	r3, [pc, #740]	; (8002a64 <updateAnalogSensor+0x330>)
 800277e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002782:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002786:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <updateAnalogSensor+0x334>)
 8002788:	ed93 7a01 	vldr	s14, [r3, #4]
 800278c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002790:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a6c <updateAnalogSensor+0x338>
 8002794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800279c:	ee17 3a90 	vmov	r3, s15
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	4bb3      	ldr	r3, [pc, #716]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027a4:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80027a6:	4bae      	ldr	r3, [pc, #696]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	4bac      	ldr	r3, [pc, #688]	; (8002a64 <updateAnalogSensor+0x330>)
 80027b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027bc:	4baa      	ldr	r3, [pc, #680]	; (8002a68 <updateAnalogSensor+0x334>)
 80027be:	ed93 7a02 	vldr	s14, [r3, #8]
 80027c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a6c <updateAnalogSensor+0x338>
 80027ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d2:	ee17 3a90 	vmov	r3, s15
 80027d6:	b21a      	sxth	r2, r3
 80027d8:	4ba5      	ldr	r3, [pc, #660]	; (8002a70 <updateAnalogSensor+0x33c>)
 80027da:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027dc:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <updateAnalogSensor+0x32c>)
 80027de:	88db      	ldrh	r3, [r3, #6]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	4b9e      	ldr	r3, [pc, #632]	; (8002a64 <updateAnalogSensor+0x330>)
 80027ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80027ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027f2:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <updateAnalogSensor+0x334>)
 80027f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a6c <updateAnalogSensor+0x338>
 8002800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002808:	ee17 3a90 	vmov	r3, s15
 800280c:	b21a      	sxth	r2, r3
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002810:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002812:	4b93      	ldr	r3, [pc, #588]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002814:	891b      	ldrh	r3, [r3, #8]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281e:	4b91      	ldr	r3, [pc, #580]	; (8002a64 <updateAnalogSensor+0x330>)
 8002820:	edd3 7a04 	vldr	s15, [r3, #16]
 8002824:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002828:	4b8f      	ldr	r3, [pc, #572]	; (8002a68 <updateAnalogSensor+0x334>)
 800282a:	ed93 7a04 	vldr	s14, [r3, #16]
 800282e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002832:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a6c <updateAnalogSensor+0x338>
 8002836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800283a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002846:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002848:	4b85      	ldr	r3, [pc, #532]	; (8002a60 <updateAnalogSensor+0x32c>)
 800284a:	895b      	ldrh	r3, [r3, #10]
 800284c:	ee07 3a90 	vmov	s15, r3
 8002850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <updateAnalogSensor+0x330>)
 8002856:	edd3 7a05 	vldr	s15, [r3, #20]
 800285a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <updateAnalogSensor+0x334>)
 8002860:	ed93 7a05 	vldr	s14, [r3, #20]
 8002864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002868:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a6c <updateAnalogSensor+0x338>
 800286c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002874:	ee17 3a90 	vmov	r3, s15
 8002878:	b21a      	sxth	r2, r3
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <updateAnalogSensor+0x33c>)
 800287c:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002880:	899b      	ldrh	r3, [r3, #12]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800288a:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <updateAnalogSensor+0x330>)
 800288c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002890:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002894:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <updateAnalogSensor+0x334>)
 8002896:	ed93 7a06 	vldr	s14, [r3, #24]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a6c <updateAnalogSensor+0x338>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028aa:	ee17 3a90 	vmov	r3, s15
 80028ae:	b21a      	sxth	r2, r3
 80028b0:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028b2:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80028b4:	4b6a      	ldr	r3, [pc, #424]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028b6:	89db      	ldrh	r3, [r3, #14]
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028c0:	4b68      	ldr	r3, [pc, #416]	; (8002a64 <updateAnalogSensor+0x330>)
 80028c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80028c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <updateAnalogSensor+0x334>)
 80028cc:	ed93 7a07 	vldr	s14, [r3, #28]
 80028d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d4:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a6c <updateAnalogSensor+0x338>
 80028d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <updateAnalogSensor+0x33c>)
 80028e8:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028ea:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <updateAnalogSensor+0x32c>)
 80028ec:	8a1b      	ldrh	r3, [r3, #16]
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028f6:	4b5b      	ldr	r3, [pc, #364]	; (8002a64 <updateAnalogSensor+0x330>)
 80028f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80028fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002900:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <updateAnalogSensor+0x334>)
 8002902:	ed93 7a08 	vldr	s14, [r3, #32]
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a6c <updateAnalogSensor+0x338>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002916:	ee17 3a90 	vmov	r3, s15
 800291a:	b21a      	sxth	r2, r3
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <updateAnalogSensor+0x33c>)
 800291e:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002922:	8a5b      	ldrh	r3, [r3, #18]
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <updateAnalogSensor+0x330>)
 800292e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002932:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <updateAnalogSensor+0x334>)
 8002938:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800293c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002940:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a6c <updateAnalogSensor+0x338>
 8002944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800294c:	ee17 3a90 	vmov	r3, s15
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <updateAnalogSensor+0x33c>)
 8002954:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <updateAnalogSensor+0x32c>)
 8002958:	8a9b      	ldrh	r3, [r3, #20]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <updateAnalogSensor+0x330>)
 8002964:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002968:	ee77 6a67 	vsub.f32	s13, s14, s15
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <updateAnalogSensor+0x334>)
 800296e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002976:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a6c <updateAnalogSensor+0x338>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002982:	ee17 3a90 	vmov	r3, s15
 8002986:	b21a      	sxth	r2, r3
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <updateAnalogSensor+0x33c>)
 800298a:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <updateAnalogSensor+0x32c>)
 800298e:	8adb      	ldrh	r3, [r3, #22]
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002998:	4b32      	ldr	r3, [pc, #200]	; (8002a64 <updateAnalogSensor+0x330>)
 800299a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800299e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <updateAnalogSensor+0x334>)
 80029a4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a6c <updateAnalogSensor+0x338>
 80029b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b8:	ee17 3a90 	vmov	r3, s15
 80029bc:	b21a      	sxth	r2, r3
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <updateAnalogSensor+0x33c>)
 80029c0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <updateAnalogSensor+0x340>)
 80029c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b2a      	ldr	r3, [pc, #168]	; (8002a74 <updateAnalogSensor+0x340>)
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a28      	ldr	r2, [pc, #160]	; (8002a74 <updateAnalogSensor+0x340>)
 80029d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	4a26      	ldr	r2, [pc, #152]	; (8002a74 <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <updateAnalogSensor+0x340>)
 80029e4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <updateAnalogSensor+0x340>)
 80029ec:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <updateAnalogSensor+0x340>)
 80029f4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <updateAnalogSensor+0x340>)
 80029fc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a1c      	ldr	r2, [pc, #112]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a04:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a1a      	ldr	r2, [pc, #104]	; (8002a74 <updateAnalogSensor+0x340>)
 8002a0c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a10:	4413      	add	r3, r2
 8002a12:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <updateAnalogSensor+0x344>)
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	1092      	asrs	r2, r2, #2
 8002a1a:	17db      	asrs	r3, r3, #31
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b21a      	sxth	r2, r3
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <updateAnalogSensor+0x348>)
 8002a22:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a24:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a3e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a0c      	ldr	r2, [pc, #48]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a4e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <updateAnalogSensor+0x34c>)
 8002a56:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	e012      	b.n	8002a84 <updateAnalogSensor+0x350>
 8002a5e:	bf00      	nop
 8002a60:	20000290 	.word	0x20000290
 8002a64:	2001ebf8 	.word	0x2001ebf8
 8002a68:	2001ec5c 	.word	0x2001ec5c
 8002a6c:	447a0000 	.word	0x447a0000
 8002a70:	2001ec38 	.word	0x2001ec38
 8002a74:	2000039c 	.word	0x2000039c
 8002a78:	66666667 	.word	0x66666667
 8002a7c:	2001ebdc 	.word	0x2001ebdc
 8002a80:	200003b0 	.word	0x200003b0
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a86:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a8e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a1b      	ldr	r2, [pc, #108]	; (8002b04 <updateAnalogSensor+0x3d0>)
 8002a96:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <updateAnalogSensor+0x3d4>)
 8002a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa2:	1092      	asrs	r2, r2, #2
 8002aa4:	17db      	asrs	r3, r3, #31
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <updateAnalogSensor+0x3d8>)
 8002aac:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	e01a      	b.n	8002aea <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac0:	db05      	blt.n	8002ace <updateAnalogSensor+0x39a>
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc04      	bgt.n	8002ae4 <updateAnalogSensor+0x3b0>
 8002ada:	4a0d      	ldr	r2, [pc, #52]	; (8002b10 <updateAnalogSensor+0x3dc>)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0b      	cmp	r3, #11
 8002aee:	dde1      	ble.n	8002ab4 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <updateAnalogSensor+0x3e0>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]

}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	200003b0 	.word	0x200003b0
 8002b08:	66666667 	.word	0x66666667
 8002b0c:	2001ec54 	.word	0x2001ec54
 8002b10:	2001ec38 	.word	0x2001ec38
 8002b14:	20000030 	.word	0x20000030

08002b18 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a0      	sub	sp, #128	; 0x80
 8002b1c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b22:	2230      	movs	r2, #48	; 0x30
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f009 ff1b 	bl	800c962 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	2230      	movs	r2, #48	; 0x30
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f009 ff14 	bl	800c962 <memset>
 8002b3a:	4bd8      	ldr	r3, [pc, #864]	; (8002e9c <sensorCalibration+0x384>)
 8002b3c:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b44:	e026      	b.n	8002b94 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b46:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b4a:	4ad5      	ldr	r2, [pc, #852]	; (8002ea0 <sensorCalibration+0x388>)
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b5a:	4ad2      	ldr	r2, [pc, #840]	; (8002ea4 <sensorCalibration+0x38c>)
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	4ad1      	ldr	r2, [pc, #836]	; (8002ea8 <sensorCalibration+0x390>)
 8002b62:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b64:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b40      	subs	r3, #64	; 0x40
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b78:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b82:	4413      	add	r3, r2
 8002b84:	3b70      	subs	r3, #112	; 0x70
 8002b86:	4ac8      	ldr	r2, [pc, #800]	; (8002ea8 <sensorCalibration+0x390>)
 8002b88:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b8a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b94:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b98:	2b0b      	cmp	r3, #11
 8002b9a:	d9d4      	bls.n	8002b46 <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002ba2:	e013      	b.n	8002bcc <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002ba4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002ba8:	4ac0      	ldr	r2, [pc, #768]	; (8002eac <sensorCalibration+0x394>)
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002bb4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bb8:	4abd      	ldr	r2, [pc, #756]	; (8002eb0 <sensorCalibration+0x398>)
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4aba      	ldr	r2, [pc, #744]	; (8002ea8 <sensorCalibration+0x390>)
 8002bc0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bc2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002bcc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d9e7      	bls.n	8002ba4 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002bd4:	e0f5      	b.n	8002dc2 <sensorCalibration+0x2aa>

		setLED2('X');
 8002bd6:	2058      	movs	r0, #88	; 0x58
 8002bd8:	f7fe ff3e 	bl	8001a58 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002be2:	e06e      	b.n	8002cc2 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002be4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002be8:	4ab2      	ldr	r2, [pc, #712]	; (8002eb4 <sensorCalibration+0x39c>)
 8002bea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bf2:	ee07 2a90 	vmov	s15, r2
 8002bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c00:	4413      	add	r3, r2
 8002c02:	3b40      	subs	r3, #64	; 0x40
 8002c04:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002c08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c0c:	4aa9      	ldr	r2, [pc, #676]	; (8002eb4 <sensorCalibration+0x39c>)
 8002c0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c16:	ee07 2a90 	vmov	s15, r2
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c24:	4413      	add	r3, r2
 8002c26:	3b70      	subs	r3, #112	; 0x70
 8002c28:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	3b40      	subs	r3, #64	; 0x40
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c42:	4a97      	ldr	r2, [pc, #604]	; (8002ea0 <sensorCalibration+0x388>)
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	dd0d      	ble.n	8002c72 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002c56:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c5a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c64:	440a      	add	r2, r1
 8002c66:	3a40      	subs	r2, #64	; 0x40
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	498d      	ldr	r1, [pc, #564]	; (8002ea0 <sensorCalibration+0x388>)
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c72:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b70      	subs	r3, #112	; 0x70
 8002c80:	ed93 7a00 	vldr	s14, [r3]
 8002c84:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c88:	4a86      	ldr	r2, [pc, #536]	; (8002ea4 <sensorCalibration+0x38c>)
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c9a:	d50d      	bpl.n	8002cb8 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c9c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002ca0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002ca4:	0092      	lsls	r2, r2, #2
 8002ca6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002caa:	440a      	add	r2, r1
 8002cac:	3a70      	subs	r2, #112	; 0x70
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	497c      	ldr	r1, [pc, #496]	; (8002ea4 <sensorCalibration+0x38c>)
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cb8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002cc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002cc6:	2b0b      	cmp	r3, #11
 8002cc8:	d98c      	bls.n	8002be4 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cd0:	e073      	b.n	8002dba <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cd2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd6:	4a78      	ldr	r2, [pc, #480]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cdc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce0:	ee07 2a90 	vmov	s15, r2
 8002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b78      	subs	r3, #120	; 0x78
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfa:	4a6f      	ldr	r2, [pc, #444]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002cfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d04:	ee07 2a90 	vmov	s15, r2
 8002d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d12:	4413      	add	r3, r2
 8002d14:	3b80      	subs	r3, #128	; 0x80
 8002d16:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002d1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d24:	4413      	add	r3, r2
 8002d26:	3b78      	subs	r3, #120	; 0x78
 8002d28:	ed93 7a00 	vldr	s14, [r3]
 8002d2c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <sensorCalibration+0x394>)
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd10      	ble.n	8002d66 <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002d44:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d48:	4a5b      	ldr	r2, [pc, #364]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d4e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d52:	ee07 2a90 	vmov	s15, r2
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	4a54      	ldr	r2, [pc, #336]	; (8002eac <sensorCalibration+0x394>)
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	edc3 7a00 	vstr	s15, [r3]
 8002d64:	e024      	b.n	8002db0 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d66:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d70:	4413      	add	r3, r2
 8002d72:	3b80      	subs	r3, #128	; 0x80
 8002d74:	ed93 7a00 	vldr	s14, [r3]
 8002d78:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d7c:	4a4c      	ldr	r2, [pc, #304]	; (8002eb0 <sensorCalibration+0x398>)
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	d50f      	bpl.n	8002db0 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d90:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d94:	4a48      	ldr	r2, [pc, #288]	; (8002eb8 <sensorCalibration+0x3a0>)
 8002d96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d9a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d9e:	ee07 2a90 	vmov	s15, r2
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	4a42      	ldr	r2, [pc, #264]	; (8002eb0 <sensorCalibration+0x398>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002db0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002dba:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d987      	bls.n	8002cd2 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002dc2:	204c      	movs	r0, #76	; 0x4c
 8002dc4:	f003 fba4 	bl	8006510 <getSwitchStatus>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	f43f af03 	beq.w	8002bd6 <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002dd6:	e01b      	b.n	8002e10 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002dd8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002ddc:	4a30      	ldr	r2, [pc, #192]	; (8002ea0 <sensorCalibration+0x388>)
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	ed93 7a00 	vldr	s14, [r3]
 8002de6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dea:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <sensorCalibration+0x38c>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	4a2f      	ldr	r2, [pc, #188]	; (8002ebc <sensorCalibration+0x3a4>)
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002e10:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002e14:	2b0b      	cmp	r3, #11
 8002e16:	d9df      	bls.n	8002dd8 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e1e:	e010      	b.n	8002e42 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002e20:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002e24:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <sensorCalibration+0x38c>)
 8002e2a:	0092      	lsls	r2, r2, #2
 8002e2c:	440a      	add	r2, r1
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <sensorCalibration+0x3a8>)
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e38:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002e42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002e46:	2b0b      	cmp	r3, #11
 8002e48:	d9ea      	bls.n	8002e20 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e50:	e01b      	b.n	8002e8a <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e52:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <sensorCalibration+0x394>)
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	ed93 7a00 	vldr	s14, [r3]
 8002e60:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <sensorCalibration+0x398>)
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <sensorCalibration+0x3ac>)
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e80:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e84:	3301      	adds	r3, #1
 8002e86:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e8a:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d9df      	bls.n	8002e52 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e92:	2300      	movs	r3, #0
 8002e94:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e98:	e027      	b.n	8002eea <sensorCalibration+0x3d2>
 8002e9a:	bf00      	nop
 8002e9c:	447a0000 	.word	0x447a0000
 8002ea0:	2001edbc 	.word	0x2001edbc
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	44bb8000 	.word	0x44bb8000
 8002eac:	2001ed6c 	.word	0x2001ed6c
 8002eb0:	2001edec 	.word	0x2001edec
 8002eb4:	20000290 	.word	0x20000290
 8002eb8:	200002a8 	.word	0x200002a8
 8002ebc:	2001ec5c 	.word	0x2001ec5c
 8002ec0:	2001ebf8 	.word	0x2001ebf8
 8002ec4:	2001ec30 	.word	0x2001ec30
		side_offset_values[i] = side_min_values[i];
 8002ec8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002ecc:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ed0:	490a      	ldr	r1, [pc, #40]	; (8002efc <sensorCalibration+0x3e4>)
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4909      	ldr	r1, [pc, #36]	; (8002f00 <sensorCalibration+0x3e8>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ee0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002eea:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d9ea      	bls.n	8002ec8 <sensorCalibration+0x3b0>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3780      	adds	r7, #128	; 0x80
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2001edec 	.word	0x2001edec
 8002f00:	2001ebf0 	.word	0x2001ebf0

08002f04 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <initLog+0x60>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <initLog+0x64>)
 8002f0e:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002f10:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <initLog+0x68>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <initLog+0x6c>)
 8002f16:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <initLog+0x70>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <initLog+0x74>)
 8002f1e:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <initLog+0x78>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <initLog+0x7c>)
 8002f26:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <initLog+0x80>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <initLog+0x84>)
 8002f2e:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <initLog+0x60>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <initLog+0x88>)
 8002f36:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <initLog+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <initLog+0x8c>)
 8002f3e:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <initLog+0x70>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	; (8002f94 <initLog+0x90>)
 8002f46:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <initLog+0x78>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <initLog+0x94>)
 8002f4e:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002f50:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <initLog+0x80>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a11      	ldr	r2, [pc, #68]	; (8002f9c <initLog+0x98>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	08010e4c 	.word	0x08010e4c
 8002f68:	2001ebd8 	.word	0x2001ebd8
 8002f6c:	08010e50 	.word	0x08010e50
 8002f70:	2001ec2c 	.word	0x2001ec2c
 8002f74:	08010e54 	.word	0x08010e54
 8002f78:	2001ebe8 	.word	0x2001ebe8
 8002f7c:	08010e58 	.word	0x08010e58
 8002f80:	2001ebd4 	.word	0x2001ebd4
 8002f84:	08010e5c 	.word	0x08010e5c
 8002f88:	2001ebe4 	.word	0x2001ebe4
 8002f8c:	2001ebe0 	.word	0x2001ebe0
 8002f90:	2001ebec 	.word	0x2001ebec
 8002f94:	2001ec58 	.word	0x2001ec58
 8002f98:	2001ec50 	.word	0x2001ec50
 8002f9c:	2001ec28 	.word	0x2001ec28

08002fa0 <saveDistance>:

void saveDistance(float distance){
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <saveDistance+0x2c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb06 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <saveDistance+0x2c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	4a03      	ldr	r2, [pc, #12]	; (8002fcc <saveDistance+0x2c>)
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2001ebd8 	.word	0x2001ebd8

08002fd0 <saveTheta>:

void saveTheta(float theta){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <saveTheta+0x2c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe faee 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <saveTheta+0x2c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <saveTheta+0x2c>)
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2001ec2c 	.word	0x2001ec2c

08003000 <saveCross>:

void saveCross(float cross){
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <saveCross+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fad6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <saveCross+0x2c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3304      	adds	r3, #4
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <saveCross+0x2c>)
 8003020:	6013      	str	r3, [r2, #0]
}
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2001ebe8 	.word	0x2001ebe8

08003030 <saveSide>:

void saveSide(float side){
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <saveSide+0x2c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe fabe 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <saveSide+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	4a03      	ldr	r2, [pc, #12]	; (800305c <saveSide+0x2c>)
 8003050:	6013      	str	r3, [r2, #0]
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2001ebd4 	.word	0x2001ebd4

08003060 <saveDebug>:

void saveDebug(float value){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <saveDebug+0x2c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe faa6 	bl	80015c4 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <saveDebug+0x2c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3304      	adds	r3, #4
 800307e:	4a03      	ldr	r2, [pc, #12]	; (800308c <saveDebug+0x2c>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2001ebe4 	.word	0x2001ebe4

08003090 <ereaseLog>:


void ereaseLog(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003094:	2007      	movs	r0, #7
 8003096:	f7fe fa75 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 800309a:	2008      	movs	r0, #8
 800309c:	f7fe fa72 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 80030a0:	2009      	movs	r0, #9
 80030a2:	f7fe fa6f 	bl	8001584 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 80030a6:	200a      	movs	r0, #10
 80030a8:	f7fe fa6c 	bl	8001584 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030ac:	200b      	movs	r0, #11
 80030ae:	f7fe fa69 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <ereaseLog+0x50>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <ereaseLog+0x54>)
 80030b8:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <ereaseLog+0x58>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <ereaseLog+0x5c>)
 80030c0:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 80030c2:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <ereaseLog+0x60>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a0b      	ldr	r2, [pc, #44]	; (80030f4 <ereaseLog+0x64>)
 80030c8:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <ereaseLog+0x68>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <ereaseLog+0x6c>)
 80030d0:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <ereaseLog+0x70>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a0b      	ldr	r2, [pc, #44]	; (8003104 <ereaseLog+0x74>)
 80030d8:	6013      	str	r3, [r2, #0]
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08010e4c 	.word	0x08010e4c
 80030e4:	2001ebd8 	.word	0x2001ebd8
 80030e8:	08010e50 	.word	0x08010e50
 80030ec:	2001ec2c 	.word	0x2001ec2c
 80030f0:	08010e54 	.word	0x08010e54
 80030f4:	2001ebe8 	.word	0x2001ebe8
 80030f8:	08010e58 	.word	0x08010e58
 80030fc:	2001ebd4 	.word	0x2001ebd4
 8003100:	08010e5c 	.word	0x08010e5c
 8003104:	2001ebe4 	.word	0x2001ebe4

08003108 <ereaseDebugLog>:

void ereaseDebugLog(){
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 800310c:	200b      	movs	r0, #11
 800310e:	f7fe fa39 	bl	8001584 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <ereaseDebugLog+0x18>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <ereaseDebugLog+0x1c>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	08010e5c 	.word	0x08010e5c
 8003124:	2001ebe4 	.word	0x2001ebe4

08003128 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 800312c:	4b03      	ldr	r3, [pc, #12]	; (800313c <getDistanceLogSize+0x14>)
 800312e:	881b      	ldrh	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20016e44 	.word	0x20016e44

08003140 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <getCrossLogSize+0x14>)
 8003146:	881b      	ldrh	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20016e48 	.word	0x20016e48

08003158 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
	return log_side_cnt;
 800315c:	4b03      	ldr	r3, [pc, #12]	; (800316c <getSideLogSize+0x14>)
 800315e:	881b      	ldrh	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20016e4a 	.word	0x20016e4a

08003170 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <getDebugLogSize+0x14>)
 8003176:	881b      	ldrh	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20016e4c 	.word	0x20016e4c

08003188 <loadDistance>:


void loadDistance(){
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <loadDistance+0x6c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a18      	ldr	r2, [pc, #96]	; (80031f8 <loadDistance+0x70>)
 8003198:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <loadDistance+0x74>)
 800319c:	2200      	movs	r2, #0
 800319e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <loadDistance+0x70>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	4915      	ldr	r1, [pc, #84]	; (8003200 <loadDistance+0x78>)
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <loadDistance+0x78>)
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	eef4 7a67 	vcmp.f32	s15, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	d60e      	bvs.n	80031e6 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80031c8:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <loadDistance+0x74>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <loadDistance+0x74>)
 80031d2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <loadDistance+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <loadDistance+0x70>)
 80031dc:	6013      	str	r3, [r2, #0]
		i++;
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	3301      	adds	r3, #1
 80031e2:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 80031e4:	e7dc      	b.n	80031a0 <loadDistance+0x18>
			break;
 80031e6:	bf00      	nop
	}
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	08010e4c 	.word	0x08010e4c
 80031f8:	2001ebe0 	.word	0x2001ebe0
 80031fc:	20016e44 	.word	0x20016e44
 8003200:	2000c264 	.word	0x2000c264

08003204 <loadTheta>:

void loadTheta(){
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <loadTheta+0x6c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <loadTheta+0x70>)
 8003214:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <loadTheta+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 800321c:	4b15      	ldr	r3, [pc, #84]	; (8003274 <loadTheta+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	6812      	ldr	r2, [r2, #0]
 8003226:	4915      	ldr	r1, [pc, #84]	; (800327c <loadTheta+0x78>)
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	4a12      	ldr	r2, [pc, #72]	; (800327c <loadTheta+0x78>)
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	eef4 7a67 	vcmp.f32	s15, s15
 800323e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003242:	d60e      	bvs.n	8003262 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <loadTheta+0x74>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <loadTheta+0x74>)
 800324e:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <loadTheta+0x70>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <loadTheta+0x70>)
 8003258:	6013      	str	r3, [r2, #0]
		i++;
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	3301      	adds	r3, #1
 800325e:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003260:	e7dc      	b.n	800321c <loadTheta+0x18>
			break;
 8003262:	bf00      	nop
	}
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	08010e50 	.word	0x08010e50
 8003274:	2001ebec 	.word	0x2001ebec
 8003278:	20016e46 	.word	0x20016e46
 800327c:	20011854 	.word	0x20011854

08003280 <loadCross>:

void loadCross(){
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <loadCross+0x6c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a18      	ldr	r2, [pc, #96]	; (80032f0 <loadCross+0x70>)
 8003290:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <loadCross+0x74>)
 8003294:	2200      	movs	r2, #0
 8003296:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <loadCross+0x70>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	4915      	ldr	r1, [pc, #84]	; (80032f8 <loadCross+0x78>)
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <loadCross+0x78>)
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eef4 7a67 	vcmp.f32	s15, s15
 80032ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032be:	d60e      	bvs.n	80032de <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80032c0:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <loadCross+0x74>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <loadCross+0x74>)
 80032ca:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <loadCross+0x70>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <loadCross+0x70>)
 80032d4:	6013      	str	r3, [r2, #0]
		i++;
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	3301      	adds	r3, #1
 80032da:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 80032dc:	e7dc      	b.n	8003298 <loadCross+0x18>
			break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	08010e54 	.word	0x08010e54
 80032f0:	2001ec58 	.word	0x2001ec58
 80032f4:	20016e48 	.word	0x20016e48
 80032f8:	200003c4 	.word	0x200003c4

080032fc <loadSide>:

void loadSide(){
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8003306:	4b18      	ldr	r3, [pc, #96]	; (8003368 <loadSide+0x6c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a18      	ldr	r2, [pc, #96]	; (800336c <loadSide+0x70>)
 800330c:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <loadSide+0x74>)
 8003310:	2200      	movs	r2, #0
 8003312:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003314:	4b15      	ldr	r3, [pc, #84]	; (800336c <loadSide+0x70>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	4915      	ldr	r1, [pc, #84]	; (8003374 <loadSide+0x78>)
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4a12      	ldr	r2, [pc, #72]	; (8003374 <loadSide+0x78>)
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef4 7a67 	vcmp.f32	s15, s15
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	d60e      	bvs.n	800335a <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <loadSide+0x74>)
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <loadSide+0x74>)
 8003346:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <loadSide+0x70>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3304      	adds	r3, #4
 800334e:	4a07      	ldr	r2, [pc, #28]	; (800336c <loadSide+0x70>)
 8003350:	6013      	str	r3, [r2, #0]
		i++;
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	3301      	adds	r3, #1
 8003356:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003358:	e7dc      	b.n	8003314 <loadSide+0x18>
			break;
 800335a:	bf00      	nop
	}
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	08010e58 	.word	0x08010e58
 800336c:	2001ec50 	.word	0x2001ec50
 8003370:	20016e4a 	.word	0x20016e4a
 8003374:	20000554 	.word	0x20000554

08003378 <loadDebug>:

void loadDebug(){
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <loadDebug+0x6c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <loadDebug+0x70>)
 8003388:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <loadDebug+0x74>)
 800338c:	2200      	movs	r2, #0
 800338e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <loadDebug+0x70>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	88fb      	ldrh	r3, [r7, #6]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4915      	ldr	r1, [pc, #84]	; (80033f0 <loadDebug+0x78>)
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <loadDebug+0x78>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eef4 7a67 	vcmp.f32	s15, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d60e      	bvs.n	80033d6 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <loadDebug+0x74>)
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <loadDebug+0x74>)
 80033c2:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <loadDebug+0x70>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <loadDebug+0x70>)
 80033cc:	6013      	str	r3, [r2, #0]
		i++;
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	3301      	adds	r3, #1
 80033d2:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80033d4:	e7dc      	b.n	8003390 <loadDebug+0x18>
			break;
 80033d6:	bf00      	nop
	}
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	08010e5c 	.word	0x08010e5c
 80033e8:	2001ec28 	.word	0x2001ec28
 80033ec:	20016e4c 	.word	0x20016e4c
 80033f0:	200006e4 	.word	0x200006e4

080033f4 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
	return log_distance;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <getDistanceArrayPointer+0x10>)
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	2000c264 	.word	0x2000c264

08003408 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	return log_theta;
 800340c:	4b02      	ldr	r3, [pc, #8]	; (8003418 <getThetaArrayPointer+0x10>)
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20011854 	.word	0x20011854

0800341c <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <getDistanceLog+0x28>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ee07 3a90 	vmov	s15, r3
}
 8003434:	eeb0 0a67 	vmov.f32	s0, s15
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	2000c264 	.word	0x2000c264

08003448 <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <getCrossLog+0x28>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	200003c4 	.word	0x200003c4

08003474 <getSideLog>:

float getSideLog(uint16_t idx){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <getSideLog+0x28>)
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000554 	.word	0x20000554

080034a0 <getDebugLog>:

float getDebugLog(uint16_t idx){
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <getDebugLog+0x28>)
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	ee07 3a90 	vmov	s15, r3
}
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	200006e4 	.word	0x200006e4

080034cc <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80034e0:	2200      	movs	r2, #0
 80034e2:	2104      	movs	r1, #4
 80034e4:	480d      	ldr	r0, [pc, #52]	; (800351c <read_byte+0x50>)
 80034e6:	f004 fdc5 	bl	8008074 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80034ea:	f107 010f 	add.w	r1, r7, #15
 80034ee:	2364      	movs	r3, #100	; 0x64
 80034f0:	2201      	movs	r2, #1
 80034f2:	480b      	ldr	r0, [pc, #44]	; (8003520 <read_byte+0x54>)
 80034f4:	f005 fbb0 	bl	8008c58 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80034f8:	f107 010e 	add.w	r1, r7, #14
 80034fc:	2364      	movs	r3, #100	; 0x64
 80034fe:	2201      	movs	r2, #1
 8003500:	4807      	ldr	r0, [pc, #28]	; (8003520 <read_byte+0x54>)
 8003502:	f005 fcdd 	bl	8008ec0 <HAL_SPI_Receive>
		CS_SET;
 8003506:	2201      	movs	r2, #1
 8003508:	2104      	movs	r1, #4
 800350a:	4804      	ldr	r0, [pc, #16]	; (800351c <read_byte+0x50>)
 800350c:	f004 fdb2 	bl	8008074 <HAL_GPIO_WritePin>

	return val;
 8003510:	7bbb      	ldrb	r3, [r7, #14]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40020c00 	.word	0x40020c00
 8003520:	2001eec0 	.word	0x2001eec0

08003524 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	460a      	mov	r2, r1
 800352e:	71fb      	strb	r3, [r7, #7]
 8003530:	4613      	mov	r3, r2
 8003532:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353a:	b2db      	uxtb	r3, r3
 800353c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	480c      	ldr	r0, [pc, #48]	; (8003574 <write_byte+0x50>)
 8003544:	f004 fd96 	bl	8008074 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 8003548:	f107 010f 	add.w	r1, r7, #15
 800354c:	2364      	movs	r3, #100	; 0x64
 800354e:	2201      	movs	r2, #1
 8003550:	4809      	ldr	r0, [pc, #36]	; (8003578 <write_byte+0x54>)
 8003552:	f005 fb81 	bl	8008c58 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 8003556:	1db9      	adds	r1, r7, #6
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	2201      	movs	r2, #1
 800355c:	4806      	ldr	r0, [pc, #24]	; (8003578 <write_byte+0x54>)
 800355e:	f005 fcaf 	bl	8008ec0 <HAL_SPI_Receive>
	CS_SET;
 8003562:	2201      	movs	r2, #1
 8003564:	2104      	movs	r1, #4
 8003566:	4803      	ldr	r0, [pc, #12]	; (8003574 <write_byte+0x50>)
 8003568:	f004 fd84 	bl	8008074 <HAL_GPIO_WritePin>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40020c00 	.word	0x40020c00
 8003578:	2001eec0 	.word	0x2001eec0

0800357c <IMU_init>:

uint8_t IMU_init() {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 8003586:	2075      	movs	r0, #117	; 0x75
 8003588:	f7ff ffa0 	bl	80034cc <read_byte>
 800358c:	4603      	mov	r3, r0
 800358e:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003590:	79bb      	ldrb	r3, [r7, #6]
 8003592:	2b70      	cmp	r3, #112	; 0x70
 8003594:	d110      	bne.n	80035b8 <IMU_init+0x3c>
		ret = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800359a:	2100      	movs	r1, #0
 800359c:	206b      	movs	r0, #107	; 0x6b
 800359e:	f7ff ffc1 	bl	8003524 <write_byte>
		HAL_Delay(100);
 80035a2:	2064      	movs	r0, #100	; 0x64
 80035a4:	f003 f934 	bl	8006810 <HAL_Delay>
		write_byte(0x1A, 0x00);
 80035a8:	2100      	movs	r1, #0
 80035aa:	201a      	movs	r0, #26
 80035ac:	f7ff ffba 	bl	8003524 <write_byte>
		write_byte(0x1B, 0x18);
 80035b0:	2118      	movs	r1, #24
 80035b2:	201b      	movs	r0, #27
 80035b4:	f7ff ffb6 	bl	8003524 <write_byte>
	}
	return ret;
 80035b8:	79fb      	ldrb	r3, [r7, #7]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <read_gyro_data>:

void read_gyro_data() {
 80035c4:	b598      	push	{r3, r4, r7, lr}
 80035c6:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80035c8:	2047      	movs	r0, #71	; 0x47
 80035ca:	f7ff ff7f 	bl	80034cc <read_byte>
 80035ce:	4603      	mov	r3, r0
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	b21c      	sxth	r4, r3
 80035d4:	2048      	movs	r0, #72	; 0x48
 80035d6:	f7ff ff79 	bl	80034cc <read_byte>
 80035da:	4603      	mov	r3, r0
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4323      	orrs	r3, r4
 80035e0:	b21a      	sxth	r2, r3
 80035e2:	4b02      	ldr	r3, [pc, #8]	; (80035ec <read_gyro_data+0x28>)
 80035e4:	801a      	strh	r2, [r3, #0]
}
 80035e6:	bf00      	nop
 80035e8:	bd98      	pop	{r3, r4, r7, pc}
 80035ea:	bf00      	nop
 80035ec:	2001edf4 	.word	0x2001edf4

080035f0 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 80035f6:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <calculateVelocityControlFlip+0x108>)
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	4b40      	ldr	r3, [pc, #256]	; (80036fc <calculateVelocityControlFlip+0x10c>)
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800360a:	f000 f8d9 	bl	80037c0 <getCurrentVelocity>
 800360e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <calculateVelocityControlFlip+0x110>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d163      	bne.n	80036e2 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 800361a:	4b3a      	ldr	r3, [pc, #232]	; (8003704 <calculateVelocityControlFlip+0x114>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d106      	bne.n	8003630 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003622:	4b39      	ldr	r3, [pc, #228]	; (8003708 <calculateVelocityControlFlip+0x118>)
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <calculateVelocityControlFlip+0x114>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003630:	f000 f894 	bl	800375c <setvariablespeed>
 8003634:	eeb0 7a40 	vmov.f32	s14, s0
 8003638:	edd7 7a03 	vldr	s15, [r7, #12]
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003644:	ed97 7a07 	vldr	s14, [r7, #28]
 8003648:	edd7 7a04 	vldr	s15, [r7, #16]
 800364c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003650:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003654:	4b2c      	ldr	r3, [pc, #176]	; (8003708 <calculateVelocityControlFlip+0x118>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff75 	bl	8000548 <__aeabi_f2d>
 800365e:	4604      	mov	r4, r0
 8003660:	460d      	mov	r5, r1
 8003662:	ed97 7a06 	vldr	s14, [r7, #24]
 8003666:	edd7 7a04 	vldr	s15, [r7, #16]
 800366a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800366e:	ee17 0a90 	vmov	r0, s15
 8003672:	f7fc ff69 	bl	8000548 <__aeabi_f2d>
 8003676:	a31e      	add	r3, pc, #120	; (adr r3, 80036f0 <calculateVelocityControlFlip+0x100>)
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f7fc ffbc 	bl	80005f8 <__aeabi_dmul>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4620      	mov	r0, r4
 8003686:	4629      	mov	r1, r5
 8003688:	f7fc fe00 	bl	800028c <__adddf3>
 800368c:	4603      	mov	r3, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4618      	mov	r0, r3
 8003692:	4621      	mov	r1, r4
 8003694:	f7fd faa8 	bl	8000be8 <__aeabi_d2f>
 8003698:	4602      	mov	r2, r0
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <calculateVelocityControlFlip+0x118>)
 800369c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 800369e:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036a0:	ed93 7a00 	vldr	s14, [r3]
 80036a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <calculateVelocityControlFlip+0x11c>)
 80036ae:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <calculateVelocityControlFlip+0x120>)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80036b8:	4b13      	ldr	r3, [pc, #76]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <calculateVelocityControlFlip+0x124>)
 80036be:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <calculateVelocityControlFlip+0x118>)
 80036c2:	ed93 7a00 	vldr	s14, [r3]
 80036c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	4b10      	ldr	r3, [pc, #64]	; (8003718 <calculateVelocityControlFlip+0x128>)
 80036d8:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80036dc:	4a0f      	ldr	r2, [pc, #60]	; (800371c <calculateVelocityControlFlip+0x12c>)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	6013      	str	r3, [r2, #0]

	}

}
 80036e2:	bf00      	nop
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bdb0      	pop	{r4, r5, r7, pc}
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036f4:	3f50624d 	.word	0x3f50624d
 80036f8:	44bb8000 	.word	0x44bb8000
 80036fc:	469c4000 	.word	0x469c4000
 8003700:	20016e4e 	.word	0x20016e4e
 8003704:	20016e4f 	.word	0x20016e4f
 8003708:	20016e5c 	.word	0x20016e5c
 800370c:	2001ee00 	.word	0x2001ee00
 8003710:	2001ee10 	.word	0x2001ee10
 8003714:	2001ee08 	.word	0x2001ee08
 8003718:	20016e50 	.word	0x20016e50
 800371c:	20016e60 	.word	0x20016e60

08003720 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <getVelocityControlTerm+0x18>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	ee07 3a90 	vmov	s15, r3
}
 800372c:	eeb0 0a67 	vmov.f32	s0, s15
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	20016e50 	.word	0x20016e50

0800373c <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003746:	4a04      	ldr	r2, [pc, #16]	; (8003758 <setTargetVelocity+0x1c>)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	20016e54 	.word	0x20016e54

0800375c <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003760:	f7fd fe9a 	bl	8001498 <getspeedcount>
 8003764:	eeb0 7a40 	vmov.f32	s14, s0
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <setvariablespeed+0x5c>)
 800376a:	edd3 7a00 	vldr	s15, [r3]
 800376e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003776:	db04      	blt.n	8003782 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <setvariablespeed+0x5c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <setvariablespeed+0x60>)
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e012      	b.n	80037a8 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003782:	f7fd fe89 	bl	8001498 <getspeedcount>
 8003786:	eeb0 7a40 	vmov.f32	s14, s0
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <setvariablespeed+0x5c>)
 800378c:	edd3 7a00 	vldr	s15, [r3]
 8003790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d506      	bpl.n	80037a8 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800379a:	f7fd fe7d 	bl	8001498 <getspeedcount>
 800379e:	eef0 7a40 	vmov.f32	s15, s0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <setvariablespeed+0x60>)
 80037a4:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80037a8:	4b04      	ldr	r3, [pc, #16]	; (80037bc <setvariablespeed+0x60>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	ee07 3a90 	vmov	s15, r3
}
 80037b0:	eeb0 0a67 	vmov.f32	s0, s15
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20016e54 	.word	0x20016e54
 80037bc:	20016e58 	.word	0x20016e58

080037c0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	80fb      	strh	r3, [r7, #6]
 80037ca:	2300      	movs	r3, #0
 80037cc:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	1dbb      	adds	r3, r7, #6
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fd fd7d 	bl	80012d4 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80037da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037de:	461a      	mov	r2, r3
 80037e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	0fda      	lsrs	r2, r3, #31
 80037e8:	4413      	add	r3, r2
 80037ea:	105b      	asrs	r3, r3, #1
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f4:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f7fc fea5 	bl	8000548 <__aeabi_f2d>
 80037fe:	a30d      	add	r3, pc, #52	; (adr r3, 8003834 <getCurrentVelocity+0x74>)
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f7fc fef8 	bl	80005f8 <__aeabi_dmul>
 8003808:	4603      	mov	r3, r0
 800380a:	460c      	mov	r4, r1
 800380c:	4618      	mov	r0, r3
 800380e:	4621      	mov	r1, r4
 8003810:	f7fd f9ea 	bl	8000be8 <__aeabi_d2f>
 8003814:	4603      	mov	r3, r0
 8003816:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003818:	4a05      	ldr	r2, [pc, #20]	; (8003830 <getCurrentVelocity+0x70>)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	ee07 3a90 	vmov	s15, r3
}
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	bf00      	nop
 8003830:	2001ee04 	.word	0x2001ee04
 8003834:	2df331e5 	.word	0x2df331e5
 8003838:	3f878fcc 	.word	0x3f878fcc

0800383c <getTargetVelocity>:

float getTargetVelocity()
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
	return target_velocity;
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <getTargetVelocity+0x18>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	ee07 3a90 	vmov	s15, r3
}
 8003848:	eeb0 0a67 	vmov.f32	s0, s15
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	20016e54 	.word	0x20016e54

08003858 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 800385c:	4b05      	ldr	r3, [pc, #20]	; (8003874 <startVelocityControl+0x1c>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003862:	4b05      	ldr	r3, [pc, #20]	; (8003878 <startVelocityControl+0x20>)
 8003864:	2201      	movs	r2, #1
 8003866:	701a      	strb	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	20016e4e 	.word	0x20016e4e
 8003878:	20016e4f 	.word	0x20016e4f

0800387c <stopVelocityControl>:

void stopVelocityControl(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <stopVelocityControl+0x14>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20016e4e 	.word	0x20016e4e

08003894 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <setClearFlagOfVelocityControlI+0x14>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
}
 800389e:	bf00      	nop
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	20016e4f 	.word	0x20016e4f

080038ac <CreateXYcoordinates>:
static float target_X_coordinate;
static float target_Y_coordinate;
static float target_Theta;

void CreateXYcoordinates()
{
 80038ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80038b0:	b08a      	sub	sp, #40	; 0x28
 80038b2:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80038b4:	f7ff fd9e 	bl	80033f4 <getDistanceArrayPointer>
 80038b8:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80038ba:	f7ff fda5 	bl	8003408 <getThetaArrayPointer>
 80038be:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 80038d2:	f7ff fc29 	bl	8003128 <getDistanceLogSize>
 80038d6:	4603      	mov	r3, r0
 80038d8:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 80038da:	2300      	movs	r3, #0
 80038dc:	82fb      	strh	r3, [r7, #22]
 80038de:	e095      	b.n	8003a0c <CreateXYcoordinates+0x160>
		temp_distance = p_distance[i];
 80038e0:	8afb      	ldrh	r3, [r7, #22]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 80038ec:	8afb      	ldrh	r3, [r7, #22]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 80038f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d101      	bne.n	800390a <CreateXYcoordinates+0x5e>
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <CreateXYcoordinates+0x174>)
 8003908:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 800390a:	6a38      	ldr	r0, [r7, #32]
 800390c:	f7fc fe1c 	bl	8000548 <__aeabi_f2d>
 8003910:	4604      	mov	r4, r0
 8003912:	460d      	mov	r5, r1
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fc fe17 	bl	8000548 <__aeabi_f2d>
 800391a:	4680      	mov	r8, r0
 800391c:	4689      	mov	r9, r1
 800391e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003922:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003926:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800392a:	edd7 7a06 	vldr	s15, [r7, #24]
 800392e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003932:	ee17 0a90 	vmov	r0, s15
 8003936:	f7fc fe07 	bl	8000548 <__aeabi_f2d>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ec43 2b10 	vmov	d0, r2, r3
 8003942:	f007 f9f5 	bl	800ad30 <cos>
 8003946:	ec53 2b10 	vmov	r2, r3, d0
 800394a:	4640      	mov	r0, r8
 800394c:	4649      	mov	r1, r9
 800394e:	f7fc fe53 	bl	80005f8 <__aeabi_dmul>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4620      	mov	r0, r4
 8003958:	4629      	mov	r1, r5
 800395a:	f7fc fc97 	bl	800028c <__adddf3>
 800395e:	4603      	mov	r3, r0
 8003960:	460c      	mov	r4, r1
 8003962:	4618      	mov	r0, r3
 8003964:	4621      	mov	r1, r4
 8003966:	f7fd f93f 	bl	8000be8 <__aeabi_d2f>
 800396a:	4603      	mov	r3, r0
 800396c:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 800396e:	69f8      	ldr	r0, [r7, #28]
 8003970:	f7fc fdea 	bl	8000548 <__aeabi_f2d>
 8003974:	4604      	mov	r4, r0
 8003976:	460d      	mov	r5, r1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fc fde5 	bl	8000548 <__aeabi_f2d>
 800397e:	4680      	mov	r8, r0
 8003980:	4689      	mov	r9, r1
 8003982:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003986:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800398a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800398e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	ee17 0a90 	vmov	r0, s15
 800399a:	f7fc fdd5 	bl	8000548 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	ec43 2b10 	vmov	d0, r2, r3
 80039a6:	f007 fa07 	bl	800adb8 <sin>
 80039aa:	ec53 2b10 	vmov	r2, r3, d0
 80039ae:	4640      	mov	r0, r8
 80039b0:	4649      	mov	r1, r9
 80039b2:	f7fc fe21 	bl	80005f8 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4620      	mov	r0, r4
 80039bc:	4629      	mov	r1, r5
 80039be:	f7fc fc65 	bl	800028c <__adddf3>
 80039c2:	4603      	mov	r3, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	4618      	mov	r0, r3
 80039c8:	4621      	mov	r1, r4
 80039ca:	f7fd f90d 	bl	8000be8 <__aeabi_d2f>
 80039ce:	4603      	mov	r3, r0
 80039d0:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 80039d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80039d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	4a0f      	ldr	r2, [pc, #60]	; (8003a24 <CreateXYcoordinates+0x178>)
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 80039ee:	8afb      	ldrh	r3, [r7, #22]
 80039f0:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <CreateXYcoordinates+0x17c>)
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	601a      	str	r2, [r3, #0]
		Theta_table[i] = th;
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	4a0b      	ldr	r2, [pc, #44]	; (8003a2c <CreateXYcoordinates+0x180>)
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 8003a06:	8afb      	ldrh	r3, [r7, #22]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	82fb      	strh	r3, [r7, #22]
 8003a0c:	8afa      	ldrh	r2, [r7, #22]
 8003a0e:	897b      	ldrh	r3, [r7, #10]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f4ff af65 	bcc.w	80038e0 <CreateXYcoordinates+0x34>

		//saveDebug(X_table[i]);//X_tableに値が入っているか確認済み
	    //saveDebug(Y_table[i]);

	}
}
 8003a16:	bf00      	nop
 8003a18:	3728      	adds	r7, #40	; 0x28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a20:	3727c5ac 	.word	0x3727c5ac
 8003a24:	20016e64 	.word	0x20016e64
 8003a28:	20018da4 	.word	0x20018da4
 8003a2c:	2001ace4 	.word	0x2001ace4

08003a30 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003a42:	f7fd fcef 	bl	8001424 <getDistance10mm>
 8003a46:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003a4a:	f7fd feff 	bl	800184c <getTheta10mm>
 8003a4e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003a52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d101      	bne.n	8003a64 <CurrentXcoordinates+0x34>
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <CurrentXcoordinates+0x9c>)
 8003a62:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cosf(pre_th + now_theta/2);
 8003a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003a70:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003a72:	edd3 7a00 	vldr	s15, [r3]
 8003a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	f007 f9e3 	bl	800ae48 <cosf>
 8003a82:	eeb0 7a40 	vmov.f32	s14, s0
 8003a86:	edd7 7a00 	vldr	s15, [r7]
 8003a8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <CurrentXcoordinates+0xa4>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a98:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_theta;
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aaa:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <CurrentXcoordinates+0xa4>)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003ab4:	4a06      	ldr	r2, [pc, #24]	; (8003ad0 <CurrentXcoordinates+0xa0>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6013      	str	r3, [r2, #0]

	return x;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	ee07 3a90 	vmov	s15, r3
}
 8003ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	3727c5ac 	.word	0x3727c5ac
 8003ad0:	2001cc30 	.word	0x2001cc30
 8003ad4:	2001cc34 	.word	0x2001cc34

08003ad8 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003aea:	f7fd fc9b 	bl	8001424 <getDistance10mm>
 8003aee:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003af2:	f7fd feab 	bl	800184c <getTheta10mm>
 8003af6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003afe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d101      	bne.n	8003b0c <CurrentYcoordinates+0x34>
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <CurrentYcoordinates+0x9c>)
 8003b0a:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sinf(pre_th + now_theta/2);
 8003b0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003b18:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	f007 f9cf 	bl	800aec8 <sinf>
 8003b2a:	eeb0 7a40 	vmov.f32	s14, s0
 8003b2e:	edd7 7a00 	vldr	s15, [r7]
 8003b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <CurrentYcoordinates+0xa4>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_theta;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b46:	edd3 7a00 	vldr	s15, [r3]
 8003b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <CurrentYcoordinates+0xa4>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003b5c:	4a06      	ldr	r2, [pc, #24]	; (8003b78 <CurrentYcoordinates+0xa0>)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6013      	str	r3, [r2, #0]

	return y;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	ee07 3a90 	vmov	s15, r3
}
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	3727c5ac 	.word	0x3727c5ac
 8003b78:	2001cc38 	.word	0x2001cc38
 8003b7c:	2001cc3c 	.word	0x2001cc3c

08003b80 <updateTargetpoint>:

void updateTargetpoint()
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	if(getTargetUpdateflag() == true){
 8003b84:	f002 f89a 	bl	8005cbc <getTargetUpdateflag>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d039      	beq.n	8003c02 <updateTargetpoint+0x82>
		}else if(getDistance30mm() >= 30){
			ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
			clearDistance30mm();
		}*/
		if(getDistance30mm() >= 30){
 8003b8e:	f7fd fc65 	bl	800145c <getDistance30mm>
 8003b92:	eeb0 7a40 	vmov.f32	s14, s0
 8003b96:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8003b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	db07      	blt.n	8003bb4 <updateTargetpoint+0x34>
			//ref_XYdistance += getDistanceLog(targetpoint_table_idx);
			targetpoint_table_idx++;
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <updateTargetpoint+0x88>)
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <updateTargetpoint+0x88>)
 8003bae:	801a      	strh	r2, [r3, #0]
			clearDistance30mm();
 8003bb0:	f7fd fc62 	bl	8001478 <clearDistance30mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize()){
 8003bb4:	f7ff fab8 	bl	8003128 <getDistanceLogSize>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <updateTargetpoint+0x88>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d806      	bhi.n	8003bd2 <updateTargetpoint+0x52>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 8003bc4:	f7ff fab0 	bl	8003128 <getDistanceLogSize>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <updateTargetpoint+0x88>)
 8003bd0:	801a      	strh	r2, [r3, #0]
		}
		target_X_coordinate = X_table[targetpoint_table_idx];
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <updateTargetpoint+0x88>)
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	4a0d      	ldr	r2, [pc, #52]	; (8003c0c <updateTargetpoint+0x8c>)
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <updateTargetpoint+0x90>)
 8003be0:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[targetpoint_table_idx];
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <updateTargetpoint+0x88>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	4a0b      	ldr	r2, [pc, #44]	; (8003c14 <updateTargetpoint+0x94>)
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a0a      	ldr	r2, [pc, #40]	; (8003c18 <updateTargetpoint+0x98>)
 8003bf0:	6013      	str	r3, [r2, #0]
		target_Theta = Theta_table[targetpoint_table_idx];
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <updateTargetpoint+0x88>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <updateTargetpoint+0x9c>)
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <updateTargetpoint+0xa0>)
 8003c00:	6013      	str	r3, [r2, #0]
	}
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	2001ee18 	.word	0x2001ee18
 8003c0c:	20016e64 	.word	0x20016e64
 8003c10:	2001cc24 	.word	0x2001cc24
 8003c14:	20018da4 	.word	0x20018da4
 8003c18:	2001cc28 	.word	0x2001cc28
 8003c1c:	2001ace4 	.word	0x2001ace4
 8003c20:	2001cc2c 	.word	0x2001cc2c

08003c24 <ErrorTheta>:

float ErrorTheta(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
	float Theta_e = 0;
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]

	float now_theta = getaddTheta();
 8003c30:	f7fd fe28 	bl	8001884 <getaddTheta>
 8003c34:	ed87 0a00 	vstr	s0, [r7]

	Theta_e = target_Theta - now_theta;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <ErrorTheta+0x38>)
 8003c3a:	ed93 7a00 	vldr	s14, [r3]
 8003c3e:	edd7 7a00 	vldr	s15, [r7]
 8003c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c46:	edc7 7a01 	vstr	s15, [r7, #4]

	return Theta_e;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	ee07 3a90 	vmov	s15, r3
}
 8003c50:	eeb0 0a67 	vmov.f32	s0, s15
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	2001cc2c 	.word	0x2001cc2c

08003c60 <ErrorXcoordinates>:

float ErrorXcoordinates(void)//三角関数計算重い?
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	ed2d 8b02 	vpush	{d8}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
	float X_e = 0;
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

	float now_theta = getaddTheta();
 8003c70:	f7fd fe08 	bl	8001884 <getaddTheta>
 8003c74:	ed87 0a02 	vstr	s0, [r7, #8]
	float cos_theta = cosf(now_theta);
 8003c78:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c7c:	f007 f8e4 	bl	800ae48 <cosf>
 8003c80:	ed87 0a01 	vstr	s0, [r7, #4]
	float sin_theta = sinf(now_theta);
 8003c84:	ed97 0a02 	vldr	s0, [r7, #8]
 8003c88:	f007 f91e 	bl	800aec8 <sinf>
 8003c8c:	ed87 0a00 	vstr	s0, [r7]

	//if(now_theta == 0) now_theta = 0.00001;

	X_e = (target_X_coordinate - CurrentXcoordinates()) * cos_theta + (target_Y_coordinate - CurrentYcoordinates()) * sin_theta;
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <ErrorXcoordinates+0x80>)
 8003c92:	ed93 8a00 	vldr	s16, [r3]
 8003c96:	f7ff fecb 	bl	8003a30 <CurrentXcoordinates>
 8003c9a:	eef0 7a40 	vmov.f32	s15, s0
 8003c9e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8003ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ca6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <ErrorXcoordinates+0x84>)
 8003cac:	edd3 8a00 	vldr	s17, [r3]
 8003cb0:	f7ff ff12 	bl	8003ad8 <CurrentYcoordinates>
 8003cb4:	eef0 7a40 	vmov.f32	s15, s0
 8003cb8:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003cc8:	edc7 7a03 	vstr	s15, [r7, #12]

	return X_e;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	ee07 3a90 	vmov	s15, r3
}
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	ecbd 8b02 	vpop	{d8}
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	2001cc24 	.word	0x2001cc24
 8003ce4:	2001cc28 	.word	0x2001cc28

08003ce8 <ErrorYcoordinates>:

float ErrorYcoordinates(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	ed2d 8b02 	vpush	{d8}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
	float Y_e = 0;
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]

	float now_theta = getaddTheta();
 8003cf8:	f7fd fdc4 	bl	8001884 <getaddTheta>
 8003cfc:	ed87 0a02 	vstr	s0, [r7, #8]
	float cos_theta = cosf(now_theta);
 8003d00:	ed97 0a02 	vldr	s0, [r7, #8]
 8003d04:	f007 f8a0 	bl	800ae48 <cosf>
 8003d08:	ed87 0a01 	vstr	s0, [r7, #4]
	float sin_theta = sinf(now_theta);
 8003d0c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003d10:	f007 f8da 	bl	800aec8 <sinf>
 8003d14:	ed87 0a00 	vstr	s0, [r7]

	//if(now_theta == 0) now_theta = 0.00001;

	Y_e = -(target_X_coordinate - CurrentXcoordinates()) * sin_theta + (target_Y_coordinate - CurrentYcoordinates()) * cos_theta;
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <ErrorYcoordinates+0x84>)
 8003d1a:	ed93 8a00 	vldr	s16, [r3]
 8003d1e:	f7ff fe87 	bl	8003a30 <CurrentXcoordinates>
 8003d22:	eef0 7a40 	vmov.f32	s15, s0
 8003d26:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003d2a:	eeb1 7a67 	vneg.f32	s14, s15
 8003d2e:	edd7 7a00 	vldr	s15, [r7]
 8003d32:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003d36:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <ErrorYcoordinates+0x88>)
 8003d38:	edd3 8a00 	vldr	s17, [r3]
 8003d3c:	f7ff fecc 	bl	8003ad8 <CurrentYcoordinates>
 8003d40:	eef0 7a40 	vmov.f32	s15, s0
 8003d44:	ee38 7ae7 	vsub.f32	s14, s17, s15
 8003d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d50:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003d54:	edc7 7a03 	vstr	s15, [r7, #12]

	return Y_e;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	ee07 3a90 	vmov	s15, r3

}
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	ecbd 8b02 	vpop	{d8}
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	2001cc24 	.word	0x2001cc24
 8003d70:	2001cc28 	.word	0x2001cc28

08003d74 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003d7c:	1d39      	adds	r1, r7, #4
 8003d7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d82:	2201      	movs	r2, #1
 8003d84:	4803      	ldr	r0, [pc, #12]	; (8003d94 <__io_putchar+0x20>)
 8003d86:	f006 fb74 	bl	800a472 <HAL_UART_Transmit>
	return ch;
 8003d8a:	687b      	ldr	r3, [r7, #4]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	2001ef18 	.word	0x2001ef18

08003d98 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1a      	ldr	r2, [pc, #104]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d121      	bne.n	8003dee <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3301      	adds	r3, #1
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003db2:	6013      	str	r3, [r2, #0]
      timer2++;
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003dbc:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003dbe:	f7fd f9af 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003dc2:	f7fd fc39 	bl	8001638 <updateIMUValue>
      updateAnalogSensor();
 8003dc6:	f7fe fcb5 	bl	8002734 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003dca:	f7fd ffe1 	bl	8001d90 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003dce:	f7ff fc0f 	bl	80035f0 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003dd2:	f7fd f8d9 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003dd6:	f7fe f95b 	bl	8002090 <lineTraceFlip>
      runningFlip();
 8003dda:	f001 fc3f 	bl	800565c <runningFlip>
      motorCtrlFlip();
 8003dde:	f001 f95b 	bl	8005098 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003de2:	f001 f9bd 	bl	8005160 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003de6:	f001 fa29 	bl	800523c <updateSideSensorStatus>

      checkCourseOut();
 8003dea:	f7fe fa29 	bl	8002240 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d106      	bne.n	8003e06 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003e00:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003e02:	f7fe faa1 	bl	8002348 <storeAnalogSensorBuffer>

   }
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40001000 	.word	0x40001000
 8003e14:	2001ee1c 	.word	0x2001ee1c
 8003e18:	2001ee64 	.word	0x2001ee64
 8003e1c:	40001400 	.word	0x40001400
 8003e20:	2001f03c 	.word	0x2001f03c

08003e24 <init>:

void init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	  initADC();
 8003e28:	f7fe fa78 	bl	800231c <initADC>
	  initEncoder();
 8003e2c:	f7fd f95a 	bl	80010e4 <initEncoder>
	  initLog();
 8003e30:	f7ff f868 	bl	8002f04 <initLog>
	  initGyro();
 8003e34:	f7fd fbf0 	bl	8001618 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003e38:	4809      	ldr	r0, [pc, #36]	; (8003e60 <init+0x3c>)
 8003e3a:	f005 fc28 	bl	800968e <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003e3e:	4809      	ldr	r0, [pc, #36]	; (8003e64 <init+0x40>)
 8003e40:	f005 fc25 	bl	800968e <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003e44:	f001 f910 	bl	8005068 <initMotor>

	  setLED('R');
 8003e48:	2052      	movs	r0, #82	; 0x52
 8003e4a:	f7fd fd37 	bl	80018bc <setLED>

	  sensorCalibration();
 8003e4e:	f7fe fe63 	bl	8002b18 <sensorCalibration>

	  HAL_Delay(1000);
 8003e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e56:	f002 fcdb 	bl	8006810 <HAL_Delay>

}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	2001efb8 	.word	0x2001efb8
 8003e64:	2001f0a0 	.word	0x2001f0a0

08003e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e6c:	b090      	sub	sp, #64	; 0x40
 8003e6e:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e70:	f002 fc5c 	bl	800672c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e74:	f000 fba6 	bl	80045c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e78:	f001 f834 	bl	8004ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e7c:	f001 f80a 	bl	8004e94 <MX_DMA_Init>
  MX_TIM1_Init();
 8003e80:	f000 fdba 	bl	80049f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003e84:	f000 fe3a 	bl	8004afc <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e88:	f000 fe8c 	bl	8004ba4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003e8c:	f000 ff48 	bl	8004d20 <MX_TIM8_Init>
  MX_ADC1_Init();
 8003e90:	f000 fc02 	bl	8004698 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003e94:	f000 fd4c 	bl	8004930 <MX_I2C1_Init>
  MX_SPI3_Init();
 8003e98:	f000 fd78 	bl	800498c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003e9c:	f000 ffd0 	bl	8004e40 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003ea0:	f000 fed4 	bl	8004c4c <MX_TIM6_Init>
  MX_TIM7_Init();
 8003ea4:	f000 ff08 	bl	8004cb8 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003ea8:	f000 fc56 	bl	8004758 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003eac:	f7ff ffba 	bl	8003e24 <init>

  bool running_flag = false;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003eb4:	204c      	movs	r0, #76	; 0x4c
 8003eb6:	f002 fb2b 	bl	8006510 <getSwitchStatus>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d109      	bne.n	8003ed4 <main+0x6c>
 8003ec0:	4bb4      	ldr	r3, [pc, #720]	; (8004194 <main+0x32c>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <main+0x6c>
		  timer = 0;
 8003ec8:	4bb3      	ldr	r3, [pc, #716]	; (8004198 <main+0x330>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003ece:	4bb1      	ldr	r3, [pc, #708]	; (8004194 <main+0x32c>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003ed4:	204c      	movs	r0, #76	; 0x4c
 8003ed6:	f002 fb1b 	bl	8006510 <getSwitchStatus>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d10a      	bne.n	8003ef6 <main+0x8e>
 8003ee0:	4bad      	ldr	r3, [pc, #692]	; (8004198 <main+0x330>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b14      	cmp	r3, #20
 8003ee6:	d906      	bls.n	8003ef6 <main+0x8e>
 8003ee8:	4baa      	ldr	r3, [pc, #680]	; (8004194 <main+0x32c>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <main+0x8e>
		  sw = 2;
 8003ef0:	4ba8      	ldr	r3, [pc, #672]	; (8004194 <main+0x32c>)
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003ef6:	4ba8      	ldr	r3, [pc, #672]	; (8004198 <main+0x330>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b28      	cmp	r3, #40	; 0x28
 8003efc:	d906      	bls.n	8003f0c <main+0xa4>
 8003efe:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <main+0x32c>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d102      	bne.n	8003f0c <main+0xa4>
		  sw = 0;
 8003f06:	4ba3      	ldr	r3, [pc, #652]	; (8004194 <main+0x32c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003f0c:	204c      	movs	r0, #76	; 0x4c
 8003f0e:	f002 faff 	bl	8006510 <getSwitchStatus>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10c      	bne.n	8003f32 <main+0xca>
 8003f18:	4b9e      	ldr	r3, [pc, #632]	; (8004194 <main+0x32c>)
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d108      	bne.n	8003f32 <main+0xca>
		  //mode_selector++;
		  soiya++;
 8003f20:	4b9e      	ldr	r3, [pc, #632]	; (800419c <main+0x334>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	4b9c      	ldr	r3, [pc, #624]	; (800419c <main+0x334>)
 8003f2a:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003f2c:	4b99      	ldr	r3, [pc, #612]	; (8004194 <main+0x32c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003f32:	2052      	movs	r0, #82	; 0x52
 8003f34:	f002 faec 	bl	8006510 <getSwitchStatus>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d109      	bne.n	8003f52 <main+0xea>
 8003f3e:	4b98      	ldr	r3, [pc, #608]	; (80041a0 <main+0x338>)
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d105      	bne.n	8003f52 <main+0xea>
	  	  timer = 0;
 8003f46:	4b94      	ldr	r3, [pc, #592]	; (8004198 <main+0x330>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003f4c:	4b94      	ldr	r3, [pc, #592]	; (80041a0 <main+0x338>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003f52:	2052      	movs	r0, #82	; 0x52
 8003f54:	f002 fadc 	bl	8006510 <getSwitchStatus>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d10a      	bne.n	8003f74 <main+0x10c>
 8003f5e:	4b8e      	ldr	r3, [pc, #568]	; (8004198 <main+0x330>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2b14      	cmp	r3, #20
 8003f64:	d906      	bls.n	8003f74 <main+0x10c>
 8003f66:	4b8e      	ldr	r3, [pc, #568]	; (80041a0 <main+0x338>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d102      	bne.n	8003f74 <main+0x10c>
	  	  sw2 = 2;
 8003f6e:	4b8c      	ldr	r3, [pc, #560]	; (80041a0 <main+0x338>)
 8003f70:	2202      	movs	r2, #2
 8003f72:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003f74:	4b88      	ldr	r3, [pc, #544]	; (8004198 <main+0x330>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b28      	cmp	r3, #40	; 0x28
 8003f7a:	d906      	bls.n	8003f8a <main+0x122>
 8003f7c:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <main+0x338>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d102      	bne.n	8003f8a <main+0x122>
	  	  sw2 = 0;
 8003f84:	4b86      	ldr	r3, [pc, #536]	; (80041a0 <main+0x338>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003f8a:	2052      	movs	r0, #82	; 0x52
 8003f8c:	f002 fac0 	bl	8006510 <getSwitchStatus>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <main+0x148>
 8003f96:	4b82      	ldr	r3, [pc, #520]	; (80041a0 <main+0x338>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d108      	bne.n	8003fb0 <main+0x148>
	  	  cnt++;
 8003f9e:	4b81      	ldr	r3, [pc, #516]	; (80041a4 <main+0x33c>)
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <main+0x33c>)
 8003fa8:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003faa:	4b7d      	ldr	r3, [pc, #500]	; (80041a0 <main+0x338>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003fb0:	4b7c      	ldr	r3, [pc, #496]	; (80041a4 <main+0x33c>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d902      	bls.n	8003fbe <main+0x156>
		  cnt = 0;
 8003fb8:	4b7a      	ldr	r3, [pc, #488]	; (80041a4 <main+0x33c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <main+0x33c>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <main+0x176>
		  HAL_Delay(1000);
 8003fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fca:	f002 fc21 	bl	8006810 <HAL_Delay>
		  running_flag = true;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
		  timer2 = 0;
 8003fd2:	4b75      	ldr	r3, [pc, #468]	; (80041a8 <main+0x340>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003fd8:	4b72      	ldr	r3, [pc, #456]	; (80041a4 <main+0x33c>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003fde:	7dfb      	ldrb	r3, [r7, #23]
 8003fe0:	f083 0301 	eor.w	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <main+0x18a>
		  stopLineTrace();
 8003fea:	f7fe f917 	bl	800221c <stopLineTrace>
		  stopVelocityControl();
 8003fee:	f7ff fc45 	bl	800387c <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8003ff2:	f001 fe57 	bl	8005ca4 <getgoalStatus>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <main+0x1a4>
		  running_flag = false;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	75fb      	strb	r3, [r7, #23]
		  cnt = 0;
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <main+0x33c>)
 8004002:	2200      	movs	r2, #0
 8004004:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8004006:	2000      	movs	r0, #0
 8004008:	f001 f8fa 	bl	8005200 <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 800400c:	4b63      	ldr	r3, [pc, #396]	; (800419c <main+0x334>)
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	2b0d      	cmp	r3, #13
 8004012:	d902      	bls.n	800401a <main+0x1b2>
		  soiya = 0;
 8004014:	4b61      	ldr	r3, [pc, #388]	; (800419c <main+0x334>)
 8004016:	2200      	movs	r2, #0
 8004018:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 800401a:	4b60      	ldr	r3, [pc, #384]	; (800419c <main+0x334>)
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	2b0d      	cmp	r3, #13
 8004020:	f200 82a9 	bhi.w	8004576 <main+0x70e>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <main+0x1c4>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004065 	.word	0x08004065
 8004030:	08004091 	.word	0x08004091
 8004034:	080040c7 	.word	0x080040c7
 8004038:	0800410b 	.word	0x0800410b
 800403c:	0800414f 	.word	0x0800414f
 8004040:	080041c5 	.word	0x080041c5
 8004044:	08004219 	.word	0x08004219
 8004048:	0800426d 	.word	0x0800426d
 800404c:	080042c1 	.word	0x080042c1
 8004050:	08004315 	.word	0x08004315
 8004054:	08004369 	.word	0x08004369
 8004058:	080043bd 	.word	0x080043bd
 800405c:	08004411 	.word	0x08004411
 8004060:	08004465 	.word	0x08004465

			  case 0:
				  setLED('W');
 8004064:	2057      	movs	r0, #87	; 0x57
 8004066:	f7fd fc29 	bl	80018bc <setLED>
				  setLED2('R');
 800406a:	2052      	movs	r0, #82	; 0x52
 800406c:	f7fd fcf4 	bl	8001a58 <setLED2>
				  printf("0\r\n");
 8004070:	484e      	ldr	r0, [pc, #312]	; (80041ac <main+0x344>)
 8004072:	f009 fb31 	bl	800d6d8 <puts>

				  if(running_flag == true){
 8004076:	7dfb      	ldrb	r3, [r7, #23]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 827e 	beq.w	800457a <main+0x712>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 800407e:	2002      	movs	r0, #2
 8004080:	f001 f906 	bl	8005290 <setRunMode>
						  runningInit();
 8004084:	f001 fbee 	bl	8005864 <runningInit>
						  soiya = 13;
 8004088:	4b44      	ldr	r3, [pc, #272]	; (800419c <main+0x334>)
 800408a:	220d      	movs	r2, #13
 800408c:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 800408e:	e274      	b.n	800457a <main+0x712>

			  case 1:
				  setLED('G');
 8004090:	2047      	movs	r0, #71	; 0x47
 8004092:	f7fd fc13 	bl	80018bc <setLED>
				  setLED2('G');
 8004096:	2047      	movs	r0, #71	; 0x47
 8004098:	f7fd fcde 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 826d 	beq.w	800457e <main+0x716>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80040a4:	f7fd fa2c 	bl	8001500 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 80040a8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80041b0 <main+0x348>
 80040ac:	f7ff fb46 	bl	800373c <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 80040b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040b4:	f001 f8a4 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 80040b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80040bc:	f002 fba8 	bl	8006810 <HAL_Delay>

						  running();
 80040c0:	f001 f9cc 	bl	800545c <running>
				  }

				  break;
 80040c4:	e25b      	b.n	800457e <main+0x716>

			  case 2:
				  setLED('Y');
 80040c6:	2059      	movs	r0, #89	; 0x59
 80040c8:	f7fd fbf8 	bl	80018bc <setLED>
				  setLED2('R');
 80040cc:	2052      	movs	r0, #82	; 0x52
 80040ce:	f7fd fcc3 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80040d2:	7dfb      	ldrb	r3, [r7, #23]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8254 	beq.w	8004582 <main+0x71a>
						  //startLineTrace();

					      clearspeedcount();
 80040da:	f7fd fa11 	bl	8001500 <clearspeedcount>

					      IMU_average();
 80040de:	f7fd fb7f 	bl	80017e0 <IMU_average>

					      setRunMode(1);
 80040e2:	2001      	movs	r0, #1
 80040e4:	f001 f8d4 	bl	8005290 <setRunMode>

					      setVelocityRange(1.0, 1.0);
 80040e8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80040ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80040f0:	f001 fdf0 	bl	8005cd4 <setVelocityRange>

						  setsuctionMotor(500);
 80040f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040f8:	f001 f882 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1000);
 80040fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004100:	f002 fb86 	bl	8006810 <HAL_Delay>

						  running();
 8004104:	f001 f9aa 	bl	800545c <running>
				  }

				  break;
 8004108:	e23b      	b.n	8004582 <main+0x71a>

			  case 3:
				  setLED('Y');
 800410a:	2059      	movs	r0, #89	; 0x59
 800410c:	f7fd fbd6 	bl	80018bc <setLED>
				  setLED2('G');
 8004110:	2047      	movs	r0, #71	; 0x47
 8004112:	f7fd fca1 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004116:	7dfb      	ldrb	r3, [r7, #23]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8234 	beq.w	8004586 <main+0x71e>
						  //startLineTrace();

						  clearspeedcount();
 800411e:	f7fd f9ef 	bl	8001500 <clearspeedcount>

						  IMU_average();
 8004122:	f7fd fb5d 	bl	80017e0 <IMU_average>

						  setRunMode(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f001 f8b2 	bl	8005290 <setRunMode>

						  setVelocityRange(2.2, 2.2);
 800412c:	eddf 0a21 	vldr	s1, [pc, #132]	; 80041b4 <main+0x34c>
 8004130:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80041b4 <main+0x34c>
 8004134:	f001 fdce 	bl	8005cd4 <setVelocityRange>

						  setsuctionMotor(500);
 8004138:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800413c:	f001 f860 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1000);
 8004140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004144:	f002 fb64 	bl	8006810 <HAL_Delay>

						  running();
 8004148:	f001 f988 	bl	800545c <running>
				  }

				  break;
 800414c:	e21b      	b.n	8004586 <main+0x71e>

			  case 4:
				  setLED('C');
 800414e:	2043      	movs	r0, #67	; 0x43
 8004150:	f7fd fbb4 	bl	80018bc <setLED>
				  setLED2('R');
 8004154:	2052      	movs	r0, #82	; 0x52
 8004156:	f7fd fc7f 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800415a:	7dfb      	ldrb	r3, [r7, #23]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 8214 	beq.w	800458a <main+0x722>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8004162:	f7fd f9cd 	bl	8001500 <clearspeedcount>

						  IMU_average();
 8004166:	f7fd fb3b 	bl	80017e0 <IMU_average>

						  setRunMode(5);
 800416a:	2005      	movs	r0, #5
 800416c:	f001 f890 	bl	8005290 <setRunMode>

						  setVelocityRange(1.0, 1.0);
 8004170:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004174:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004178:	f001 fdac 	bl	8005cd4 <setVelocityRange>

						  setsuctionMotor(500);
 800417c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004180:	f001 f83e 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 8004184:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004188:	f002 fb42 	bl	8006810 <HAL_Delay>

						  running();
 800418c:	f001 f966 	bl	800545c <running>
				  }

				  break;
 8004190:	e1fb      	b.n	800458a <main+0x722>
 8004192:	bf00      	nop
 8004194:	2001f038 	.word	0x2001f038
 8004198:	2001ee1c 	.word	0x2001ee1c
 800419c:	2001cc42 	.word	0x2001cc42
 80041a0:	2001cc40 	.word	0x2001cc40
 80041a4:	2001eebc 	.word	0x2001eebc
 80041a8:	2001ee64 	.word	0x2001ee64
 80041ac:	08010df8 	.word	0x08010df8
 80041b0:	00000000 	.word	0x00000000
 80041b4:	400ccccd 	.word	0x400ccccd
 80041b8:	40133333 	.word	0x40133333
 80041bc:	40266666 	.word	0x40266666
 80041c0:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 80041c4:	2043      	movs	r0, #67	; 0x43
 80041c6:	f7fd fb79 	bl	80018bc <setLED>
				  setLED2('G');
 80041ca:	2047      	movs	r0, #71	; 0x47
 80041cc:	f7fd fc44 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 81db 	beq.w	800458e <main+0x726>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80041d8:	f7fd f992 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 80041dc:	2002      	movs	r0, #2
 80041de:	f001 f857 	bl	8005290 <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 80041e2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80041e6:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80041ea:	f001 fd73 	bl	8005cd4 <setVelocityRange>
						  setAccDec(7, 3);
 80041ee:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80041f2:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80041f6:	f001 fd85 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80041fa:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 80041c0 <main+0x358>
 80041fe:	f001 fd99 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 8004202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004206:	f000 fffb 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 800420a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800420e:	f002 faff 	bl	8006810 <HAL_Delay>

						  running();
 8004212:	f001 f923 	bl	800545c <running>
				  }

				  break;
 8004216:	e1ba      	b.n	800458e <main+0x726>

			  case 6:
				  setLED('C');
 8004218:	2043      	movs	r0, #67	; 0x43
 800421a:	f7fd fb4f 	bl	80018bc <setLED>
				  setLED2('B');
 800421e:	2042      	movs	r0, #66	; 0x42
 8004220:	f7fd fc1a 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004224:	7dfb      	ldrb	r3, [r7, #23]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 81b3 	beq.w	8004592 <main+0x72a>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800422c:	f7fd f968 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004230:	2002      	movs	r0, #2
 8004232:	f001 f82d 	bl	8005290 <setRunMode>

						  setVelocityRange(2.0, 6.0);
 8004236:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800423a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800423e:	f001 fd49 	bl	8005cd4 <setVelocityRange>
						  setAccDec(8, 5);
 8004242:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004246:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800424a:	f001 fd5b 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800424e:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 80041c0 <main+0x358>
 8004252:	f001 fd6f 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 8004256:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800425a:	f000 ffd1 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 800425e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004262:	f002 fad5 	bl	8006810 <HAL_Delay>

						  running();
 8004266:	f001 f8f9 	bl	800545c <running>
				  }

				  break;
 800426a:	e192      	b.n	8004592 <main+0x72a>

			  case 7:
				  setLED('C');
 800426c:	2043      	movs	r0, #67	; 0x43
 800426e:	f7fd fb25 	bl	80018bc <setLED>
				  setLED2('W');
 8004272:	2057      	movs	r0, #87	; 0x57
 8004274:	f7fd fbf0 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 818b 	beq.w	8004596 <main+0x72e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004280:	f7fd f93e 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004284:	2002      	movs	r0, #2
 8004286:	f001 f803 	bl	8005290 <setRunMode>

						  setVelocityRange(2.5, 6.0);
 800428a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800428e:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004292:	f001 fd1f 	bl	8005cd4 <setVelocityRange>
						  setAccDec(8, 5);
 8004296:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800429a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800429e:	f001 fd31 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80042a2:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 80041c0 <main+0x358>
 80042a6:	f001 fd45 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 80042aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042ae:	f000 ffa7 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 80042b2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042b6:	f002 faab 	bl	8006810 <HAL_Delay>

						  running();
 80042ba:	f001 f8cf 	bl	800545c <running>
				  }

				  break;
 80042be:	e16a      	b.n	8004596 <main+0x72e>

			  case 8:
				  setLED('C');
 80042c0:	2043      	movs	r0, #67	; 0x43
 80042c2:	f7fd fafb 	bl	80018bc <setLED>
				  setLED2('Y');
 80042c6:	2059      	movs	r0, #89	; 0x59
 80042c8:	f7fd fbc6 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 8163 	beq.w	800459a <main+0x732>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80042d4:	f7fd f914 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80042d8:	2003      	movs	r0, #3
 80042da:	f000 ffd9 	bl	8005290 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80042de:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80042e2:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 80041b8 <main+0x350>
 80042e6:	f001 fcf5 	bl	8005cd4 <setVelocityRange>
						  setAccDec(7, 4);
 80042ea:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80042ee:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80042f2:	f001 fd07 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80042f6:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 80041c0 <main+0x358>
 80042fa:	f001 fd1b 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 80042fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004302:	f000 ff7d 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 8004306:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800430a:	f002 fa81 	bl	8006810 <HAL_Delay>

						  running();
 800430e:	f001 f8a5 	bl	800545c <running>
				  }

			  	  break;
 8004312:	e142      	b.n	800459a <main+0x732>

			  case 9:
				  setLED('C');
 8004314:	2043      	movs	r0, #67	; 0x43
 8004316:	f7fd fad1 	bl	80018bc <setLED>
				  setLED2('X');
 800431a:	2058      	movs	r0, #88	; 0x58
 800431c:	f7fd fb9c 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004320:	7dfb      	ldrb	r3, [r7, #23]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 813b 	beq.w	800459e <main+0x736>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004328:	f7fd f8ea 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 800432c:	2003      	movs	r0, #3
 800432e:	f000 ffaf 	bl	8005290 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004332:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004336:	ed1f 0a60 	vldr	s0, [pc, #-384]	; 80041b8 <main+0x350>
 800433a:	f001 fccb 	bl	8005cd4 <setVelocityRange>
						  setAccDec(8, 6);
 800433e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004342:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004346:	f001 fcdd 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800434a:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 80041c0 <main+0x358>
 800434e:	f001 fcf1 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 8004352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004356:	f000 ff53 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1500);
 800435a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800435e:	f002 fa57 	bl	8006810 <HAL_Delay>

						  running();
 8004362:	f001 f87b 	bl	800545c <running>
				  }

				  break;
 8004366:	e11a      	b.n	800459e <main+0x736>

			  case 10:
				  setLED('C');
 8004368:	2043      	movs	r0, #67	; 0x43
 800436a:	f7fd faa7 	bl	80018bc <setLED>
				  setLED2('V');
 800436e:	2056      	movs	r0, #86	; 0x56
 8004370:	f7fd fb72 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 8113 	beq.w	80045a2 <main+0x73a>
						  //startLineTrace();

						  clearspeedcount();
 800437c:	f7fd f8c0 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004380:	2002      	movs	r0, #2
 8004382:	f000 ff85 	bl	8005290 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 8004386:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 800438a:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800438e:	f001 fca1 	bl	8005cd4 <setVelocityRange>
						  setAccDec(7, 4);
 8004392:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004396:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800439a:	f001 fcb3 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800439e:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 80041c0 <main+0x358>
 80043a2:	f001 fcc7 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 80043a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043aa:	f000 ff29 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1000);
 80043ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043b2:	f002 fa2d 	bl	8006810 <HAL_Delay>

						  running();
 80043b6:	f001 f851 	bl	800545c <running>
				  }

				  break;
 80043ba:	e0f2      	b.n	80045a2 <main+0x73a>


			  case 11:
				  setLED('C');
 80043bc:	2043      	movs	r0, #67	; 0x43
 80043be:	f7fd fa7d 	bl	80018bc <setLED>
				  setLED2('T');
 80043c2:	2054      	movs	r0, #84	; 0x54
 80043c4:	f7fd fb48 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80eb 	beq.w	80045a6 <main+0x73e>
						  //startLineTrace();

						  clearspeedcount();
 80043d0:	f7fd f896 	bl	8001500 <clearspeedcount>

						  setRunMode(3);
 80043d4:	2003      	movs	r0, #3
 80043d6:	f000 ff5b 	bl	8005290 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 80043da:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 80043de:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80043e2:	f001 fc77 	bl	8005cd4 <setVelocityRange>
						  setAccDec(10, 5);
 80043e6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80043ea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80043ee:	f001 fc89 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043f2:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 80041c0 <main+0x358>
 80043f6:	f001 fc9d 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 80043fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043fe:	f000 feff 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1000);
 8004402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004406:	f002 fa03 	bl	8006810 <HAL_Delay>

						  running();
 800440a:	f001 f827 	bl	800545c <running>
				  }

				  break;
 800440e:	e0ca      	b.n	80045a6 <main+0x73e>

			  case 12:
				  setLED('C');
 8004410:	2043      	movs	r0, #67	; 0x43
 8004412:	f7fd fa53 	bl	80018bc <setLED>
				  setLED2('A');
 8004416:	2041      	movs	r0, #65	; 0x41
 8004418:	f7fd fb1e 	bl	8001a58 <setLED2>

				  if(running_flag == true){
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 80c3 	beq.w	80045aa <main+0x742>
						  //startLineTrace();

						  clearspeedcount();
 8004424:	f7fd f86c 	bl	8001500 <clearspeedcount>

						  setRunMode(2);
 8004428:	2002      	movs	r0, #2
 800442a:	f000 ff31 	bl	8005290 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 800442e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004432:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 80041bc <main+0x354>
 8004436:	f001 fc4d 	bl	8005cd4 <setVelocityRange>
						  setAccDec(7, 4);
 800443a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800443e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004442:	f001 fc5f 	bl	8005d04 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004446:	ed1f 0aa2 	vldr	s0, [pc, #-648]	; 80041c0 <main+0x358>
 800444a:	f001 fc73 	bl	8005d34 <setStraightRadius>

						  setsuctionMotor(500);
 800444e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004452:	f000 fed5 	bl	8005200 <setsuctionMotor>

						  HAL_Delay(1000);
 8004456:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800445a:	f002 f9d9 	bl	8006810 <HAL_Delay>

						  running();
 800445e:	f000 fffd 	bl	800545c <running>
				  }

				  break;
 8004462:	e0a2      	b.n	80045aa <main+0x742>

			  case 13:
				  setLED('M');
 8004464:	204d      	movs	r0, #77	; 0x4d
 8004466:	f7fd fa29 	bl	80018bc <setLED>
				  setLED2('A');
 800446a:	2041      	movs	r0, #65	; 0x41
 800446c:	f7fd faf4 	bl	8001a58 <setLED2>
				  printf("6\r\n");
 8004470:	4850      	ldr	r0, [pc, #320]	; (80045b4 <main+0x74c>)
 8004472:	f009 f931 	bl	800d6d8 <puts>

				  if(running_flag == true){
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8098 	beq.w	80045ae <main+0x746>
					  loadDistance();
 800447e:	f7fe fe83 	bl	8003188 <loadDistance>
					  loadTheta();
 8004482:	f7fe febf 	bl	8003204 <loadTheta>
					  loadCross();
 8004486:	f7fe fefb 	bl	8003280 <loadCross>
					  loadSide();
 800448a:	f7fe ff37 	bl	80032fc <loadSide>
					  loadDebug();
 800448e:	f7fe ff73 	bl	8003378 <loadDebug>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 8004492:	4849      	ldr	r0, [pc, #292]	; (80045b8 <main+0x750>)
 8004494:	f009 f920 	bl	800d6d8 <puts>
					  uint16_t size = getDebugLogSize();
 8004498:	f7fe fe6a 	bl	8003170 <getDebugLogSize>
 800449c:	4603      	mov	r3, r0
 800449e:	827b      	strh	r3, [r7, #18]
					  /*
					  for(uint16_t i = 0; i < size; i = i+9){
						 printf("%f, %f, %f, %f, %f, %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5), getDebugLog(i + 6), getDebugLog(i + 7), getDebugLog(i + 8));
					  }*/

					  for(uint16_t i = 0; i < size; i = i+6){
 80044a0:	2300      	movs	r3, #0
 80044a2:	82bb      	strh	r3, [r7, #20]
 80044a4:	e05f      	b.n	8004566 <main+0x6fe>
						 printf("%f, %f, %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5));
 80044a6:	8abb      	ldrh	r3, [r7, #20]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fff9 	bl	80034a0 <getDebugLog>
 80044ae:	ee10 3a10 	vmov	r3, s0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f848 	bl	8000548 <__aeabi_f2d>
 80044b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044bc:	8abb      	ldrh	r3, [r7, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe ffec 	bl	80034a0 <getDebugLog>
 80044c8:	ee10 3a10 	vmov	r3, s0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fc f83b 	bl	8000548 <__aeabi_f2d>
 80044d2:	4604      	mov	r4, r0
 80044d4:	460d      	mov	r5, r1
 80044d6:	8abb      	ldrh	r3, [r7, #20]
 80044d8:	3302      	adds	r3, #2
 80044da:	b29b      	uxth	r3, r3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe ffdf 	bl	80034a0 <getDebugLog>
 80044e2:	ee10 3a10 	vmov	r3, s0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fc f82e 	bl	8000548 <__aeabi_f2d>
 80044ec:	4680      	mov	r8, r0
 80044ee:	4689      	mov	r9, r1
 80044f0:	8abb      	ldrh	r3, [r7, #20]
 80044f2:	3303      	adds	r3, #3
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe ffd2 	bl	80034a0 <getDebugLog>
 80044fc:	ee10 3a10 	vmov	r3, s0
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc f821 	bl	8000548 <__aeabi_f2d>
 8004506:	4682      	mov	sl, r0
 8004508:	468b      	mov	fp, r1
 800450a:	8abb      	ldrh	r3, [r7, #20]
 800450c:	3304      	adds	r3, #4
 800450e:	b29b      	uxth	r3, r3
 8004510:	4618      	mov	r0, r3
 8004512:	f7fe ffc5 	bl	80034a0 <getDebugLog>
 8004516:	ee10 3a10 	vmov	r3, s0
 800451a:	4618      	mov	r0, r3
 800451c:	f7fc f814 	bl	8000548 <__aeabi_f2d>
 8004520:	e9c7 0100 	strd	r0, r1, [r7]
 8004524:	8abb      	ldrh	r3, [r7, #20]
 8004526:	3305      	adds	r3, #5
 8004528:	b29b      	uxth	r3, r3
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ffb8 	bl	80034a0 <getDebugLog>
 8004530:	ee10 3a10 	vmov	r3, s0
 8004534:	4618      	mov	r0, r3
 8004536:	f7fc f807 	bl	8000548 <__aeabi_f2d>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004542:	ed97 7b00 	vldr	d7, [r7]
 8004546:	ed8d 7b06 	vstr	d7, [sp, #24]
 800454a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800454e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004552:	e9cd 4500 	strd	r4, r5, [sp]
 8004556:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800455a:	4818      	ldr	r0, [pc, #96]	; (80045bc <main+0x754>)
 800455c:	f009 f848 	bl	800d5f0 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+6){
 8004560:	8abb      	ldrh	r3, [r7, #20]
 8004562:	3306      	adds	r3, #6
 8004564:	82bb      	strh	r3, [r7, #20]
 8004566:	8aba      	ldrh	r2, [r7, #20]
 8004568:	8a7b      	ldrh	r3, [r7, #18]
 800456a:	429a      	cmp	r2, r3
 800456c:	d39b      	bcc.n	80044a6 <main+0x63e>
					  /*
					  for(uint16_t i = 0; i < size; i = i+1){
						 printf("%f\r\n", getDebugLog(i));
					  }*/

					  printf("9999, 9999\r\n");
 800456e:	4814      	ldr	r0, [pc, #80]	; (80045c0 <main+0x758>)
 8004570:	f009 f8b2 	bl	800d6d8 <puts>
				  }

				  break;
 8004574:	e01b      	b.n	80045ae <main+0x746>

			  default:
				  break;
 8004576:	bf00      	nop
 8004578:	e49c      	b.n	8003eb4 <main+0x4c>
				  break;
 800457a:	bf00      	nop
 800457c:	e49a      	b.n	8003eb4 <main+0x4c>
				  break;
 800457e:	bf00      	nop
 8004580:	e498      	b.n	8003eb4 <main+0x4c>
				  break;
 8004582:	bf00      	nop
 8004584:	e496      	b.n	8003eb4 <main+0x4c>
				  break;
 8004586:	bf00      	nop
 8004588:	e494      	b.n	8003eb4 <main+0x4c>
				  break;
 800458a:	bf00      	nop
 800458c:	e492      	b.n	8003eb4 <main+0x4c>
				  break;
 800458e:	bf00      	nop
 8004590:	e490      	b.n	8003eb4 <main+0x4c>
				  break;
 8004592:	bf00      	nop
 8004594:	e48e      	b.n	8003eb4 <main+0x4c>
				  break;
 8004596:	bf00      	nop
 8004598:	e48c      	b.n	8003eb4 <main+0x4c>
			  	  break;
 800459a:	bf00      	nop
 800459c:	e48a      	b.n	8003eb4 <main+0x4c>
				  break;
 800459e:	bf00      	nop
 80045a0:	e488      	b.n	8003eb4 <main+0x4c>
				  break;
 80045a2:	bf00      	nop
 80045a4:	e486      	b.n	8003eb4 <main+0x4c>
				  break;
 80045a6:	bf00      	nop
 80045a8:	e484      	b.n	8003eb4 <main+0x4c>
				  break;
 80045aa:	bf00      	nop
 80045ac:	e482      	b.n	8003eb4 <main+0x4c>
				  break;
 80045ae:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 80045b0:	e480      	b.n	8003eb4 <main+0x4c>
 80045b2:	bf00      	nop
 80045b4:	08010dfc 	.word	0x08010dfc
 80045b8:	08010e00 	.word	0x08010e00
 80045bc:	08010e24 	.word	0x08010e24
 80045c0:	08010e40 	.word	0x08010e40

080045c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b094      	sub	sp, #80	; 0x50
 80045c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ca:	f107 0320 	add.w	r3, r7, #32
 80045ce:	2230      	movs	r2, #48	; 0x30
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f008 f9c5 	bl	800c962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045d8:	f107 030c 	add.w	r3, r7, #12
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <SystemClock_Config+0xcc>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	4a27      	ldr	r2, [pc, #156]	; (8004690 <SystemClock_Config+0xcc>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6413      	str	r3, [r2, #64]	; 0x40
 80045f8:	4b25      	ldr	r3, [pc, #148]	; (8004690 <SystemClock_Config+0xcc>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004604:	2300      	movs	r3, #0
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	4b22      	ldr	r3, [pc, #136]	; (8004694 <SystemClock_Config+0xd0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <SystemClock_Config+0xd0>)
 800460e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <SystemClock_Config+0xd0>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461c:	607b      	str	r3, [r7, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004620:	2302      	movs	r3, #2
 8004622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004628:	2310      	movs	r3, #16
 800462a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800462c:	2302      	movs	r3, #2
 800462e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004630:	2300      	movs	r3, #0
 8004632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004634:	2308      	movs	r3, #8
 8004636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004638:	23a8      	movs	r3, #168	; 0xa8
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800463c:	2302      	movs	r3, #2
 800463e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004640:	2304      	movs	r3, #4
 8004642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004644:	f107 0320 	add.w	r3, r7, #32
 8004648:	4618      	mov	r0, r3
 800464a:	f003 fe65 	bl	8008318 <HAL_RCC_OscConfig>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004654:	f000 fd04 	bl	8005060 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004658:	230f      	movs	r3, #15
 800465a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800465c:	2302      	movs	r3, #2
 800465e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004660:	2300      	movs	r3, #0
 8004662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800466a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800466e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	2105      	movs	r1, #5
 8004676:	4618      	mov	r0, r3
 8004678:	f004 f8be 	bl	80087f8 <HAL_RCC_ClockConfig>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004682:	f000 fced 	bl	8005060 <Error_Handler>
  }
}
 8004686:	bf00      	nop
 8004688:	3750      	adds	r7, #80	; 0x50
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800
 8004694:	40007000 	.word	0x40007000

08004698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800469e:	463b      	mov	r3, r7
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	609a      	str	r2, [r3, #8]
 80046a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <MX_ADC1_Init+0xb4>)
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <MX_ADC1_Init+0xb8>)
 80046ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046b0:	4b26      	ldr	r3, [pc, #152]	; (800474c <MX_ADC1_Init+0xb4>)
 80046b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046b8:	4b24      	ldr	r3, [pc, #144]	; (800474c <MX_ADC1_Init+0xb4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80046be:	4b23      	ldr	r3, [pc, #140]	; (800474c <MX_ADC1_Init+0xb4>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80046c4:	4b21      	ldr	r3, [pc, #132]	; (800474c <MX_ADC1_Init+0xb4>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <MX_ADC1_Init+0xb4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <MX_ADC1_Init+0xb4>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <MX_ADC1_Init+0xb4>)
 80046da:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <MX_ADC1_Init+0xbc>)
 80046dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046de:	4b1b      	ldr	r3, [pc, #108]	; (800474c <MX_ADC1_Init+0xb4>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <MX_ADC1_Init+0xb4>)
 80046e6:	2202      	movs	r2, #2
 80046e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <MX_ADC1_Init+0xb4>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <MX_ADC1_Init+0xb4>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046f8:	4814      	ldr	r0, [pc, #80]	; (800474c <MX_ADC1_Init+0xb4>)
 80046fa:	f002 f8ab 	bl	8006854 <HAL_ADC_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004704:	f000 fcac 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004708:	230c      	movs	r3, #12
 800470a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800470c:	2301      	movs	r3, #1
 800470e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004710:	2307      	movs	r3, #7
 8004712:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004714:	463b      	mov	r3, r7
 8004716:	4619      	mov	r1, r3
 8004718:	480c      	ldr	r0, [pc, #48]	; (800474c <MX_ADC1_Init+0xb4>)
 800471a:	f002 f9ef 	bl	8006afc <HAL_ADC_ConfigChannel>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004724:	f000 fc9c 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004728:	230d      	movs	r3, #13
 800472a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800472c:	2302      	movs	r3, #2
 800472e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004730:	463b      	mov	r3, r7
 8004732:	4619      	mov	r1, r3
 8004734:	4805      	ldr	r0, [pc, #20]	; (800474c <MX_ADC1_Init+0xb4>)
 8004736:	f002 f9e1 	bl	8006afc <HAL_ADC_ConfigChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004740:	f000 fc8e 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	2001ed74 	.word	0x2001ed74
 8004750:	40012000 	.word	0x40012000
 8004754:	0f000001 	.word	0x0f000001

08004758 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800475e:	463b      	mov	r3, r7
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800476a:	4b6e      	ldr	r3, [pc, #440]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800476c:	4a6e      	ldr	r2, [pc, #440]	; (8004928 <MX_ADC2_Init+0x1d0>)
 800476e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004770:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004776:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004778:	4b6a      	ldr	r3, [pc, #424]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800477e:	4b69      	ldr	r3, [pc, #420]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004780:	2201      	movs	r2, #1
 8004782:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004784:	4b67      	ldr	r3, [pc, #412]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004786:	2201      	movs	r2, #1
 8004788:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800478a:	4b66      	ldr	r3, [pc, #408]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004792:	4b64      	ldr	r3, [pc, #400]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004794:	2200      	movs	r2, #0
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004798:	4b62      	ldr	r3, [pc, #392]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800479a:	4a64      	ldr	r2, [pc, #400]	; (800492c <MX_ADC2_Init+0x1d4>)
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800479e:	4b61      	ldr	r3, [pc, #388]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 80047a4:	4b5f      	ldr	r3, [pc, #380]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047a6:	220c      	movs	r2, #12
 80047a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80047aa:	4b5e      	ldr	r3, [pc, #376]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80047b2:	4b5c      	ldr	r3, [pc, #368]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80047b8:	485a      	ldr	r0, [pc, #360]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047ba:	f002 f84b 	bl	8006854 <HAL_ADC_Init>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80047c4:	f000 fc4c 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80047cc:	2301      	movs	r3, #1
 80047ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80047d0:	2307      	movs	r3, #7
 80047d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047d4:	463b      	mov	r3, r7
 80047d6:	4619      	mov	r1, r3
 80047d8:	4852      	ldr	r0, [pc, #328]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047da:	f002 f98f 	bl	8006afc <HAL_ADC_ConfigChannel>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80047e4:	f000 fc3c 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80047ec:	2302      	movs	r3, #2
 80047ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047f0:	463b      	mov	r3, r7
 80047f2:	4619      	mov	r1, r3
 80047f4:	484b      	ldr	r0, [pc, #300]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80047f6:	f002 f981 	bl	8006afc <HAL_ADC_ConfigChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004800:	f000 fc2e 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004804:	2302      	movs	r3, #2
 8004806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004808:	2303      	movs	r3, #3
 800480a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800480c:	463b      	mov	r3, r7
 800480e:	4619      	mov	r1, r3
 8004810:	4844      	ldr	r0, [pc, #272]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004812:	f002 f973 	bl	8006afc <HAL_ADC_ConfigChannel>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800481c:	f000 fc20 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004820:	2303      	movs	r3, #3
 8004822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004824:	2304      	movs	r3, #4
 8004826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004828:	463b      	mov	r3, r7
 800482a:	4619      	mov	r1, r3
 800482c:	483d      	ldr	r0, [pc, #244]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800482e:	f002 f965 	bl	8006afc <HAL_ADC_ConfigChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d001      	beq.n	800483c <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004838:	f000 fc12 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800483c:	2304      	movs	r3, #4
 800483e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004840:	2305      	movs	r3, #5
 8004842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004844:	463b      	mov	r3, r7
 8004846:	4619      	mov	r1, r3
 8004848:	4836      	ldr	r0, [pc, #216]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800484a:	f002 f957 	bl	8006afc <HAL_ADC_ConfigChannel>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004854:	f000 fc04 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004858:	2305      	movs	r3, #5
 800485a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800485c:	2306      	movs	r3, #6
 800485e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004860:	463b      	mov	r3, r7
 8004862:	4619      	mov	r1, r3
 8004864:	482f      	ldr	r0, [pc, #188]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004866:	f002 f949 	bl	8006afc <HAL_ADC_ConfigChannel>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004870:	f000 fbf6 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004874:	2306      	movs	r3, #6
 8004876:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004878:	2307      	movs	r3, #7
 800487a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800487c:	463b      	mov	r3, r7
 800487e:	4619      	mov	r1, r3
 8004880:	4828      	ldr	r0, [pc, #160]	; (8004924 <MX_ADC2_Init+0x1cc>)
 8004882:	f002 f93b 	bl	8006afc <HAL_ADC_ConfigChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800488c:	f000 fbe8 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004890:	2307      	movs	r3, #7
 8004892:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004894:	2308      	movs	r3, #8
 8004896:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004898:	463b      	mov	r3, r7
 800489a:	4619      	mov	r1, r3
 800489c:	4821      	ldr	r0, [pc, #132]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800489e:	f002 f92d 	bl	8006afc <HAL_ADC_ConfigChannel>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80048a8:	f000 fbda 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80048ac:	2308      	movs	r3, #8
 80048ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80048b0:	2309      	movs	r3, #9
 80048b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048b4:	463b      	mov	r3, r7
 80048b6:	4619      	mov	r1, r3
 80048b8:	481a      	ldr	r0, [pc, #104]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80048ba:	f002 f91f 	bl	8006afc <HAL_ADC_ConfigChannel>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80048c4:	f000 fbcc 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80048c8:	2309      	movs	r3, #9
 80048ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80048cc:	230a      	movs	r3, #10
 80048ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048d0:	463b      	mov	r3, r7
 80048d2:	4619      	mov	r1, r3
 80048d4:	4813      	ldr	r0, [pc, #76]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80048d6:	f002 f911 	bl	8006afc <HAL_ADC_ConfigChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80048e0:	f000 fbbe 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80048e4:	230e      	movs	r3, #14
 80048e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80048e8:	230b      	movs	r3, #11
 80048ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048ec:	463b      	mov	r3, r7
 80048ee:	4619      	mov	r1, r3
 80048f0:	480c      	ldr	r0, [pc, #48]	; (8004924 <MX_ADC2_Init+0x1cc>)
 80048f2:	f002 f903 	bl	8006afc <HAL_ADC_ConfigChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80048fc:	f000 fbb0 	bl	8005060 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004900:	230f      	movs	r3, #15
 8004902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004904:	230c      	movs	r3, #12
 8004906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004908:	463b      	mov	r3, r7
 800490a:	4619      	mov	r1, r3
 800490c:	4805      	ldr	r0, [pc, #20]	; (8004924 <MX_ADC2_Init+0x1cc>)
 800490e:	f002 f8f5 	bl	8006afc <HAL_ADC_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004918:	f000 fba2 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	2001ed24 	.word	0x2001ed24
 8004928:	40012100 	.word	0x40012100
 800492c:	0f000001 	.word	0x0f000001

08004930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <MX_I2C1_Init+0x50>)
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <MX_I2C1_Init+0x54>)
 8004938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800493a:	4b11      	ldr	r3, [pc, #68]	; (8004980 <MX_I2C1_Init+0x50>)
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <MX_I2C1_Init+0x58>)
 800493e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <MX_I2C1_Init+0x50>)
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <MX_I2C1_Init+0x50>)
 8004948:	2200      	movs	r2, #0
 800494a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <MX_I2C1_Init+0x50>)
 800494e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004952:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <MX_I2C1_Init+0x50>)
 8004956:	2200      	movs	r2, #0
 8004958:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <MX_I2C1_Init+0x50>)
 800495c:	2200      	movs	r2, #0
 800495e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <MX_I2C1_Init+0x50>)
 8004962:	2200      	movs	r2, #0
 8004964:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <MX_I2C1_Init+0x50>)
 8004968:	2200      	movs	r2, #0
 800496a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800496c:	4804      	ldr	r0, [pc, #16]	; (8004980 <MX_I2C1_Init+0x50>)
 800496e:	f003 fb9b 	bl	80080a8 <HAL_I2C_Init>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004978:	f000 fb72 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}
 8004980:	2001ee68 	.word	0x2001ee68
 8004984:	40005400 	.word	0x40005400
 8004988:	000186a0 	.word	0x000186a0

0800498c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004990:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <MX_SPI3_Init+0x64>)
 8004992:	4a18      	ldr	r2, [pc, #96]	; (80049f4 <MX_SPI3_Init+0x68>)
 8004994:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004996:	4b16      	ldr	r3, [pc, #88]	; (80049f0 <MX_SPI3_Init+0x64>)
 8004998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800499c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80049a4:	4b12      	ldr	r3, [pc, #72]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049aa:	4b11      	ldr	r3, [pc, #68]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049b0:	4b0f      	ldr	r3, [pc, #60]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80049b6:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049c0:	2228      	movs	r2, #40	; 0x28
 80049c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80049ca:	4b09      	ldr	r3, [pc, #36]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d0:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049d8:	220a      	movs	r2, #10
 80049da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80049dc:	4804      	ldr	r0, [pc, #16]	; (80049f0 <MX_SPI3_Init+0x64>)
 80049de:	f004 f8d7 	bl	8008b90 <HAL_SPI_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80049e8:	f000 fb3a 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80049ec:	bf00      	nop
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	2001eec0 	.word	0x2001eec0
 80049f4:	40003c00 	.word	0x40003c00

080049f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b092      	sub	sp, #72	; 0x48
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	611a      	str	r2, [r3, #16]
 8004a18:	615a      	str	r2, [r3, #20]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	2220      	movs	r2, #32
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f007 ff9d 	bl	800c962 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a28:	4b32      	ldr	r3, [pc, #200]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a2a:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <MX_TIM1_Init+0x100>)
 8004a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004a2e:	4b31      	ldr	r3, [pc, #196]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a34:	4b2f      	ldr	r3, [pc, #188]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a3c:	f240 3247 	movw	r2, #839	; 0x347
 8004a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a42:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a48:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a54:	4827      	ldr	r0, [pc, #156]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a56:	f004 fe3e 	bl	80096d6 <HAL_TIM_PWM_Init>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004a60:	f000 fafe 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a64:	2300      	movs	r3, #0
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a70:	4619      	mov	r1, r3
 8004a72:	4820      	ldr	r0, [pc, #128]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004a74:	f005 fbce 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004a7e:	f000 faef 	bl	8005060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a82:	2360      	movs	r3, #96	; 0x60
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a9e:	220c      	movs	r2, #12
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4814      	ldr	r0, [pc, #80]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004aa4:	f005 f852 	bl	8009b4c <HAL_TIM_PWM_ConfigChannel>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8004aae:	f000 fad7 	bl	8005060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4807      	ldr	r0, [pc, #28]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004ad6:	f005 fc19 	bl	800a30c <HAL_TIMEx_ConfigBreakDeadTime>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004ae0:	f000 fabe 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ae4:	4803      	ldr	r0, [pc, #12]	; (8004af4 <MX_TIM1_Init+0xfc>)
 8004ae6:	f001 fc15 	bl	8006314 <HAL_TIM_MspPostInit>

}
 8004aea:	bf00      	nop
 8004aec:	3748      	adds	r7, #72	; 0x48
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	2001eff8 	.word	0x2001eff8
 8004af8:	40010000 	.word	0x40010000

08004afc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08c      	sub	sp, #48	; 0x30
 8004b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	2100      	movs	r1, #0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f007 ff29 	bl	800c962 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b1a:	4a21      	ldr	r2, [pc, #132]	; (8004ba0 <MX_TIM3_Init+0xa4>)
 8004b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004b1e:	4b1f      	ldr	r3, [pc, #124]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b24:	4b1d      	ldr	r3, [pc, #116]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b2a:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b38:	4b18      	ldr	r3, [pc, #96]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b46:	2301      	movs	r3, #1
 8004b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b56:	2301      	movs	r3, #1
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004b62:	f107 030c 	add.w	r3, r7, #12
 8004b66:	4619      	mov	r1, r3
 8004b68:	480c      	ldr	r0, [pc, #48]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b6a:	f004 fe1d 	bl	80097a8 <HAL_TIM_Encoder_Init>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004b74:	f000 fa74 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b80:	1d3b      	adds	r3, r7, #4
 8004b82:	4619      	mov	r1, r3
 8004b84:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_TIM3_Init+0xa0>)
 8004b86:	f005 fb45 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004b90:	f000 fa66 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004b94:	bf00      	nop
 8004b96:	3730      	adds	r7, #48	; 0x30
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	2001eccc 	.word	0x2001eccc
 8004ba0:	40000400 	.word	0x40000400

08004ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08c      	sub	sp, #48	; 0x30
 8004ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f007 fed5 	bl	800c962 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004bc2:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <MX_TIM4_Init+0xa4>)
 8004bc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bda:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004be0:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004be6:	2301      	movs	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004c02:	2300      	movs	r3, #0
 8004c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004c0a:	f107 030c 	add.w	r3, r7, #12
 8004c0e:	4619      	mov	r1, r3
 8004c10:	480c      	ldr	r0, [pc, #48]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004c12:	f004 fdc9 	bl	80097a8 <HAL_TIM_Encoder_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004c1c:	f000 fa20 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c20:	2300      	movs	r3, #0
 8004c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c28:	1d3b      	adds	r3, r7, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4805      	ldr	r0, [pc, #20]	; (8004c44 <MX_TIM4_Init+0xa0>)
 8004c2e:	f005 faf1 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004c38:	f000 fa12 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004c3c:	bf00      	nop
 8004c3e:	3730      	adds	r7, #48	; 0x30
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2001ec8c 	.word	0x2001ec8c
 8004c48:	40000800 	.word	0x40000800

08004c4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c52:	463b      	mov	r3, r7
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c5c:	4a15      	ldr	r2, [pc, #84]	; (8004cb4 <MX_TIM6_Init+0x68>)
 8004c5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c62:	2253      	movs	r2, #83	; 0x53
 8004c64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c74:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c7a:	480d      	ldr	r0, [pc, #52]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c7c:	f004 fcdc 	bl	8009638 <HAL_TIM_Base_Init>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004c86:	f000 f9eb 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c92:	463b      	mov	r3, r7
 8004c94:	4619      	mov	r1, r3
 8004c96:	4806      	ldr	r0, [pc, #24]	; (8004cb0 <MX_TIM6_Init+0x64>)
 8004c98:	f005 fabc 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004ca2:	f000 f9dd 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	2001efb8 	.word	0x2001efb8
 8004cb4:	40001000 	.word	0x40001000

08004cb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004cc8:	4a14      	ldr	r2, [pc, #80]	; (8004d1c <MX_TIM7_Init+0x64>)
 8004cca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004cce:	2253      	movs	r2, #83	; 0x53
 8004cd0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004cda:	2263      	movs	r2, #99	; 0x63
 8004cdc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004ce4:	480c      	ldr	r0, [pc, #48]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004ce6:	f004 fca7 	bl	8009638 <HAL_TIM_Base_Init>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004cf0:	f000 f9b6 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004cfc:	463b      	mov	r3, r7
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4805      	ldr	r0, [pc, #20]	; (8004d18 <MX_TIM7_Init+0x60>)
 8004d02:	f005 fa87 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004d0c:	f000 f9a8 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	2001f0a0 	.word	0x2001f0a0
 8004d1c:	40001400 	.word	0x40001400

08004d20 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b092      	sub	sp, #72	; 0x48
 8004d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d34:	2200      	movs	r2, #0
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	611a      	str	r2, [r3, #16]
 8004d40:	615a      	str	r2, [r3, #20]
 8004d42:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	2220      	movs	r2, #32
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f007 fe09 	bl	800c962 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004d50:	4b39      	ldr	r3, [pc, #228]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d52:	4a3a      	ldr	r2, [pc, #232]	; (8004e3c <MX_TIM8_Init+0x11c>)
 8004d54:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004d56:	4b38      	ldr	r3, [pc, #224]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d58:	2203      	movs	r2, #3
 8004d5a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d5c:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004d62:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d64:	f240 628f 	movw	r2, #1679	; 0x68f
 8004d68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d6a:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004d7c:	482e      	ldr	r0, [pc, #184]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d7e:	f004 fcaa 	bl	80096d6 <HAL_TIM_PWM_Init>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004d88:	f000 f96a 	bl	8005060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4827      	ldr	r0, [pc, #156]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004d9c:	f005 fa3a 	bl	800a214 <HAL_TIMEx_MasterConfigSynchronization>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004da6:	f000 f95b 	bl	8005060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004daa:	2360      	movs	r3, #96	; 0x60
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004db2:	2300      	movs	r3, #0
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004db6:	2300      	movs	r3, #0
 8004db8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dca:	2200      	movs	r2, #0
 8004dcc:	4619      	mov	r1, r3
 8004dce:	481a      	ldr	r0, [pc, #104]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004dd0:	f004 febc 	bl	8009b4c <HAL_TIM_PWM_ConfigChannel>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004dda:	f000 f941 	bl	8005060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004de2:	2208      	movs	r2, #8
 8004de4:	4619      	mov	r1, r3
 8004de6:	4814      	ldr	r0, [pc, #80]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004de8:	f004 feb0 	bl	8009b4c <HAL_TIM_PWM_ConfigChannel>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004df2:	f000 f935 	bl	8005060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004e14:	1d3b      	adds	r3, r7, #4
 8004e16:	4619      	mov	r1, r3
 8004e18:	4807      	ldr	r0, [pc, #28]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004e1a:	f005 fa77 	bl	800a30c <HAL_TIMEx_ConfigBreakDeadTime>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004e24:	f000 f91c 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004e28:	4803      	ldr	r0, [pc, #12]	; (8004e38 <MX_TIM8_Init+0x118>)
 8004e2a:	f001 fa73 	bl	8006314 <HAL_TIM_MspPostInit>

}
 8004e2e:	bf00      	nop
 8004e30:	3748      	adds	r7, #72	; 0x48
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	2001ee20 	.word	0x2001ee20
 8004e3c:	40010400 	.word	0x40010400

08004e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <MX_USART1_UART_Init+0x50>)
 8004e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e52:	4b0e      	ldr	r3, [pc, #56]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e66:	220c      	movs	r2, #12
 8004e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e6a:	4b08      	ldr	r3, [pc, #32]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e70:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004e76:	4805      	ldr	r0, [pc, #20]	; (8004e8c <MX_USART1_UART_Init+0x4c>)
 8004e78:	f005 faae 	bl	800a3d8 <HAL_UART_Init>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004e82:	f000 f8ed 	bl	8005060 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	2001ef18 	.word	0x2001ef18
 8004e90:	40011000 	.word	0x40011000

08004e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <MX_DMA_Init+0x4c>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a0f      	ldr	r2, [pc, #60]	; (8004ee0 <MX_DMA_Init+0x4c>)
 8004ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <MX_DMA_Init+0x4c>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	2038      	movs	r0, #56	; 0x38
 8004ebc:	f002 f999 	bl	80071f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004ec0:	2038      	movs	r0, #56	; 0x38
 8004ec2:	f002 f9b2 	bl	800722a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	203a      	movs	r0, #58	; 0x3a
 8004ecc:	f002 f991 	bl	80071f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004ed0:	203a      	movs	r0, #58	; 0x3a
 8004ed2:	f002 f9aa 	bl	800722a <HAL_NVIC_EnableIRQ>

}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800

08004ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b08a      	sub	sp, #40	; 0x28
 8004ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	4b53      	ldr	r3, [pc, #332]	; (800504c <MX_GPIO_Init+0x168>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	4a52      	ldr	r2, [pc, #328]	; (800504c <MX_GPIO_Init+0x168>)
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	6313      	str	r3, [r2, #48]	; 0x30
 8004f0a:	4b50      	ldr	r3, [pc, #320]	; (800504c <MX_GPIO_Init+0x168>)
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b4c      	ldr	r3, [pc, #304]	; (800504c <MX_GPIO_Init+0x168>)
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	4a4b      	ldr	r2, [pc, #300]	; (800504c <MX_GPIO_Init+0x168>)
 8004f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f24:	6313      	str	r3, [r2, #48]	; 0x30
 8004f26:	4b49      	ldr	r3, [pc, #292]	; (800504c <MX_GPIO_Init+0x168>)
 8004f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	4b45      	ldr	r3, [pc, #276]	; (800504c <MX_GPIO_Init+0x168>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a44      	ldr	r2, [pc, #272]	; (800504c <MX_GPIO_Init+0x168>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b42      	ldr	r3, [pc, #264]	; (800504c <MX_GPIO_Init+0x168>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
 8004f52:	4b3e      	ldr	r3, [pc, #248]	; (800504c <MX_GPIO_Init+0x168>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	4a3d      	ldr	r2, [pc, #244]	; (800504c <MX_GPIO_Init+0x168>)
 8004f58:	f043 0302 	orr.w	r3, r3, #2
 8004f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5e:	4b3b      	ldr	r3, [pc, #236]	; (800504c <MX_GPIO_Init+0x168>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4b37      	ldr	r3, [pc, #220]	; (800504c <MX_GPIO_Init+0x168>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	4a36      	ldr	r2, [pc, #216]	; (800504c <MX_GPIO_Init+0x168>)
 8004f74:	f043 0308 	orr.w	r3, r3, #8
 8004f78:	6313      	str	r3, [r2, #48]	; 0x30
 8004f7a:	4b34      	ldr	r3, [pc, #208]	; (800504c <MX_GPIO_Init+0x168>)
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004f86:	2200      	movs	r2, #0
 8004f88:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004f8c:	4830      	ldr	r0, [pc, #192]	; (8005050 <MX_GPIO_Init+0x16c>)
 8004f8e:	f003 f871 	bl	8008074 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004f92:	2200      	movs	r2, #0
 8004f94:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004f98:	482e      	ldr	r0, [pc, #184]	; (8005054 <MX_GPIO_Init+0x170>)
 8004f9a:	f003 f86b 	bl	8008074 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fa4:	482c      	ldr	r0, [pc, #176]	; (8005058 <MX_GPIO_Init+0x174>)
 8004fa6:	f003 f865 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2104      	movs	r1, #4
 8004fae:	482b      	ldr	r0, [pc, #172]	; (800505c <MX_GPIO_Init+0x178>)
 8004fb0:	f003 f860 	bl	8008074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004fb4:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004fb8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4820      	ldr	r0, [pc, #128]	; (8005050 <MX_GPIO_Init+0x16c>)
 8004fce:	f002 fe9f 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004fd2:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004fd6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fe4:	f107 0314 	add.w	r3, r7, #20
 8004fe8:	4619      	mov	r1, r3
 8004fea:	481a      	ldr	r0, [pc, #104]	; (8005054 <MX_GPIO_Init+0x170>)
 8004fec:	f002 fe90 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004ff0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	4814      	ldr	r0, [pc, #80]	; (8005058 <MX_GPIO_Init+0x174>)
 8005006:	f002 fe83 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800500a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005010:	2301      	movs	r3, #1
 8005012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	2300      	movs	r3, #0
 8005016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005018:	2300      	movs	r3, #0
 800501a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800501c:	f107 0314 	add.w	r3, r7, #20
 8005020:	4619      	mov	r1, r3
 8005022:	480d      	ldr	r0, [pc, #52]	; (8005058 <MX_GPIO_Init+0x174>)
 8005024:	f002 fe74 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005028:	2304      	movs	r3, #4
 800502a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502c:	2301      	movs	r3, #1
 800502e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005034:	2300      	movs	r3, #0
 8005036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4619      	mov	r1, r3
 800503e:	4807      	ldr	r0, [pc, #28]	; (800505c <MX_GPIO_Init+0x178>)
 8005040:	f002 fe66 	bl	8007d10 <HAL_GPIO_Init>

}
 8005044:	bf00      	nop
 8005046:	3728      	adds	r7, #40	; 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40023800 	.word	0x40023800
 8005050:	40020800 	.word	0x40020800
 8005054:	40020400 	.word	0x40020400
 8005058:	40020000 	.word	0x40020000
 800505c:	40020c00 	.word	0x40020c00

08005060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005064:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005066:	e7fe      	b.n	8005066 <Error_Handler+0x6>

08005068 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 800506c:	2100      	movs	r1, #0
 800506e:	4808      	ldr	r0, [pc, #32]	; (8005090 <initMotor+0x28>)
 8005070:	f004 fb5c 	bl	800972c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8005074:	2108      	movs	r1, #8
 8005076:	4806      	ldr	r0, [pc, #24]	; (8005090 <initMotor+0x28>)
 8005078:	f004 fb58 	bl	800972c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800507c:	210c      	movs	r1, #12
 800507e:	4805      	ldr	r0, [pc, #20]	; (8005094 <initMotor+0x2c>)
 8005080:	f004 fb54 	bl	800972c <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8005084:	2064      	movs	r0, #100	; 0x64
 8005086:	f001 fbc3 	bl	8006810 <HAL_Delay>
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2001ee20 	.word	0x2001ee20
 8005094:	2001eff8 	.word	0x2001eff8

08005098 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800509e:	4b2a      	ldr	r3, [pc, #168]	; (8005148 <motorCtrlFlip+0xb0>)
 80050a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db0d      	blt.n	80050c4 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <motorCtrlFlip+0xb0>)
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80050ae:	4b27      	ldr	r3, [pc, #156]	; (800514c <motorCtrlFlip+0xb4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	4824      	ldr	r0, [pc, #144]	; (8005150 <motorCtrlFlip+0xb8>)
 80050be:	f002 ffd9 	bl	8008074 <HAL_GPIO_WritePin>
 80050c2:	e010      	b.n	80050e6 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 80050c4:	4b20      	ldr	r3, [pc, #128]	; (8005148 <motorCtrlFlip+0xb0>)
 80050c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	425b      	negs	r3, r3
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 80050d2:	4b1e      	ldr	r3, [pc, #120]	; (800514c <motorCtrlFlip+0xb4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050da:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80050dc:	2201      	movs	r2, #1
 80050de:	2180      	movs	r1, #128	; 0x80
 80050e0:	481b      	ldr	r0, [pc, #108]	; (8005150 <motorCtrlFlip+0xb8>)
 80050e2:	f002 ffc7 	bl	8008074 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <motorCtrlFlip+0xbc>)
 80050e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	db0e      	blt.n	800510e <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <motorCtrlFlip+0xbc>)
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80050f6:	4b15      	ldr	r3, [pc, #84]	; (800514c <motorCtrlFlip+0xb4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8005100:	2200      	movs	r2, #0
 8005102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005106:	4812      	ldr	r0, [pc, #72]	; (8005150 <motorCtrlFlip+0xb8>)
 8005108:	f002 ffb4 	bl	8008074 <HAL_GPIO_WritePin>
 800510c:	e011      	b.n	8005132 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <motorCtrlFlip+0xbc>)
 8005110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005114:	b29b      	uxth	r3, r3
 8005116:	425b      	negs	r3, r3
 8005118:	b29b      	uxth	r3, r3
 800511a:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <motorCtrlFlip+0xb4>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800512c:	4808      	ldr	r0, [pc, #32]	; (8005150 <motorCtrlFlip+0xb8>)
 800512e:	f002 ffa1 	bl	8008074 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <motorCtrlFlip+0xc0>)
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8005138:	4a08      	ldr	r2, [pc, #32]	; (800515c <motorCtrlFlip+0xc4>)
 800513a:	88bb      	ldrh	r3, [r7, #4]
 800513c:	8013      	strh	r3, [r2, #0]
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	2001cc44 	.word	0x2001cc44
 800514c:	2001ee20 	.word	0x2001ee20
 8005150:	40020800 	.word	0x40020800
 8005154:	2001cc46 	.word	0x2001cc46
 8005158:	2001f0e4 	.word	0x2001f0e4
 800515c:	2001f0e2 	.word	0x2001f0e2

08005160 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <suctionmotorCtrlFlip+0x1c>)
 8005166:	f9b3 2000 	ldrsh.w	r2, [r3]
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <suctionmotorCtrlFlip+0x20>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	2001cc48 	.word	0x2001cc48
 8005180:	2001eff8 	.word	0x2001eff8

08005184 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	460a      	mov	r2, r1
 800518e:	80fb      	strh	r3, [r7, #6]
 8005190:	4613      	mov	r3, r2
 8005192:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8005194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005198:	f240 628e 	movw	r2, #1678	; 0x68e
 800519c:	4293      	cmp	r3, r2
 800519e:	dd03      	ble.n	80051a8 <setMotor+0x24>
 80051a0:	f240 638f 	movw	r3, #1679	; 0x68f
 80051a4:	80fb      	strh	r3, [r7, #6]
 80051a6:	e007      	b.n	80051b8 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 80051a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <setMotor+0x70>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	da02      	bge.n	80051b8 <setMotor+0x34>
 80051b2:	f64f 1371 	movw	r3, #63857	; 0xf971
 80051b6:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 80051b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051bc:	f240 628e 	movw	r2, #1678	; 0x68e
 80051c0:	4293      	cmp	r3, r2
 80051c2:	dd03      	ble.n	80051cc <setMotor+0x48>
 80051c4:	f240 638f 	movw	r3, #1679	; 0x68f
 80051c8:	80bb      	strh	r3, [r7, #4]
 80051ca:	e007      	b.n	80051dc <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 80051cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <setMotor+0x70>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	da02      	bge.n	80051dc <setMotor+0x58>
 80051d6:	f64f 1371 	movw	r3, #63857	; 0xf971
 80051da:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 80051dc:	4a06      	ldr	r2, [pc, #24]	; (80051f8 <setMotor+0x74>)
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 80051e2:	4a06      	ldr	r2, [pc, #24]	; (80051fc <setMotor+0x78>)
 80051e4:	88bb      	ldrh	r3, [r7, #4]
 80051e6:	8013      	strh	r3, [r2, #0]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	fffff972 	.word	0xfffff972
 80051f8:	2001cc44 	.word	0x2001cc44
 80051fc:	2001cc46 	.word	0x2001cc46

08005200 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 800520a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfb8      	it	lt
 8005212:	425b      	neglt	r3, r3
 8005214:	b21a      	sxth	r2, r3
 8005216:	4b08      	ldr	r3, [pc, #32]	; (8005238 <setsuctionMotor+0x38>)
 8005218:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 800521a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800521e:	f240 3246 	movw	r2, #838	; 0x346
 8005222:	4293      	cmp	r3, r2
 8005224:	dd02      	ble.n	800522c <setsuctionMotor+0x2c>
 8005226:	f240 3347 	movw	r3, #839	; 0x347
 800522a:	80fb      	strh	r3, [r7, #6]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	2001cc48 	.word	0x2001cc48

0800523c <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static int16_t V_motor;

void updateSideSensorStatus(){
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <updateSideSensorStatus+0x44>)
 8005242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005246:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800524a:	dc03      	bgt.n	8005254 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <updateSideSensorStatus+0x48>)
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e002      	b.n	800525a <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <updateSideSensorStatus+0x48>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <updateSideSensorStatus+0x4c>)
 800525c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005260:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005264:	dc03      	bgt.n	800526e <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <updateSideSensorStatus+0x50>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 800526c:	e002      	b.n	8005274 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 800526e:	4b07      	ldr	r3, [pc, #28]	; (800528c <updateSideSensorStatus+0x50>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	2001ec54 	.word	0x2001ec54
 8005284:	2001eb98 	.word	0x2001eb98
 8005288:	2001ebdc 	.word	0x2001ebdc
 800528c:	2001eb99 	.word	0x2001eb99

08005290 <setRunMode>:

void setRunMode(uint16_t num){
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	80fb      	strh	r3, [r7, #6]
	mode = num;
 800529a:	4a04      	ldr	r2, [pc, #16]	; (80052ac <setRunMode+0x1c>)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	8013      	strh	r3, [r2, #0]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2001f0ec 	.word	0x2001f0ec

080052b0 <isCrossLine>:

bool isCrossLine()
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 80052b6:	4b20      	ldr	r3, [pc, #128]	; (8005338 <isCrossLine+0x88>)
 80052b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c4:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 80052c8:	4b1b      	ldr	r3, [pc, #108]	; (8005338 <isCrossLine+0x88>)
 80052ca:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052d6:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 80052da:	edd7 7a01 	vldr	s15, [r7, #4]
 80052de:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800533c <isCrossLine+0x8c>
 80052e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ea:	d50f      	bpl.n	800530c <isCrossLine+0x5c>
 80052ec:	edd7 7a00 	vldr	s15, [r7]
 80052f0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800533c <isCrossLine+0x8c>
 80052f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	d506      	bpl.n	800530c <isCrossLine+0x5c>
		cnt++;
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <isCrossLine+0x90>)
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <isCrossLine+0x90>)
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e002      	b.n	8005312 <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <isCrossLine+0x90>)
 800530e:	2200      	movs	r2, #0
 8005310:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <isCrossLine+0x90>)
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d903      	bls.n	8005322 <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 800531a:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <isCrossLine+0x94>)
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e002      	b.n	8005328 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8005322:	4b08      	ldr	r3, [pc, #32]	; (8005344 <isCrossLine+0x94>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <isCrossLine+0x94>)
 800532a:	781b      	ldrb	r3, [r3, #0]
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	2001ec38 	.word	0x2001ec38
 800533c:	442f0000 	.word	0x442f0000
 8005340:	2001ebb8 	.word	0x2001ebb8
 8005344:	2001ebba 	.word	0x2001ebba

08005348 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005348:	b580      	push	{r7, lr}
 800534a:	ed2d 8b02 	vpush	{d8}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8005352:	2300      	movs	r3, #0
 8005354:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8005356:	4b2e      	ldr	r3, [pc, #184]	; (8005410 <isContinuousCurvature+0xc8>)
 8005358:	ed93 8a00 	vldr	s16, [r3]
 800535c:	f7fc fa76 	bl	800184c <getTheta10mm>
 8005360:	eef0 7a40 	vmov.f32	s15, s0
 8005364:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005368:	eef0 7ae7 	vabs.f32	s15, s15
 800536c:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005370:	4b28      	ldr	r3, [pc, #160]	; (8005414 <isContinuousCurvature+0xcc>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005378:	4b26      	ldr	r3, [pc, #152]	; (8005414 <isContinuousCurvature+0xcc>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 800537e:	4b26      	ldr	r3, [pc, #152]	; (8005418 <isContinuousCurvature+0xd0>)
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8005386:	6838      	ldr	r0, [r7, #0]
 8005388:	f7fb f8de 	bl	8000548 <__aeabi_f2d>
 800538c:	a31e      	add	r3, pc, #120	; (adr r3, 8005408 <isContinuousCurvature+0xc0>)
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f7fb fbad 	bl	8000af0 <__aeabi_dcmple>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <isContinuousCurvature+0x6a>
 800539c:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <isContinuousCurvature+0xd0>)
 800539e:	edd3 7a00 	vldr	s15, [r3]
 80053a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053aa:	4b1b      	ldr	r3, [pc, #108]	; (8005418 <isContinuousCurvature+0xd0>)
 80053ac:	edc3 7a00 	vstr	s15, [r3]
 80053b0:	e003      	b.n	80053ba <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <isContinuousCurvature+0xd0>)
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 80053ba:	4b17      	ldr	r3, [pc, #92]	; (8005418 <isContinuousCurvature+0xd0>)
 80053bc:	edd3 7a00 	vldr	s15, [r3]
 80053c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800541c <isContinuousCurvature+0xd4>
 80053c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053cc:	db01      	blt.n	80053d2 <isContinuousCurvature+0x8a>
 80053ce:	2301      	movs	r3, #1
 80053d0:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <isContinuousCurvature+0xd0>)
 80053d4:	edd3 7a00 	vldr	s15, [r3]
 80053d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005420 <isContinuousCurvature+0xd8>
 80053dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e4:	db02      	blt.n	80053ec <isContinuousCurvature+0xa4>
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <isContinuousCurvature+0xd0>)
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <isContinuousCurvature+0xdc>)
 80053ea:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 80053ec:	f7fc fa2e 	bl	800184c <getTheta10mm>
 80053f0:	eef0 7a40 	vmov.f32	s15, s0
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <isContinuousCurvature+0xc8>)
 80053f6:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 80053fa:	79fb      	ldrb	r3, [r7, #7]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	ecbd 8b02 	vpop	{d8}
 8005406:	bd80      	pop	{r7, pc}
 8005408:	47ae147b 	.word	0x47ae147b
 800540c:	3f947ae1 	.word	0x3f947ae1
 8005410:	2001ebbc 	.word	0x2001ebbc
 8005414:	2001eb9c 	.word	0x2001eb9c
 8005418:	2001ebc0 	.word	0x2001ebc0
 800541c:	42200000 	.word	0x42200000
 8005420:	447a0000 	.word	0x447a0000
 8005424:	447a0000 	.word	0x447a0000

08005428 <isTargetDistance>:

bool isTargetDistance(float target){
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8005436:	f7fb fff5 	bl	8001424 <getDistance10mm>
 800543a:	eeb0 7a40 	vmov.f32	s14, s0
 800543e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005442:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	d801      	bhi.n	8005450 <isTargetDistance+0x28>
		ret = true;
 800544c:	2301      	movs	r3, #1
 800544e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <running>:

void running(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8005466:	f000 f9fd 	bl	8005864 <runningInit>
	startLineTrace();
 800546a:	f7fc fec5 	bl	80021f8 <startLineTrace>
	startVelocityControl();
 800546e:	f7fe f9f3 	bl	8003858 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8005472:	4b73      	ldr	r3, [pc, #460]	; (8005640 <running+0x1e4>)
 8005474:	edd3 7a00 	vldr	s15, [r3]
 8005478:	eeb0 0a67 	vmov.f32	s0, s15
 800547c:	f7fe f95e 	bl	800373c <setTargetVelocity>

	while(goal_flag == false){
 8005480:	e0d2      	b.n	8005628 <running+0x1cc>
		switch(pattern){
 8005482:	88fb      	ldrh	r3, [r7, #6]
 8005484:	2b14      	cmp	r3, #20
 8005486:	f200 80c2 	bhi.w	800560e <running+0x1b2>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <running+0x34>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054e5 	.word	0x080054e5
 8005494:	0800560f 	.word	0x0800560f
 8005498:	0800560f 	.word	0x0800560f
 800549c:	0800560f 	.word	0x0800560f
 80054a0:	0800560f 	.word	0x0800560f
 80054a4:	08005533 	.word	0x08005533
 80054a8:	0800560f 	.word	0x0800560f
 80054ac:	0800560f 	.word	0x0800560f
 80054b0:	0800560f 	.word	0x0800560f
 80054b4:	0800560f 	.word	0x0800560f
 80054b8:	08005547 	.word	0x08005547
 80054bc:	0800560f 	.word	0x0800560f
 80054c0:	0800560f 	.word	0x0800560f
 80054c4:	0800560f 	.word	0x0800560f
 80054c8:	0800560f 	.word	0x0800560f
 80054cc:	0800560f 	.word	0x0800560f
 80054d0:	0800560f 	.word	0x0800560f
 80054d4:	0800560f 	.word	0x0800560f
 80054d8:	0800560f 	.word	0x0800560f
 80054dc:	0800560f 	.word	0x0800560f
 80054e0:	080055e3 	.word	0x080055e3

				  case 0:
					  if(getSideSensorStatusR() == true){
 80054e4:	f000 fc42 	bl	8005d6c <getSideSensorStatusR>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 808c 	beq.w	8005608 <running+0x1ac>
						  start_goal_line_cnt++;
 80054f0:	4b54      	ldr	r3, [pc, #336]	; (8005644 <running+0x1e8>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	4b52      	ldr	r3, [pc, #328]	; (8005644 <running+0x1e8>)
 80054fa:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 80054fc:	4b52      	ldr	r3, [pc, #328]	; (8005648 <running+0x1ec>)
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d102      	bne.n	800550a <running+0xae>
 8005504:	f000 fa5a 	bl	80059bc <startLogging>
 8005508:	e00c      	b.n	8005524 <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 800550a:	4b4f      	ldr	r3, [pc, #316]	; (8005648 <running+0x1ec>)
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	2b02      	cmp	r3, #2
 8005510:	d003      	beq.n	800551a <running+0xbe>
 8005512:	4b4d      	ldr	r3, [pc, #308]	; (8005648 <running+0x1ec>)
 8005514:	881b      	ldrh	r3, [r3, #0]
 8005516:	2b03      	cmp	r3, #3
 8005518:	d102      	bne.n	8005520 <running+0xc4>
 800551a:	f000 fa83 	bl	8005a24 <startVelocityUpdate>
 800551e:	e001      	b.n	8005524 <running+0xc8>
						  else startTargetUpdate();
 8005520:	f000 fa68 	bl	80059f4 <startTargetUpdate>

						  clearGoalJudgeDistance();
 8005524:	f7fb ff46 	bl	80013b4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8005528:	f7fb ff52 	bl	80013d0 <clearSideLineJudgeDistance>
						  pattern = 5;
 800552c:	2305      	movs	r3, #5
 800552e:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8005530:	e06a      	b.n	8005608 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8005532:	f000 fc1b 	bl	8005d6c <getSideSensorStatusR>
 8005536:	4603      	mov	r3, r0
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <running+0xea>
 8005542:	230a      	movs	r3, #10
 8005544:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005546:	f000 fc05 	bl	8005d54 <getSideSensorStatusL>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <running+0xfe>
						  goal_judge_flag = false;
 8005550:	4b3e      	ldr	r3, [pc, #248]	; (800564c <running+0x1f0>)
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005556:	f7fb ff2d 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 800555a:	4b3c      	ldr	r3, [pc, #240]	; (800564c <running+0x1f0>)
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	f083 0301 	eor.w	r3, r3, #1
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d015      	beq.n	8005594 <running+0x138>
 8005568:	f000 fc00 	bl	8005d6c <getSideSensorStatusR>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d010      	beq.n	8005594 <running+0x138>
 8005572:	f7fb fed7 	bl	8001324 <getGoalJudgeDistance>
 8005576:	eeb0 7a40 	vmov.f32	s14, s0
 800557a:	eddf 7a35 	vldr	s15, [pc, #212]	; 8005650 <running+0x1f4>
 800557e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	db05      	blt.n	8005594 <running+0x138>
						  goal_judge_flag = true;
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <running+0x1f0>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 800558e:	f7fb ff11 	bl	80013b4 <clearGoalJudgeDistance>
 8005592:	e019      	b.n	80055c8 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8005594:	4b2d      	ldr	r3, [pc, #180]	; (800564c <running+0x1f0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d015      	beq.n	80055c8 <running+0x16c>
 800559c:	f7fb fec2 	bl	8001324 <getGoalJudgeDistance>
 80055a0:	eeb0 7a40 	vmov.f32	s14, s0
 80055a4:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005650 <running+0x1f4>
 80055a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	db0a      	blt.n	80055c8 <running+0x16c>
						  start_goal_line_cnt++;
 80055b2:	4b24      	ldr	r3, [pc, #144]	; (8005644 <running+0x1e8>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	3301      	adds	r3, #1
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b22      	ldr	r3, [pc, #136]	; (8005644 <running+0x1e8>)
 80055bc:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 80055be:	4b23      	ldr	r3, [pc, #140]	; (800564c <running+0x1f0>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80055c4:	f7fb fef6 	bl	80013b4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <running+0x1e8>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d91d      	bls.n	800560c <running+0x1b0>
						  stopLogging();
 80055d0:	f000 fa04 	bl	80059dc <stopLogging>
						  stopVelocityUpdate();
 80055d4:	f000 fa48 	bl	8005a68 <stopVelocityUpdate>
						  stopTargetUpdate();
 80055d8:	f000 fa18 	bl	8005a0c <stopTargetUpdate>
						  pattern = 20;
 80055dc:	2314      	movs	r3, #20
 80055de:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 80055e0:	e014      	b.n	800560c <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 80055e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80055e6:	f7fe f8a9 	bl	800373c <setTargetVelocity>
					  HAL_Delay(100);
 80055ea:	2064      	movs	r0, #100	; 0x64
 80055ec:	f001 f910 	bl	8006810 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 80055f0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005654 <running+0x1f8>
 80055f4:	f7fe f8a2 	bl	800373c <setTargetVelocity>
					  HAL_Delay(500);
 80055f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055fc:	f001 f908 	bl	8006810 <HAL_Delay>

					  goal_flag = true;
 8005600:	4b15      	ldr	r3, [pc, #84]	; (8005658 <running+0x1fc>)
 8005602:	2201      	movs	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]

					  break;
 8005606:	e002      	b.n	800560e <running+0x1b2>
					  break;
 8005608:	bf00      	nop
 800560a:	e000      	b.n	800560e <running+0x1b2>
					  break;
 800560c:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 800560e:	f7fc fe79 	bl	8002304 <getCouseOutFlag>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <running+0x1cc>
		{
			stopLogging();
 8005618:	f000 f9e0 	bl	80059dc <stopLogging>
			stopVelocityUpdate();
 800561c:	f000 fa24 	bl	8005a68 <stopVelocityUpdate>
			stopTargetUpdate();
 8005620:	f000 f9f4 	bl	8005a0c <stopTargetUpdate>
		    pattern = 20;
 8005624:	2314      	movs	r3, #20
 8005626:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <running+0x1fc>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	f083 0301 	eor.w	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	f47f af25 	bne.w	8005482 <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	2001eba4 	.word	0x2001eba4
 8005644:	2001eb8c 	.word	0x2001eb8c
 8005648:	2001f0ec 	.word	0x2001f0ec
 800564c:	2001eb9b 	.word	0x2001eb9b
 8005650:	428c0000 	.word	0x428c0000
 8005654:	00000000 	.word	0x00000000
 8005658:	2001eb9a 	.word	0x2001eb9a

0800565c <runningFlip>:

void runningFlip()
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005660:	4b76      	ldr	r3, [pc, #472]	; (800583c <runningFlip+0x1e0>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80e7 	beq.w	8005838 <runningFlip+0x1dc>
		setLED('G');
 800566a:	2047      	movs	r0, #71	; 0x47
 800566c:	f7fc f926 	bl	80018bc <setLED>
		updateTargetVelocity();//速度の更新
 8005670:	f000 fa06 	bl	8005a80 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 8005674:	f7fe fa84 	bl	8003b80 <updateTargetpoint>

		if(isTargetDistance(30) == true){
 8005678:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800567c:	f7ff fed4 	bl	8005428 <isTargetDistance>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <runningFlip+0x46>
			saveLog();
 8005686:	f000 f931 	bl	80058ec <saveLog>

			if(isContinuousCurvature() == true){
 800568a:	f7ff fe5d 	bl	8005348 <isContinuousCurvature>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005694:	4b6a      	ldr	r3, [pc, #424]	; (8005840 <runningFlip+0x1e4>)
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 800569a:	f7fb fed1 	bl	8001440 <clearDistance10mm>
			clearTheta10mm();
 800569e:	f7fc f8e3 	bl	8001868 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 80056a2:	f7ff fe05 	bl	80052b0 <isCrossLine>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d026      	beq.n	80056fa <runningFlip+0x9e>
 80056ac:	4b65      	ldr	r3, [pc, #404]	; (8005844 <runningFlip+0x1e8>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f083 0301 	eor.w	r3, r3, #1
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d01f      	beq.n	80056fa <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 80056ba:	4b62      	ldr	r3, [pc, #392]	; (8005844 <runningFlip+0x1e8>)
 80056bc:	2201      	movs	r2, #1
 80056be:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 80056c0:	4b5f      	ldr	r3, [pc, #380]	; (8005840 <runningFlip+0x1e4>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 80056c6:	f7fb fe91 	bl	80013ec <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 80056ca:	f7fb fe9d 	bl	8001408 <clearSideLineIgnoreDistance>

			if(mode == 1){
 80056ce:	4b5e      	ldr	r3, [pc, #376]	; (8005848 <runningFlip+0x1ec>)
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10b      	bne.n	80056ee <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 80056d6:	4b5d      	ldr	r3, [pc, #372]	; (800584c <runningFlip+0x1f0>)
 80056d8:	2200      	movs	r2, #0
 80056da:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 80056dc:	f7fb fe14 	bl	8001308 <getTotalDistance>
 80056e0:	eef0 7a40 	vmov.f32	s15, s0
 80056e4:	eeb0 0a67 	vmov.f32	s0, s15
 80056e8:	f7fd fc8a 	bl	8003000 <saveCross>
			if(mode == 1){
 80056ec:	e017      	b.n	800571e <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 80056ee:	4b57      	ldr	r3, [pc, #348]	; (800584c <runningFlip+0x1f0>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80056f4:	f000 fa2a 	bl	8005b4c <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 80056f8:	e011      	b.n	800571e <runningFlip+0xc2>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 80056fa:	4b52      	ldr	r3, [pc, #328]	; (8005844 <runningFlip+0x1e8>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <runningFlip+0xc2>
 8005702:	f7fb fe3b 	bl	800137c <getCrossLineIgnoreDistance>
 8005706:	eeb0 7a40 	vmov.f32	s14, s0
 800570a:	eddf 7a51 	vldr	s15, [pc, #324]	; 8005850 <runningFlip+0x1f4>
 800570e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	db02      	blt.n	800571e <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 8005718:	4b4a      	ldr	r3, [pc, #296]	; (8005844 <runningFlip+0x1e8>)
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 800571e:	f000 fb25 	bl	8005d6c <getSideSensorStatusR>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <runningFlip+0xd6>
			side_line_judge_flag = false;
 8005728:	4b4a      	ldr	r3, [pc, #296]	; (8005854 <runningFlip+0x1f8>)
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 800572e:	f7fb fe4f 	bl	80013d0 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8005732:	4b48      	ldr	r3, [pc, #288]	; (8005854 <runningFlip+0x1f8>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f083 0301 	eor.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <runningFlip+0x110>
 8005740:	f000 fb08 	bl	8005d54 <getSideSensorStatusL>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <runningFlip+0x110>
 800574a:	f7fb fdf9 	bl	8001340 <getSideLineJudgeDistance>
 800574e:	eeb0 7a40 	vmov.f32	s14, s0
 8005752:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005858 <runningFlip+0x1fc>
 8005756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800575a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575e:	db05      	blt.n	800576c <runningFlip+0x110>
			side_line_judge_flag = true;
 8005760:	4b3c      	ldr	r3, [pc, #240]	; (8005854 <runningFlip+0x1f8>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8005766:	f7fb fe33 	bl	80013d0 <clearSideLineJudgeDistance>
 800576a:	e02f      	b.n	80057cc <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 800576c:	4b39      	ldr	r3, [pc, #228]	; (8005854 <runningFlip+0x1f8>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d02b      	beq.n	80057cc <runningFlip+0x170>
 8005774:	f7fb fde4 	bl	8001340 <getSideLineJudgeDistance>
 8005778:	eeb0 7a40 	vmov.f32	s14, s0
 800577c:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005858 <runningFlip+0x1fc>
 8005780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005788:	db20      	blt.n	80057cc <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800578a:	f7fb fe21 	bl	80013d0 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <runningFlip+0x1f8>)
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005794:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <runningFlip+0x1e4>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d017      	beq.n	80057cc <runningFlip+0x170>
				continuous_curve_flag = false;
 800579c:	4b28      	ldr	r3, [pc, #160]	; (8005840 <runningFlip+0x1e4>)
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 80057a2:	4b2e      	ldr	r3, [pc, #184]	; (800585c <runningFlip+0x200>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <runningFlip+0x1ec>)
 80057aa:	881b      	ldrh	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10b      	bne.n	80057c8 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <runningFlip+0x204>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 80057b6:	f7fb fda7 	bl	8001308 <getTotalDistance>
 80057ba:	eef0 7a40 	vmov.f32	s15, s0
 80057be:	eeb0 0a67 	vmov.f32	s0, s15
 80057c2:	f7fd fc35 	bl	8003030 <saveSide>
 80057c6:	e001      	b.n	80057cc <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 80057c8:	f000 fa16 	bl	8005bf8 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 80057cc:	4b1f      	ldr	r3, [pc, #124]	; (800584c <runningFlip+0x1f0>)
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <runningFlip+0x1f0>)
 80057d6:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <runningFlip+0x204>)
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	3301      	adds	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <runningFlip+0x204>)
 80057e2:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <runningFlip+0x1f0>)
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d903      	bls.n	80057f8 <runningFlip+0x19c>
 80057f0:	4b16      	ldr	r3, [pc, #88]	; (800584c <runningFlip+0x1f0>)
 80057f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80057f6:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <runningFlip+0x204>)
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8005800:	4293      	cmp	r3, r2
 8005802:	d903      	bls.n	800580c <runningFlip+0x1b0>
 8005804:	4b16      	ldr	r3, [pc, #88]	; (8005860 <runningFlip+0x204>)
 8005806:	f242 7210 	movw	r2, #10000	; 0x2710
 800580a:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <runningFlip+0x204>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b96      	cmp	r3, #150	; 0x96
 8005812:	d803      	bhi.n	800581c <runningFlip+0x1c0>
 8005814:	2047      	movs	r0, #71	; 0x47
 8005816:	f7fc f91f 	bl	8001a58 <setLED2>
 800581a:	e002      	b.n	8005822 <runningFlip+0x1c6>
	    else setLED2('N');
 800581c:	204e      	movs	r0, #78	; 0x4e
 800581e:	f7fc f91b 	bl	8001a58 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <runningFlip+0x204>)
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	2b96      	cmp	r3, #150	; 0x96
 8005828:	d803      	bhi.n	8005832 <runningFlip+0x1d6>
 800582a:	2042      	movs	r0, #66	; 0x42
 800582c:	f7fc f846 	bl	80018bc <setLED>
	    else setLED('G');
	}
}
 8005830:	e002      	b.n	8005838 <runningFlip+0x1dc>
	    else setLED('G');
 8005832:	2047      	movs	r0, #71	; 0x47
 8005834:	f7fc f842 	bl	80018bc <setLED>
}
 8005838:	bf00      	nop
 800583a:	bd80      	pop	{r7, pc}
 800583c:	2001eb9e 	.word	0x2001eb9e
 8005840:	2001eb9d 	.word	0x2001eb9d
 8005844:	2001eb96 	.word	0x2001eb96
 8005848:	2001f0ec 	.word	0x2001f0ec
 800584c:	2001eb92 	.word	0x2001eb92
 8005850:	42480000 	.word	0x42480000
 8005854:	2001eb97 	.word	0x2001eb97
 8005858:	42700000 	.word	0x42700000
 800585c:	2001eb9c 	.word	0x2001eb9c
 8005860:	2001eb94 	.word	0x2001eb94

08005864 <runningInit>:

void runningInit()
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
	if(mode == 1){
 8005868:	4b18      	ldr	r3, [pc, #96]	; (80058cc <runningInit+0x68>)
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d105      	bne.n	800587c <runningInit+0x18>
		setLED('W');
 8005870:	2057      	movs	r0, #87	; 0x57
 8005872:	f7fc f823 	bl	80018bc <setLED>
		ereaseLog();
 8005876:	f7fd fc0b 	bl	8003090 <ereaseLog>
 800587a:	e00b      	b.n	8005894 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 800587c:	f7fd fc44 	bl	8003108 <ereaseDebugLog>
		loadDistance();
 8005880:	f7fd fc82 	bl	8003188 <loadDistance>
		loadTheta();
 8005884:	f7fd fcbe 	bl	8003204 <loadTheta>
		loadCross();
 8005888:	f7fd fcfa 	bl	8003280 <loadCross>
		loadSide();
 800588c:	f7fd fd36 	bl	80032fc <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 8005890:	f7fe f80c 	bl	80038ac <CreateXYcoordinates>
	}

	clearCrossLineIgnoreDistance();
 8005894:	f7fb fdaa 	bl	80013ec <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005898:	f7fb fdb6 	bl	8001408 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <runningInit+0x6c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 80058a2:	4b0c      	ldr	r3, [pc, #48]	; (80058d4 <runningInit+0x70>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 80058a8:	4b0b      	ldr	r3, [pc, #44]	; (80058d8 <runningInit+0x74>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <runningInit+0x78>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <runningInit+0x7c>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 80058ba:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <runningInit+0x80>)
 80058bc:	2200      	movs	r2, #0
 80058be:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <runningInit+0x84>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2001f0ec 	.word	0x2001f0ec
 80058d0:	2001eb8c 	.word	0x2001eb8c
 80058d4:	2001eb96 	.word	0x2001eb96
 80058d8:	2001eb97 	.word	0x2001eb97
 80058dc:	2001eb9b 	.word	0x2001eb9b
 80058e0:	2001eb9c 	.word	0x2001eb9c
 80058e4:	2001eb9d 	.word	0x2001eb9d
 80058e8:	2001eb9e 	.word	0x2001eb9e

080058ec <saveLog>:

void saveLog(){
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80058f0:	4b2f      	ldr	r3, [pc, #188]	; (80059b0 <saveLog+0xc4>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80058f8:	f7fb fd94 	bl	8001424 <getDistance10mm>
 80058fc:	eef0 7a40 	vmov.f32	s15, s0
 8005900:	eeb0 0a67 	vmov.f32	s0, s15
 8005904:	f7fd fb4c 	bl	8002fa0 <saveDistance>
		saveTheta(getTheta10mm());
 8005908:	f7fb ffa0 	bl	800184c <getTheta10mm>
 800590c:	eef0 7a40 	vmov.f32	s15, s0
 8005910:	eeb0 0a67 	vmov.f32	s0, s15
 8005914:	f7fd fb5c 	bl	8002fd0 <saveTheta>
		saveDebug(getaddTheta());
		saveDebug(ErrorXcoordinates());
	    saveDebug(ErrorYcoordinates());
		saveDebug(ErrorTheta());
	}
}
 8005918:	e048      	b.n	80059ac <saveLog+0xc0>
	else if(velocity_update_flag == true){
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <saveLog+0xc8>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d010      	beq.n	8005944 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 8005922:	f7fd ff8b 	bl	800383c <getTargetVelocity>
 8005926:	eef0 7a40 	vmov.f32	s15, s0
 800592a:	eeb0 0a67 	vmov.f32	s0, s15
 800592e:	f7fd fb97 	bl	8003060 <saveDebug>
		saveDebug(getCurrentVelocity());
 8005932:	f7fd ff45 	bl	80037c0 <getCurrentVelocity>
 8005936:	eef0 7a40 	vmov.f32	s15, s0
 800593a:	eeb0 0a67 	vmov.f32	s0, s15
 800593e:	f7fd fb8f 	bl	8003060 <saveDebug>
}
 8005942:	e033      	b.n	80059ac <saveLog+0xc0>
	else if(target_update_flag == true){
 8005944:	4b1c      	ldr	r3, [pc, #112]	; (80059b8 <saveLog+0xcc>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d02f      	beq.n	80059ac <saveLog+0xc0>
		saveDebug(CurrentXcoordinates());
 800594c:	f7fe f870 	bl	8003a30 <CurrentXcoordinates>
 8005950:	eef0 7a40 	vmov.f32	s15, s0
 8005954:	eeb0 0a67 	vmov.f32	s0, s15
 8005958:	f7fd fb82 	bl	8003060 <saveDebug>
		saveDebug(CurrentYcoordinates());
 800595c:	f7fe f8bc 	bl	8003ad8 <CurrentYcoordinates>
 8005960:	eef0 7a40 	vmov.f32	s15, s0
 8005964:	eeb0 0a67 	vmov.f32	s0, s15
 8005968:	f7fd fb7a 	bl	8003060 <saveDebug>
		saveDebug(getaddTheta());
 800596c:	f7fb ff8a 	bl	8001884 <getaddTheta>
 8005970:	eef0 7a40 	vmov.f32	s15, s0
 8005974:	eeb0 0a67 	vmov.f32	s0, s15
 8005978:	f7fd fb72 	bl	8003060 <saveDebug>
		saveDebug(ErrorXcoordinates());
 800597c:	f7fe f970 	bl	8003c60 <ErrorXcoordinates>
 8005980:	eef0 7a40 	vmov.f32	s15, s0
 8005984:	eeb0 0a67 	vmov.f32	s0, s15
 8005988:	f7fd fb6a 	bl	8003060 <saveDebug>
	    saveDebug(ErrorYcoordinates());
 800598c:	f7fe f9ac 	bl	8003ce8 <ErrorYcoordinates>
 8005990:	eef0 7a40 	vmov.f32	s15, s0
 8005994:	eeb0 0a67 	vmov.f32	s0, s15
 8005998:	f7fd fb62 	bl	8003060 <saveDebug>
		saveDebug(ErrorTheta());
 800599c:	f7fe f942 	bl	8003c24 <ErrorTheta>
 80059a0:	eef0 7a40 	vmov.f32	s15, s0
 80059a4:	eeb0 0a67 	vmov.f32	s0, s15
 80059a8:	f7fd fb5a 	bl	8003060 <saveDebug>
}
 80059ac:	bf00      	nop
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	2001eb9f 	.word	0x2001eb9f
 80059b4:	2001eba1 	.word	0x2001eba1
 80059b8:	2001eba0 	.word	0x2001eba0

080059bc <startLogging>:

void startLogging(){
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80059c0:	f7fb fd3e 	bl	8001440 <clearDistance10mm>
	clearTheta10mm();
 80059c4:	f7fb ff50 	bl	8001868 <clearTheta10mm>
	clearTotalDistance();
 80059c8:	f7fb fce6 	bl	8001398 <clearTotalDistance>
	logging_flag = true;
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <startLogging+0x1c>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	2001eb9f 	.word	0x2001eb9f

080059dc <stopLogging>:

void stopLogging()
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
	logging_flag = false;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <stopLogging+0x14>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
}
 80059e6:	bf00      	nop
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	2001eb9f 	.word	0x2001eb9f

080059f4 <startTargetUpdate>:

void startTargetUpdate()
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
	clearaddTheta();
 80059f8:	f7fb ff52 	bl	80018a0 <clearaddTheta>
	target_update_flag = true;
 80059fc:	4b02      	ldr	r3, [pc, #8]	; (8005a08 <startTargetUpdate+0x14>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2001eba0 	.word	0x2001eba0

08005a0c <stopTargetUpdate>:

void stopTargetUpdate()
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
	target_update_flag = false;
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <stopTargetUpdate+0x14>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	2001eba0 	.word	0x2001eba0

08005a24 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005a28:	f7fb fd0a 	bl	8001440 <clearDistance10mm>
	clearTotalDistance();
 8005a2c:	f7fb fcb4 	bl	8001398 <clearTotalDistance>
	velocity_table_idx = 0;
 8005a30:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <startVelocityUpdate+0x30>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <startVelocityUpdate+0x34>)
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 8005a3e:	4b07      	ldr	r3, [pc, #28]	; (8005a5c <startVelocityUpdate+0x38>)
 8005a40:	2201      	movs	r2, #1
 8005a42:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <startVelocityUpdate+0x3c>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <startVelocityUpdate+0x40>)
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	801a      	strh	r2, [r3, #0]
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	2001f0ee 	.word	0x2001f0ee
 8005a58:	2001f0e8 	.word	0x2001f0e8
 8005a5c:	2001eba1 	.word	0x2001eba1
 8005a60:	2001eb8e 	.word	0x2001eb8e
 8005a64:	2001eb90 	.word	0x2001eb90

08005a68 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 8005a6c:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <stopVelocityUpdate+0x14>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]
}
 8005a72:	bf00      	nop
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2001eba1 	.word	0x2001eba1

08005a80 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005a84:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <updateTargetVelocity+0xb8>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d053      	beq.n	8005b34 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 8005a8c:	f7fb fc3c 	bl	8001308 <getTotalDistance>
 8005a90:	eeb0 7a40 	vmov.f32	s14, s0
 8005a94:	4b29      	ldr	r3, [pc, #164]	; (8005b3c <updateTargetVelocity+0xbc>)
 8005a96:	edd3 7a00 	vldr	s15, [r3]
 8005a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa2:	db14      	blt.n	8005ace <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005aa4:	4b26      	ldr	r3, [pc, #152]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fd fcb7 	bl	800341c <getDistanceLog>
 8005aae:	eeb0 7a40 	vmov.f32	s14, s0
 8005ab2:	4b22      	ldr	r3, [pc, #136]	; (8005b3c <updateTargetVelocity+0xbc>)
 8005ab4:	edd3 7a00 	vldr	s15, [r3]
 8005ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005abc:	4b1f      	ldr	r3, [pc, #124]	; (8005b3c <updateTargetVelocity+0xbc>)
 8005abe:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005acc:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005ace:	f7fd fb2b 	bl	8003128 <getDistanceLogSize>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d806      	bhi.n	8005aec <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005ade:	f7fd fb23 	bl	8003128 <getDistanceLogSize>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005aea:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005aec:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	4a14      	ldr	r2, [pc, #80]	; (8005b44 <updateTargetVelocity+0xc4>)
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	edd3 7a00 	vldr	s15, [r3]
 8005afa:	eeb0 0a67 	vmov.f32	s0, s15
 8005afe:	f7fd fe1d 	bl	800373c <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005b02:	4b0f      	ldr	r3, [pc, #60]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <updateTargetVelocity+0xc4>)
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	ed93 7a00 	vldr	s14, [r3]
 8005b10:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <updateTargetVelocity+0xc8>)
 8005b12:	edd3 7a00 	vldr	s15, [r3]
 8005b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	d501      	bpl.n	8005b24 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005b20:	f7fd feb8 	bl	8003894 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <updateTargetVelocity+0xc0>)
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	4a06      	ldr	r2, [pc, #24]	; (8005b44 <updateTargetVelocity+0xc4>)
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a05      	ldr	r2, [pc, #20]	; (8005b48 <updateTargetVelocity+0xc8>)
 8005b32:	6013      	str	r3, [r2, #0]
	}
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2001eba1 	.word	0x2001eba1
 8005b3c:	2001f0e8 	.word	0x2001f0e8
 8005b40:	2001f0ee 	.word	0x2001f0ee
 8005b44:	2001cc4c 	.word	0x2001cc4c
 8005b48:	2001ebc4 	.word	0x2001ebc4

08005b4c <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005b52:	e03f      	b.n	8005bd4 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005b54:	4b25      	ldr	r3, [pc, #148]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7fd fc75 	bl	8003448 <getCrossLog>
 8005b5e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005b62:	f7fb fbd1 	bl	8001308 <getTotalDistance>
 8005b66:	eeb0 7a40 	vmov.f32	s14, s0
 8005b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b72:	eef0 7ae7 	vabs.f32	s15, s15
 8005b76:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005b7a:	edd7 7a00 	vldr	s15, [r7]
 8005b7e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005bf0 <correctionTotalDistanceFromCrossLine+0xa4>
 8005b82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8a:	d80d      	bhi.n	8005ba8 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005b92:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b96:	f7fb fbe1 	bl	800135c <setTotalDistance>
			cross_line_idx++;
 8005b9a:	4b14      	ldr	r3, [pc, #80]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	4b12      	ldr	r3, [pc, #72]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005ba4:	801a      	strh	r2, [r3, #0]
			break;
 8005ba6:	e01d      	b.n	8005be4 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005ba8:	4b10      	ldr	r3, [pc, #64]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	3301      	adds	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	4b0e      	ldr	r3, [pc, #56]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005bb2:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005bb4:	f7fd fac4 	bl	8003140 <getCrossLogSize>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b0b      	ldr	r3, [pc, #44]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d807      	bhi.n	8005bd4 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005bc4:	f7fd fabc 	bl	8003140 <getCrossLogSize>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	4b07      	ldr	r3, [pc, #28]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005bd0:	801a      	strh	r2, [r3, #0]
			break;
 8005bd2:	e007      	b.n	8005be4 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005bd4:	f7fd fab4 	bl	8003140 <getCrossLogSize>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4b03      	ldr	r3, [pc, #12]	; (8005bec <correctionTotalDistanceFromCrossLine+0xa0>)
 8005bde:	881b      	ldrh	r3, [r3, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d2b7      	bcs.n	8005b54 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005be4:	bf00      	nop
 8005be6:	3708      	adds	r7, #8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	2001eb8e 	.word	0x2001eb8e
 8005bf0:	437a0000 	.word	0x437a0000
 8005bf4:	2001eb92 	.word	0x2001eb92

08005bf8 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005bfe:	e03f      	b.n	8005c80 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fd fc35 	bl	8003474 <getSideLog>
 8005c0a:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005c0e:	f7fb fb7b 	bl	8001308 <getTotalDistance>
 8005c12:	eeb0 7a40 	vmov.f32	s14, s0
 8005c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c1e:	eef0 7ae7 	vabs.f32	s15, s15
 8005c22:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005c26:	edd7 7a00 	vldr	s15, [r7]
 8005c2a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c9c <correctionTotalDistanceFromSideLine+0xa4>
 8005c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c36:	d80d      	bhi.n	8005c54 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005c38:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <correctionTotalDistanceFromSideLine+0xa8>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005c3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c42:	f7fb fb8b 	bl	800135c <setTotalDistance>
			side_line_idx++;
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c50:	801a      	strh	r2, [r3, #0]
			break;
 8005c52:	e01d      	b.n	8005c90 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c5e:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005c60:	f7fd fa7a 	bl	8003158 <getSideLogSize>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d807      	bhi.n	8005c80 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005c70:	f7fd fa72 	bl	8003158 <getSideLogSize>
 8005c74:	4603      	mov	r3, r0
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	4b07      	ldr	r3, [pc, #28]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c7c:	801a      	strh	r2, [r3, #0]
			break;
 8005c7e:	e007      	b.n	8005c90 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005c80:	f7fd fa6a 	bl	8003158 <getSideLogSize>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <correctionTotalDistanceFromSideLine+0xa0>)
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d2b7      	bcs.n	8005c00 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005c90:	bf00      	nop
 8005c92:	3708      	adds	r7, #8
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	2001eb90 	.word	0x2001eb90
 8005c9c:	437a0000 	.word	0x437a0000
 8005ca0:	2001eb94 	.word	0x2001eb94

08005ca4 <getgoalStatus>:
		th = th + temp_theta;
	}
}
*/
bool getgoalStatus()
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	return goal_flag;
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <getgoalStatus+0x14>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	2001eb9a 	.word	0x2001eb9a

08005cbc <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
	return target_update_flag;
 8005cc0:	4b03      	ldr	r3, [pc, #12]	; (8005cd0 <getTargetUpdateflag+0x14>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2001eba0 	.word	0x2001eba0

08005cd4 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	ed87 0a01 	vstr	s0, [r7, #4]
 8005cde:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005ce2:	4a06      	ldr	r2, [pc, #24]	; (8005cfc <setVelocityRange+0x28>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005ce8:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <setVelocityRange+0x2c>)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6013      	str	r3, [r2, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2001eba4 	.word	0x2001eba4
 8005d00:	2001eba8 	.word	0x2001eba8

08005d04 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005d0e:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005d12:	4a06      	ldr	r2, [pc, #24]	; (8005d2c <setAccDec+0x28>)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005d18:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <setAccDec+0x2c>)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6013      	str	r3, [r2, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	2001ebac 	.word	0x2001ebac
 8005d30:	2001ebb0 	.word	0x2001ebb0

08005d34 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005d3e:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <setStraightRadius+0x1c>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6013      	str	r3, [r2, #0]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	2001ebb4 	.word	0x2001ebb4

08005d54 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <getSideSensorStatusL+0x14>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	2001eb98 	.word	0x2001eb98

08005d6c <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <getSideSensorStatusR+0x14>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	2001eb99 	.word	0x2001eb99

08005d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d98:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6413      	str	r3, [r2, #64]	; 0x40
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800

08005dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08e      	sub	sp, #56	; 0x38
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a79      	ldr	r2, [pc, #484]	; (8005fd8 <HAL_ADC_MspInit+0x204>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d158      	bne.n	8005ea8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005df6:	2300      	movs	r3, #0
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	4b78      	ldr	r3, [pc, #480]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	4a77      	ldr	r2, [pc, #476]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e04:	6453      	str	r3, [r2, #68]	; 0x44
 8005e06:	4b75      	ldr	r3, [pc, #468]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0e:	623b      	str	r3, [r7, #32]
 8005e10:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	61fb      	str	r3, [r7, #28]
 8005e16:	4b71      	ldr	r3, [pc, #452]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	4a70      	ldr	r2, [pc, #448]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e1c:	f043 0304 	orr.w	r3, r3, #4
 8005e20:	6313      	str	r3, [r2, #48]	; 0x30
 8005e22:	4b6e      	ldr	r3, [pc, #440]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005e2e:	230e      	movs	r3, #14
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e32:	2303      	movs	r3, #3
 8005e34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4867      	ldr	r0, [pc, #412]	; (8005fe0 <HAL_ADC_MspInit+0x20c>)
 8005e42:	f001 ff65 	bl	8007d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005e46:	4b67      	ldr	r3, [pc, #412]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e48:	4a67      	ldr	r2, [pc, #412]	; (8005fe8 <HAL_ADC_MspInit+0x214>)
 8005e4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005e4c:	4b65      	ldr	r3, [pc, #404]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e52:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e58:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e5e:	4b61      	ldr	r3, [pc, #388]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e66:	4b5f      	ldr	r3, [pc, #380]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e6e:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e70:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e76:	4b5b      	ldr	r3, [pc, #364]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e7c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e7e:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e84:	4b57      	ldr	r3, [pc, #348]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e8a:	4856      	ldr	r0, [pc, #344]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e8c:	f001 f9e8 	bl	8007260 <HAL_DMA_Init>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005e96:	f7ff f8e3 	bl	8005060 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a51      	ldr	r2, [pc, #324]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8005ea0:	4a50      	ldr	r2, [pc, #320]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005ea6:	e092      	b.n	8005fce <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a4f      	ldr	r2, [pc, #316]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	f040 808d 	bne.w	8005fce <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	4b48      	ldr	r3, [pc, #288]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ebc:	4a47      	ldr	r2, [pc, #284]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8005ec4:	4b45      	ldr	r3, [pc, #276]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ecc:	61bb      	str	r3, [r7, #24]
 8005ece:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	4b41      	ldr	r3, [pc, #260]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005eda:	f043 0301 	orr.w	r3, r3, #1
 8005ede:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee0:	4b3e      	ldr	r3, [pc, #248]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eec:	2300      	movs	r3, #0
 8005eee:	613b      	str	r3, [r7, #16]
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	4a39      	ldr	r2, [pc, #228]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005ef6:	f043 0304 	orr.w	r3, r3, #4
 8005efa:	6313      	str	r3, [r2, #48]	; 0x30
 8005efc:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f08:	2300      	movs	r3, #0
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f10:	4a32      	ldr	r2, [pc, #200]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f12:	f043 0302 	orr.w	r3, r3, #2
 8005f16:	6313      	str	r3, [r2, #48]	; 0x30
 8005f18:	4b30      	ldr	r3, [pc, #192]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005f24:	23ff      	movs	r3, #255	; 0xff
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f34:	4619      	mov	r1, r3
 8005f36:	482e      	ldr	r0, [pc, #184]	; (8005ff0 <HAL_ADC_MspInit+0x21c>)
 8005f38:	f001 feea 	bl	8007d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005f3c:	2330      	movs	r3, #48	; 0x30
 8005f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f40:	2303      	movs	r3, #3
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4824      	ldr	r0, [pc, #144]	; (8005fe0 <HAL_ADC_MspInit+0x20c>)
 8005f50:	f001 fede 	bl	8007d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f54:	2303      	movs	r3, #3
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f64:	4619      	mov	r1, r3
 8005f66:	4823      	ldr	r0, [pc, #140]	; (8005ff4 <HAL_ADC_MspInit+0x220>)
 8005f68:	f001 fed2 	bl	8007d10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005f6c:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f6e:	4a23      	ldr	r2, [pc, #140]	; (8005ffc <HAL_ADC_MspInit+0x228>)
 8005f70:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005f72:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f78:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f94:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f96:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f9c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005fb2:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fb4:	f001 f954 	bl	8007260 <HAL_DMA_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005fbe:	f7ff f84f 	bl	8005060 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc8:	4a0b      	ldr	r2, [pc, #44]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005fce:	bf00      	nop
 8005fd0:	3738      	adds	r7, #56	; 0x38
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40012000 	.word	0x40012000
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40020800 	.word	0x40020800
 8005fe4:	2001ef58 	.word	0x2001ef58
 8005fe8:	40026410 	.word	0x40026410
 8005fec:	40012100 	.word	0x40012100
 8005ff0:	40020000 	.word	0x40020000
 8005ff4:	40020400 	.word	0x40020400
 8005ff8:	2001f040 	.word	0x2001f040
 8005ffc:	40026440 	.word	0x40026440

08006000 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_I2C_MspInit+0x84>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d12c      	bne.n	800607c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	4b18      	ldr	r3, [pc, #96]	; (8006088 <HAL_I2C_MspInit+0x88>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <HAL_I2C_MspInit+0x88>)
 800602c:	f043 0302 	orr.w	r3, r3, #2
 8006030:	6313      	str	r3, [r2, #48]	; 0x30
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_I2C_MspInit+0x88>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800603e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006044:	2312      	movs	r3, #18
 8006046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006048:	2301      	movs	r3, #1
 800604a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800604c:	2303      	movs	r3, #3
 800604e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006050:	2304      	movs	r3, #4
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	4619      	mov	r1, r3
 800605a:	480c      	ldr	r0, [pc, #48]	; (800608c <HAL_I2C_MspInit+0x8c>)
 800605c:	f001 fe58 	bl	8007d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	4b08      	ldr	r3, [pc, #32]	; (8006088 <HAL_I2C_MspInit+0x88>)
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	4a07      	ldr	r2, [pc, #28]	; (8006088 <HAL_I2C_MspInit+0x88>)
 800606a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800606e:	6413      	str	r3, [r2, #64]	; 0x40
 8006070:	4b05      	ldr	r3, [pc, #20]	; (8006088 <HAL_I2C_MspInit+0x88>)
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800607c:	bf00      	nop
 800607e:	3728      	adds	r7, #40	; 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40005400 	.word	0x40005400
 8006088:	40023800 	.word	0x40023800
 800608c:	40020400 	.word	0x40020400

08006090 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006098:	f107 0314 	add.w	r3, r7, #20
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	609a      	str	r2, [r3, #8]
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a19      	ldr	r2, [pc, #100]	; (8006114 <HAL_SPI_MspInit+0x84>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d12c      	bne.n	800610c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	4b18      	ldr	r3, [pc, #96]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	4a17      	ldr	r2, [pc, #92]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060c0:	6413      	str	r3, [r2, #64]	; 0x40
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ca:	613b      	str	r3, [r7, #16]
 80060cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060d8:	f043 0304 	orr.w	r3, r3, #4
 80060dc:	6313      	str	r3, [r2, #48]	; 0x30
 80060de:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <HAL_SPI_MspInit+0x88>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80060ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80060ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f0:	2302      	movs	r3, #2
 80060f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f8:	2303      	movs	r3, #3
 80060fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80060fc:	2306      	movs	r3, #6
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006100:	f107 0314 	add.w	r3, r7, #20
 8006104:	4619      	mov	r1, r3
 8006106:	4805      	ldr	r0, [pc, #20]	; (800611c <HAL_SPI_MspInit+0x8c>)
 8006108:	f001 fe02 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800610c:	bf00      	nop
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40003c00 	.word	0x40003c00
 8006118:	40023800 	.word	0x40023800
 800611c:	40020800 	.word	0x40020800

08006120 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a15      	ldr	r2, [pc, #84]	; (8006184 <HAL_TIM_PWM_MspInit+0x64>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d10e      	bne.n	8006150 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 8006138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613a:	4a13      	ldr	r2, [pc, #76]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 800613c:	f043 0301 	orr.w	r3, r3, #1
 8006140:	6453      	str	r3, [r2, #68]	; 0x44
 8006142:	4b11      	ldr	r3, [pc, #68]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800614e:	e012      	b.n	8006176 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a0d      	ldr	r2, [pc, #52]	; (800618c <HAL_TIM_PWM_MspInit+0x6c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d10d      	bne.n	8006176 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 8006160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006162:	4a09      	ldr	r2, [pc, #36]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 8006164:	f043 0302 	orr.w	r3, r3, #2
 8006168:	6453      	str	r3, [r2, #68]	; 0x44
 800616a:	4b07      	ldr	r3, [pc, #28]	; (8006188 <HAL_TIM_PWM_MspInit+0x68>)
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	60bb      	str	r3, [r7, #8]
 8006174:	68bb      	ldr	r3, [r7, #8]
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40023800 	.word	0x40023800
 800618c:	40010400 	.word	0x40010400

08006190 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006198:	f107 031c 	add.w	r3, r7, #28
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a32      	ldr	r2, [pc, #200]	; (8006278 <HAL_TIM_Encoder_MspInit+0xe8>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d12c      	bne.n	800620c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	4b31      	ldr	r3, [pc, #196]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4a30      	ldr	r2, [pc, #192]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061bc:	f043 0302 	orr.w	r3, r3, #2
 80061c0:	6413      	str	r3, [r2, #64]	; 0x40
 80061c2:	4b2e      	ldr	r3, [pc, #184]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	61bb      	str	r3, [r7, #24]
 80061cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	4b2a      	ldr	r3, [pc, #168]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d6:	4a29      	ldr	r2, [pc, #164]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061d8:	f043 0302 	orr.w	r3, r3, #2
 80061dc:	6313      	str	r3, [r2, #48]	; 0x30
 80061de:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80061ea:	2330      	movs	r3, #48	; 0x30
 80061ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ee:	2302      	movs	r3, #2
 80061f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f2:	2300      	movs	r3, #0
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f6:	2300      	movs	r3, #0
 80061f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061fa:	2302      	movs	r3, #2
 80061fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80061fe:	f107 031c 	add.w	r3, r7, #28
 8006202:	4619      	mov	r1, r3
 8006204:	481e      	ldr	r0, [pc, #120]	; (8006280 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006206:	f001 fd83 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800620a:	e030      	b.n	800626e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d12b      	bne.n	800626e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	613b      	str	r3, [r7, #16]
 800621a:	4b18      	ldr	r3, [pc, #96]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	4a17      	ldr	r2, [pc, #92]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 8006220:	f043 0304 	orr.w	r3, r3, #4
 8006224:	6413      	str	r3, [r2, #64]	; 0x40
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	4a10      	ldr	r2, [pc, #64]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	6313      	str	r3, [r2, #48]	; 0x30
 8006242:	4b0e      	ldr	r3, [pc, #56]	; (800627c <HAL_TIM_Encoder_MspInit+0xec>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800624e:	23c0      	movs	r3, #192	; 0xc0
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006252:	2302      	movs	r3, #2
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625a:	2300      	movs	r3, #0
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800625e:	2302      	movs	r3, #2
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006262:	f107 031c 	add.w	r3, r7, #28
 8006266:	4619      	mov	r1, r3
 8006268:	4805      	ldr	r0, [pc, #20]	; (8006280 <HAL_TIM_Encoder_MspInit+0xf0>)
 800626a:	f001 fd51 	bl	8007d10 <HAL_GPIO_Init>
}
 800626e:	bf00      	nop
 8006270:	3730      	adds	r7, #48	; 0x30
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40000400 	.word	0x40000400
 800627c:	40023800 	.word	0x40023800
 8006280:	40020400 	.word	0x40020400
 8006284:	40000800 	.word	0x40000800

08006288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a1c      	ldr	r2, [pc, #112]	; (8006308 <HAL_TIM_Base_MspInit+0x80>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d116      	bne.n	80062c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b1b      	ldr	r3, [pc, #108]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a1a      	ldr	r2, [pc, #104]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062a4:	f043 0310 	orr.w	r3, r3, #16
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b18      	ldr	r3, [pc, #96]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 0310 	and.w	r3, r3, #16
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2101      	movs	r1, #1
 80062ba:	2036      	movs	r0, #54	; 0x36
 80062bc:	f000 ff99 	bl	80071f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80062c0:	2036      	movs	r0, #54	; 0x36
 80062c2:	f000 ffb2 	bl	800722a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80062c6:	e01a      	b.n	80062fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a10      	ldr	r2, [pc, #64]	; (8006310 <HAL_TIM_Base_MspInit+0x88>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d115      	bne.n	80062fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80062d2:	2300      	movs	r3, #0
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	4b0d      	ldr	r3, [pc, #52]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6413      	str	r3, [r2, #64]	; 0x40
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <HAL_TIM_Base_MspInit+0x84>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2100      	movs	r1, #0
 80062f2:	2037      	movs	r0, #55	; 0x37
 80062f4:	f000 ff7d 	bl	80071f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062f8:	2037      	movs	r0, #55	; 0x37
 80062fa:	f000 ff96 	bl	800722a <HAL_NVIC_EnableIRQ>
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	40001000 	.word	0x40001000
 800630c:	40023800 	.word	0x40023800
 8006310:	40001400 	.word	0x40001400

08006314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800631c:	f107 0314 	add.w	r3, r7, #20
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	609a      	str	r2, [r3, #8]
 8006328:	60da      	str	r2, [r3, #12]
 800632a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a25      	ldr	r2, [pc, #148]	; (80063c8 <HAL_TIM_MspPostInit+0xb4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d11f      	bne.n	8006376 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006336:	2300      	movs	r3, #0
 8006338:	613b      	str	r3, [r7, #16]
 800633a:	4b24      	ldr	r3, [pc, #144]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	4a23      	ldr	r2, [pc, #140]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6313      	str	r3, [r2, #48]	; 0x30
 8006346:	4b21      	ldr	r3, [pc, #132]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006358:	2302      	movs	r3, #2
 800635a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800635c:	2300      	movs	r3, #0
 800635e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006360:	2300      	movs	r3, #0
 8006362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006364:	2301      	movs	r3, #1
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4619      	mov	r1, r3
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <HAL_TIM_MspPostInit+0xbc>)
 8006370:	f001 fcce 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006374:	e023      	b.n	80063be <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIM_MspPostInit+0xc0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d11e      	bne.n	80063be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 8006386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006388:	4a10      	ldr	r2, [pc, #64]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 800638a:	f043 0304 	orr.w	r3, r3, #4
 800638e:	6313      	str	r3, [r2, #48]	; 0x30
 8006390:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <HAL_TIM_MspPostInit+0xb8>)
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800639c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80063a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a2:	2302      	movs	r3, #2
 80063a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063aa:	2300      	movs	r3, #0
 80063ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80063ae:	2303      	movs	r3, #3
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063b2:	f107 0314 	add.w	r3, r7, #20
 80063b6:	4619      	mov	r1, r3
 80063b8:	4807      	ldr	r0, [pc, #28]	; (80063d8 <HAL_TIM_MspPostInit+0xc4>)
 80063ba:	f001 fca9 	bl	8007d10 <HAL_GPIO_Init>
}
 80063be:	bf00      	nop
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40020000 	.word	0x40020000
 80063d4:	40010400 	.word	0x40010400
 80063d8:	40020800 	.word	0x40020800

080063dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	; 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	60da      	str	r2, [r3, #12]
 80063f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <HAL_UART_MspInit+0x84>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d12c      	bne.n	8006458 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <HAL_UART_MspInit+0x88>)
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	4a17      	ldr	r2, [pc, #92]	; (8006464 <HAL_UART_MspInit+0x88>)
 8006408:	f043 0310 	orr.w	r3, r3, #16
 800640c:	6453      	str	r3, [r2, #68]	; 0x44
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <HAL_UART_MspInit+0x88>)
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_UART_MspInit+0x88>)
 8006420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006422:	4a10      	ldr	r2, [pc, #64]	; (8006464 <HAL_UART_MspInit+0x88>)
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	6313      	str	r3, [r2, #48]	; 0x30
 800642a:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <HAL_UART_MspInit+0x88>)
 800642c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006436:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800643a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800643c:	2302      	movs	r3, #2
 800643e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006444:	2303      	movs	r3, #3
 8006446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006448:	2307      	movs	r3, #7
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800644c:	f107 0314 	add.w	r3, r7, #20
 8006450:	4619      	mov	r1, r3
 8006452:	4805      	ldr	r0, [pc, #20]	; (8006468 <HAL_UART_MspInit+0x8c>)
 8006454:	f001 fc5c 	bl	8007d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006458:	bf00      	nop
 800645a:	3728      	adds	r7, #40	; 0x28
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40011000 	.word	0x40011000
 8006464:	40023800 	.word	0x40023800
 8006468:	40020000 	.word	0x40020000

0800646c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800646c:	b480      	push	{r7}
 800646e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006470:	e7fe      	b.n	8006470 <NMI_Handler+0x4>

08006472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006472:	b480      	push	{r7}
 8006474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006476:	e7fe      	b.n	8006476 <HardFault_Handler+0x4>

08006478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800647c:	e7fe      	b.n	800647c <MemManage_Handler+0x4>

0800647e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800647e:	b480      	push	{r7}
 8006480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006482:	e7fe      	b.n	8006482 <BusFault_Handler+0x4>

08006484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006488:	e7fe      	b.n	8006488 <UsageFault_Handler+0x4>

0800648a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800648a:	b480      	push	{r7}
 800648c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064aa:	bf00      	nop
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064b8:	f000 f98a 	bl	80067d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}

080064c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80064c4:	4802      	ldr	r0, [pc, #8]	; (80064d0 <TIM6_DAC_IRQHandler+0x10>)
 80064c6:	f003 fa38 	bl	800993a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80064ca:	bf00      	nop
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	2001efb8 	.word	0x2001efb8

080064d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80064d8:	4802      	ldr	r0, [pc, #8]	; (80064e4 <TIM7_IRQHandler+0x10>)
 80064da:	f003 fa2e 	bl	800993a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80064de:	bf00      	nop
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	2001f0a0 	.word	0x2001f0a0

080064e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064ec:	4802      	ldr	r0, [pc, #8]	; (80064f8 <DMA2_Stream0_IRQHandler+0x10>)
 80064ee:	f000 ffbd 	bl	800746c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	2001ef58 	.word	0x2001ef58

080064fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006500:	4802      	ldr	r0, [pc, #8]	; (800650c <DMA2_Stream2_IRQHandler+0x10>)
 8006502:	f000 ffb3 	bl	800746c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006506:	bf00      	nop
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2001f040 	.word	0x2001f040

08006510 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b52      	cmp	r3, #82	; 0x52
 8006522:	d10a      	bne.n	800653a <getSwitchStatus+0x2a>
 8006524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006528:	480d      	ldr	r0, [pc, #52]	; (8006560 <getSwitchStatus+0x50>)
 800652a:	f001 fd8b 	bl	8008044 <HAL_GPIO_ReadPin>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <getSwitchStatus+0x2a>
		ret = 1;
 8006534:	2301      	movs	r3, #1
 8006536:	81fb      	strh	r3, [r7, #14]
 8006538:	e00c      	b.n	8006554 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b4c      	cmp	r3, #76	; 0x4c
 800653e:	d109      	bne.n	8006554 <getSwitchStatus+0x44>
 8006540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006544:	4806      	ldr	r0, [pc, #24]	; (8006560 <getSwitchStatus+0x50>)
 8006546:	f001 fd7d 	bl	8008044 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <getSwitchStatus+0x44>
		ret = 1;
 8006550:	2301      	movs	r3, #1
 8006552:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006554:	89fb      	ldrh	r3, [r7, #14]

}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40020000 	.word	0x40020000

08006564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006570:	2300      	movs	r3, #0
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	e00a      	b.n	800658c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006576:	f3af 8000 	nop.w
 800657a:	4601      	mov	r1, r0
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	60ba      	str	r2, [r7, #8]
 8006582:	b2ca      	uxtb	r2, r1
 8006584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	3301      	adds	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	dbf0      	blt.n	8006576 <_read+0x12>
	}

return len;
 8006594:	687b      	ldr	r3, [r7, #4]
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e009      	b.n	80065c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	60ba      	str	r2, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd fbdb 	bl	8003d74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	3301      	adds	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	dbf1      	blt.n	80065b0 <_write+0x12>
	}
	return len;
 80065cc:	687b      	ldr	r3, [r7, #4]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_close>:

int _close(int file)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
	return -1;
 80065de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065fe:	605a      	str	r2, [r3, #4]
	return 0;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <_isatty>:

int _isatty(int file)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
	return 1;
 8006616:	2301      	movs	r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
	return 0;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006648:	4a14      	ldr	r2, [pc, #80]	; (800669c <_sbrk+0x5c>)
 800664a:	4b15      	ldr	r3, [pc, #84]	; (80066a0 <_sbrk+0x60>)
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006654:	4b13      	ldr	r3, [pc, #76]	; (80066a4 <_sbrk+0x64>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d102      	bne.n	8006662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800665c:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <_sbrk+0x64>)
 800665e:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <_sbrk+0x68>)
 8006660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006662:	4b10      	ldr	r3, [pc, #64]	; (80066a4 <_sbrk+0x64>)
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4413      	add	r3, r2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	429a      	cmp	r2, r3
 800666e:	d207      	bcs.n	8006680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006670:	f006 f942 	bl	800c8f8 <__errno>
 8006674:	4602      	mov	r2, r0
 8006676:	230c      	movs	r3, #12
 8006678:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800667a:	f04f 33ff 	mov.w	r3, #4294967295
 800667e:	e009      	b.n	8006694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006680:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <_sbrk+0x64>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006686:	4b07      	ldr	r3, [pc, #28]	; (80066a4 <_sbrk+0x64>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4413      	add	r3, r2
 800668e:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <_sbrk+0x64>)
 8006690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20020000 	.word	0x20020000
 80066a0:	00000400 	.word	0x00000400
 80066a4:	2001ebc8 	.word	0x2001ebc8
 80066a8:	2001f118 	.word	0x2001f118

080066ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <SystemInit+0x28>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <SystemInit+0x28>)
 80066b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80066bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80066c0:	4b04      	ldr	r3, [pc, #16]	; (80066d4 <SystemInit+0x28>)
 80066c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80066c6:	609a      	str	r2, [r3, #8]
#endif
}
 80066c8:	bf00      	nop
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80066d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80066dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80066de:	e003      	b.n	80066e8 <LoopCopyDataInit>

080066e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80066e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80066e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80066e6:	3104      	adds	r1, #4

080066e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80066e8:	480b      	ldr	r0, [pc, #44]	; (8006718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80066ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80066ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80066f0:	d3f6      	bcc.n	80066e0 <CopyDataInit>
  ldr  r2, =_sbss
 80066f2:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80066f4:	e002      	b.n	80066fc <LoopFillZerobss>

080066f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80066f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80066f8:	f842 3b04 	str.w	r3, [r2], #4

080066fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80066fc:	4b09      	ldr	r3, [pc, #36]	; (8006724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80066fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006700:	d3f9      	bcc.n	80066f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006702:	f7ff ffd3 	bl	80066ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006706:	f006 f8fd 	bl	800c904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800670a:	f7fd fbad 	bl	8003e68 <main>
  bx  lr    
 800670e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006714:	08011758 	.word	0x08011758
  ldr  r0, =_sdata
 8006718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800671c:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006720:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8006724:	2001f118 	.word	0x2001f118

08006728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006728:	e7fe      	b.n	8006728 <ADC_IRQHandler>
	...

0800672c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006730:	4b0e      	ldr	r3, [pc, #56]	; (800676c <HAL_Init+0x40>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a0d      	ldr	r2, [pc, #52]	; (800676c <HAL_Init+0x40>)
 8006736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800673a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_Init+0x40>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <HAL_Init+0x40>)
 8006742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <HAL_Init+0x40>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a07      	ldr	r2, [pc, #28]	; (800676c <HAL_Init+0x40>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006754:	2003      	movs	r0, #3
 8006756:	f000 fd41 	bl	80071dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800675a:	2000      	movs	r0, #0
 800675c:	f000 f808 	bl	8006770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006760:	f7ff fb10 	bl	8005d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023c00 	.word	0x40023c00

08006770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006778:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <HAL_InitTick+0x54>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <HAL_InitTick+0x58>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006786:	fbb3 f3f1 	udiv	r3, r3, r1
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fd59 	bl	8007246 <HAL_SYSTICK_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e00e      	b.n	80067bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d80a      	bhi.n	80067ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067a4:	2200      	movs	r2, #0
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ac:	f000 fd21 	bl	80071f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067b0:	4a06      	ldr	r2, [pc, #24]	; (80067cc <HAL_InitTick+0x5c>)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e000      	b.n	80067bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000034 	.word	0x20000034
 80067c8:	2000003c 	.word	0x2000003c
 80067cc:	20000038 	.word	0x20000038

080067d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067d4:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_IncTick+0x20>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_IncTick+0x24>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4413      	add	r3, r2
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <HAL_IncTick+0x24>)
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	2000003c 	.word	0x2000003c
 80067f4:	2001f0f0 	.word	0x2001f0f0

080067f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
  return uwTick;
 80067fc:	4b03      	ldr	r3, [pc, #12]	; (800680c <HAL_GetTick+0x14>)
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	2001f0f0 	.word	0x2001f0f0

08006810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006818:	f7ff ffee 	bl	80067f8 <HAL_GetTick>
 800681c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d005      	beq.n	8006836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <HAL_Delay+0x40>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006836:	bf00      	nop
 8006838:	f7ff ffde 	bl	80067f8 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	429a      	cmp	r2, r3
 8006846:	d8f7      	bhi.n	8006838 <HAL_Delay+0x28>
  {
  }
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	2000003c 	.word	0x2000003c

08006854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e033      	b.n	80068d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d109      	bne.n	8006886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff faae 	bl	8005dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	d118      	bne.n	80068c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800689a:	f023 0302 	bic.w	r3, r3, #2
 800689e:	f043 0202 	orr.w	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa4a 	bl	8006d40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	641a      	str	r2, [r3, #64]	; 0x40
 80068c2:	e001      	b.n	80068c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_ADC_Start_DMA+0x1e>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e0cc      	b.n	8006a94 <HAL_ADC_Start_DMA+0x1b8>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d018      	beq.n	8006942 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006920:	4b5e      	ldr	r3, [pc, #376]	; (8006a9c <HAL_ADC_Start_DMA+0x1c0>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a5e      	ldr	r2, [pc, #376]	; (8006aa0 <HAL_ADC_Start_DMA+0x1c4>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	0c9a      	lsrs	r2, r3, #18
 800692c:	4613      	mov	r3, r2
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	4413      	add	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006934:	e002      	b.n	800693c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3b01      	subs	r3, #1
 800693a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f9      	bne.n	8006936 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b01      	cmp	r3, #1
 800694e:	f040 80a0 	bne.w	8006a92 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006970:	2b00      	cmp	r3, #0
 8006972:	d007      	beq.n	8006984 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006978:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800697c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d106      	bne.n	80069a0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006996:	f023 0206 	bic.w	r2, r3, #6
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	645a      	str	r2, [r3, #68]	; 0x44
 800699e:	e002      	b.n	80069a6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069ae:	4b3d      	ldr	r3, [pc, #244]	; (8006aa4 <HAL_ADC_Start_DMA+0x1c8>)
 80069b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	4a3c      	ldr	r2, [pc, #240]	; (8006aa8 <HAL_ADC_Start_DMA+0x1cc>)
 80069b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	4a3b      	ldr	r2, [pc, #236]	; (8006aac <HAL_ADC_Start_DMA+0x1d0>)
 80069c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	4a3a      	ldr	r2, [pc, #232]	; (8006ab0 <HAL_ADC_Start_DMA+0x1d4>)
 80069c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80069d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80069e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	334c      	adds	r3, #76	; 0x4c
 80069fe:	4619      	mov	r1, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f000 fcda 	bl	80073bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d12a      	bne.n	8006a6a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <HAL_ADC_Start_DMA+0x1d8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d015      	beq.n	8006a4a <HAL_ADC_Start_DMA+0x16e>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a25      	ldr	r2, [pc, #148]	; (8006ab8 <HAL_ADC_Start_DMA+0x1dc>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d105      	bne.n	8006a34 <HAL_ADC_Start_DMA+0x158>
 8006a28:	4b1e      	ldr	r3, [pc, #120]	; (8006aa4 <HAL_ADC_Start_DMA+0x1c8>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00a      	beq.n	8006a4a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a20      	ldr	r2, [pc, #128]	; (8006abc <HAL_ADC_Start_DMA+0x1e0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d129      	bne.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
 8006a3e:	4b19      	ldr	r3, [pc, #100]	; (8006aa4 <HAL_ADC_Start_DMA+0x1c8>)
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f003 031f 	and.w	r3, r3, #31
 8006a46:	2b0f      	cmp	r3, #15
 8006a48:	d823      	bhi.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11c      	bne.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	e013      	b.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a11      	ldr	r2, [pc, #68]	; (8006ab4 <HAL_ADC_Start_DMA+0x1d8>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10e      	bne.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d107      	bne.n	8006a92 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006a90:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	20000034 	.word	0x20000034
 8006aa0:	431bde83 	.word	0x431bde83
 8006aa4:	40012300 	.word	0x40012300
 8006aa8:	08006f39 	.word	0x08006f39
 8006aac:	08006ff3 	.word	0x08006ff3
 8006ab0:	0800700f 	.word	0x0800700f
 8006ab4:	40012000 	.word	0x40012000
 8006ab8:	40012100 	.word	0x40012100
 8006abc:	40012200 	.word	0x40012200

08006ac0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_ADC_ConfigChannel+0x1c>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e105      	b.n	8006d24 <HAL_ADC_ConfigChannel+0x228>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b09      	cmp	r3, #9
 8006b26:	d925      	bls.n	8006b74 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68d9      	ldr	r1, [r3, #12]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	461a      	mov	r2, r3
 8006b36:	4613      	mov	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3b1e      	subs	r3, #30
 8006b3e:	2207      	movs	r2, #7
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	43da      	mvns	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68d9      	ldr	r1, [r3, #12]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4618      	mov	r0, r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4403      	add	r3, r0
 8006b66:	3b1e      	subs	r3, #30
 8006b68:	409a      	lsls	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	60da      	str	r2, [r3, #12]
 8006b72:	e022      	b.n	8006bba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6919      	ldr	r1, [r3, #16]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	2207      	movs	r2, #7
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	400a      	ands	r2, r1
 8006b96:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6919      	ldr	r1, [r3, #16]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4618      	mov	r0, r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4403      	add	r3, r0
 8006bb0:	409a      	lsls	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b06      	cmp	r3, #6
 8006bc0:	d824      	bhi.n	8006c0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3b05      	subs	r3, #5
 8006bd4:	221f      	movs	r2, #31
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	400a      	ands	r2, r1
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	3b05      	subs	r3, #5
 8006bfe:	fa00 f203 	lsl.w	r2, r0, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	635a      	str	r2, [r3, #52]	; 0x34
 8006c0a:	e04c      	b.n	8006ca6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	d824      	bhi.n	8006c5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	4413      	add	r3, r2
 8006c24:	3b23      	subs	r3, #35	; 0x23
 8006c26:	221f      	movs	r2, #31
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43da      	mvns	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	400a      	ands	r2, r1
 8006c34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	4618      	mov	r0, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	3b23      	subs	r3, #35	; 0x23
 8006c50:	fa00 f203 	lsl.w	r2, r0, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8006c5c:	e023      	b.n	8006ca6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3b41      	subs	r3, #65	; 0x41
 8006c70:	221f      	movs	r2, #31
 8006c72:	fa02 f303 	lsl.w	r3, r2, r3
 8006c76:	43da      	mvns	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	400a      	ands	r2, r1
 8006c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	3b41      	subs	r3, #65	; 0x41
 8006c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ca6:	4b22      	ldr	r3, [pc, #136]	; (8006d30 <HAL_ADC_ConfigChannel+0x234>)
 8006ca8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <HAL_ADC_ConfigChannel+0x238>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d109      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x1cc>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b12      	cmp	r3, #18
 8006cba:	d105      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a19      	ldr	r2, [pc, #100]	; (8006d34 <HAL_ADC_ConfigChannel+0x238>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d123      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x21e>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b10      	cmp	r3, #16
 8006cd8:	d003      	beq.n	8006ce2 <HAL_ADC_ConfigChannel+0x1e6>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b11      	cmp	r3, #17
 8006ce0:	d11b      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b10      	cmp	r3, #16
 8006cf4:	d111      	bne.n	8006d1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006cf6:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <HAL_ADC_ConfigChannel+0x23c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <HAL_ADC_ConfigChannel+0x240>)
 8006cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006d00:	0c9a      	lsrs	r2, r3, #18
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d0c:	e002      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1f9      	bne.n	8006d0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40012300 	.word	0x40012300
 8006d34:	40012000 	.word	0x40012000
 8006d38:	20000034 	.word	0x20000034
 8006d3c:	431bde83 	.word	0x431bde83

08006d40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d48:	4b79      	ldr	r3, [pc, #484]	; (8006f30 <ADC_Init+0x1f0>)
 8006d4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6859      	ldr	r1, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	021a      	lsls	r2, r3, #8
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006d98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6859      	ldr	r1, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6899      	ldr	r1, [r3, #8]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd2:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <ADC_Init+0x1f4>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d022      	beq.n	8006e1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006de6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6899      	ldr	r1, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6899      	ldr	r1, [r3, #8]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	e00f      	b.n	8006e3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006e2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006e3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0202 	bic.w	r2, r2, #2
 8006e4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6899      	ldr	r1, [r3, #8]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7e1b      	ldrb	r3, [r3, #24]
 8006e58:	005a      	lsls	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006e8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	3b01      	subs	r3, #1
 8006e98:	035a      	lsls	r2, r3, #13
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
 8006ea2:	e007      	b.n	8006eb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	051a      	lsls	r2, r3, #20
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6899      	ldr	r1, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ef6:	025a      	lsls	r2, r3, #9
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6899      	ldr	r1, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	029a      	lsls	r2, r3, #10
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	40012300 	.word	0x40012300
 8006f34:	0f000001 	.word	0x0f000001

08006f38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d13c      	bne.n	8006fcc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d12b      	bne.n	8006fc4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d127      	bne.n	8006fc4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d006      	beq.n	8006f90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d119      	bne.n	8006fc4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0220 	bic.w	r2, r2, #32
 8006f9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	f043 0201 	orr.w	r2, r3, #1
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff fd7b 	bl	8006ac0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006fca:	e00e      	b.n	8006fea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	f003 0310 	and.w	r3, r3, #16
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f7ff fd85 	bl	8006ae8 <HAL_ADC_ErrorCallback>
}
 8006fde:	e004      	b.n	8006fea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	4798      	blx	r3
}
 8006fea:	bf00      	nop
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b084      	sub	sp, #16
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff fd67 	bl	8006ad4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007006:	bf00      	nop
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2240      	movs	r2, #64	; 0x40
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	f043 0204 	orr.w	r2, r3, #4
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f7ff fd5a 	bl	8006ae8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007034:	bf00      	nop
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800704c:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <__NVIC_SetPriorityGrouping+0x44>)
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007058:	4013      	ands	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800706c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800706e:	4a04      	ldr	r2, [pc, #16]	; (8007080 <__NVIC_SetPriorityGrouping+0x44>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	60d3      	str	r3, [r2, #12]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	e000ed00 	.word	0xe000ed00

08007084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007088:	4b04      	ldr	r3, [pc, #16]	; (800709c <__NVIC_GetPriorityGrouping+0x18>)
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	0a1b      	lsrs	r3, r3, #8
 800708e:	f003 0307 	and.w	r3, r3, #7
}
 8007092:	4618      	mov	r0, r3
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	e000ed00 	.word	0xe000ed00

080070a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	db0b      	blt.n	80070ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070b2:	79fb      	ldrb	r3, [r7, #7]
 80070b4:	f003 021f 	and.w	r2, r3, #31
 80070b8:	4907      	ldr	r1, [pc, #28]	; (80070d8 <__NVIC_EnableIRQ+0x38>)
 80070ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070be:	095b      	lsrs	r3, r3, #5
 80070c0:	2001      	movs	r0, #1
 80070c2:	fa00 f202 	lsl.w	r2, r0, r2
 80070c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	e000e100 	.word	0xe000e100

080070dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db0a      	blt.n	8007106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	490c      	ldr	r1, [pc, #48]	; (8007128 <__NVIC_SetPriority+0x4c>)
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	0112      	lsls	r2, r2, #4
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	440b      	add	r3, r1
 8007100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007104:	e00a      	b.n	800711c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4908      	ldr	r1, [pc, #32]	; (800712c <__NVIC_SetPriority+0x50>)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	3b04      	subs	r3, #4
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	440b      	add	r3, r1
 800711a:	761a      	strb	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	e000e100 	.word	0xe000e100
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007130:	b480      	push	{r7}
 8007132:	b089      	sub	sp, #36	; 0x24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f1c3 0307 	rsb	r3, r3, #7
 800714a:	2b04      	cmp	r3, #4
 800714c:	bf28      	it	cs
 800714e:	2304      	movcs	r3, #4
 8007150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3304      	adds	r3, #4
 8007156:	2b06      	cmp	r3, #6
 8007158:	d902      	bls.n	8007160 <NVIC_EncodePriority+0x30>
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	3b03      	subs	r3, #3
 800715e:	e000      	b.n	8007162 <NVIC_EncodePriority+0x32>
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007164:	f04f 32ff 	mov.w	r2, #4294967295
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	fa02 f303 	lsl.w	r3, r2, r3
 800716e:	43da      	mvns	r2, r3
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	401a      	ands	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007178:	f04f 31ff 	mov.w	r1, #4294967295
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	fa01 f303 	lsl.w	r3, r1, r3
 8007182:	43d9      	mvns	r1, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007188:	4313      	orrs	r3, r2
         );
}
 800718a:	4618      	mov	r0, r3
 800718c:	3724      	adds	r7, #36	; 0x24
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071a8:	d301      	bcc.n	80071ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071aa:	2301      	movs	r3, #1
 80071ac:	e00f      	b.n	80071ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071ae:	4a0a      	ldr	r2, [pc, #40]	; (80071d8 <SysTick_Config+0x40>)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071b6:	210f      	movs	r1, #15
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295
 80071bc:	f7ff ff8e 	bl	80070dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <SysTick_Config+0x40>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071c6:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <SysTick_Config+0x40>)
 80071c8:	2207      	movs	r2, #7
 80071ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	e000e010 	.word	0xe000e010

080071dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff29 	bl	800703c <__NVIC_SetPriorityGrouping>
}
 80071ea:	bf00      	nop
 80071ec:	3708      	adds	r7, #8
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b086      	sub	sp, #24
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	4603      	mov	r3, r0
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
 80071fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007204:	f7ff ff3e 	bl	8007084 <__NVIC_GetPriorityGrouping>
 8007208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	68b9      	ldr	r1, [r7, #8]
 800720e:	6978      	ldr	r0, [r7, #20]
 8007210:	f7ff ff8e 	bl	8007130 <NVIC_EncodePriority>
 8007214:	4602      	mov	r2, r0
 8007216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ff5d 	bl	80070dc <__NVIC_SetPriority>
}
 8007222:	bf00      	nop
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	4603      	mov	r3, r0
 8007232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff ff31 	bl	80070a0 <__NVIC_EnableIRQ>
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ffa2 	bl	8007198 <SysTick_Config>
 8007254:	4603      	mov	r3, r0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
	...

08007260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800726c:	f7ff fac4 	bl	80067f8 <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e099      	b.n	80073b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0201 	bic.w	r2, r2, #1
 800729a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800729c:	e00f      	b.n	80072be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800729e:	f7ff faab 	bl	80067f8 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b05      	cmp	r3, #5
 80072aa:	d908      	bls.n	80072be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2203      	movs	r2, #3
 80072b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e078      	b.n	80073b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e8      	bne.n	800729e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4b38      	ldr	r3, [pc, #224]	; (80073b8 <HAL_DMA_Init+0x158>)
 80072d8:	4013      	ands	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b04      	cmp	r3, #4
 8007316:	d107      	bne.n	8007328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007320:	4313      	orrs	r3, r2
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	f023 0307 	bic.w	r3, r3, #7
 800733e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	4313      	orrs	r3, r2
 8007348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b04      	cmp	r3, #4
 8007350:	d117      	bne.n	8007382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00e      	beq.n	8007382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fa6f 	bl	8007848 <DMA_CheckFifoParam>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d008      	beq.n	8007382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2240      	movs	r2, #64	; 0x40
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800737e:	2301      	movs	r3, #1
 8007380:	e016      	b.n	80073b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa26 	bl	80077dc <DMA_CalcBaseAndBitshift>
 8007390:	4603      	mov	r3, r0
 8007392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007398:	223f      	movs	r2, #63	; 0x3f
 800739a:	409a      	lsls	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2201      	movs	r2, #1
 80073aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	f010803f 	.word	0xf010803f

080073bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	607a      	str	r2, [r7, #4]
 80073c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_DMA_Start_IT+0x26>
 80073de:	2302      	movs	r3, #2
 80073e0:	e040      	b.n	8007464 <HAL_DMA_Start_IT+0xa8>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d12f      	bne.n	8007456 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f9b8 	bl	8007780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007414:	223f      	movs	r2, #63	; 0x3f
 8007416:	409a      	lsls	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 0216 	orr.w	r2, r2, #22
 800742a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0208 	orr.w	r2, r2, #8
 8007442:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	e005      	b.n	8007462 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800745e:	2302      	movs	r3, #2
 8007460:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007478:	4b92      	ldr	r3, [pc, #584]	; (80076c4 <HAL_DMA_IRQHandler+0x258>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a92      	ldr	r2, [pc, #584]	; (80076c8 <HAL_DMA_IRQHandler+0x25c>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0a9b      	lsrs	r3, r3, #10
 8007484:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007496:	2208      	movs	r2, #8
 8007498:	409a      	lsls	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01a      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d013      	beq.n	80074d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f022 0204 	bic.w	r2, r2, #4
 80074be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074c4:	2208      	movs	r2, #8
 80074c6:	409a      	lsls	r2, r3
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d0:	f043 0201 	orr.w	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074dc:	2201      	movs	r2, #1
 80074de:	409a      	lsls	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4013      	ands	r3, r2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d012      	beq.n	800750e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00b      	beq.n	800750e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	2201      	movs	r2, #1
 80074fc:	409a      	lsls	r2, r3
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	f043 0202 	orr.w	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	2204      	movs	r2, #4
 8007514:	409a      	lsls	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00b      	beq.n	8007544 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007530:	2204      	movs	r2, #4
 8007532:	409a      	lsls	r2, r3
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800753c:	f043 0204 	orr.w	r2, r3, #4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007548:	2210      	movs	r2, #16
 800754a:	409a      	lsls	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4013      	ands	r3, r2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d043      	beq.n	80075dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	d03c      	beq.n	80075dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007566:	2210      	movs	r2, #16
 8007568:	409a      	lsls	r2, r3
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d018      	beq.n	80075ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d108      	bne.n	800759c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d024      	beq.n	80075dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	e01f      	b.n	80075dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d01b      	beq.n	80075dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	4798      	blx	r3
 80075ac:	e016      	b.n	80075dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d107      	bne.n	80075cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0208 	bic.w	r2, r2, #8
 80075ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e0:	2220      	movs	r2, #32
 80075e2:	409a      	lsls	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4013      	ands	r3, r2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 808e 	beq.w	800770a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8086 	beq.w	800770a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007602:	2220      	movs	r2, #32
 8007604:	409a      	lsls	r2, r3
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b05      	cmp	r3, #5
 8007614:	d136      	bne.n	8007684 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0216 	bic.w	r2, r2, #22
 8007624:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007634:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <HAL_DMA_IRQHandler+0x1da>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0208 	bic.w	r2, r2, #8
 8007654:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800765a:	223f      	movs	r2, #63	; 0x3f
 800765c:	409a      	lsls	r2, r3
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007676:	2b00      	cmp	r3, #0
 8007678:	d07d      	beq.n	8007776 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
        }
        return;
 8007682:	e078      	b.n	8007776 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01c      	beq.n	80076cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d108      	bne.n	80076b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d030      	beq.n	800770a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
 80076b0:	e02b      	b.n	800770a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d027      	beq.n	800770a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
 80076c2:	e022      	b.n	800770a <HAL_DMA_IRQHandler+0x29e>
 80076c4:	20000034 	.word	0x20000034
 80076c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10f      	bne.n	80076fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0210 	bic.w	r2, r2, #16
 80076e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	2b00      	cmp	r3, #0
 8007710:	d032      	beq.n	8007778 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007716:	f003 0301 	and.w	r3, r3, #1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d022      	beq.n	8007764 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2205      	movs	r2, #5
 8007722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0201 	bic.w	r2, r2, #1
 8007734:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	3301      	adds	r3, #1
 800773a:	60bb      	str	r3, [r7, #8]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	429a      	cmp	r2, r3
 8007740:	d307      	bcc.n	8007752 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1f2      	bne.n	8007736 <HAL_DMA_IRQHandler+0x2ca>
 8007750:	e000      	b.n	8007754 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007752:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	4798      	blx	r3
 8007774:	e000      	b.n	8007778 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007776:	bf00      	nop
    }
  }
}
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop

08007780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800779c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d108      	bne.n	80077c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80077be:	e007      	b.n	80077d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	60da      	str	r2, [r3, #12]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	3b10      	subs	r3, #16
 80077ec:	4a14      	ldr	r2, [pc, #80]	; (8007840 <DMA_CalcBaseAndBitshift+0x64>)
 80077ee:	fba2 2303 	umull	r2, r3, r2, r3
 80077f2:	091b      	lsrs	r3, r3, #4
 80077f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80077f6:	4a13      	ldr	r2, [pc, #76]	; (8007844 <DMA_CalcBaseAndBitshift+0x68>)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d909      	bls.n	800781e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	1d1a      	adds	r2, r3, #4
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	659a      	str	r2, [r3, #88]	; 0x58
 800781c:	e007      	b.n	800782e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	aaaaaaab 	.word	0xaaaaaaab
 8007844:	08010e78 	.word	0x08010e78

08007848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d11f      	bne.n	80078a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d855      	bhi.n	8007914 <DMA_CheckFifoParam+0xcc>
 8007868:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <DMA_CheckFifoParam+0x28>)
 800786a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786e:	bf00      	nop
 8007870:	08007881 	.word	0x08007881
 8007874:	08007893 	.word	0x08007893
 8007878:	08007881 	.word	0x08007881
 800787c:	08007915 	.word	0x08007915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d045      	beq.n	8007918 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007890:	e042      	b.n	8007918 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800789a:	d13f      	bne.n	800791c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078a0:	e03c      	b.n	800791c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078aa:	d121      	bne.n	80078f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b03      	cmp	r3, #3
 80078b0:	d836      	bhi.n	8007920 <DMA_CheckFifoParam+0xd8>
 80078b2:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <DMA_CheckFifoParam+0x70>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078cf 	.word	0x080078cf
 80078c0:	080078c9 	.word	0x080078c9
 80078c4:	080078e1 	.word	0x080078e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	73fb      	strb	r3, [r7, #15]
      break;
 80078cc:	e02f      	b.n	800792e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d024      	beq.n	8007924 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078de:	e021      	b.n	8007924 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80078e8:	d11e      	bne.n	8007928 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80078ee:	e01b      	b.n	8007928 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d902      	bls.n	80078fc <DMA_CheckFifoParam+0xb4>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d003      	beq.n	8007902 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80078fa:	e018      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007900:	e015      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
      break;
 8007912:	e00b      	b.n	800792c <DMA_CheckFifoParam+0xe4>
      break;
 8007914:	bf00      	nop
 8007916:	e00a      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;
 8007918:	bf00      	nop
 800791a:	e008      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;
 800791c:	bf00      	nop
 800791e:	e006      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;
 8007920:	bf00      	nop
 8007922:	e004      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;
 8007924:	bf00      	nop
 8007926:	e002      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;   
 8007928:	bf00      	nop
 800792a:	e000      	b.n	800792e <DMA_CheckFifoParam+0xe6>
      break;
 800792c:	bf00      	nop
    }
  } 
  
  return status; 
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <HAL_FLASH_Unlock+0x38>)
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	da0b      	bge.n	8007966 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800794e:	4b09      	ldr	r3, [pc, #36]	; (8007974 <HAL_FLASH_Unlock+0x38>)
 8007950:	4a09      	ldr	r2, [pc, #36]	; (8007978 <HAL_FLASH_Unlock+0x3c>)
 8007952:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007954:	4b07      	ldr	r3, [pc, #28]	; (8007974 <HAL_FLASH_Unlock+0x38>)
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <HAL_FLASH_Unlock+0x40>)
 8007958:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_FLASH_Unlock+0x38>)
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	da01      	bge.n	8007966 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007966:	79fb      	ldrb	r3, [r7, #7]
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	40023c00 	.word	0x40023c00
 8007978:	45670123 	.word	0x45670123
 800797c:	cdef89ab 	.word	0xcdef89ab

08007980 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <HAL_FLASH_Lock+0x1c>)
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	4a04      	ldr	r2, [pc, #16]	; (800799c <HAL_FLASH_Lock+0x1c>)
 800798a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800798e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	40023c00 	.word	0x40023c00

080079a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80079ac:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <FLASH_WaitForLastOperation+0x78>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80079b2:	f7fe ff21 	bl	80067f8 <HAL_GetTick>
 80079b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80079b8:	e010      	b.n	80079dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d00c      	beq.n	80079dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <FLASH_WaitForLastOperation+0x38>
 80079c8:	f7fe ff16 	bl	80067f8 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d201      	bcs.n	80079dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e019      	b.n	8007a10 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80079dc:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <FLASH_WaitForLastOperation+0x7c>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e8      	bne.n	80079ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80079e8:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <FLASH_WaitForLastOperation+0x7c>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80079f4:	4b09      	ldr	r3, [pc, #36]	; (8007a1c <FLASH_WaitForLastOperation+0x7c>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80079fa:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <FLASH_WaitForLastOperation+0x7c>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007a06:	f000 f80b 	bl	8007a20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
  
}  
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	2001f0f4 	.word	0x2001f0f4
 8007a1c:	40023c00 	.word	0x40023c00

08007a20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007a24:	4b27      	ldr	r3, [pc, #156]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0310 	and.w	r3, r3, #16
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d008      	beq.n	8007a42 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	f043 0310 	orr.w	r3, r3, #16
 8007a38:	4a23      	ldr	r2, [pc, #140]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a3a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007a3c:	4b21      	ldr	r3, [pc, #132]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a3e:	2210      	movs	r2, #16
 8007a40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007a42:	4b20      	ldr	r3, [pc, #128]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f003 0320 	and.w	r3, r3, #32
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f043 0308 	orr.w	r3, r3, #8
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a58:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007a60:	4b18      	ldr	r3, [pc, #96]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007a6c:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f043 0304 	orr.w	r3, r3, #4
 8007a74:	4a14      	ldr	r2, [pc, #80]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a7a:	2240      	movs	r2, #64	; 0x40
 8007a7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007a8a:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f043 0302 	orr.w	r3, r3, #2
 8007a92:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007a94:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007a96:	4b0b      	ldr	r3, [pc, #44]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a98:	2280      	movs	r2, #128	; 0x80
 8007a9a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007a9c:	4b09      	ldr	r3, [pc, #36]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d008      	beq.n	8007aba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	f043 0320 	orr.w	r3, r3, #32
 8007ab0:	4a05      	ldr	r2, [pc, #20]	; (8007ac8 <FLASH_SetErrorCode+0xa8>)
 8007ab2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <FLASH_SetErrorCode+0xa4>)
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	60da      	str	r2, [r3, #12]
  }
}
 8007aba:	bf00      	nop
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	40023c00 	.word	0x40023c00
 8007ac8:	2001f0f4 	.word	0x2001f0f4

08007acc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ade:	4b31      	ldr	r3, [pc, #196]	; (8007ba4 <HAL_FLASHEx_Erase+0xd8>)
 8007ae0:	7e1b      	ldrb	r3, [r3, #24]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_FLASHEx_Erase+0x1e>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e058      	b.n	8007b9c <HAL_FLASHEx_Erase+0xd0>
 8007aea:	4b2e      	ldr	r3, [pc, #184]	; (8007ba4 <HAL_FLASHEx_Erase+0xd8>)
 8007aec:	2201      	movs	r2, #1
 8007aee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007af0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007af4:	f7ff ff54 	bl	80079a0 <FLASH_WaitForLastOperation>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d148      	bne.n	8007b94 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f04f 32ff 	mov.w	r2, #4294967295
 8007b08:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d115      	bne.n	8007b3e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	b2da      	uxtb	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	4610      	mov	r0, r2
 8007b20:	f000 f844 	bl	8007bac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b28:	f7ff ff3a 	bl	80079a0 <FLASH_WaitForLastOperation>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007b30:	4b1d      	ldr	r3, [pc, #116]	; (8007ba8 <HAL_FLASHEx_Erase+0xdc>)
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	4a1c      	ldr	r2, [pc, #112]	; (8007ba8 <HAL_FLASHEx_Erase+0xdc>)
 8007b36:	f023 0304 	bic.w	r3, r3, #4
 8007b3a:	6113      	str	r3, [r2, #16]
 8007b3c:	e028      	b.n	8007b90 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60bb      	str	r3, [r7, #8]
 8007b44:	e01c      	b.n	8007b80 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f000 f850 	bl	8007bf4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007b58:	f7ff ff22 	bl	80079a0 <FLASH_WaitForLastOperation>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007b60:	4b11      	ldr	r3, [pc, #68]	; (8007ba8 <HAL_FLASHEx_Erase+0xdc>)
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	4a10      	ldr	r2, [pc, #64]	; (8007ba8 <HAL_FLASHEx_Erase+0xdc>)
 8007b66:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007b6a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	601a      	str	r2, [r3, #0]
          break;
 8007b78:	e00a      	b.n	8007b90 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	60bb      	str	r3, [r7, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	4413      	add	r3, r2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d3da      	bcc.n	8007b46 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007b90:	f000 f878 	bl	8007c84 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b94:	4b03      	ldr	r3, [pc, #12]	; (8007ba4 <HAL_FLASHEx_Erase+0xd8>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	761a      	strb	r2, [r3, #24]

  return status;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	2001f0f4 	.word	0x2001f0f4
 8007ba8:	40023c00 	.word	0x40023c00

08007bac <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bb8:	4b0d      	ldr	r3, [pc, #52]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	4a0c      	ldr	r2, [pc, #48]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bca:	f043 0304 	orr.w	r3, r3, #4
 8007bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	4a05      	ldr	r2, [pc, #20]	; (8007bf0 <FLASH_MassErase+0x44>)
 8007bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007be0:	6113      	str	r3, [r2, #16]
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40023c00 	.word	0x40023c00

08007bf4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007c04:	78fb      	ldrb	r3, [r7, #3]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d102      	bne.n	8007c10 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e010      	b.n	8007c32 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d103      	bne.n	8007c1e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e009      	b.n	8007c32 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007c1e:	78fb      	ldrb	r3, [r7, #3]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d103      	bne.n	8007c2c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	e002      	b.n	8007c32 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c30:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c32:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	4a12      	ldr	r2, [pc, #72]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c40:	691a      	ldr	r2, [r3, #16]
 8007c42:	490f      	ldr	r1, [pc, #60]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	4a0c      	ldr	r2, [pc, #48]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007c54:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007c56:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	4a07      	ldr	r2, [pc, #28]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c62:	f043 0302 	orr.w	r3, r3, #2
 8007c66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <FLASH_Erase_Sector+0x8c>)
 8007c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c72:	6113      	str	r3, [r2, #16]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	40023c00 	.word	0x40023c00

08007c84 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007c88:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d017      	beq.n	8007cc4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007c94:	4b1d      	ldr	r3, [pc, #116]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a1c      	ldr	r2, [pc, #112]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007c9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c9e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007ca0:	4b1a      	ldr	r3, [pc, #104]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a19      	ldr	r2, [pc, #100]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007ca6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	4b17      	ldr	r3, [pc, #92]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cb6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007cb8:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a13      	ldr	r2, [pc, #76]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cc2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d017      	beq.n	8007d00 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a07      	ldr	r2, [pc, #28]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cf2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007cf4:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a04      	ldr	r2, [pc, #16]	; (8007d0c <FLASH_FlushCaches+0x88>)
 8007cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cfe:	6013      	str	r3, [r2, #0]
  }
}
 8007d00:	bf00      	nop
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40023c00 	.word	0x40023c00

08007d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	; 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d22:	2300      	movs	r3, #0
 8007d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d26:	2300      	movs	r3, #0
 8007d28:	61fb      	str	r3, [r7, #28]
 8007d2a:	e16b      	b.n	8008004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	fa02 f303 	lsl.w	r3, r2, r3
 8007d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	f040 815a 	bne.w	8007ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d00b      	beq.n	8007d6a <HAL_GPIO_Init+0x5a>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d007      	beq.n	8007d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d5e:	2b11      	cmp	r3, #17
 8007d60:	d003      	beq.n	8007d6a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b12      	cmp	r3, #18
 8007d68:	d130      	bne.n	8007dcc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	2203      	movs	r2, #3
 8007d76:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7a:	43db      	mvns	r3, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007da0:	2201      	movs	r2, #1
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	fa02 f303 	lsl.w	r3, r2, r3
 8007da8:	43db      	mvns	r3, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4013      	ands	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	091b      	lsrs	r3, r3, #4
 8007db6:	f003 0201 	and.w	r2, r3, #1
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d003      	beq.n	8007e0c <HAL_GPIO_Init+0xfc>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	2b12      	cmp	r3, #18
 8007e0a:	d123      	bne.n	8007e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	08da      	lsrs	r2, r3, #3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3208      	adds	r2, #8
 8007e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	220f      	movs	r2, #15
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	43db      	mvns	r3, r3
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	691a      	ldr	r2, [r3, #16]
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	08da      	lsrs	r2, r3, #3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3208      	adds	r2, #8
 8007e4e:	69b9      	ldr	r1, [r7, #24]
 8007e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	2203      	movs	r2, #3
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f003 0203 	and.w	r2, r3, #3
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80b4 	beq.w	8007ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e96:	2300      	movs	r3, #0
 8007e98:	60fb      	str	r3, [r7, #12]
 8007e9a:	4b5f      	ldr	r3, [pc, #380]	; (8008018 <HAL_GPIO_Init+0x308>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	4a5e      	ldr	r2, [pc, #376]	; (8008018 <HAL_GPIO_Init+0x308>)
 8007ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ea6:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <HAL_GPIO_Init+0x308>)
 8007ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007eb2:	4a5a      	ldr	r2, [pc, #360]	; (800801c <HAL_GPIO_Init+0x30c>)
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	3302      	adds	r3, #2
 8007eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	220f      	movs	r2, #15
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a51      	ldr	r2, [pc, #324]	; (8008020 <HAL_GPIO_Init+0x310>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d02b      	beq.n	8007f36 <HAL_GPIO_Init+0x226>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a50      	ldr	r2, [pc, #320]	; (8008024 <HAL_GPIO_Init+0x314>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d025      	beq.n	8007f32 <HAL_GPIO_Init+0x222>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a4f      	ldr	r2, [pc, #316]	; (8008028 <HAL_GPIO_Init+0x318>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d01f      	beq.n	8007f2e <HAL_GPIO_Init+0x21e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a4e      	ldr	r2, [pc, #312]	; (800802c <HAL_GPIO_Init+0x31c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d019      	beq.n	8007f2a <HAL_GPIO_Init+0x21a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a4d      	ldr	r2, [pc, #308]	; (8008030 <HAL_GPIO_Init+0x320>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_GPIO_Init+0x216>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a4c      	ldr	r2, [pc, #304]	; (8008034 <HAL_GPIO_Init+0x324>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00d      	beq.n	8007f22 <HAL_GPIO_Init+0x212>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a4b      	ldr	r2, [pc, #300]	; (8008038 <HAL_GPIO_Init+0x328>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d007      	beq.n	8007f1e <HAL_GPIO_Init+0x20e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a4a      	ldr	r2, [pc, #296]	; (800803c <HAL_GPIO_Init+0x32c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d101      	bne.n	8007f1a <HAL_GPIO_Init+0x20a>
 8007f16:	2307      	movs	r3, #7
 8007f18:	e00e      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	e00c      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f1e:	2306      	movs	r3, #6
 8007f20:	e00a      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f22:	2305      	movs	r3, #5
 8007f24:	e008      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f26:	2304      	movs	r3, #4
 8007f28:	e006      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e004      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e002      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <HAL_GPIO_Init+0x228>
 8007f36:	2300      	movs	r3, #0
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	f002 0203 	and.w	r2, r2, #3
 8007f3e:	0092      	lsls	r2, r2, #2
 8007f40:	4093      	lsls	r3, r2
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f48:	4934      	ldr	r1, [pc, #208]	; (800801c <HAL_GPIO_Init+0x30c>)
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	089b      	lsrs	r3, r3, #2
 8007f4e:	3302      	adds	r3, #2
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f56:	4b3a      	ldr	r3, [pc, #232]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	4013      	ands	r3, r2
 8007f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f7a:	4a31      	ldr	r2, [pc, #196]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007f80:	4b2f      	ldr	r3, [pc, #188]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007faa:	4b25      	ldr	r3, [pc, #148]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	43db      	mvns	r3, r3
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007fce:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007fd4:	4b1a      	ldr	r3, [pc, #104]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	43db      	mvns	r3, r3
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ff0:	69ba      	ldr	r2, [r7, #24]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ff8:	4a11      	ldr	r2, [pc, #68]	; (8008040 <HAL_GPIO_Init+0x330>)
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	3301      	adds	r3, #1
 8008002:	61fb      	str	r3, [r7, #28]
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	2b0f      	cmp	r3, #15
 8008008:	f67f ae90 	bls.w	8007d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800800c:	bf00      	nop
 800800e:	3724      	adds	r7, #36	; 0x24
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	40023800 	.word	0x40023800
 800801c:	40013800 	.word	0x40013800
 8008020:	40020000 	.word	0x40020000
 8008024:	40020400 	.word	0x40020400
 8008028:	40020800 	.word	0x40020800
 800802c:	40020c00 	.word	0x40020c00
 8008030:	40021000 	.word	0x40021000
 8008034:	40021400 	.word	0x40021400
 8008038:	40021800 	.word	0x40021800
 800803c:	40021c00 	.word	0x40021c00
 8008040:	40013c00 	.word	0x40013c00

08008044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	887b      	ldrh	r3, [r7, #2]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
 8008060:	e001      	b.n	8008066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
 8008080:	4613      	mov	r3, r2
 8008082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008084:	787b      	ldrb	r3, [r7, #1]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800808a:	887a      	ldrh	r2, [r7, #2]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008090:	e003      	b.n	800809a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008092:	887b      	ldrh	r3, [r7, #2]
 8008094:	041a      	lsls	r2, r3, #16
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	619a      	str	r2, [r3, #24]
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
	...

080080a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d101      	bne.n	80080ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	e11f      	b.n	80082fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fd ff96 	bl	8006000 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2224      	movs	r2, #36	; 0x24
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0201 	bic.w	r2, r2, #1
 80080ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800810a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800810c:	f000 fd18 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 8008110:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4a7b      	ldr	r2, [pc, #492]	; (8008304 <HAL_I2C_Init+0x25c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d807      	bhi.n	800812c <HAL_I2C_Init+0x84>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a7a      	ldr	r2, [pc, #488]	; (8008308 <HAL_I2C_Init+0x260>)
 8008120:	4293      	cmp	r3, r2
 8008122:	bf94      	ite	ls
 8008124:	2301      	movls	r3, #1
 8008126:	2300      	movhi	r3, #0
 8008128:	b2db      	uxtb	r3, r3
 800812a:	e006      	b.n	800813a <HAL_I2C_Init+0x92>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4a77      	ldr	r2, [pc, #476]	; (800830c <HAL_I2C_Init+0x264>)
 8008130:	4293      	cmp	r3, r2
 8008132:	bf94      	ite	ls
 8008134:	2301      	movls	r3, #1
 8008136:	2300      	movhi	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e0db      	b.n	80082fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4a72      	ldr	r2, [pc, #456]	; (8008310 <HAL_I2C_Init+0x268>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	0c9b      	lsrs	r3, r3, #18
 800814c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a64      	ldr	r2, [pc, #400]	; (8008304 <HAL_I2C_Init+0x25c>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d802      	bhi.n	800817c <HAL_I2C_Init+0xd4>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3301      	adds	r3, #1
 800817a:	e009      	b.n	8008190 <HAL_I2C_Init+0xe8>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	4a63      	ldr	r2, [pc, #396]	; (8008314 <HAL_I2C_Init+0x26c>)
 8008188:	fba2 2303 	umull	r2, r3, r2, r3
 800818c:	099b      	lsrs	r3, r3, #6
 800818e:	3301      	adds	r3, #1
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6812      	ldr	r2, [r2, #0]
 8008194:	430b      	orrs	r3, r1
 8008196:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80081a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	4956      	ldr	r1, [pc, #344]	; (8008304 <HAL_I2C_Init+0x25c>)
 80081ac:	428b      	cmp	r3, r1
 80081ae:	d80d      	bhi.n	80081cc <HAL_I2C_Init+0x124>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	1e59      	subs	r1, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80081be:	3301      	adds	r3, #1
 80081c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	bf38      	it	cc
 80081c8:	2304      	movcc	r3, #4
 80081ca:	e04f      	b.n	800826c <HAL_I2C_Init+0x1c4>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d111      	bne.n	80081f8 <HAL_I2C_Init+0x150>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	1e58      	subs	r0, r3, #1
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6859      	ldr	r1, [r3, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	440b      	add	r3, r1
 80081e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80081e6:	3301      	adds	r3, #1
 80081e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	e012      	b.n	800821e <HAL_I2C_Init+0x176>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	1e58      	subs	r0, r3, #1
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6859      	ldr	r1, [r3, #4]
 8008200:	460b      	mov	r3, r1
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	440b      	add	r3, r1
 8008206:	0099      	lsls	r1, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	fbb0 f3f3 	udiv	r3, r0, r3
 800820e:	3301      	adds	r3, #1
 8008210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008214:	2b00      	cmp	r3, #0
 8008216:	bf0c      	ite	eq
 8008218:	2301      	moveq	r3, #1
 800821a:	2300      	movne	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <HAL_I2C_Init+0x17e>
 8008222:	2301      	movs	r3, #1
 8008224:	e022      	b.n	800826c <HAL_I2C_Init+0x1c4>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10e      	bne.n	800824c <HAL_I2C_Init+0x1a4>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	1e58      	subs	r0, r3, #1
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6859      	ldr	r1, [r3, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	440b      	add	r3, r1
 800823c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008240:	3301      	adds	r3, #1
 8008242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800824a:	e00f      	b.n	800826c <HAL_I2C_Init+0x1c4>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	1e58      	subs	r0, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6859      	ldr	r1, [r3, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	0099      	lsls	r1, r3, #2
 800825c:	440b      	add	r3, r1
 800825e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008262:	3301      	adds	r3, #1
 8008264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	6809      	ldr	r1, [r1, #0]
 8008270:	4313      	orrs	r3, r2
 8008272:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69da      	ldr	r2, [r3, #28]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	430a      	orrs	r2, r1
 800828e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800829a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6911      	ldr	r1, [r2, #16]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68d2      	ldr	r2, [r2, #12]
 80082a6:	4311      	orrs	r1, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	430a      	orrs	r2, r1
 80082ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0201 	orr.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	000186a0 	.word	0x000186a0
 8008308:	001e847f 	.word	0x001e847f
 800830c:	003d08ff 	.word	0x003d08ff
 8008310:	431bde83 	.word	0x431bde83
 8008314:	10624dd3 	.word	0x10624dd3

08008318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e25b      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d075      	beq.n	8008422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008336:	4ba3      	ldr	r3, [pc, #652]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	f003 030c 	and.w	r3, r3, #12
 800833e:	2b04      	cmp	r3, #4
 8008340:	d00c      	beq.n	800835c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008342:	4ba0      	ldr	r3, [pc, #640]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800834a:	2b08      	cmp	r3, #8
 800834c:	d112      	bne.n	8008374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800834e:	4b9d      	ldr	r3, [pc, #628]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800835a:	d10b      	bne.n	8008374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800835c:	4b99      	ldr	r3, [pc, #612]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d05b      	beq.n	8008420 <HAL_RCC_OscConfig+0x108>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d157      	bne.n	8008420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e236      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800837c:	d106      	bne.n	800838c <HAL_RCC_OscConfig+0x74>
 800837e:	4b91      	ldr	r3, [pc, #580]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a90      	ldr	r2, [pc, #576]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	e01d      	b.n	80083c8 <HAL_RCC_OscConfig+0xb0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008394:	d10c      	bne.n	80083b0 <HAL_RCC_OscConfig+0x98>
 8008396:	4b8b      	ldr	r3, [pc, #556]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a8a      	ldr	r2, [pc, #552]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800839c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	4b88      	ldr	r3, [pc, #544]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a87      	ldr	r2, [pc, #540]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	e00b      	b.n	80083c8 <HAL_RCC_OscConfig+0xb0>
 80083b0:	4b84      	ldr	r3, [pc, #528]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a83      	ldr	r2, [pc, #524]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	4b81      	ldr	r3, [pc, #516]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a80      	ldr	r2, [pc, #512]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d013      	beq.n	80083f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d0:	f7fe fa12 	bl	80067f8 <HAL_GetTick>
 80083d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083d6:	e008      	b.n	80083ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083d8:	f7fe fa0e 	bl	80067f8 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b64      	cmp	r3, #100	; 0x64
 80083e4:	d901      	bls.n	80083ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e1fb      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083ea:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0f0      	beq.n	80083d8 <HAL_RCC_OscConfig+0xc0>
 80083f6:	e014      	b.n	8008422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083f8:	f7fe f9fe 	bl	80067f8 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008400:	f7fe f9fa 	bl	80067f8 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b64      	cmp	r3, #100	; 0x64
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e1e7      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008412:	4b6c      	ldr	r3, [pc, #432]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f0      	bne.n	8008400 <HAL_RCC_OscConfig+0xe8>
 800841e:	e000      	b.n	8008422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0302 	and.w	r3, r3, #2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d063      	beq.n	80084f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800842e:	4b65      	ldr	r3, [pc, #404]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f003 030c 	and.w	r3, r3, #12
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00b      	beq.n	8008452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800843a:	4b62      	ldr	r3, [pc, #392]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008442:	2b08      	cmp	r3, #8
 8008444:	d11c      	bne.n	8008480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008446:	4b5f      	ldr	r3, [pc, #380]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d116      	bne.n	8008480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008452:	4b5c      	ldr	r3, [pc, #368]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <HAL_RCC_OscConfig+0x152>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d001      	beq.n	800846a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e1bb      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800846a:	4b56      	ldr	r3, [pc, #344]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4952      	ldr	r1, [pc, #328]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800847a:	4313      	orrs	r3, r2
 800847c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800847e:	e03a      	b.n	80084f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d020      	beq.n	80084ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008488:	4b4f      	ldr	r3, [pc, #316]	; (80085c8 <HAL_RCC_OscConfig+0x2b0>)
 800848a:	2201      	movs	r2, #1
 800848c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800848e:	f7fe f9b3 	bl	80067f8 <HAL_GetTick>
 8008492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008494:	e008      	b.n	80084a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008496:	f7fe f9af 	bl	80067f8 <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d901      	bls.n	80084a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e19c      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a8:	4b46      	ldr	r3, [pc, #280]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f0      	beq.n	8008496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084b4:	4b43      	ldr	r3, [pc, #268]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	4940      	ldr	r1, [pc, #256]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	600b      	str	r3, [r1, #0]
 80084c8:	e015      	b.n	80084f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084ca:	4b3f      	ldr	r3, [pc, #252]	; (80085c8 <HAL_RCC_OscConfig+0x2b0>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d0:	f7fe f992 	bl	80067f8 <HAL_GetTick>
 80084d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084d6:	e008      	b.n	80084ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084d8:	f7fe f98e 	bl	80067f8 <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e17b      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ea:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0302 	and.w	r3, r3, #2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1f0      	bne.n	80084d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d030      	beq.n	8008564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d016      	beq.n	8008538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800850a:	4b30      	ldr	r3, [pc, #192]	; (80085cc <HAL_RCC_OscConfig+0x2b4>)
 800850c:	2201      	movs	r2, #1
 800850e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008510:	f7fe f972 	bl	80067f8 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008518:	f7fe f96e 	bl	80067f8 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b02      	cmp	r3, #2
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e15b      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800852a:	4b26      	ldr	r3, [pc, #152]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800852c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0f0      	beq.n	8008518 <HAL_RCC_OscConfig+0x200>
 8008536:	e015      	b.n	8008564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008538:	4b24      	ldr	r3, [pc, #144]	; (80085cc <HAL_RCC_OscConfig+0x2b4>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800853e:	f7fe f95b 	bl	80067f8 <HAL_GetTick>
 8008542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008544:	e008      	b.n	8008558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008546:	f7fe f957 	bl	80067f8 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d901      	bls.n	8008558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e144      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800855a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1f0      	bne.n	8008546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 80a0 	beq.w	80086b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10f      	bne.n	80085a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008582:	2300      	movs	r3, #0
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	4a0e      	ldr	r2, [pc, #56]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 800858c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008590:	6413      	str	r3, [r2, #64]	; 0x40
 8008592:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <HAL_RCC_OscConfig+0x2ac>)
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859a:	60bb      	str	r3, [r7, #8]
 800859c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <HAL_RCC_OscConfig+0x2b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d121      	bne.n	80085f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085ae:	4b08      	ldr	r3, [pc, #32]	; (80085d0 <HAL_RCC_OscConfig+0x2b8>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a07      	ldr	r2, [pc, #28]	; (80085d0 <HAL_RCC_OscConfig+0x2b8>)
 80085b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085ba:	f7fe f91d 	bl	80067f8 <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085c0:	e011      	b.n	80085e6 <HAL_RCC_OscConfig+0x2ce>
 80085c2:	bf00      	nop
 80085c4:	40023800 	.word	0x40023800
 80085c8:	42470000 	.word	0x42470000
 80085cc:	42470e80 	.word	0x42470e80
 80085d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085d4:	f7fe f910 	bl	80067f8 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e0fd      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085e6:	4b81      	ldr	r3, [pc, #516]	; (80087ec <HAL_RCC_OscConfig+0x4d4>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d0f0      	beq.n	80085d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d106      	bne.n	8008608 <HAL_RCC_OscConfig+0x2f0>
 80085fa:	4b7d      	ldr	r3, [pc, #500]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085fe:	4a7c      	ldr	r2, [pc, #496]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	6713      	str	r3, [r2, #112]	; 0x70
 8008606:	e01c      	b.n	8008642 <HAL_RCC_OscConfig+0x32a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	2b05      	cmp	r3, #5
 800860e:	d10c      	bne.n	800862a <HAL_RCC_OscConfig+0x312>
 8008610:	4b77      	ldr	r3, [pc, #476]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008614:	4a76      	ldr	r2, [pc, #472]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008616:	f043 0304 	orr.w	r3, r3, #4
 800861a:	6713      	str	r3, [r2, #112]	; 0x70
 800861c:	4b74      	ldr	r3, [pc, #464]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 800861e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008620:	4a73      	ldr	r2, [pc, #460]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008622:	f043 0301 	orr.w	r3, r3, #1
 8008626:	6713      	str	r3, [r2, #112]	; 0x70
 8008628:	e00b      	b.n	8008642 <HAL_RCC_OscConfig+0x32a>
 800862a:	4b71      	ldr	r3, [pc, #452]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 800862c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862e:	4a70      	ldr	r2, [pc, #448]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	6713      	str	r3, [r2, #112]	; 0x70
 8008636:	4b6e      	ldr	r3, [pc, #440]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800863a:	4a6d      	ldr	r2, [pc, #436]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 800863c:	f023 0304 	bic.w	r3, r3, #4
 8008640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d015      	beq.n	8008676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864a:	f7fe f8d5 	bl	80067f8 <HAL_GetTick>
 800864e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008650:	e00a      	b.n	8008668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008652:	f7fe f8d1 	bl	80067f8 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e0bc      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008668:	4b61      	ldr	r3, [pc, #388]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 800866a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0ee      	beq.n	8008652 <HAL_RCC_OscConfig+0x33a>
 8008674:	e014      	b.n	80086a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008676:	f7fe f8bf 	bl	80067f8 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800867c:	e00a      	b.n	8008694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800867e:	f7fe f8bb 	bl	80067f8 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	f241 3288 	movw	r2, #5000	; 0x1388
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e0a6      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008694:	4b56      	ldr	r3, [pc, #344]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1ee      	bne.n	800867e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d105      	bne.n	80086b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086a6:	4b52      	ldr	r3, [pc, #328]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	4a51      	ldr	r2, [pc, #324]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 80086ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 8092 	beq.w	80087e0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086bc:	4b4c      	ldr	r3, [pc, #304]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 030c 	and.w	r3, r3, #12
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d05c      	beq.n	8008782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d141      	bne.n	8008754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d0:	4b48      	ldr	r3, [pc, #288]	; (80087f4 <HAL_RCC_OscConfig+0x4dc>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d6:	f7fe f88f 	bl	80067f8 <HAL_GetTick>
 80086da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086de:	f7fe f88b 	bl	80067f8 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e078      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086f0:	4b3f      	ldr	r3, [pc, #252]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f0      	bne.n	80086de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	69da      	ldr	r2, [r3, #28]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	431a      	orrs	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	019b      	lsls	r3, r3, #6
 800870c:	431a      	orrs	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	085b      	lsrs	r3, r3, #1
 8008714:	3b01      	subs	r3, #1
 8008716:	041b      	lsls	r3, r3, #16
 8008718:	431a      	orrs	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	4933      	ldr	r1, [pc, #204]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008722:	4313      	orrs	r3, r2
 8008724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008726:	4b33      	ldr	r3, [pc, #204]	; (80087f4 <HAL_RCC_OscConfig+0x4dc>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800872c:	f7fe f864 	bl	80067f8 <HAL_GetTick>
 8008730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008734:	f7fe f860 	bl	80067f8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e04d      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008746:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x41c>
 8008752:	e045      	b.n	80087e0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <HAL_RCC_OscConfig+0x4dc>)
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875a:	f7fe f84d 	bl	80067f8 <HAL_GetTick>
 800875e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008762:	f7fe f849 	bl	80067f8 <HAL_GetTick>
 8008766:	4602      	mov	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e036      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008774:	4b1e      	ldr	r3, [pc, #120]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1f0      	bne.n	8008762 <HAL_RCC_OscConfig+0x44a>
 8008780:	e02e      	b.n	80087e0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e029      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800878e:	4b18      	ldr	r3, [pc, #96]	; (80087f0 <HAL_RCC_OscConfig+0x4d8>)
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d11c      	bne.n	80087dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d115      	bne.n	80087dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087b6:	4013      	ands	r3, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087bc:	4293      	cmp	r3, r2
 80087be:	d10d      	bne.n	80087dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d106      	bne.n	80087dc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80087d8:	429a      	cmp	r2, r3
 80087da:	d001      	beq.n	80087e0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	e000      	b.n	80087e2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	40007000 	.word	0x40007000
 80087f0:	40023800 	.word	0x40023800
 80087f4:	42470060 	.word	0x42470060

080087f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0cc      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800880c:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	d90c      	bls.n	8008834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800881a:	4b65      	ldr	r3, [pc, #404]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 800881c:	683a      	ldr	r2, [r7, #0]
 800881e:	b2d2      	uxtb	r2, r2
 8008820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008822:	4b63      	ldr	r3, [pc, #396]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0b8      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d020      	beq.n	8008882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800884c:	4b59      	ldr	r3, [pc, #356]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	4a58      	ldr	r2, [pc, #352]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008864:	4b53      	ldr	r3, [pc, #332]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	4a52      	ldr	r2, [pc, #328]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800886a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800886e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008870:	4b50      	ldr	r3, [pc, #320]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	494d      	ldr	r1, [pc, #308]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800887e:	4313      	orrs	r3, r2
 8008880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d044      	beq.n	8008918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d107      	bne.n	80088a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008896:	4b47      	ldr	r3, [pc, #284]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d119      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e07f      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d003      	beq.n	80088b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d107      	bne.n	80088c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088b6:	4b3f      	ldr	r3, [pc, #252]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d109      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e06f      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c6:	4b3b      	ldr	r3, [pc, #236]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e067      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088d6:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 0203 	bic.w	r2, r3, #3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4934      	ldr	r1, [pc, #208]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088e8:	f7fd ff86 	bl	80067f8 <HAL_GetTick>
 80088ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ee:	e00a      	b.n	8008906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088f0:	f7fd ff82 	bl	80067f8 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fe:	4293      	cmp	r3, r2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e04f      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008906:	4b2b      	ldr	r3, [pc, #172]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 020c 	and.w	r2, r3, #12
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	429a      	cmp	r2, r3
 8008916:	d1eb      	bne.n	80088f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 030f 	and.w	r3, r3, #15
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d20c      	bcs.n	8008940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008926:	4b22      	ldr	r3, [pc, #136]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800892e:	4b20      	ldr	r3, [pc, #128]	; (80089b0 <HAL_RCC_ClockConfig+0x1b8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d001      	beq.n	8008940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e032      	b.n	80089a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800894c:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	4916      	ldr	r1, [pc, #88]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800895a:	4313      	orrs	r3, r2
 800895c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800896a:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	490e      	ldr	r1, [pc, #56]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 800897a:	4313      	orrs	r3, r2
 800897c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800897e:	f000 f821 	bl	80089c4 <HAL_RCC_GetSysClockFreq>
 8008982:	4601      	mov	r1, r0
 8008984:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <HAL_RCC_ClockConfig+0x1bc>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	091b      	lsrs	r3, r3, #4
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	4a0a      	ldr	r2, [pc, #40]	; (80089b8 <HAL_RCC_ClockConfig+0x1c0>)
 8008990:	5cd3      	ldrb	r3, [r2, r3]
 8008992:	fa21 f303 	lsr.w	r3, r1, r3
 8008996:	4a09      	ldr	r2, [pc, #36]	; (80089bc <HAL_RCC_ClockConfig+0x1c4>)
 8008998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <HAL_RCC_ClockConfig+0x1c8>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd fee6 	bl	8006770 <HAL_InitTick>

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40023c00 	.word	0x40023c00
 80089b4:	40023800 	.word	0x40023800
 80089b8:	08010e60 	.word	0x08010e60
 80089bc:	20000034 	.word	0x20000034
 80089c0:	20000038 	.word	0x20000038

080089c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	607b      	str	r3, [r7, #4]
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	2300      	movs	r3, #0
 80089d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80089d6:	2300      	movs	r3, #0
 80089d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089da:	4b50      	ldr	r3, [pc, #320]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f003 030c 	and.w	r3, r3, #12
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	d007      	beq.n	80089f6 <HAL_RCC_GetSysClockFreq+0x32>
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d008      	beq.n	80089fc <HAL_RCC_GetSysClockFreq+0x38>
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 808d 	bne.w	8008b0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089f0:	4b4b      	ldr	r3, [pc, #300]	; (8008b20 <HAL_RCC_GetSysClockFreq+0x15c>)
 80089f2:	60bb      	str	r3, [r7, #8]
       break;
 80089f4:	e08c      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089f6:	4b4b      	ldr	r3, [pc, #300]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 80089f8:	60bb      	str	r3, [r7, #8]
      break;
 80089fa:	e089      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089fc:	4b47      	ldr	r3, [pc, #284]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a06:	4b45      	ldr	r3, [pc, #276]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d023      	beq.n	8008a5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a12:	4b42      	ldr	r3, [pc, #264]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	f04f 0400 	mov.w	r4, #0
 8008a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a20:	f04f 0200 	mov.w	r2, #0
 8008a24:	ea03 0501 	and.w	r5, r3, r1
 8008a28:	ea04 0602 	and.w	r6, r4, r2
 8008a2c:	4a3d      	ldr	r2, [pc, #244]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a2e:	fb02 f106 	mul.w	r1, r2, r6
 8008a32:	2200      	movs	r2, #0
 8008a34:	fb02 f205 	mul.w	r2, r2, r5
 8008a38:	440a      	add	r2, r1
 8008a3a:	493a      	ldr	r1, [pc, #232]	; (8008b24 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a3c:	fba5 0101 	umull	r0, r1, r5, r1
 8008a40:	1853      	adds	r3, r2, r1
 8008a42:	4619      	mov	r1, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f04f 0400 	mov.w	r4, #0
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	f7f8 f91b 	bl	8000c88 <__aeabi_uldivmod>
 8008a52:	4603      	mov	r3, r0
 8008a54:	460c      	mov	r4, r1
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	e049      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a5a:	4b30      	ldr	r3, [pc, #192]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	099b      	lsrs	r3, r3, #6
 8008a60:	f04f 0400 	mov.w	r4, #0
 8008a64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	ea03 0501 	and.w	r5, r3, r1
 8008a70:	ea04 0602 	and.w	r6, r4, r2
 8008a74:	4629      	mov	r1, r5
 8008a76:	4632      	mov	r2, r6
 8008a78:	f04f 0300 	mov.w	r3, #0
 8008a7c:	f04f 0400 	mov.w	r4, #0
 8008a80:	0154      	lsls	r4, r2, #5
 8008a82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008a86:	014b      	lsls	r3, r1, #5
 8008a88:	4619      	mov	r1, r3
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	1b49      	subs	r1, r1, r5
 8008a8e:	eb62 0206 	sbc.w	r2, r2, r6
 8008a92:	f04f 0300 	mov.w	r3, #0
 8008a96:	f04f 0400 	mov.w	r4, #0
 8008a9a:	0194      	lsls	r4, r2, #6
 8008a9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008aa0:	018b      	lsls	r3, r1, #6
 8008aa2:	1a5b      	subs	r3, r3, r1
 8008aa4:	eb64 0402 	sbc.w	r4, r4, r2
 8008aa8:	f04f 0100 	mov.w	r1, #0
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	00e2      	lsls	r2, r4, #3
 8008ab2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008ab6:	00d9      	lsls	r1, r3, #3
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4614      	mov	r4, r2
 8008abc:	195b      	adds	r3, r3, r5
 8008abe:	eb44 0406 	adc.w	r4, r4, r6
 8008ac2:	f04f 0100 	mov.w	r1, #0
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	02a2      	lsls	r2, r4, #10
 8008acc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008ad0:	0299      	lsls	r1, r3, #10
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4614      	mov	r4, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	4621      	mov	r1, r4
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f04f 0400 	mov.w	r4, #0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	f7f8 f8d0 	bl	8000c88 <__aeabi_uldivmod>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <HAL_RCC_GetSysClockFreq+0x158>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	0c1b      	lsrs	r3, r3, #16
 8008af4:	f003 0303 	and.w	r3, r3, #3
 8008af8:	3301      	adds	r3, #1
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b06:	60bb      	str	r3, [r7, #8]
      break;
 8008b08:	e002      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008b0c:	60bb      	str	r3, [r7, #8]
      break;
 8008b0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b10:	68bb      	ldr	r3, [r7, #8]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b1a:	bf00      	nop
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	00f42400 	.word	0x00f42400
 8008b24:	00bebc20 	.word	0x00bebc20

08008b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b2c:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	20000034 	.word	0x20000034

08008b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b44:	f7ff fff0 	bl	8008b28 <HAL_RCC_GetHCLKFreq>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	0a9b      	lsrs	r3, r3, #10
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	4a03      	ldr	r2, [pc, #12]	; (8008b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b56:	5cd3      	ldrb	r3, [r2, r3]
 8008b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40023800 	.word	0x40023800
 8008b64:	08010e70 	.word	0x08010e70

08008b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b6c:	f7ff ffdc 	bl	8008b28 <HAL_RCC_GetHCLKFreq>
 8008b70:	4601      	mov	r1, r0
 8008b72:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	0b5b      	lsrs	r3, r3, #13
 8008b78:	f003 0307 	and.w	r3, r3, #7
 8008b7c:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b7e:	5cd3      	ldrb	r3, [r2, r3]
 8008b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40023800 	.word	0x40023800
 8008b8c:	08010e70 	.word	0x08010e70

08008b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e056      	b.n	8008c50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d106      	bne.n	8008bc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7fd fa67 	bl	8006090 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	699b      	ldr	r3, [r3, #24]
 8008bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bfe:	431a      	orrs	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	431a      	orrs	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	ea42 0103 	orr.w	r1, r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	0c1b      	lsrs	r3, r3, #16
 8008c20:	f003 0104 	and.w	r1, r3, #4
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	69da      	ldr	r2, [r3, #28]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	4613      	mov	r3, r2
 8008c66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d101      	bne.n	8008c7a <HAL_SPI_Transmit+0x22>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e11e      	b.n	8008eb8 <HAL_SPI_Transmit+0x260>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c82:	f7fd fdb9 	bl	80067f8 <HAL_GetTick>
 8008c86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008c88:	88fb      	ldrh	r3, [r7, #6]
 8008c8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d002      	beq.n	8008c9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008c98:	2302      	movs	r3, #2
 8008c9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008c9c:	e103      	b.n	8008ea6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <HAL_SPI_Transmit+0x52>
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008cae:	e0fa      	b.n	8008ea6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2203      	movs	r2, #3
 8008cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	88fa      	ldrh	r2, [r7, #6]
 8008cce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf6:	d107      	bne.n	8008d08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d007      	beq.n	8008d26 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d2e:	d14b      	bne.n	8008dc8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <HAL_SPI_Transmit+0xe6>
 8008d38:	8afb      	ldrh	r3, [r7, #22]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d13e      	bne.n	8008dbc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	881a      	ldrh	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	1c9a      	adds	r2, r3, #2
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d62:	e02b      	b.n	8008dbc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d112      	bne.n	8008d98 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d76:	881a      	ldrh	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d82:	1c9a      	adds	r2, r3, #2
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d96:	e011      	b.n	8008dbc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d98:	f7fd fd2e 	bl	80067f8 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d803      	bhi.n	8008db0 <HAL_SPI_Transmit+0x158>
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dae:	d102      	bne.n	8008db6 <HAL_SPI_Transmit+0x15e>
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d102      	bne.n	8008dbc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008dba:	e074      	b.n	8008ea6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1ce      	bne.n	8008d64 <HAL_SPI_Transmit+0x10c>
 8008dc6:	e04c      	b.n	8008e62 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_SPI_Transmit+0x17e>
 8008dd0:	8afb      	ldrh	r3, [r7, #22]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d140      	bne.n	8008e58 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	330c      	adds	r3, #12
 8008de0:	7812      	ldrb	r2, [r2, #0]
 8008de2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	1c5a      	adds	r2, r3, #1
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	3b01      	subs	r3, #1
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008dfc:	e02c      	b.n	8008e58 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d113      	bne.n	8008e34 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	330c      	adds	r3, #12
 8008e16:	7812      	ldrb	r2, [r2, #0]
 8008e18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e32:	e011      	b.n	8008e58 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e34:	f7fd fce0 	bl	80067f8 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	683a      	ldr	r2, [r7, #0]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d803      	bhi.n	8008e4c <HAL_SPI_Transmit+0x1f4>
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d102      	bne.n	8008e52 <HAL_SPI_Transmit+0x1fa>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008e52:	2303      	movs	r3, #3
 8008e54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008e56:	e026      	b.n	8008ea6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1cd      	bne.n	8008dfe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fba4 	bl	80095b4 <SPI_EndRxTxTransaction>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2220      	movs	r2, #32
 8008e76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10a      	bne.n	8008e96 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e80:	2300      	movs	r3, #0
 8008e82:	613b      	str	r3, [r7, #16]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	77fb      	strb	r3, [r7, #31]
 8008ea2:	e000      	b.n	8008ea6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008ea4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3720      	adds	r7, #32
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b088      	sub	sp, #32
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	603b      	str	r3, [r7, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008edc:	d112      	bne.n	8008f04 <HAL_SPI_Receive+0x44>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10e      	bne.n	8008f04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2204      	movs	r2, #4
 8008eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008eee:	88fa      	ldrh	r2, [r7, #6]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	9300      	str	r3, [sp, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	68b9      	ldr	r1, [r7, #8]
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f8e9 	bl	80090d2 <HAL_SPI_TransmitReceive>
 8008f00:	4603      	mov	r3, r0
 8008f02:	e0e2      	b.n	80090ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <HAL_SPI_Receive+0x52>
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e0db      	b.n	80090ca <HAL_SPI_Receive+0x20a>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f1a:	f7fd fc6d 	bl	80067f8 <HAL_GetTick>
 8008f1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d002      	beq.n	8008f32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f30:	e0c2      	b.n	80090b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_SPI_Receive+0x7e>
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d102      	bne.n	8008f44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f42:	e0b9      	b.n	80090b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2204      	movs	r2, #4
 8008f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	88fa      	ldrh	r2, [r7, #6]
 8008f5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	88fa      	ldrh	r2, [r7, #6]
 8008f62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f8a:	d107      	bne.n	8008f9c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f9a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	2b40      	cmp	r3, #64	; 0x40
 8008fa8:	d007      	beq.n	8008fba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fb8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d162      	bne.n	8009088 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008fc2:	e02e      	b.n	8009022 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d115      	bne.n	8008ffe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f103 020c 	add.w	r2, r3, #12
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ffc:	e011      	b.n	8009022 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ffe:	f7fd fbfb 	bl	80067f8 <HAL_GetTick>
 8009002:	4602      	mov	r2, r0
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d803      	bhi.n	8009016 <HAL_SPI_Receive+0x156>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009014:	d102      	bne.n	800901c <HAL_SPI_Receive+0x15c>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009020:	e04a      	b.n	80090b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1cb      	bne.n	8008fc4 <HAL_SPI_Receive+0x104>
 800902c:	e031      	b.n	8009092 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b01      	cmp	r3, #1
 800903a:	d113      	bne.n	8009064 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	b292      	uxth	r2, r2
 8009048:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904e:	1c9a      	adds	r2, r3, #2
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009062:	e011      	b.n	8009088 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009064:	f7fd fbc8 	bl	80067f8 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d803      	bhi.n	800907c <HAL_SPI_Receive+0x1bc>
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907a:	d102      	bne.n	8009082 <HAL_SPI_Receive+0x1c2>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d102      	bne.n	8009088 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009086:	e017      	b.n	80090b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1cd      	bne.n	800902e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	f000 fa27 	bl	80094ea <SPI_EndRxTransaction>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d002      	beq.n	80090a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2220      	movs	r2, #32
 80090a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	75fb      	strb	r3, [r7, #23]
 80090b4:	e000      	b.n	80090b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80090b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b08c      	sub	sp, #48	; 0x30
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090e0:	2301      	movs	r3, #1
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d101      	bne.n	80090f8 <HAL_SPI_TransmitReceive+0x26>
 80090f4:	2302      	movs	r3, #2
 80090f6:	e18a      	b.n	800940e <HAL_SPI_TransmitReceive+0x33c>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009100:	f7fd fb7a 	bl	80067f8 <HAL_GetTick>
 8009104:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800910c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009116:	887b      	ldrh	r3, [r7, #2]
 8009118:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800911a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800911e:	2b01      	cmp	r3, #1
 8009120:	d00f      	beq.n	8009142 <HAL_SPI_TransmitReceive+0x70>
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009128:	d107      	bne.n	800913a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <HAL_SPI_TransmitReceive+0x68>
 8009132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009136:	2b04      	cmp	r3, #4
 8009138:	d003      	beq.n	8009142 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800913a:	2302      	movs	r3, #2
 800913c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009140:	e15b      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_SPI_TransmitReceive+0x82>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_SPI_TransmitReceive+0x82>
 800914e:	887b      	ldrh	r3, [r7, #2]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800915a:	e14e      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b04      	cmp	r3, #4
 8009166:	d003      	beq.n	8009170 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2205      	movs	r2, #5
 800916c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	887a      	ldrh	r2, [r7, #2]
 8009180:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	887a      	ldrh	r2, [r7, #2]
 8009186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	887a      	ldrh	r2, [r7, #2]
 8009192:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	887a      	ldrh	r2, [r7, #2]
 8009198:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b0:	2b40      	cmp	r3, #64	; 0x40
 80091b2:	d007      	beq.n	80091c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091cc:	d178      	bne.n	80092c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d002      	beq.n	80091dc <HAL_SPI_TransmitReceive+0x10a>
 80091d6:	8b7b      	ldrh	r3, [r7, #26]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d166      	bne.n	80092aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e0:	881a      	ldrh	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	1c9a      	adds	r2, r3, #2
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29a      	uxth	r2, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009200:	e053      	b.n	80092aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f003 0302 	and.w	r3, r3, #2
 800920c:	2b02      	cmp	r3, #2
 800920e:	d11b      	bne.n	8009248 <HAL_SPI_TransmitReceive+0x176>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d016      	beq.n	8009248 <HAL_SPI_TransmitReceive+0x176>
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d113      	bne.n	8009248 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	881a      	ldrh	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009230:	1c9a      	adds	r2, r3, #2
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923a:	b29b      	uxth	r3, r3
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b01      	cmp	r3, #1
 8009254:	d119      	bne.n	800928a <HAL_SPI_TransmitReceive+0x1b8>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d014      	beq.n	800928a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	b292      	uxth	r2, r2
 800926c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009272:	1c9a      	adds	r2, r3, #2
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800927c:	b29b      	uxth	r3, r3
 800927e:	3b01      	subs	r3, #1
 8009280:	b29a      	uxth	r2, r3
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009286:	2301      	movs	r3, #1
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800928a:	f7fd fab5 	bl	80067f8 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009296:	429a      	cmp	r2, r3
 8009298:	d807      	bhi.n	80092aa <HAL_SPI_TransmitReceive+0x1d8>
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a0:	d003      	beq.n	80092aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092a8:	e0a7      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1a6      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x130>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1a1      	bne.n	8009202 <HAL_SPI_TransmitReceive+0x130>
 80092be:	e07c      	b.n	80093ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_SPI_TransmitReceive+0x1fc>
 80092c8:	8b7b      	ldrh	r3, [r7, #26]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d16b      	bne.n	80093a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	330c      	adds	r3, #12
 80092d8:	7812      	ldrb	r2, [r2, #0]
 80092da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092f4:	e057      	b.n	80093a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f003 0302 	and.w	r3, r3, #2
 8009300:	2b02      	cmp	r3, #2
 8009302:	d11c      	bne.n	800933e <HAL_SPI_TransmitReceive+0x26c>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009308:	b29b      	uxth	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d017      	beq.n	800933e <HAL_SPI_TransmitReceive+0x26c>
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d114      	bne.n	800933e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	1c5a      	adds	r2, r3, #1
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b01      	cmp	r3, #1
 800934a:	d119      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x2ae>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009350:	b29b      	uxth	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d014      	beq.n	8009380 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	b2d2      	uxtb	r2, r2
 8009362:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009372:	b29b      	uxth	r3, r3
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800937c:	2301      	movs	r3, #1
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009380:	f7fd fa3a 	bl	80067f8 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800938c:	429a      	cmp	r2, r3
 800938e:	d803      	bhi.n	8009398 <HAL_SPI_TransmitReceive+0x2c6>
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009396:	d102      	bne.n	800939e <HAL_SPI_TransmitReceive+0x2cc>
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d103      	bne.n	80093a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80093a4:	e029      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d1a2      	bne.n	80092f6 <HAL_SPI_TransmitReceive+0x224>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d19d      	bne.n	80092f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 f8f8 	bl	80095b4 <SPI_EndRxTxTransaction>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2220      	movs	r2, #32
 80093d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80093d6:	e010      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10b      	bne.n	80093f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	617b      	str	r3, [r7, #20]
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	e000      	b.n	80093fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80093f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800940a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800940e:	4618      	mov	r0, r3
 8009410:	3730      	adds	r7, #48	; 0x30
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	60f8      	str	r0, [r7, #12]
 800941e:	60b9      	str	r1, [r7, #8]
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	4613      	mov	r3, r2
 8009424:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009426:	e04c      	b.n	80094c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800942e:	d048      	beq.n	80094c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009430:	f7fd f9e2 	bl	80067f8 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d902      	bls.n	8009446 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d13d      	bne.n	80094c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009454:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800945e:	d111      	bne.n	8009484 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009468:	d004      	beq.n	8009474 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009472:	d107      	bne.n	8009484 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009482:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800948c:	d10f      	bne.n	80094ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e00f      	b.n	80094e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689a      	ldr	r2, [r3, #8]
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	4013      	ands	r3, r2
 80094cc:	68ba      	ldr	r2, [r7, #8]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	bf0c      	ite	eq
 80094d2:	2301      	moveq	r3, #1
 80094d4:	2300      	movne	r3, #0
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	461a      	mov	r2, r3
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d1a3      	bne.n	8009428 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b086      	sub	sp, #24
 80094ee:	af02      	add	r7, sp, #8
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094fe:	d111      	bne.n	8009524 <SPI_EndRxTransaction+0x3a>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009508:	d004      	beq.n	8009514 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009512:	d107      	bne.n	8009524 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009522:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800952c:	d12a      	bne.n	8009584 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009536:	d012      	beq.n	800955e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2200      	movs	r2, #0
 8009540:	2180      	movs	r1, #128	; 0x80
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f7ff ff67 	bl	8009416 <SPI_WaitFlagStateUntilTimeout>
 8009548:	4603      	mov	r3, r0
 800954a:	2b00      	cmp	r3, #0
 800954c:	d02d      	beq.n	80095aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009552:	f043 0220 	orr.w	r2, r3, #32
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e026      	b.n	80095ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	2200      	movs	r2, #0
 8009566:	2101      	movs	r1, #1
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f7ff ff54 	bl	8009416 <SPI_WaitFlagStateUntilTimeout>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d01a      	beq.n	80095aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e013      	b.n	80095ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2200      	movs	r2, #0
 800958c:	2101      	movs	r1, #1
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff ff41 	bl	8009416 <SPI_WaitFlagStateUntilTimeout>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d007      	beq.n	80095aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959e:	f043 0220 	orr.w	r2, r3, #32
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e000      	b.n	80095ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095c0:	4b1b      	ldr	r3, [pc, #108]	; (8009630 <SPI_EndRxTxTransaction+0x7c>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1b      	ldr	r2, [pc, #108]	; (8009634 <SPI_EndRxTxTransaction+0x80>)
 80095c6:	fba2 2303 	umull	r2, r3, r2, r3
 80095ca:	0d5b      	lsrs	r3, r3, #21
 80095cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095d0:	fb02 f303 	mul.w	r3, r2, r3
 80095d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095de:	d112      	bne.n	8009606 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	2180      	movs	r1, #128	; 0x80
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff ff13 	bl	8009416 <SPI_WaitFlagStateUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d016      	beq.n	8009624 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fa:	f043 0220 	orr.w	r2, r3, #32
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e00f      	b.n	8009626 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00a      	beq.n	8009622 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3b01      	subs	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961c:	2b80      	cmp	r3, #128	; 0x80
 800961e:	d0f2      	beq.n	8009606 <SPI_EndRxTxTransaction+0x52>
 8009620:	e000      	b.n	8009624 <SPI_EndRxTxTransaction+0x70>
        break;
 8009622:	bf00      	nop
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3718      	adds	r7, #24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20000034 	.word	0x20000034
 8009634:	165e9f81 	.word	0x165e9f81

08009638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e01d      	b.n	8009686 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d106      	bne.n	8009664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fc fe12 	bl	8006288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	3304      	adds	r3, #4
 8009674:	4619      	mov	r1, r3
 8009676:	4610      	mov	r0, r2
 8009678:	f000 fb56 	bl	8009d28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3708      	adds	r7, #8
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f042 0201 	orr.w	r2, r2, #1
 80096a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2b06      	cmp	r3, #6
 80096b6:	d007      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e01d      	b.n	8009724 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d106      	bne.n	8009702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7fc fd0f 	bl	8006120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f000 fb07 	bl	8009d28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2201      	movs	r2, #1
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fd42 	bl	800a1c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <HAL_TIM_PWM_Start+0x74>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_TIM_PWM_Start+0x2c>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a14      	ldr	r2, [pc, #80]	; (80097a4 <HAL_TIM_PWM_Start+0x78>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d101      	bne.n	800975c <HAL_TIM_PWM_Start+0x30>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <HAL_TIM_PWM_Start+0x32>
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d007      	beq.n	8009772 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009770:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b06      	cmp	r3, #6
 8009782:	d007      	beq.n	8009794 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f042 0201 	orr.w	r2, r2, #1
 8009792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40010000 	.word	0x40010000
 80097a4:	40010400 	.word	0x40010400

080097a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e083      	b.n	80098c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fc fcdd 	bl	8006190 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	3304      	adds	r3, #4
 80097fa:	4619      	mov	r1, r3
 80097fc:	4610      	mov	r0, r2
 80097fe:	f000 fa93 	bl	8009d28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	4313      	orrs	r3, r2
 8009822:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800982a:	f023 0303 	bic.w	r3, r3, #3
 800982e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	4313      	orrs	r3, r2
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	4313      	orrs	r3, r2
 8009840:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009848:	f023 030c 	bic.w	r3, r3, #12
 800984c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	4313      	orrs	r3, r2
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	011a      	lsls	r2, r3, #4
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	031b      	lsls	r3, r3, #12
 8009878:	4313      	orrs	r3, r2
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009886:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800988e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	4313      	orrs	r3, r2
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	4313      	orrs	r3, r2
 80098a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	697a      	ldr	r2, [r7, #20]
 80098a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	693a      	ldr	r2, [r7, #16]
 80098b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <HAL_TIM_Encoder_Start+0x16>
 80098dc:	2b04      	cmp	r3, #4
 80098de:	d008      	beq.n	80098f2 <HAL_TIM_Encoder_Start+0x26>
 80098e0:	e00f      	b.n	8009902 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2201      	movs	r2, #1
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fc6c 	bl	800a1c8 <TIM_CCxChannelCmd>
      break;
 80098f0:	e016      	b.n	8009920 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	2104      	movs	r1, #4
 80098fa:	4618      	mov	r0, r3
 80098fc:	f000 fc64 	bl	800a1c8 <TIM_CCxChannelCmd>
      break;
 8009900:	e00e      	b.n	8009920 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	2100      	movs	r1, #0
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fc5c 	bl	800a1c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2201      	movs	r2, #1
 8009916:	2104      	movs	r1, #4
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fc55 	bl	800a1c8 <TIM_CCxChannelCmd>
      break;
 800991e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3708      	adds	r7, #8
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b082      	sub	sp, #8
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b02      	cmp	r3, #2
 800994e:	d122      	bne.n	8009996 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b02      	cmp	r3, #2
 800995c:	d11b      	bne.n	8009996 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f06f 0202 	mvn.w	r2, #2
 8009966:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 f9b5 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 8009982:	e005      	b.n	8009990 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 f9a7 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f9b8 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f003 0304 	and.w	r3, r3, #4
 80099a0:	2b04      	cmp	r3, #4
 80099a2:	d122      	bne.n	80099ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f003 0304 	and.w	r3, r3, #4
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	d11b      	bne.n	80099ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f06f 0204 	mvn.w	r2, #4
 80099ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2202      	movs	r2, #2
 80099c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f98b 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 80099d6:	e005      	b.n	80099e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f97d 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f98e 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b08      	cmp	r3, #8
 80099f6:	d122      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f003 0308 	and.w	r3, r3, #8
 8009a02:	2b08      	cmp	r3, #8
 8009a04:	d11b      	bne.n	8009a3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f06f 0208 	mvn.w	r2, #8
 8009a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2204      	movs	r2, #4
 8009a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	69db      	ldr	r3, [r3, #28]
 8009a1c:	f003 0303 	and.w	r3, r3, #3
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d003      	beq.n	8009a2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f961 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 8009a2a:	e005      	b.n	8009a38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 f953 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f964 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	f003 0310 	and.w	r3, r3, #16
 8009a48:	2b10      	cmp	r3, #16
 8009a4a:	d122      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0310 	and.w	r3, r3, #16
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	d11b      	bne.n	8009a92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f06f 0210 	mvn.w	r2, #16
 8009a62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2208      	movs	r2, #8
 8009a68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	69db      	ldr	r3, [r3, #28]
 8009a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f937 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 8009a7e:	e005      	b.n	8009a8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f929 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f93a 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d10e      	bne.n	8009abe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d107      	bne.n	8009abe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f06f 0201 	mvn.w	r2, #1
 8009ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7fa f96d 	bl	8003d98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac8:	2b80      	cmp	r3, #128	; 0x80
 8009aca:	d10e      	bne.n	8009aea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad6:	2b80      	cmp	r3, #128	; 0x80
 8009ad8:	d107      	bne.n	8009aea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc6d 	bl	800a3c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009af4:	2b40      	cmp	r3, #64	; 0x40
 8009af6:	d10e      	bne.n	8009b16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d107      	bne.n	8009b16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 f8ff 	bl	8009d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	d10e      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f003 0320 	and.w	r3, r3, #32
 8009b2e:	2b20      	cmp	r3, #32
 8009b30:	d107      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f06f 0220 	mvn.w	r2, #32
 8009b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fc37 	bl	800a3b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b42:	bf00      	nop
 8009b44:	3708      	adds	r7, #8
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d101      	bne.n	8009b66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009b62:	2302      	movs	r3, #2
 8009b64:	e0b4      	b.n	8009cd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2202      	movs	r2, #2
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b0c      	cmp	r3, #12
 8009b7a:	f200 809f 	bhi.w	8009cbc <HAL_TIM_PWM_ConfigChannel+0x170>
 8009b7e:	a201      	add	r2, pc, #4	; (adr r2, 8009b84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b84:	08009bb9 	.word	0x08009bb9
 8009b88:	08009cbd 	.word	0x08009cbd
 8009b8c:	08009cbd 	.word	0x08009cbd
 8009b90:	08009cbd 	.word	0x08009cbd
 8009b94:	08009bf9 	.word	0x08009bf9
 8009b98:	08009cbd 	.word	0x08009cbd
 8009b9c:	08009cbd 	.word	0x08009cbd
 8009ba0:	08009cbd 	.word	0x08009cbd
 8009ba4:	08009c3b 	.word	0x08009c3b
 8009ba8:	08009cbd 	.word	0x08009cbd
 8009bac:	08009cbd 	.word	0x08009cbd
 8009bb0:	08009cbd 	.word	0x08009cbd
 8009bb4:	08009c7b 	.word	0x08009c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f952 	bl	8009e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0208 	orr.w	r2, r2, #8
 8009bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	699a      	ldr	r2, [r3, #24]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0204 	bic.w	r2, r2, #4
 8009be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	6999      	ldr	r1, [r3, #24]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	619a      	str	r2, [r3, #24]
      break;
 8009bf6:	e062      	b.n	8009cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68b9      	ldr	r1, [r7, #8]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 f9a2 	bl	8009f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699a      	ldr	r2, [r3, #24]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	699a      	ldr	r2, [r3, #24]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6999      	ldr	r1, [r3, #24]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	021a      	lsls	r2, r3, #8
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	619a      	str	r2, [r3, #24]
      break;
 8009c38:	e041      	b.n	8009cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68b9      	ldr	r1, [r7, #8]
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 f9f7 	bl	800a034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69da      	ldr	r2, [r3, #28]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f042 0208 	orr.w	r2, r2, #8
 8009c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	69da      	ldr	r2, [r3, #28]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 0204 	bic.w	r2, r2, #4
 8009c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69d9      	ldr	r1, [r3, #28]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	691a      	ldr	r2, [r3, #16]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	430a      	orrs	r2, r1
 8009c76:	61da      	str	r2, [r3, #28]
      break;
 8009c78:	e021      	b.n	8009cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fa4b 	bl	800a11c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69da      	ldr	r2, [r3, #28]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69da      	ldr	r2, [r3, #28]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	69d9      	ldr	r1, [r3, #28]
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	021a      	lsls	r2, r3, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	61da      	str	r2, [r3, #28]
      break;
 8009cba:	e000      	b.n	8009cbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009cbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a40      	ldr	r2, [pc, #256]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d013      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d46:	d00f      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a3d      	ldr	r2, [pc, #244]	; (8009e40 <TIM_Base_SetConfig+0x118>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a3c      	ldr	r2, [pc, #240]	; (8009e44 <TIM_Base_SetConfig+0x11c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d007      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a3b      	ldr	r2, [pc, #236]	; (8009e48 <TIM_Base_SetConfig+0x120>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a3a      	ldr	r2, [pc, #232]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d108      	bne.n	8009d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d02b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d88:	d027      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a2c      	ldr	r2, [pc, #176]	; (8009e40 <TIM_Base_SetConfig+0x118>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d023      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2b      	ldr	r2, [pc, #172]	; (8009e44 <TIM_Base_SetConfig+0x11c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d01f      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2a      	ldr	r2, [pc, #168]	; (8009e48 <TIM_Base_SetConfig+0x120>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d01b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a29      	ldr	r2, [pc, #164]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d017      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a28      	ldr	r2, [pc, #160]	; (8009e50 <TIM_Base_SetConfig+0x128>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a27      	ldr	r2, [pc, #156]	; (8009e54 <TIM_Base_SetConfig+0x12c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00f      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a26      	ldr	r2, [pc, #152]	; (8009e58 <TIM_Base_SetConfig+0x130>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a25      	ldr	r2, [pc, #148]	; (8009e5c <TIM_Base_SetConfig+0x134>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d007      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a24      	ldr	r2, [pc, #144]	; (8009e60 <TIM_Base_SetConfig+0x138>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d003      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a23      	ldr	r2, [pc, #140]	; (8009e64 <TIM_Base_SetConfig+0x13c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d108      	bne.n	8009dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d003      	beq.n	8009e20 <TIM_Base_SetConfig+0xf8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d103      	bne.n	8009e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	615a      	str	r2, [r3, #20]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40000400 	.word	0x40000400
 8009e44:	40000800 	.word	0x40000800
 8009e48:	40000c00 	.word	0x40000c00
 8009e4c:	40010400 	.word	0x40010400
 8009e50:	40014000 	.word	0x40014000
 8009e54:	40014400 	.word	0x40014400
 8009e58:	40014800 	.word	0x40014800
 8009e5c:	40001800 	.word	0x40001800
 8009e60:	40001c00 	.word	0x40001c00
 8009e64:	40002000 	.word	0x40002000

08009e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	f023 0201 	bic.w	r2, r3, #1
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 0303 	bic.w	r3, r3, #3
 8009e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f023 0302 	bic.w	r3, r3, #2
 8009eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a20      	ldr	r2, [pc, #128]	; (8009f40 <TIM_OC1_SetConfig+0xd8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_OC1_SetConfig+0x64>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a1f      	ldr	r2, [pc, #124]	; (8009f44 <TIM_OC1_SetConfig+0xdc>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10c      	bne.n	8009ee6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f023 0308 	bic.w	r3, r3, #8
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	697a      	ldr	r2, [r7, #20]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	f023 0304 	bic.w	r3, r3, #4
 8009ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <TIM_OC1_SetConfig+0xd8>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d003      	beq.n	8009ef6 <TIM_OC1_SetConfig+0x8e>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a14      	ldr	r2, [pc, #80]	; (8009f44 <TIM_OC1_SetConfig+0xdc>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d111      	bne.n	8009f1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	621a      	str	r2, [r3, #32]
}
 8009f34:	bf00      	nop
 8009f36:	371c      	adds	r7, #28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	40010000 	.word	0x40010000
 8009f44:	40010400 	.word	0x40010400

08009f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	f023 0210 	bic.w	r2, r3, #16
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	699b      	ldr	r3, [r3, #24]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f023 0320 	bic.w	r3, r3, #32
 8009f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a22      	ldr	r2, [pc, #136]	; (800a02c <TIM_OC2_SetConfig+0xe4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <TIM_OC2_SetConfig+0x68>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a21      	ldr	r2, [pc, #132]	; (800a030 <TIM_OC2_SetConfig+0xe8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10d      	bne.n	8009fcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	4a17      	ldr	r2, [pc, #92]	; (800a02c <TIM_OC2_SetConfig+0xe4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d003      	beq.n	8009fdc <TIM_OC2_SetConfig+0x94>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a16      	ldr	r2, [pc, #88]	; (800a030 <TIM_OC2_SetConfig+0xe8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d113      	bne.n	800a004 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	693a      	ldr	r2, [r7, #16]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	699b      	ldr	r3, [r3, #24]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	685a      	ldr	r2, [r3, #4]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	697a      	ldr	r2, [r7, #20]
 800a01c:	621a      	str	r2, [r3, #32]
}
 800a01e:	bf00      	nop
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	40010000 	.word	0x40010000
 800a030:	40010400 	.word	0x40010400

0800a034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0303 	bic.w	r3, r3, #3
 800a06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a07c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a21      	ldr	r2, [pc, #132]	; (800a114 <TIM_OC3_SetConfig+0xe0>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d003      	beq.n	800a09a <TIM_OC3_SetConfig+0x66>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a20      	ldr	r2, [pc, #128]	; (800a118 <TIM_OC3_SetConfig+0xe4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d10d      	bne.n	800a0b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a0a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	697a      	ldr	r2, [r7, #20]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a0b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4a16      	ldr	r2, [pc, #88]	; (800a114 <TIM_OC3_SetConfig+0xe0>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d003      	beq.n	800a0c6 <TIM_OC3_SetConfig+0x92>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a15      	ldr	r2, [pc, #84]	; (800a118 <TIM_OC3_SetConfig+0xe4>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d113      	bne.n	800a0ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	011b      	lsls	r3, r3, #4
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	011b      	lsls	r3, r3, #4
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	621a      	str	r2, [r3, #32]
}
 800a108:	bf00      	nop
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	40010000 	.word	0x40010000
 800a118:	40010400 	.word	0x40010400

0800a11c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69db      	ldr	r3, [r3, #28]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a14a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	031b      	lsls	r3, r3, #12
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a12      	ldr	r2, [pc, #72]	; (800a1c0 <TIM_OC4_SetConfig+0xa4>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_OC4_SetConfig+0x68>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a11      	ldr	r2, [pc, #68]	; (800a1c4 <TIM_OC4_SetConfig+0xa8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d109      	bne.n	800a198 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a18a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	019b      	lsls	r3, r3, #6
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	621a      	str	r2, [r3, #32]
}
 800a1b2:	bf00      	nop
 800a1b4:	371c      	adds	r7, #28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	40010000 	.word	0x40010000
 800a1c4:	40010400 	.word	0x40010400

0800a1c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	f003 031f 	and.w	r3, r3, #31
 800a1da:	2201      	movs	r2, #1
 800a1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6a1a      	ldr	r2, [r3, #32]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	43db      	mvns	r3, r3
 800a1ea:	401a      	ands	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6a1a      	ldr	r2, [r3, #32]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	f003 031f 	and.w	r3, r3, #31
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a200:	431a      	orrs	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	621a      	str	r2, [r3, #32]
}
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr
	...

0800a214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d101      	bne.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a228:	2302      	movs	r3, #2
 800a22a:	e05a      	b.n	800a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a21      	ldr	r2, [pc, #132]	; (800a2f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d022      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a278:	d01d      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a1d      	ldr	r2, [pc, #116]	; (800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d018      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a1b      	ldr	r2, [pc, #108]	; (800a2f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d013      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a1a      	ldr	r2, [pc, #104]	; (800a2fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d00e      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a18      	ldr	r2, [pc, #96]	; (800a300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d009      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a17      	ldr	r2, [pc, #92]	; (800a304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d004      	beq.n	800a2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a15      	ldr	r2, [pc, #84]	; (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d10c      	bne.n	800a2d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	40010000 	.word	0x40010000
 800a2f4:	40000400 	.word	0x40000400
 800a2f8:	40000800 	.word	0x40000800
 800a2fc:	40000c00 	.word	0x40000c00
 800a300:	40010400 	.word	0x40010400
 800a304:	40014000 	.word	0x40014000
 800a308:	40001800 	.word	0x40001800

0800a30c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a320:	2b01      	cmp	r3, #1
 800a322:	d101      	bne.n	800a328 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a324:	2302      	movs	r3, #2
 800a326:	e03d      	b.n	800a3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	4313      	orrs	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	4313      	orrs	r3, r2
 800a390:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d101      	bne.n	800a3ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e03f      	b.n	800a46a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d106      	bne.n	800a404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f7fb ffec 	bl	80063dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2224      	movs	r2, #36	; 0x24
 800a408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a41a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f90b 	bl	800a638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691a      	ldr	r2, [r3, #16]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	695a      	ldr	r2, [r3, #20]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68da      	ldr	r2, [r3, #12]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2220      	movs	r2, #32
 800a464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b088      	sub	sp, #32
 800a476:	af02      	add	r7, sp, #8
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	603b      	str	r3, [r7, #0]
 800a47e:	4613      	mov	r3, r2
 800a480:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a482:	2300      	movs	r3, #0
 800a484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	2b20      	cmp	r3, #32
 800a490:	f040 8083 	bne.w	800a59a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <HAL_UART_Transmit+0x2e>
 800a49a:	88fb      	ldrh	r3, [r7, #6]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e07b      	b.n	800a59c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d101      	bne.n	800a4b2 <HAL_UART_Transmit+0x40>
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	e074      	b.n	800a59c <HAL_UART_Transmit+0x12a>
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2221      	movs	r2, #33	; 0x21
 800a4c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a4c8:	f7fc f996 	bl	80067f8 <HAL_GetTick>
 800a4cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	88fa      	ldrh	r2, [r7, #6]
 800a4d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	88fa      	ldrh	r2, [r7, #6]
 800a4d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a4e2:	e042      	b.n	800a56a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4fa:	d122      	bne.n	800a542 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2200      	movs	r2, #0
 800a504:	2180      	movs	r1, #128	; 0x80
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f000 f84c 	bl	800a5a4 <UART_WaitOnFlagUntilTimeout>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e042      	b.n	800a59c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a528:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d103      	bne.n	800a53a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	3302      	adds	r3, #2
 800a536:	60bb      	str	r3, [r7, #8]
 800a538:	e017      	b.n	800a56a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	3301      	adds	r3, #1
 800a53e:	60bb      	str	r3, [r7, #8]
 800a540:	e013      	b.n	800a56a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2200      	movs	r2, #0
 800a54a:	2180      	movs	r1, #128	; 0x80
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f829 	bl	800a5a4 <UART_WaitOnFlagUntilTimeout>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e01f      	b.n	800a59c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	60ba      	str	r2, [r7, #8]
 800a562:	781a      	ldrb	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1b7      	bne.n	800a4e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2200      	movs	r2, #0
 800a57c:	2140      	movs	r1, #64	; 0x40
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 f810 	bl	800a5a4 <UART_WaitOnFlagUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a58a:	2303      	movs	r3, #3
 800a58c:	e006      	b.n	800a59c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2220      	movs	r2, #32
 800a592:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	e000      	b.n	800a59c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a59a:	2302      	movs	r3, #2
  }
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	603b      	str	r3, [r7, #0]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5b4:	e02c      	b.n	800a610 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d028      	beq.n	800a610 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d007      	beq.n	800a5d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5c4:	f7fc f918 	bl	80067f8 <HAL_GetTick>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d21d      	bcs.n	800a610 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68da      	ldr	r2, [r3, #12]
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f022 0201 	bic.w	r2, r2, #1
 800a5f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e00f      	b.n	800a630 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	4013      	ands	r3, r2
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	bf0c      	ite	eq
 800a620:	2301      	moveq	r3, #1
 800a622:	2300      	movne	r3, #0
 800a624:	b2db      	uxtb	r3, r3
 800a626:	461a      	mov	r2, r3
 800a628:	79fb      	ldrb	r3, [r7, #7]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d0c3      	beq.n	800a5b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	431a      	orrs	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a67a:	f023 030c 	bic.w	r3, r3, #12
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	430b      	orrs	r3, r1
 800a686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695b      	ldr	r3, [r3, #20]
 800a68e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	699a      	ldr	r2, [r3, #24]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	69db      	ldr	r3, [r3, #28]
 800a6a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6a6:	f040 818b 	bne.w	800a9c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4ac1      	ldr	r2, [pc, #772]	; (800a9b4 <UART_SetConfig+0x37c>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d005      	beq.n	800a6c0 <UART_SetConfig+0x88>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4abf      	ldr	r2, [pc, #764]	; (800a9b8 <UART_SetConfig+0x380>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	f040 80bd 	bne.w	800a83a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a6c0:	f7fe fa52 	bl	8008b68 <HAL_RCC_GetPCLK2Freq>
 800a6c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	461d      	mov	r5, r3
 800a6ca:	f04f 0600 	mov.w	r6, #0
 800a6ce:	46a8      	mov	r8, r5
 800a6d0:	46b1      	mov	r9, r6
 800a6d2:	eb18 0308 	adds.w	r3, r8, r8
 800a6d6:	eb49 0409 	adc.w	r4, r9, r9
 800a6da:	4698      	mov	r8, r3
 800a6dc:	46a1      	mov	r9, r4
 800a6de:	eb18 0805 	adds.w	r8, r8, r5
 800a6e2:	eb49 0906 	adc.w	r9, r9, r6
 800a6e6:	f04f 0100 	mov.w	r1, #0
 800a6ea:	f04f 0200 	mov.w	r2, #0
 800a6ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a6f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a6f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a6fa:	4688      	mov	r8, r1
 800a6fc:	4691      	mov	r9, r2
 800a6fe:	eb18 0005 	adds.w	r0, r8, r5
 800a702:	eb49 0106 	adc.w	r1, r9, r6
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	461d      	mov	r5, r3
 800a70c:	f04f 0600 	mov.w	r6, #0
 800a710:	196b      	adds	r3, r5, r5
 800a712:	eb46 0406 	adc.w	r4, r6, r6
 800a716:	461a      	mov	r2, r3
 800a718:	4623      	mov	r3, r4
 800a71a:	f7f6 fab5 	bl	8000c88 <__aeabi_uldivmod>
 800a71e:	4603      	mov	r3, r0
 800a720:	460c      	mov	r4, r1
 800a722:	461a      	mov	r2, r3
 800a724:	4ba5      	ldr	r3, [pc, #660]	; (800a9bc <UART_SetConfig+0x384>)
 800a726:	fba3 2302 	umull	r2, r3, r3, r2
 800a72a:	095b      	lsrs	r3, r3, #5
 800a72c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	461d      	mov	r5, r3
 800a734:	f04f 0600 	mov.w	r6, #0
 800a738:	46a9      	mov	r9, r5
 800a73a:	46b2      	mov	sl, r6
 800a73c:	eb19 0309 	adds.w	r3, r9, r9
 800a740:	eb4a 040a 	adc.w	r4, sl, sl
 800a744:	4699      	mov	r9, r3
 800a746:	46a2      	mov	sl, r4
 800a748:	eb19 0905 	adds.w	r9, r9, r5
 800a74c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a750:	f04f 0100 	mov.w	r1, #0
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a75c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a764:	4689      	mov	r9, r1
 800a766:	4692      	mov	sl, r2
 800a768:	eb19 0005 	adds.w	r0, r9, r5
 800a76c:	eb4a 0106 	adc.w	r1, sl, r6
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	461d      	mov	r5, r3
 800a776:	f04f 0600 	mov.w	r6, #0
 800a77a:	196b      	adds	r3, r5, r5
 800a77c:	eb46 0406 	adc.w	r4, r6, r6
 800a780:	461a      	mov	r2, r3
 800a782:	4623      	mov	r3, r4
 800a784:	f7f6 fa80 	bl	8000c88 <__aeabi_uldivmod>
 800a788:	4603      	mov	r3, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	461a      	mov	r2, r3
 800a78e:	4b8b      	ldr	r3, [pc, #556]	; (800a9bc <UART_SetConfig+0x384>)
 800a790:	fba3 1302 	umull	r1, r3, r3, r2
 800a794:	095b      	lsrs	r3, r3, #5
 800a796:	2164      	movs	r1, #100	; 0x64
 800a798:	fb01 f303 	mul.w	r3, r1, r3
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	3332      	adds	r3, #50	; 0x32
 800a7a2:	4a86      	ldr	r2, [pc, #536]	; (800a9bc <UART_SetConfig+0x384>)
 800a7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a8:	095b      	lsrs	r3, r3, #5
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a7b0:	4498      	add	r8, r3
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	461d      	mov	r5, r3
 800a7b6:	f04f 0600 	mov.w	r6, #0
 800a7ba:	46a9      	mov	r9, r5
 800a7bc:	46b2      	mov	sl, r6
 800a7be:	eb19 0309 	adds.w	r3, r9, r9
 800a7c2:	eb4a 040a 	adc.w	r4, sl, sl
 800a7c6:	4699      	mov	r9, r3
 800a7c8:	46a2      	mov	sl, r4
 800a7ca:	eb19 0905 	adds.w	r9, r9, r5
 800a7ce:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7d2:	f04f 0100 	mov.w	r1, #0
 800a7d6:	f04f 0200 	mov.w	r2, #0
 800a7da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7e6:	4689      	mov	r9, r1
 800a7e8:	4692      	mov	sl, r2
 800a7ea:	eb19 0005 	adds.w	r0, r9, r5
 800a7ee:	eb4a 0106 	adc.w	r1, sl, r6
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	461d      	mov	r5, r3
 800a7f8:	f04f 0600 	mov.w	r6, #0
 800a7fc:	196b      	adds	r3, r5, r5
 800a7fe:	eb46 0406 	adc.w	r4, r6, r6
 800a802:	461a      	mov	r2, r3
 800a804:	4623      	mov	r3, r4
 800a806:	f7f6 fa3f 	bl	8000c88 <__aeabi_uldivmod>
 800a80a:	4603      	mov	r3, r0
 800a80c:	460c      	mov	r4, r1
 800a80e:	461a      	mov	r2, r3
 800a810:	4b6a      	ldr	r3, [pc, #424]	; (800a9bc <UART_SetConfig+0x384>)
 800a812:	fba3 1302 	umull	r1, r3, r3, r2
 800a816:	095b      	lsrs	r3, r3, #5
 800a818:	2164      	movs	r1, #100	; 0x64
 800a81a:	fb01 f303 	mul.w	r3, r1, r3
 800a81e:	1ad3      	subs	r3, r2, r3
 800a820:	00db      	lsls	r3, r3, #3
 800a822:	3332      	adds	r3, #50	; 0x32
 800a824:	4a65      	ldr	r2, [pc, #404]	; (800a9bc <UART_SetConfig+0x384>)
 800a826:	fba2 2303 	umull	r2, r3, r2, r3
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f003 0207 	and.w	r2, r3, #7
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4442      	add	r2, r8
 800a836:	609a      	str	r2, [r3, #8]
 800a838:	e26f      	b.n	800ad1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a83a:	f7fe f981 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 800a83e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	461d      	mov	r5, r3
 800a844:	f04f 0600 	mov.w	r6, #0
 800a848:	46a8      	mov	r8, r5
 800a84a:	46b1      	mov	r9, r6
 800a84c:	eb18 0308 	adds.w	r3, r8, r8
 800a850:	eb49 0409 	adc.w	r4, r9, r9
 800a854:	4698      	mov	r8, r3
 800a856:	46a1      	mov	r9, r4
 800a858:	eb18 0805 	adds.w	r8, r8, r5
 800a85c:	eb49 0906 	adc.w	r9, r9, r6
 800a860:	f04f 0100 	mov.w	r1, #0
 800a864:	f04f 0200 	mov.w	r2, #0
 800a868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a86c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a874:	4688      	mov	r8, r1
 800a876:	4691      	mov	r9, r2
 800a878:	eb18 0005 	adds.w	r0, r8, r5
 800a87c:	eb49 0106 	adc.w	r1, r9, r6
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	461d      	mov	r5, r3
 800a886:	f04f 0600 	mov.w	r6, #0
 800a88a:	196b      	adds	r3, r5, r5
 800a88c:	eb46 0406 	adc.w	r4, r6, r6
 800a890:	461a      	mov	r2, r3
 800a892:	4623      	mov	r3, r4
 800a894:	f7f6 f9f8 	bl	8000c88 <__aeabi_uldivmod>
 800a898:	4603      	mov	r3, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b47      	ldr	r3, [pc, #284]	; (800a9bc <UART_SetConfig+0x384>)
 800a8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a8a4:	095b      	lsrs	r3, r3, #5
 800a8a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	461d      	mov	r5, r3
 800a8ae:	f04f 0600 	mov.w	r6, #0
 800a8b2:	46a9      	mov	r9, r5
 800a8b4:	46b2      	mov	sl, r6
 800a8b6:	eb19 0309 	adds.w	r3, r9, r9
 800a8ba:	eb4a 040a 	adc.w	r4, sl, sl
 800a8be:	4699      	mov	r9, r3
 800a8c0:	46a2      	mov	sl, r4
 800a8c2:	eb19 0905 	adds.w	r9, r9, r5
 800a8c6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8ca:	f04f 0100 	mov.w	r1, #0
 800a8ce:	f04f 0200 	mov.w	r2, #0
 800a8d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8de:	4689      	mov	r9, r1
 800a8e0:	4692      	mov	sl, r2
 800a8e2:	eb19 0005 	adds.w	r0, r9, r5
 800a8e6:	eb4a 0106 	adc.w	r1, sl, r6
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	461d      	mov	r5, r3
 800a8f0:	f04f 0600 	mov.w	r6, #0
 800a8f4:	196b      	adds	r3, r5, r5
 800a8f6:	eb46 0406 	adc.w	r4, r6, r6
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	f7f6 f9c3 	bl	8000c88 <__aeabi_uldivmod>
 800a902:	4603      	mov	r3, r0
 800a904:	460c      	mov	r4, r1
 800a906:	461a      	mov	r2, r3
 800a908:	4b2c      	ldr	r3, [pc, #176]	; (800a9bc <UART_SetConfig+0x384>)
 800a90a:	fba3 1302 	umull	r1, r3, r3, r2
 800a90e:	095b      	lsrs	r3, r3, #5
 800a910:	2164      	movs	r1, #100	; 0x64
 800a912:	fb01 f303 	mul.w	r3, r1, r3
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	3332      	adds	r3, #50	; 0x32
 800a91c:	4a27      	ldr	r2, [pc, #156]	; (800a9bc <UART_SetConfig+0x384>)
 800a91e:	fba2 2303 	umull	r2, r3, r2, r3
 800a922:	095b      	lsrs	r3, r3, #5
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a92a:	4498      	add	r8, r3
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	461d      	mov	r5, r3
 800a930:	f04f 0600 	mov.w	r6, #0
 800a934:	46a9      	mov	r9, r5
 800a936:	46b2      	mov	sl, r6
 800a938:	eb19 0309 	adds.w	r3, r9, r9
 800a93c:	eb4a 040a 	adc.w	r4, sl, sl
 800a940:	4699      	mov	r9, r3
 800a942:	46a2      	mov	sl, r4
 800a944:	eb19 0905 	adds.w	r9, r9, r5
 800a948:	eb4a 0a06 	adc.w	sl, sl, r6
 800a94c:	f04f 0100 	mov.w	r1, #0
 800a950:	f04f 0200 	mov.w	r2, #0
 800a954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a95c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a960:	4689      	mov	r9, r1
 800a962:	4692      	mov	sl, r2
 800a964:	eb19 0005 	adds.w	r0, r9, r5
 800a968:	eb4a 0106 	adc.w	r1, sl, r6
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	461d      	mov	r5, r3
 800a972:	f04f 0600 	mov.w	r6, #0
 800a976:	196b      	adds	r3, r5, r5
 800a978:	eb46 0406 	adc.w	r4, r6, r6
 800a97c:	461a      	mov	r2, r3
 800a97e:	4623      	mov	r3, r4
 800a980:	f7f6 f982 	bl	8000c88 <__aeabi_uldivmod>
 800a984:	4603      	mov	r3, r0
 800a986:	460c      	mov	r4, r1
 800a988:	461a      	mov	r2, r3
 800a98a:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <UART_SetConfig+0x384>)
 800a98c:	fba3 1302 	umull	r1, r3, r3, r2
 800a990:	095b      	lsrs	r3, r3, #5
 800a992:	2164      	movs	r1, #100	; 0x64
 800a994:	fb01 f303 	mul.w	r3, r1, r3
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	00db      	lsls	r3, r3, #3
 800a99c:	3332      	adds	r3, #50	; 0x32
 800a99e:	4a07      	ldr	r2, [pc, #28]	; (800a9bc <UART_SetConfig+0x384>)
 800a9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a4:	095b      	lsrs	r3, r3, #5
 800a9a6:	f003 0207 	and.w	r2, r3, #7
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4442      	add	r2, r8
 800a9b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a9b2:	e1b2      	b.n	800ad1a <UART_SetConfig+0x6e2>
 800a9b4:	40011000 	.word	0x40011000
 800a9b8:	40011400 	.word	0x40011400
 800a9bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4ad7      	ldr	r2, [pc, #860]	; (800ad24 <UART_SetConfig+0x6ec>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d005      	beq.n	800a9d6 <UART_SetConfig+0x39e>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4ad6      	ldr	r2, [pc, #856]	; (800ad28 <UART_SetConfig+0x6f0>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	f040 80d1 	bne.w	800ab78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a9d6:	f7fe f8c7 	bl	8008b68 <HAL_RCC_GetPCLK2Freq>
 800a9da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	469a      	mov	sl, r3
 800a9e0:	f04f 0b00 	mov.w	fp, #0
 800a9e4:	46d0      	mov	r8, sl
 800a9e6:	46d9      	mov	r9, fp
 800a9e8:	eb18 0308 	adds.w	r3, r8, r8
 800a9ec:	eb49 0409 	adc.w	r4, r9, r9
 800a9f0:	4698      	mov	r8, r3
 800a9f2:	46a1      	mov	r9, r4
 800a9f4:	eb18 080a 	adds.w	r8, r8, sl
 800a9f8:	eb49 090b 	adc.w	r9, r9, fp
 800a9fc:	f04f 0100 	mov.w	r1, #0
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa10:	4688      	mov	r8, r1
 800aa12:	4691      	mov	r9, r2
 800aa14:	eb1a 0508 	adds.w	r5, sl, r8
 800aa18:	eb4b 0609 	adc.w	r6, fp, r9
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4619      	mov	r1, r3
 800aa22:	f04f 0200 	mov.w	r2, #0
 800aa26:	f04f 0300 	mov.w	r3, #0
 800aa2a:	f04f 0400 	mov.w	r4, #0
 800aa2e:	0094      	lsls	r4, r2, #2
 800aa30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa34:	008b      	lsls	r3, r1, #2
 800aa36:	461a      	mov	r2, r3
 800aa38:	4623      	mov	r3, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	4631      	mov	r1, r6
 800aa3e:	f7f6 f923 	bl	8000c88 <__aeabi_uldivmod>
 800aa42:	4603      	mov	r3, r0
 800aa44:	460c      	mov	r4, r1
 800aa46:	461a      	mov	r2, r3
 800aa48:	4bb8      	ldr	r3, [pc, #736]	; (800ad2c <UART_SetConfig+0x6f4>)
 800aa4a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa4e:	095b      	lsrs	r3, r3, #5
 800aa50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	469b      	mov	fp, r3
 800aa58:	f04f 0c00 	mov.w	ip, #0
 800aa5c:	46d9      	mov	r9, fp
 800aa5e:	46e2      	mov	sl, ip
 800aa60:	eb19 0309 	adds.w	r3, r9, r9
 800aa64:	eb4a 040a 	adc.w	r4, sl, sl
 800aa68:	4699      	mov	r9, r3
 800aa6a:	46a2      	mov	sl, r4
 800aa6c:	eb19 090b 	adds.w	r9, r9, fp
 800aa70:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa74:	f04f 0100 	mov.w	r1, #0
 800aa78:	f04f 0200 	mov.w	r2, #0
 800aa7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa88:	4689      	mov	r9, r1
 800aa8a:	4692      	mov	sl, r2
 800aa8c:	eb1b 0509 	adds.w	r5, fp, r9
 800aa90:	eb4c 060a 	adc.w	r6, ip, sl
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	f04f 0400 	mov.w	r4, #0
 800aaa6:	0094      	lsls	r4, r2, #2
 800aaa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aaac:	008b      	lsls	r3, r1, #2
 800aaae:	461a      	mov	r2, r3
 800aab0:	4623      	mov	r3, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	4631      	mov	r1, r6
 800aab6:	f7f6 f8e7 	bl	8000c88 <__aeabi_uldivmod>
 800aaba:	4603      	mov	r3, r0
 800aabc:	460c      	mov	r4, r1
 800aabe:	461a      	mov	r2, r3
 800aac0:	4b9a      	ldr	r3, [pc, #616]	; (800ad2c <UART_SetConfig+0x6f4>)
 800aac2:	fba3 1302 	umull	r1, r3, r3, r2
 800aac6:	095b      	lsrs	r3, r3, #5
 800aac8:	2164      	movs	r1, #100	; 0x64
 800aaca:	fb01 f303 	mul.w	r3, r1, r3
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	3332      	adds	r3, #50	; 0x32
 800aad4:	4a95      	ldr	r2, [pc, #596]	; (800ad2c <UART_SetConfig+0x6f4>)
 800aad6:	fba2 2303 	umull	r2, r3, r2, r3
 800aada:	095b      	lsrs	r3, r3, #5
 800aadc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aae0:	4498      	add	r8, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	469b      	mov	fp, r3
 800aae6:	f04f 0c00 	mov.w	ip, #0
 800aaea:	46d9      	mov	r9, fp
 800aaec:	46e2      	mov	sl, ip
 800aaee:	eb19 0309 	adds.w	r3, r9, r9
 800aaf2:	eb4a 040a 	adc.w	r4, sl, sl
 800aaf6:	4699      	mov	r9, r3
 800aaf8:	46a2      	mov	sl, r4
 800aafa:	eb19 090b 	adds.w	r9, r9, fp
 800aafe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab02:	f04f 0100 	mov.w	r1, #0
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab16:	4689      	mov	r9, r1
 800ab18:	4692      	mov	sl, r2
 800ab1a:	eb1b 0509 	adds.w	r5, fp, r9
 800ab1e:	eb4c 060a 	adc.w	r6, ip, sl
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4619      	mov	r1, r3
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	f04f 0400 	mov.w	r4, #0
 800ab34:	0094      	lsls	r4, r2, #2
 800ab36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab3a:	008b      	lsls	r3, r1, #2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4623      	mov	r3, r4
 800ab40:	4628      	mov	r0, r5
 800ab42:	4631      	mov	r1, r6
 800ab44:	f7f6 f8a0 	bl	8000c88 <__aeabi_uldivmod>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	4b77      	ldr	r3, [pc, #476]	; (800ad2c <UART_SetConfig+0x6f4>)
 800ab50:	fba3 1302 	umull	r1, r3, r3, r2
 800ab54:	095b      	lsrs	r3, r3, #5
 800ab56:	2164      	movs	r1, #100	; 0x64
 800ab58:	fb01 f303 	mul.w	r3, r1, r3
 800ab5c:	1ad3      	subs	r3, r2, r3
 800ab5e:	011b      	lsls	r3, r3, #4
 800ab60:	3332      	adds	r3, #50	; 0x32
 800ab62:	4a72      	ldr	r2, [pc, #456]	; (800ad2c <UART_SetConfig+0x6f4>)
 800ab64:	fba2 2303 	umull	r2, r3, r2, r3
 800ab68:	095b      	lsrs	r3, r3, #5
 800ab6a:	f003 020f 	and.w	r2, r3, #15
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4442      	add	r2, r8
 800ab74:	609a      	str	r2, [r3, #8]
 800ab76:	e0d0      	b.n	800ad1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ab78:	f7fd ffe2 	bl	8008b40 <HAL_RCC_GetPCLK1Freq>
 800ab7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	469a      	mov	sl, r3
 800ab82:	f04f 0b00 	mov.w	fp, #0
 800ab86:	46d0      	mov	r8, sl
 800ab88:	46d9      	mov	r9, fp
 800ab8a:	eb18 0308 	adds.w	r3, r8, r8
 800ab8e:	eb49 0409 	adc.w	r4, r9, r9
 800ab92:	4698      	mov	r8, r3
 800ab94:	46a1      	mov	r9, r4
 800ab96:	eb18 080a 	adds.w	r8, r8, sl
 800ab9a:	eb49 090b 	adc.w	r9, r9, fp
 800ab9e:	f04f 0100 	mov.w	r1, #0
 800aba2:	f04f 0200 	mov.w	r2, #0
 800aba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800abaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800abae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800abb2:	4688      	mov	r8, r1
 800abb4:	4691      	mov	r9, r2
 800abb6:	eb1a 0508 	adds.w	r5, sl, r8
 800abba:	eb4b 0609 	adc.w	r6, fp, r9
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	4619      	mov	r1, r3
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	f04f 0300 	mov.w	r3, #0
 800abcc:	f04f 0400 	mov.w	r4, #0
 800abd0:	0094      	lsls	r4, r2, #2
 800abd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abd6:	008b      	lsls	r3, r1, #2
 800abd8:	461a      	mov	r2, r3
 800abda:	4623      	mov	r3, r4
 800abdc:	4628      	mov	r0, r5
 800abde:	4631      	mov	r1, r6
 800abe0:	f7f6 f852 	bl	8000c88 <__aeabi_uldivmod>
 800abe4:	4603      	mov	r3, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	461a      	mov	r2, r3
 800abea:	4b50      	ldr	r3, [pc, #320]	; (800ad2c <UART_SetConfig+0x6f4>)
 800abec:	fba3 2302 	umull	r2, r3, r3, r2
 800abf0:	095b      	lsrs	r3, r3, #5
 800abf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	469b      	mov	fp, r3
 800abfa:	f04f 0c00 	mov.w	ip, #0
 800abfe:	46d9      	mov	r9, fp
 800ac00:	46e2      	mov	sl, ip
 800ac02:	eb19 0309 	adds.w	r3, r9, r9
 800ac06:	eb4a 040a 	adc.w	r4, sl, sl
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	46a2      	mov	sl, r4
 800ac0e:	eb19 090b 	adds.w	r9, r9, fp
 800ac12:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac16:	f04f 0100 	mov.w	r1, #0
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac2a:	4689      	mov	r9, r1
 800ac2c:	4692      	mov	sl, r2
 800ac2e:	eb1b 0509 	adds.w	r5, fp, r9
 800ac32:	eb4c 060a 	adc.w	r6, ip, sl
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	f04f 0200 	mov.w	r2, #0
 800ac40:	f04f 0300 	mov.w	r3, #0
 800ac44:	f04f 0400 	mov.w	r4, #0
 800ac48:	0094      	lsls	r4, r2, #2
 800ac4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac4e:	008b      	lsls	r3, r1, #2
 800ac50:	461a      	mov	r2, r3
 800ac52:	4623      	mov	r3, r4
 800ac54:	4628      	mov	r0, r5
 800ac56:	4631      	mov	r1, r6
 800ac58:	f7f6 f816 	bl	8000c88 <__aeabi_uldivmod>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	461a      	mov	r2, r3
 800ac62:	4b32      	ldr	r3, [pc, #200]	; (800ad2c <UART_SetConfig+0x6f4>)
 800ac64:	fba3 1302 	umull	r1, r3, r3, r2
 800ac68:	095b      	lsrs	r3, r3, #5
 800ac6a:	2164      	movs	r1, #100	; 0x64
 800ac6c:	fb01 f303 	mul.w	r3, r1, r3
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	011b      	lsls	r3, r3, #4
 800ac74:	3332      	adds	r3, #50	; 0x32
 800ac76:	4a2d      	ldr	r2, [pc, #180]	; (800ad2c <UART_SetConfig+0x6f4>)
 800ac78:	fba2 2303 	umull	r2, r3, r2, r3
 800ac7c:	095b      	lsrs	r3, r3, #5
 800ac7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac82:	4498      	add	r8, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	469b      	mov	fp, r3
 800ac88:	f04f 0c00 	mov.w	ip, #0
 800ac8c:	46d9      	mov	r9, fp
 800ac8e:	46e2      	mov	sl, ip
 800ac90:	eb19 0309 	adds.w	r3, r9, r9
 800ac94:	eb4a 040a 	adc.w	r4, sl, sl
 800ac98:	4699      	mov	r9, r3
 800ac9a:	46a2      	mov	sl, r4
 800ac9c:	eb19 090b 	adds.w	r9, r9, fp
 800aca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aca4:	f04f 0100 	mov.w	r1, #0
 800aca8:	f04f 0200 	mov.w	r2, #0
 800acac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800acb8:	4689      	mov	r9, r1
 800acba:	4692      	mov	sl, r2
 800acbc:	eb1b 0509 	adds.w	r5, fp, r9
 800acc0:	eb4c 060a 	adc.w	r6, ip, sl
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4619      	mov	r1, r3
 800acca:	f04f 0200 	mov.w	r2, #0
 800acce:	f04f 0300 	mov.w	r3, #0
 800acd2:	f04f 0400 	mov.w	r4, #0
 800acd6:	0094      	lsls	r4, r2, #2
 800acd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800acdc:	008b      	lsls	r3, r1, #2
 800acde:	461a      	mov	r2, r3
 800ace0:	4623      	mov	r3, r4
 800ace2:	4628      	mov	r0, r5
 800ace4:	4631      	mov	r1, r6
 800ace6:	f7f5 ffcf 	bl	8000c88 <__aeabi_uldivmod>
 800acea:	4603      	mov	r3, r0
 800acec:	460c      	mov	r4, r1
 800acee:	461a      	mov	r2, r3
 800acf0:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <UART_SetConfig+0x6f4>)
 800acf2:	fba3 1302 	umull	r1, r3, r3, r2
 800acf6:	095b      	lsrs	r3, r3, #5
 800acf8:	2164      	movs	r1, #100	; 0x64
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	3332      	adds	r3, #50	; 0x32
 800ad04:	4a09      	ldr	r2, [pc, #36]	; (800ad2c <UART_SetConfig+0x6f4>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	f003 020f 	and.w	r2, r3, #15
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4442      	add	r2, r8
 800ad16:	609a      	str	r2, [r3, #8]
}
 800ad18:	e7ff      	b.n	800ad1a <UART_SetConfig+0x6e2>
 800ad1a:	bf00      	nop
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad24:	40011000 	.word	0x40011000
 800ad28:	40011400 	.word	0x40011400
 800ad2c:	51eb851f 	.word	0x51eb851f

0800ad30 <cos>:
 800ad30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad32:	ec51 0b10 	vmov	r0, r1, d0
 800ad36:	4a1e      	ldr	r2, [pc, #120]	; (800adb0 <cos+0x80>)
 800ad38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	dc06      	bgt.n	800ad4e <cos+0x1e>
 800ad40:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800ada8 <cos+0x78>
 800ad44:	f000 fc24 	bl	800b590 <__kernel_cos>
 800ad48:	ec51 0b10 	vmov	r0, r1, d0
 800ad4c:	e007      	b.n	800ad5e <cos+0x2e>
 800ad4e:	4a19      	ldr	r2, [pc, #100]	; (800adb4 <cos+0x84>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	dd09      	ble.n	800ad68 <cos+0x38>
 800ad54:	ee10 2a10 	vmov	r2, s0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	f7f5 fa95 	bl	8000288 <__aeabi_dsub>
 800ad5e:	ec41 0b10 	vmov	d0, r0, r1
 800ad62:	b005      	add	sp, #20
 800ad64:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad68:	4668      	mov	r0, sp
 800ad6a:	f000 f8f1 	bl	800af50 <__ieee754_rem_pio2>
 800ad6e:	f000 0003 	and.w	r0, r0, #3
 800ad72:	2801      	cmp	r0, #1
 800ad74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad78:	ed9d 0b00 	vldr	d0, [sp]
 800ad7c:	d007      	beq.n	800ad8e <cos+0x5e>
 800ad7e:	2802      	cmp	r0, #2
 800ad80:	d00e      	beq.n	800ada0 <cos+0x70>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d0de      	beq.n	800ad44 <cos+0x14>
 800ad86:	2001      	movs	r0, #1
 800ad88:	f001 f80a 	bl	800bda0 <__kernel_sin>
 800ad8c:	e7dc      	b.n	800ad48 <cos+0x18>
 800ad8e:	f001 f807 	bl	800bda0 <__kernel_sin>
 800ad92:	ec53 2b10 	vmov	r2, r3, d0
 800ad96:	ee10 0a10 	vmov	r0, s0
 800ad9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad9e:	e7de      	b.n	800ad5e <cos+0x2e>
 800ada0:	f000 fbf6 	bl	800b590 <__kernel_cos>
 800ada4:	e7f5      	b.n	800ad92 <cos+0x62>
 800ada6:	bf00      	nop
	...
 800adb0:	3fe921fb 	.word	0x3fe921fb
 800adb4:	7fefffff 	.word	0x7fefffff

0800adb8 <sin>:
 800adb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adba:	ec51 0b10 	vmov	r0, r1, d0
 800adbe:	4a20      	ldr	r2, [pc, #128]	; (800ae40 <sin+0x88>)
 800adc0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800adc4:	4293      	cmp	r3, r2
 800adc6:	dc07      	bgt.n	800add8 <sin+0x20>
 800adc8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ae38 <sin+0x80>
 800adcc:	2000      	movs	r0, #0
 800adce:	f000 ffe7 	bl	800bda0 <__kernel_sin>
 800add2:	ec51 0b10 	vmov	r0, r1, d0
 800add6:	e007      	b.n	800ade8 <sin+0x30>
 800add8:	4a1a      	ldr	r2, [pc, #104]	; (800ae44 <sin+0x8c>)
 800adda:	4293      	cmp	r3, r2
 800addc:	dd09      	ble.n	800adf2 <sin+0x3a>
 800adde:	ee10 2a10 	vmov	r2, s0
 800ade2:	460b      	mov	r3, r1
 800ade4:	f7f5 fa50 	bl	8000288 <__aeabi_dsub>
 800ade8:	ec41 0b10 	vmov	d0, r0, r1
 800adec:	b005      	add	sp, #20
 800adee:	f85d fb04 	ldr.w	pc, [sp], #4
 800adf2:	4668      	mov	r0, sp
 800adf4:	f000 f8ac 	bl	800af50 <__ieee754_rem_pio2>
 800adf8:	f000 0003 	and.w	r0, r0, #3
 800adfc:	2801      	cmp	r0, #1
 800adfe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ae02:	ed9d 0b00 	vldr	d0, [sp]
 800ae06:	d004      	beq.n	800ae12 <sin+0x5a>
 800ae08:	2802      	cmp	r0, #2
 800ae0a:	d005      	beq.n	800ae18 <sin+0x60>
 800ae0c:	b970      	cbnz	r0, 800ae2c <sin+0x74>
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7dd      	b.n	800adce <sin+0x16>
 800ae12:	f000 fbbd 	bl	800b590 <__kernel_cos>
 800ae16:	e7dc      	b.n	800add2 <sin+0x1a>
 800ae18:	2001      	movs	r0, #1
 800ae1a:	f000 ffc1 	bl	800bda0 <__kernel_sin>
 800ae1e:	ec53 2b10 	vmov	r2, r3, d0
 800ae22:	ee10 0a10 	vmov	r0, s0
 800ae26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ae2a:	e7dd      	b.n	800ade8 <sin+0x30>
 800ae2c:	f000 fbb0 	bl	800b590 <__kernel_cos>
 800ae30:	e7f5      	b.n	800ae1e <sin+0x66>
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
	...
 800ae40:	3fe921fb 	.word	0x3fe921fb
 800ae44:	7fefffff 	.word	0x7fefffff

0800ae48 <cosf>:
 800ae48:	ee10 3a10 	vmov	r3, s0
 800ae4c:	b507      	push	{r0, r1, r2, lr}
 800ae4e:	4a1c      	ldr	r2, [pc, #112]	; (800aec0 <cosf+0x78>)
 800ae50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae54:	4293      	cmp	r3, r2
 800ae56:	dc04      	bgt.n	800ae62 <cosf+0x1a>
 800ae58:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800aec4 <cosf+0x7c>
 800ae5c:	f001 f85a 	bl	800bf14 <__kernel_cosf>
 800ae60:	e004      	b.n	800ae6c <cosf+0x24>
 800ae62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae66:	db04      	blt.n	800ae72 <cosf+0x2a>
 800ae68:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ae6c:	b003      	add	sp, #12
 800ae6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ae72:	4668      	mov	r0, sp
 800ae74:	f000 fa5e 	bl	800b334 <__ieee754_rem_pio2f>
 800ae78:	f000 0003 	and.w	r0, r0, #3
 800ae7c:	2801      	cmp	r0, #1
 800ae7e:	d007      	beq.n	800ae90 <cosf+0x48>
 800ae80:	2802      	cmp	r0, #2
 800ae82:	d00e      	beq.n	800aea2 <cosf+0x5a>
 800ae84:	b9a0      	cbnz	r0, 800aeb0 <cosf+0x68>
 800ae86:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae8a:	ed9d 0a00 	vldr	s0, [sp]
 800ae8e:	e7e5      	b.n	800ae5c <cosf+0x14>
 800ae90:	eddd 0a01 	vldr	s1, [sp, #4]
 800ae94:	ed9d 0a00 	vldr	s0, [sp]
 800ae98:	f001 fb1c 	bl	800c4d4 <__kernel_sinf>
 800ae9c:	eeb1 0a40 	vneg.f32	s0, s0
 800aea0:	e7e4      	b.n	800ae6c <cosf+0x24>
 800aea2:	eddd 0a01 	vldr	s1, [sp, #4]
 800aea6:	ed9d 0a00 	vldr	s0, [sp]
 800aeaa:	f001 f833 	bl	800bf14 <__kernel_cosf>
 800aeae:	e7f5      	b.n	800ae9c <cosf+0x54>
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	eddd 0a01 	vldr	s1, [sp, #4]
 800aeb6:	ed9d 0a00 	vldr	s0, [sp]
 800aeba:	f001 fb0b 	bl	800c4d4 <__kernel_sinf>
 800aebe:	e7d5      	b.n	800ae6c <cosf+0x24>
 800aec0:	3f490fd8 	.word	0x3f490fd8
 800aec4:	00000000 	.word	0x00000000

0800aec8 <sinf>:
 800aec8:	ee10 3a10 	vmov	r3, s0
 800aecc:	b507      	push	{r0, r1, r2, lr}
 800aece:	4a1d      	ldr	r2, [pc, #116]	; (800af44 <sinf+0x7c>)
 800aed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	4293      	cmp	r3, r2
 800aed6:	dc05      	bgt.n	800aee4 <sinf+0x1c>
 800aed8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800af48 <sinf+0x80>
 800aedc:	2000      	movs	r0, #0
 800aede:	f001 faf9 	bl	800c4d4 <__kernel_sinf>
 800aee2:	e004      	b.n	800aeee <sinf+0x26>
 800aee4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aee8:	db04      	blt.n	800aef4 <sinf+0x2c>
 800aeea:	ee30 0a40 	vsub.f32	s0, s0, s0
 800aeee:	b003      	add	sp, #12
 800aef0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aef4:	4668      	mov	r0, sp
 800aef6:	f000 fa1d 	bl	800b334 <__ieee754_rem_pio2f>
 800aefa:	f000 0003 	and.w	r0, r0, #3
 800aefe:	2801      	cmp	r0, #1
 800af00:	d008      	beq.n	800af14 <sinf+0x4c>
 800af02:	2802      	cmp	r0, #2
 800af04:	d00d      	beq.n	800af22 <sinf+0x5a>
 800af06:	b9b0      	cbnz	r0, 800af36 <sinf+0x6e>
 800af08:	2001      	movs	r0, #1
 800af0a:	eddd 0a01 	vldr	s1, [sp, #4]
 800af0e:	ed9d 0a00 	vldr	s0, [sp]
 800af12:	e7e4      	b.n	800aede <sinf+0x16>
 800af14:	eddd 0a01 	vldr	s1, [sp, #4]
 800af18:	ed9d 0a00 	vldr	s0, [sp]
 800af1c:	f000 fffa 	bl	800bf14 <__kernel_cosf>
 800af20:	e7e5      	b.n	800aeee <sinf+0x26>
 800af22:	2001      	movs	r0, #1
 800af24:	eddd 0a01 	vldr	s1, [sp, #4]
 800af28:	ed9d 0a00 	vldr	s0, [sp]
 800af2c:	f001 fad2 	bl	800c4d4 <__kernel_sinf>
 800af30:	eeb1 0a40 	vneg.f32	s0, s0
 800af34:	e7db      	b.n	800aeee <sinf+0x26>
 800af36:	eddd 0a01 	vldr	s1, [sp, #4]
 800af3a:	ed9d 0a00 	vldr	s0, [sp]
 800af3e:	f000 ffe9 	bl	800bf14 <__kernel_cosf>
 800af42:	e7f5      	b.n	800af30 <sinf+0x68>
 800af44:	3f490fd8 	.word	0x3f490fd8
	...

0800af50 <__ieee754_rem_pio2>:
 800af50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af54:	ec57 6b10 	vmov	r6, r7, d0
 800af58:	4bc3      	ldr	r3, [pc, #780]	; (800b268 <__ieee754_rem_pio2+0x318>)
 800af5a:	b08d      	sub	sp, #52	; 0x34
 800af5c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af60:	4598      	cmp	r8, r3
 800af62:	4604      	mov	r4, r0
 800af64:	9704      	str	r7, [sp, #16]
 800af66:	dc07      	bgt.n	800af78 <__ieee754_rem_pio2+0x28>
 800af68:	2200      	movs	r2, #0
 800af6a:	2300      	movs	r3, #0
 800af6c:	ed84 0b00 	vstr	d0, [r4]
 800af70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800af74:	2500      	movs	r5, #0
 800af76:	e027      	b.n	800afc8 <__ieee754_rem_pio2+0x78>
 800af78:	4bbc      	ldr	r3, [pc, #752]	; (800b26c <__ieee754_rem_pio2+0x31c>)
 800af7a:	4598      	cmp	r8, r3
 800af7c:	dc75      	bgt.n	800b06a <__ieee754_rem_pio2+0x11a>
 800af7e:	9b04      	ldr	r3, [sp, #16]
 800af80:	4dbb      	ldr	r5, [pc, #748]	; (800b270 <__ieee754_rem_pio2+0x320>)
 800af82:	2b00      	cmp	r3, #0
 800af84:	ee10 0a10 	vmov	r0, s0
 800af88:	a3a9      	add	r3, pc, #676	; (adr r3, 800b230 <__ieee754_rem_pio2+0x2e0>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	4639      	mov	r1, r7
 800af90:	dd36      	ble.n	800b000 <__ieee754_rem_pio2+0xb0>
 800af92:	f7f5 f979 	bl	8000288 <__aeabi_dsub>
 800af96:	45a8      	cmp	r8, r5
 800af98:	4606      	mov	r6, r0
 800af9a:	460f      	mov	r7, r1
 800af9c:	d018      	beq.n	800afd0 <__ieee754_rem_pio2+0x80>
 800af9e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b238 <__ieee754_rem_pio2+0x2e8>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f7f5 f970 	bl	8000288 <__aeabi_dsub>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	e9c4 2300 	strd	r2, r3, [r4]
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 f968 	bl	8000288 <__aeabi_dsub>
 800afb8:	a39f      	add	r3, pc, #636	; (adr r3, 800b238 <__ieee754_rem_pio2+0x2e8>)
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	f7f5 f963 	bl	8000288 <__aeabi_dsub>
 800afc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800afc6:	2501      	movs	r5, #1
 800afc8:	4628      	mov	r0, r5
 800afca:	b00d      	add	sp, #52	; 0x34
 800afcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd0:	a39b      	add	r3, pc, #620	; (adr r3, 800b240 <__ieee754_rem_pio2+0x2f0>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 f957 	bl	8000288 <__aeabi_dsub>
 800afda:	a39b      	add	r3, pc, #620	; (adr r3, 800b248 <__ieee754_rem_pio2+0x2f8>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	4606      	mov	r6, r0
 800afe2:	460f      	mov	r7, r1
 800afe4:	f7f5 f950 	bl	8000288 <__aeabi_dsub>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	e9c4 2300 	strd	r2, r3, [r4]
 800aff0:	4630      	mov	r0, r6
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 f948 	bl	8000288 <__aeabi_dsub>
 800aff8:	a393      	add	r3, pc, #588	; (adr r3, 800b248 <__ieee754_rem_pio2+0x2f8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	e7de      	b.n	800afbe <__ieee754_rem_pio2+0x6e>
 800b000:	f7f5 f944 	bl	800028c <__adddf3>
 800b004:	45a8      	cmp	r8, r5
 800b006:	4606      	mov	r6, r0
 800b008:	460f      	mov	r7, r1
 800b00a:	d016      	beq.n	800b03a <__ieee754_rem_pio2+0xea>
 800b00c:	a38a      	add	r3, pc, #552	; (adr r3, 800b238 <__ieee754_rem_pio2+0x2e8>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	f7f5 f93b 	bl	800028c <__adddf3>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9c4 2300 	strd	r2, r3, [r4]
 800b01e:	4630      	mov	r0, r6
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 f931 	bl	8000288 <__aeabi_dsub>
 800b026:	a384      	add	r3, pc, #528	; (adr r3, 800b238 <__ieee754_rem_pio2+0x2e8>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f92e 	bl	800028c <__adddf3>
 800b030:	f04f 35ff 	mov.w	r5, #4294967295
 800b034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b038:	e7c6      	b.n	800afc8 <__ieee754_rem_pio2+0x78>
 800b03a:	a381      	add	r3, pc, #516	; (adr r3, 800b240 <__ieee754_rem_pio2+0x2f0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 f924 	bl	800028c <__adddf3>
 800b044:	a380      	add	r3, pc, #512	; (adr r3, 800b248 <__ieee754_rem_pio2+0x2f8>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	4606      	mov	r6, r0
 800b04c:	460f      	mov	r7, r1
 800b04e:	f7f5 f91d 	bl	800028c <__adddf3>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	e9c4 2300 	strd	r2, r3, [r4]
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f913 	bl	8000288 <__aeabi_dsub>
 800b062:	a379      	add	r3, pc, #484	; (adr r3, 800b248 <__ieee754_rem_pio2+0x2f8>)
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	e7e0      	b.n	800b02c <__ieee754_rem_pio2+0xdc>
 800b06a:	4b82      	ldr	r3, [pc, #520]	; (800b274 <__ieee754_rem_pio2+0x324>)
 800b06c:	4598      	cmp	r8, r3
 800b06e:	f300 80d0 	bgt.w	800b212 <__ieee754_rem_pio2+0x2c2>
 800b072:	f001 fa77 	bl	800c564 <fabs>
 800b076:	ec57 6b10 	vmov	r6, r7, d0
 800b07a:	ee10 0a10 	vmov	r0, s0
 800b07e:	a374      	add	r3, pc, #464	; (adr r3, 800b250 <__ieee754_rem_pio2+0x300>)
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	4639      	mov	r1, r7
 800b086:	f7f5 fab7 	bl	80005f8 <__aeabi_dmul>
 800b08a:	2200      	movs	r2, #0
 800b08c:	4b7a      	ldr	r3, [pc, #488]	; (800b278 <__ieee754_rem_pio2+0x328>)
 800b08e:	f7f5 f8fd 	bl	800028c <__adddf3>
 800b092:	f7f5 fd61 	bl	8000b58 <__aeabi_d2iz>
 800b096:	4605      	mov	r5, r0
 800b098:	f7f5 fa44 	bl	8000524 <__aeabi_i2d>
 800b09c:	a364      	add	r3, pc, #400	; (adr r3, 800b230 <__ieee754_rem_pio2+0x2e0>)
 800b09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0a6:	f7f5 faa7 	bl	80005f8 <__aeabi_dmul>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	f7f5 f8e9 	bl	8000288 <__aeabi_dsub>
 800b0b6:	a360      	add	r3, pc, #384	; (adr r3, 800b238 <__ieee754_rem_pio2+0x2e8>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	4682      	mov	sl, r0
 800b0be:	468b      	mov	fp, r1
 800b0c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c4:	f7f5 fa98 	bl	80005f8 <__aeabi_dmul>
 800b0c8:	2d1f      	cmp	r5, #31
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	460f      	mov	r7, r1
 800b0ce:	dc0c      	bgt.n	800b0ea <__ieee754_rem_pio2+0x19a>
 800b0d0:	1e6a      	subs	r2, r5, #1
 800b0d2:	4b6a      	ldr	r3, [pc, #424]	; (800b27c <__ieee754_rem_pio2+0x32c>)
 800b0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d8:	4543      	cmp	r3, r8
 800b0da:	d006      	beq.n	800b0ea <__ieee754_rem_pio2+0x19a>
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	e00e      	b.n	800b108 <__ieee754_rem_pio2+0x1b8>
 800b0ea:	4632      	mov	r2, r6
 800b0ec:	463b      	mov	r3, r7
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	f7f5 f8c9 	bl	8000288 <__aeabi_dsub>
 800b0f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b0fa:	9305      	str	r3, [sp, #20]
 800b0fc:	9a05      	ldr	r2, [sp, #20]
 800b0fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b102:	1ad3      	subs	r3, r2, r3
 800b104:	2b10      	cmp	r3, #16
 800b106:	dc02      	bgt.n	800b10e <__ieee754_rem_pio2+0x1be>
 800b108:	e9c4 0100 	strd	r0, r1, [r4]
 800b10c:	e039      	b.n	800b182 <__ieee754_rem_pio2+0x232>
 800b10e:	a34c      	add	r3, pc, #304	; (adr r3, 800b240 <__ieee754_rem_pio2+0x2f0>)
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b118:	f7f5 fa6e 	bl	80005f8 <__aeabi_dmul>
 800b11c:	4606      	mov	r6, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	4602      	mov	r2, r0
 800b122:	460b      	mov	r3, r1
 800b124:	4650      	mov	r0, sl
 800b126:	4659      	mov	r1, fp
 800b128:	f7f5 f8ae 	bl	8000288 <__aeabi_dsub>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4680      	mov	r8, r0
 800b132:	4689      	mov	r9, r1
 800b134:	4650      	mov	r0, sl
 800b136:	4659      	mov	r1, fp
 800b138:	f7f5 f8a6 	bl	8000288 <__aeabi_dsub>
 800b13c:	4632      	mov	r2, r6
 800b13e:	463b      	mov	r3, r7
 800b140:	f7f5 f8a2 	bl	8000288 <__aeabi_dsub>
 800b144:	a340      	add	r3, pc, #256	; (adr r3, 800b248 <__ieee754_rem_pio2+0x2f8>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	4606      	mov	r6, r0
 800b14c:	460f      	mov	r7, r1
 800b14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b152:	f7f5 fa51 	bl	80005f8 <__aeabi_dmul>
 800b156:	4632      	mov	r2, r6
 800b158:	463b      	mov	r3, r7
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4606      	mov	r6, r0
 800b164:	460f      	mov	r7, r1
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f7f5 f88d 	bl	8000288 <__aeabi_dsub>
 800b16e:	9a05      	ldr	r2, [sp, #20]
 800b170:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	2b31      	cmp	r3, #49	; 0x31
 800b178:	dc20      	bgt.n	800b1bc <__ieee754_rem_pio2+0x26c>
 800b17a:	e9c4 0100 	strd	r0, r1, [r4]
 800b17e:	46c2      	mov	sl, r8
 800b180:	46cb      	mov	fp, r9
 800b182:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b186:	4650      	mov	r0, sl
 800b188:	4642      	mov	r2, r8
 800b18a:	464b      	mov	r3, r9
 800b18c:	4659      	mov	r1, fp
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	463b      	mov	r3, r7
 800b194:	4632      	mov	r2, r6
 800b196:	f7f5 f877 	bl	8000288 <__aeabi_dsub>
 800b19a:	9b04      	ldr	r3, [sp, #16]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1a2:	f6bf af11 	bge.w	800afc8 <__ieee754_rem_pio2+0x78>
 800b1a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b1aa:	6063      	str	r3, [r4, #4]
 800b1ac:	f8c4 8000 	str.w	r8, [r4]
 800b1b0:	60a0      	str	r0, [r4, #8]
 800b1b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1b6:	60e3      	str	r3, [r4, #12]
 800b1b8:	426d      	negs	r5, r5
 800b1ba:	e705      	b.n	800afc8 <__ieee754_rem_pio2+0x78>
 800b1bc:	a326      	add	r3, pc, #152	; (adr r3, 800b258 <__ieee754_rem_pio2+0x308>)
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1c6:	f7f5 fa17 	bl	80005f8 <__aeabi_dmul>
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	f7f5 f857 	bl	8000288 <__aeabi_dsub>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4682      	mov	sl, r0
 800b1e0:	468b      	mov	fp, r1
 800b1e2:	4640      	mov	r0, r8
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	f7f5 f84f 	bl	8000288 <__aeabi_dsub>
 800b1ea:	4632      	mov	r2, r6
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	f7f5 f84b 	bl	8000288 <__aeabi_dsub>
 800b1f2:	a31b      	add	r3, pc, #108	; (adr r3, 800b260 <__ieee754_rem_pio2+0x310>)
 800b1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	460f      	mov	r7, r1
 800b1fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b200:	f7f5 f9fa 	bl	80005f8 <__aeabi_dmul>
 800b204:	4632      	mov	r2, r6
 800b206:	463b      	mov	r3, r7
 800b208:	f7f5 f83e 	bl	8000288 <__aeabi_dsub>
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	e764      	b.n	800b0dc <__ieee754_rem_pio2+0x18c>
 800b212:	4b1b      	ldr	r3, [pc, #108]	; (800b280 <__ieee754_rem_pio2+0x330>)
 800b214:	4598      	cmp	r8, r3
 800b216:	dd35      	ble.n	800b284 <__ieee754_rem_pio2+0x334>
 800b218:	ee10 2a10 	vmov	r2, s0
 800b21c:	463b      	mov	r3, r7
 800b21e:	4630      	mov	r0, r6
 800b220:	4639      	mov	r1, r7
 800b222:	f7f5 f831 	bl	8000288 <__aeabi_dsub>
 800b226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b22a:	e9c4 0100 	strd	r0, r1, [r4]
 800b22e:	e6a1      	b.n	800af74 <__ieee754_rem_pio2+0x24>
 800b230:	54400000 	.word	0x54400000
 800b234:	3ff921fb 	.word	0x3ff921fb
 800b238:	1a626331 	.word	0x1a626331
 800b23c:	3dd0b461 	.word	0x3dd0b461
 800b240:	1a600000 	.word	0x1a600000
 800b244:	3dd0b461 	.word	0x3dd0b461
 800b248:	2e037073 	.word	0x2e037073
 800b24c:	3ba3198a 	.word	0x3ba3198a
 800b250:	6dc9c883 	.word	0x6dc9c883
 800b254:	3fe45f30 	.word	0x3fe45f30
 800b258:	2e000000 	.word	0x2e000000
 800b25c:	3ba3198a 	.word	0x3ba3198a
 800b260:	252049c1 	.word	0x252049c1
 800b264:	397b839a 	.word	0x397b839a
 800b268:	3fe921fb 	.word	0x3fe921fb
 800b26c:	4002d97b 	.word	0x4002d97b
 800b270:	3ff921fb 	.word	0x3ff921fb
 800b274:	413921fb 	.word	0x413921fb
 800b278:	3fe00000 	.word	0x3fe00000
 800b27c:	08010e80 	.word	0x08010e80
 800b280:	7fefffff 	.word	0x7fefffff
 800b284:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b288:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b28c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b290:	4630      	mov	r0, r6
 800b292:	460f      	mov	r7, r1
 800b294:	f7f5 fc60 	bl	8000b58 <__aeabi_d2iz>
 800b298:	f7f5 f944 	bl	8000524 <__aeabi_i2d>
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	4639      	mov	r1, r7
 800b2a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b2a8:	f7f4 ffee 	bl	8000288 <__aeabi_dsub>
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4b1f      	ldr	r3, [pc, #124]	; (800b32c <__ieee754_rem_pio2+0x3dc>)
 800b2b0:	f7f5 f9a2 	bl	80005f8 <__aeabi_dmul>
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	f7f5 fc4e 	bl	8000b58 <__aeabi_d2iz>
 800b2bc:	f7f5 f932 	bl	8000524 <__aeabi_i2d>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4630      	mov	r0, r6
 800b2c6:	4639      	mov	r1, r7
 800b2c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b2cc:	f7f4 ffdc 	bl	8000288 <__aeabi_dsub>
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	4b16      	ldr	r3, [pc, #88]	; (800b32c <__ieee754_rem_pio2+0x3dc>)
 800b2d4:	f7f5 f990 	bl	80005f8 <__aeabi_dmul>
 800b2d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b2e0:	f04f 0803 	mov.w	r8, #3
 800b2e4:	2600      	movs	r6, #0
 800b2e6:	2700      	movs	r7, #0
 800b2e8:	4632      	mov	r2, r6
 800b2ea:	463b      	mov	r3, r7
 800b2ec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b2f0:	f108 3aff 	add.w	sl, r8, #4294967295
 800b2f4:	f7f5 fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2f8:	b9b0      	cbnz	r0, 800b328 <__ieee754_rem_pio2+0x3d8>
 800b2fa:	4b0d      	ldr	r3, [pc, #52]	; (800b330 <__ieee754_rem_pio2+0x3e0>)
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	2302      	movs	r3, #2
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	462a      	mov	r2, r5
 800b304:	4643      	mov	r3, r8
 800b306:	4621      	mov	r1, r4
 800b308:	a806      	add	r0, sp, #24
 800b30a:	f000 fa09 	bl	800b720 <__kernel_rem_pio2>
 800b30e:	9b04      	ldr	r3, [sp, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	4605      	mov	r5, r0
 800b314:	f6bf ae58 	bge.w	800afc8 <__ieee754_rem_pio2+0x78>
 800b318:	6863      	ldr	r3, [r4, #4]
 800b31a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b31e:	6063      	str	r3, [r4, #4]
 800b320:	68e3      	ldr	r3, [r4, #12]
 800b322:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b326:	e746      	b.n	800b1b6 <__ieee754_rem_pio2+0x266>
 800b328:	46d0      	mov	r8, sl
 800b32a:	e7dd      	b.n	800b2e8 <__ieee754_rem_pio2+0x398>
 800b32c:	41700000 	.word	0x41700000
 800b330:	08010f00 	.word	0x08010f00

0800b334 <__ieee754_rem_pio2f>:
 800b334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b336:	ee10 6a10 	vmov	r6, s0
 800b33a:	4b86      	ldr	r3, [pc, #536]	; (800b554 <__ieee754_rem_pio2f+0x220>)
 800b33c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800b340:	429c      	cmp	r4, r3
 800b342:	b087      	sub	sp, #28
 800b344:	4605      	mov	r5, r0
 800b346:	dc05      	bgt.n	800b354 <__ieee754_rem_pio2f+0x20>
 800b348:	2300      	movs	r3, #0
 800b34a:	ed85 0a00 	vstr	s0, [r5]
 800b34e:	6043      	str	r3, [r0, #4]
 800b350:	2000      	movs	r0, #0
 800b352:	e020      	b.n	800b396 <__ieee754_rem_pio2f+0x62>
 800b354:	4b80      	ldr	r3, [pc, #512]	; (800b558 <__ieee754_rem_pio2f+0x224>)
 800b356:	429c      	cmp	r4, r3
 800b358:	dc38      	bgt.n	800b3cc <__ieee754_rem_pio2f+0x98>
 800b35a:	2e00      	cmp	r6, #0
 800b35c:	f024 040f 	bic.w	r4, r4, #15
 800b360:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800b55c <__ieee754_rem_pio2f+0x228>
 800b364:	4b7e      	ldr	r3, [pc, #504]	; (800b560 <__ieee754_rem_pio2f+0x22c>)
 800b366:	dd18      	ble.n	800b39a <__ieee754_rem_pio2f+0x66>
 800b368:	429c      	cmp	r4, r3
 800b36a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b36e:	bf09      	itett	eq
 800b370:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800b564 <__ieee754_rem_pio2f+0x230>
 800b374:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800b568 <__ieee754_rem_pio2f+0x234>
 800b378:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b37c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800b56c <__ieee754_rem_pio2f+0x238>
 800b380:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b388:	edc0 6a00 	vstr	s13, [r0]
 800b38c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b390:	edc0 7a01 	vstr	s15, [r0, #4]
 800b394:	2001      	movs	r0, #1
 800b396:	b007      	add	sp, #28
 800b398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39a:	429c      	cmp	r4, r3
 800b39c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b3a0:	bf09      	itett	eq
 800b3a2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800b564 <__ieee754_rem_pio2f+0x230>
 800b3a6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800b568 <__ieee754_rem_pio2f+0x234>
 800b3aa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b3ae:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800b56c <__ieee754_rem_pio2f+0x238>
 800b3b2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b3b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b3ba:	edc0 6a00 	vstr	s13, [r0]
 800b3be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3c2:	edc0 7a01 	vstr	s15, [r0, #4]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	e7e4      	b.n	800b396 <__ieee754_rem_pio2f+0x62>
 800b3cc:	4b68      	ldr	r3, [pc, #416]	; (800b570 <__ieee754_rem_pio2f+0x23c>)
 800b3ce:	429c      	cmp	r4, r3
 800b3d0:	dc71      	bgt.n	800b4b6 <__ieee754_rem_pio2f+0x182>
 800b3d2:	f001 f9cb 	bl	800c76c <fabsf>
 800b3d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b574 <__ieee754_rem_pio2f+0x240>
 800b3da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b3de:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b3e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3e6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800b3ea:	ee17 0a90 	vmov	r0, s15
 800b3ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b55c <__ieee754_rem_pio2f+0x228>
 800b3f2:	eeb1 7a46 	vneg.f32	s14, s12
 800b3f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b3fa:	281f      	cmp	r0, #31
 800b3fc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b568 <__ieee754_rem_pio2f+0x234>
 800b400:	ee66 7a27 	vmul.f32	s15, s12, s15
 800b404:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b408:	ee16 3a90 	vmov	r3, s13
 800b40c:	dc1c      	bgt.n	800b448 <__ieee754_rem_pio2f+0x114>
 800b40e:	1e47      	subs	r7, r0, #1
 800b410:	4959      	ldr	r1, [pc, #356]	; (800b578 <__ieee754_rem_pio2f+0x244>)
 800b412:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b416:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b41a:	428a      	cmp	r2, r1
 800b41c:	d014      	beq.n	800b448 <__ieee754_rem_pio2f+0x114>
 800b41e:	602b      	str	r3, [r5, #0]
 800b420:	ed95 7a00 	vldr	s14, [r5]
 800b424:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b428:	2e00      	cmp	r6, #0
 800b42a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b42e:	ed85 0a01 	vstr	s0, [r5, #4]
 800b432:	dab0      	bge.n	800b396 <__ieee754_rem_pio2f+0x62>
 800b434:	eeb1 7a47 	vneg.f32	s14, s14
 800b438:	eeb1 0a40 	vneg.f32	s0, s0
 800b43c:	ed85 7a00 	vstr	s14, [r5]
 800b440:	ed85 0a01 	vstr	s0, [r5, #4]
 800b444:	4240      	negs	r0, r0
 800b446:	e7a6      	b.n	800b396 <__ieee754_rem_pio2f+0x62>
 800b448:	15e4      	asrs	r4, r4, #23
 800b44a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b44e:	1aa2      	subs	r2, r4, r2
 800b450:	2a08      	cmp	r2, #8
 800b452:	dde4      	ble.n	800b41e <__ieee754_rem_pio2f+0xea>
 800b454:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b564 <__ieee754_rem_pio2f+0x230>
 800b458:	eef0 6a40 	vmov.f32	s13, s0
 800b45c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b460:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b464:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b468:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b56c <__ieee754_rem_pio2f+0x238>
 800b46c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800b470:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800b474:	eef0 7a40 	vmov.f32	s15, s0
 800b478:	ee15 3a90 	vmov	r3, s11
 800b47c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b480:	1aa4      	subs	r4, r4, r2
 800b482:	2c19      	cmp	r4, #25
 800b484:	dc04      	bgt.n	800b490 <__ieee754_rem_pio2f+0x15c>
 800b486:	edc5 5a00 	vstr	s11, [r5]
 800b48a:	eeb0 0a66 	vmov.f32	s0, s13
 800b48e:	e7c7      	b.n	800b420 <__ieee754_rem_pio2f+0xec>
 800b490:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b57c <__ieee754_rem_pio2f+0x248>
 800b494:	eeb0 0a66 	vmov.f32	s0, s13
 800b498:	eea7 0a25 	vfma.f32	s0, s14, s11
 800b49c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b4a0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b4a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b580 <__ieee754_rem_pio2f+0x24c>
 800b4a8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800b4ac:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b4b0:	ed85 7a00 	vstr	s14, [r5]
 800b4b4:	e7b4      	b.n	800b420 <__ieee754_rem_pio2f+0xec>
 800b4b6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b4ba:	db06      	blt.n	800b4ca <__ieee754_rem_pio2f+0x196>
 800b4bc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b4c0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4c4:	edc0 7a00 	vstr	s15, [r0]
 800b4c8:	e742      	b.n	800b350 <__ieee754_rem_pio2f+0x1c>
 800b4ca:	15e2      	asrs	r2, r4, #23
 800b4cc:	3a86      	subs	r2, #134	; 0x86
 800b4ce:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4da:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b584 <__ieee754_rem_pio2f+0x250>
 800b4de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4e6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b4ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b4ee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b4f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4fa:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b4fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b502:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50a:	edcd 7a05 	vstr	s15, [sp, #20]
 800b50e:	d11e      	bne.n	800b54e <__ieee754_rem_pio2f+0x21a>
 800b510:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b518:	bf0c      	ite	eq
 800b51a:	2301      	moveq	r3, #1
 800b51c:	2302      	movne	r3, #2
 800b51e:	491a      	ldr	r1, [pc, #104]	; (800b588 <__ieee754_rem_pio2f+0x254>)
 800b520:	9101      	str	r1, [sp, #4]
 800b522:	2102      	movs	r1, #2
 800b524:	9100      	str	r1, [sp, #0]
 800b526:	a803      	add	r0, sp, #12
 800b528:	4629      	mov	r1, r5
 800b52a:	f000 fd51 	bl	800bfd0 <__kernel_rem_pio2f>
 800b52e:	2e00      	cmp	r6, #0
 800b530:	f6bf af31 	bge.w	800b396 <__ieee754_rem_pio2f+0x62>
 800b534:	edd5 7a00 	vldr	s15, [r5]
 800b538:	eef1 7a67 	vneg.f32	s15, s15
 800b53c:	edc5 7a00 	vstr	s15, [r5]
 800b540:	edd5 7a01 	vldr	s15, [r5, #4]
 800b544:	eef1 7a67 	vneg.f32	s15, s15
 800b548:	edc5 7a01 	vstr	s15, [r5, #4]
 800b54c:	e77a      	b.n	800b444 <__ieee754_rem_pio2f+0x110>
 800b54e:	2303      	movs	r3, #3
 800b550:	e7e5      	b.n	800b51e <__ieee754_rem_pio2f+0x1ea>
 800b552:	bf00      	nop
 800b554:	3f490fd8 	.word	0x3f490fd8
 800b558:	4016cbe3 	.word	0x4016cbe3
 800b55c:	3fc90f80 	.word	0x3fc90f80
 800b560:	3fc90fd0 	.word	0x3fc90fd0
 800b564:	37354400 	.word	0x37354400
 800b568:	37354443 	.word	0x37354443
 800b56c:	2e85a308 	.word	0x2e85a308
 800b570:	43490f80 	.word	0x43490f80
 800b574:	3f22f984 	.word	0x3f22f984
 800b578:	08011008 	.word	0x08011008
 800b57c:	2e85a300 	.word	0x2e85a300
 800b580:	248d3132 	.word	0x248d3132
 800b584:	43800000 	.word	0x43800000
 800b588:	08011088 	.word	0x08011088
 800b58c:	00000000 	.word	0x00000000

0800b590 <__kernel_cos>:
 800b590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	ec59 8b10 	vmov	r8, r9, d0
 800b598:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b59c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b5a0:	ed2d 8b02 	vpush	{d8}
 800b5a4:	eeb0 8a41 	vmov.f32	s16, s2
 800b5a8:	eef0 8a61 	vmov.f32	s17, s3
 800b5ac:	da07      	bge.n	800b5be <__kernel_cos+0x2e>
 800b5ae:	ee10 0a10 	vmov	r0, s0
 800b5b2:	4649      	mov	r1, r9
 800b5b4:	f7f5 fad0 	bl	8000b58 <__aeabi_d2iz>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f000 8089 	beq.w	800b6d0 <__kernel_cos+0x140>
 800b5be:	4642      	mov	r2, r8
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	4b4e      	ldr	r3, [pc, #312]	; (800b708 <__kernel_cos+0x178>)
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	460d      	mov	r5, r1
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	a340      	add	r3, pc, #256	; (adr r3, 800b6d8 <__kernel_cos+0x148>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	4682      	mov	sl, r0
 800b5de:	468b      	mov	fp, r1
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	f7f5 f808 	bl	80005f8 <__aeabi_dmul>
 800b5e8:	a33d      	add	r3, pc, #244	; (adr r3, 800b6e0 <__kernel_cos+0x150>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 fe4d 	bl	800028c <__adddf3>
 800b5f2:	4622      	mov	r2, r4
 800b5f4:	462b      	mov	r3, r5
 800b5f6:	f7f4 ffff 	bl	80005f8 <__aeabi_dmul>
 800b5fa:	a33b      	add	r3, pc, #236	; (adr r3, 800b6e8 <__kernel_cos+0x158>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fe42 	bl	8000288 <__aeabi_dsub>
 800b604:	4622      	mov	r2, r4
 800b606:	462b      	mov	r3, r5
 800b608:	f7f4 fff6 	bl	80005f8 <__aeabi_dmul>
 800b60c:	a338      	add	r3, pc, #224	; (adr r3, 800b6f0 <__kernel_cos+0x160>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 fe3b 	bl	800028c <__adddf3>
 800b616:	4622      	mov	r2, r4
 800b618:	462b      	mov	r3, r5
 800b61a:	f7f4 ffed 	bl	80005f8 <__aeabi_dmul>
 800b61e:	a336      	add	r3, pc, #216	; (adr r3, 800b6f8 <__kernel_cos+0x168>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	f7f4 fe30 	bl	8000288 <__aeabi_dsub>
 800b628:	4622      	mov	r2, r4
 800b62a:	462b      	mov	r3, r5
 800b62c:	f7f4 ffe4 	bl	80005f8 <__aeabi_dmul>
 800b630:	a333      	add	r3, pc, #204	; (adr r3, 800b700 <__kernel_cos+0x170>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 fe29 	bl	800028c <__adddf3>
 800b63a:	4622      	mov	r2, r4
 800b63c:	462b      	mov	r3, r5
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	4622      	mov	r2, r4
 800b644:	462b      	mov	r3, r5
 800b646:	f7f4 ffd7 	bl	80005f8 <__aeabi_dmul>
 800b64a:	ec53 2b18 	vmov	r2, r3, d8
 800b64e:	4604      	mov	r4, r0
 800b650:	460d      	mov	r5, r1
 800b652:	4640      	mov	r0, r8
 800b654:	4649      	mov	r1, r9
 800b656:	f7f4 ffcf 	bl	80005f8 <__aeabi_dmul>
 800b65a:	460b      	mov	r3, r1
 800b65c:	4602      	mov	r2, r0
 800b65e:	4629      	mov	r1, r5
 800b660:	4620      	mov	r0, r4
 800b662:	f7f4 fe11 	bl	8000288 <__aeabi_dsub>
 800b666:	4b29      	ldr	r3, [pc, #164]	; (800b70c <__kernel_cos+0x17c>)
 800b668:	429e      	cmp	r6, r3
 800b66a:	4680      	mov	r8, r0
 800b66c:	4689      	mov	r9, r1
 800b66e:	dc11      	bgt.n	800b694 <__kernel_cos+0x104>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4650      	mov	r0, sl
 800b676:	4659      	mov	r1, fp
 800b678:	f7f4 fe06 	bl	8000288 <__aeabi_dsub>
 800b67c:	460b      	mov	r3, r1
 800b67e:	4924      	ldr	r1, [pc, #144]	; (800b710 <__kernel_cos+0x180>)
 800b680:	4602      	mov	r2, r0
 800b682:	2000      	movs	r0, #0
 800b684:	f7f4 fe00 	bl	8000288 <__aeabi_dsub>
 800b688:	ecbd 8b02 	vpop	{d8}
 800b68c:	ec41 0b10 	vmov	d0, r0, r1
 800b690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b694:	4b1f      	ldr	r3, [pc, #124]	; (800b714 <__kernel_cos+0x184>)
 800b696:	491e      	ldr	r1, [pc, #120]	; (800b710 <__kernel_cos+0x180>)
 800b698:	429e      	cmp	r6, r3
 800b69a:	bfcc      	ite	gt
 800b69c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b718 <__kernel_cos+0x188>)
 800b69e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b6a2:	2400      	movs	r4, #0
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	f7f4 fded 	bl	8000288 <__aeabi_dsub>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	462b      	mov	r3, r5
 800b6b6:	4650      	mov	r0, sl
 800b6b8:	4659      	mov	r1, fp
 800b6ba:	f7f4 fde5 	bl	8000288 <__aeabi_dsub>
 800b6be:	4642      	mov	r2, r8
 800b6c0:	464b      	mov	r3, r9
 800b6c2:	f7f4 fde1 	bl	8000288 <__aeabi_dsub>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	e7d9      	b.n	800b684 <__kernel_cos+0xf4>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	490f      	ldr	r1, [pc, #60]	; (800b710 <__kernel_cos+0x180>)
 800b6d4:	e7d8      	b.n	800b688 <__kernel_cos+0xf8>
 800b6d6:	bf00      	nop
 800b6d8:	be8838d4 	.word	0xbe8838d4
 800b6dc:	bda8fae9 	.word	0xbda8fae9
 800b6e0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b6e4:	3e21ee9e 	.word	0x3e21ee9e
 800b6e8:	809c52ad 	.word	0x809c52ad
 800b6ec:	3e927e4f 	.word	0x3e927e4f
 800b6f0:	19cb1590 	.word	0x19cb1590
 800b6f4:	3efa01a0 	.word	0x3efa01a0
 800b6f8:	16c15177 	.word	0x16c15177
 800b6fc:	3f56c16c 	.word	0x3f56c16c
 800b700:	5555554c 	.word	0x5555554c
 800b704:	3fa55555 	.word	0x3fa55555
 800b708:	3fe00000 	.word	0x3fe00000
 800b70c:	3fd33332 	.word	0x3fd33332
 800b710:	3ff00000 	.word	0x3ff00000
 800b714:	3fe90000 	.word	0x3fe90000
 800b718:	3fd20000 	.word	0x3fd20000
 800b71c:	00000000 	.word	0x00000000

0800b720 <__kernel_rem_pio2>:
 800b720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b724:	ed2d 8b02 	vpush	{d8}
 800b728:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b72c:	1ed4      	subs	r4, r2, #3
 800b72e:	9308      	str	r3, [sp, #32]
 800b730:	9101      	str	r1, [sp, #4]
 800b732:	4bc5      	ldr	r3, [pc, #788]	; (800ba48 <__kernel_rem_pio2+0x328>)
 800b734:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b736:	9009      	str	r0, [sp, #36]	; 0x24
 800b738:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b73c:	9304      	str	r3, [sp, #16]
 800b73e:	9b08      	ldr	r3, [sp, #32]
 800b740:	3b01      	subs	r3, #1
 800b742:	9307      	str	r3, [sp, #28]
 800b744:	2318      	movs	r3, #24
 800b746:	fb94 f4f3 	sdiv	r4, r4, r3
 800b74a:	f06f 0317 	mvn.w	r3, #23
 800b74e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b752:	fb04 3303 	mla	r3, r4, r3, r3
 800b756:	eb03 0a02 	add.w	sl, r3, r2
 800b75a:	9b04      	ldr	r3, [sp, #16]
 800b75c:	9a07      	ldr	r2, [sp, #28]
 800b75e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ba38 <__kernel_rem_pio2+0x318>
 800b762:	eb03 0802 	add.w	r8, r3, r2
 800b766:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b768:	1aa7      	subs	r7, r4, r2
 800b76a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b76e:	ae22      	add	r6, sp, #136	; 0x88
 800b770:	2500      	movs	r5, #0
 800b772:	4545      	cmp	r5, r8
 800b774:	dd13      	ble.n	800b79e <__kernel_rem_pio2+0x7e>
 800b776:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800ba38 <__kernel_rem_pio2+0x318>
 800b77a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b77e:	2600      	movs	r6, #0
 800b780:	9b04      	ldr	r3, [sp, #16]
 800b782:	429e      	cmp	r6, r3
 800b784:	dc32      	bgt.n	800b7ec <__kernel_rem_pio2+0xcc>
 800b786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b788:	9302      	str	r3, [sp, #8]
 800b78a:	9b08      	ldr	r3, [sp, #32]
 800b78c:	199d      	adds	r5, r3, r6
 800b78e:	ab22      	add	r3, sp, #136	; 0x88
 800b790:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b794:	9306      	str	r3, [sp, #24]
 800b796:	ec59 8b18 	vmov	r8, r9, d8
 800b79a:	2700      	movs	r7, #0
 800b79c:	e01f      	b.n	800b7de <__kernel_rem_pio2+0xbe>
 800b79e:	42ef      	cmn	r7, r5
 800b7a0:	d407      	bmi.n	800b7b2 <__kernel_rem_pio2+0x92>
 800b7a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b7a6:	f7f4 febd 	bl	8000524 <__aeabi_i2d>
 800b7aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b7ae:	3501      	adds	r5, #1
 800b7b0:	e7df      	b.n	800b772 <__kernel_rem_pio2+0x52>
 800b7b2:	ec51 0b18 	vmov	r0, r1, d8
 800b7b6:	e7f8      	b.n	800b7aa <__kernel_rem_pio2+0x8a>
 800b7b8:	9906      	ldr	r1, [sp, #24]
 800b7ba:	9d02      	ldr	r5, [sp, #8]
 800b7bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b7c0:	9106      	str	r1, [sp, #24]
 800b7c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b7c6:	9502      	str	r5, [sp, #8]
 800b7c8:	f7f4 ff16 	bl	80005f8 <__aeabi_dmul>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	4640      	mov	r0, r8
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	f7f4 fd5a 	bl	800028c <__adddf3>
 800b7d8:	3701      	adds	r7, #1
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4689      	mov	r9, r1
 800b7de:	9b07      	ldr	r3, [sp, #28]
 800b7e0:	429f      	cmp	r7, r3
 800b7e2:	dde9      	ble.n	800b7b8 <__kernel_rem_pio2+0x98>
 800b7e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b7e8:	3601      	adds	r6, #1
 800b7ea:	e7c9      	b.n	800b780 <__kernel_rem_pio2+0x60>
 800b7ec:	9b04      	ldr	r3, [sp, #16]
 800b7ee:	aa0e      	add	r2, sp, #56	; 0x38
 800b7f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7f4:	930c      	str	r3, [sp, #48]	; 0x30
 800b7f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b7f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b7fc:	9c04      	ldr	r4, [sp, #16]
 800b7fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800b800:	ab9a      	add	r3, sp, #616	; 0x268
 800b802:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b806:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b80a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b80e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b812:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b816:	ab9a      	add	r3, sp, #616	; 0x268
 800b818:	445b      	add	r3, fp
 800b81a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b81e:	2500      	movs	r5, #0
 800b820:	1b63      	subs	r3, r4, r5
 800b822:	2b00      	cmp	r3, #0
 800b824:	dc78      	bgt.n	800b918 <__kernel_rem_pio2+0x1f8>
 800b826:	4650      	mov	r0, sl
 800b828:	ec49 8b10 	vmov	d0, r8, r9
 800b82c:	f000 ff28 	bl	800c680 <scalbn>
 800b830:	ec57 6b10 	vmov	r6, r7, d0
 800b834:	2200      	movs	r2, #0
 800b836:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b83a:	ee10 0a10 	vmov	r0, s0
 800b83e:	4639      	mov	r1, r7
 800b840:	f7f4 feda 	bl	80005f8 <__aeabi_dmul>
 800b844:	ec41 0b10 	vmov	d0, r0, r1
 800b848:	f000 fe96 	bl	800c578 <floor>
 800b84c:	2200      	movs	r2, #0
 800b84e:	ec51 0b10 	vmov	r0, r1, d0
 800b852:	4b7e      	ldr	r3, [pc, #504]	; (800ba4c <__kernel_rem_pio2+0x32c>)
 800b854:	f7f4 fed0 	bl	80005f8 <__aeabi_dmul>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4630      	mov	r0, r6
 800b85e:	4639      	mov	r1, r7
 800b860:	f7f4 fd12 	bl	8000288 <__aeabi_dsub>
 800b864:	460f      	mov	r7, r1
 800b866:	4606      	mov	r6, r0
 800b868:	f7f5 f976 	bl	8000b58 <__aeabi_d2iz>
 800b86c:	9006      	str	r0, [sp, #24]
 800b86e:	f7f4 fe59 	bl	8000524 <__aeabi_i2d>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	4630      	mov	r0, r6
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 fd05 	bl	8000288 <__aeabi_dsub>
 800b87e:	f1ba 0f00 	cmp.w	sl, #0
 800b882:	4606      	mov	r6, r0
 800b884:	460f      	mov	r7, r1
 800b886:	dd6c      	ble.n	800b962 <__kernel_rem_pio2+0x242>
 800b888:	1e62      	subs	r2, r4, #1
 800b88a:	ab0e      	add	r3, sp, #56	; 0x38
 800b88c:	f1ca 0118 	rsb	r1, sl, #24
 800b890:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b894:	9d06      	ldr	r5, [sp, #24]
 800b896:	fa40 f301 	asr.w	r3, r0, r1
 800b89a:	441d      	add	r5, r3
 800b89c:	408b      	lsls	r3, r1
 800b89e:	1ac0      	subs	r0, r0, r3
 800b8a0:	ab0e      	add	r3, sp, #56	; 0x38
 800b8a2:	9506      	str	r5, [sp, #24]
 800b8a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b8a8:	f1ca 0317 	rsb	r3, sl, #23
 800b8ac:	fa40 f303 	asr.w	r3, r0, r3
 800b8b0:	9302      	str	r3, [sp, #8]
 800b8b2:	9b02      	ldr	r3, [sp, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd62      	ble.n	800b97e <__kernel_rem_pio2+0x25e>
 800b8b8:	9b06      	ldr	r3, [sp, #24]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	3301      	adds	r3, #1
 800b8be:	9306      	str	r3, [sp, #24]
 800b8c0:	4615      	mov	r5, r2
 800b8c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b8c6:	4294      	cmp	r4, r2
 800b8c8:	f300 8095 	bgt.w	800b9f6 <__kernel_rem_pio2+0x2d6>
 800b8cc:	f1ba 0f00 	cmp.w	sl, #0
 800b8d0:	dd07      	ble.n	800b8e2 <__kernel_rem_pio2+0x1c2>
 800b8d2:	f1ba 0f01 	cmp.w	sl, #1
 800b8d6:	f000 80a2 	beq.w	800ba1e <__kernel_rem_pio2+0x2fe>
 800b8da:	f1ba 0f02 	cmp.w	sl, #2
 800b8de:	f000 80c1 	beq.w	800ba64 <__kernel_rem_pio2+0x344>
 800b8e2:	9b02      	ldr	r3, [sp, #8]
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	d14a      	bne.n	800b97e <__kernel_rem_pio2+0x25e>
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	463b      	mov	r3, r7
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	4958      	ldr	r1, [pc, #352]	; (800ba50 <__kernel_rem_pio2+0x330>)
 800b8f0:	f7f4 fcca 	bl	8000288 <__aeabi_dsub>
 800b8f4:	4606      	mov	r6, r0
 800b8f6:	460f      	mov	r7, r1
 800b8f8:	2d00      	cmp	r5, #0
 800b8fa:	d040      	beq.n	800b97e <__kernel_rem_pio2+0x25e>
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ba40 <__kernel_rem_pio2+0x320>
 800b902:	f000 febd 	bl	800c680 <scalbn>
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	ec53 2b10 	vmov	r2, r3, d0
 800b90e:	f7f4 fcbb 	bl	8000288 <__aeabi_dsub>
 800b912:	4606      	mov	r6, r0
 800b914:	460f      	mov	r7, r1
 800b916:	e032      	b.n	800b97e <__kernel_rem_pio2+0x25e>
 800b918:	2200      	movs	r2, #0
 800b91a:	4b4e      	ldr	r3, [pc, #312]	; (800ba54 <__kernel_rem_pio2+0x334>)
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	f7f4 fe6a 	bl	80005f8 <__aeabi_dmul>
 800b924:	f7f5 f918 	bl	8000b58 <__aeabi_d2iz>
 800b928:	f7f4 fdfc 	bl	8000524 <__aeabi_i2d>
 800b92c:	2200      	movs	r2, #0
 800b92e:	4b4a      	ldr	r3, [pc, #296]	; (800ba58 <__kernel_rem_pio2+0x338>)
 800b930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b934:	f7f4 fe60 	bl	80005f8 <__aeabi_dmul>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4640      	mov	r0, r8
 800b93e:	4649      	mov	r1, r9
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	f7f5 f908 	bl	8000b58 <__aeabi_d2iz>
 800b948:	ab0e      	add	r3, sp, #56	; 0x38
 800b94a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b94e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b956:	f7f4 fc99 	bl	800028c <__adddf3>
 800b95a:	3501      	adds	r5, #1
 800b95c:	4680      	mov	r8, r0
 800b95e:	4689      	mov	r9, r1
 800b960:	e75e      	b.n	800b820 <__kernel_rem_pio2+0x100>
 800b962:	d105      	bne.n	800b970 <__kernel_rem_pio2+0x250>
 800b964:	1e63      	subs	r3, r4, #1
 800b966:	aa0e      	add	r2, sp, #56	; 0x38
 800b968:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b96c:	15c3      	asrs	r3, r0, #23
 800b96e:	e79f      	b.n	800b8b0 <__kernel_rem_pio2+0x190>
 800b970:	2200      	movs	r2, #0
 800b972:	4b3a      	ldr	r3, [pc, #232]	; (800ba5c <__kernel_rem_pio2+0x33c>)
 800b974:	f7f5 f8c6 	bl	8000b04 <__aeabi_dcmpge>
 800b978:	2800      	cmp	r0, #0
 800b97a:	d139      	bne.n	800b9f0 <__kernel_rem_pio2+0x2d0>
 800b97c:	9002      	str	r0, [sp, #8]
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f5 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f000 80c7 	beq.w	800bb1e <__kernel_rem_pio2+0x3fe>
 800b990:	1e65      	subs	r5, r4, #1
 800b992:	462b      	mov	r3, r5
 800b994:	2200      	movs	r2, #0
 800b996:	9904      	ldr	r1, [sp, #16]
 800b998:	428b      	cmp	r3, r1
 800b99a:	da6a      	bge.n	800ba72 <__kernel_rem_pio2+0x352>
 800b99c:	2a00      	cmp	r2, #0
 800b99e:	f000 8088 	beq.w	800bab2 <__kernel_rem_pio2+0x392>
 800b9a2:	ab0e      	add	r3, sp, #56	; 0x38
 800b9a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800b9a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80b4 	beq.w	800bb1a <__kernel_rem_pio2+0x3fa>
 800b9b2:	4650      	mov	r0, sl
 800b9b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800ba40 <__kernel_rem_pio2+0x320>
 800b9b8:	f000 fe62 	bl	800c680 <scalbn>
 800b9bc:	00ec      	lsls	r4, r5, #3
 800b9be:	ab72      	add	r3, sp, #456	; 0x1c8
 800b9c0:	191e      	adds	r6, r3, r4
 800b9c2:	ec59 8b10 	vmov	r8, r9, d0
 800b9c6:	f106 0a08 	add.w	sl, r6, #8
 800b9ca:	462f      	mov	r7, r5
 800b9cc:	2f00      	cmp	r7, #0
 800b9ce:	f280 80df 	bge.w	800bb90 <__kernel_rem_pio2+0x470>
 800b9d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800ba38 <__kernel_rem_pio2+0x318>
 800b9d6:	f04f 0a00 	mov.w	sl, #0
 800b9da:	eba5 030a 	sub.w	r3, r5, sl
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f2c0 810a 	blt.w	800bbf8 <__kernel_rem_pio2+0x4d8>
 800b9e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ba60 <__kernel_rem_pio2+0x340>
 800b9e8:	ec59 8b18 	vmov	r8, r9, d8
 800b9ec:	2700      	movs	r7, #0
 800b9ee:	e0f5      	b.n	800bbdc <__kernel_rem_pio2+0x4bc>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	9302      	str	r3, [sp, #8]
 800b9f4:	e760      	b.n	800b8b8 <__kernel_rem_pio2+0x198>
 800b9f6:	ab0e      	add	r3, sp, #56	; 0x38
 800b9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9fc:	b94d      	cbnz	r5, 800ba12 <__kernel_rem_pio2+0x2f2>
 800b9fe:	b12b      	cbz	r3, 800ba0c <__kernel_rem_pio2+0x2ec>
 800ba00:	a80e      	add	r0, sp, #56	; 0x38
 800ba02:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ba06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	3201      	adds	r2, #1
 800ba0e:	461d      	mov	r5, r3
 800ba10:	e759      	b.n	800b8c6 <__kernel_rem_pio2+0x1a6>
 800ba12:	a80e      	add	r0, sp, #56	; 0x38
 800ba14:	1acb      	subs	r3, r1, r3
 800ba16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	e7f6      	b.n	800ba0c <__kernel_rem_pio2+0x2ec>
 800ba1e:	1e62      	subs	r2, r4, #1
 800ba20:	ab0e      	add	r3, sp, #56	; 0x38
 800ba22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ba2a:	a90e      	add	r1, sp, #56	; 0x38
 800ba2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ba30:	e757      	b.n	800b8e2 <__kernel_rem_pio2+0x1c2>
 800ba32:	bf00      	nop
 800ba34:	f3af 8000 	nop.w
	...
 800ba44:	3ff00000 	.word	0x3ff00000
 800ba48:	080113e0 	.word	0x080113e0
 800ba4c:	40200000 	.word	0x40200000
 800ba50:	3ff00000 	.word	0x3ff00000
 800ba54:	3e700000 	.word	0x3e700000
 800ba58:	41700000 	.word	0x41700000
 800ba5c:	3fe00000 	.word	0x3fe00000
 800ba60:	080113a0 	.word	0x080113a0
 800ba64:	1e62      	subs	r2, r4, #1
 800ba66:	ab0e      	add	r3, sp, #56	; 0x38
 800ba68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ba70:	e7db      	b.n	800ba2a <__kernel_rem_pio2+0x30a>
 800ba72:	a90e      	add	r1, sp, #56	; 0x38
 800ba74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	430a      	orrs	r2, r1
 800ba7c:	e78b      	b.n	800b996 <__kernel_rem_pio2+0x276>
 800ba7e:	3301      	adds	r3, #1
 800ba80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ba84:	2900      	cmp	r1, #0
 800ba86:	d0fa      	beq.n	800ba7e <__kernel_rem_pio2+0x35e>
 800ba88:	9a08      	ldr	r2, [sp, #32]
 800ba8a:	4422      	add	r2, r4
 800ba8c:	00d2      	lsls	r2, r2, #3
 800ba8e:	a922      	add	r1, sp, #136	; 0x88
 800ba90:	18e3      	adds	r3, r4, r3
 800ba92:	9206      	str	r2, [sp, #24]
 800ba94:	440a      	add	r2, r1
 800ba96:	9302      	str	r3, [sp, #8]
 800ba98:	f10b 0108 	add.w	r1, fp, #8
 800ba9c:	f102 0308 	add.w	r3, r2, #8
 800baa0:	1c66      	adds	r6, r4, #1
 800baa2:	910a      	str	r1, [sp, #40]	; 0x28
 800baa4:	2500      	movs	r5, #0
 800baa6:	930d      	str	r3, [sp, #52]	; 0x34
 800baa8:	9b02      	ldr	r3, [sp, #8]
 800baaa:	42b3      	cmp	r3, r6
 800baac:	da04      	bge.n	800bab8 <__kernel_rem_pio2+0x398>
 800baae:	461c      	mov	r4, r3
 800bab0:	e6a6      	b.n	800b800 <__kernel_rem_pio2+0xe0>
 800bab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bab4:	2301      	movs	r3, #1
 800bab6:	e7e3      	b.n	800ba80 <__kernel_rem_pio2+0x360>
 800bab8:	9b06      	ldr	r3, [sp, #24]
 800baba:	18ef      	adds	r7, r5, r3
 800babc:	ab22      	add	r3, sp, #136	; 0x88
 800babe:	441f      	add	r7, r3
 800bac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bac2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bac6:	f7f4 fd2d 	bl	8000524 <__aeabi_i2d>
 800baca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bacc:	461c      	mov	r4, r3
 800bace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad0:	e9c7 0100 	strd	r0, r1, [r7]
 800bad4:	eb03 0b05 	add.w	fp, r3, r5
 800bad8:	2700      	movs	r7, #0
 800bada:	f04f 0800 	mov.w	r8, #0
 800bade:	f04f 0900 	mov.w	r9, #0
 800bae2:	9b07      	ldr	r3, [sp, #28]
 800bae4:	429f      	cmp	r7, r3
 800bae6:	dd08      	ble.n	800bafa <__kernel_rem_pio2+0x3da>
 800bae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baea:	aa72      	add	r2, sp, #456	; 0x1c8
 800baec:	18eb      	adds	r3, r5, r3
 800baee:	4413      	add	r3, r2
 800baf0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800baf4:	3601      	adds	r6, #1
 800baf6:	3508      	adds	r5, #8
 800baf8:	e7d6      	b.n	800baa8 <__kernel_rem_pio2+0x388>
 800bafa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bafe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bb02:	f7f4 fd79 	bl	80005f8 <__aeabi_dmul>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4640      	mov	r0, r8
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	f7f4 fbbd 	bl	800028c <__adddf3>
 800bb12:	3701      	adds	r7, #1
 800bb14:	4680      	mov	r8, r0
 800bb16:	4689      	mov	r9, r1
 800bb18:	e7e3      	b.n	800bae2 <__kernel_rem_pio2+0x3c2>
 800bb1a:	3d01      	subs	r5, #1
 800bb1c:	e741      	b.n	800b9a2 <__kernel_rem_pio2+0x282>
 800bb1e:	f1ca 0000 	rsb	r0, sl, #0
 800bb22:	ec47 6b10 	vmov	d0, r6, r7
 800bb26:	f000 fdab 	bl	800c680 <scalbn>
 800bb2a:	ec57 6b10 	vmov	r6, r7, d0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4b99      	ldr	r3, [pc, #612]	; (800bd98 <__kernel_rem_pio2+0x678>)
 800bb32:	ee10 0a10 	vmov	r0, s0
 800bb36:	4639      	mov	r1, r7
 800bb38:	f7f4 ffe4 	bl	8000b04 <__aeabi_dcmpge>
 800bb3c:	b1f8      	cbz	r0, 800bb7e <__kernel_rem_pio2+0x45e>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4b96      	ldr	r3, [pc, #600]	; (800bd9c <__kernel_rem_pio2+0x67c>)
 800bb42:	4630      	mov	r0, r6
 800bb44:	4639      	mov	r1, r7
 800bb46:	f7f4 fd57 	bl	80005f8 <__aeabi_dmul>
 800bb4a:	f7f5 f805 	bl	8000b58 <__aeabi_d2iz>
 800bb4e:	4680      	mov	r8, r0
 800bb50:	f7f4 fce8 	bl	8000524 <__aeabi_i2d>
 800bb54:	2200      	movs	r2, #0
 800bb56:	4b90      	ldr	r3, [pc, #576]	; (800bd98 <__kernel_rem_pio2+0x678>)
 800bb58:	f7f4 fd4e 	bl	80005f8 <__aeabi_dmul>
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4602      	mov	r2, r0
 800bb60:	4639      	mov	r1, r7
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7f4 fb90 	bl	8000288 <__aeabi_dsub>
 800bb68:	f7f4 fff6 	bl	8000b58 <__aeabi_d2iz>
 800bb6c:	1c65      	adds	r5, r4, #1
 800bb6e:	ab0e      	add	r3, sp, #56	; 0x38
 800bb70:	f10a 0a18 	add.w	sl, sl, #24
 800bb74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb78:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bb7c:	e719      	b.n	800b9b2 <__kernel_rem_pio2+0x292>
 800bb7e:	4630      	mov	r0, r6
 800bb80:	4639      	mov	r1, r7
 800bb82:	f7f4 ffe9 	bl	8000b58 <__aeabi_d2iz>
 800bb86:	ab0e      	add	r3, sp, #56	; 0x38
 800bb88:	4625      	mov	r5, r4
 800bb8a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bb8e:	e710      	b.n	800b9b2 <__kernel_rem_pio2+0x292>
 800bb90:	ab0e      	add	r3, sp, #56	; 0x38
 800bb92:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bb96:	f7f4 fcc5 	bl	8000524 <__aeabi_i2d>
 800bb9a:	4642      	mov	r2, r8
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	f7f4 fd2b 	bl	80005f8 <__aeabi_dmul>
 800bba2:	2200      	movs	r2, #0
 800bba4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bba8:	4b7c      	ldr	r3, [pc, #496]	; (800bd9c <__kernel_rem_pio2+0x67c>)
 800bbaa:	4640      	mov	r0, r8
 800bbac:	4649      	mov	r1, r9
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	3f01      	subs	r7, #1
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4689      	mov	r9, r1
 800bbb8:	e708      	b.n	800b9cc <__kernel_rem_pio2+0x2ac>
 800bbba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800bbc6:	f7f4 fd17 	bl	80005f8 <__aeabi_dmul>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 fb5b 	bl	800028c <__adddf3>
 800bbd6:	3701      	adds	r7, #1
 800bbd8:	4680      	mov	r8, r0
 800bbda:	4689      	mov	r9, r1
 800bbdc:	9b04      	ldr	r3, [sp, #16]
 800bbde:	429f      	cmp	r7, r3
 800bbe0:	dc01      	bgt.n	800bbe6 <__kernel_rem_pio2+0x4c6>
 800bbe2:	45ba      	cmp	sl, r7
 800bbe4:	dae9      	bge.n	800bbba <__kernel_rem_pio2+0x49a>
 800bbe6:	ab4a      	add	r3, sp, #296	; 0x128
 800bbe8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bbec:	e9c3 8900 	strd	r8, r9, [r3]
 800bbf0:	f10a 0a01 	add.w	sl, sl, #1
 800bbf4:	3e08      	subs	r6, #8
 800bbf6:	e6f0      	b.n	800b9da <__kernel_rem_pio2+0x2ba>
 800bbf8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bbfa:	2b03      	cmp	r3, #3
 800bbfc:	d85b      	bhi.n	800bcb6 <__kernel_rem_pio2+0x596>
 800bbfe:	e8df f003 	tbb	[pc, r3]
 800bc02:	264a      	.short	0x264a
 800bc04:	0226      	.short	0x0226
 800bc06:	ab9a      	add	r3, sp, #616	; 0x268
 800bc08:	441c      	add	r4, r3
 800bc0a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bc0e:	46a2      	mov	sl, r4
 800bc10:	46ab      	mov	fp, r5
 800bc12:	f1bb 0f00 	cmp.w	fp, #0
 800bc16:	dc6c      	bgt.n	800bcf2 <__kernel_rem_pio2+0x5d2>
 800bc18:	46a2      	mov	sl, r4
 800bc1a:	46ab      	mov	fp, r5
 800bc1c:	f1bb 0f01 	cmp.w	fp, #1
 800bc20:	f300 8086 	bgt.w	800bd30 <__kernel_rem_pio2+0x610>
 800bc24:	2000      	movs	r0, #0
 800bc26:	2100      	movs	r1, #0
 800bc28:	2d01      	cmp	r5, #1
 800bc2a:	f300 80a0 	bgt.w	800bd6e <__kernel_rem_pio2+0x64e>
 800bc2e:	9b02      	ldr	r3, [sp, #8]
 800bc30:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bc34:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f040 809e 	bne.w	800bd7a <__kernel_rem_pio2+0x65a>
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	e9c3 7800 	strd	r7, r8, [r3]
 800bc44:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bc48:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bc4c:	e033      	b.n	800bcb6 <__kernel_rem_pio2+0x596>
 800bc4e:	3408      	adds	r4, #8
 800bc50:	ab4a      	add	r3, sp, #296	; 0x128
 800bc52:	441c      	add	r4, r3
 800bc54:	462e      	mov	r6, r5
 800bc56:	2000      	movs	r0, #0
 800bc58:	2100      	movs	r1, #0
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	da3a      	bge.n	800bcd4 <__kernel_rem_pio2+0x5b4>
 800bc5e:	9b02      	ldr	r3, [sp, #8]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d03d      	beq.n	800bce0 <__kernel_rem_pio2+0x5c0>
 800bc64:	4602      	mov	r2, r0
 800bc66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc6a:	9c01      	ldr	r4, [sp, #4]
 800bc6c:	e9c4 2300 	strd	r2, r3, [r4]
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bc78:	f7f4 fb06 	bl	8000288 <__aeabi_dsub>
 800bc7c:	ae4c      	add	r6, sp, #304	; 0x130
 800bc7e:	2401      	movs	r4, #1
 800bc80:	42a5      	cmp	r5, r4
 800bc82:	da30      	bge.n	800bce6 <__kernel_rem_pio2+0x5c6>
 800bc84:	9b02      	ldr	r3, [sp, #8]
 800bc86:	b113      	cbz	r3, 800bc8e <__kernel_rem_pio2+0x56e>
 800bc88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bc94:	e00f      	b.n	800bcb6 <__kernel_rem_pio2+0x596>
 800bc96:	ab9a      	add	r3, sp, #616	; 0x268
 800bc98:	441c      	add	r4, r3
 800bc9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bc9e:	2000      	movs	r0, #0
 800bca0:	2100      	movs	r1, #0
 800bca2:	2d00      	cmp	r5, #0
 800bca4:	da10      	bge.n	800bcc8 <__kernel_rem_pio2+0x5a8>
 800bca6:	9b02      	ldr	r3, [sp, #8]
 800bca8:	b113      	cbz	r3, 800bcb0 <__kernel_rem_pio2+0x590>
 800bcaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcae:	4619      	mov	r1, r3
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	e9c3 0100 	strd	r0, r1, [r3]
 800bcb6:	9b06      	ldr	r3, [sp, #24]
 800bcb8:	f003 0007 	and.w	r0, r3, #7
 800bcbc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bcc0:	ecbd 8b02 	vpop	{d8}
 800bcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bccc:	f7f4 fade 	bl	800028c <__adddf3>
 800bcd0:	3d01      	subs	r5, #1
 800bcd2:	e7e6      	b.n	800bca2 <__kernel_rem_pio2+0x582>
 800bcd4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bcd8:	f7f4 fad8 	bl	800028c <__adddf3>
 800bcdc:	3e01      	subs	r6, #1
 800bcde:	e7bc      	b.n	800bc5a <__kernel_rem_pio2+0x53a>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	e7c1      	b.n	800bc6a <__kernel_rem_pio2+0x54a>
 800bce6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bcea:	f7f4 facf 	bl	800028c <__adddf3>
 800bcee:	3401      	adds	r4, #1
 800bcf0:	e7c6      	b.n	800bc80 <__kernel_rem_pio2+0x560>
 800bcf2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800bcf6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	ec53 2b17 	vmov	r2, r3, d7
 800bd00:	4649      	mov	r1, r9
 800bd02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd06:	f7f4 fac1 	bl	800028c <__adddf3>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	460f      	mov	r7, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fab7 	bl	8000288 <__aeabi_dsub>
 800bd1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd1e:	f7f4 fab5 	bl	800028c <__adddf3>
 800bd22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd26:	e9ca 0100 	strd	r0, r1, [sl]
 800bd2a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800bd2e:	e770      	b.n	800bc12 <__kernel_rem_pio2+0x4f2>
 800bd30:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800bd34:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bd38:	4630      	mov	r0, r6
 800bd3a:	ec53 2b17 	vmov	r2, r3, d7
 800bd3e:	4639      	mov	r1, r7
 800bd40:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bd44:	f7f4 faa2 	bl	800028c <__adddf3>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	4689      	mov	r9, r1
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fa98 	bl	8000288 <__aeabi_dsub>
 800bd58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd5c:	f7f4 fa96 	bl	800028c <__adddf3>
 800bd60:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bd64:	e9ca 0100 	strd	r0, r1, [sl]
 800bd68:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bd6c:	e756      	b.n	800bc1c <__kernel_rem_pio2+0x4fc>
 800bd6e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bd72:	f7f4 fa8b 	bl	800028c <__adddf3>
 800bd76:	3d01      	subs	r5, #1
 800bd78:	e756      	b.n	800bc28 <__kernel_rem_pio2+0x508>
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	9a01      	ldr	r2, [sp, #4]
 800bd7e:	601f      	str	r7, [r3, #0]
 800bd80:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bd84:	605c      	str	r4, [r3, #4]
 800bd86:	609d      	str	r5, [r3, #8]
 800bd88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd8c:	60d3      	str	r3, [r2, #12]
 800bd8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd92:	6110      	str	r0, [r2, #16]
 800bd94:	6153      	str	r3, [r2, #20]
 800bd96:	e78e      	b.n	800bcb6 <__kernel_rem_pio2+0x596>
 800bd98:	41700000 	.word	0x41700000
 800bd9c:	3e700000 	.word	0x3e700000

0800bda0 <__kernel_sin>:
 800bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda4:	ec55 4b10 	vmov	r4, r5, d0
 800bda8:	b085      	sub	sp, #20
 800bdaa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bdae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bdb2:	ed8d 1b00 	vstr	d1, [sp]
 800bdb6:	9002      	str	r0, [sp, #8]
 800bdb8:	da06      	bge.n	800bdc8 <__kernel_sin+0x28>
 800bdba:	ee10 0a10 	vmov	r0, s0
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 feca 	bl	8000b58 <__aeabi_d2iz>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d051      	beq.n	800be6c <__kernel_sin+0xcc>
 800bdc8:	4622      	mov	r2, r4
 800bdca:	462b      	mov	r3, r5
 800bdcc:	4620      	mov	r0, r4
 800bdce:	4629      	mov	r1, r5
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	468b      	mov	fp, r1
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	a341      	add	r3, pc, #260	; (adr r3, 800beec <__kernel_sin+0x14c>)
 800bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdea:	4680      	mov	r8, r0
 800bdec:	4689      	mov	r9, r1
 800bdee:	4650      	mov	r0, sl
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	f7f4 fc01 	bl	80005f8 <__aeabi_dmul>
 800bdf6:	a33f      	add	r3, pc, #252	; (adr r3, 800bef4 <__kernel_sin+0x154>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	f7f4 fa44 	bl	8000288 <__aeabi_dsub>
 800be00:	4652      	mov	r2, sl
 800be02:	465b      	mov	r3, fp
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	a33c      	add	r3, pc, #240	; (adr r3, 800befc <__kernel_sin+0x15c>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 fa3d 	bl	800028c <__adddf3>
 800be12:	4652      	mov	r2, sl
 800be14:	465b      	mov	r3, fp
 800be16:	f7f4 fbef 	bl	80005f8 <__aeabi_dmul>
 800be1a:	a33a      	add	r3, pc, #232	; (adr r3, 800bf04 <__kernel_sin+0x164>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 fa32 	bl	8000288 <__aeabi_dsub>
 800be24:	4652      	mov	r2, sl
 800be26:	465b      	mov	r3, fp
 800be28:	f7f4 fbe6 	bl	80005f8 <__aeabi_dmul>
 800be2c:	a337      	add	r3, pc, #220	; (adr r3, 800bf0c <__kernel_sin+0x16c>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa2b 	bl	800028c <__adddf3>
 800be36:	9b02      	ldr	r3, [sp, #8]
 800be38:	4606      	mov	r6, r0
 800be3a:	460f      	mov	r7, r1
 800be3c:	b9db      	cbnz	r3, 800be76 <__kernel_sin+0xd6>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4650      	mov	r0, sl
 800be44:	4659      	mov	r1, fp
 800be46:	f7f4 fbd7 	bl	80005f8 <__aeabi_dmul>
 800be4a:	a325      	add	r3, pc, #148	; (adr r3, 800bee0 <__kernel_sin+0x140>)
 800be4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be50:	f7f4 fa1a 	bl	8000288 <__aeabi_dsub>
 800be54:	4642      	mov	r2, r8
 800be56:	464b      	mov	r3, r9
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4620      	mov	r0, r4
 800be62:	4629      	mov	r1, r5
 800be64:	f7f4 fa12 	bl	800028c <__adddf3>
 800be68:	4604      	mov	r4, r0
 800be6a:	460d      	mov	r5, r1
 800be6c:	ec45 4b10 	vmov	d0, r4, r5
 800be70:	b005      	add	sp, #20
 800be72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be76:	2200      	movs	r2, #0
 800be78:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <__kernel_sin+0x148>)
 800be7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	4632      	mov	r2, r6
 800be84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be88:	463b      	mov	r3, r7
 800be8a:	4640      	mov	r0, r8
 800be8c:	4649      	mov	r1, r9
 800be8e:	f7f4 fbb3 	bl	80005f8 <__aeabi_dmul>
 800be92:	4602      	mov	r2, r0
 800be94:	460b      	mov	r3, r1
 800be96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be9a:	f7f4 f9f5 	bl	8000288 <__aeabi_dsub>
 800be9e:	4652      	mov	r2, sl
 800bea0:	465b      	mov	r3, fp
 800bea2:	f7f4 fba9 	bl	80005f8 <__aeabi_dmul>
 800bea6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800beaa:	f7f4 f9ed 	bl	8000288 <__aeabi_dsub>
 800beae:	a30c      	add	r3, pc, #48	; (adr r3, 800bee0 <__kernel_sin+0x140>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	4640      	mov	r0, r8
 800beba:	4649      	mov	r1, r9
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	4639      	mov	r1, r7
 800bec8:	f7f4 f9e0 	bl	800028c <__adddf3>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 f9d8 	bl	8000288 <__aeabi_dsub>
 800bed8:	e7c6      	b.n	800be68 <__kernel_sin+0xc8>
 800beda:	bf00      	nop
 800bedc:	f3af 8000 	nop.w
 800bee0:	55555549 	.word	0x55555549
 800bee4:	3fc55555 	.word	0x3fc55555
 800bee8:	3fe00000 	.word	0x3fe00000
 800beec:	5acfd57c 	.word	0x5acfd57c
 800bef0:	3de5d93a 	.word	0x3de5d93a
 800bef4:	8a2b9ceb 	.word	0x8a2b9ceb
 800bef8:	3e5ae5e6 	.word	0x3e5ae5e6
 800befc:	57b1fe7d 	.word	0x57b1fe7d
 800bf00:	3ec71de3 	.word	0x3ec71de3
 800bf04:	19c161d5 	.word	0x19c161d5
 800bf08:	3f2a01a0 	.word	0x3f2a01a0
 800bf0c:	1110f8a6 	.word	0x1110f8a6
 800bf10:	3f811111 	.word	0x3f811111

0800bf14 <__kernel_cosf>:
 800bf14:	ee10 3a10 	vmov	r3, s0
 800bf18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf1c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bf20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf24:	da05      	bge.n	800bf32 <__kernel_cosf+0x1e>
 800bf26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bf2a:	ee17 2a90 	vmov	r2, s15
 800bf2e:	2a00      	cmp	r2, #0
 800bf30:	d03b      	beq.n	800bfaa <__kernel_cosf+0x96>
 800bf32:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bf36:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bf3a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bfb0 <__kernel_cosf+0x9c>
 800bf3e:	4a1d      	ldr	r2, [pc, #116]	; (800bfb4 <__kernel_cosf+0xa0>)
 800bf40:	ee66 7a07 	vmul.f32	s15, s12, s14
 800bf44:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bfb8 <__kernel_cosf+0xa4>
 800bf48:	eea6 7a25 	vfma.f32	s14, s12, s11
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800bfbc <__kernel_cosf+0xa8>
 800bf52:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bf56:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800bfc0 <__kernel_cosf+0xac>
 800bf5a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf5e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800bfc4 <__kernel_cosf+0xb0>
 800bf62:	eee7 5a06 	vfma.f32	s11, s14, s12
 800bf66:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800bfc8 <__kernel_cosf+0xb4>
 800bf6a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800bf6e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800bf72:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bf76:	eee6 0a07 	vfma.f32	s1, s12, s14
 800bf7a:	dc04      	bgt.n	800bf86 <__kernel_cosf+0x72>
 800bf7c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800bf80:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800bf84:	4770      	bx	lr
 800bf86:	4a11      	ldr	r2, [pc, #68]	; (800bfcc <__kernel_cosf+0xb8>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	bfda      	itte	le
 800bf8c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800bf90:	ee07 3a10 	vmovle	s14, r3
 800bf94:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800bf98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf9c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800bfa0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bfa4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfa8:	4770      	bx	lr
 800bfaa:	eeb0 0a66 	vmov.f32	s0, s13
 800bfae:	4770      	bx	lr
 800bfb0:	ad47d74e 	.word	0xad47d74e
 800bfb4:	3e999999 	.word	0x3e999999
 800bfb8:	310f74f6 	.word	0x310f74f6
 800bfbc:	b493f27c 	.word	0xb493f27c
 800bfc0:	37d00d01 	.word	0x37d00d01
 800bfc4:	bab60b61 	.word	0xbab60b61
 800bfc8:	3d2aaaab 	.word	0x3d2aaaab
 800bfcc:	3f480000 	.word	0x3f480000

0800bfd0 <__kernel_rem_pio2f>:
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	ed2d 8b04 	vpush	{d8-d9}
 800bfd8:	b0d7      	sub	sp, #348	; 0x15c
 800bfda:	469b      	mov	fp, r3
 800bfdc:	460e      	mov	r6, r1
 800bfde:	4bbe      	ldr	r3, [pc, #760]	; (800c2d8 <__kernel_rem_pio2f+0x308>)
 800bfe0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800bfe2:	9002      	str	r0, [sp, #8]
 800bfe4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800bfe8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800bfea:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800bfee:	1ed1      	subs	r1, r2, #3
 800bff0:	2308      	movs	r3, #8
 800bff2:	fb91 f1f3 	sdiv	r1, r1, r3
 800bff6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800bffa:	f10b 3aff 	add.w	sl, fp, #4294967295
 800bffe:	1c4c      	adds	r4, r1, #1
 800c000:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800c004:	eba1 050a 	sub.w	r5, r1, sl
 800c008:	aa1a      	add	r2, sp, #104	; 0x68
 800c00a:	eb09 070a 	add.w	r7, r9, sl
 800c00e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800c012:	4696      	mov	lr, r2
 800c014:	2300      	movs	r3, #0
 800c016:	42bb      	cmp	r3, r7
 800c018:	dd0f      	ble.n	800c03a <__kernel_rem_pio2f+0x6a>
 800c01a:	af42      	add	r7, sp, #264	; 0x108
 800c01c:	2200      	movs	r2, #0
 800c01e:	454a      	cmp	r2, r9
 800c020:	dc27      	bgt.n	800c072 <__kernel_rem_pio2f+0xa2>
 800c022:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800c026:	eb0b 0302 	add.w	r3, fp, r2
 800c02a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800c02e:	9d02      	ldr	r5, [sp, #8]
 800c030:	eddf 7aad 	vldr	s15, [pc, #692]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c034:	f04f 0c00 	mov.w	ip, #0
 800c038:	e015      	b.n	800c066 <__kernel_rem_pio2f+0x96>
 800c03a:	42dd      	cmn	r5, r3
 800c03c:	bf5d      	ittte	pl
 800c03e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800c042:	ee07 2a90 	vmovpl	s15, r2
 800c046:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c04a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c04e:	ecee 7a01 	vstmia	lr!, {s15}
 800c052:	3301      	adds	r3, #1
 800c054:	e7df      	b.n	800c016 <__kernel_rem_pio2f+0x46>
 800c056:	ecf5 6a01 	vldmia	r5!, {s13}
 800c05a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c05e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c062:	f10c 0c01 	add.w	ip, ip, #1
 800c066:	45d4      	cmp	ip, sl
 800c068:	ddf5      	ble.n	800c056 <__kernel_rem_pio2f+0x86>
 800c06a:	ece7 7a01 	vstmia	r7!, {s15}
 800c06e:	3201      	adds	r2, #1
 800c070:	e7d5      	b.n	800c01e <__kernel_rem_pio2f+0x4e>
 800c072:	ab06      	add	r3, sp, #24
 800c074:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800c2e4 <__kernel_rem_pio2f+0x314>
 800c07e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800c2e0 <__kernel_rem_pio2f+0x310>
 800c082:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800c086:	9303      	str	r3, [sp, #12]
 800c088:	464d      	mov	r5, r9
 800c08a:	ab56      	add	r3, sp, #344	; 0x158
 800c08c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800c090:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800c094:	3f01      	subs	r7, #1
 800c096:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800c09a:	00bf      	lsls	r7, r7, #2
 800c09c:	ab56      	add	r3, sp, #344	; 0x158
 800c09e:	19da      	adds	r2, r3, r7
 800c0a0:	3a4c      	subs	r2, #76	; 0x4c
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	1ae9      	subs	r1, r5, r3
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	dc4c      	bgt.n	800c144 <__kernel_rem_pio2f+0x174>
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fba8 	bl	800c800 <scalbnf>
 800c0b0:	eeb0 8a40 	vmov.f32	s16, s0
 800c0b4:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800c0b8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c0bc:	f000 fb5e 	bl	800c77c <floorf>
 800c0c0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800c0c4:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c0ce:	edcd 7a01 	vstr	s15, [sp, #4]
 800c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d6:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c0da:	dd48      	ble.n	800c16e <__kernel_rem_pio2f+0x19e>
 800c0dc:	1e69      	subs	r1, r5, #1
 800c0de:	ab06      	add	r3, sp, #24
 800c0e0:	f1c4 0008 	rsb	r0, r4, #8
 800c0e4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800c0e8:	9a01      	ldr	r2, [sp, #4]
 800c0ea:	fa4c f300 	asr.w	r3, ip, r0
 800c0ee:	441a      	add	r2, r3
 800c0f0:	4083      	lsls	r3, r0
 800c0f2:	9201      	str	r2, [sp, #4]
 800c0f4:	ebac 0203 	sub.w	r2, ip, r3
 800c0f8:	ab06      	add	r3, sp, #24
 800c0fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800c0fe:	f1c4 0307 	rsb	r3, r4, #7
 800c102:	fa42 f803 	asr.w	r8, r2, r3
 800c106:	f1b8 0f00 	cmp.w	r8, #0
 800c10a:	dd41      	ble.n	800c190 <__kernel_rem_pio2f+0x1c0>
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	2000      	movs	r0, #0
 800c110:	3301      	adds	r3, #1
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	4601      	mov	r1, r0
 800c116:	4285      	cmp	r5, r0
 800c118:	dc6d      	bgt.n	800c1f6 <__kernel_rem_pio2f+0x226>
 800c11a:	2c00      	cmp	r4, #0
 800c11c:	dd04      	ble.n	800c128 <__kernel_rem_pio2f+0x158>
 800c11e:	2c01      	cmp	r4, #1
 800c120:	d07e      	beq.n	800c220 <__kernel_rem_pio2f+0x250>
 800c122:	2c02      	cmp	r4, #2
 800c124:	f000 8086 	beq.w	800c234 <__kernel_rem_pio2f+0x264>
 800c128:	f1b8 0f02 	cmp.w	r8, #2
 800c12c:	d130      	bne.n	800c190 <__kernel_rem_pio2f+0x1c0>
 800c12e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c132:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c136:	b359      	cbz	r1, 800c190 <__kernel_rem_pio2f+0x1c0>
 800c138:	4620      	mov	r0, r4
 800c13a:	f000 fb61 	bl	800c800 <scalbnf>
 800c13e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c142:	e025      	b.n	800c190 <__kernel_rem_pio2f+0x1c0>
 800c144:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c148:	a806      	add	r0, sp, #24
 800c14a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c14e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c152:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c156:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c15a:	ee10 1a10 	vmov	r1, s0
 800c15e:	ed32 0a01 	vldmdb	r2!, {s0}
 800c162:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800c166:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c16a:	3301      	adds	r3, #1
 800c16c:	e79a      	b.n	800c0a4 <__kernel_rem_pio2f+0xd4>
 800c16e:	d106      	bne.n	800c17e <__kernel_rem_pio2f+0x1ae>
 800c170:	1e6b      	subs	r3, r5, #1
 800c172:	aa06      	add	r2, sp, #24
 800c174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c178:	ea4f 2822 	mov.w	r8, r2, asr #8
 800c17c:	e7c3      	b.n	800c106 <__kernel_rem_pio2f+0x136>
 800c17e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c182:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18a:	da31      	bge.n	800c1f0 <__kernel_rem_pio2f+0x220>
 800c18c:	f04f 0800 	mov.w	r8, #0
 800c190:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c198:	f040 80a8 	bne.w	800c2ec <__kernel_rem_pio2f+0x31c>
 800c19c:	1e6b      	subs	r3, r5, #1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	4548      	cmp	r0, r9
 800c1a4:	da4d      	bge.n	800c242 <__kernel_rem_pio2f+0x272>
 800c1a6:	2a00      	cmp	r2, #0
 800c1a8:	f000 8087 	beq.w	800c2ba <__kernel_rem_pio2f+0x2ea>
 800c1ac:	aa06      	add	r2, sp, #24
 800c1ae:	3c08      	subs	r4, #8
 800c1b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	f000 808d 	beq.w	800c2d4 <__kernel_rem_pio2f+0x304>
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c1c0:	9302      	str	r3, [sp, #8]
 800c1c2:	f000 fb1d 	bl	800c800 <scalbnf>
 800c1c6:	9b02      	ldr	r3, [sp, #8]
 800c1c8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800c2e4 <__kernel_rem_pio2f+0x314>
 800c1cc:	0099      	lsls	r1, r3, #2
 800c1ce:	aa42      	add	r2, sp, #264	; 0x108
 800c1d0:	1850      	adds	r0, r2, r1
 800c1d2:	1d05      	adds	r5, r0, #4
 800c1d4:	461c      	mov	r4, r3
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	f280 80b8 	bge.w	800c34c <__kernel_rem_pio2f+0x37c>
 800c1dc:	2500      	movs	r5, #0
 800c1de:	1b5c      	subs	r4, r3, r5
 800c1e0:	2c00      	cmp	r4, #0
 800c1e2:	f2c0 80d8 	blt.w	800c396 <__kernel_rem_pio2f+0x3c6>
 800c1e6:	4f3d      	ldr	r7, [pc, #244]	; (800c2dc <__kernel_rem_pio2f+0x30c>)
 800c1e8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	e0c6      	b.n	800c37e <__kernel_rem_pio2f+0x3ae>
 800c1f0:	f04f 0802 	mov.w	r8, #2
 800c1f4:	e78a      	b.n	800c10c <__kernel_rem_pio2f+0x13c>
 800c1f6:	ab06      	add	r3, sp, #24
 800c1f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c1fc:	b949      	cbnz	r1, 800c212 <__kernel_rem_pio2f+0x242>
 800c1fe:	b12b      	cbz	r3, 800c20c <__kernel_rem_pio2f+0x23c>
 800c200:	aa06      	add	r2, sp, #24
 800c202:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800c206:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c20a:	2301      	movs	r3, #1
 800c20c:	3001      	adds	r0, #1
 800c20e:	4619      	mov	r1, r3
 800c210:	e781      	b.n	800c116 <__kernel_rem_pio2f+0x146>
 800c212:	aa06      	add	r2, sp, #24
 800c214:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800c218:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c21c:	460b      	mov	r3, r1
 800c21e:	e7f5      	b.n	800c20c <__kernel_rem_pio2f+0x23c>
 800c220:	1e68      	subs	r0, r5, #1
 800c222:	ab06      	add	r3, sp, #24
 800c224:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c22c:	aa06      	add	r2, sp, #24
 800c22e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800c232:	e779      	b.n	800c128 <__kernel_rem_pio2f+0x158>
 800c234:	1e68      	subs	r0, r5, #1
 800c236:	ab06      	add	r3, sp, #24
 800c238:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c23c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c240:	e7f4      	b.n	800c22c <__kernel_rem_pio2f+0x25c>
 800c242:	a906      	add	r1, sp, #24
 800c244:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c248:	3801      	subs	r0, #1
 800c24a:	430a      	orrs	r2, r1
 800c24c:	e7a9      	b.n	800c1a2 <__kernel_rem_pio2f+0x1d2>
 800c24e:	f10c 0c01 	add.w	ip, ip, #1
 800c252:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c256:	2a00      	cmp	r2, #0
 800c258:	d0f9      	beq.n	800c24e <__kernel_rem_pio2f+0x27e>
 800c25a:	eb0b 0305 	add.w	r3, fp, r5
 800c25e:	aa1a      	add	r2, sp, #104	; 0x68
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	1898      	adds	r0, r3, r2
 800c264:	3004      	adds	r0, #4
 800c266:	1c69      	adds	r1, r5, #1
 800c268:	3704      	adds	r7, #4
 800c26a:	2200      	movs	r2, #0
 800c26c:	4465      	add	r5, ip
 800c26e:	9005      	str	r0, [sp, #20]
 800c270:	428d      	cmp	r5, r1
 800c272:	f6ff af0a 	blt.w	800c08a <__kernel_rem_pio2f+0xba>
 800c276:	a81a      	add	r0, sp, #104	; 0x68
 800c278:	eb02 0c03 	add.w	ip, r2, r3
 800c27c:	4484      	add	ip, r0
 800c27e:	9803      	ldr	r0, [sp, #12]
 800c280:	f8dd e008 	ldr.w	lr, [sp, #8]
 800c284:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800c288:	9001      	str	r0, [sp, #4]
 800c28a:	ee07 0a90 	vmov	s15, r0
 800c28e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c292:	9805      	ldr	r0, [sp, #20]
 800c294:	edcc 7a00 	vstr	s15, [ip]
 800c298:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c29c:	eb00 0802 	add.w	r8, r0, r2
 800c2a0:	f04f 0c00 	mov.w	ip, #0
 800c2a4:	45d4      	cmp	ip, sl
 800c2a6:	dd0c      	ble.n	800c2c2 <__kernel_rem_pio2f+0x2f2>
 800c2a8:	eb02 0c07 	add.w	ip, r2, r7
 800c2ac:	a842      	add	r0, sp, #264	; 0x108
 800c2ae:	4484      	add	ip, r0
 800c2b0:	edcc 7a01 	vstr	s15, [ip, #4]
 800c2b4:	3101      	adds	r1, #1
 800c2b6:	3204      	adds	r2, #4
 800c2b8:	e7da      	b.n	800c270 <__kernel_rem_pio2f+0x2a0>
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	f04f 0c01 	mov.w	ip, #1
 800c2c0:	e7c7      	b.n	800c252 <__kernel_rem_pio2f+0x282>
 800c2c2:	ecfe 6a01 	vldmia	lr!, {s13}
 800c2c6:	ed38 7a01 	vldmdb	r8!, {s14}
 800c2ca:	f10c 0c01 	add.w	ip, ip, #1
 800c2ce:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c2d2:	e7e7      	b.n	800c2a4 <__kernel_rem_pio2f+0x2d4>
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	e769      	b.n	800c1ac <__kernel_rem_pio2f+0x1dc>
 800c2d8:	0801141c 	.word	0x0801141c
 800c2dc:	080113f0 	.word	0x080113f0
 800c2e0:	43800000 	.word	0x43800000
 800c2e4:	3b800000 	.word	0x3b800000
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	4260      	negs	r0, r4
 800c2ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c2f2:	f000 fa85 	bl	800c800 <scalbnf>
 800c2f6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800c2e0 <__kernel_rem_pio2f+0x310>
 800c2fa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c302:	db1a      	blt.n	800c33a <__kernel_rem_pio2f+0x36a>
 800c304:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800c2e4 <__kernel_rem_pio2f+0x314>
 800c308:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c30c:	aa06      	add	r2, sp, #24
 800c30e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c312:	a906      	add	r1, sp, #24
 800c314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c318:	3408      	adds	r4, #8
 800c31a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c31e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c322:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c326:	ee10 3a10 	vmov	r3, s0
 800c32a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c32e:	1c6b      	adds	r3, r5, #1
 800c330:	ee17 2a90 	vmov	r2, s15
 800c334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c338:	e73f      	b.n	800c1ba <__kernel_rem_pio2f+0x1ea>
 800c33a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c33e:	aa06      	add	r2, sp, #24
 800c340:	ee10 3a10 	vmov	r3, s0
 800c344:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800c348:	462b      	mov	r3, r5
 800c34a:	e736      	b.n	800c1ba <__kernel_rem_pio2f+0x1ea>
 800c34c:	aa06      	add	r2, sp, #24
 800c34e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800c352:	9202      	str	r2, [sp, #8]
 800c354:	ee07 2a90 	vmov	s15, r2
 800c358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c35c:	3c01      	subs	r4, #1
 800c35e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c362:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c366:	ed65 7a01 	vstmdb	r5!, {s15}
 800c36a:	e734      	b.n	800c1d6 <__kernel_rem_pio2f+0x206>
 800c36c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800c370:	ecf7 6a01 	vldmia	r7!, {s13}
 800c374:	ed9c 7a00 	vldr	s14, [ip]
 800c378:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c37c:	3401      	adds	r4, #1
 800c37e:	454c      	cmp	r4, r9
 800c380:	dc01      	bgt.n	800c386 <__kernel_rem_pio2f+0x3b6>
 800c382:	42a5      	cmp	r5, r4
 800c384:	daf2      	bge.n	800c36c <__kernel_rem_pio2f+0x39c>
 800c386:	aa56      	add	r2, sp, #344	; 0x158
 800c388:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800c38c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800c390:	3501      	adds	r5, #1
 800c392:	3804      	subs	r0, #4
 800c394:	e723      	b.n	800c1de <__kernel_rem_pio2f+0x20e>
 800c396:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800c398:	2a03      	cmp	r2, #3
 800c39a:	d84d      	bhi.n	800c438 <__kernel_rem_pio2f+0x468>
 800c39c:	e8df f002 	tbb	[pc, r2]
 800c3a0:	021f1f3e 	.word	0x021f1f3e
 800c3a4:	aa56      	add	r2, sp, #344	; 0x158
 800c3a6:	4411      	add	r1, r2
 800c3a8:	399c      	subs	r1, #156	; 0x9c
 800c3aa:	4608      	mov	r0, r1
 800c3ac:	461c      	mov	r4, r3
 800c3ae:	2c00      	cmp	r4, #0
 800c3b0:	dc5f      	bgt.n	800c472 <__kernel_rem_pio2f+0x4a2>
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	461c      	mov	r4, r3
 800c3b6:	2c01      	cmp	r4, #1
 800c3b8:	dc6b      	bgt.n	800c492 <__kernel_rem_pio2f+0x4c2>
 800c3ba:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	dc77      	bgt.n	800c4b2 <__kernel_rem_pio2f+0x4e2>
 800c3c2:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800c3c6:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800c3ca:	f1b8 0f00 	cmp.w	r8, #0
 800c3ce:	d176      	bne.n	800c4be <__kernel_rem_pio2f+0x4ee>
 800c3d0:	edc6 6a00 	vstr	s13, [r6]
 800c3d4:	ed86 7a01 	vstr	s14, [r6, #4]
 800c3d8:	edc6 7a02 	vstr	s15, [r6, #8]
 800c3dc:	e02c      	b.n	800c438 <__kernel_rem_pio2f+0x468>
 800c3de:	aa56      	add	r2, sp, #344	; 0x158
 800c3e0:	4411      	add	r1, r2
 800c3e2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c3e6:	399c      	subs	r1, #156	; 0x9c
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	da32      	bge.n	800c454 <__kernel_rem_pio2f+0x484>
 800c3ee:	f1b8 0f00 	cmp.w	r8, #0
 800c3f2:	d035      	beq.n	800c460 <__kernel_rem_pio2f+0x490>
 800c3f4:	eef1 7a47 	vneg.f32	s15, s14
 800c3f8:	edc6 7a00 	vstr	s15, [r6]
 800c3fc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800c400:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c404:	a82f      	add	r0, sp, #188	; 0xbc
 800c406:	2101      	movs	r1, #1
 800c408:	428b      	cmp	r3, r1
 800c40a:	da2c      	bge.n	800c466 <__kernel_rem_pio2f+0x496>
 800c40c:	f1b8 0f00 	cmp.w	r8, #0
 800c410:	d001      	beq.n	800c416 <__kernel_rem_pio2f+0x446>
 800c412:	eef1 7a67 	vneg.f32	s15, s15
 800c416:	edc6 7a01 	vstr	s15, [r6, #4]
 800c41a:	e00d      	b.n	800c438 <__kernel_rem_pio2f+0x468>
 800c41c:	aa56      	add	r2, sp, #344	; 0x158
 800c41e:	4411      	add	r1, r2
 800c420:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800c2e8 <__kernel_rem_pio2f+0x318>
 800c424:	399c      	subs	r1, #156	; 0x9c
 800c426:	2b00      	cmp	r3, #0
 800c428:	da0e      	bge.n	800c448 <__kernel_rem_pio2f+0x478>
 800c42a:	f1b8 0f00 	cmp.w	r8, #0
 800c42e:	d001      	beq.n	800c434 <__kernel_rem_pio2f+0x464>
 800c430:	eef1 7a67 	vneg.f32	s15, s15
 800c434:	edc6 7a00 	vstr	s15, [r6]
 800c438:	9b01      	ldr	r3, [sp, #4]
 800c43a:	f003 0007 	and.w	r0, r3, #7
 800c43e:	b057      	add	sp, #348	; 0x15c
 800c440:	ecbd 8b04 	vpop	{d8-d9}
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	ed31 7a01 	vldmdb	r1!, {s14}
 800c44c:	3b01      	subs	r3, #1
 800c44e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c452:	e7e8      	b.n	800c426 <__kernel_rem_pio2f+0x456>
 800c454:	ed71 7a01 	vldmdb	r1!, {s15}
 800c458:	3801      	subs	r0, #1
 800c45a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c45e:	e7c4      	b.n	800c3ea <__kernel_rem_pio2f+0x41a>
 800c460:	eef0 7a47 	vmov.f32	s15, s14
 800c464:	e7c8      	b.n	800c3f8 <__kernel_rem_pio2f+0x428>
 800c466:	ecb0 7a01 	vldmia	r0!, {s14}
 800c46a:	3101      	adds	r1, #1
 800c46c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c470:	e7ca      	b.n	800c408 <__kernel_rem_pio2f+0x438>
 800c472:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c476:	ed70 6a01 	vldmdb	r0!, {s13}
 800c47a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c47e:	3c01      	subs	r4, #1
 800c480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c484:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c48c:	edc0 7a00 	vstr	s15, [r0]
 800c490:	e78d      	b.n	800c3ae <__kernel_rem_pio2f+0x3de>
 800c492:	ed50 7a02 	vldr	s15, [r0, #-8]
 800c496:	ed70 6a01 	vldmdb	r0!, {s13}
 800c49a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c49e:	3c01      	subs	r4, #1
 800c4a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4a4:	ed00 7a01 	vstr	s14, [r0, #-4]
 800c4a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ac:	edc0 7a00 	vstr	s15, [r0]
 800c4b0:	e781      	b.n	800c3b6 <__kernel_rem_pio2f+0x3e6>
 800c4b2:	ed31 7a01 	vldmdb	r1!, {s14}
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4bc:	e77f      	b.n	800c3be <__kernel_rem_pio2f+0x3ee>
 800c4be:	eef1 6a66 	vneg.f32	s13, s13
 800c4c2:	eeb1 7a47 	vneg.f32	s14, s14
 800c4c6:	edc6 6a00 	vstr	s13, [r6]
 800c4ca:	ed86 7a01 	vstr	s14, [r6, #4]
 800c4ce:	eef1 7a67 	vneg.f32	s15, s15
 800c4d2:	e781      	b.n	800c3d8 <__kernel_rem_pio2f+0x408>

0800c4d4 <__kernel_sinf>:
 800c4d4:	ee10 3a10 	vmov	r3, s0
 800c4d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c4e0:	da04      	bge.n	800c4ec <__kernel_sinf+0x18>
 800c4e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800c4e6:	ee17 3a90 	vmov	r3, s15
 800c4ea:	b35b      	cbz	r3, 800c544 <__kernel_sinf+0x70>
 800c4ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c4f0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c548 <__kernel_sinf+0x74>
 800c4f4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c54c <__kernel_sinf+0x78>
 800c4f8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c4fc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c550 <__kernel_sinf+0x7c>
 800c500:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c504:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c554 <__kernel_sinf+0x80>
 800c508:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c50c:	eddf 7a12 	vldr	s15, [pc, #72]	; 800c558 <__kernel_sinf+0x84>
 800c510:	ee60 6a07 	vmul.f32	s13, s0, s14
 800c514:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c518:	b930      	cbnz	r0, 800c528 <__kernel_sinf+0x54>
 800c51a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800c55c <__kernel_sinf+0x88>
 800c51e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c522:	eea6 0a26 	vfma.f32	s0, s12, s13
 800c526:	4770      	bx	lr
 800c528:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c52c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c530:	eee0 7a86 	vfma.f32	s15, s1, s12
 800c534:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800c538:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c560 <__kernel_sinf+0x8c>
 800c53c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800c540:	ee30 0a60 	vsub.f32	s0, s0, s1
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2f2ec9d3 	.word	0x2f2ec9d3
 800c54c:	b2d72f34 	.word	0xb2d72f34
 800c550:	3638ef1b 	.word	0x3638ef1b
 800c554:	b9500d01 	.word	0xb9500d01
 800c558:	3c088889 	.word	0x3c088889
 800c55c:	be2aaaab 	.word	0xbe2aaaab
 800c560:	3e2aaaab 	.word	0x3e2aaaab

0800c564 <fabs>:
 800c564:	ec51 0b10 	vmov	r0, r1, d0
 800c568:	ee10 2a10 	vmov	r2, s0
 800c56c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c570:	ec43 2b10 	vmov	d0, r2, r3
 800c574:	4770      	bx	lr
	...

0800c578 <floor>:
 800c578:	ec51 0b10 	vmov	r0, r1, d0
 800c57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c580:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c584:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c588:	2e13      	cmp	r6, #19
 800c58a:	460c      	mov	r4, r1
 800c58c:	ee10 5a10 	vmov	r5, s0
 800c590:	4680      	mov	r8, r0
 800c592:	dc34      	bgt.n	800c5fe <floor+0x86>
 800c594:	2e00      	cmp	r6, #0
 800c596:	da16      	bge.n	800c5c6 <floor+0x4e>
 800c598:	a335      	add	r3, pc, #212	; (adr r3, 800c670 <floor+0xf8>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	f7f3 fe75 	bl	800028c <__adddf3>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f7f4 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 800c5aa:	b148      	cbz	r0, 800c5c0 <floor+0x48>
 800c5ac:	2c00      	cmp	r4, #0
 800c5ae:	da59      	bge.n	800c664 <floor+0xec>
 800c5b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c5b4:	4a30      	ldr	r2, [pc, #192]	; (800c678 <floor+0x100>)
 800c5b6:	432b      	orrs	r3, r5
 800c5b8:	2500      	movs	r5, #0
 800c5ba:	42ab      	cmp	r3, r5
 800c5bc:	bf18      	it	ne
 800c5be:	4614      	movne	r4, r2
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	e025      	b.n	800c612 <floor+0x9a>
 800c5c6:	4f2d      	ldr	r7, [pc, #180]	; (800c67c <floor+0x104>)
 800c5c8:	4137      	asrs	r7, r6
 800c5ca:	ea01 0307 	and.w	r3, r1, r7
 800c5ce:	4303      	orrs	r3, r0
 800c5d0:	d01f      	beq.n	800c612 <floor+0x9a>
 800c5d2:	a327      	add	r3, pc, #156	; (adr r3, 800c670 <floor+0xf8>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe58 	bl	800028c <__adddf3>
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f7f4 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d0eb      	beq.n	800c5c0 <floor+0x48>
 800c5e8:	2c00      	cmp	r4, #0
 800c5ea:	bfbe      	ittt	lt
 800c5ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c5f0:	fa43 f606 	asrlt.w	r6, r3, r6
 800c5f4:	19a4      	addlt	r4, r4, r6
 800c5f6:	ea24 0407 	bic.w	r4, r4, r7
 800c5fa:	2500      	movs	r5, #0
 800c5fc:	e7e0      	b.n	800c5c0 <floor+0x48>
 800c5fe:	2e33      	cmp	r6, #51	; 0x33
 800c600:	dd0b      	ble.n	800c61a <floor+0xa2>
 800c602:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c606:	d104      	bne.n	800c612 <floor+0x9a>
 800c608:	ee10 2a10 	vmov	r2, s0
 800c60c:	460b      	mov	r3, r1
 800c60e:	f7f3 fe3d 	bl	800028c <__adddf3>
 800c612:	ec41 0b10 	vmov	d0, r0, r1
 800c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c61a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	fa23 f707 	lsr.w	r7, r3, r7
 800c626:	4207      	tst	r7, r0
 800c628:	d0f3      	beq.n	800c612 <floor+0x9a>
 800c62a:	a311      	add	r3, pc, #68	; (adr r3, 800c670 <floor+0xf8>)
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	f7f3 fe2c 	bl	800028c <__adddf3>
 800c634:	2200      	movs	r2, #0
 800c636:	2300      	movs	r3, #0
 800c638:	f7f4 fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d0bf      	beq.n	800c5c0 <floor+0x48>
 800c640:	2c00      	cmp	r4, #0
 800c642:	da02      	bge.n	800c64a <floor+0xd2>
 800c644:	2e14      	cmp	r6, #20
 800c646:	d103      	bne.n	800c650 <floor+0xd8>
 800c648:	3401      	adds	r4, #1
 800c64a:	ea25 0507 	bic.w	r5, r5, r7
 800c64e:	e7b7      	b.n	800c5c0 <floor+0x48>
 800c650:	2301      	movs	r3, #1
 800c652:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c656:	fa03 f606 	lsl.w	r6, r3, r6
 800c65a:	4435      	add	r5, r6
 800c65c:	4545      	cmp	r5, r8
 800c65e:	bf38      	it	cc
 800c660:	18e4      	addcc	r4, r4, r3
 800c662:	e7f2      	b.n	800c64a <floor+0xd2>
 800c664:	2500      	movs	r5, #0
 800c666:	462c      	mov	r4, r5
 800c668:	e7aa      	b.n	800c5c0 <floor+0x48>
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w
 800c670:	8800759c 	.word	0x8800759c
 800c674:	7e37e43c 	.word	0x7e37e43c
 800c678:	bff00000 	.word	0xbff00000
 800c67c:	000fffff 	.word	0x000fffff

0800c680 <scalbn>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	ec55 4b10 	vmov	r4, r5, d0
 800c686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c68a:	4606      	mov	r6, r0
 800c68c:	462b      	mov	r3, r5
 800c68e:	b9aa      	cbnz	r2, 800c6bc <scalbn+0x3c>
 800c690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c694:	4323      	orrs	r3, r4
 800c696:	d03b      	beq.n	800c710 <scalbn+0x90>
 800c698:	4b31      	ldr	r3, [pc, #196]	; (800c760 <scalbn+0xe0>)
 800c69a:	4629      	mov	r1, r5
 800c69c:	2200      	movs	r2, #0
 800c69e:	ee10 0a10 	vmov	r0, s0
 800c6a2:	f7f3 ffa9 	bl	80005f8 <__aeabi_dmul>
 800c6a6:	4b2f      	ldr	r3, [pc, #188]	; (800c764 <scalbn+0xe4>)
 800c6a8:	429e      	cmp	r6, r3
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	460d      	mov	r5, r1
 800c6ae:	da12      	bge.n	800c6d6 <scalbn+0x56>
 800c6b0:	a327      	add	r3, pc, #156	; (adr r3, 800c750 <scalbn+0xd0>)
 800c6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b6:	f7f3 ff9f 	bl	80005f8 <__aeabi_dmul>
 800c6ba:	e009      	b.n	800c6d0 <scalbn+0x50>
 800c6bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c6c0:	428a      	cmp	r2, r1
 800c6c2:	d10c      	bne.n	800c6de <scalbn+0x5e>
 800c6c4:	ee10 2a10 	vmov	r2, s0
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	4629      	mov	r1, r5
 800c6cc:	f7f3 fdde 	bl	800028c <__adddf3>
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	460d      	mov	r5, r1
 800c6d4:	e01c      	b.n	800c710 <scalbn+0x90>
 800c6d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c6da:	460b      	mov	r3, r1
 800c6dc:	3a36      	subs	r2, #54	; 0x36
 800c6de:	4432      	add	r2, r6
 800c6e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c6e4:	428a      	cmp	r2, r1
 800c6e6:	dd0b      	ble.n	800c700 <scalbn+0x80>
 800c6e8:	ec45 4b11 	vmov	d1, r4, r5
 800c6ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c758 <scalbn+0xd8>
 800c6f0:	f000 f8e6 	bl	800c8c0 <copysign>
 800c6f4:	a318      	add	r3, pc, #96	; (adr r3, 800c758 <scalbn+0xd8>)
 800c6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fa:	ec51 0b10 	vmov	r0, r1, d0
 800c6fe:	e7da      	b.n	800c6b6 <scalbn+0x36>
 800c700:	2a00      	cmp	r2, #0
 800c702:	dd08      	ble.n	800c716 <scalbn+0x96>
 800c704:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c708:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c70c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c710:	ec45 4b10 	vmov	d0, r4, r5
 800c714:	bd70      	pop	{r4, r5, r6, pc}
 800c716:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c71a:	da0d      	bge.n	800c738 <scalbn+0xb8>
 800c71c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c720:	429e      	cmp	r6, r3
 800c722:	ec45 4b11 	vmov	d1, r4, r5
 800c726:	dce1      	bgt.n	800c6ec <scalbn+0x6c>
 800c728:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c750 <scalbn+0xd0>
 800c72c:	f000 f8c8 	bl	800c8c0 <copysign>
 800c730:	a307      	add	r3, pc, #28	; (adr r3, 800c750 <scalbn+0xd0>)
 800c732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c736:	e7e0      	b.n	800c6fa <scalbn+0x7a>
 800c738:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c73c:	3236      	adds	r2, #54	; 0x36
 800c73e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c742:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	2200      	movs	r2, #0
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <scalbn+0xe8>)
 800c74e:	e7b2      	b.n	800c6b6 <scalbn+0x36>
 800c750:	c2f8f359 	.word	0xc2f8f359
 800c754:	01a56e1f 	.word	0x01a56e1f
 800c758:	8800759c 	.word	0x8800759c
 800c75c:	7e37e43c 	.word	0x7e37e43c
 800c760:	43500000 	.word	0x43500000
 800c764:	ffff3cb0 	.word	0xffff3cb0
 800c768:	3c900000 	.word	0x3c900000

0800c76c <fabsf>:
 800c76c:	ee10 3a10 	vmov	r3, s0
 800c770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c774:	ee00 3a10 	vmov	s0, r3
 800c778:	4770      	bx	lr
	...

0800c77c <floorf>:
 800c77c:	ee10 3a10 	vmov	r3, s0
 800c780:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c784:	0dca      	lsrs	r2, r1, #23
 800c786:	3a7f      	subs	r2, #127	; 0x7f
 800c788:	2a16      	cmp	r2, #22
 800c78a:	dc2a      	bgt.n	800c7e2 <floorf+0x66>
 800c78c:	2a00      	cmp	r2, #0
 800c78e:	da11      	bge.n	800c7b4 <floorf+0x38>
 800c790:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c7f4 <floorf+0x78>
 800c794:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c798:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	dd05      	ble.n	800c7ae <floorf+0x32>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	da23      	bge.n	800c7ee <floorf+0x72>
 800c7a6:	4a14      	ldr	r2, [pc, #80]	; (800c7f8 <floorf+0x7c>)
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	4613      	movne	r3, r2
 800c7ae:	ee00 3a10 	vmov	s0, r3
 800c7b2:	4770      	bx	lr
 800c7b4:	4911      	ldr	r1, [pc, #68]	; (800c7fc <floorf+0x80>)
 800c7b6:	4111      	asrs	r1, r2
 800c7b8:	420b      	tst	r3, r1
 800c7ba:	d0fa      	beq.n	800c7b2 <floorf+0x36>
 800c7bc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c7f4 <floorf+0x78>
 800c7c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c7c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7cc:	ddef      	ble.n	800c7ae <floorf+0x32>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	bfbe      	ittt	lt
 800c7d2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c7d6:	fa40 f202 	asrlt.w	r2, r0, r2
 800c7da:	189b      	addlt	r3, r3, r2
 800c7dc:	ea23 0301 	bic.w	r3, r3, r1
 800c7e0:	e7e5      	b.n	800c7ae <floorf+0x32>
 800c7e2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c7e6:	d3e4      	bcc.n	800c7b2 <floorf+0x36>
 800c7e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c7ec:	4770      	bx	lr
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	e7dd      	b.n	800c7ae <floorf+0x32>
 800c7f2:	bf00      	nop
 800c7f4:	7149f2ca 	.word	0x7149f2ca
 800c7f8:	bf800000 	.word	0xbf800000
 800c7fc:	007fffff 	.word	0x007fffff

0800c800 <scalbnf>:
 800c800:	b508      	push	{r3, lr}
 800c802:	ee10 2a10 	vmov	r2, s0
 800c806:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c80a:	ed2d 8b02 	vpush	{d8}
 800c80e:	eef0 0a40 	vmov.f32	s1, s0
 800c812:	d004      	beq.n	800c81e <scalbnf+0x1e>
 800c814:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c818:	d306      	bcc.n	800c828 <scalbnf+0x28>
 800c81a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800c81e:	ecbd 8b02 	vpop	{d8}
 800c822:	eeb0 0a60 	vmov.f32	s0, s1
 800c826:	bd08      	pop	{r3, pc}
 800c828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c82c:	d21c      	bcs.n	800c868 <scalbnf+0x68>
 800c82e:	4b1f      	ldr	r3, [pc, #124]	; (800c8ac <scalbnf+0xac>)
 800c830:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c8b0 <scalbnf+0xb0>
 800c834:	4298      	cmp	r0, r3
 800c836:	ee60 0a27 	vmul.f32	s1, s0, s15
 800c83a:	db10      	blt.n	800c85e <scalbnf+0x5e>
 800c83c:	ee10 2a90 	vmov	r2, s1
 800c840:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800c844:	3b19      	subs	r3, #25
 800c846:	4403      	add	r3, r0
 800c848:	2bfe      	cmp	r3, #254	; 0xfe
 800c84a:	dd0f      	ble.n	800c86c <scalbnf+0x6c>
 800c84c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c8b4 <scalbnf+0xb4>
 800c850:	eeb0 0a48 	vmov.f32	s0, s16
 800c854:	f000 f843 	bl	800c8de <copysignf>
 800c858:	ee60 0a08 	vmul.f32	s1, s0, s16
 800c85c:	e7df      	b.n	800c81e <scalbnf+0x1e>
 800c85e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800c8b8 <scalbnf+0xb8>
 800c862:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800c866:	e7da      	b.n	800c81e <scalbnf+0x1e>
 800c868:	0ddb      	lsrs	r3, r3, #23
 800c86a:	e7ec      	b.n	800c846 <scalbnf+0x46>
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	dd06      	ble.n	800c87e <scalbnf+0x7e>
 800c870:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c874:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c878:	ee00 3a90 	vmov	s1, r3
 800c87c:	e7cf      	b.n	800c81e <scalbnf+0x1e>
 800c87e:	f113 0f16 	cmn.w	r3, #22
 800c882:	da06      	bge.n	800c892 <scalbnf+0x92>
 800c884:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c888:	4298      	cmp	r0, r3
 800c88a:	dcdf      	bgt.n	800c84c <scalbnf+0x4c>
 800c88c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800c8b8 <scalbnf+0xb8>
 800c890:	e7de      	b.n	800c850 <scalbnf+0x50>
 800c892:	3319      	adds	r3, #25
 800c894:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c898:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c89c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c8bc <scalbnf+0xbc>
 800c8a0:	ee07 3a10 	vmov	s14, r3
 800c8a4:	ee67 0a27 	vmul.f32	s1, s14, s15
 800c8a8:	e7b9      	b.n	800c81e <scalbnf+0x1e>
 800c8aa:	bf00      	nop
 800c8ac:	ffff3cb0 	.word	0xffff3cb0
 800c8b0:	4c000000 	.word	0x4c000000
 800c8b4:	7149f2ca 	.word	0x7149f2ca
 800c8b8:	0da24260 	.word	0x0da24260
 800c8bc:	33000000 	.word	0x33000000

0800c8c0 <copysign>:
 800c8c0:	ec51 0b10 	vmov	r0, r1, d0
 800c8c4:	ee11 0a90 	vmov	r0, s3
 800c8c8:	ee10 2a10 	vmov	r2, s0
 800c8cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c8d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c8d4:	ea41 0300 	orr.w	r3, r1, r0
 800c8d8:	ec43 2b10 	vmov	d0, r2, r3
 800c8dc:	4770      	bx	lr

0800c8de <copysignf>:
 800c8de:	ee10 3a10 	vmov	r3, s0
 800c8e2:	ee10 2a90 	vmov	r2, s1
 800c8e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	ee00 3a10 	vmov	s0, r3
 800c8f4:	4770      	bx	lr
	...

0800c8f8 <__errno>:
 800c8f8:	4b01      	ldr	r3, [pc, #4]	; (800c900 <__errno+0x8>)
 800c8fa:	6818      	ldr	r0, [r3, #0]
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20000040 	.word	0x20000040

0800c904 <__libc_init_array>:
 800c904:	b570      	push	{r4, r5, r6, lr}
 800c906:	4e0d      	ldr	r6, [pc, #52]	; (800c93c <__libc_init_array+0x38>)
 800c908:	4c0d      	ldr	r4, [pc, #52]	; (800c940 <__libc_init_array+0x3c>)
 800c90a:	1ba4      	subs	r4, r4, r6
 800c90c:	10a4      	asrs	r4, r4, #2
 800c90e:	2500      	movs	r5, #0
 800c910:	42a5      	cmp	r5, r4
 800c912:	d109      	bne.n	800c928 <__libc_init_array+0x24>
 800c914:	4e0b      	ldr	r6, [pc, #44]	; (800c944 <__libc_init_array+0x40>)
 800c916:	4c0c      	ldr	r4, [pc, #48]	; (800c948 <__libc_init_array+0x44>)
 800c918:	f004 fa60 	bl	8010ddc <_init>
 800c91c:	1ba4      	subs	r4, r4, r6
 800c91e:	10a4      	asrs	r4, r4, #2
 800c920:	2500      	movs	r5, #0
 800c922:	42a5      	cmp	r5, r4
 800c924:	d105      	bne.n	800c932 <__libc_init_array+0x2e>
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c92c:	4798      	blx	r3
 800c92e:	3501      	adds	r5, #1
 800c930:	e7ee      	b.n	800c910 <__libc_init_array+0xc>
 800c932:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c936:	4798      	blx	r3
 800c938:	3501      	adds	r5, #1
 800c93a:	e7f2      	b.n	800c922 <__libc_init_array+0x1e>
 800c93c:	08011750 	.word	0x08011750
 800c940:	08011750 	.word	0x08011750
 800c944:	08011750 	.word	0x08011750
 800c948:	08011754 	.word	0x08011754

0800c94c <memcpy>:
 800c94c:	b510      	push	{r4, lr}
 800c94e:	1e43      	subs	r3, r0, #1
 800c950:	440a      	add	r2, r1
 800c952:	4291      	cmp	r1, r2
 800c954:	d100      	bne.n	800c958 <memcpy+0xc>
 800c956:	bd10      	pop	{r4, pc}
 800c958:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c95c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c960:	e7f7      	b.n	800c952 <memcpy+0x6>

0800c962 <memset>:
 800c962:	4402      	add	r2, r0
 800c964:	4603      	mov	r3, r0
 800c966:	4293      	cmp	r3, r2
 800c968:	d100      	bne.n	800c96c <memset+0xa>
 800c96a:	4770      	bx	lr
 800c96c:	f803 1b01 	strb.w	r1, [r3], #1
 800c970:	e7f9      	b.n	800c966 <memset+0x4>

0800c972 <__cvt>:
 800c972:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c976:	ec55 4b10 	vmov	r4, r5, d0
 800c97a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c97c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c980:	2d00      	cmp	r5, #0
 800c982:	460e      	mov	r6, r1
 800c984:	4691      	mov	r9, r2
 800c986:	4619      	mov	r1, r3
 800c988:	bfb8      	it	lt
 800c98a:	4622      	movlt	r2, r4
 800c98c:	462b      	mov	r3, r5
 800c98e:	f027 0720 	bic.w	r7, r7, #32
 800c992:	bfbb      	ittet	lt
 800c994:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c998:	461d      	movlt	r5, r3
 800c99a:	2300      	movge	r3, #0
 800c99c:	232d      	movlt	r3, #45	; 0x2d
 800c99e:	bfb8      	it	lt
 800c9a0:	4614      	movlt	r4, r2
 800c9a2:	2f46      	cmp	r7, #70	; 0x46
 800c9a4:	700b      	strb	r3, [r1, #0]
 800c9a6:	d004      	beq.n	800c9b2 <__cvt+0x40>
 800c9a8:	2f45      	cmp	r7, #69	; 0x45
 800c9aa:	d100      	bne.n	800c9ae <__cvt+0x3c>
 800c9ac:	3601      	adds	r6, #1
 800c9ae:	2102      	movs	r1, #2
 800c9b0:	e000      	b.n	800c9b4 <__cvt+0x42>
 800c9b2:	2103      	movs	r1, #3
 800c9b4:	ab03      	add	r3, sp, #12
 800c9b6:	9301      	str	r3, [sp, #4]
 800c9b8:	ab02      	add	r3, sp, #8
 800c9ba:	9300      	str	r3, [sp, #0]
 800c9bc:	4632      	mov	r2, r6
 800c9be:	4653      	mov	r3, sl
 800c9c0:	ec45 4b10 	vmov	d0, r4, r5
 800c9c4:	f001 feb4 	bl	800e730 <_dtoa_r>
 800c9c8:	2f47      	cmp	r7, #71	; 0x47
 800c9ca:	4680      	mov	r8, r0
 800c9cc:	d102      	bne.n	800c9d4 <__cvt+0x62>
 800c9ce:	f019 0f01 	tst.w	r9, #1
 800c9d2:	d026      	beq.n	800ca22 <__cvt+0xb0>
 800c9d4:	2f46      	cmp	r7, #70	; 0x46
 800c9d6:	eb08 0906 	add.w	r9, r8, r6
 800c9da:	d111      	bne.n	800ca00 <__cvt+0x8e>
 800c9dc:	f898 3000 	ldrb.w	r3, [r8]
 800c9e0:	2b30      	cmp	r3, #48	; 0x30
 800c9e2:	d10a      	bne.n	800c9fa <__cvt+0x88>
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	f7f4 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9f0:	b918      	cbnz	r0, 800c9fa <__cvt+0x88>
 800c9f2:	f1c6 0601 	rsb	r6, r6, #1
 800c9f6:	f8ca 6000 	str.w	r6, [sl]
 800c9fa:	f8da 3000 	ldr.w	r3, [sl]
 800c9fe:	4499      	add	r9, r3
 800ca00:	2200      	movs	r2, #0
 800ca02:	2300      	movs	r3, #0
 800ca04:	4620      	mov	r0, r4
 800ca06:	4629      	mov	r1, r5
 800ca08:	f7f4 f85e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca0c:	b938      	cbnz	r0, 800ca1e <__cvt+0xac>
 800ca0e:	2230      	movs	r2, #48	; 0x30
 800ca10:	9b03      	ldr	r3, [sp, #12]
 800ca12:	454b      	cmp	r3, r9
 800ca14:	d205      	bcs.n	800ca22 <__cvt+0xb0>
 800ca16:	1c59      	adds	r1, r3, #1
 800ca18:	9103      	str	r1, [sp, #12]
 800ca1a:	701a      	strb	r2, [r3, #0]
 800ca1c:	e7f8      	b.n	800ca10 <__cvt+0x9e>
 800ca1e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca22:	9b03      	ldr	r3, [sp, #12]
 800ca24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca26:	eba3 0308 	sub.w	r3, r3, r8
 800ca2a:	4640      	mov	r0, r8
 800ca2c:	6013      	str	r3, [r2, #0]
 800ca2e:	b004      	add	sp, #16
 800ca30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ca34 <__exponent>:
 800ca34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca36:	2900      	cmp	r1, #0
 800ca38:	4604      	mov	r4, r0
 800ca3a:	bfba      	itte	lt
 800ca3c:	4249      	neglt	r1, r1
 800ca3e:	232d      	movlt	r3, #45	; 0x2d
 800ca40:	232b      	movge	r3, #43	; 0x2b
 800ca42:	2909      	cmp	r1, #9
 800ca44:	f804 2b02 	strb.w	r2, [r4], #2
 800ca48:	7043      	strb	r3, [r0, #1]
 800ca4a:	dd20      	ble.n	800ca8e <__exponent+0x5a>
 800ca4c:	f10d 0307 	add.w	r3, sp, #7
 800ca50:	461f      	mov	r7, r3
 800ca52:	260a      	movs	r6, #10
 800ca54:	fb91 f5f6 	sdiv	r5, r1, r6
 800ca58:	fb06 1115 	mls	r1, r6, r5, r1
 800ca5c:	3130      	adds	r1, #48	; 0x30
 800ca5e:	2d09      	cmp	r5, #9
 800ca60:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ca64:	f103 32ff 	add.w	r2, r3, #4294967295
 800ca68:	4629      	mov	r1, r5
 800ca6a:	dc09      	bgt.n	800ca80 <__exponent+0x4c>
 800ca6c:	3130      	adds	r1, #48	; 0x30
 800ca6e:	3b02      	subs	r3, #2
 800ca70:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca74:	42bb      	cmp	r3, r7
 800ca76:	4622      	mov	r2, r4
 800ca78:	d304      	bcc.n	800ca84 <__exponent+0x50>
 800ca7a:	1a10      	subs	r0, r2, r0
 800ca7c:	b003      	add	sp, #12
 800ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca80:	4613      	mov	r3, r2
 800ca82:	e7e7      	b.n	800ca54 <__exponent+0x20>
 800ca84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca88:	f804 2b01 	strb.w	r2, [r4], #1
 800ca8c:	e7f2      	b.n	800ca74 <__exponent+0x40>
 800ca8e:	2330      	movs	r3, #48	; 0x30
 800ca90:	4419      	add	r1, r3
 800ca92:	7083      	strb	r3, [r0, #2]
 800ca94:	1d02      	adds	r2, r0, #4
 800ca96:	70c1      	strb	r1, [r0, #3]
 800ca98:	e7ef      	b.n	800ca7a <__exponent+0x46>
	...

0800ca9c <_printf_float>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	b08d      	sub	sp, #52	; 0x34
 800caa2:	460c      	mov	r4, r1
 800caa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800caa8:	4616      	mov	r6, r2
 800caaa:	461f      	mov	r7, r3
 800caac:	4605      	mov	r5, r0
 800caae:	f003 f89d 	bl	800fbec <_localeconv_r>
 800cab2:	6803      	ldr	r3, [r0, #0]
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f3 fb8a 	bl	80001d0 <strlen>
 800cabc:	2300      	movs	r3, #0
 800cabe:	930a      	str	r3, [sp, #40]	; 0x28
 800cac0:	f8d8 3000 	ldr.w	r3, [r8]
 800cac4:	9005      	str	r0, [sp, #20]
 800cac6:	3307      	adds	r3, #7
 800cac8:	f023 0307 	bic.w	r3, r3, #7
 800cacc:	f103 0208 	add.w	r2, r3, #8
 800cad0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cad4:	f8d4 b000 	ldr.w	fp, [r4]
 800cad8:	f8c8 2000 	str.w	r2, [r8]
 800cadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cae4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cae8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800caec:	9307      	str	r3, [sp, #28]
 800caee:	f8cd 8018 	str.w	r8, [sp, #24]
 800caf2:	f04f 32ff 	mov.w	r2, #4294967295
 800caf6:	4ba7      	ldr	r3, [pc, #668]	; (800cd94 <_printf_float+0x2f8>)
 800caf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cafc:	f7f4 f816 	bl	8000b2c <__aeabi_dcmpun>
 800cb00:	bb70      	cbnz	r0, 800cb60 <_printf_float+0xc4>
 800cb02:	f04f 32ff 	mov.w	r2, #4294967295
 800cb06:	4ba3      	ldr	r3, [pc, #652]	; (800cd94 <_printf_float+0x2f8>)
 800cb08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb0c:	f7f3 fff0 	bl	8000af0 <__aeabi_dcmple>
 800cb10:	bb30      	cbnz	r0, 800cb60 <_printf_float+0xc4>
 800cb12:	2200      	movs	r2, #0
 800cb14:	2300      	movs	r3, #0
 800cb16:	4640      	mov	r0, r8
 800cb18:	4649      	mov	r1, r9
 800cb1a:	f7f3 ffdf 	bl	8000adc <__aeabi_dcmplt>
 800cb1e:	b110      	cbz	r0, 800cb26 <_printf_float+0x8a>
 800cb20:	232d      	movs	r3, #45	; 0x2d
 800cb22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb26:	4a9c      	ldr	r2, [pc, #624]	; (800cd98 <_printf_float+0x2fc>)
 800cb28:	4b9c      	ldr	r3, [pc, #624]	; (800cd9c <_printf_float+0x300>)
 800cb2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cb2e:	bf8c      	ite	hi
 800cb30:	4690      	movhi	r8, r2
 800cb32:	4698      	movls	r8, r3
 800cb34:	2303      	movs	r3, #3
 800cb36:	f02b 0204 	bic.w	r2, fp, #4
 800cb3a:	6123      	str	r3, [r4, #16]
 800cb3c:	6022      	str	r2, [r4, #0]
 800cb3e:	f04f 0900 	mov.w	r9, #0
 800cb42:	9700      	str	r7, [sp, #0]
 800cb44:	4633      	mov	r3, r6
 800cb46:	aa0b      	add	r2, sp, #44	; 0x2c
 800cb48:	4621      	mov	r1, r4
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f000 f9e6 	bl	800cf1c <_printf_common>
 800cb50:	3001      	adds	r0, #1
 800cb52:	f040 808d 	bne.w	800cc70 <_printf_float+0x1d4>
 800cb56:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5a:	b00d      	add	sp, #52	; 0x34
 800cb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb60:	4642      	mov	r2, r8
 800cb62:	464b      	mov	r3, r9
 800cb64:	4640      	mov	r0, r8
 800cb66:	4649      	mov	r1, r9
 800cb68:	f7f3 ffe0 	bl	8000b2c <__aeabi_dcmpun>
 800cb6c:	b110      	cbz	r0, 800cb74 <_printf_float+0xd8>
 800cb6e:	4a8c      	ldr	r2, [pc, #560]	; (800cda0 <_printf_float+0x304>)
 800cb70:	4b8c      	ldr	r3, [pc, #560]	; (800cda4 <_printf_float+0x308>)
 800cb72:	e7da      	b.n	800cb2a <_printf_float+0x8e>
 800cb74:	6861      	ldr	r1, [r4, #4]
 800cb76:	1c4b      	adds	r3, r1, #1
 800cb78:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cb7c:	a80a      	add	r0, sp, #40	; 0x28
 800cb7e:	d13e      	bne.n	800cbfe <_printf_float+0x162>
 800cb80:	2306      	movs	r3, #6
 800cb82:	6063      	str	r3, [r4, #4]
 800cb84:	2300      	movs	r3, #0
 800cb86:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cb8a:	ab09      	add	r3, sp, #36	; 0x24
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	ec49 8b10 	vmov	d0, r8, r9
 800cb92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb96:	6022      	str	r2, [r4, #0]
 800cb98:	f8cd a004 	str.w	sl, [sp, #4]
 800cb9c:	6861      	ldr	r1, [r4, #4]
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f7ff fee7 	bl	800c972 <__cvt>
 800cba4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cba8:	2b47      	cmp	r3, #71	; 0x47
 800cbaa:	4680      	mov	r8, r0
 800cbac:	d109      	bne.n	800cbc2 <_printf_float+0x126>
 800cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb0:	1cd8      	adds	r0, r3, #3
 800cbb2:	db02      	blt.n	800cbba <_printf_float+0x11e>
 800cbb4:	6862      	ldr	r2, [r4, #4]
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	dd47      	ble.n	800cc4a <_printf_float+0x1ae>
 800cbba:	f1aa 0a02 	sub.w	sl, sl, #2
 800cbbe:	fa5f fa8a 	uxtb.w	sl, sl
 800cbc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cbc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbc8:	d824      	bhi.n	800cc14 <_printf_float+0x178>
 800cbca:	3901      	subs	r1, #1
 800cbcc:	4652      	mov	r2, sl
 800cbce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cbd2:	9109      	str	r1, [sp, #36]	; 0x24
 800cbd4:	f7ff ff2e 	bl	800ca34 <__exponent>
 800cbd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbda:	1813      	adds	r3, r2, r0
 800cbdc:	2a01      	cmp	r2, #1
 800cbde:	4681      	mov	r9, r0
 800cbe0:	6123      	str	r3, [r4, #16]
 800cbe2:	dc02      	bgt.n	800cbea <_printf_float+0x14e>
 800cbe4:	6822      	ldr	r2, [r4, #0]
 800cbe6:	07d1      	lsls	r1, r2, #31
 800cbe8:	d501      	bpl.n	800cbee <_printf_float+0x152>
 800cbea:	3301      	adds	r3, #1
 800cbec:	6123      	str	r3, [r4, #16]
 800cbee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0a5      	beq.n	800cb42 <_printf_float+0xa6>
 800cbf6:	232d      	movs	r3, #45	; 0x2d
 800cbf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbfc:	e7a1      	b.n	800cb42 <_printf_float+0xa6>
 800cbfe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800cc02:	f000 8177 	beq.w	800cef4 <_printf_float+0x458>
 800cc06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cc0a:	d1bb      	bne.n	800cb84 <_printf_float+0xe8>
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	d1b9      	bne.n	800cb84 <_printf_float+0xe8>
 800cc10:	2301      	movs	r3, #1
 800cc12:	e7b6      	b.n	800cb82 <_printf_float+0xe6>
 800cc14:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cc18:	d119      	bne.n	800cc4e <_printf_float+0x1b2>
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	6863      	ldr	r3, [r4, #4]
 800cc1e:	dd0c      	ble.n	800cc3a <_printf_float+0x19e>
 800cc20:	6121      	str	r1, [r4, #16]
 800cc22:	b913      	cbnz	r3, 800cc2a <_printf_float+0x18e>
 800cc24:	6822      	ldr	r2, [r4, #0]
 800cc26:	07d2      	lsls	r2, r2, #31
 800cc28:	d502      	bpl.n	800cc30 <_printf_float+0x194>
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	440b      	add	r3, r1
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc32:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc34:	f04f 0900 	mov.w	r9, #0
 800cc38:	e7d9      	b.n	800cbee <_printf_float+0x152>
 800cc3a:	b913      	cbnz	r3, 800cc42 <_printf_float+0x1a6>
 800cc3c:	6822      	ldr	r2, [r4, #0]
 800cc3e:	07d0      	lsls	r0, r2, #31
 800cc40:	d501      	bpl.n	800cc46 <_printf_float+0x1aa>
 800cc42:	3302      	adds	r3, #2
 800cc44:	e7f3      	b.n	800cc2e <_printf_float+0x192>
 800cc46:	2301      	movs	r3, #1
 800cc48:	e7f1      	b.n	800cc2e <_printf_float+0x192>
 800cc4a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cc4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cc52:	4293      	cmp	r3, r2
 800cc54:	db05      	blt.n	800cc62 <_printf_float+0x1c6>
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	6123      	str	r3, [r4, #16]
 800cc5a:	07d1      	lsls	r1, r2, #31
 800cc5c:	d5e8      	bpl.n	800cc30 <_printf_float+0x194>
 800cc5e:	3301      	adds	r3, #1
 800cc60:	e7e5      	b.n	800cc2e <_printf_float+0x192>
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	bfd4      	ite	le
 800cc66:	f1c3 0302 	rsble	r3, r3, #2
 800cc6a:	2301      	movgt	r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	e7de      	b.n	800cc2e <_printf_float+0x192>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	055a      	lsls	r2, r3, #21
 800cc74:	d407      	bmi.n	800cc86 <_printf_float+0x1ea>
 800cc76:	6923      	ldr	r3, [r4, #16]
 800cc78:	4642      	mov	r2, r8
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	d12b      	bne.n	800ccdc <_printf_float+0x240>
 800cc84:	e767      	b.n	800cb56 <_printf_float+0xba>
 800cc86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cc8a:	f240 80dc 	bls.w	800ce46 <_printf_float+0x3aa>
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2300      	movs	r3, #0
 800cc92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc96:	f7f3 ff17 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d033      	beq.n	800cd06 <_printf_float+0x26a>
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4a41      	ldr	r2, [pc, #260]	; (800cda8 <_printf_float+0x30c>)
 800cca2:	4631      	mov	r1, r6
 800cca4:	4628      	mov	r0, r5
 800cca6:	47b8      	blx	r7
 800cca8:	3001      	adds	r0, #1
 800ccaa:	f43f af54 	beq.w	800cb56 <_printf_float+0xba>
 800ccae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	db02      	blt.n	800ccbc <_printf_float+0x220>
 800ccb6:	6823      	ldr	r3, [r4, #0]
 800ccb8:	07d8      	lsls	r0, r3, #31
 800ccba:	d50f      	bpl.n	800ccdc <_printf_float+0x240>
 800ccbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccc0:	4631      	mov	r1, r6
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b8      	blx	r7
 800ccc6:	3001      	adds	r0, #1
 800ccc8:	f43f af45 	beq.w	800cb56 <_printf_float+0xba>
 800cccc:	f04f 0800 	mov.w	r8, #0
 800ccd0:	f104 091a 	add.w	r9, r4, #26
 800ccd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccd6:	3b01      	subs	r3, #1
 800ccd8:	4543      	cmp	r3, r8
 800ccda:	dc09      	bgt.n	800ccf0 <_printf_float+0x254>
 800ccdc:	6823      	ldr	r3, [r4, #0]
 800ccde:	079b      	lsls	r3, r3, #30
 800cce0:	f100 8103 	bmi.w	800ceea <_printf_float+0x44e>
 800cce4:	68e0      	ldr	r0, [r4, #12]
 800cce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cce8:	4298      	cmp	r0, r3
 800ccea:	bfb8      	it	lt
 800ccec:	4618      	movlt	r0, r3
 800ccee:	e734      	b.n	800cb5a <_printf_float+0xbe>
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	464a      	mov	r2, r9
 800ccf4:	4631      	mov	r1, r6
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	47b8      	blx	r7
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	f43f af2b 	beq.w	800cb56 <_printf_float+0xba>
 800cd00:	f108 0801 	add.w	r8, r8, #1
 800cd04:	e7e6      	b.n	800ccd4 <_printf_float+0x238>
 800cd06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dc2b      	bgt.n	800cd64 <_printf_float+0x2c8>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	4a26      	ldr	r2, [pc, #152]	; (800cda8 <_printf_float+0x30c>)
 800cd10:	4631      	mov	r1, r6
 800cd12:	4628      	mov	r0, r5
 800cd14:	47b8      	blx	r7
 800cd16:	3001      	adds	r0, #1
 800cd18:	f43f af1d 	beq.w	800cb56 <_printf_float+0xba>
 800cd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd1e:	b923      	cbnz	r3, 800cd2a <_printf_float+0x28e>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd22:	b913      	cbnz	r3, 800cd2a <_printf_float+0x28e>
 800cd24:	6823      	ldr	r3, [r4, #0]
 800cd26:	07d9      	lsls	r1, r3, #31
 800cd28:	d5d8      	bpl.n	800ccdc <_printf_float+0x240>
 800cd2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd2e:	4631      	mov	r1, r6
 800cd30:	4628      	mov	r0, r5
 800cd32:	47b8      	blx	r7
 800cd34:	3001      	adds	r0, #1
 800cd36:	f43f af0e 	beq.w	800cb56 <_printf_float+0xba>
 800cd3a:	f04f 0900 	mov.w	r9, #0
 800cd3e:	f104 0a1a 	add.w	sl, r4, #26
 800cd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd44:	425b      	negs	r3, r3
 800cd46:	454b      	cmp	r3, r9
 800cd48:	dc01      	bgt.n	800cd4e <_printf_float+0x2b2>
 800cd4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd4c:	e794      	b.n	800cc78 <_printf_float+0x1dc>
 800cd4e:	2301      	movs	r3, #1
 800cd50:	4652      	mov	r2, sl
 800cd52:	4631      	mov	r1, r6
 800cd54:	4628      	mov	r0, r5
 800cd56:	47b8      	blx	r7
 800cd58:	3001      	adds	r0, #1
 800cd5a:	f43f aefc 	beq.w	800cb56 <_printf_float+0xba>
 800cd5e:	f109 0901 	add.w	r9, r9, #1
 800cd62:	e7ee      	b.n	800cd42 <_printf_float+0x2a6>
 800cd64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	bfa8      	it	ge
 800cd6c:	461a      	movge	r2, r3
 800cd6e:	2a00      	cmp	r2, #0
 800cd70:	4691      	mov	r9, r2
 800cd72:	dd07      	ble.n	800cd84 <_printf_float+0x2e8>
 800cd74:	4613      	mov	r3, r2
 800cd76:	4631      	mov	r1, r6
 800cd78:	4642      	mov	r2, r8
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	47b8      	blx	r7
 800cd7e:	3001      	adds	r0, #1
 800cd80:	f43f aee9 	beq.w	800cb56 <_printf_float+0xba>
 800cd84:	f104 031a 	add.w	r3, r4, #26
 800cd88:	f04f 0b00 	mov.w	fp, #0
 800cd8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd90:	9306      	str	r3, [sp, #24]
 800cd92:	e015      	b.n	800cdc0 <_printf_float+0x324>
 800cd94:	7fefffff 	.word	0x7fefffff
 800cd98:	08011430 	.word	0x08011430
 800cd9c:	0801142c 	.word	0x0801142c
 800cda0:	08011438 	.word	0x08011438
 800cda4:	08011434 	.word	0x08011434
 800cda8:	0801143c 	.word	0x0801143c
 800cdac:	2301      	movs	r3, #1
 800cdae:	9a06      	ldr	r2, [sp, #24]
 800cdb0:	4631      	mov	r1, r6
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	47b8      	blx	r7
 800cdb6:	3001      	adds	r0, #1
 800cdb8:	f43f aecd 	beq.w	800cb56 <_printf_float+0xba>
 800cdbc:	f10b 0b01 	add.w	fp, fp, #1
 800cdc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cdc4:	ebaa 0309 	sub.w	r3, sl, r9
 800cdc8:	455b      	cmp	r3, fp
 800cdca:	dcef      	bgt.n	800cdac <_printf_float+0x310>
 800cdcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	44d0      	add	r8, sl
 800cdd4:	db15      	blt.n	800ce02 <_printf_float+0x366>
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	07da      	lsls	r2, r3, #31
 800cdda:	d412      	bmi.n	800ce02 <_printf_float+0x366>
 800cddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cde0:	eba3 020a 	sub.w	r2, r3, sl
 800cde4:	eba3 0a01 	sub.w	sl, r3, r1
 800cde8:	4592      	cmp	sl, r2
 800cdea:	bfa8      	it	ge
 800cdec:	4692      	movge	sl, r2
 800cdee:	f1ba 0f00 	cmp.w	sl, #0
 800cdf2:	dc0e      	bgt.n	800ce12 <_printf_float+0x376>
 800cdf4:	f04f 0800 	mov.w	r8, #0
 800cdf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cdfc:	f104 091a 	add.w	r9, r4, #26
 800ce00:	e019      	b.n	800ce36 <_printf_float+0x39a>
 800ce02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce06:	4631      	mov	r1, r6
 800ce08:	4628      	mov	r0, r5
 800ce0a:	47b8      	blx	r7
 800ce0c:	3001      	adds	r0, #1
 800ce0e:	d1e5      	bne.n	800cddc <_printf_float+0x340>
 800ce10:	e6a1      	b.n	800cb56 <_printf_float+0xba>
 800ce12:	4653      	mov	r3, sl
 800ce14:	4642      	mov	r2, r8
 800ce16:	4631      	mov	r1, r6
 800ce18:	4628      	mov	r0, r5
 800ce1a:	47b8      	blx	r7
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d1e9      	bne.n	800cdf4 <_printf_float+0x358>
 800ce20:	e699      	b.n	800cb56 <_printf_float+0xba>
 800ce22:	2301      	movs	r3, #1
 800ce24:	464a      	mov	r2, r9
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	f43f ae92 	beq.w	800cb56 <_printf_float+0xba>
 800ce32:	f108 0801 	add.w	r8, r8, #1
 800ce36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce3a:	1a9b      	subs	r3, r3, r2
 800ce3c:	eba3 030a 	sub.w	r3, r3, sl
 800ce40:	4543      	cmp	r3, r8
 800ce42:	dcee      	bgt.n	800ce22 <_printf_float+0x386>
 800ce44:	e74a      	b.n	800ccdc <_printf_float+0x240>
 800ce46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce48:	2a01      	cmp	r2, #1
 800ce4a:	dc01      	bgt.n	800ce50 <_printf_float+0x3b4>
 800ce4c:	07db      	lsls	r3, r3, #31
 800ce4e:	d53a      	bpl.n	800cec6 <_printf_float+0x42a>
 800ce50:	2301      	movs	r3, #1
 800ce52:	4642      	mov	r2, r8
 800ce54:	4631      	mov	r1, r6
 800ce56:	4628      	mov	r0, r5
 800ce58:	47b8      	blx	r7
 800ce5a:	3001      	adds	r0, #1
 800ce5c:	f43f ae7b 	beq.w	800cb56 <_printf_float+0xba>
 800ce60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce64:	4631      	mov	r1, r6
 800ce66:	4628      	mov	r0, r5
 800ce68:	47b8      	blx	r7
 800ce6a:	3001      	adds	r0, #1
 800ce6c:	f108 0801 	add.w	r8, r8, #1
 800ce70:	f43f ae71 	beq.w	800cb56 <_printf_float+0xba>
 800ce74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce76:	2200      	movs	r2, #0
 800ce78:	f103 3aff 	add.w	sl, r3, #4294967295
 800ce7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce80:	2300      	movs	r3, #0
 800ce82:	f7f3 fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce86:	b9c8      	cbnz	r0, 800cebc <_printf_float+0x420>
 800ce88:	4653      	mov	r3, sl
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	4628      	mov	r0, r5
 800ce90:	47b8      	blx	r7
 800ce92:	3001      	adds	r0, #1
 800ce94:	d10e      	bne.n	800ceb4 <_printf_float+0x418>
 800ce96:	e65e      	b.n	800cb56 <_printf_float+0xba>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	4652      	mov	r2, sl
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b8      	blx	r7
 800cea2:	3001      	adds	r0, #1
 800cea4:	f43f ae57 	beq.w	800cb56 <_printf_float+0xba>
 800cea8:	f108 0801 	add.w	r8, r8, #1
 800ceac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	4543      	cmp	r3, r8
 800ceb2:	dcf1      	bgt.n	800ce98 <_printf_float+0x3fc>
 800ceb4:	464b      	mov	r3, r9
 800ceb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ceba:	e6de      	b.n	800cc7a <_printf_float+0x1de>
 800cebc:	f04f 0800 	mov.w	r8, #0
 800cec0:	f104 0a1a 	add.w	sl, r4, #26
 800cec4:	e7f2      	b.n	800ceac <_printf_float+0x410>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e7df      	b.n	800ce8a <_printf_float+0x3ee>
 800ceca:	2301      	movs	r3, #1
 800cecc:	464a      	mov	r2, r9
 800cece:	4631      	mov	r1, r6
 800ced0:	4628      	mov	r0, r5
 800ced2:	47b8      	blx	r7
 800ced4:	3001      	adds	r0, #1
 800ced6:	f43f ae3e 	beq.w	800cb56 <_printf_float+0xba>
 800ceda:	f108 0801 	add.w	r8, r8, #1
 800cede:	68e3      	ldr	r3, [r4, #12]
 800cee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cee2:	1a9b      	subs	r3, r3, r2
 800cee4:	4543      	cmp	r3, r8
 800cee6:	dcf0      	bgt.n	800ceca <_printf_float+0x42e>
 800cee8:	e6fc      	b.n	800cce4 <_printf_float+0x248>
 800ceea:	f04f 0800 	mov.w	r8, #0
 800ceee:	f104 0919 	add.w	r9, r4, #25
 800cef2:	e7f4      	b.n	800cede <_printf_float+0x442>
 800cef4:	2900      	cmp	r1, #0
 800cef6:	f43f ae8b 	beq.w	800cc10 <_printf_float+0x174>
 800cefa:	2300      	movs	r3, #0
 800cefc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cf00:	ab09      	add	r3, sp, #36	; 0x24
 800cf02:	9300      	str	r3, [sp, #0]
 800cf04:	ec49 8b10 	vmov	d0, r8, r9
 800cf08:	6022      	str	r2, [r4, #0]
 800cf0a:	f8cd a004 	str.w	sl, [sp, #4]
 800cf0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf12:	4628      	mov	r0, r5
 800cf14:	f7ff fd2d 	bl	800c972 <__cvt>
 800cf18:	4680      	mov	r8, r0
 800cf1a:	e648      	b.n	800cbae <_printf_float+0x112>

0800cf1c <_printf_common>:
 800cf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf20:	4691      	mov	r9, r2
 800cf22:	461f      	mov	r7, r3
 800cf24:	688a      	ldr	r2, [r1, #8]
 800cf26:	690b      	ldr	r3, [r1, #16]
 800cf28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	bfb8      	it	lt
 800cf30:	4613      	movlt	r3, r2
 800cf32:	f8c9 3000 	str.w	r3, [r9]
 800cf36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	b112      	cbz	r2, 800cf46 <_printf_common+0x2a>
 800cf40:	3301      	adds	r3, #1
 800cf42:	f8c9 3000 	str.w	r3, [r9]
 800cf46:	6823      	ldr	r3, [r4, #0]
 800cf48:	0699      	lsls	r1, r3, #26
 800cf4a:	bf42      	ittt	mi
 800cf4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cf50:	3302      	addmi	r3, #2
 800cf52:	f8c9 3000 	strmi.w	r3, [r9]
 800cf56:	6825      	ldr	r5, [r4, #0]
 800cf58:	f015 0506 	ands.w	r5, r5, #6
 800cf5c:	d107      	bne.n	800cf6e <_printf_common+0x52>
 800cf5e:	f104 0a19 	add.w	sl, r4, #25
 800cf62:	68e3      	ldr	r3, [r4, #12]
 800cf64:	f8d9 2000 	ldr.w	r2, [r9]
 800cf68:	1a9b      	subs	r3, r3, r2
 800cf6a:	42ab      	cmp	r3, r5
 800cf6c:	dc28      	bgt.n	800cfc0 <_printf_common+0xa4>
 800cf6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cf72:	6822      	ldr	r2, [r4, #0]
 800cf74:	3300      	adds	r3, #0
 800cf76:	bf18      	it	ne
 800cf78:	2301      	movne	r3, #1
 800cf7a:	0692      	lsls	r2, r2, #26
 800cf7c:	d42d      	bmi.n	800cfda <_printf_common+0xbe>
 800cf7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf82:	4639      	mov	r1, r7
 800cf84:	4630      	mov	r0, r6
 800cf86:	47c0      	blx	r8
 800cf88:	3001      	adds	r0, #1
 800cf8a:	d020      	beq.n	800cfce <_printf_common+0xb2>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	68e5      	ldr	r5, [r4, #12]
 800cf90:	f8d9 2000 	ldr.w	r2, [r9]
 800cf94:	f003 0306 	and.w	r3, r3, #6
 800cf98:	2b04      	cmp	r3, #4
 800cf9a:	bf08      	it	eq
 800cf9c:	1aad      	subeq	r5, r5, r2
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	6922      	ldr	r2, [r4, #16]
 800cfa2:	bf0c      	ite	eq
 800cfa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfa8:	2500      	movne	r5, #0
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	bfc4      	itt	gt
 800cfae:	1a9b      	subgt	r3, r3, r2
 800cfb0:	18ed      	addgt	r5, r5, r3
 800cfb2:	f04f 0900 	mov.w	r9, #0
 800cfb6:	341a      	adds	r4, #26
 800cfb8:	454d      	cmp	r5, r9
 800cfba:	d11a      	bne.n	800cff2 <_printf_common+0xd6>
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	e008      	b.n	800cfd2 <_printf_common+0xb6>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	4652      	mov	r2, sl
 800cfc4:	4639      	mov	r1, r7
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	47c0      	blx	r8
 800cfca:	3001      	adds	r0, #1
 800cfcc:	d103      	bne.n	800cfd6 <_printf_common+0xba>
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfd6:	3501      	adds	r5, #1
 800cfd8:	e7c3      	b.n	800cf62 <_printf_common+0x46>
 800cfda:	18e1      	adds	r1, r4, r3
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	2030      	movs	r0, #48	; 0x30
 800cfe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfe4:	4422      	add	r2, r4
 800cfe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfee:	3302      	adds	r3, #2
 800cff0:	e7c5      	b.n	800cf7e <_printf_common+0x62>
 800cff2:	2301      	movs	r3, #1
 800cff4:	4622      	mov	r2, r4
 800cff6:	4639      	mov	r1, r7
 800cff8:	4630      	mov	r0, r6
 800cffa:	47c0      	blx	r8
 800cffc:	3001      	adds	r0, #1
 800cffe:	d0e6      	beq.n	800cfce <_printf_common+0xb2>
 800d000:	f109 0901 	add.w	r9, r9, #1
 800d004:	e7d8      	b.n	800cfb8 <_printf_common+0x9c>
	...

0800d008 <_printf_i>:
 800d008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d00c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d010:	460c      	mov	r4, r1
 800d012:	7e09      	ldrb	r1, [r1, #24]
 800d014:	b085      	sub	sp, #20
 800d016:	296e      	cmp	r1, #110	; 0x6e
 800d018:	4617      	mov	r7, r2
 800d01a:	4606      	mov	r6, r0
 800d01c:	4698      	mov	r8, r3
 800d01e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d020:	f000 80b3 	beq.w	800d18a <_printf_i+0x182>
 800d024:	d822      	bhi.n	800d06c <_printf_i+0x64>
 800d026:	2963      	cmp	r1, #99	; 0x63
 800d028:	d036      	beq.n	800d098 <_printf_i+0x90>
 800d02a:	d80a      	bhi.n	800d042 <_printf_i+0x3a>
 800d02c:	2900      	cmp	r1, #0
 800d02e:	f000 80b9 	beq.w	800d1a4 <_printf_i+0x19c>
 800d032:	2958      	cmp	r1, #88	; 0x58
 800d034:	f000 8083 	beq.w	800d13e <_printf_i+0x136>
 800d038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d03c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d040:	e032      	b.n	800d0a8 <_printf_i+0xa0>
 800d042:	2964      	cmp	r1, #100	; 0x64
 800d044:	d001      	beq.n	800d04a <_printf_i+0x42>
 800d046:	2969      	cmp	r1, #105	; 0x69
 800d048:	d1f6      	bne.n	800d038 <_printf_i+0x30>
 800d04a:	6820      	ldr	r0, [r4, #0]
 800d04c:	6813      	ldr	r3, [r2, #0]
 800d04e:	0605      	lsls	r5, r0, #24
 800d050:	f103 0104 	add.w	r1, r3, #4
 800d054:	d52a      	bpl.n	800d0ac <_printf_i+0xa4>
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6011      	str	r1, [r2, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	da03      	bge.n	800d066 <_printf_i+0x5e>
 800d05e:	222d      	movs	r2, #45	; 0x2d
 800d060:	425b      	negs	r3, r3
 800d062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d066:	486f      	ldr	r0, [pc, #444]	; (800d224 <_printf_i+0x21c>)
 800d068:	220a      	movs	r2, #10
 800d06a:	e039      	b.n	800d0e0 <_printf_i+0xd8>
 800d06c:	2973      	cmp	r1, #115	; 0x73
 800d06e:	f000 809d 	beq.w	800d1ac <_printf_i+0x1a4>
 800d072:	d808      	bhi.n	800d086 <_printf_i+0x7e>
 800d074:	296f      	cmp	r1, #111	; 0x6f
 800d076:	d020      	beq.n	800d0ba <_printf_i+0xb2>
 800d078:	2970      	cmp	r1, #112	; 0x70
 800d07a:	d1dd      	bne.n	800d038 <_printf_i+0x30>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	f043 0320 	orr.w	r3, r3, #32
 800d082:	6023      	str	r3, [r4, #0]
 800d084:	e003      	b.n	800d08e <_printf_i+0x86>
 800d086:	2975      	cmp	r1, #117	; 0x75
 800d088:	d017      	beq.n	800d0ba <_printf_i+0xb2>
 800d08a:	2978      	cmp	r1, #120	; 0x78
 800d08c:	d1d4      	bne.n	800d038 <_printf_i+0x30>
 800d08e:	2378      	movs	r3, #120	; 0x78
 800d090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d094:	4864      	ldr	r0, [pc, #400]	; (800d228 <_printf_i+0x220>)
 800d096:	e055      	b.n	800d144 <_printf_i+0x13c>
 800d098:	6813      	ldr	r3, [r2, #0]
 800d09a:	1d19      	adds	r1, r3, #4
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	6011      	str	r1, [r2, #0]
 800d0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	e08c      	b.n	800d1c6 <_printf_i+0x1be>
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6011      	str	r1, [r2, #0]
 800d0b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0b4:	bf18      	it	ne
 800d0b6:	b21b      	sxthne	r3, r3
 800d0b8:	e7cf      	b.n	800d05a <_printf_i+0x52>
 800d0ba:	6813      	ldr	r3, [r2, #0]
 800d0bc:	6825      	ldr	r5, [r4, #0]
 800d0be:	1d18      	adds	r0, r3, #4
 800d0c0:	6010      	str	r0, [r2, #0]
 800d0c2:	0628      	lsls	r0, r5, #24
 800d0c4:	d501      	bpl.n	800d0ca <_printf_i+0xc2>
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	e002      	b.n	800d0d0 <_printf_i+0xc8>
 800d0ca:	0668      	lsls	r0, r5, #25
 800d0cc:	d5fb      	bpl.n	800d0c6 <_printf_i+0xbe>
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	4854      	ldr	r0, [pc, #336]	; (800d224 <_printf_i+0x21c>)
 800d0d2:	296f      	cmp	r1, #111	; 0x6f
 800d0d4:	bf14      	ite	ne
 800d0d6:	220a      	movne	r2, #10
 800d0d8:	2208      	moveq	r2, #8
 800d0da:	2100      	movs	r1, #0
 800d0dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0e0:	6865      	ldr	r5, [r4, #4]
 800d0e2:	60a5      	str	r5, [r4, #8]
 800d0e4:	2d00      	cmp	r5, #0
 800d0e6:	f2c0 8095 	blt.w	800d214 <_printf_i+0x20c>
 800d0ea:	6821      	ldr	r1, [r4, #0]
 800d0ec:	f021 0104 	bic.w	r1, r1, #4
 800d0f0:	6021      	str	r1, [r4, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d13d      	bne.n	800d172 <_printf_i+0x16a>
 800d0f6:	2d00      	cmp	r5, #0
 800d0f8:	f040 808e 	bne.w	800d218 <_printf_i+0x210>
 800d0fc:	4665      	mov	r5, ip
 800d0fe:	2a08      	cmp	r2, #8
 800d100:	d10b      	bne.n	800d11a <_printf_i+0x112>
 800d102:	6823      	ldr	r3, [r4, #0]
 800d104:	07db      	lsls	r3, r3, #31
 800d106:	d508      	bpl.n	800d11a <_printf_i+0x112>
 800d108:	6923      	ldr	r3, [r4, #16]
 800d10a:	6862      	ldr	r2, [r4, #4]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	bfde      	ittt	le
 800d110:	2330      	movle	r3, #48	; 0x30
 800d112:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d11a:	ebac 0305 	sub.w	r3, ip, r5
 800d11e:	6123      	str	r3, [r4, #16]
 800d120:	f8cd 8000 	str.w	r8, [sp]
 800d124:	463b      	mov	r3, r7
 800d126:	aa03      	add	r2, sp, #12
 800d128:	4621      	mov	r1, r4
 800d12a:	4630      	mov	r0, r6
 800d12c:	f7ff fef6 	bl	800cf1c <_printf_common>
 800d130:	3001      	adds	r0, #1
 800d132:	d14d      	bne.n	800d1d0 <_printf_i+0x1c8>
 800d134:	f04f 30ff 	mov.w	r0, #4294967295
 800d138:	b005      	add	sp, #20
 800d13a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d13e:	4839      	ldr	r0, [pc, #228]	; (800d224 <_printf_i+0x21c>)
 800d140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d144:	6813      	ldr	r3, [r2, #0]
 800d146:	6821      	ldr	r1, [r4, #0]
 800d148:	1d1d      	adds	r5, r3, #4
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6015      	str	r5, [r2, #0]
 800d14e:	060a      	lsls	r2, r1, #24
 800d150:	d50b      	bpl.n	800d16a <_printf_i+0x162>
 800d152:	07ca      	lsls	r2, r1, #31
 800d154:	bf44      	itt	mi
 800d156:	f041 0120 	orrmi.w	r1, r1, #32
 800d15a:	6021      	strmi	r1, [r4, #0]
 800d15c:	b91b      	cbnz	r3, 800d166 <_printf_i+0x15e>
 800d15e:	6822      	ldr	r2, [r4, #0]
 800d160:	f022 0220 	bic.w	r2, r2, #32
 800d164:	6022      	str	r2, [r4, #0]
 800d166:	2210      	movs	r2, #16
 800d168:	e7b7      	b.n	800d0da <_printf_i+0xd2>
 800d16a:	064d      	lsls	r5, r1, #25
 800d16c:	bf48      	it	mi
 800d16e:	b29b      	uxthmi	r3, r3
 800d170:	e7ef      	b.n	800d152 <_printf_i+0x14a>
 800d172:	4665      	mov	r5, ip
 800d174:	fbb3 f1f2 	udiv	r1, r3, r2
 800d178:	fb02 3311 	mls	r3, r2, r1, r3
 800d17c:	5cc3      	ldrb	r3, [r0, r3]
 800d17e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d182:	460b      	mov	r3, r1
 800d184:	2900      	cmp	r1, #0
 800d186:	d1f5      	bne.n	800d174 <_printf_i+0x16c>
 800d188:	e7b9      	b.n	800d0fe <_printf_i+0xf6>
 800d18a:	6813      	ldr	r3, [r2, #0]
 800d18c:	6825      	ldr	r5, [r4, #0]
 800d18e:	6961      	ldr	r1, [r4, #20]
 800d190:	1d18      	adds	r0, r3, #4
 800d192:	6010      	str	r0, [r2, #0]
 800d194:	0628      	lsls	r0, r5, #24
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	d501      	bpl.n	800d19e <_printf_i+0x196>
 800d19a:	6019      	str	r1, [r3, #0]
 800d19c:	e002      	b.n	800d1a4 <_printf_i+0x19c>
 800d19e:	066a      	lsls	r2, r5, #25
 800d1a0:	d5fb      	bpl.n	800d19a <_printf_i+0x192>
 800d1a2:	8019      	strh	r1, [r3, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	6123      	str	r3, [r4, #16]
 800d1a8:	4665      	mov	r5, ip
 800d1aa:	e7b9      	b.n	800d120 <_printf_i+0x118>
 800d1ac:	6813      	ldr	r3, [r2, #0]
 800d1ae:	1d19      	adds	r1, r3, #4
 800d1b0:	6011      	str	r1, [r2, #0]
 800d1b2:	681d      	ldr	r5, [r3, #0]
 800d1b4:	6862      	ldr	r2, [r4, #4]
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4628      	mov	r0, r5
 800d1ba:	f7f3 f811 	bl	80001e0 <memchr>
 800d1be:	b108      	cbz	r0, 800d1c4 <_printf_i+0x1bc>
 800d1c0:	1b40      	subs	r0, r0, r5
 800d1c2:	6060      	str	r0, [r4, #4]
 800d1c4:	6863      	ldr	r3, [r4, #4]
 800d1c6:	6123      	str	r3, [r4, #16]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1ce:	e7a7      	b.n	800d120 <_printf_i+0x118>
 800d1d0:	6923      	ldr	r3, [r4, #16]
 800d1d2:	462a      	mov	r2, r5
 800d1d4:	4639      	mov	r1, r7
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	47c0      	blx	r8
 800d1da:	3001      	adds	r0, #1
 800d1dc:	d0aa      	beq.n	800d134 <_printf_i+0x12c>
 800d1de:	6823      	ldr	r3, [r4, #0]
 800d1e0:	079b      	lsls	r3, r3, #30
 800d1e2:	d413      	bmi.n	800d20c <_printf_i+0x204>
 800d1e4:	68e0      	ldr	r0, [r4, #12]
 800d1e6:	9b03      	ldr	r3, [sp, #12]
 800d1e8:	4298      	cmp	r0, r3
 800d1ea:	bfb8      	it	lt
 800d1ec:	4618      	movlt	r0, r3
 800d1ee:	e7a3      	b.n	800d138 <_printf_i+0x130>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	464a      	mov	r2, r9
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	47c0      	blx	r8
 800d1fa:	3001      	adds	r0, #1
 800d1fc:	d09a      	beq.n	800d134 <_printf_i+0x12c>
 800d1fe:	3501      	adds	r5, #1
 800d200:	68e3      	ldr	r3, [r4, #12]
 800d202:	9a03      	ldr	r2, [sp, #12]
 800d204:	1a9b      	subs	r3, r3, r2
 800d206:	42ab      	cmp	r3, r5
 800d208:	dcf2      	bgt.n	800d1f0 <_printf_i+0x1e8>
 800d20a:	e7eb      	b.n	800d1e4 <_printf_i+0x1dc>
 800d20c:	2500      	movs	r5, #0
 800d20e:	f104 0919 	add.w	r9, r4, #25
 800d212:	e7f5      	b.n	800d200 <_printf_i+0x1f8>
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1ac      	bne.n	800d172 <_printf_i+0x16a>
 800d218:	7803      	ldrb	r3, [r0, #0]
 800d21a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d21e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d222:	e76c      	b.n	800d0fe <_printf_i+0xf6>
 800d224:	0801143e 	.word	0x0801143e
 800d228:	0801144f 	.word	0x0801144f

0800d22c <_scanf_float>:
 800d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	469a      	mov	sl, r3
 800d232:	688b      	ldr	r3, [r1, #8]
 800d234:	4616      	mov	r6, r2
 800d236:	1e5a      	subs	r2, r3, #1
 800d238:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d23c:	b087      	sub	sp, #28
 800d23e:	bf83      	ittte	hi
 800d240:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800d244:	189b      	addhi	r3, r3, r2
 800d246:	9301      	strhi	r3, [sp, #4]
 800d248:	2300      	movls	r3, #0
 800d24a:	bf86      	itte	hi
 800d24c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d250:	608b      	strhi	r3, [r1, #8]
 800d252:	9301      	strls	r3, [sp, #4]
 800d254:	680b      	ldr	r3, [r1, #0]
 800d256:	4688      	mov	r8, r1
 800d258:	f04f 0b00 	mov.w	fp, #0
 800d25c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d260:	f848 3b1c 	str.w	r3, [r8], #28
 800d264:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800d268:	4607      	mov	r7, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	4645      	mov	r5, r8
 800d26e:	465a      	mov	r2, fp
 800d270:	46d9      	mov	r9, fp
 800d272:	f8cd b008 	str.w	fp, [sp, #8]
 800d276:	68a1      	ldr	r1, [r4, #8]
 800d278:	b181      	cbz	r1, 800d29c <_scanf_float+0x70>
 800d27a:	6833      	ldr	r3, [r6, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b49      	cmp	r3, #73	; 0x49
 800d280:	d071      	beq.n	800d366 <_scanf_float+0x13a>
 800d282:	d84d      	bhi.n	800d320 <_scanf_float+0xf4>
 800d284:	2b39      	cmp	r3, #57	; 0x39
 800d286:	d840      	bhi.n	800d30a <_scanf_float+0xde>
 800d288:	2b31      	cmp	r3, #49	; 0x31
 800d28a:	f080 8088 	bcs.w	800d39e <_scanf_float+0x172>
 800d28e:	2b2d      	cmp	r3, #45	; 0x2d
 800d290:	f000 8090 	beq.w	800d3b4 <_scanf_float+0x188>
 800d294:	d815      	bhi.n	800d2c2 <_scanf_float+0x96>
 800d296:	2b2b      	cmp	r3, #43	; 0x2b
 800d298:	f000 808c 	beq.w	800d3b4 <_scanf_float+0x188>
 800d29c:	f1b9 0f00 	cmp.w	r9, #0
 800d2a0:	d003      	beq.n	800d2aa <_scanf_float+0x7e>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	3a01      	subs	r2, #1
 800d2ac:	2a01      	cmp	r2, #1
 800d2ae:	f200 80ea 	bhi.w	800d486 <_scanf_float+0x25a>
 800d2b2:	4545      	cmp	r5, r8
 800d2b4:	f200 80dc 	bhi.w	800d470 <_scanf_float+0x244>
 800d2b8:	2601      	movs	r6, #1
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	b007      	add	sp, #28
 800d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d2c4:	f000 809f 	beq.w	800d406 <_scanf_float+0x1da>
 800d2c8:	2b30      	cmp	r3, #48	; 0x30
 800d2ca:	d1e7      	bne.n	800d29c <_scanf_float+0x70>
 800d2cc:	6820      	ldr	r0, [r4, #0]
 800d2ce:	f410 7f80 	tst.w	r0, #256	; 0x100
 800d2d2:	d064      	beq.n	800d39e <_scanf_float+0x172>
 800d2d4:	9b01      	ldr	r3, [sp, #4]
 800d2d6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800d2da:	6020      	str	r0, [r4, #0]
 800d2dc:	f109 0901 	add.w	r9, r9, #1
 800d2e0:	b11b      	cbz	r3, 800d2ea <_scanf_float+0xbe>
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	3101      	adds	r1, #1
 800d2e6:	9301      	str	r3, [sp, #4]
 800d2e8:	60a1      	str	r1, [r4, #8]
 800d2ea:	68a3      	ldr	r3, [r4, #8]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	60a3      	str	r3, [r4, #8]
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	6123      	str	r3, [r4, #16]
 800d2f6:	6873      	ldr	r3, [r6, #4]
 800d2f8:	3b01      	subs	r3, #1
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	6073      	str	r3, [r6, #4]
 800d2fe:	f340 80ac 	ble.w	800d45a <_scanf_float+0x22e>
 800d302:	6833      	ldr	r3, [r6, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	6033      	str	r3, [r6, #0]
 800d308:	e7b5      	b.n	800d276 <_scanf_float+0x4a>
 800d30a:	2b45      	cmp	r3, #69	; 0x45
 800d30c:	f000 8085 	beq.w	800d41a <_scanf_float+0x1ee>
 800d310:	2b46      	cmp	r3, #70	; 0x46
 800d312:	d06a      	beq.n	800d3ea <_scanf_float+0x1be>
 800d314:	2b41      	cmp	r3, #65	; 0x41
 800d316:	d1c1      	bne.n	800d29c <_scanf_float+0x70>
 800d318:	2a01      	cmp	r2, #1
 800d31a:	d1bf      	bne.n	800d29c <_scanf_float+0x70>
 800d31c:	2202      	movs	r2, #2
 800d31e:	e046      	b.n	800d3ae <_scanf_float+0x182>
 800d320:	2b65      	cmp	r3, #101	; 0x65
 800d322:	d07a      	beq.n	800d41a <_scanf_float+0x1ee>
 800d324:	d818      	bhi.n	800d358 <_scanf_float+0x12c>
 800d326:	2b54      	cmp	r3, #84	; 0x54
 800d328:	d066      	beq.n	800d3f8 <_scanf_float+0x1cc>
 800d32a:	d811      	bhi.n	800d350 <_scanf_float+0x124>
 800d32c:	2b4e      	cmp	r3, #78	; 0x4e
 800d32e:	d1b5      	bne.n	800d29c <_scanf_float+0x70>
 800d330:	2a00      	cmp	r2, #0
 800d332:	d146      	bne.n	800d3c2 <_scanf_float+0x196>
 800d334:	f1b9 0f00 	cmp.w	r9, #0
 800d338:	d145      	bne.n	800d3c6 <_scanf_float+0x19a>
 800d33a:	6821      	ldr	r1, [r4, #0]
 800d33c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d340:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d344:	d13f      	bne.n	800d3c6 <_scanf_float+0x19a>
 800d346:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d34a:	6021      	str	r1, [r4, #0]
 800d34c:	2201      	movs	r2, #1
 800d34e:	e02e      	b.n	800d3ae <_scanf_float+0x182>
 800d350:	2b59      	cmp	r3, #89	; 0x59
 800d352:	d01e      	beq.n	800d392 <_scanf_float+0x166>
 800d354:	2b61      	cmp	r3, #97	; 0x61
 800d356:	e7de      	b.n	800d316 <_scanf_float+0xea>
 800d358:	2b6e      	cmp	r3, #110	; 0x6e
 800d35a:	d0e9      	beq.n	800d330 <_scanf_float+0x104>
 800d35c:	d815      	bhi.n	800d38a <_scanf_float+0x15e>
 800d35e:	2b66      	cmp	r3, #102	; 0x66
 800d360:	d043      	beq.n	800d3ea <_scanf_float+0x1be>
 800d362:	2b69      	cmp	r3, #105	; 0x69
 800d364:	d19a      	bne.n	800d29c <_scanf_float+0x70>
 800d366:	f1bb 0f00 	cmp.w	fp, #0
 800d36a:	d138      	bne.n	800d3de <_scanf_float+0x1b2>
 800d36c:	f1b9 0f00 	cmp.w	r9, #0
 800d370:	d197      	bne.n	800d2a2 <_scanf_float+0x76>
 800d372:	6821      	ldr	r1, [r4, #0]
 800d374:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800d378:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800d37c:	d195      	bne.n	800d2aa <_scanf_float+0x7e>
 800d37e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d382:	6021      	str	r1, [r4, #0]
 800d384:	f04f 0b01 	mov.w	fp, #1
 800d388:	e011      	b.n	800d3ae <_scanf_float+0x182>
 800d38a:	2b74      	cmp	r3, #116	; 0x74
 800d38c:	d034      	beq.n	800d3f8 <_scanf_float+0x1cc>
 800d38e:	2b79      	cmp	r3, #121	; 0x79
 800d390:	d184      	bne.n	800d29c <_scanf_float+0x70>
 800d392:	f1bb 0f07 	cmp.w	fp, #7
 800d396:	d181      	bne.n	800d29c <_scanf_float+0x70>
 800d398:	f04f 0b08 	mov.w	fp, #8
 800d39c:	e007      	b.n	800d3ae <_scanf_float+0x182>
 800d39e:	eb12 0f0b 	cmn.w	r2, fp
 800d3a2:	f47f af7b 	bne.w	800d29c <_scanf_float+0x70>
 800d3a6:	6821      	ldr	r1, [r4, #0]
 800d3a8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800d3ac:	6021      	str	r1, [r4, #0]
 800d3ae:	702b      	strb	r3, [r5, #0]
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	e79a      	b.n	800d2ea <_scanf_float+0xbe>
 800d3b4:	6821      	ldr	r1, [r4, #0]
 800d3b6:	0608      	lsls	r0, r1, #24
 800d3b8:	f57f af70 	bpl.w	800d29c <_scanf_float+0x70>
 800d3bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d3c0:	e7f4      	b.n	800d3ac <_scanf_float+0x180>
 800d3c2:	2a02      	cmp	r2, #2
 800d3c4:	d047      	beq.n	800d456 <_scanf_float+0x22a>
 800d3c6:	f1bb 0f01 	cmp.w	fp, #1
 800d3ca:	d003      	beq.n	800d3d4 <_scanf_float+0x1a8>
 800d3cc:	f1bb 0f04 	cmp.w	fp, #4
 800d3d0:	f47f af64 	bne.w	800d29c <_scanf_float+0x70>
 800d3d4:	f10b 0b01 	add.w	fp, fp, #1
 800d3d8:	fa5f fb8b 	uxtb.w	fp, fp
 800d3dc:	e7e7      	b.n	800d3ae <_scanf_float+0x182>
 800d3de:	f1bb 0f03 	cmp.w	fp, #3
 800d3e2:	d0f7      	beq.n	800d3d4 <_scanf_float+0x1a8>
 800d3e4:	f1bb 0f05 	cmp.w	fp, #5
 800d3e8:	e7f2      	b.n	800d3d0 <_scanf_float+0x1a4>
 800d3ea:	f1bb 0f02 	cmp.w	fp, #2
 800d3ee:	f47f af55 	bne.w	800d29c <_scanf_float+0x70>
 800d3f2:	f04f 0b03 	mov.w	fp, #3
 800d3f6:	e7da      	b.n	800d3ae <_scanf_float+0x182>
 800d3f8:	f1bb 0f06 	cmp.w	fp, #6
 800d3fc:	f47f af4e 	bne.w	800d29c <_scanf_float+0x70>
 800d400:	f04f 0b07 	mov.w	fp, #7
 800d404:	e7d3      	b.n	800d3ae <_scanf_float+0x182>
 800d406:	6821      	ldr	r1, [r4, #0]
 800d408:	0588      	lsls	r0, r1, #22
 800d40a:	f57f af47 	bpl.w	800d29c <_scanf_float+0x70>
 800d40e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800d412:	6021      	str	r1, [r4, #0]
 800d414:	f8cd 9008 	str.w	r9, [sp, #8]
 800d418:	e7c9      	b.n	800d3ae <_scanf_float+0x182>
 800d41a:	6821      	ldr	r1, [r4, #0]
 800d41c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800d420:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800d424:	d006      	beq.n	800d434 <_scanf_float+0x208>
 800d426:	0548      	lsls	r0, r1, #21
 800d428:	f57f af38 	bpl.w	800d29c <_scanf_float+0x70>
 800d42c:	f1b9 0f00 	cmp.w	r9, #0
 800d430:	f43f af3b 	beq.w	800d2aa <_scanf_float+0x7e>
 800d434:	0588      	lsls	r0, r1, #22
 800d436:	bf58      	it	pl
 800d438:	9802      	ldrpl	r0, [sp, #8]
 800d43a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800d43e:	bf58      	it	pl
 800d440:	eba9 0000 	subpl.w	r0, r9, r0
 800d444:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800d448:	bf58      	it	pl
 800d44a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800d44e:	6021      	str	r1, [r4, #0]
 800d450:	f04f 0900 	mov.w	r9, #0
 800d454:	e7ab      	b.n	800d3ae <_scanf_float+0x182>
 800d456:	2203      	movs	r2, #3
 800d458:	e7a9      	b.n	800d3ae <_scanf_float+0x182>
 800d45a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d45e:	9205      	str	r2, [sp, #20]
 800d460:	4631      	mov	r1, r6
 800d462:	4638      	mov	r0, r7
 800d464:	4798      	blx	r3
 800d466:	9a05      	ldr	r2, [sp, #20]
 800d468:	2800      	cmp	r0, #0
 800d46a:	f43f af04 	beq.w	800d276 <_scanf_float+0x4a>
 800d46e:	e715      	b.n	800d29c <_scanf_float+0x70>
 800d470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d478:	4632      	mov	r2, r6
 800d47a:	4638      	mov	r0, r7
 800d47c:	4798      	blx	r3
 800d47e:	6923      	ldr	r3, [r4, #16]
 800d480:	3b01      	subs	r3, #1
 800d482:	6123      	str	r3, [r4, #16]
 800d484:	e715      	b.n	800d2b2 <_scanf_float+0x86>
 800d486:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d48a:	2b06      	cmp	r3, #6
 800d48c:	d80a      	bhi.n	800d4a4 <_scanf_float+0x278>
 800d48e:	f1bb 0f02 	cmp.w	fp, #2
 800d492:	d968      	bls.n	800d566 <_scanf_float+0x33a>
 800d494:	f1ab 0b03 	sub.w	fp, fp, #3
 800d498:	fa5f fb8b 	uxtb.w	fp, fp
 800d49c:	eba5 0b0b 	sub.w	fp, r5, fp
 800d4a0:	455d      	cmp	r5, fp
 800d4a2:	d14b      	bne.n	800d53c <_scanf_float+0x310>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	05da      	lsls	r2, r3, #23
 800d4a8:	d51f      	bpl.n	800d4ea <_scanf_float+0x2be>
 800d4aa:	055b      	lsls	r3, r3, #21
 800d4ac:	d468      	bmi.n	800d580 <_scanf_float+0x354>
 800d4ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	2965      	cmp	r1, #101	; 0x65
 800d4b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4ba:	f105 3bff 	add.w	fp, r5, #4294967295
 800d4be:	6123      	str	r3, [r4, #16]
 800d4c0:	d00d      	beq.n	800d4de <_scanf_float+0x2b2>
 800d4c2:	2945      	cmp	r1, #69	; 0x45
 800d4c4:	d00b      	beq.n	800d4de <_scanf_float+0x2b2>
 800d4c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	4798      	blx	r3
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	f1a5 0b02 	sub.w	fp, r5, #2
 800d4dc:	6123      	str	r3, [r4, #16]
 800d4de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4e2:	4632      	mov	r2, r6
 800d4e4:	4638      	mov	r0, r7
 800d4e6:	4798      	blx	r3
 800d4e8:	465d      	mov	r5, fp
 800d4ea:	6826      	ldr	r6, [r4, #0]
 800d4ec:	f016 0610 	ands.w	r6, r6, #16
 800d4f0:	d17a      	bne.n	800d5e8 <_scanf_float+0x3bc>
 800d4f2:	702e      	strb	r6, [r5, #0]
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d4fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4fe:	d142      	bne.n	800d586 <_scanf_float+0x35a>
 800d500:	9b02      	ldr	r3, [sp, #8]
 800d502:	eba9 0303 	sub.w	r3, r9, r3
 800d506:	425a      	negs	r2, r3
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d149      	bne.n	800d5a0 <_scanf_float+0x374>
 800d50c:	2200      	movs	r2, #0
 800d50e:	4641      	mov	r1, r8
 800d510:	4638      	mov	r0, r7
 800d512:	f000 ff21 	bl	800e358 <_strtod_r>
 800d516:	6825      	ldr	r5, [r4, #0]
 800d518:	f8da 3000 	ldr.w	r3, [sl]
 800d51c:	f015 0f02 	tst.w	r5, #2
 800d520:	f103 0204 	add.w	r2, r3, #4
 800d524:	ec59 8b10 	vmov	r8, r9, d0
 800d528:	f8ca 2000 	str.w	r2, [sl]
 800d52c:	d043      	beq.n	800d5b6 <_scanf_float+0x38a>
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	e9c3 8900 	strd	r8, r9, [r3]
 800d534:	68e3      	ldr	r3, [r4, #12]
 800d536:	3301      	adds	r3, #1
 800d538:	60e3      	str	r3, [r4, #12]
 800d53a:	e6be      	b.n	800d2ba <_scanf_float+0x8e>
 800d53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d544:	4632      	mov	r2, r6
 800d546:	4638      	mov	r0, r7
 800d548:	4798      	blx	r3
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	6123      	str	r3, [r4, #16]
 800d550:	e7a6      	b.n	800d4a0 <_scanf_float+0x274>
 800d552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d556:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d55a:	4632      	mov	r2, r6
 800d55c:	4638      	mov	r0, r7
 800d55e:	4798      	blx	r3
 800d560:	6923      	ldr	r3, [r4, #16]
 800d562:	3b01      	subs	r3, #1
 800d564:	6123      	str	r3, [r4, #16]
 800d566:	4545      	cmp	r5, r8
 800d568:	d8f3      	bhi.n	800d552 <_scanf_float+0x326>
 800d56a:	e6a5      	b.n	800d2b8 <_scanf_float+0x8c>
 800d56c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d570:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800d574:	4632      	mov	r2, r6
 800d576:	4638      	mov	r0, r7
 800d578:	4798      	blx	r3
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	6123      	str	r3, [r4, #16]
 800d580:	4545      	cmp	r5, r8
 800d582:	d8f3      	bhi.n	800d56c <_scanf_float+0x340>
 800d584:	e698      	b.n	800d2b8 <_scanf_float+0x8c>
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d0bf      	beq.n	800d50c <_scanf_float+0x2e0>
 800d58c:	9904      	ldr	r1, [sp, #16]
 800d58e:	230a      	movs	r3, #10
 800d590:	4632      	mov	r2, r6
 800d592:	3101      	adds	r1, #1
 800d594:	4638      	mov	r0, r7
 800d596:	f000 ff6b 	bl	800e470 <_strtol_r>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	9d04      	ldr	r5, [sp, #16]
 800d59e:	1ac2      	subs	r2, r0, r3
 800d5a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d5a4:	429d      	cmp	r5, r3
 800d5a6:	bf28      	it	cs
 800d5a8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800d5ac:	490f      	ldr	r1, [pc, #60]	; (800d5ec <_scanf_float+0x3c0>)
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f000 f8a0 	bl	800d6f4 <siprintf>
 800d5b4:	e7aa      	b.n	800d50c <_scanf_float+0x2e0>
 800d5b6:	f015 0504 	ands.w	r5, r5, #4
 800d5ba:	d1b8      	bne.n	800d52e <_scanf_float+0x302>
 800d5bc:	681f      	ldr	r7, [r3, #0]
 800d5be:	ee10 2a10 	vmov	r2, s0
 800d5c2:	464b      	mov	r3, r9
 800d5c4:	ee10 0a10 	vmov	r0, s0
 800d5c8:	4649      	mov	r1, r9
 800d5ca:	f7f3 faaf 	bl	8000b2c <__aeabi_dcmpun>
 800d5ce:	b128      	cbz	r0, 800d5dc <_scanf_float+0x3b0>
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f000 f889 	bl	800d6e8 <nanf>
 800d5d6:	ed87 0a00 	vstr	s0, [r7]
 800d5da:	e7ab      	b.n	800d534 <_scanf_float+0x308>
 800d5dc:	4640      	mov	r0, r8
 800d5de:	4649      	mov	r1, r9
 800d5e0:	f7f3 fb02 	bl	8000be8 <__aeabi_d2f>
 800d5e4:	6038      	str	r0, [r7, #0]
 800d5e6:	e7a5      	b.n	800d534 <_scanf_float+0x308>
 800d5e8:	2600      	movs	r6, #0
 800d5ea:	e666      	b.n	800d2ba <_scanf_float+0x8e>
 800d5ec:	08011460 	.word	0x08011460

0800d5f0 <iprintf>:
 800d5f0:	b40f      	push	{r0, r1, r2, r3}
 800d5f2:	4b0a      	ldr	r3, [pc, #40]	; (800d61c <iprintf+0x2c>)
 800d5f4:	b513      	push	{r0, r1, r4, lr}
 800d5f6:	681c      	ldr	r4, [r3, #0]
 800d5f8:	b124      	cbz	r4, 800d604 <iprintf+0x14>
 800d5fa:	69a3      	ldr	r3, [r4, #24]
 800d5fc:	b913      	cbnz	r3, 800d604 <iprintf+0x14>
 800d5fe:	4620      	mov	r0, r4
 800d600:	f001 ff3e 	bl	800f480 <__sinit>
 800d604:	ab05      	add	r3, sp, #20
 800d606:	9a04      	ldr	r2, [sp, #16]
 800d608:	68a1      	ldr	r1, [r4, #8]
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	4620      	mov	r0, r4
 800d60e:	f003 f9ab 	bl	8010968 <_vfiprintf_r>
 800d612:	b002      	add	sp, #8
 800d614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d618:	b004      	add	sp, #16
 800d61a:	4770      	bx	lr
 800d61c:	20000040 	.word	0x20000040

0800d620 <_puts_r>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	460e      	mov	r6, r1
 800d624:	4605      	mov	r5, r0
 800d626:	b118      	cbz	r0, 800d630 <_puts_r+0x10>
 800d628:	6983      	ldr	r3, [r0, #24]
 800d62a:	b90b      	cbnz	r3, 800d630 <_puts_r+0x10>
 800d62c:	f001 ff28 	bl	800f480 <__sinit>
 800d630:	69ab      	ldr	r3, [r5, #24]
 800d632:	68ac      	ldr	r4, [r5, #8]
 800d634:	b913      	cbnz	r3, 800d63c <_puts_r+0x1c>
 800d636:	4628      	mov	r0, r5
 800d638:	f001 ff22 	bl	800f480 <__sinit>
 800d63c:	4b23      	ldr	r3, [pc, #140]	; (800d6cc <_puts_r+0xac>)
 800d63e:	429c      	cmp	r4, r3
 800d640:	d117      	bne.n	800d672 <_puts_r+0x52>
 800d642:	686c      	ldr	r4, [r5, #4]
 800d644:	89a3      	ldrh	r3, [r4, #12]
 800d646:	071b      	lsls	r3, r3, #28
 800d648:	d51d      	bpl.n	800d686 <_puts_r+0x66>
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	b1db      	cbz	r3, 800d686 <_puts_r+0x66>
 800d64e:	3e01      	subs	r6, #1
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d656:	3b01      	subs	r3, #1
 800d658:	60a3      	str	r3, [r4, #8]
 800d65a:	b9e9      	cbnz	r1, 800d698 <_puts_r+0x78>
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	da2e      	bge.n	800d6be <_puts_r+0x9e>
 800d660:	4622      	mov	r2, r4
 800d662:	210a      	movs	r1, #10
 800d664:	4628      	mov	r0, r5
 800d666:	f000 ff15 	bl	800e494 <__swbuf_r>
 800d66a:	3001      	adds	r0, #1
 800d66c:	d011      	beq.n	800d692 <_puts_r+0x72>
 800d66e:	200a      	movs	r0, #10
 800d670:	e011      	b.n	800d696 <_puts_r+0x76>
 800d672:	4b17      	ldr	r3, [pc, #92]	; (800d6d0 <_puts_r+0xb0>)
 800d674:	429c      	cmp	r4, r3
 800d676:	d101      	bne.n	800d67c <_puts_r+0x5c>
 800d678:	68ac      	ldr	r4, [r5, #8]
 800d67a:	e7e3      	b.n	800d644 <_puts_r+0x24>
 800d67c:	4b15      	ldr	r3, [pc, #84]	; (800d6d4 <_puts_r+0xb4>)
 800d67e:	429c      	cmp	r4, r3
 800d680:	bf08      	it	eq
 800d682:	68ec      	ldreq	r4, [r5, #12]
 800d684:	e7de      	b.n	800d644 <_puts_r+0x24>
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f000 ff55 	bl	800e538 <__swsetup_r>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0dd      	beq.n	800d64e <_puts_r+0x2e>
 800d692:	f04f 30ff 	mov.w	r0, #4294967295
 800d696:	bd70      	pop	{r4, r5, r6, pc}
 800d698:	2b00      	cmp	r3, #0
 800d69a:	da04      	bge.n	800d6a6 <_puts_r+0x86>
 800d69c:	69a2      	ldr	r2, [r4, #24]
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	dc06      	bgt.n	800d6b0 <_puts_r+0x90>
 800d6a2:	290a      	cmp	r1, #10
 800d6a4:	d004      	beq.n	800d6b0 <_puts_r+0x90>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	1c5a      	adds	r2, r3, #1
 800d6aa:	6022      	str	r2, [r4, #0]
 800d6ac:	7019      	strb	r1, [r3, #0]
 800d6ae:	e7cf      	b.n	800d650 <_puts_r+0x30>
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	f000 feee 	bl	800e494 <__swbuf_r>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d1c9      	bne.n	800d650 <_puts_r+0x30>
 800d6bc:	e7e9      	b.n	800d692 <_puts_r+0x72>
 800d6be:	6823      	ldr	r3, [r4, #0]
 800d6c0:	200a      	movs	r0, #10
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	6022      	str	r2, [r4, #0]
 800d6c6:	7018      	strb	r0, [r3, #0]
 800d6c8:	e7e5      	b.n	800d696 <_puts_r+0x76>
 800d6ca:	bf00      	nop
 800d6cc:	080114e8 	.word	0x080114e8
 800d6d0:	08011508 	.word	0x08011508
 800d6d4:	080114c8 	.word	0x080114c8

0800d6d8 <puts>:
 800d6d8:	4b02      	ldr	r3, [pc, #8]	; (800d6e4 <puts+0xc>)
 800d6da:	4601      	mov	r1, r0
 800d6dc:	6818      	ldr	r0, [r3, #0]
 800d6de:	f7ff bf9f 	b.w	800d620 <_puts_r>
 800d6e2:	bf00      	nop
 800d6e4:	20000040 	.word	0x20000040

0800d6e8 <nanf>:
 800d6e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d6f0 <nanf+0x8>
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	7fc00000 	.word	0x7fc00000

0800d6f4 <siprintf>:
 800d6f4:	b40e      	push	{r1, r2, r3}
 800d6f6:	b500      	push	{lr}
 800d6f8:	b09c      	sub	sp, #112	; 0x70
 800d6fa:	ab1d      	add	r3, sp, #116	; 0x74
 800d6fc:	9002      	str	r0, [sp, #8]
 800d6fe:	9006      	str	r0, [sp, #24]
 800d700:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d704:	4809      	ldr	r0, [pc, #36]	; (800d72c <siprintf+0x38>)
 800d706:	9107      	str	r1, [sp, #28]
 800d708:	9104      	str	r1, [sp, #16]
 800d70a:	4909      	ldr	r1, [pc, #36]	; (800d730 <siprintf+0x3c>)
 800d70c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d710:	9105      	str	r1, [sp, #20]
 800d712:	6800      	ldr	r0, [r0, #0]
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	a902      	add	r1, sp, #8
 800d718:	f003 f804 	bl	8010724 <_svfiprintf_r>
 800d71c:	9b02      	ldr	r3, [sp, #8]
 800d71e:	2200      	movs	r2, #0
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	b01c      	add	sp, #112	; 0x70
 800d724:	f85d eb04 	ldr.w	lr, [sp], #4
 800d728:	b003      	add	sp, #12
 800d72a:	4770      	bx	lr
 800d72c:	20000040 	.word	0x20000040
 800d730:	ffff0208 	.word	0xffff0208

0800d734 <sulp>:
 800d734:	b570      	push	{r4, r5, r6, lr}
 800d736:	4604      	mov	r4, r0
 800d738:	460d      	mov	r5, r1
 800d73a:	ec45 4b10 	vmov	d0, r4, r5
 800d73e:	4616      	mov	r6, r2
 800d740:	f002 fdac 	bl	801029c <__ulp>
 800d744:	ec51 0b10 	vmov	r0, r1, d0
 800d748:	b17e      	cbz	r6, 800d76a <sulp+0x36>
 800d74a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d74e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d752:	2b00      	cmp	r3, #0
 800d754:	dd09      	ble.n	800d76a <sulp+0x36>
 800d756:	051b      	lsls	r3, r3, #20
 800d758:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d75c:	2400      	movs	r4, #0
 800d75e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d762:	4622      	mov	r2, r4
 800d764:	462b      	mov	r3, r5
 800d766:	f7f2 ff47 	bl	80005f8 <__aeabi_dmul>
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	0000      	movs	r0, r0
	...

0800d770 <_strtod_l>:
 800d770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d774:	461f      	mov	r7, r3
 800d776:	b0a1      	sub	sp, #132	; 0x84
 800d778:	2300      	movs	r3, #0
 800d77a:	4681      	mov	r9, r0
 800d77c:	4638      	mov	r0, r7
 800d77e:	460e      	mov	r6, r1
 800d780:	9217      	str	r2, [sp, #92]	; 0x5c
 800d782:	931c      	str	r3, [sp, #112]	; 0x70
 800d784:	f002 fa2f 	bl	800fbe6 <__localeconv_l>
 800d788:	4680      	mov	r8, r0
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	f7f2 fd20 	bl	80001d0 <strlen>
 800d790:	f04f 0a00 	mov.w	sl, #0
 800d794:	4604      	mov	r4, r0
 800d796:	f04f 0b00 	mov.w	fp, #0
 800d79a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d79c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	2a0d      	cmp	r2, #13
 800d7a2:	d832      	bhi.n	800d80a <_strtod_l+0x9a>
 800d7a4:	2a09      	cmp	r2, #9
 800d7a6:	d236      	bcs.n	800d816 <_strtod_l+0xa6>
 800d7a8:	2a00      	cmp	r2, #0
 800d7aa:	d03e      	beq.n	800d82a <_strtod_l+0xba>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	930d      	str	r3, [sp, #52]	; 0x34
 800d7b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d7b2:	782b      	ldrb	r3, [r5, #0]
 800d7b4:	2b30      	cmp	r3, #48	; 0x30
 800d7b6:	f040 80ac 	bne.w	800d912 <_strtod_l+0x1a2>
 800d7ba:	786b      	ldrb	r3, [r5, #1]
 800d7bc:	2b58      	cmp	r3, #88	; 0x58
 800d7be:	d001      	beq.n	800d7c4 <_strtod_l+0x54>
 800d7c0:	2b78      	cmp	r3, #120	; 0x78
 800d7c2:	d167      	bne.n	800d894 <_strtod_l+0x124>
 800d7c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	ab1c      	add	r3, sp, #112	; 0x70
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	9702      	str	r7, [sp, #8]
 800d7ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d7d0:	4a88      	ldr	r2, [pc, #544]	; (800d9f4 <_strtod_l+0x284>)
 800d7d2:	a91b      	add	r1, sp, #108	; 0x6c
 800d7d4:	4648      	mov	r0, r9
 800d7d6:	f001 ff2c 	bl	800f632 <__gethex>
 800d7da:	f010 0407 	ands.w	r4, r0, #7
 800d7de:	4606      	mov	r6, r0
 800d7e0:	d005      	beq.n	800d7ee <_strtod_l+0x7e>
 800d7e2:	2c06      	cmp	r4, #6
 800d7e4:	d12b      	bne.n	800d83e <_strtod_l+0xce>
 800d7e6:	3501      	adds	r5, #1
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	951b      	str	r5, [sp, #108]	; 0x6c
 800d7ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d7ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 859a 	bne.w	800e32a <_strtod_l+0xbba>
 800d7f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f8:	b1e3      	cbz	r3, 800d834 <_strtod_l+0xc4>
 800d7fa:	4652      	mov	r2, sl
 800d7fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d800:	ec43 2b10 	vmov	d0, r2, r3
 800d804:	b021      	add	sp, #132	; 0x84
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	2a2b      	cmp	r2, #43	; 0x2b
 800d80c:	d015      	beq.n	800d83a <_strtod_l+0xca>
 800d80e:	2a2d      	cmp	r2, #45	; 0x2d
 800d810:	d004      	beq.n	800d81c <_strtod_l+0xac>
 800d812:	2a20      	cmp	r2, #32
 800d814:	d1ca      	bne.n	800d7ac <_strtod_l+0x3c>
 800d816:	3301      	adds	r3, #1
 800d818:	931b      	str	r3, [sp, #108]	; 0x6c
 800d81a:	e7bf      	b.n	800d79c <_strtod_l+0x2c>
 800d81c:	2201      	movs	r2, #1
 800d81e:	920d      	str	r2, [sp, #52]	; 0x34
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	921b      	str	r2, [sp, #108]	; 0x6c
 800d824:	785b      	ldrb	r3, [r3, #1]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1c2      	bne.n	800d7b0 <_strtod_l+0x40>
 800d82a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d82c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f040 8579 	bne.w	800e326 <_strtod_l+0xbb6>
 800d834:	4652      	mov	r2, sl
 800d836:	465b      	mov	r3, fp
 800d838:	e7e2      	b.n	800d800 <_strtod_l+0x90>
 800d83a:	2200      	movs	r2, #0
 800d83c:	e7ef      	b.n	800d81e <_strtod_l+0xae>
 800d83e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d840:	b13a      	cbz	r2, 800d852 <_strtod_l+0xe2>
 800d842:	2135      	movs	r1, #53	; 0x35
 800d844:	a81e      	add	r0, sp, #120	; 0x78
 800d846:	f002 fe21 	bl	801048c <__copybits>
 800d84a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d84c:	4648      	mov	r0, r9
 800d84e:	f002 fa8d 	bl	800fd6c <_Bfree>
 800d852:	3c01      	subs	r4, #1
 800d854:	2c04      	cmp	r4, #4
 800d856:	d806      	bhi.n	800d866 <_strtod_l+0xf6>
 800d858:	e8df f004 	tbb	[pc, r4]
 800d85c:	1714030a 	.word	0x1714030a
 800d860:	0a          	.byte	0x0a
 800d861:	00          	.byte	0x00
 800d862:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d866:	0730      	lsls	r0, r6, #28
 800d868:	d5c1      	bpl.n	800d7ee <_strtod_l+0x7e>
 800d86a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d86e:	e7be      	b.n	800d7ee <_strtod_l+0x7e>
 800d870:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d874:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d87a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d87e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d882:	e7f0      	b.n	800d866 <_strtod_l+0xf6>
 800d884:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d9f8 <_strtod_l+0x288>
 800d888:	e7ed      	b.n	800d866 <_strtod_l+0xf6>
 800d88a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d88e:	f04f 3aff 	mov.w	sl, #4294967295
 800d892:	e7e8      	b.n	800d866 <_strtod_l+0xf6>
 800d894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d896:	1c5a      	adds	r2, r3, #1
 800d898:	921b      	str	r2, [sp, #108]	; 0x6c
 800d89a:	785b      	ldrb	r3, [r3, #1]
 800d89c:	2b30      	cmp	r3, #48	; 0x30
 800d89e:	d0f9      	beq.n	800d894 <_strtod_l+0x124>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d0a4      	beq.n	800d7ee <_strtod_l+0x7e>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	2500      	movs	r5, #0
 800d8a8:	9306      	str	r3, [sp, #24]
 800d8aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8ac:	9308      	str	r3, [sp, #32]
 800d8ae:	9507      	str	r5, [sp, #28]
 800d8b0:	9505      	str	r5, [sp, #20]
 800d8b2:	220a      	movs	r2, #10
 800d8b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d8b6:	7807      	ldrb	r7, [r0, #0]
 800d8b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d8bc:	b2d9      	uxtb	r1, r3
 800d8be:	2909      	cmp	r1, #9
 800d8c0:	d929      	bls.n	800d916 <_strtod_l+0x1a6>
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	f8d8 1000 	ldr.w	r1, [r8]
 800d8c8:	f003 f9b7 	bl	8010c3a <strncmp>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	d031      	beq.n	800d934 <_strtod_l+0x1c4>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	9c05      	ldr	r4, [sp, #20]
 800d8d4:	9004      	str	r0, [sp, #16]
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	4602      	mov	r2, r0
 800d8da:	2b65      	cmp	r3, #101	; 0x65
 800d8dc:	d001      	beq.n	800d8e2 <_strtod_l+0x172>
 800d8de:	2b45      	cmp	r3, #69	; 0x45
 800d8e0:	d114      	bne.n	800d90c <_strtod_l+0x19c>
 800d8e2:	b924      	cbnz	r4, 800d8ee <_strtod_l+0x17e>
 800d8e4:	b910      	cbnz	r0, 800d8ec <_strtod_l+0x17c>
 800d8e6:	9b06      	ldr	r3, [sp, #24]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d09e      	beq.n	800d82a <_strtod_l+0xba>
 800d8ec:	2400      	movs	r4, #0
 800d8ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d8f0:	1c73      	adds	r3, r6, #1
 800d8f2:	931b      	str	r3, [sp, #108]	; 0x6c
 800d8f4:	7873      	ldrb	r3, [r6, #1]
 800d8f6:	2b2b      	cmp	r3, #43	; 0x2b
 800d8f8:	d078      	beq.n	800d9ec <_strtod_l+0x27c>
 800d8fa:	2b2d      	cmp	r3, #45	; 0x2d
 800d8fc:	d070      	beq.n	800d9e0 <_strtod_l+0x270>
 800d8fe:	f04f 0c00 	mov.w	ip, #0
 800d902:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d906:	2f09      	cmp	r7, #9
 800d908:	d97c      	bls.n	800da04 <_strtod_l+0x294>
 800d90a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d90c:	f04f 0e00 	mov.w	lr, #0
 800d910:	e09a      	b.n	800da48 <_strtod_l+0x2d8>
 800d912:	2300      	movs	r3, #0
 800d914:	e7c7      	b.n	800d8a6 <_strtod_l+0x136>
 800d916:	9905      	ldr	r1, [sp, #20]
 800d918:	2908      	cmp	r1, #8
 800d91a:	bfdd      	ittte	le
 800d91c:	9907      	ldrle	r1, [sp, #28]
 800d91e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d922:	9307      	strle	r3, [sp, #28]
 800d924:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d928:	9b05      	ldr	r3, [sp, #20]
 800d92a:	3001      	adds	r0, #1
 800d92c:	3301      	adds	r3, #1
 800d92e:	9305      	str	r3, [sp, #20]
 800d930:	901b      	str	r0, [sp, #108]	; 0x6c
 800d932:	e7bf      	b.n	800d8b4 <_strtod_l+0x144>
 800d934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d936:	191a      	adds	r2, r3, r4
 800d938:	921b      	str	r2, [sp, #108]	; 0x6c
 800d93a:	9a05      	ldr	r2, [sp, #20]
 800d93c:	5d1b      	ldrb	r3, [r3, r4]
 800d93e:	2a00      	cmp	r2, #0
 800d940:	d037      	beq.n	800d9b2 <_strtod_l+0x242>
 800d942:	9c05      	ldr	r4, [sp, #20]
 800d944:	4602      	mov	r2, r0
 800d946:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d94a:	2909      	cmp	r1, #9
 800d94c:	d913      	bls.n	800d976 <_strtod_l+0x206>
 800d94e:	2101      	movs	r1, #1
 800d950:	9104      	str	r1, [sp, #16]
 800d952:	e7c2      	b.n	800d8da <_strtod_l+0x16a>
 800d954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	921b      	str	r2, [sp, #108]	; 0x6c
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	3001      	adds	r0, #1
 800d95e:	2b30      	cmp	r3, #48	; 0x30
 800d960:	d0f8      	beq.n	800d954 <_strtod_l+0x1e4>
 800d962:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d966:	2a08      	cmp	r2, #8
 800d968:	f200 84e4 	bhi.w	800e334 <_strtod_l+0xbc4>
 800d96c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d96e:	9208      	str	r2, [sp, #32]
 800d970:	4602      	mov	r2, r0
 800d972:	2000      	movs	r0, #0
 800d974:	4604      	mov	r4, r0
 800d976:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d97a:	f100 0101 	add.w	r1, r0, #1
 800d97e:	d012      	beq.n	800d9a6 <_strtod_l+0x236>
 800d980:	440a      	add	r2, r1
 800d982:	eb00 0c04 	add.w	ip, r0, r4
 800d986:	4621      	mov	r1, r4
 800d988:	270a      	movs	r7, #10
 800d98a:	458c      	cmp	ip, r1
 800d98c:	d113      	bne.n	800d9b6 <_strtod_l+0x246>
 800d98e:	1821      	adds	r1, r4, r0
 800d990:	2908      	cmp	r1, #8
 800d992:	f104 0401 	add.w	r4, r4, #1
 800d996:	4404      	add	r4, r0
 800d998:	dc19      	bgt.n	800d9ce <_strtod_l+0x25e>
 800d99a:	9b07      	ldr	r3, [sp, #28]
 800d99c:	210a      	movs	r1, #10
 800d99e:	fb01 e303 	mla	r3, r1, r3, lr
 800d9a2:	9307      	str	r3, [sp, #28]
 800d9a4:	2100      	movs	r1, #0
 800d9a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9a8:	1c58      	adds	r0, r3, #1
 800d9aa:	901b      	str	r0, [sp, #108]	; 0x6c
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	4608      	mov	r0, r1
 800d9b0:	e7c9      	b.n	800d946 <_strtod_l+0x1d6>
 800d9b2:	9805      	ldr	r0, [sp, #20]
 800d9b4:	e7d3      	b.n	800d95e <_strtod_l+0x1ee>
 800d9b6:	2908      	cmp	r1, #8
 800d9b8:	f101 0101 	add.w	r1, r1, #1
 800d9bc:	dc03      	bgt.n	800d9c6 <_strtod_l+0x256>
 800d9be:	9b07      	ldr	r3, [sp, #28]
 800d9c0:	437b      	muls	r3, r7
 800d9c2:	9307      	str	r3, [sp, #28]
 800d9c4:	e7e1      	b.n	800d98a <_strtod_l+0x21a>
 800d9c6:	2910      	cmp	r1, #16
 800d9c8:	bfd8      	it	le
 800d9ca:	437d      	mulle	r5, r7
 800d9cc:	e7dd      	b.n	800d98a <_strtod_l+0x21a>
 800d9ce:	2c10      	cmp	r4, #16
 800d9d0:	bfdc      	itt	le
 800d9d2:	210a      	movle	r1, #10
 800d9d4:	fb01 e505 	mlale	r5, r1, r5, lr
 800d9d8:	e7e4      	b.n	800d9a4 <_strtod_l+0x234>
 800d9da:	2301      	movs	r3, #1
 800d9dc:	9304      	str	r3, [sp, #16]
 800d9de:	e781      	b.n	800d8e4 <_strtod_l+0x174>
 800d9e0:	f04f 0c01 	mov.w	ip, #1
 800d9e4:	1cb3      	adds	r3, r6, #2
 800d9e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d9e8:	78b3      	ldrb	r3, [r6, #2]
 800d9ea:	e78a      	b.n	800d902 <_strtod_l+0x192>
 800d9ec:	f04f 0c00 	mov.w	ip, #0
 800d9f0:	e7f8      	b.n	800d9e4 <_strtod_l+0x274>
 800d9f2:	bf00      	nop
 800d9f4:	08011468 	.word	0x08011468
 800d9f8:	7ff00000 	.word	0x7ff00000
 800d9fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d9fe:	1c5f      	adds	r7, r3, #1
 800da00:	971b      	str	r7, [sp, #108]	; 0x6c
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	2b30      	cmp	r3, #48	; 0x30
 800da06:	d0f9      	beq.n	800d9fc <_strtod_l+0x28c>
 800da08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800da0c:	2f08      	cmp	r7, #8
 800da0e:	f63f af7d 	bhi.w	800d90c <_strtod_l+0x19c>
 800da12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800da16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da18:	930a      	str	r3, [sp, #40]	; 0x28
 800da1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da1c:	1c5f      	adds	r7, r3, #1
 800da1e:	971b      	str	r7, [sp, #108]	; 0x6c
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800da26:	f1b8 0f09 	cmp.w	r8, #9
 800da2a:	d937      	bls.n	800da9c <_strtod_l+0x32c>
 800da2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800da2e:	1a7f      	subs	r7, r7, r1
 800da30:	2f08      	cmp	r7, #8
 800da32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800da36:	dc37      	bgt.n	800daa8 <_strtod_l+0x338>
 800da38:	45be      	cmp	lr, r7
 800da3a:	bfa8      	it	ge
 800da3c:	46be      	movge	lr, r7
 800da3e:	f1bc 0f00 	cmp.w	ip, #0
 800da42:	d001      	beq.n	800da48 <_strtod_l+0x2d8>
 800da44:	f1ce 0e00 	rsb	lr, lr, #0
 800da48:	2c00      	cmp	r4, #0
 800da4a:	d151      	bne.n	800daf0 <_strtod_l+0x380>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	f47f aece 	bne.w	800d7ee <_strtod_l+0x7e>
 800da52:	9a06      	ldr	r2, [sp, #24]
 800da54:	2a00      	cmp	r2, #0
 800da56:	f47f aeca 	bne.w	800d7ee <_strtod_l+0x7e>
 800da5a:	9a04      	ldr	r2, [sp, #16]
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	f47f aee4 	bne.w	800d82a <_strtod_l+0xba>
 800da62:	2b4e      	cmp	r3, #78	; 0x4e
 800da64:	d027      	beq.n	800dab6 <_strtod_l+0x346>
 800da66:	dc21      	bgt.n	800daac <_strtod_l+0x33c>
 800da68:	2b49      	cmp	r3, #73	; 0x49
 800da6a:	f47f aede 	bne.w	800d82a <_strtod_l+0xba>
 800da6e:	49a0      	ldr	r1, [pc, #640]	; (800dcf0 <_strtod_l+0x580>)
 800da70:	a81b      	add	r0, sp, #108	; 0x6c
 800da72:	f002 f811 	bl	800fa98 <__match>
 800da76:	2800      	cmp	r0, #0
 800da78:	f43f aed7 	beq.w	800d82a <_strtod_l+0xba>
 800da7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da7e:	499d      	ldr	r1, [pc, #628]	; (800dcf4 <_strtod_l+0x584>)
 800da80:	3b01      	subs	r3, #1
 800da82:	a81b      	add	r0, sp, #108	; 0x6c
 800da84:	931b      	str	r3, [sp, #108]	; 0x6c
 800da86:	f002 f807 	bl	800fa98 <__match>
 800da8a:	b910      	cbnz	r0, 800da92 <_strtod_l+0x322>
 800da8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da8e:	3301      	adds	r3, #1
 800da90:	931b      	str	r3, [sp, #108]	; 0x6c
 800da92:	f8df b274 	ldr.w	fp, [pc, #628]	; 800dd08 <_strtod_l+0x598>
 800da96:	f04f 0a00 	mov.w	sl, #0
 800da9a:	e6a8      	b.n	800d7ee <_strtod_l+0x7e>
 800da9c:	210a      	movs	r1, #10
 800da9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800daa2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800daa6:	e7b8      	b.n	800da1a <_strtod_l+0x2aa>
 800daa8:	46be      	mov	lr, r7
 800daaa:	e7c8      	b.n	800da3e <_strtod_l+0x2ce>
 800daac:	2b69      	cmp	r3, #105	; 0x69
 800daae:	d0de      	beq.n	800da6e <_strtod_l+0x2fe>
 800dab0:	2b6e      	cmp	r3, #110	; 0x6e
 800dab2:	f47f aeba 	bne.w	800d82a <_strtod_l+0xba>
 800dab6:	4990      	ldr	r1, [pc, #576]	; (800dcf8 <_strtod_l+0x588>)
 800dab8:	a81b      	add	r0, sp, #108	; 0x6c
 800daba:	f001 ffed 	bl	800fa98 <__match>
 800dabe:	2800      	cmp	r0, #0
 800dac0:	f43f aeb3 	beq.w	800d82a <_strtod_l+0xba>
 800dac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	2b28      	cmp	r3, #40	; 0x28
 800daca:	d10e      	bne.n	800daea <_strtod_l+0x37a>
 800dacc:	aa1e      	add	r2, sp, #120	; 0x78
 800dace:	498b      	ldr	r1, [pc, #556]	; (800dcfc <_strtod_l+0x58c>)
 800dad0:	a81b      	add	r0, sp, #108	; 0x6c
 800dad2:	f001 fff5 	bl	800fac0 <__hexnan>
 800dad6:	2805      	cmp	r0, #5
 800dad8:	d107      	bne.n	800daea <_strtod_l+0x37a>
 800dada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dadc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800dae0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dae4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dae8:	e681      	b.n	800d7ee <_strtod_l+0x7e>
 800daea:	f8df b224 	ldr.w	fp, [pc, #548]	; 800dd10 <_strtod_l+0x5a0>
 800daee:	e7d2      	b.n	800da96 <_strtod_l+0x326>
 800daf0:	ebae 0302 	sub.w	r3, lr, r2
 800daf4:	9306      	str	r3, [sp, #24]
 800daf6:	9b05      	ldr	r3, [sp, #20]
 800daf8:	9807      	ldr	r0, [sp, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	bf08      	it	eq
 800dafe:	4623      	moveq	r3, r4
 800db00:	2c10      	cmp	r4, #16
 800db02:	9305      	str	r3, [sp, #20]
 800db04:	46a0      	mov	r8, r4
 800db06:	bfa8      	it	ge
 800db08:	f04f 0810 	movge.w	r8, #16
 800db0c:	f7f2 fcfa 	bl	8000504 <__aeabi_ui2d>
 800db10:	2c09      	cmp	r4, #9
 800db12:	4682      	mov	sl, r0
 800db14:	468b      	mov	fp, r1
 800db16:	dc13      	bgt.n	800db40 <_strtod_l+0x3d0>
 800db18:	9b06      	ldr	r3, [sp, #24]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f43f ae67 	beq.w	800d7ee <_strtod_l+0x7e>
 800db20:	9b06      	ldr	r3, [sp, #24]
 800db22:	dd7a      	ble.n	800dc1a <_strtod_l+0x4aa>
 800db24:	2b16      	cmp	r3, #22
 800db26:	dc61      	bgt.n	800dbec <_strtod_l+0x47c>
 800db28:	4a75      	ldr	r2, [pc, #468]	; (800dd00 <_strtod_l+0x590>)
 800db2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800db2e:	e9de 0100 	ldrd	r0, r1, [lr]
 800db32:	4652      	mov	r2, sl
 800db34:	465b      	mov	r3, fp
 800db36:	f7f2 fd5f 	bl	80005f8 <__aeabi_dmul>
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	e656      	b.n	800d7ee <_strtod_l+0x7e>
 800db40:	4b6f      	ldr	r3, [pc, #444]	; (800dd00 <_strtod_l+0x590>)
 800db42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800db4a:	f7f2 fd55 	bl	80005f8 <__aeabi_dmul>
 800db4e:	4606      	mov	r6, r0
 800db50:	4628      	mov	r0, r5
 800db52:	460f      	mov	r7, r1
 800db54:	f7f2 fcd6 	bl	8000504 <__aeabi_ui2d>
 800db58:	4602      	mov	r2, r0
 800db5a:	460b      	mov	r3, r1
 800db5c:	4630      	mov	r0, r6
 800db5e:	4639      	mov	r1, r7
 800db60:	f7f2 fb94 	bl	800028c <__adddf3>
 800db64:	2c0f      	cmp	r4, #15
 800db66:	4682      	mov	sl, r0
 800db68:	468b      	mov	fp, r1
 800db6a:	ddd5      	ble.n	800db18 <_strtod_l+0x3a8>
 800db6c:	9b06      	ldr	r3, [sp, #24]
 800db6e:	eba4 0808 	sub.w	r8, r4, r8
 800db72:	4498      	add	r8, r3
 800db74:	f1b8 0f00 	cmp.w	r8, #0
 800db78:	f340 8096 	ble.w	800dca8 <_strtod_l+0x538>
 800db7c:	f018 030f 	ands.w	r3, r8, #15
 800db80:	d00a      	beq.n	800db98 <_strtod_l+0x428>
 800db82:	495f      	ldr	r1, [pc, #380]	; (800dd00 <_strtod_l+0x590>)
 800db84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800db88:	4652      	mov	r2, sl
 800db8a:	465b      	mov	r3, fp
 800db8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db90:	f7f2 fd32 	bl	80005f8 <__aeabi_dmul>
 800db94:	4682      	mov	sl, r0
 800db96:	468b      	mov	fp, r1
 800db98:	f038 080f 	bics.w	r8, r8, #15
 800db9c:	d073      	beq.n	800dc86 <_strtod_l+0x516>
 800db9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dba2:	dd47      	ble.n	800dc34 <_strtod_l+0x4c4>
 800dba4:	2400      	movs	r4, #0
 800dba6:	46a0      	mov	r8, r4
 800dba8:	9407      	str	r4, [sp, #28]
 800dbaa:	9405      	str	r4, [sp, #20]
 800dbac:	2322      	movs	r3, #34	; 0x22
 800dbae:	f8df b158 	ldr.w	fp, [pc, #344]	; 800dd08 <_strtod_l+0x598>
 800dbb2:	f8c9 3000 	str.w	r3, [r9]
 800dbb6:	f04f 0a00 	mov.w	sl, #0
 800dbba:	9b07      	ldr	r3, [sp, #28]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f43f ae16 	beq.w	800d7ee <_strtod_l+0x7e>
 800dbc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dbc4:	4648      	mov	r0, r9
 800dbc6:	f002 f8d1 	bl	800fd6c <_Bfree>
 800dbca:	9905      	ldr	r1, [sp, #20]
 800dbcc:	4648      	mov	r0, r9
 800dbce:	f002 f8cd 	bl	800fd6c <_Bfree>
 800dbd2:	4641      	mov	r1, r8
 800dbd4:	4648      	mov	r0, r9
 800dbd6:	f002 f8c9 	bl	800fd6c <_Bfree>
 800dbda:	9907      	ldr	r1, [sp, #28]
 800dbdc:	4648      	mov	r0, r9
 800dbde:	f002 f8c5 	bl	800fd6c <_Bfree>
 800dbe2:	4621      	mov	r1, r4
 800dbe4:	4648      	mov	r0, r9
 800dbe6:	f002 f8c1 	bl	800fd6c <_Bfree>
 800dbea:	e600      	b.n	800d7ee <_strtod_l+0x7e>
 800dbec:	9a06      	ldr	r2, [sp, #24]
 800dbee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800dbf2:	4293      	cmp	r3, r2
 800dbf4:	dbba      	blt.n	800db6c <_strtod_l+0x3fc>
 800dbf6:	4d42      	ldr	r5, [pc, #264]	; (800dd00 <_strtod_l+0x590>)
 800dbf8:	f1c4 040f 	rsb	r4, r4, #15
 800dbfc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800dc00:	4652      	mov	r2, sl
 800dc02:	465b      	mov	r3, fp
 800dc04:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc08:	f7f2 fcf6 	bl	80005f8 <__aeabi_dmul>
 800dc0c:	9b06      	ldr	r3, [sp, #24]
 800dc0e:	1b1c      	subs	r4, r3, r4
 800dc10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800dc14:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc18:	e78d      	b.n	800db36 <_strtod_l+0x3c6>
 800dc1a:	f113 0f16 	cmn.w	r3, #22
 800dc1e:	dba5      	blt.n	800db6c <_strtod_l+0x3fc>
 800dc20:	4a37      	ldr	r2, [pc, #220]	; (800dd00 <_strtod_l+0x590>)
 800dc22:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800dc26:	e9d2 2300 	ldrd	r2, r3, [r2]
 800dc2a:	4650      	mov	r0, sl
 800dc2c:	4659      	mov	r1, fp
 800dc2e:	f7f2 fe0d 	bl	800084c <__aeabi_ddiv>
 800dc32:	e782      	b.n	800db3a <_strtod_l+0x3ca>
 800dc34:	2300      	movs	r3, #0
 800dc36:	4e33      	ldr	r6, [pc, #204]	; (800dd04 <_strtod_l+0x594>)
 800dc38:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	4659      	mov	r1, fp
 800dc40:	461d      	mov	r5, r3
 800dc42:	f1b8 0f01 	cmp.w	r8, #1
 800dc46:	dc21      	bgt.n	800dc8c <_strtod_l+0x51c>
 800dc48:	b10b      	cbz	r3, 800dc4e <_strtod_l+0x4de>
 800dc4a:	4682      	mov	sl, r0
 800dc4c:	468b      	mov	fp, r1
 800dc4e:	4b2d      	ldr	r3, [pc, #180]	; (800dd04 <_strtod_l+0x594>)
 800dc50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dc54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dc58:	4652      	mov	r2, sl
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dc60:	f7f2 fcca 	bl	80005f8 <__aeabi_dmul>
 800dc64:	4b28      	ldr	r3, [pc, #160]	; (800dd08 <_strtod_l+0x598>)
 800dc66:	460a      	mov	r2, r1
 800dc68:	400b      	ands	r3, r1
 800dc6a:	4928      	ldr	r1, [pc, #160]	; (800dd0c <_strtod_l+0x59c>)
 800dc6c:	428b      	cmp	r3, r1
 800dc6e:	4682      	mov	sl, r0
 800dc70:	d898      	bhi.n	800dba4 <_strtod_l+0x434>
 800dc72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dc76:	428b      	cmp	r3, r1
 800dc78:	bf86      	itte	hi
 800dc7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800dd14 <_strtod_l+0x5a4>
 800dc7e:	f04f 3aff 	movhi.w	sl, #4294967295
 800dc82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dc86:	2300      	movs	r3, #0
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	e077      	b.n	800dd7c <_strtod_l+0x60c>
 800dc8c:	f018 0f01 	tst.w	r8, #1
 800dc90:	d006      	beq.n	800dca0 <_strtod_l+0x530>
 800dc92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	3501      	adds	r5, #1
 800dca2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dca6:	e7cc      	b.n	800dc42 <_strtod_l+0x4d2>
 800dca8:	d0ed      	beq.n	800dc86 <_strtod_l+0x516>
 800dcaa:	f1c8 0800 	rsb	r8, r8, #0
 800dcae:	f018 020f 	ands.w	r2, r8, #15
 800dcb2:	d00a      	beq.n	800dcca <_strtod_l+0x55a>
 800dcb4:	4b12      	ldr	r3, [pc, #72]	; (800dd00 <_strtod_l+0x590>)
 800dcb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dcba:	4650      	mov	r0, sl
 800dcbc:	4659      	mov	r1, fp
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	f7f2 fdc3 	bl	800084c <__aeabi_ddiv>
 800dcc6:	4682      	mov	sl, r0
 800dcc8:	468b      	mov	fp, r1
 800dcca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dcce:	d0da      	beq.n	800dc86 <_strtod_l+0x516>
 800dcd0:	f1b8 0f1f 	cmp.w	r8, #31
 800dcd4:	dd20      	ble.n	800dd18 <_strtod_l+0x5a8>
 800dcd6:	2400      	movs	r4, #0
 800dcd8:	46a0      	mov	r8, r4
 800dcda:	9407      	str	r4, [sp, #28]
 800dcdc:	9405      	str	r4, [sp, #20]
 800dcde:	2322      	movs	r3, #34	; 0x22
 800dce0:	f04f 0a00 	mov.w	sl, #0
 800dce4:	f04f 0b00 	mov.w	fp, #0
 800dce8:	f8c9 3000 	str.w	r3, [r9]
 800dcec:	e765      	b.n	800dbba <_strtod_l+0x44a>
 800dcee:	bf00      	nop
 800dcf0:	08011431 	.word	0x08011431
 800dcf4:	080114bb 	.word	0x080114bb
 800dcf8:	08011439 	.word	0x08011439
 800dcfc:	0801147c 	.word	0x0801147c
 800dd00:	08011560 	.word	0x08011560
 800dd04:	08011538 	.word	0x08011538
 800dd08:	7ff00000 	.word	0x7ff00000
 800dd0c:	7ca00000 	.word	0x7ca00000
 800dd10:	fff80000 	.word	0xfff80000
 800dd14:	7fefffff 	.word	0x7fefffff
 800dd18:	f018 0310 	ands.w	r3, r8, #16
 800dd1c:	bf18      	it	ne
 800dd1e:	236a      	movne	r3, #106	; 0x6a
 800dd20:	4da0      	ldr	r5, [pc, #640]	; (800dfa4 <_strtod_l+0x834>)
 800dd22:	9304      	str	r3, [sp, #16]
 800dd24:	4650      	mov	r0, sl
 800dd26:	4659      	mov	r1, fp
 800dd28:	2300      	movs	r3, #0
 800dd2a:	f1b8 0f00 	cmp.w	r8, #0
 800dd2e:	f300 810a 	bgt.w	800df46 <_strtod_l+0x7d6>
 800dd32:	b10b      	cbz	r3, 800dd38 <_strtod_l+0x5c8>
 800dd34:	4682      	mov	sl, r0
 800dd36:	468b      	mov	fp, r1
 800dd38:	9b04      	ldr	r3, [sp, #16]
 800dd3a:	b1bb      	cbz	r3, 800dd6c <_strtod_l+0x5fc>
 800dd3c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800dd40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	4659      	mov	r1, fp
 800dd48:	dd10      	ble.n	800dd6c <_strtod_l+0x5fc>
 800dd4a:	2b1f      	cmp	r3, #31
 800dd4c:	f340 8107 	ble.w	800df5e <_strtod_l+0x7ee>
 800dd50:	2b34      	cmp	r3, #52	; 0x34
 800dd52:	bfde      	ittt	le
 800dd54:	3b20      	suble	r3, #32
 800dd56:	f04f 32ff 	movle.w	r2, #4294967295
 800dd5a:	fa02 f303 	lslle.w	r3, r2, r3
 800dd5e:	f04f 0a00 	mov.w	sl, #0
 800dd62:	bfcc      	ite	gt
 800dd64:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800dd68:	ea03 0b01 	andle.w	fp, r3, r1
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4650      	mov	r0, sl
 800dd72:	4659      	mov	r1, fp
 800dd74:	f7f2 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d1ac      	bne.n	800dcd6 <_strtod_l+0x566>
 800dd7c:	9b07      	ldr	r3, [sp, #28]
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	9a05      	ldr	r2, [sp, #20]
 800dd82:	9908      	ldr	r1, [sp, #32]
 800dd84:	4623      	mov	r3, r4
 800dd86:	4648      	mov	r0, r9
 800dd88:	f002 f842 	bl	800fe10 <__s2b>
 800dd8c:	9007      	str	r0, [sp, #28]
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f43f af08 	beq.w	800dba4 <_strtod_l+0x434>
 800dd94:	9a06      	ldr	r2, [sp, #24]
 800dd96:	9b06      	ldr	r3, [sp, #24]
 800dd98:	2a00      	cmp	r2, #0
 800dd9a:	f1c3 0300 	rsb	r3, r3, #0
 800dd9e:	bfa8      	it	ge
 800dda0:	2300      	movge	r3, #0
 800dda2:	930e      	str	r3, [sp, #56]	; 0x38
 800dda4:	2400      	movs	r4, #0
 800dda6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ddaa:	9316      	str	r3, [sp, #88]	; 0x58
 800ddac:	46a0      	mov	r8, r4
 800ddae:	9b07      	ldr	r3, [sp, #28]
 800ddb0:	4648      	mov	r0, r9
 800ddb2:	6859      	ldr	r1, [r3, #4]
 800ddb4:	f001 ffa6 	bl	800fd04 <_Balloc>
 800ddb8:	9005      	str	r0, [sp, #20]
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	f43f aef6 	beq.w	800dbac <_strtod_l+0x43c>
 800ddc0:	9b07      	ldr	r3, [sp, #28]
 800ddc2:	691a      	ldr	r2, [r3, #16]
 800ddc4:	3202      	adds	r2, #2
 800ddc6:	f103 010c 	add.w	r1, r3, #12
 800ddca:	0092      	lsls	r2, r2, #2
 800ddcc:	300c      	adds	r0, #12
 800ddce:	f7fe fdbd 	bl	800c94c <memcpy>
 800ddd2:	aa1e      	add	r2, sp, #120	; 0x78
 800ddd4:	a91d      	add	r1, sp, #116	; 0x74
 800ddd6:	ec4b ab10 	vmov	d0, sl, fp
 800ddda:	4648      	mov	r0, r9
 800dddc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800dde0:	f002 fad2 	bl	8010388 <__d2b>
 800dde4:	901c      	str	r0, [sp, #112]	; 0x70
 800dde6:	2800      	cmp	r0, #0
 800dde8:	f43f aee0 	beq.w	800dbac <_strtod_l+0x43c>
 800ddec:	2101      	movs	r1, #1
 800ddee:	4648      	mov	r0, r9
 800ddf0:	f002 f89a 	bl	800ff28 <__i2b>
 800ddf4:	4680      	mov	r8, r0
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f43f aed8 	beq.w	800dbac <_strtod_l+0x43c>
 800ddfc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ddfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800de00:	2e00      	cmp	r6, #0
 800de02:	bfab      	itete	ge
 800de04:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800de06:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800de08:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800de0a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800de0c:	bfac      	ite	ge
 800de0e:	18f7      	addge	r7, r6, r3
 800de10:	1b9d      	sublt	r5, r3, r6
 800de12:	9b04      	ldr	r3, [sp, #16]
 800de14:	1af6      	subs	r6, r6, r3
 800de16:	4416      	add	r6, r2
 800de18:	4b63      	ldr	r3, [pc, #396]	; (800dfa8 <_strtod_l+0x838>)
 800de1a:	3e01      	subs	r6, #1
 800de1c:	429e      	cmp	r6, r3
 800de1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de22:	f280 80af 	bge.w	800df84 <_strtod_l+0x814>
 800de26:	1b9b      	subs	r3, r3, r6
 800de28:	2b1f      	cmp	r3, #31
 800de2a:	eba2 0203 	sub.w	r2, r2, r3
 800de2e:	f04f 0101 	mov.w	r1, #1
 800de32:	f300 809b 	bgt.w	800df6c <_strtod_l+0x7fc>
 800de36:	fa01 f303 	lsl.w	r3, r1, r3
 800de3a:	930f      	str	r3, [sp, #60]	; 0x3c
 800de3c:	2300      	movs	r3, #0
 800de3e:	930a      	str	r3, [sp, #40]	; 0x28
 800de40:	18be      	adds	r6, r7, r2
 800de42:	9b04      	ldr	r3, [sp, #16]
 800de44:	42b7      	cmp	r7, r6
 800de46:	4415      	add	r5, r2
 800de48:	441d      	add	r5, r3
 800de4a:	463b      	mov	r3, r7
 800de4c:	bfa8      	it	ge
 800de4e:	4633      	movge	r3, r6
 800de50:	42ab      	cmp	r3, r5
 800de52:	bfa8      	it	ge
 800de54:	462b      	movge	r3, r5
 800de56:	2b00      	cmp	r3, #0
 800de58:	bfc2      	ittt	gt
 800de5a:	1af6      	subgt	r6, r6, r3
 800de5c:	1aed      	subgt	r5, r5, r3
 800de5e:	1aff      	subgt	r7, r7, r3
 800de60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de62:	b1bb      	cbz	r3, 800de94 <_strtod_l+0x724>
 800de64:	4641      	mov	r1, r8
 800de66:	461a      	mov	r2, r3
 800de68:	4648      	mov	r0, r9
 800de6a:	f002 f8fd 	bl	8010068 <__pow5mult>
 800de6e:	4680      	mov	r8, r0
 800de70:	2800      	cmp	r0, #0
 800de72:	f43f ae9b 	beq.w	800dbac <_strtod_l+0x43c>
 800de76:	4601      	mov	r1, r0
 800de78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800de7a:	4648      	mov	r0, r9
 800de7c:	f002 f85d 	bl	800ff3a <__multiply>
 800de80:	900c      	str	r0, [sp, #48]	; 0x30
 800de82:	2800      	cmp	r0, #0
 800de84:	f43f ae92 	beq.w	800dbac <_strtod_l+0x43c>
 800de88:	991c      	ldr	r1, [sp, #112]	; 0x70
 800de8a:	4648      	mov	r0, r9
 800de8c:	f001 ff6e 	bl	800fd6c <_Bfree>
 800de90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de92:	931c      	str	r3, [sp, #112]	; 0x70
 800de94:	2e00      	cmp	r6, #0
 800de96:	dc7a      	bgt.n	800df8e <_strtod_l+0x81e>
 800de98:	9b06      	ldr	r3, [sp, #24]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	dd08      	ble.n	800deb0 <_strtod_l+0x740>
 800de9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800dea0:	9905      	ldr	r1, [sp, #20]
 800dea2:	4648      	mov	r0, r9
 800dea4:	f002 f8e0 	bl	8010068 <__pow5mult>
 800dea8:	9005      	str	r0, [sp, #20]
 800deaa:	2800      	cmp	r0, #0
 800deac:	f43f ae7e 	beq.w	800dbac <_strtod_l+0x43c>
 800deb0:	2d00      	cmp	r5, #0
 800deb2:	dd08      	ble.n	800dec6 <_strtod_l+0x756>
 800deb4:	462a      	mov	r2, r5
 800deb6:	9905      	ldr	r1, [sp, #20]
 800deb8:	4648      	mov	r0, r9
 800deba:	f002 f923 	bl	8010104 <__lshift>
 800debe:	9005      	str	r0, [sp, #20]
 800dec0:	2800      	cmp	r0, #0
 800dec2:	f43f ae73 	beq.w	800dbac <_strtod_l+0x43c>
 800dec6:	2f00      	cmp	r7, #0
 800dec8:	dd08      	ble.n	800dedc <_strtod_l+0x76c>
 800deca:	4641      	mov	r1, r8
 800decc:	463a      	mov	r2, r7
 800dece:	4648      	mov	r0, r9
 800ded0:	f002 f918 	bl	8010104 <__lshift>
 800ded4:	4680      	mov	r8, r0
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f43f ae68 	beq.w	800dbac <_strtod_l+0x43c>
 800dedc:	9a05      	ldr	r2, [sp, #20]
 800dede:	991c      	ldr	r1, [sp, #112]	; 0x70
 800dee0:	4648      	mov	r0, r9
 800dee2:	f002 f97d 	bl	80101e0 <__mdiff>
 800dee6:	4604      	mov	r4, r0
 800dee8:	2800      	cmp	r0, #0
 800deea:	f43f ae5f 	beq.w	800dbac <_strtod_l+0x43c>
 800deee:	68c3      	ldr	r3, [r0, #12]
 800def0:	930c      	str	r3, [sp, #48]	; 0x30
 800def2:	2300      	movs	r3, #0
 800def4:	60c3      	str	r3, [r0, #12]
 800def6:	4641      	mov	r1, r8
 800def8:	f002 f958 	bl	80101ac <__mcmp>
 800defc:	2800      	cmp	r0, #0
 800defe:	da55      	bge.n	800dfac <_strtod_l+0x83c>
 800df00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df02:	b9e3      	cbnz	r3, 800df3e <_strtod_l+0x7ce>
 800df04:	f1ba 0f00 	cmp.w	sl, #0
 800df08:	d119      	bne.n	800df3e <_strtod_l+0x7ce>
 800df0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df0e:	b9b3      	cbnz	r3, 800df3e <_strtod_l+0x7ce>
 800df10:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df14:	0d1b      	lsrs	r3, r3, #20
 800df16:	051b      	lsls	r3, r3, #20
 800df18:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800df1c:	d90f      	bls.n	800df3e <_strtod_l+0x7ce>
 800df1e:	6963      	ldr	r3, [r4, #20]
 800df20:	b913      	cbnz	r3, 800df28 <_strtod_l+0x7b8>
 800df22:	6923      	ldr	r3, [r4, #16]
 800df24:	2b01      	cmp	r3, #1
 800df26:	dd0a      	ble.n	800df3e <_strtod_l+0x7ce>
 800df28:	4621      	mov	r1, r4
 800df2a:	2201      	movs	r2, #1
 800df2c:	4648      	mov	r0, r9
 800df2e:	f002 f8e9 	bl	8010104 <__lshift>
 800df32:	4641      	mov	r1, r8
 800df34:	4604      	mov	r4, r0
 800df36:	f002 f939 	bl	80101ac <__mcmp>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	dc67      	bgt.n	800e00e <_strtod_l+0x89e>
 800df3e:	9b04      	ldr	r3, [sp, #16]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d171      	bne.n	800e028 <_strtod_l+0x8b8>
 800df44:	e63d      	b.n	800dbc2 <_strtod_l+0x452>
 800df46:	f018 0f01 	tst.w	r8, #1
 800df4a:	d004      	beq.n	800df56 <_strtod_l+0x7e6>
 800df4c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df50:	f7f2 fb52 	bl	80005f8 <__aeabi_dmul>
 800df54:	2301      	movs	r3, #1
 800df56:	ea4f 0868 	mov.w	r8, r8, asr #1
 800df5a:	3508      	adds	r5, #8
 800df5c:	e6e5      	b.n	800dd2a <_strtod_l+0x5ba>
 800df5e:	f04f 32ff 	mov.w	r2, #4294967295
 800df62:	fa02 f303 	lsl.w	r3, r2, r3
 800df66:	ea03 0a0a 	and.w	sl, r3, sl
 800df6a:	e6ff      	b.n	800dd6c <_strtod_l+0x5fc>
 800df6c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800df70:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800df74:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800df78:	36e2      	adds	r6, #226	; 0xe2
 800df7a:	fa01 f306 	lsl.w	r3, r1, r6
 800df7e:	930a      	str	r3, [sp, #40]	; 0x28
 800df80:	910f      	str	r1, [sp, #60]	; 0x3c
 800df82:	e75d      	b.n	800de40 <_strtod_l+0x6d0>
 800df84:	2300      	movs	r3, #0
 800df86:	930a      	str	r3, [sp, #40]	; 0x28
 800df88:	2301      	movs	r3, #1
 800df8a:	930f      	str	r3, [sp, #60]	; 0x3c
 800df8c:	e758      	b.n	800de40 <_strtod_l+0x6d0>
 800df8e:	4632      	mov	r2, r6
 800df90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800df92:	4648      	mov	r0, r9
 800df94:	f002 f8b6 	bl	8010104 <__lshift>
 800df98:	901c      	str	r0, [sp, #112]	; 0x70
 800df9a:	2800      	cmp	r0, #0
 800df9c:	f47f af7c 	bne.w	800de98 <_strtod_l+0x728>
 800dfa0:	e604      	b.n	800dbac <_strtod_l+0x43c>
 800dfa2:	bf00      	nop
 800dfa4:	08011490 	.word	0x08011490
 800dfa8:	fffffc02 	.word	0xfffffc02
 800dfac:	465d      	mov	r5, fp
 800dfae:	f040 8086 	bne.w	800e0be <_strtod_l+0x94e>
 800dfb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfb8:	b32a      	cbz	r2, 800e006 <_strtod_l+0x896>
 800dfba:	4aaf      	ldr	r2, [pc, #700]	; (800e278 <_strtod_l+0xb08>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d153      	bne.n	800e068 <_strtod_l+0x8f8>
 800dfc0:	9b04      	ldr	r3, [sp, #16]
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	b1d3      	cbz	r3, 800dffc <_strtod_l+0x88c>
 800dfc6:	4aad      	ldr	r2, [pc, #692]	; (800e27c <_strtod_l+0xb0c>)
 800dfc8:	402a      	ands	r2, r5
 800dfca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800dfce:	f04f 31ff 	mov.w	r1, #4294967295
 800dfd2:	d816      	bhi.n	800e002 <_strtod_l+0x892>
 800dfd4:	0d12      	lsrs	r2, r2, #20
 800dfd6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dfda:	fa01 f303 	lsl.w	r3, r1, r3
 800dfde:	4298      	cmp	r0, r3
 800dfe0:	d142      	bne.n	800e068 <_strtod_l+0x8f8>
 800dfe2:	4ba7      	ldr	r3, [pc, #668]	; (800e280 <_strtod_l+0xb10>)
 800dfe4:	429d      	cmp	r5, r3
 800dfe6:	d102      	bne.n	800dfee <_strtod_l+0x87e>
 800dfe8:	3001      	adds	r0, #1
 800dfea:	f43f addf 	beq.w	800dbac <_strtod_l+0x43c>
 800dfee:	4ba3      	ldr	r3, [pc, #652]	; (800e27c <_strtod_l+0xb0c>)
 800dff0:	402b      	ands	r3, r5
 800dff2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dff6:	f04f 0a00 	mov.w	sl, #0
 800dffa:	e7a0      	b.n	800df3e <_strtod_l+0x7ce>
 800dffc:	f04f 33ff 	mov.w	r3, #4294967295
 800e000:	e7ed      	b.n	800dfde <_strtod_l+0x86e>
 800e002:	460b      	mov	r3, r1
 800e004:	e7eb      	b.n	800dfde <_strtod_l+0x86e>
 800e006:	bb7b      	cbnz	r3, 800e068 <_strtod_l+0x8f8>
 800e008:	f1ba 0f00 	cmp.w	sl, #0
 800e00c:	d12c      	bne.n	800e068 <_strtod_l+0x8f8>
 800e00e:	9904      	ldr	r1, [sp, #16]
 800e010:	4a9a      	ldr	r2, [pc, #616]	; (800e27c <_strtod_l+0xb0c>)
 800e012:	465b      	mov	r3, fp
 800e014:	b1f1      	cbz	r1, 800e054 <_strtod_l+0x8e4>
 800e016:	ea02 010b 	and.w	r1, r2, fp
 800e01a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e01e:	dc19      	bgt.n	800e054 <_strtod_l+0x8e4>
 800e020:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e024:	f77f ae5b 	ble.w	800dcde <_strtod_l+0x56e>
 800e028:	4a96      	ldr	r2, [pc, #600]	; (800e284 <_strtod_l+0xb14>)
 800e02a:	2300      	movs	r3, #0
 800e02c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800e030:	4650      	mov	r0, sl
 800e032:	4659      	mov	r1, fp
 800e034:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e038:	f7f2 fade 	bl	80005f8 <__aeabi_dmul>
 800e03c:	4682      	mov	sl, r0
 800e03e:	468b      	mov	fp, r1
 800e040:	2900      	cmp	r1, #0
 800e042:	f47f adbe 	bne.w	800dbc2 <_strtod_l+0x452>
 800e046:	2800      	cmp	r0, #0
 800e048:	f47f adbb 	bne.w	800dbc2 <_strtod_l+0x452>
 800e04c:	2322      	movs	r3, #34	; 0x22
 800e04e:	f8c9 3000 	str.w	r3, [r9]
 800e052:	e5b6      	b.n	800dbc2 <_strtod_l+0x452>
 800e054:	4013      	ands	r3, r2
 800e056:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e05a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e05e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e062:	f04f 3aff 	mov.w	sl, #4294967295
 800e066:	e76a      	b.n	800df3e <_strtod_l+0x7ce>
 800e068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e06a:	b193      	cbz	r3, 800e092 <_strtod_l+0x922>
 800e06c:	422b      	tst	r3, r5
 800e06e:	f43f af66 	beq.w	800df3e <_strtod_l+0x7ce>
 800e072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	4650      	mov	r0, sl
 800e078:	4659      	mov	r1, fp
 800e07a:	b173      	cbz	r3, 800e09a <_strtod_l+0x92a>
 800e07c:	f7ff fb5a 	bl	800d734 <sulp>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e088:	f7f2 f900 	bl	800028c <__adddf3>
 800e08c:	4682      	mov	sl, r0
 800e08e:	468b      	mov	fp, r1
 800e090:	e755      	b.n	800df3e <_strtod_l+0x7ce>
 800e092:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e094:	ea13 0f0a 	tst.w	r3, sl
 800e098:	e7e9      	b.n	800e06e <_strtod_l+0x8fe>
 800e09a:	f7ff fb4b 	bl	800d734 <sulp>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e0a6:	f7f2 f8ef 	bl	8000288 <__aeabi_dsub>
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4682      	mov	sl, r0
 800e0b0:	468b      	mov	fp, r1
 800e0b2:	f7f2 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0b6:	2800      	cmp	r0, #0
 800e0b8:	f47f ae11 	bne.w	800dcde <_strtod_l+0x56e>
 800e0bc:	e73f      	b.n	800df3e <_strtod_l+0x7ce>
 800e0be:	4641      	mov	r1, r8
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	f002 f9b0 	bl	8010426 <__ratio>
 800e0c6:	ec57 6b10 	vmov	r6, r7, d0
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e0d0:	ee10 0a10 	vmov	r0, s0
 800e0d4:	4639      	mov	r1, r7
 800e0d6:	f7f2 fd0b 	bl	8000af0 <__aeabi_dcmple>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d077      	beq.n	800e1ce <_strtod_l+0xa5e>
 800e0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d04a      	beq.n	800e17a <_strtod_l+0xa0a>
 800e0e4:	4b68      	ldr	r3, [pc, #416]	; (800e288 <_strtod_l+0xb18>)
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e0ec:	4f66      	ldr	r7, [pc, #408]	; (800e288 <_strtod_l+0xb18>)
 800e0ee:	2600      	movs	r6, #0
 800e0f0:	4b62      	ldr	r3, [pc, #392]	; (800e27c <_strtod_l+0xb0c>)
 800e0f2:	402b      	ands	r3, r5
 800e0f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0f8:	4b64      	ldr	r3, [pc, #400]	; (800e28c <_strtod_l+0xb1c>)
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	f040 80ce 	bne.w	800e29c <_strtod_l+0xb2c>
 800e100:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e104:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e108:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800e10c:	ec4b ab10 	vmov	d0, sl, fp
 800e110:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800e114:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e118:	f002 f8c0 	bl	801029c <__ulp>
 800e11c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e120:	ec53 2b10 	vmov	r2, r3, d0
 800e124:	f7f2 fa68 	bl	80005f8 <__aeabi_dmul>
 800e128:	4652      	mov	r2, sl
 800e12a:	465b      	mov	r3, fp
 800e12c:	f7f2 f8ae 	bl	800028c <__adddf3>
 800e130:	460b      	mov	r3, r1
 800e132:	4952      	ldr	r1, [pc, #328]	; (800e27c <_strtod_l+0xb0c>)
 800e134:	4a56      	ldr	r2, [pc, #344]	; (800e290 <_strtod_l+0xb20>)
 800e136:	4019      	ands	r1, r3
 800e138:	4291      	cmp	r1, r2
 800e13a:	4682      	mov	sl, r0
 800e13c:	d95b      	bls.n	800e1f6 <_strtod_l+0xa86>
 800e13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e140:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e144:	4293      	cmp	r3, r2
 800e146:	d103      	bne.n	800e150 <_strtod_l+0x9e0>
 800e148:	9b08      	ldr	r3, [sp, #32]
 800e14a:	3301      	adds	r3, #1
 800e14c:	f43f ad2e 	beq.w	800dbac <_strtod_l+0x43c>
 800e150:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800e280 <_strtod_l+0xb10>
 800e154:	f04f 3aff 	mov.w	sl, #4294967295
 800e158:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e15a:	4648      	mov	r0, r9
 800e15c:	f001 fe06 	bl	800fd6c <_Bfree>
 800e160:	9905      	ldr	r1, [sp, #20]
 800e162:	4648      	mov	r0, r9
 800e164:	f001 fe02 	bl	800fd6c <_Bfree>
 800e168:	4641      	mov	r1, r8
 800e16a:	4648      	mov	r0, r9
 800e16c:	f001 fdfe 	bl	800fd6c <_Bfree>
 800e170:	4621      	mov	r1, r4
 800e172:	4648      	mov	r0, r9
 800e174:	f001 fdfa 	bl	800fd6c <_Bfree>
 800e178:	e619      	b.n	800ddae <_strtod_l+0x63e>
 800e17a:	f1ba 0f00 	cmp.w	sl, #0
 800e17e:	d11a      	bne.n	800e1b6 <_strtod_l+0xa46>
 800e180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e184:	b9eb      	cbnz	r3, 800e1c2 <_strtod_l+0xa52>
 800e186:	2200      	movs	r2, #0
 800e188:	4b3f      	ldr	r3, [pc, #252]	; (800e288 <_strtod_l+0xb18>)
 800e18a:	4630      	mov	r0, r6
 800e18c:	4639      	mov	r1, r7
 800e18e:	f7f2 fca5 	bl	8000adc <__aeabi_dcmplt>
 800e192:	b9c8      	cbnz	r0, 800e1c8 <_strtod_l+0xa58>
 800e194:	4630      	mov	r0, r6
 800e196:	4639      	mov	r1, r7
 800e198:	2200      	movs	r2, #0
 800e19a:	4b3e      	ldr	r3, [pc, #248]	; (800e294 <_strtod_l+0xb24>)
 800e19c:	f7f2 fa2c 	bl	80005f8 <__aeabi_dmul>
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	460f      	mov	r7, r1
 800e1a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e1a8:	9618      	str	r6, [sp, #96]	; 0x60
 800e1aa:	9319      	str	r3, [sp, #100]	; 0x64
 800e1ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800e1b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e1b4:	e79c      	b.n	800e0f0 <_strtod_l+0x980>
 800e1b6:	f1ba 0f01 	cmp.w	sl, #1
 800e1ba:	d102      	bne.n	800e1c2 <_strtod_l+0xa52>
 800e1bc:	2d00      	cmp	r5, #0
 800e1be:	f43f ad8e 	beq.w	800dcde <_strtod_l+0x56e>
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	4b34      	ldr	r3, [pc, #208]	; (800e298 <_strtod_l+0xb28>)
 800e1c6:	e78f      	b.n	800e0e8 <_strtod_l+0x978>
 800e1c8:	2600      	movs	r6, #0
 800e1ca:	4f32      	ldr	r7, [pc, #200]	; (800e294 <_strtod_l+0xb24>)
 800e1cc:	e7ea      	b.n	800e1a4 <_strtod_l+0xa34>
 800e1ce:	4b31      	ldr	r3, [pc, #196]	; (800e294 <_strtod_l+0xb24>)
 800e1d0:	4630      	mov	r0, r6
 800e1d2:	4639      	mov	r1, r7
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f7f2 fa0f 	bl	80005f8 <__aeabi_dmul>
 800e1da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1dc:	4606      	mov	r6, r0
 800e1de:	460f      	mov	r7, r1
 800e1e0:	b933      	cbnz	r3, 800e1f0 <_strtod_l+0xa80>
 800e1e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e1e6:	9010      	str	r0, [sp, #64]	; 0x40
 800e1e8:	9311      	str	r3, [sp, #68]	; 0x44
 800e1ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e1ee:	e7df      	b.n	800e1b0 <_strtod_l+0xa40>
 800e1f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e1f4:	e7f9      	b.n	800e1ea <_strtod_l+0xa7a>
 800e1f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e1fa:	9b04      	ldr	r3, [sp, #16]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1ab      	bne.n	800e158 <_strtod_l+0x9e8>
 800e200:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e204:	0d1b      	lsrs	r3, r3, #20
 800e206:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e208:	051b      	lsls	r3, r3, #20
 800e20a:	429a      	cmp	r2, r3
 800e20c:	465d      	mov	r5, fp
 800e20e:	d1a3      	bne.n	800e158 <_strtod_l+0x9e8>
 800e210:	4639      	mov	r1, r7
 800e212:	4630      	mov	r0, r6
 800e214:	f7f2 fca0 	bl	8000b58 <__aeabi_d2iz>
 800e218:	f7f2 f984 	bl	8000524 <__aeabi_i2d>
 800e21c:	460b      	mov	r3, r1
 800e21e:	4602      	mov	r2, r0
 800e220:	4639      	mov	r1, r7
 800e222:	4630      	mov	r0, r6
 800e224:	f7f2 f830 	bl	8000288 <__aeabi_dsub>
 800e228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e22a:	4606      	mov	r6, r0
 800e22c:	460f      	mov	r7, r1
 800e22e:	b933      	cbnz	r3, 800e23e <_strtod_l+0xace>
 800e230:	f1ba 0f00 	cmp.w	sl, #0
 800e234:	d103      	bne.n	800e23e <_strtod_l+0xace>
 800e236:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800e23a:	2d00      	cmp	r5, #0
 800e23c:	d06d      	beq.n	800e31a <_strtod_l+0xbaa>
 800e23e:	a30a      	add	r3, pc, #40	; (adr r3, 800e268 <_strtod_l+0xaf8>)
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	4630      	mov	r0, r6
 800e246:	4639      	mov	r1, r7
 800e248:	f7f2 fc48 	bl	8000adc <__aeabi_dcmplt>
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f47f acb8 	bne.w	800dbc2 <_strtod_l+0x452>
 800e252:	a307      	add	r3, pc, #28	; (adr r3, 800e270 <_strtod_l+0xb00>)
 800e254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e258:	4630      	mov	r0, r6
 800e25a:	4639      	mov	r1, r7
 800e25c:	f7f2 fc5c 	bl	8000b18 <__aeabi_dcmpgt>
 800e260:	2800      	cmp	r0, #0
 800e262:	f43f af79 	beq.w	800e158 <_strtod_l+0x9e8>
 800e266:	e4ac      	b.n	800dbc2 <_strtod_l+0x452>
 800e268:	94a03595 	.word	0x94a03595
 800e26c:	3fdfffff 	.word	0x3fdfffff
 800e270:	35afe535 	.word	0x35afe535
 800e274:	3fe00000 	.word	0x3fe00000
 800e278:	000fffff 	.word	0x000fffff
 800e27c:	7ff00000 	.word	0x7ff00000
 800e280:	7fefffff 	.word	0x7fefffff
 800e284:	39500000 	.word	0x39500000
 800e288:	3ff00000 	.word	0x3ff00000
 800e28c:	7fe00000 	.word	0x7fe00000
 800e290:	7c9fffff 	.word	0x7c9fffff
 800e294:	3fe00000 	.word	0x3fe00000
 800e298:	bff00000 	.word	0xbff00000
 800e29c:	9b04      	ldr	r3, [sp, #16]
 800e29e:	b333      	cbz	r3, 800e2ee <_strtod_l+0xb7e>
 800e2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e2a6:	d822      	bhi.n	800e2ee <_strtod_l+0xb7e>
 800e2a8:	a327      	add	r3, pc, #156	; (adr r3, 800e348 <_strtod_l+0xbd8>)
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	4630      	mov	r0, r6
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	f7f2 fc1d 	bl	8000af0 <__aeabi_dcmple>
 800e2b6:	b1a0      	cbz	r0, 800e2e2 <_strtod_l+0xb72>
 800e2b8:	4639      	mov	r1, r7
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	f7f2 fc74 	bl	8000ba8 <__aeabi_d2uiz>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	bf08      	it	eq
 800e2c4:	2001      	moveq	r0, #1
 800e2c6:	f7f2 f91d 	bl	8000504 <__aeabi_ui2d>
 800e2ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2cc:	4606      	mov	r6, r0
 800e2ce:	460f      	mov	r7, r1
 800e2d0:	bb03      	cbnz	r3, 800e314 <_strtod_l+0xba4>
 800e2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2d6:	9012      	str	r0, [sp, #72]	; 0x48
 800e2d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800e2da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e2de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e2e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e2ea:	1a9b      	subs	r3, r3, r2
 800e2ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800e2ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 800e2f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800e2f6:	f001 ffd1 	bl	801029c <__ulp>
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	ec53 2b10 	vmov	r2, r3, d0
 800e300:	4659      	mov	r1, fp
 800e302:	f7f2 f979 	bl	80005f8 <__aeabi_dmul>
 800e306:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e30a:	f7f1 ffbf 	bl	800028c <__adddf3>
 800e30e:	4682      	mov	sl, r0
 800e310:	468b      	mov	fp, r1
 800e312:	e772      	b.n	800e1fa <_strtod_l+0xa8a>
 800e314:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800e318:	e7df      	b.n	800e2da <_strtod_l+0xb6a>
 800e31a:	a30d      	add	r3, pc, #52	; (adr r3, 800e350 <_strtod_l+0xbe0>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f7f2 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800e324:	e79c      	b.n	800e260 <_strtod_l+0xaf0>
 800e326:	2300      	movs	r3, #0
 800e328:	930d      	str	r3, [sp, #52]	; 0x34
 800e32a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e32c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e32e:	6013      	str	r3, [r2, #0]
 800e330:	f7ff ba61 	b.w	800d7f6 <_strtod_l+0x86>
 800e334:	2b65      	cmp	r3, #101	; 0x65
 800e336:	f04f 0200 	mov.w	r2, #0
 800e33a:	f43f ab4e 	beq.w	800d9da <_strtod_l+0x26a>
 800e33e:	2101      	movs	r1, #1
 800e340:	4614      	mov	r4, r2
 800e342:	9104      	str	r1, [sp, #16]
 800e344:	f7ff bacb 	b.w	800d8de <_strtod_l+0x16e>
 800e348:	ffc00000 	.word	0xffc00000
 800e34c:	41dfffff 	.word	0x41dfffff
 800e350:	94a03595 	.word	0x94a03595
 800e354:	3fcfffff 	.word	0x3fcfffff

0800e358 <_strtod_r>:
 800e358:	4b05      	ldr	r3, [pc, #20]	; (800e370 <_strtod_r+0x18>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	b410      	push	{r4}
 800e35e:	6a1b      	ldr	r3, [r3, #32]
 800e360:	4c04      	ldr	r4, [pc, #16]	; (800e374 <_strtod_r+0x1c>)
 800e362:	2b00      	cmp	r3, #0
 800e364:	bf08      	it	eq
 800e366:	4623      	moveq	r3, r4
 800e368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e36c:	f7ff ba00 	b.w	800d770 <_strtod_l>
 800e370:	20000040 	.word	0x20000040
 800e374:	200000a4 	.word	0x200000a4

0800e378 <_strtol_l.isra.0>:
 800e378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e37c:	4680      	mov	r8, r0
 800e37e:	4689      	mov	r9, r1
 800e380:	4692      	mov	sl, r2
 800e382:	461e      	mov	r6, r3
 800e384:	460f      	mov	r7, r1
 800e386:	463d      	mov	r5, r7
 800e388:	9808      	ldr	r0, [sp, #32]
 800e38a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e38e:	f001 fc27 	bl	800fbe0 <__locale_ctype_ptr_l>
 800e392:	4420      	add	r0, r4
 800e394:	7843      	ldrb	r3, [r0, #1]
 800e396:	f013 0308 	ands.w	r3, r3, #8
 800e39a:	d132      	bne.n	800e402 <_strtol_l.isra.0+0x8a>
 800e39c:	2c2d      	cmp	r4, #45	; 0x2d
 800e39e:	d132      	bne.n	800e406 <_strtol_l.isra.0+0x8e>
 800e3a0:	787c      	ldrb	r4, [r7, #1]
 800e3a2:	1cbd      	adds	r5, r7, #2
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	2e00      	cmp	r6, #0
 800e3a8:	d05d      	beq.n	800e466 <_strtol_l.isra.0+0xee>
 800e3aa:	2e10      	cmp	r6, #16
 800e3ac:	d109      	bne.n	800e3c2 <_strtol_l.isra.0+0x4a>
 800e3ae:	2c30      	cmp	r4, #48	; 0x30
 800e3b0:	d107      	bne.n	800e3c2 <_strtol_l.isra.0+0x4a>
 800e3b2:	782b      	ldrb	r3, [r5, #0]
 800e3b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e3b8:	2b58      	cmp	r3, #88	; 0x58
 800e3ba:	d14f      	bne.n	800e45c <_strtol_l.isra.0+0xe4>
 800e3bc:	786c      	ldrb	r4, [r5, #1]
 800e3be:	2610      	movs	r6, #16
 800e3c0:	3502      	adds	r5, #2
 800e3c2:	2a00      	cmp	r2, #0
 800e3c4:	bf14      	ite	ne
 800e3c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e3ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e3ce:	2700      	movs	r7, #0
 800e3d0:	fbb1 fcf6 	udiv	ip, r1, r6
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e3da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e3de:	2b09      	cmp	r3, #9
 800e3e0:	d817      	bhi.n	800e412 <_strtol_l.isra.0+0x9a>
 800e3e2:	461c      	mov	r4, r3
 800e3e4:	42a6      	cmp	r6, r4
 800e3e6:	dd23      	ble.n	800e430 <_strtol_l.isra.0+0xb8>
 800e3e8:	1c7b      	adds	r3, r7, #1
 800e3ea:	d007      	beq.n	800e3fc <_strtol_l.isra.0+0x84>
 800e3ec:	4584      	cmp	ip, r0
 800e3ee:	d31c      	bcc.n	800e42a <_strtol_l.isra.0+0xb2>
 800e3f0:	d101      	bne.n	800e3f6 <_strtol_l.isra.0+0x7e>
 800e3f2:	45a6      	cmp	lr, r4
 800e3f4:	db19      	blt.n	800e42a <_strtol_l.isra.0+0xb2>
 800e3f6:	fb00 4006 	mla	r0, r0, r6, r4
 800e3fa:	2701      	movs	r7, #1
 800e3fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e400:	e7eb      	b.n	800e3da <_strtol_l.isra.0+0x62>
 800e402:	462f      	mov	r7, r5
 800e404:	e7bf      	b.n	800e386 <_strtol_l.isra.0+0xe>
 800e406:	2c2b      	cmp	r4, #43	; 0x2b
 800e408:	bf04      	itt	eq
 800e40a:	1cbd      	addeq	r5, r7, #2
 800e40c:	787c      	ldrbeq	r4, [r7, #1]
 800e40e:	461a      	mov	r2, r3
 800e410:	e7c9      	b.n	800e3a6 <_strtol_l.isra.0+0x2e>
 800e412:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e416:	2b19      	cmp	r3, #25
 800e418:	d801      	bhi.n	800e41e <_strtol_l.isra.0+0xa6>
 800e41a:	3c37      	subs	r4, #55	; 0x37
 800e41c:	e7e2      	b.n	800e3e4 <_strtol_l.isra.0+0x6c>
 800e41e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e422:	2b19      	cmp	r3, #25
 800e424:	d804      	bhi.n	800e430 <_strtol_l.isra.0+0xb8>
 800e426:	3c57      	subs	r4, #87	; 0x57
 800e428:	e7dc      	b.n	800e3e4 <_strtol_l.isra.0+0x6c>
 800e42a:	f04f 37ff 	mov.w	r7, #4294967295
 800e42e:	e7e5      	b.n	800e3fc <_strtol_l.isra.0+0x84>
 800e430:	1c7b      	adds	r3, r7, #1
 800e432:	d108      	bne.n	800e446 <_strtol_l.isra.0+0xce>
 800e434:	2322      	movs	r3, #34	; 0x22
 800e436:	f8c8 3000 	str.w	r3, [r8]
 800e43a:	4608      	mov	r0, r1
 800e43c:	f1ba 0f00 	cmp.w	sl, #0
 800e440:	d107      	bne.n	800e452 <_strtol_l.isra.0+0xda>
 800e442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e446:	b102      	cbz	r2, 800e44a <_strtol_l.isra.0+0xd2>
 800e448:	4240      	negs	r0, r0
 800e44a:	f1ba 0f00 	cmp.w	sl, #0
 800e44e:	d0f8      	beq.n	800e442 <_strtol_l.isra.0+0xca>
 800e450:	b10f      	cbz	r7, 800e456 <_strtol_l.isra.0+0xde>
 800e452:	f105 39ff 	add.w	r9, r5, #4294967295
 800e456:	f8ca 9000 	str.w	r9, [sl]
 800e45a:	e7f2      	b.n	800e442 <_strtol_l.isra.0+0xca>
 800e45c:	2430      	movs	r4, #48	; 0x30
 800e45e:	2e00      	cmp	r6, #0
 800e460:	d1af      	bne.n	800e3c2 <_strtol_l.isra.0+0x4a>
 800e462:	2608      	movs	r6, #8
 800e464:	e7ad      	b.n	800e3c2 <_strtol_l.isra.0+0x4a>
 800e466:	2c30      	cmp	r4, #48	; 0x30
 800e468:	d0a3      	beq.n	800e3b2 <_strtol_l.isra.0+0x3a>
 800e46a:	260a      	movs	r6, #10
 800e46c:	e7a9      	b.n	800e3c2 <_strtol_l.isra.0+0x4a>
	...

0800e470 <_strtol_r>:
 800e470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e472:	4c06      	ldr	r4, [pc, #24]	; (800e48c <_strtol_r+0x1c>)
 800e474:	4d06      	ldr	r5, [pc, #24]	; (800e490 <_strtol_r+0x20>)
 800e476:	6824      	ldr	r4, [r4, #0]
 800e478:	6a24      	ldr	r4, [r4, #32]
 800e47a:	2c00      	cmp	r4, #0
 800e47c:	bf08      	it	eq
 800e47e:	462c      	moveq	r4, r5
 800e480:	9400      	str	r4, [sp, #0]
 800e482:	f7ff ff79 	bl	800e378 <_strtol_l.isra.0>
 800e486:	b003      	add	sp, #12
 800e488:	bd30      	pop	{r4, r5, pc}
 800e48a:	bf00      	nop
 800e48c:	20000040 	.word	0x20000040
 800e490:	200000a4 	.word	0x200000a4

0800e494 <__swbuf_r>:
 800e494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e496:	460e      	mov	r6, r1
 800e498:	4614      	mov	r4, r2
 800e49a:	4605      	mov	r5, r0
 800e49c:	b118      	cbz	r0, 800e4a6 <__swbuf_r+0x12>
 800e49e:	6983      	ldr	r3, [r0, #24]
 800e4a0:	b90b      	cbnz	r3, 800e4a6 <__swbuf_r+0x12>
 800e4a2:	f000 ffed 	bl	800f480 <__sinit>
 800e4a6:	4b21      	ldr	r3, [pc, #132]	; (800e52c <__swbuf_r+0x98>)
 800e4a8:	429c      	cmp	r4, r3
 800e4aa:	d12a      	bne.n	800e502 <__swbuf_r+0x6e>
 800e4ac:	686c      	ldr	r4, [r5, #4]
 800e4ae:	69a3      	ldr	r3, [r4, #24]
 800e4b0:	60a3      	str	r3, [r4, #8]
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	071a      	lsls	r2, r3, #28
 800e4b6:	d52e      	bpl.n	800e516 <__swbuf_r+0x82>
 800e4b8:	6923      	ldr	r3, [r4, #16]
 800e4ba:	b363      	cbz	r3, 800e516 <__swbuf_r+0x82>
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	6820      	ldr	r0, [r4, #0]
 800e4c0:	1ac0      	subs	r0, r0, r3
 800e4c2:	6963      	ldr	r3, [r4, #20]
 800e4c4:	b2f6      	uxtb	r6, r6
 800e4c6:	4283      	cmp	r3, r0
 800e4c8:	4637      	mov	r7, r6
 800e4ca:	dc04      	bgt.n	800e4d6 <__swbuf_r+0x42>
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	f000 ff6c 	bl	800f3ac <_fflush_r>
 800e4d4:	bb28      	cbnz	r0, 800e522 <__swbuf_r+0x8e>
 800e4d6:	68a3      	ldr	r3, [r4, #8]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	60a3      	str	r3, [r4, #8]
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	1c5a      	adds	r2, r3, #1
 800e4e0:	6022      	str	r2, [r4, #0]
 800e4e2:	701e      	strb	r6, [r3, #0]
 800e4e4:	6963      	ldr	r3, [r4, #20]
 800e4e6:	3001      	adds	r0, #1
 800e4e8:	4283      	cmp	r3, r0
 800e4ea:	d004      	beq.n	800e4f6 <__swbuf_r+0x62>
 800e4ec:	89a3      	ldrh	r3, [r4, #12]
 800e4ee:	07db      	lsls	r3, r3, #31
 800e4f0:	d519      	bpl.n	800e526 <__swbuf_r+0x92>
 800e4f2:	2e0a      	cmp	r6, #10
 800e4f4:	d117      	bne.n	800e526 <__swbuf_r+0x92>
 800e4f6:	4621      	mov	r1, r4
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f000 ff57 	bl	800f3ac <_fflush_r>
 800e4fe:	b190      	cbz	r0, 800e526 <__swbuf_r+0x92>
 800e500:	e00f      	b.n	800e522 <__swbuf_r+0x8e>
 800e502:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <__swbuf_r+0x9c>)
 800e504:	429c      	cmp	r4, r3
 800e506:	d101      	bne.n	800e50c <__swbuf_r+0x78>
 800e508:	68ac      	ldr	r4, [r5, #8]
 800e50a:	e7d0      	b.n	800e4ae <__swbuf_r+0x1a>
 800e50c:	4b09      	ldr	r3, [pc, #36]	; (800e534 <__swbuf_r+0xa0>)
 800e50e:	429c      	cmp	r4, r3
 800e510:	bf08      	it	eq
 800e512:	68ec      	ldreq	r4, [r5, #12]
 800e514:	e7cb      	b.n	800e4ae <__swbuf_r+0x1a>
 800e516:	4621      	mov	r1, r4
 800e518:	4628      	mov	r0, r5
 800e51a:	f000 f80d 	bl	800e538 <__swsetup_r>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d0cc      	beq.n	800e4bc <__swbuf_r+0x28>
 800e522:	f04f 37ff 	mov.w	r7, #4294967295
 800e526:	4638      	mov	r0, r7
 800e528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e52a:	bf00      	nop
 800e52c:	080114e8 	.word	0x080114e8
 800e530:	08011508 	.word	0x08011508
 800e534:	080114c8 	.word	0x080114c8

0800e538 <__swsetup_r>:
 800e538:	4b32      	ldr	r3, [pc, #200]	; (800e604 <__swsetup_r+0xcc>)
 800e53a:	b570      	push	{r4, r5, r6, lr}
 800e53c:	681d      	ldr	r5, [r3, #0]
 800e53e:	4606      	mov	r6, r0
 800e540:	460c      	mov	r4, r1
 800e542:	b125      	cbz	r5, 800e54e <__swsetup_r+0x16>
 800e544:	69ab      	ldr	r3, [r5, #24]
 800e546:	b913      	cbnz	r3, 800e54e <__swsetup_r+0x16>
 800e548:	4628      	mov	r0, r5
 800e54a:	f000 ff99 	bl	800f480 <__sinit>
 800e54e:	4b2e      	ldr	r3, [pc, #184]	; (800e608 <__swsetup_r+0xd0>)
 800e550:	429c      	cmp	r4, r3
 800e552:	d10f      	bne.n	800e574 <__swsetup_r+0x3c>
 800e554:	686c      	ldr	r4, [r5, #4]
 800e556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e55a:	b29a      	uxth	r2, r3
 800e55c:	0715      	lsls	r5, r2, #28
 800e55e:	d42c      	bmi.n	800e5ba <__swsetup_r+0x82>
 800e560:	06d0      	lsls	r0, r2, #27
 800e562:	d411      	bmi.n	800e588 <__swsetup_r+0x50>
 800e564:	2209      	movs	r2, #9
 800e566:	6032      	str	r2, [r6, #0]
 800e568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e56c:	81a3      	strh	r3, [r4, #12]
 800e56e:	f04f 30ff 	mov.w	r0, #4294967295
 800e572:	e03e      	b.n	800e5f2 <__swsetup_r+0xba>
 800e574:	4b25      	ldr	r3, [pc, #148]	; (800e60c <__swsetup_r+0xd4>)
 800e576:	429c      	cmp	r4, r3
 800e578:	d101      	bne.n	800e57e <__swsetup_r+0x46>
 800e57a:	68ac      	ldr	r4, [r5, #8]
 800e57c:	e7eb      	b.n	800e556 <__swsetup_r+0x1e>
 800e57e:	4b24      	ldr	r3, [pc, #144]	; (800e610 <__swsetup_r+0xd8>)
 800e580:	429c      	cmp	r4, r3
 800e582:	bf08      	it	eq
 800e584:	68ec      	ldreq	r4, [r5, #12]
 800e586:	e7e6      	b.n	800e556 <__swsetup_r+0x1e>
 800e588:	0751      	lsls	r1, r2, #29
 800e58a:	d512      	bpl.n	800e5b2 <__swsetup_r+0x7a>
 800e58c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e58e:	b141      	cbz	r1, 800e5a2 <__swsetup_r+0x6a>
 800e590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e594:	4299      	cmp	r1, r3
 800e596:	d002      	beq.n	800e59e <__swsetup_r+0x66>
 800e598:	4630      	mov	r0, r6
 800e59a:	f001 ffc1 	bl	8010520 <_free_r>
 800e59e:	2300      	movs	r3, #0
 800e5a0:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a2:	89a3      	ldrh	r3, [r4, #12]
 800e5a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e5a8:	81a3      	strh	r3, [r4, #12]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6063      	str	r3, [r4, #4]
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	f043 0308 	orr.w	r3, r3, #8
 800e5b8:	81a3      	strh	r3, [r4, #12]
 800e5ba:	6923      	ldr	r3, [r4, #16]
 800e5bc:	b94b      	cbnz	r3, 800e5d2 <__swsetup_r+0x9a>
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5c8:	d003      	beq.n	800e5d2 <__swsetup_r+0x9a>
 800e5ca:	4621      	mov	r1, r4
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f001 fb3f 	bl	800fc50 <__smakebuf_r>
 800e5d2:	89a2      	ldrh	r2, [r4, #12]
 800e5d4:	f012 0301 	ands.w	r3, r2, #1
 800e5d8:	d00c      	beq.n	800e5f4 <__swsetup_r+0xbc>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	60a3      	str	r3, [r4, #8]
 800e5de:	6963      	ldr	r3, [r4, #20]
 800e5e0:	425b      	negs	r3, r3
 800e5e2:	61a3      	str	r3, [r4, #24]
 800e5e4:	6923      	ldr	r3, [r4, #16]
 800e5e6:	b953      	cbnz	r3, 800e5fe <__swsetup_r+0xc6>
 800e5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e5f0:	d1ba      	bne.n	800e568 <__swsetup_r+0x30>
 800e5f2:	bd70      	pop	{r4, r5, r6, pc}
 800e5f4:	0792      	lsls	r2, r2, #30
 800e5f6:	bf58      	it	pl
 800e5f8:	6963      	ldrpl	r3, [r4, #20]
 800e5fa:	60a3      	str	r3, [r4, #8]
 800e5fc:	e7f2      	b.n	800e5e4 <__swsetup_r+0xac>
 800e5fe:	2000      	movs	r0, #0
 800e600:	e7f7      	b.n	800e5f2 <__swsetup_r+0xba>
 800e602:	bf00      	nop
 800e604:	20000040 	.word	0x20000040
 800e608:	080114e8 	.word	0x080114e8
 800e60c:	08011508 	.word	0x08011508
 800e610:	080114c8 	.word	0x080114c8

0800e614 <quorem>:
 800e614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e618:	6903      	ldr	r3, [r0, #16]
 800e61a:	690c      	ldr	r4, [r1, #16]
 800e61c:	42a3      	cmp	r3, r4
 800e61e:	4680      	mov	r8, r0
 800e620:	f2c0 8082 	blt.w	800e728 <quorem+0x114>
 800e624:	3c01      	subs	r4, #1
 800e626:	f101 0714 	add.w	r7, r1, #20
 800e62a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e62e:	f100 0614 	add.w	r6, r0, #20
 800e632:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e636:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e63a:	eb06 030c 	add.w	r3, r6, ip
 800e63e:	3501      	adds	r5, #1
 800e640:	eb07 090c 	add.w	r9, r7, ip
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	fbb0 f5f5 	udiv	r5, r0, r5
 800e64a:	b395      	cbz	r5, 800e6b2 <quorem+0x9e>
 800e64c:	f04f 0a00 	mov.w	sl, #0
 800e650:	4638      	mov	r0, r7
 800e652:	46b6      	mov	lr, r6
 800e654:	46d3      	mov	fp, sl
 800e656:	f850 2b04 	ldr.w	r2, [r0], #4
 800e65a:	b293      	uxth	r3, r2
 800e65c:	fb05 a303 	mla	r3, r5, r3, sl
 800e660:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e664:	b29b      	uxth	r3, r3
 800e666:	ebab 0303 	sub.w	r3, fp, r3
 800e66a:	0c12      	lsrs	r2, r2, #16
 800e66c:	f8de b000 	ldr.w	fp, [lr]
 800e670:	fb05 a202 	mla	r2, r5, r2, sl
 800e674:	fa13 f38b 	uxtah	r3, r3, fp
 800e678:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e67c:	fa1f fb82 	uxth.w	fp, r2
 800e680:	f8de 2000 	ldr.w	r2, [lr]
 800e684:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e688:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e692:	4581      	cmp	r9, r0
 800e694:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e698:	f84e 3b04 	str.w	r3, [lr], #4
 800e69c:	d2db      	bcs.n	800e656 <quorem+0x42>
 800e69e:	f856 300c 	ldr.w	r3, [r6, ip]
 800e6a2:	b933      	cbnz	r3, 800e6b2 <quorem+0x9e>
 800e6a4:	9b01      	ldr	r3, [sp, #4]
 800e6a6:	3b04      	subs	r3, #4
 800e6a8:	429e      	cmp	r6, r3
 800e6aa:	461a      	mov	r2, r3
 800e6ac:	d330      	bcc.n	800e710 <quorem+0xfc>
 800e6ae:	f8c8 4010 	str.w	r4, [r8, #16]
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	f001 fd7a 	bl	80101ac <__mcmp>
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	db25      	blt.n	800e708 <quorem+0xf4>
 800e6bc:	3501      	adds	r5, #1
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f04f 0c00 	mov.w	ip, #0
 800e6c4:	f857 2b04 	ldr.w	r2, [r7], #4
 800e6c8:	f8d0 e000 	ldr.w	lr, [r0]
 800e6cc:	b293      	uxth	r3, r2
 800e6ce:	ebac 0303 	sub.w	r3, ip, r3
 800e6d2:	0c12      	lsrs	r2, r2, #16
 800e6d4:	fa13 f38e 	uxtah	r3, r3, lr
 800e6d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6e6:	45b9      	cmp	r9, r7
 800e6e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6ec:	f840 3b04 	str.w	r3, [r0], #4
 800e6f0:	d2e8      	bcs.n	800e6c4 <quorem+0xb0>
 800e6f2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e6f6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e6fa:	b92a      	cbnz	r2, 800e708 <quorem+0xf4>
 800e6fc:	3b04      	subs	r3, #4
 800e6fe:	429e      	cmp	r6, r3
 800e700:	461a      	mov	r2, r3
 800e702:	d30b      	bcc.n	800e71c <quorem+0x108>
 800e704:	f8c8 4010 	str.w	r4, [r8, #16]
 800e708:	4628      	mov	r0, r5
 800e70a:	b003      	add	sp, #12
 800e70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e710:	6812      	ldr	r2, [r2, #0]
 800e712:	3b04      	subs	r3, #4
 800e714:	2a00      	cmp	r2, #0
 800e716:	d1ca      	bne.n	800e6ae <quorem+0x9a>
 800e718:	3c01      	subs	r4, #1
 800e71a:	e7c5      	b.n	800e6a8 <quorem+0x94>
 800e71c:	6812      	ldr	r2, [r2, #0]
 800e71e:	3b04      	subs	r3, #4
 800e720:	2a00      	cmp	r2, #0
 800e722:	d1ef      	bne.n	800e704 <quorem+0xf0>
 800e724:	3c01      	subs	r4, #1
 800e726:	e7ea      	b.n	800e6fe <quorem+0xea>
 800e728:	2000      	movs	r0, #0
 800e72a:	e7ee      	b.n	800e70a <quorem+0xf6>
 800e72c:	0000      	movs	r0, r0
	...

0800e730 <_dtoa_r>:
 800e730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	ec57 6b10 	vmov	r6, r7, d0
 800e738:	b097      	sub	sp, #92	; 0x5c
 800e73a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e73c:	9106      	str	r1, [sp, #24]
 800e73e:	4604      	mov	r4, r0
 800e740:	920b      	str	r2, [sp, #44]	; 0x2c
 800e742:	9312      	str	r3, [sp, #72]	; 0x48
 800e744:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e748:	e9cd 6700 	strd	r6, r7, [sp]
 800e74c:	b93d      	cbnz	r5, 800e75e <_dtoa_r+0x2e>
 800e74e:	2010      	movs	r0, #16
 800e750:	f001 fabe 	bl	800fcd0 <malloc>
 800e754:	6260      	str	r0, [r4, #36]	; 0x24
 800e756:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e75a:	6005      	str	r5, [r0, #0]
 800e75c:	60c5      	str	r5, [r0, #12]
 800e75e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e760:	6819      	ldr	r1, [r3, #0]
 800e762:	b151      	cbz	r1, 800e77a <_dtoa_r+0x4a>
 800e764:	685a      	ldr	r2, [r3, #4]
 800e766:	604a      	str	r2, [r1, #4]
 800e768:	2301      	movs	r3, #1
 800e76a:	4093      	lsls	r3, r2
 800e76c:	608b      	str	r3, [r1, #8]
 800e76e:	4620      	mov	r0, r4
 800e770:	f001 fafc 	bl	800fd6c <_Bfree>
 800e774:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e776:	2200      	movs	r2, #0
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	1e3b      	subs	r3, r7, #0
 800e77c:	bfbb      	ittet	lt
 800e77e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e782:	9301      	strlt	r3, [sp, #4]
 800e784:	2300      	movge	r3, #0
 800e786:	2201      	movlt	r2, #1
 800e788:	bfac      	ite	ge
 800e78a:	f8c8 3000 	strge.w	r3, [r8]
 800e78e:	f8c8 2000 	strlt.w	r2, [r8]
 800e792:	4baf      	ldr	r3, [pc, #700]	; (800ea50 <_dtoa_r+0x320>)
 800e794:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e798:	ea33 0308 	bics.w	r3, r3, r8
 800e79c:	d114      	bne.n	800e7c8 <_dtoa_r+0x98>
 800e79e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7a4:	6013      	str	r3, [r2, #0]
 800e7a6:	9b00      	ldr	r3, [sp, #0]
 800e7a8:	b923      	cbnz	r3, 800e7b4 <_dtoa_r+0x84>
 800e7aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f000 8542 	beq.w	800f238 <_dtoa_r+0xb08>
 800e7b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ea64 <_dtoa_r+0x334>
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 8544 	beq.w	800f248 <_dtoa_r+0xb18>
 800e7c0:	f10b 0303 	add.w	r3, fp, #3
 800e7c4:	f000 bd3e 	b.w	800f244 <_dtoa_r+0xb14>
 800e7c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 f978 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7d8:	4681      	mov	r9, r0
 800e7da:	b168      	cbz	r0, 800e7f8 <_dtoa_r+0xc8>
 800e7dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7de:	2301      	movs	r3, #1
 800e7e0:	6013      	str	r3, [r2, #0]
 800e7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f000 8524 	beq.w	800f232 <_dtoa_r+0xb02>
 800e7ea:	4b9a      	ldr	r3, [pc, #616]	; (800ea54 <_dtoa_r+0x324>)
 800e7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ee:	f103 3bff 	add.w	fp, r3, #4294967295
 800e7f2:	6013      	str	r3, [r2, #0]
 800e7f4:	f000 bd28 	b.w	800f248 <_dtoa_r+0xb18>
 800e7f8:	aa14      	add	r2, sp, #80	; 0x50
 800e7fa:	a915      	add	r1, sp, #84	; 0x54
 800e7fc:	ec47 6b10 	vmov	d0, r6, r7
 800e800:	4620      	mov	r0, r4
 800e802:	f001 fdc1 	bl	8010388 <__d2b>
 800e806:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e80a:	9004      	str	r0, [sp, #16]
 800e80c:	2d00      	cmp	r5, #0
 800e80e:	d07c      	beq.n	800e90a <_dtoa_r+0x1da>
 800e810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e814:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e818:	46b2      	mov	sl, r6
 800e81a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e81e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e822:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e826:	2200      	movs	r2, #0
 800e828:	4b8b      	ldr	r3, [pc, #556]	; (800ea58 <_dtoa_r+0x328>)
 800e82a:	4650      	mov	r0, sl
 800e82c:	4659      	mov	r1, fp
 800e82e:	f7f1 fd2b 	bl	8000288 <__aeabi_dsub>
 800e832:	a381      	add	r3, pc, #516	; (adr r3, 800ea38 <_dtoa_r+0x308>)
 800e834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e838:	f7f1 fede 	bl	80005f8 <__aeabi_dmul>
 800e83c:	a380      	add	r3, pc, #512	; (adr r3, 800ea40 <_dtoa_r+0x310>)
 800e83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e842:	f7f1 fd23 	bl	800028c <__adddf3>
 800e846:	4606      	mov	r6, r0
 800e848:	4628      	mov	r0, r5
 800e84a:	460f      	mov	r7, r1
 800e84c:	f7f1 fe6a 	bl	8000524 <__aeabi_i2d>
 800e850:	a37d      	add	r3, pc, #500	; (adr r3, 800ea48 <_dtoa_r+0x318>)
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	f7f1 fecf 	bl	80005f8 <__aeabi_dmul>
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	4630      	mov	r0, r6
 800e860:	4639      	mov	r1, r7
 800e862:	f7f1 fd13 	bl	800028c <__adddf3>
 800e866:	4606      	mov	r6, r0
 800e868:	460f      	mov	r7, r1
 800e86a:	f7f2 f975 	bl	8000b58 <__aeabi_d2iz>
 800e86e:	2200      	movs	r2, #0
 800e870:	4682      	mov	sl, r0
 800e872:	2300      	movs	r3, #0
 800e874:	4630      	mov	r0, r6
 800e876:	4639      	mov	r1, r7
 800e878:	f7f2 f930 	bl	8000adc <__aeabi_dcmplt>
 800e87c:	b148      	cbz	r0, 800e892 <_dtoa_r+0x162>
 800e87e:	4650      	mov	r0, sl
 800e880:	f7f1 fe50 	bl	8000524 <__aeabi_i2d>
 800e884:	4632      	mov	r2, r6
 800e886:	463b      	mov	r3, r7
 800e888:	f7f2 f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e88c:	b908      	cbnz	r0, 800e892 <_dtoa_r+0x162>
 800e88e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e892:	f1ba 0f16 	cmp.w	sl, #22
 800e896:	d859      	bhi.n	800e94c <_dtoa_r+0x21c>
 800e898:	4970      	ldr	r1, [pc, #448]	; (800ea5c <_dtoa_r+0x32c>)
 800e89a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e89e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e8a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8a6:	f7f2 f937 	bl	8000b18 <__aeabi_dcmpgt>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d050      	beq.n	800e950 <_dtoa_r+0x220>
 800e8ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e8b8:	1b5d      	subs	r5, r3, r5
 800e8ba:	f1b5 0801 	subs.w	r8, r5, #1
 800e8be:	bf49      	itett	mi
 800e8c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800e8c4:	2300      	movpl	r3, #0
 800e8c6:	9305      	strmi	r3, [sp, #20]
 800e8c8:	f04f 0800 	movmi.w	r8, #0
 800e8cc:	bf58      	it	pl
 800e8ce:	9305      	strpl	r3, [sp, #20]
 800e8d0:	f1ba 0f00 	cmp.w	sl, #0
 800e8d4:	db3e      	blt.n	800e954 <_dtoa_r+0x224>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	44d0      	add	r8, sl
 800e8da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e8de:	9307      	str	r3, [sp, #28]
 800e8e0:	9b06      	ldr	r3, [sp, #24]
 800e8e2:	2b09      	cmp	r3, #9
 800e8e4:	f200 8090 	bhi.w	800ea08 <_dtoa_r+0x2d8>
 800e8e8:	2b05      	cmp	r3, #5
 800e8ea:	bfc4      	itt	gt
 800e8ec:	3b04      	subgt	r3, #4
 800e8ee:	9306      	strgt	r3, [sp, #24]
 800e8f0:	9b06      	ldr	r3, [sp, #24]
 800e8f2:	f1a3 0302 	sub.w	r3, r3, #2
 800e8f6:	bfcc      	ite	gt
 800e8f8:	2500      	movgt	r5, #0
 800e8fa:	2501      	movle	r5, #1
 800e8fc:	2b03      	cmp	r3, #3
 800e8fe:	f200 808f 	bhi.w	800ea20 <_dtoa_r+0x2f0>
 800e902:	e8df f003 	tbb	[pc, r3]
 800e906:	7f7d      	.short	0x7f7d
 800e908:	7131      	.short	0x7131
 800e90a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e90e:	441d      	add	r5, r3
 800e910:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e914:	2820      	cmp	r0, #32
 800e916:	dd13      	ble.n	800e940 <_dtoa_r+0x210>
 800e918:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e91c:	9b00      	ldr	r3, [sp, #0]
 800e91e:	fa08 f800 	lsl.w	r8, r8, r0
 800e922:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e926:	fa23 f000 	lsr.w	r0, r3, r0
 800e92a:	ea48 0000 	orr.w	r0, r8, r0
 800e92e:	f7f1 fde9 	bl	8000504 <__aeabi_ui2d>
 800e932:	2301      	movs	r3, #1
 800e934:	4682      	mov	sl, r0
 800e936:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e93a:	3d01      	subs	r5, #1
 800e93c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e93e:	e772      	b.n	800e826 <_dtoa_r+0xf6>
 800e940:	9b00      	ldr	r3, [sp, #0]
 800e942:	f1c0 0020 	rsb	r0, r0, #32
 800e946:	fa03 f000 	lsl.w	r0, r3, r0
 800e94a:	e7f0      	b.n	800e92e <_dtoa_r+0x1fe>
 800e94c:	2301      	movs	r3, #1
 800e94e:	e7b1      	b.n	800e8b4 <_dtoa_r+0x184>
 800e950:	900f      	str	r0, [sp, #60]	; 0x3c
 800e952:	e7b0      	b.n	800e8b6 <_dtoa_r+0x186>
 800e954:	9b05      	ldr	r3, [sp, #20]
 800e956:	eba3 030a 	sub.w	r3, r3, sl
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	f1ca 0300 	rsb	r3, sl, #0
 800e960:	9307      	str	r3, [sp, #28]
 800e962:	2300      	movs	r3, #0
 800e964:	930e      	str	r3, [sp, #56]	; 0x38
 800e966:	e7bb      	b.n	800e8e0 <_dtoa_r+0x1b0>
 800e968:	2301      	movs	r3, #1
 800e96a:	930a      	str	r3, [sp, #40]	; 0x28
 800e96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e96e:	2b00      	cmp	r3, #0
 800e970:	dd59      	ble.n	800ea26 <_dtoa_r+0x2f6>
 800e972:	9302      	str	r3, [sp, #8]
 800e974:	4699      	mov	r9, r3
 800e976:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e978:	2200      	movs	r2, #0
 800e97a:	6072      	str	r2, [r6, #4]
 800e97c:	2204      	movs	r2, #4
 800e97e:	f102 0014 	add.w	r0, r2, #20
 800e982:	4298      	cmp	r0, r3
 800e984:	6871      	ldr	r1, [r6, #4]
 800e986:	d953      	bls.n	800ea30 <_dtoa_r+0x300>
 800e988:	4620      	mov	r0, r4
 800e98a:	f001 f9bb 	bl	800fd04 <_Balloc>
 800e98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e990:	6030      	str	r0, [r6, #0]
 800e992:	f1b9 0f0e 	cmp.w	r9, #14
 800e996:	f8d3 b000 	ldr.w	fp, [r3]
 800e99a:	f200 80e6 	bhi.w	800eb6a <_dtoa_r+0x43a>
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	f000 80e3 	beq.w	800eb6a <_dtoa_r+0x43a>
 800e9a4:	ed9d 7b00 	vldr	d7, [sp]
 800e9a8:	f1ba 0f00 	cmp.w	sl, #0
 800e9ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e9b0:	dd74      	ble.n	800ea9c <_dtoa_r+0x36c>
 800e9b2:	4a2a      	ldr	r2, [pc, #168]	; (800ea5c <_dtoa_r+0x32c>)
 800e9b4:	f00a 030f 	and.w	r3, sl, #15
 800e9b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e9bc:	ed93 7b00 	vldr	d7, [r3]
 800e9c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e9c4:	06f0      	lsls	r0, r6, #27
 800e9c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e9ca:	d565      	bpl.n	800ea98 <_dtoa_r+0x368>
 800e9cc:	4b24      	ldr	r3, [pc, #144]	; (800ea60 <_dtoa_r+0x330>)
 800e9ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e9d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9d6:	f7f1 ff39 	bl	800084c <__aeabi_ddiv>
 800e9da:	e9cd 0100 	strd	r0, r1, [sp]
 800e9de:	f006 060f 	and.w	r6, r6, #15
 800e9e2:	2503      	movs	r5, #3
 800e9e4:	4f1e      	ldr	r7, [pc, #120]	; (800ea60 <_dtoa_r+0x330>)
 800e9e6:	e04c      	b.n	800ea82 <_dtoa_r+0x352>
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e9ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9ee:	4453      	add	r3, sl
 800e9f0:	f103 0901 	add.w	r9, r3, #1
 800e9f4:	9302      	str	r3, [sp, #8]
 800e9f6:	464b      	mov	r3, r9
 800e9f8:	2b01      	cmp	r3, #1
 800e9fa:	bfb8      	it	lt
 800e9fc:	2301      	movlt	r3, #1
 800e9fe:	e7ba      	b.n	800e976 <_dtoa_r+0x246>
 800ea00:	2300      	movs	r3, #0
 800ea02:	e7b2      	b.n	800e96a <_dtoa_r+0x23a>
 800ea04:	2300      	movs	r3, #0
 800ea06:	e7f0      	b.n	800e9ea <_dtoa_r+0x2ba>
 800ea08:	2501      	movs	r5, #1
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	9306      	str	r3, [sp, #24]
 800ea0e:	950a      	str	r5, [sp, #40]	; 0x28
 800ea10:	f04f 33ff 	mov.w	r3, #4294967295
 800ea14:	9302      	str	r3, [sp, #8]
 800ea16:	4699      	mov	r9, r3
 800ea18:	2200      	movs	r2, #0
 800ea1a:	2312      	movs	r3, #18
 800ea1c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea1e:	e7aa      	b.n	800e976 <_dtoa_r+0x246>
 800ea20:	2301      	movs	r3, #1
 800ea22:	930a      	str	r3, [sp, #40]	; 0x28
 800ea24:	e7f4      	b.n	800ea10 <_dtoa_r+0x2e0>
 800ea26:	2301      	movs	r3, #1
 800ea28:	9302      	str	r3, [sp, #8]
 800ea2a:	4699      	mov	r9, r3
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	e7f5      	b.n	800ea1c <_dtoa_r+0x2ec>
 800ea30:	3101      	adds	r1, #1
 800ea32:	6071      	str	r1, [r6, #4]
 800ea34:	0052      	lsls	r2, r2, #1
 800ea36:	e7a2      	b.n	800e97e <_dtoa_r+0x24e>
 800ea38:	636f4361 	.word	0x636f4361
 800ea3c:	3fd287a7 	.word	0x3fd287a7
 800ea40:	8b60c8b3 	.word	0x8b60c8b3
 800ea44:	3fc68a28 	.word	0x3fc68a28
 800ea48:	509f79fb 	.word	0x509f79fb
 800ea4c:	3fd34413 	.word	0x3fd34413
 800ea50:	7ff00000 	.word	0x7ff00000
 800ea54:	0801143d 	.word	0x0801143d
 800ea58:	3ff80000 	.word	0x3ff80000
 800ea5c:	08011560 	.word	0x08011560
 800ea60:	08011538 	.word	0x08011538
 800ea64:	080114c1 	.word	0x080114c1
 800ea68:	07f1      	lsls	r1, r6, #31
 800ea6a:	d508      	bpl.n	800ea7e <_dtoa_r+0x34e>
 800ea6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ea70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea74:	f7f1 fdc0 	bl	80005f8 <__aeabi_dmul>
 800ea78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ea7c:	3501      	adds	r5, #1
 800ea7e:	1076      	asrs	r6, r6, #1
 800ea80:	3708      	adds	r7, #8
 800ea82:	2e00      	cmp	r6, #0
 800ea84:	d1f0      	bne.n	800ea68 <_dtoa_r+0x338>
 800ea86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ea8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea8e:	f7f1 fedd 	bl	800084c <__aeabi_ddiv>
 800ea92:	e9cd 0100 	strd	r0, r1, [sp]
 800ea96:	e01a      	b.n	800eace <_dtoa_r+0x39e>
 800ea98:	2502      	movs	r5, #2
 800ea9a:	e7a3      	b.n	800e9e4 <_dtoa_r+0x2b4>
 800ea9c:	f000 80a0 	beq.w	800ebe0 <_dtoa_r+0x4b0>
 800eaa0:	f1ca 0600 	rsb	r6, sl, #0
 800eaa4:	4b9f      	ldr	r3, [pc, #636]	; (800ed24 <_dtoa_r+0x5f4>)
 800eaa6:	4fa0      	ldr	r7, [pc, #640]	; (800ed28 <_dtoa_r+0x5f8>)
 800eaa8:	f006 020f 	and.w	r2, r6, #15
 800eaac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eab8:	f7f1 fd9e 	bl	80005f8 <__aeabi_dmul>
 800eabc:	e9cd 0100 	strd	r0, r1, [sp]
 800eac0:	1136      	asrs	r6, r6, #4
 800eac2:	2300      	movs	r3, #0
 800eac4:	2502      	movs	r5, #2
 800eac6:	2e00      	cmp	r6, #0
 800eac8:	d17f      	bne.n	800ebca <_dtoa_r+0x49a>
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1e1      	bne.n	800ea92 <_dtoa_r+0x362>
 800eace:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f000 8087 	beq.w	800ebe4 <_dtoa_r+0x4b4>
 800ead6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eada:	2200      	movs	r2, #0
 800eadc:	4b93      	ldr	r3, [pc, #588]	; (800ed2c <_dtoa_r+0x5fc>)
 800eade:	4630      	mov	r0, r6
 800eae0:	4639      	mov	r1, r7
 800eae2:	f7f1 fffb 	bl	8000adc <__aeabi_dcmplt>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d07c      	beq.n	800ebe4 <_dtoa_r+0x4b4>
 800eaea:	f1b9 0f00 	cmp.w	r9, #0
 800eaee:	d079      	beq.n	800ebe4 <_dtoa_r+0x4b4>
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd35      	ble.n	800eb62 <_dtoa_r+0x432>
 800eaf6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eafa:	9308      	str	r3, [sp, #32]
 800eafc:	4639      	mov	r1, r7
 800eafe:	2200      	movs	r2, #0
 800eb00:	4b8b      	ldr	r3, [pc, #556]	; (800ed30 <_dtoa_r+0x600>)
 800eb02:	4630      	mov	r0, r6
 800eb04:	f7f1 fd78 	bl	80005f8 <__aeabi_dmul>
 800eb08:	e9cd 0100 	strd	r0, r1, [sp]
 800eb0c:	9f02      	ldr	r7, [sp, #8]
 800eb0e:	3501      	adds	r5, #1
 800eb10:	4628      	mov	r0, r5
 800eb12:	f7f1 fd07 	bl	8000524 <__aeabi_i2d>
 800eb16:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb1a:	f7f1 fd6d 	bl	80005f8 <__aeabi_dmul>
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4b84      	ldr	r3, [pc, #528]	; (800ed34 <_dtoa_r+0x604>)
 800eb22:	f7f1 fbb3 	bl	800028c <__adddf3>
 800eb26:	4605      	mov	r5, r0
 800eb28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eb2c:	2f00      	cmp	r7, #0
 800eb2e:	d15d      	bne.n	800ebec <_dtoa_r+0x4bc>
 800eb30:	2200      	movs	r2, #0
 800eb32:	4b81      	ldr	r3, [pc, #516]	; (800ed38 <_dtoa_r+0x608>)
 800eb34:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb38:	f7f1 fba6 	bl	8000288 <__aeabi_dsub>
 800eb3c:	462a      	mov	r2, r5
 800eb3e:	4633      	mov	r3, r6
 800eb40:	e9cd 0100 	strd	r0, r1, [sp]
 800eb44:	f7f1 ffe8 	bl	8000b18 <__aeabi_dcmpgt>
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	f040 8288 	bne.w	800f05e <_dtoa_r+0x92e>
 800eb4e:	462a      	mov	r2, r5
 800eb50:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eb54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb58:	f7f1 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	f040 827c 	bne.w	800f05a <_dtoa_r+0x92a>
 800eb62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb66:	e9cd 2300 	strd	r2, r3, [sp]
 800eb6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f2c0 8150 	blt.w	800ee12 <_dtoa_r+0x6e2>
 800eb72:	f1ba 0f0e 	cmp.w	sl, #14
 800eb76:	f300 814c 	bgt.w	800ee12 <_dtoa_r+0x6e2>
 800eb7a:	4b6a      	ldr	r3, [pc, #424]	; (800ed24 <_dtoa_r+0x5f4>)
 800eb7c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb80:	ed93 7b00 	vldr	d7, [r3]
 800eb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eb8c:	f280 80d8 	bge.w	800ed40 <_dtoa_r+0x610>
 800eb90:	f1b9 0f00 	cmp.w	r9, #0
 800eb94:	f300 80d4 	bgt.w	800ed40 <_dtoa_r+0x610>
 800eb98:	f040 825e 	bne.w	800f058 <_dtoa_r+0x928>
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	4b66      	ldr	r3, [pc, #408]	; (800ed38 <_dtoa_r+0x608>)
 800eba0:	ec51 0b17 	vmov	r0, r1, d7
 800eba4:	f7f1 fd28 	bl	80005f8 <__aeabi_dmul>
 800eba8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebac:	f7f1 ffaa 	bl	8000b04 <__aeabi_dcmpge>
 800ebb0:	464f      	mov	r7, r9
 800ebb2:	464e      	mov	r6, r9
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	f040 8234 	bne.w	800f022 <_dtoa_r+0x8f2>
 800ebba:	2331      	movs	r3, #49	; 0x31
 800ebbc:	f10b 0501 	add.w	r5, fp, #1
 800ebc0:	f88b 3000 	strb.w	r3, [fp]
 800ebc4:	f10a 0a01 	add.w	sl, sl, #1
 800ebc8:	e22f      	b.n	800f02a <_dtoa_r+0x8fa>
 800ebca:	07f2      	lsls	r2, r6, #31
 800ebcc:	d505      	bpl.n	800ebda <_dtoa_r+0x4aa>
 800ebce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	2301      	movs	r3, #1
 800ebda:	1076      	asrs	r6, r6, #1
 800ebdc:	3708      	adds	r7, #8
 800ebde:	e772      	b.n	800eac6 <_dtoa_r+0x396>
 800ebe0:	2502      	movs	r5, #2
 800ebe2:	e774      	b.n	800eace <_dtoa_r+0x39e>
 800ebe4:	f8cd a020 	str.w	sl, [sp, #32]
 800ebe8:	464f      	mov	r7, r9
 800ebea:	e791      	b.n	800eb10 <_dtoa_r+0x3e0>
 800ebec:	4b4d      	ldr	r3, [pc, #308]	; (800ed24 <_dtoa_r+0x5f4>)
 800ebee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ebf2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ebf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d047      	beq.n	800ec8c <_dtoa_r+0x55c>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	460b      	mov	r3, r1
 800ec00:	2000      	movs	r0, #0
 800ec02:	494e      	ldr	r1, [pc, #312]	; (800ed3c <_dtoa_r+0x60c>)
 800ec04:	f7f1 fe22 	bl	800084c <__aeabi_ddiv>
 800ec08:	462a      	mov	r2, r5
 800ec0a:	4633      	mov	r3, r6
 800ec0c:	f7f1 fb3c 	bl	8000288 <__aeabi_dsub>
 800ec10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec14:	465d      	mov	r5, fp
 800ec16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec1a:	f7f1 ff9d 	bl	8000b58 <__aeabi_d2iz>
 800ec1e:	4606      	mov	r6, r0
 800ec20:	f7f1 fc80 	bl	8000524 <__aeabi_i2d>
 800ec24:	4602      	mov	r2, r0
 800ec26:	460b      	mov	r3, r1
 800ec28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec2c:	f7f1 fb2c 	bl	8000288 <__aeabi_dsub>
 800ec30:	3630      	adds	r6, #48	; 0x30
 800ec32:	f805 6b01 	strb.w	r6, [r5], #1
 800ec36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec3a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec3e:	f7f1 ff4d 	bl	8000adc <__aeabi_dcmplt>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d163      	bne.n	800ed0e <_dtoa_r+0x5de>
 800ec46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec4a:	2000      	movs	r0, #0
 800ec4c:	4937      	ldr	r1, [pc, #220]	; (800ed2c <_dtoa_r+0x5fc>)
 800ec4e:	f7f1 fb1b 	bl	8000288 <__aeabi_dsub>
 800ec52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ec56:	f7f1 ff41 	bl	8000adc <__aeabi_dcmplt>
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	f040 80b7 	bne.w	800edce <_dtoa_r+0x69e>
 800ec60:	eba5 030b 	sub.w	r3, r5, fp
 800ec64:	429f      	cmp	r7, r3
 800ec66:	f77f af7c 	ble.w	800eb62 <_dtoa_r+0x432>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	4b30      	ldr	r3, [pc, #192]	; (800ed30 <_dtoa_r+0x600>)
 800ec6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ec72:	f7f1 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ec76:	2200      	movs	r2, #0
 800ec78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec7c:	4b2c      	ldr	r3, [pc, #176]	; (800ed30 <_dtoa_r+0x600>)
 800ec7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec82:	f7f1 fcb9 	bl	80005f8 <__aeabi_dmul>
 800ec86:	e9cd 0100 	strd	r0, r1, [sp]
 800ec8a:	e7c4      	b.n	800ec16 <_dtoa_r+0x4e6>
 800ec8c:	462a      	mov	r2, r5
 800ec8e:	4633      	mov	r3, r6
 800ec90:	f7f1 fcb2 	bl	80005f8 <__aeabi_dmul>
 800ec94:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec98:	eb0b 0507 	add.w	r5, fp, r7
 800ec9c:	465e      	mov	r6, fp
 800ec9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca2:	f7f1 ff59 	bl	8000b58 <__aeabi_d2iz>
 800eca6:	4607      	mov	r7, r0
 800eca8:	f7f1 fc3c 	bl	8000524 <__aeabi_i2d>
 800ecac:	3730      	adds	r7, #48	; 0x30
 800ecae:	4602      	mov	r2, r0
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecb6:	f7f1 fae7 	bl	8000288 <__aeabi_dsub>
 800ecba:	f806 7b01 	strb.w	r7, [r6], #1
 800ecbe:	42ae      	cmp	r6, r5
 800ecc0:	e9cd 0100 	strd	r0, r1, [sp]
 800ecc4:	f04f 0200 	mov.w	r2, #0
 800ecc8:	d126      	bne.n	800ed18 <_dtoa_r+0x5e8>
 800ecca:	4b1c      	ldr	r3, [pc, #112]	; (800ed3c <_dtoa_r+0x60c>)
 800eccc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecd0:	f7f1 fadc 	bl	800028c <__adddf3>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecdc:	f7f1 ff1c 	bl	8000b18 <__aeabi_dcmpgt>
 800ece0:	2800      	cmp	r0, #0
 800ece2:	d174      	bne.n	800edce <_dtoa_r+0x69e>
 800ece4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ece8:	2000      	movs	r0, #0
 800ecea:	4914      	ldr	r1, [pc, #80]	; (800ed3c <_dtoa_r+0x60c>)
 800ecec:	f7f1 facc 	bl	8000288 <__aeabi_dsub>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecf8:	f7f1 fef0 	bl	8000adc <__aeabi_dcmplt>
 800ecfc:	2800      	cmp	r0, #0
 800ecfe:	f43f af30 	beq.w	800eb62 <_dtoa_r+0x432>
 800ed02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed06:	2b30      	cmp	r3, #48	; 0x30
 800ed08:	f105 32ff 	add.w	r2, r5, #4294967295
 800ed0c:	d002      	beq.n	800ed14 <_dtoa_r+0x5e4>
 800ed0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ed12:	e04a      	b.n	800edaa <_dtoa_r+0x67a>
 800ed14:	4615      	mov	r5, r2
 800ed16:	e7f4      	b.n	800ed02 <_dtoa_r+0x5d2>
 800ed18:	4b05      	ldr	r3, [pc, #20]	; (800ed30 <_dtoa_r+0x600>)
 800ed1a:	f7f1 fc6d 	bl	80005f8 <__aeabi_dmul>
 800ed1e:	e9cd 0100 	strd	r0, r1, [sp]
 800ed22:	e7bc      	b.n	800ec9e <_dtoa_r+0x56e>
 800ed24:	08011560 	.word	0x08011560
 800ed28:	08011538 	.word	0x08011538
 800ed2c:	3ff00000 	.word	0x3ff00000
 800ed30:	40240000 	.word	0x40240000
 800ed34:	401c0000 	.word	0x401c0000
 800ed38:	40140000 	.word	0x40140000
 800ed3c:	3fe00000 	.word	0x3fe00000
 800ed40:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed44:	465d      	mov	r5, fp
 800ed46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	f7f1 fd7d 	bl	800084c <__aeabi_ddiv>
 800ed52:	f7f1 ff01 	bl	8000b58 <__aeabi_d2iz>
 800ed56:	4680      	mov	r8, r0
 800ed58:	f7f1 fbe4 	bl	8000524 <__aeabi_i2d>
 800ed5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed60:	f7f1 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ed70:	f7f1 fa8a 	bl	8000288 <__aeabi_dsub>
 800ed74:	f805 6b01 	strb.w	r6, [r5], #1
 800ed78:	eba5 060b 	sub.w	r6, r5, fp
 800ed7c:	45b1      	cmp	r9, r6
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	d139      	bne.n	800edf8 <_dtoa_r+0x6c8>
 800ed84:	f7f1 fa82 	bl	800028c <__adddf3>
 800ed88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	460f      	mov	r7, r1
 800ed90:	f7f1 fec2 	bl	8000b18 <__aeabi_dcmpgt>
 800ed94:	b9c8      	cbnz	r0, 800edca <_dtoa_r+0x69a>
 800ed96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	4639      	mov	r1, r7
 800ed9e:	f7f1 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 800eda2:	b110      	cbz	r0, 800edaa <_dtoa_r+0x67a>
 800eda4:	f018 0f01 	tst.w	r8, #1
 800eda8:	d10f      	bne.n	800edca <_dtoa_r+0x69a>
 800edaa:	9904      	ldr	r1, [sp, #16]
 800edac:	4620      	mov	r0, r4
 800edae:	f000 ffdd 	bl	800fd6c <_Bfree>
 800edb2:	2300      	movs	r3, #0
 800edb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800edb6:	702b      	strb	r3, [r5, #0]
 800edb8:	f10a 0301 	add.w	r3, sl, #1
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f000 8241 	beq.w	800f248 <_dtoa_r+0xb18>
 800edc6:	601d      	str	r5, [r3, #0]
 800edc8:	e23e      	b.n	800f248 <_dtoa_r+0xb18>
 800edca:	f8cd a020 	str.w	sl, [sp, #32]
 800edce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800edd2:	2a39      	cmp	r2, #57	; 0x39
 800edd4:	f105 33ff 	add.w	r3, r5, #4294967295
 800edd8:	d108      	bne.n	800edec <_dtoa_r+0x6bc>
 800edda:	459b      	cmp	fp, r3
 800eddc:	d10a      	bne.n	800edf4 <_dtoa_r+0x6c4>
 800edde:	9b08      	ldr	r3, [sp, #32]
 800ede0:	3301      	adds	r3, #1
 800ede2:	9308      	str	r3, [sp, #32]
 800ede4:	2330      	movs	r3, #48	; 0x30
 800ede6:	f88b 3000 	strb.w	r3, [fp]
 800edea:	465b      	mov	r3, fp
 800edec:	781a      	ldrb	r2, [r3, #0]
 800edee:	3201      	adds	r2, #1
 800edf0:	701a      	strb	r2, [r3, #0]
 800edf2:	e78c      	b.n	800ed0e <_dtoa_r+0x5de>
 800edf4:	461d      	mov	r5, r3
 800edf6:	e7ea      	b.n	800edce <_dtoa_r+0x69e>
 800edf8:	2200      	movs	r2, #0
 800edfa:	4b9b      	ldr	r3, [pc, #620]	; (800f068 <_dtoa_r+0x938>)
 800edfc:	f7f1 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ee00:	2200      	movs	r2, #0
 800ee02:	2300      	movs	r3, #0
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	f7f1 fe5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	d09a      	beq.n	800ed46 <_dtoa_r+0x616>
 800ee10:	e7cb      	b.n	800edaa <_dtoa_r+0x67a>
 800ee12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee14:	2a00      	cmp	r2, #0
 800ee16:	f000 808b 	beq.w	800ef30 <_dtoa_r+0x800>
 800ee1a:	9a06      	ldr	r2, [sp, #24]
 800ee1c:	2a01      	cmp	r2, #1
 800ee1e:	dc6e      	bgt.n	800eefe <_dtoa_r+0x7ce>
 800ee20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d067      	beq.n	800eef6 <_dtoa_r+0x7c6>
 800ee26:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee2a:	9f07      	ldr	r7, [sp, #28]
 800ee2c:	9d05      	ldr	r5, [sp, #20]
 800ee2e:	9a05      	ldr	r2, [sp, #20]
 800ee30:	2101      	movs	r1, #1
 800ee32:	441a      	add	r2, r3
 800ee34:	4620      	mov	r0, r4
 800ee36:	9205      	str	r2, [sp, #20]
 800ee38:	4498      	add	r8, r3
 800ee3a:	f001 f875 	bl	800ff28 <__i2b>
 800ee3e:	4606      	mov	r6, r0
 800ee40:	2d00      	cmp	r5, #0
 800ee42:	dd0c      	ble.n	800ee5e <_dtoa_r+0x72e>
 800ee44:	f1b8 0f00 	cmp.w	r8, #0
 800ee48:	dd09      	ble.n	800ee5e <_dtoa_r+0x72e>
 800ee4a:	4545      	cmp	r5, r8
 800ee4c:	9a05      	ldr	r2, [sp, #20]
 800ee4e:	462b      	mov	r3, r5
 800ee50:	bfa8      	it	ge
 800ee52:	4643      	movge	r3, r8
 800ee54:	1ad2      	subs	r2, r2, r3
 800ee56:	9205      	str	r2, [sp, #20]
 800ee58:	1aed      	subs	r5, r5, r3
 800ee5a:	eba8 0803 	sub.w	r8, r8, r3
 800ee5e:	9b07      	ldr	r3, [sp, #28]
 800ee60:	b1eb      	cbz	r3, 800ee9e <_dtoa_r+0x76e>
 800ee62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d067      	beq.n	800ef38 <_dtoa_r+0x808>
 800ee68:	b18f      	cbz	r7, 800ee8e <_dtoa_r+0x75e>
 800ee6a:	4631      	mov	r1, r6
 800ee6c:	463a      	mov	r2, r7
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f001 f8fa 	bl	8010068 <__pow5mult>
 800ee74:	9a04      	ldr	r2, [sp, #16]
 800ee76:	4601      	mov	r1, r0
 800ee78:	4606      	mov	r6, r0
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f001 f85d 	bl	800ff3a <__multiply>
 800ee80:	9904      	ldr	r1, [sp, #16]
 800ee82:	9008      	str	r0, [sp, #32]
 800ee84:	4620      	mov	r0, r4
 800ee86:	f000 ff71 	bl	800fd6c <_Bfree>
 800ee8a:	9b08      	ldr	r3, [sp, #32]
 800ee8c:	9304      	str	r3, [sp, #16]
 800ee8e:	9b07      	ldr	r3, [sp, #28]
 800ee90:	1bda      	subs	r2, r3, r7
 800ee92:	d004      	beq.n	800ee9e <_dtoa_r+0x76e>
 800ee94:	9904      	ldr	r1, [sp, #16]
 800ee96:	4620      	mov	r0, r4
 800ee98:	f001 f8e6 	bl	8010068 <__pow5mult>
 800ee9c:	9004      	str	r0, [sp, #16]
 800ee9e:	2101      	movs	r1, #1
 800eea0:	4620      	mov	r0, r4
 800eea2:	f001 f841 	bl	800ff28 <__i2b>
 800eea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eea8:	4607      	mov	r7, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 81d0 	beq.w	800f250 <_dtoa_r+0xb20>
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	4601      	mov	r1, r0
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	f001 f8d7 	bl	8010068 <__pow5mult>
 800eeba:	9b06      	ldr	r3, [sp, #24]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	4607      	mov	r7, r0
 800eec0:	dc40      	bgt.n	800ef44 <_dtoa_r+0x814>
 800eec2:	9b00      	ldr	r3, [sp, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d139      	bne.n	800ef3c <_dtoa_r+0x80c>
 800eec8:	9b01      	ldr	r3, [sp, #4]
 800eeca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d136      	bne.n	800ef40 <_dtoa_r+0x810>
 800eed2:	9b01      	ldr	r3, [sp, #4]
 800eed4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eed8:	0d1b      	lsrs	r3, r3, #20
 800eeda:	051b      	lsls	r3, r3, #20
 800eedc:	b12b      	cbz	r3, 800eeea <_dtoa_r+0x7ba>
 800eede:	9b05      	ldr	r3, [sp, #20]
 800eee0:	3301      	adds	r3, #1
 800eee2:	9305      	str	r3, [sp, #20]
 800eee4:	f108 0801 	add.w	r8, r8, #1
 800eee8:	2301      	movs	r3, #1
 800eeea:	9307      	str	r3, [sp, #28]
 800eeec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d12a      	bne.n	800ef48 <_dtoa_r+0x818>
 800eef2:	2001      	movs	r0, #1
 800eef4:	e030      	b.n	800ef58 <_dtoa_r+0x828>
 800eef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eef8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eefc:	e795      	b.n	800ee2a <_dtoa_r+0x6fa>
 800eefe:	9b07      	ldr	r3, [sp, #28]
 800ef00:	f109 37ff 	add.w	r7, r9, #4294967295
 800ef04:	42bb      	cmp	r3, r7
 800ef06:	bfbf      	itttt	lt
 800ef08:	9b07      	ldrlt	r3, [sp, #28]
 800ef0a:	9707      	strlt	r7, [sp, #28]
 800ef0c:	1afa      	sublt	r2, r7, r3
 800ef0e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ef10:	bfbb      	ittet	lt
 800ef12:	189b      	addlt	r3, r3, r2
 800ef14:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ef16:	1bdf      	subge	r7, r3, r7
 800ef18:	2700      	movlt	r7, #0
 800ef1a:	f1b9 0f00 	cmp.w	r9, #0
 800ef1e:	bfb5      	itete	lt
 800ef20:	9b05      	ldrlt	r3, [sp, #20]
 800ef22:	9d05      	ldrge	r5, [sp, #20]
 800ef24:	eba3 0509 	sublt.w	r5, r3, r9
 800ef28:	464b      	movge	r3, r9
 800ef2a:	bfb8      	it	lt
 800ef2c:	2300      	movlt	r3, #0
 800ef2e:	e77e      	b.n	800ee2e <_dtoa_r+0x6fe>
 800ef30:	9f07      	ldr	r7, [sp, #28]
 800ef32:	9d05      	ldr	r5, [sp, #20]
 800ef34:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ef36:	e783      	b.n	800ee40 <_dtoa_r+0x710>
 800ef38:	9a07      	ldr	r2, [sp, #28]
 800ef3a:	e7ab      	b.n	800ee94 <_dtoa_r+0x764>
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	e7d4      	b.n	800eeea <_dtoa_r+0x7ba>
 800ef40:	9b00      	ldr	r3, [sp, #0]
 800ef42:	e7d2      	b.n	800eeea <_dtoa_r+0x7ba>
 800ef44:	2300      	movs	r3, #0
 800ef46:	9307      	str	r3, [sp, #28]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ef4e:	6918      	ldr	r0, [r3, #16]
 800ef50:	f000 ff9c 	bl	800fe8c <__hi0bits>
 800ef54:	f1c0 0020 	rsb	r0, r0, #32
 800ef58:	4440      	add	r0, r8
 800ef5a:	f010 001f 	ands.w	r0, r0, #31
 800ef5e:	d047      	beq.n	800eff0 <_dtoa_r+0x8c0>
 800ef60:	f1c0 0320 	rsb	r3, r0, #32
 800ef64:	2b04      	cmp	r3, #4
 800ef66:	dd3b      	ble.n	800efe0 <_dtoa_r+0x8b0>
 800ef68:	9b05      	ldr	r3, [sp, #20]
 800ef6a:	f1c0 001c 	rsb	r0, r0, #28
 800ef6e:	4403      	add	r3, r0
 800ef70:	9305      	str	r3, [sp, #20]
 800ef72:	4405      	add	r5, r0
 800ef74:	4480      	add	r8, r0
 800ef76:	9b05      	ldr	r3, [sp, #20]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dd05      	ble.n	800ef88 <_dtoa_r+0x858>
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	9904      	ldr	r1, [sp, #16]
 800ef80:	4620      	mov	r0, r4
 800ef82:	f001 f8bf 	bl	8010104 <__lshift>
 800ef86:	9004      	str	r0, [sp, #16]
 800ef88:	f1b8 0f00 	cmp.w	r8, #0
 800ef8c:	dd05      	ble.n	800ef9a <_dtoa_r+0x86a>
 800ef8e:	4639      	mov	r1, r7
 800ef90:	4642      	mov	r2, r8
 800ef92:	4620      	mov	r0, r4
 800ef94:	f001 f8b6 	bl	8010104 <__lshift>
 800ef98:	4607      	mov	r7, r0
 800ef9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef9c:	b353      	cbz	r3, 800eff4 <_dtoa_r+0x8c4>
 800ef9e:	4639      	mov	r1, r7
 800efa0:	9804      	ldr	r0, [sp, #16]
 800efa2:	f001 f903 	bl	80101ac <__mcmp>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	da24      	bge.n	800eff4 <_dtoa_r+0x8c4>
 800efaa:	2300      	movs	r3, #0
 800efac:	220a      	movs	r2, #10
 800efae:	9904      	ldr	r1, [sp, #16]
 800efb0:	4620      	mov	r0, r4
 800efb2:	f000 fef2 	bl	800fd9a <__multadd>
 800efb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb8:	9004      	str	r0, [sp, #16]
 800efba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 814d 	beq.w	800f25e <_dtoa_r+0xb2e>
 800efc4:	2300      	movs	r3, #0
 800efc6:	4631      	mov	r1, r6
 800efc8:	220a      	movs	r2, #10
 800efca:	4620      	mov	r0, r4
 800efcc:	f000 fee5 	bl	800fd9a <__multadd>
 800efd0:	9b02      	ldr	r3, [sp, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	4606      	mov	r6, r0
 800efd6:	dc4f      	bgt.n	800f078 <_dtoa_r+0x948>
 800efd8:	9b06      	ldr	r3, [sp, #24]
 800efda:	2b02      	cmp	r3, #2
 800efdc:	dd4c      	ble.n	800f078 <_dtoa_r+0x948>
 800efde:	e011      	b.n	800f004 <_dtoa_r+0x8d4>
 800efe0:	d0c9      	beq.n	800ef76 <_dtoa_r+0x846>
 800efe2:	9a05      	ldr	r2, [sp, #20]
 800efe4:	331c      	adds	r3, #28
 800efe6:	441a      	add	r2, r3
 800efe8:	9205      	str	r2, [sp, #20]
 800efea:	441d      	add	r5, r3
 800efec:	4498      	add	r8, r3
 800efee:	e7c2      	b.n	800ef76 <_dtoa_r+0x846>
 800eff0:	4603      	mov	r3, r0
 800eff2:	e7f6      	b.n	800efe2 <_dtoa_r+0x8b2>
 800eff4:	f1b9 0f00 	cmp.w	r9, #0
 800eff8:	dc38      	bgt.n	800f06c <_dtoa_r+0x93c>
 800effa:	9b06      	ldr	r3, [sp, #24]
 800effc:	2b02      	cmp	r3, #2
 800effe:	dd35      	ble.n	800f06c <_dtoa_r+0x93c>
 800f000:	f8cd 9008 	str.w	r9, [sp, #8]
 800f004:	9b02      	ldr	r3, [sp, #8]
 800f006:	b963      	cbnz	r3, 800f022 <_dtoa_r+0x8f2>
 800f008:	4639      	mov	r1, r7
 800f00a:	2205      	movs	r2, #5
 800f00c:	4620      	mov	r0, r4
 800f00e:	f000 fec4 	bl	800fd9a <__multadd>
 800f012:	4601      	mov	r1, r0
 800f014:	4607      	mov	r7, r0
 800f016:	9804      	ldr	r0, [sp, #16]
 800f018:	f001 f8c8 	bl	80101ac <__mcmp>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	f73f adcc 	bgt.w	800ebba <_dtoa_r+0x48a>
 800f022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f024:	465d      	mov	r5, fp
 800f026:	ea6f 0a03 	mvn.w	sl, r3
 800f02a:	f04f 0900 	mov.w	r9, #0
 800f02e:	4639      	mov	r1, r7
 800f030:	4620      	mov	r0, r4
 800f032:	f000 fe9b 	bl	800fd6c <_Bfree>
 800f036:	2e00      	cmp	r6, #0
 800f038:	f43f aeb7 	beq.w	800edaa <_dtoa_r+0x67a>
 800f03c:	f1b9 0f00 	cmp.w	r9, #0
 800f040:	d005      	beq.n	800f04e <_dtoa_r+0x91e>
 800f042:	45b1      	cmp	r9, r6
 800f044:	d003      	beq.n	800f04e <_dtoa_r+0x91e>
 800f046:	4649      	mov	r1, r9
 800f048:	4620      	mov	r0, r4
 800f04a:	f000 fe8f 	bl	800fd6c <_Bfree>
 800f04e:	4631      	mov	r1, r6
 800f050:	4620      	mov	r0, r4
 800f052:	f000 fe8b 	bl	800fd6c <_Bfree>
 800f056:	e6a8      	b.n	800edaa <_dtoa_r+0x67a>
 800f058:	2700      	movs	r7, #0
 800f05a:	463e      	mov	r6, r7
 800f05c:	e7e1      	b.n	800f022 <_dtoa_r+0x8f2>
 800f05e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f062:	463e      	mov	r6, r7
 800f064:	e5a9      	b.n	800ebba <_dtoa_r+0x48a>
 800f066:	bf00      	nop
 800f068:	40240000 	.word	0x40240000
 800f06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f06e:	f8cd 9008 	str.w	r9, [sp, #8]
 800f072:	2b00      	cmp	r3, #0
 800f074:	f000 80fa 	beq.w	800f26c <_dtoa_r+0xb3c>
 800f078:	2d00      	cmp	r5, #0
 800f07a:	dd05      	ble.n	800f088 <_dtoa_r+0x958>
 800f07c:	4631      	mov	r1, r6
 800f07e:	462a      	mov	r2, r5
 800f080:	4620      	mov	r0, r4
 800f082:	f001 f83f 	bl	8010104 <__lshift>
 800f086:	4606      	mov	r6, r0
 800f088:	9b07      	ldr	r3, [sp, #28]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d04c      	beq.n	800f128 <_dtoa_r+0x9f8>
 800f08e:	6871      	ldr	r1, [r6, #4]
 800f090:	4620      	mov	r0, r4
 800f092:	f000 fe37 	bl	800fd04 <_Balloc>
 800f096:	6932      	ldr	r2, [r6, #16]
 800f098:	3202      	adds	r2, #2
 800f09a:	4605      	mov	r5, r0
 800f09c:	0092      	lsls	r2, r2, #2
 800f09e:	f106 010c 	add.w	r1, r6, #12
 800f0a2:	300c      	adds	r0, #12
 800f0a4:	f7fd fc52 	bl	800c94c <memcpy>
 800f0a8:	2201      	movs	r2, #1
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f001 f829 	bl	8010104 <__lshift>
 800f0b2:	9b00      	ldr	r3, [sp, #0]
 800f0b4:	f8cd b014 	str.w	fp, [sp, #20]
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	46b1      	mov	r9, r6
 800f0be:	9307      	str	r3, [sp, #28]
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	9804      	ldr	r0, [sp, #16]
 800f0c6:	f7ff faa5 	bl	800e614 <quorem>
 800f0ca:	4649      	mov	r1, r9
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f0d2:	9804      	ldr	r0, [sp, #16]
 800f0d4:	f001 f86a 	bl	80101ac <__mcmp>
 800f0d8:	4632      	mov	r2, r6
 800f0da:	9000      	str	r0, [sp, #0]
 800f0dc:	4639      	mov	r1, r7
 800f0de:	4620      	mov	r0, r4
 800f0e0:	f001 f87e 	bl	80101e0 <__mdiff>
 800f0e4:	68c3      	ldr	r3, [r0, #12]
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	bb03      	cbnz	r3, 800f12c <_dtoa_r+0x9fc>
 800f0ea:	4601      	mov	r1, r0
 800f0ec:	9008      	str	r0, [sp, #32]
 800f0ee:	9804      	ldr	r0, [sp, #16]
 800f0f0:	f001 f85c 	bl	80101ac <__mcmp>
 800f0f4:	9a08      	ldr	r2, [sp, #32]
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	9308      	str	r3, [sp, #32]
 800f0fe:	f000 fe35 	bl	800fd6c <_Bfree>
 800f102:	9b08      	ldr	r3, [sp, #32]
 800f104:	b9a3      	cbnz	r3, 800f130 <_dtoa_r+0xa00>
 800f106:	9a06      	ldr	r2, [sp, #24]
 800f108:	b992      	cbnz	r2, 800f130 <_dtoa_r+0xa00>
 800f10a:	9a07      	ldr	r2, [sp, #28]
 800f10c:	b982      	cbnz	r2, 800f130 <_dtoa_r+0xa00>
 800f10e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f112:	d029      	beq.n	800f168 <_dtoa_r+0xa38>
 800f114:	9b00      	ldr	r3, [sp, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	dd01      	ble.n	800f11e <_dtoa_r+0x9ee>
 800f11a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f11e:	9b05      	ldr	r3, [sp, #20]
 800f120:	1c5d      	adds	r5, r3, #1
 800f122:	f883 8000 	strb.w	r8, [r3]
 800f126:	e782      	b.n	800f02e <_dtoa_r+0x8fe>
 800f128:	4630      	mov	r0, r6
 800f12a:	e7c2      	b.n	800f0b2 <_dtoa_r+0x982>
 800f12c:	2301      	movs	r3, #1
 800f12e:	e7e3      	b.n	800f0f8 <_dtoa_r+0x9c8>
 800f130:	9a00      	ldr	r2, [sp, #0]
 800f132:	2a00      	cmp	r2, #0
 800f134:	db04      	blt.n	800f140 <_dtoa_r+0xa10>
 800f136:	d125      	bne.n	800f184 <_dtoa_r+0xa54>
 800f138:	9a06      	ldr	r2, [sp, #24]
 800f13a:	bb1a      	cbnz	r2, 800f184 <_dtoa_r+0xa54>
 800f13c:	9a07      	ldr	r2, [sp, #28]
 800f13e:	bb0a      	cbnz	r2, 800f184 <_dtoa_r+0xa54>
 800f140:	2b00      	cmp	r3, #0
 800f142:	ddec      	ble.n	800f11e <_dtoa_r+0x9ee>
 800f144:	2201      	movs	r2, #1
 800f146:	9904      	ldr	r1, [sp, #16]
 800f148:	4620      	mov	r0, r4
 800f14a:	f000 ffdb 	bl	8010104 <__lshift>
 800f14e:	4639      	mov	r1, r7
 800f150:	9004      	str	r0, [sp, #16]
 800f152:	f001 f82b 	bl	80101ac <__mcmp>
 800f156:	2800      	cmp	r0, #0
 800f158:	dc03      	bgt.n	800f162 <_dtoa_r+0xa32>
 800f15a:	d1e0      	bne.n	800f11e <_dtoa_r+0x9ee>
 800f15c:	f018 0f01 	tst.w	r8, #1
 800f160:	d0dd      	beq.n	800f11e <_dtoa_r+0x9ee>
 800f162:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f166:	d1d8      	bne.n	800f11a <_dtoa_r+0x9ea>
 800f168:	9b05      	ldr	r3, [sp, #20]
 800f16a:	9a05      	ldr	r2, [sp, #20]
 800f16c:	1c5d      	adds	r5, r3, #1
 800f16e:	2339      	movs	r3, #57	; 0x39
 800f170:	7013      	strb	r3, [r2, #0]
 800f172:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f176:	2b39      	cmp	r3, #57	; 0x39
 800f178:	f105 32ff 	add.w	r2, r5, #4294967295
 800f17c:	d04f      	beq.n	800f21e <_dtoa_r+0xaee>
 800f17e:	3301      	adds	r3, #1
 800f180:	7013      	strb	r3, [r2, #0]
 800f182:	e754      	b.n	800f02e <_dtoa_r+0x8fe>
 800f184:	9a05      	ldr	r2, [sp, #20]
 800f186:	2b00      	cmp	r3, #0
 800f188:	f102 0501 	add.w	r5, r2, #1
 800f18c:	dd06      	ble.n	800f19c <_dtoa_r+0xa6c>
 800f18e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f192:	d0e9      	beq.n	800f168 <_dtoa_r+0xa38>
 800f194:	f108 0801 	add.w	r8, r8, #1
 800f198:	9b05      	ldr	r3, [sp, #20]
 800f19a:	e7c2      	b.n	800f122 <_dtoa_r+0x9f2>
 800f19c:	9a02      	ldr	r2, [sp, #8]
 800f19e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f1a2:	eba5 030b 	sub.w	r3, r5, fp
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d021      	beq.n	800f1ee <_dtoa_r+0xabe>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	220a      	movs	r2, #10
 800f1ae:	9904      	ldr	r1, [sp, #16]
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 fdf2 	bl	800fd9a <__multadd>
 800f1b6:	45b1      	cmp	r9, r6
 800f1b8:	9004      	str	r0, [sp, #16]
 800f1ba:	f04f 0300 	mov.w	r3, #0
 800f1be:	f04f 020a 	mov.w	r2, #10
 800f1c2:	4649      	mov	r1, r9
 800f1c4:	4620      	mov	r0, r4
 800f1c6:	d105      	bne.n	800f1d4 <_dtoa_r+0xaa4>
 800f1c8:	f000 fde7 	bl	800fd9a <__multadd>
 800f1cc:	4681      	mov	r9, r0
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	9505      	str	r5, [sp, #20]
 800f1d2:	e776      	b.n	800f0c2 <_dtoa_r+0x992>
 800f1d4:	f000 fde1 	bl	800fd9a <__multadd>
 800f1d8:	4631      	mov	r1, r6
 800f1da:	4681      	mov	r9, r0
 800f1dc:	2300      	movs	r3, #0
 800f1de:	220a      	movs	r2, #10
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f000 fdda 	bl	800fd9a <__multadd>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	e7f2      	b.n	800f1d0 <_dtoa_r+0xaa0>
 800f1ea:	f04f 0900 	mov.w	r9, #0
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	9904      	ldr	r1, [sp, #16]
 800f1f2:	4620      	mov	r0, r4
 800f1f4:	f000 ff86 	bl	8010104 <__lshift>
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	9004      	str	r0, [sp, #16]
 800f1fc:	f000 ffd6 	bl	80101ac <__mcmp>
 800f200:	2800      	cmp	r0, #0
 800f202:	dcb6      	bgt.n	800f172 <_dtoa_r+0xa42>
 800f204:	d102      	bne.n	800f20c <_dtoa_r+0xadc>
 800f206:	f018 0f01 	tst.w	r8, #1
 800f20a:	d1b2      	bne.n	800f172 <_dtoa_r+0xa42>
 800f20c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f210:	2b30      	cmp	r3, #48	; 0x30
 800f212:	f105 32ff 	add.w	r2, r5, #4294967295
 800f216:	f47f af0a 	bne.w	800f02e <_dtoa_r+0x8fe>
 800f21a:	4615      	mov	r5, r2
 800f21c:	e7f6      	b.n	800f20c <_dtoa_r+0xadc>
 800f21e:	4593      	cmp	fp, r2
 800f220:	d105      	bne.n	800f22e <_dtoa_r+0xafe>
 800f222:	2331      	movs	r3, #49	; 0x31
 800f224:	f10a 0a01 	add.w	sl, sl, #1
 800f228:	f88b 3000 	strb.w	r3, [fp]
 800f22c:	e6ff      	b.n	800f02e <_dtoa_r+0x8fe>
 800f22e:	4615      	mov	r5, r2
 800f230:	e79f      	b.n	800f172 <_dtoa_r+0xa42>
 800f232:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f298 <_dtoa_r+0xb68>
 800f236:	e007      	b.n	800f248 <_dtoa_r+0xb18>
 800f238:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f23a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f29c <_dtoa_r+0xb6c>
 800f23e:	b11b      	cbz	r3, 800f248 <_dtoa_r+0xb18>
 800f240:	f10b 0308 	add.w	r3, fp, #8
 800f244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f246:	6013      	str	r3, [r2, #0]
 800f248:	4658      	mov	r0, fp
 800f24a:	b017      	add	sp, #92	; 0x5c
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	9b06      	ldr	r3, [sp, #24]
 800f252:	2b01      	cmp	r3, #1
 800f254:	f77f ae35 	ble.w	800eec2 <_dtoa_r+0x792>
 800f258:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f25a:	9307      	str	r3, [sp, #28]
 800f25c:	e649      	b.n	800eef2 <_dtoa_r+0x7c2>
 800f25e:	9b02      	ldr	r3, [sp, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	dc03      	bgt.n	800f26c <_dtoa_r+0xb3c>
 800f264:	9b06      	ldr	r3, [sp, #24]
 800f266:	2b02      	cmp	r3, #2
 800f268:	f73f aecc 	bgt.w	800f004 <_dtoa_r+0x8d4>
 800f26c:	465d      	mov	r5, fp
 800f26e:	4639      	mov	r1, r7
 800f270:	9804      	ldr	r0, [sp, #16]
 800f272:	f7ff f9cf 	bl	800e614 <quorem>
 800f276:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f27a:	f805 8b01 	strb.w	r8, [r5], #1
 800f27e:	9a02      	ldr	r2, [sp, #8]
 800f280:	eba5 030b 	sub.w	r3, r5, fp
 800f284:	429a      	cmp	r2, r3
 800f286:	ddb0      	ble.n	800f1ea <_dtoa_r+0xaba>
 800f288:	2300      	movs	r3, #0
 800f28a:	220a      	movs	r2, #10
 800f28c:	9904      	ldr	r1, [sp, #16]
 800f28e:	4620      	mov	r0, r4
 800f290:	f000 fd83 	bl	800fd9a <__multadd>
 800f294:	9004      	str	r0, [sp, #16]
 800f296:	e7ea      	b.n	800f26e <_dtoa_r+0xb3e>
 800f298:	0801143c 	.word	0x0801143c
 800f29c:	080114b8 	.word	0x080114b8

0800f2a0 <__sflush_r>:
 800f2a0:	898a      	ldrh	r2, [r1, #12]
 800f2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a6:	4605      	mov	r5, r0
 800f2a8:	0710      	lsls	r0, r2, #28
 800f2aa:	460c      	mov	r4, r1
 800f2ac:	d458      	bmi.n	800f360 <__sflush_r+0xc0>
 800f2ae:	684b      	ldr	r3, [r1, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	dc05      	bgt.n	800f2c0 <__sflush_r+0x20>
 800f2b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dc02      	bgt.n	800f2c0 <__sflush_r+0x20>
 800f2ba:	2000      	movs	r0, #0
 800f2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2c2:	2e00      	cmp	r6, #0
 800f2c4:	d0f9      	beq.n	800f2ba <__sflush_r+0x1a>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2cc:	682f      	ldr	r7, [r5, #0]
 800f2ce:	6a21      	ldr	r1, [r4, #32]
 800f2d0:	602b      	str	r3, [r5, #0]
 800f2d2:	d032      	beq.n	800f33a <__sflush_r+0x9a>
 800f2d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2d6:	89a3      	ldrh	r3, [r4, #12]
 800f2d8:	075a      	lsls	r2, r3, #29
 800f2da:	d505      	bpl.n	800f2e8 <__sflush_r+0x48>
 800f2dc:	6863      	ldr	r3, [r4, #4]
 800f2de:	1ac0      	subs	r0, r0, r3
 800f2e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2e2:	b10b      	cbz	r3, 800f2e8 <__sflush_r+0x48>
 800f2e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2e6:	1ac0      	subs	r0, r0, r3
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ee:	6a21      	ldr	r1, [r4, #32]
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	47b0      	blx	r6
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	89a3      	ldrh	r3, [r4, #12]
 800f2f8:	d106      	bne.n	800f308 <__sflush_r+0x68>
 800f2fa:	6829      	ldr	r1, [r5, #0]
 800f2fc:	291d      	cmp	r1, #29
 800f2fe:	d848      	bhi.n	800f392 <__sflush_r+0xf2>
 800f300:	4a29      	ldr	r2, [pc, #164]	; (800f3a8 <__sflush_r+0x108>)
 800f302:	40ca      	lsrs	r2, r1
 800f304:	07d6      	lsls	r6, r2, #31
 800f306:	d544      	bpl.n	800f392 <__sflush_r+0xf2>
 800f308:	2200      	movs	r2, #0
 800f30a:	6062      	str	r2, [r4, #4]
 800f30c:	04d9      	lsls	r1, r3, #19
 800f30e:	6922      	ldr	r2, [r4, #16]
 800f310:	6022      	str	r2, [r4, #0]
 800f312:	d504      	bpl.n	800f31e <__sflush_r+0x7e>
 800f314:	1c42      	adds	r2, r0, #1
 800f316:	d101      	bne.n	800f31c <__sflush_r+0x7c>
 800f318:	682b      	ldr	r3, [r5, #0]
 800f31a:	b903      	cbnz	r3, 800f31e <__sflush_r+0x7e>
 800f31c:	6560      	str	r0, [r4, #84]	; 0x54
 800f31e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f320:	602f      	str	r7, [r5, #0]
 800f322:	2900      	cmp	r1, #0
 800f324:	d0c9      	beq.n	800f2ba <__sflush_r+0x1a>
 800f326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f32a:	4299      	cmp	r1, r3
 800f32c:	d002      	beq.n	800f334 <__sflush_r+0x94>
 800f32e:	4628      	mov	r0, r5
 800f330:	f001 f8f6 	bl	8010520 <_free_r>
 800f334:	2000      	movs	r0, #0
 800f336:	6360      	str	r0, [r4, #52]	; 0x34
 800f338:	e7c0      	b.n	800f2bc <__sflush_r+0x1c>
 800f33a:	2301      	movs	r3, #1
 800f33c:	4628      	mov	r0, r5
 800f33e:	47b0      	blx	r6
 800f340:	1c41      	adds	r1, r0, #1
 800f342:	d1c8      	bne.n	800f2d6 <__sflush_r+0x36>
 800f344:	682b      	ldr	r3, [r5, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0c5      	beq.n	800f2d6 <__sflush_r+0x36>
 800f34a:	2b1d      	cmp	r3, #29
 800f34c:	d001      	beq.n	800f352 <__sflush_r+0xb2>
 800f34e:	2b16      	cmp	r3, #22
 800f350:	d101      	bne.n	800f356 <__sflush_r+0xb6>
 800f352:	602f      	str	r7, [r5, #0]
 800f354:	e7b1      	b.n	800f2ba <__sflush_r+0x1a>
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f35c:	81a3      	strh	r3, [r4, #12]
 800f35e:	e7ad      	b.n	800f2bc <__sflush_r+0x1c>
 800f360:	690f      	ldr	r7, [r1, #16]
 800f362:	2f00      	cmp	r7, #0
 800f364:	d0a9      	beq.n	800f2ba <__sflush_r+0x1a>
 800f366:	0793      	lsls	r3, r2, #30
 800f368:	680e      	ldr	r6, [r1, #0]
 800f36a:	bf08      	it	eq
 800f36c:	694b      	ldreq	r3, [r1, #20]
 800f36e:	600f      	str	r7, [r1, #0]
 800f370:	bf18      	it	ne
 800f372:	2300      	movne	r3, #0
 800f374:	eba6 0807 	sub.w	r8, r6, r7
 800f378:	608b      	str	r3, [r1, #8]
 800f37a:	f1b8 0f00 	cmp.w	r8, #0
 800f37e:	dd9c      	ble.n	800f2ba <__sflush_r+0x1a>
 800f380:	4643      	mov	r3, r8
 800f382:	463a      	mov	r2, r7
 800f384:	6a21      	ldr	r1, [r4, #32]
 800f386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f388:	4628      	mov	r0, r5
 800f38a:	47b0      	blx	r6
 800f38c:	2800      	cmp	r0, #0
 800f38e:	dc06      	bgt.n	800f39e <__sflush_r+0xfe>
 800f390:	89a3      	ldrh	r3, [r4, #12]
 800f392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f396:	81a3      	strh	r3, [r4, #12]
 800f398:	f04f 30ff 	mov.w	r0, #4294967295
 800f39c:	e78e      	b.n	800f2bc <__sflush_r+0x1c>
 800f39e:	4407      	add	r7, r0
 800f3a0:	eba8 0800 	sub.w	r8, r8, r0
 800f3a4:	e7e9      	b.n	800f37a <__sflush_r+0xda>
 800f3a6:	bf00      	nop
 800f3a8:	20400001 	.word	0x20400001

0800f3ac <_fflush_r>:
 800f3ac:	b538      	push	{r3, r4, r5, lr}
 800f3ae:	690b      	ldr	r3, [r1, #16]
 800f3b0:	4605      	mov	r5, r0
 800f3b2:	460c      	mov	r4, r1
 800f3b4:	b1db      	cbz	r3, 800f3ee <_fflush_r+0x42>
 800f3b6:	b118      	cbz	r0, 800f3c0 <_fflush_r+0x14>
 800f3b8:	6983      	ldr	r3, [r0, #24]
 800f3ba:	b90b      	cbnz	r3, 800f3c0 <_fflush_r+0x14>
 800f3bc:	f000 f860 	bl	800f480 <__sinit>
 800f3c0:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <_fflush_r+0x48>)
 800f3c2:	429c      	cmp	r4, r3
 800f3c4:	d109      	bne.n	800f3da <_fflush_r+0x2e>
 800f3c6:	686c      	ldr	r4, [r5, #4]
 800f3c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3cc:	b17b      	cbz	r3, 800f3ee <_fflush_r+0x42>
 800f3ce:	4621      	mov	r1, r4
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3d6:	f7ff bf63 	b.w	800f2a0 <__sflush_r>
 800f3da:	4b07      	ldr	r3, [pc, #28]	; (800f3f8 <_fflush_r+0x4c>)
 800f3dc:	429c      	cmp	r4, r3
 800f3de:	d101      	bne.n	800f3e4 <_fflush_r+0x38>
 800f3e0:	68ac      	ldr	r4, [r5, #8]
 800f3e2:	e7f1      	b.n	800f3c8 <_fflush_r+0x1c>
 800f3e4:	4b05      	ldr	r3, [pc, #20]	; (800f3fc <_fflush_r+0x50>)
 800f3e6:	429c      	cmp	r4, r3
 800f3e8:	bf08      	it	eq
 800f3ea:	68ec      	ldreq	r4, [r5, #12]
 800f3ec:	e7ec      	b.n	800f3c8 <_fflush_r+0x1c>
 800f3ee:	2000      	movs	r0, #0
 800f3f0:	bd38      	pop	{r3, r4, r5, pc}
 800f3f2:	bf00      	nop
 800f3f4:	080114e8 	.word	0x080114e8
 800f3f8:	08011508 	.word	0x08011508
 800f3fc:	080114c8 	.word	0x080114c8

0800f400 <std>:
 800f400:	2300      	movs	r3, #0
 800f402:	b510      	push	{r4, lr}
 800f404:	4604      	mov	r4, r0
 800f406:	e9c0 3300 	strd	r3, r3, [r0]
 800f40a:	6083      	str	r3, [r0, #8]
 800f40c:	8181      	strh	r1, [r0, #12]
 800f40e:	6643      	str	r3, [r0, #100]	; 0x64
 800f410:	81c2      	strh	r2, [r0, #14]
 800f412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f416:	6183      	str	r3, [r0, #24]
 800f418:	4619      	mov	r1, r3
 800f41a:	2208      	movs	r2, #8
 800f41c:	305c      	adds	r0, #92	; 0x5c
 800f41e:	f7fd faa0 	bl	800c962 <memset>
 800f422:	4b05      	ldr	r3, [pc, #20]	; (800f438 <std+0x38>)
 800f424:	6263      	str	r3, [r4, #36]	; 0x24
 800f426:	4b05      	ldr	r3, [pc, #20]	; (800f43c <std+0x3c>)
 800f428:	62a3      	str	r3, [r4, #40]	; 0x28
 800f42a:	4b05      	ldr	r3, [pc, #20]	; (800f440 <std+0x40>)
 800f42c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f42e:	4b05      	ldr	r3, [pc, #20]	; (800f444 <std+0x44>)
 800f430:	6224      	str	r4, [r4, #32]
 800f432:	6323      	str	r3, [r4, #48]	; 0x30
 800f434:	bd10      	pop	{r4, pc}
 800f436:	bf00      	nop
 800f438:	08010bb5 	.word	0x08010bb5
 800f43c:	08010bd7 	.word	0x08010bd7
 800f440:	08010c0f 	.word	0x08010c0f
 800f444:	08010c33 	.word	0x08010c33

0800f448 <_cleanup_r>:
 800f448:	4901      	ldr	r1, [pc, #4]	; (800f450 <_cleanup_r+0x8>)
 800f44a:	f000 b885 	b.w	800f558 <_fwalk_reent>
 800f44e:	bf00      	nop
 800f450:	0800f3ad 	.word	0x0800f3ad

0800f454 <__sfmoreglue>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	1e4a      	subs	r2, r1, #1
 800f458:	2568      	movs	r5, #104	; 0x68
 800f45a:	4355      	muls	r5, r2
 800f45c:	460e      	mov	r6, r1
 800f45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f462:	f001 f8ab 	bl	80105bc <_malloc_r>
 800f466:	4604      	mov	r4, r0
 800f468:	b140      	cbz	r0, 800f47c <__sfmoreglue+0x28>
 800f46a:	2100      	movs	r1, #0
 800f46c:	e9c0 1600 	strd	r1, r6, [r0]
 800f470:	300c      	adds	r0, #12
 800f472:	60a0      	str	r0, [r4, #8]
 800f474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f478:	f7fd fa73 	bl	800c962 <memset>
 800f47c:	4620      	mov	r0, r4
 800f47e:	bd70      	pop	{r4, r5, r6, pc}

0800f480 <__sinit>:
 800f480:	6983      	ldr	r3, [r0, #24]
 800f482:	b510      	push	{r4, lr}
 800f484:	4604      	mov	r4, r0
 800f486:	bb33      	cbnz	r3, 800f4d6 <__sinit+0x56>
 800f488:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f48c:	6503      	str	r3, [r0, #80]	; 0x50
 800f48e:	4b12      	ldr	r3, [pc, #72]	; (800f4d8 <__sinit+0x58>)
 800f490:	4a12      	ldr	r2, [pc, #72]	; (800f4dc <__sinit+0x5c>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	6282      	str	r2, [r0, #40]	; 0x28
 800f496:	4298      	cmp	r0, r3
 800f498:	bf04      	itt	eq
 800f49a:	2301      	moveq	r3, #1
 800f49c:	6183      	streq	r3, [r0, #24]
 800f49e:	f000 f81f 	bl	800f4e0 <__sfp>
 800f4a2:	6060      	str	r0, [r4, #4]
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f000 f81b 	bl	800f4e0 <__sfp>
 800f4aa:	60a0      	str	r0, [r4, #8]
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f000 f817 	bl	800f4e0 <__sfp>
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	60e0      	str	r0, [r4, #12]
 800f4b6:	2104      	movs	r1, #4
 800f4b8:	6860      	ldr	r0, [r4, #4]
 800f4ba:	f7ff ffa1 	bl	800f400 <std>
 800f4be:	2201      	movs	r2, #1
 800f4c0:	2109      	movs	r1, #9
 800f4c2:	68a0      	ldr	r0, [r4, #8]
 800f4c4:	f7ff ff9c 	bl	800f400 <std>
 800f4c8:	2202      	movs	r2, #2
 800f4ca:	2112      	movs	r1, #18
 800f4cc:	68e0      	ldr	r0, [r4, #12]
 800f4ce:	f7ff ff97 	bl	800f400 <std>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	61a3      	str	r3, [r4, #24]
 800f4d6:	bd10      	pop	{r4, pc}
 800f4d8:	08011428 	.word	0x08011428
 800f4dc:	0800f449 	.word	0x0800f449

0800f4e0 <__sfp>:
 800f4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4e2:	4b1b      	ldr	r3, [pc, #108]	; (800f550 <__sfp+0x70>)
 800f4e4:	681e      	ldr	r6, [r3, #0]
 800f4e6:	69b3      	ldr	r3, [r6, #24]
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	b913      	cbnz	r3, 800f4f2 <__sfp+0x12>
 800f4ec:	4630      	mov	r0, r6
 800f4ee:	f7ff ffc7 	bl	800f480 <__sinit>
 800f4f2:	3648      	adds	r6, #72	; 0x48
 800f4f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	d503      	bpl.n	800f504 <__sfp+0x24>
 800f4fc:	6833      	ldr	r3, [r6, #0]
 800f4fe:	b133      	cbz	r3, 800f50e <__sfp+0x2e>
 800f500:	6836      	ldr	r6, [r6, #0]
 800f502:	e7f7      	b.n	800f4f4 <__sfp+0x14>
 800f504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f508:	b16d      	cbz	r5, 800f526 <__sfp+0x46>
 800f50a:	3468      	adds	r4, #104	; 0x68
 800f50c:	e7f4      	b.n	800f4f8 <__sfp+0x18>
 800f50e:	2104      	movs	r1, #4
 800f510:	4638      	mov	r0, r7
 800f512:	f7ff ff9f 	bl	800f454 <__sfmoreglue>
 800f516:	6030      	str	r0, [r6, #0]
 800f518:	2800      	cmp	r0, #0
 800f51a:	d1f1      	bne.n	800f500 <__sfp+0x20>
 800f51c:	230c      	movs	r3, #12
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	4604      	mov	r4, r0
 800f522:	4620      	mov	r0, r4
 800f524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f526:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <__sfp+0x74>)
 800f528:	6665      	str	r5, [r4, #100]	; 0x64
 800f52a:	e9c4 5500 	strd	r5, r5, [r4]
 800f52e:	60a5      	str	r5, [r4, #8]
 800f530:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f534:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f538:	2208      	movs	r2, #8
 800f53a:	4629      	mov	r1, r5
 800f53c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f540:	f7fd fa0f 	bl	800c962 <memset>
 800f544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f54c:	e7e9      	b.n	800f522 <__sfp+0x42>
 800f54e:	bf00      	nop
 800f550:	08011428 	.word	0x08011428
 800f554:	ffff0001 	.word	0xffff0001

0800f558 <_fwalk_reent>:
 800f558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f55c:	4680      	mov	r8, r0
 800f55e:	4689      	mov	r9, r1
 800f560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f564:	2600      	movs	r6, #0
 800f566:	b914      	cbnz	r4, 800f56e <_fwalk_reent+0x16>
 800f568:	4630      	mov	r0, r6
 800f56a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f56e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f572:	3f01      	subs	r7, #1
 800f574:	d501      	bpl.n	800f57a <_fwalk_reent+0x22>
 800f576:	6824      	ldr	r4, [r4, #0]
 800f578:	e7f5      	b.n	800f566 <_fwalk_reent+0xe>
 800f57a:	89ab      	ldrh	r3, [r5, #12]
 800f57c:	2b01      	cmp	r3, #1
 800f57e:	d907      	bls.n	800f590 <_fwalk_reent+0x38>
 800f580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f584:	3301      	adds	r3, #1
 800f586:	d003      	beq.n	800f590 <_fwalk_reent+0x38>
 800f588:	4629      	mov	r1, r5
 800f58a:	4640      	mov	r0, r8
 800f58c:	47c8      	blx	r9
 800f58e:	4306      	orrs	r6, r0
 800f590:	3568      	adds	r5, #104	; 0x68
 800f592:	e7ee      	b.n	800f572 <_fwalk_reent+0x1a>

0800f594 <rshift>:
 800f594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f596:	6906      	ldr	r6, [r0, #16]
 800f598:	114b      	asrs	r3, r1, #5
 800f59a:	429e      	cmp	r6, r3
 800f59c:	f100 0414 	add.w	r4, r0, #20
 800f5a0:	dd30      	ble.n	800f604 <rshift+0x70>
 800f5a2:	f011 011f 	ands.w	r1, r1, #31
 800f5a6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800f5aa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800f5ae:	d108      	bne.n	800f5c2 <rshift+0x2e>
 800f5b0:	4621      	mov	r1, r4
 800f5b2:	42b2      	cmp	r2, r6
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	d211      	bcs.n	800f5dc <rshift+0x48>
 800f5b8:	f852 3b04 	ldr.w	r3, [r2], #4
 800f5bc:	f841 3b04 	str.w	r3, [r1], #4
 800f5c0:	e7f7      	b.n	800f5b2 <rshift+0x1e>
 800f5c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800f5c6:	f1c1 0c20 	rsb	ip, r1, #32
 800f5ca:	40cd      	lsrs	r5, r1
 800f5cc:	3204      	adds	r2, #4
 800f5ce:	4623      	mov	r3, r4
 800f5d0:	42b2      	cmp	r2, r6
 800f5d2:	4617      	mov	r7, r2
 800f5d4:	d30c      	bcc.n	800f5f0 <rshift+0x5c>
 800f5d6:	601d      	str	r5, [r3, #0]
 800f5d8:	b105      	cbz	r5, 800f5dc <rshift+0x48>
 800f5da:	3304      	adds	r3, #4
 800f5dc:	1b1a      	subs	r2, r3, r4
 800f5de:	42a3      	cmp	r3, r4
 800f5e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f5e4:	bf08      	it	eq
 800f5e6:	2300      	moveq	r3, #0
 800f5e8:	6102      	str	r2, [r0, #16]
 800f5ea:	bf08      	it	eq
 800f5ec:	6143      	streq	r3, [r0, #20]
 800f5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5f0:	683f      	ldr	r7, [r7, #0]
 800f5f2:	fa07 f70c 	lsl.w	r7, r7, ip
 800f5f6:	433d      	orrs	r5, r7
 800f5f8:	f843 5b04 	str.w	r5, [r3], #4
 800f5fc:	f852 5b04 	ldr.w	r5, [r2], #4
 800f600:	40cd      	lsrs	r5, r1
 800f602:	e7e5      	b.n	800f5d0 <rshift+0x3c>
 800f604:	4623      	mov	r3, r4
 800f606:	e7e9      	b.n	800f5dc <rshift+0x48>

0800f608 <__hexdig_fun>:
 800f608:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f60c:	2b09      	cmp	r3, #9
 800f60e:	d802      	bhi.n	800f616 <__hexdig_fun+0xe>
 800f610:	3820      	subs	r0, #32
 800f612:	b2c0      	uxtb	r0, r0
 800f614:	4770      	bx	lr
 800f616:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f61a:	2b05      	cmp	r3, #5
 800f61c:	d801      	bhi.n	800f622 <__hexdig_fun+0x1a>
 800f61e:	3847      	subs	r0, #71	; 0x47
 800f620:	e7f7      	b.n	800f612 <__hexdig_fun+0xa>
 800f622:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f626:	2b05      	cmp	r3, #5
 800f628:	d801      	bhi.n	800f62e <__hexdig_fun+0x26>
 800f62a:	3827      	subs	r0, #39	; 0x27
 800f62c:	e7f1      	b.n	800f612 <__hexdig_fun+0xa>
 800f62e:	2000      	movs	r0, #0
 800f630:	4770      	bx	lr

0800f632 <__gethex>:
 800f632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f636:	b08b      	sub	sp, #44	; 0x2c
 800f638:	468a      	mov	sl, r1
 800f63a:	9002      	str	r0, [sp, #8]
 800f63c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f63e:	9306      	str	r3, [sp, #24]
 800f640:	4690      	mov	r8, r2
 800f642:	f000 fad0 	bl	800fbe6 <__localeconv_l>
 800f646:	6803      	ldr	r3, [r0, #0]
 800f648:	9303      	str	r3, [sp, #12]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f0 fdc0 	bl	80001d0 <strlen>
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	9001      	str	r0, [sp, #4]
 800f654:	4403      	add	r3, r0
 800f656:	f04f 0b00 	mov.w	fp, #0
 800f65a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f65e:	9307      	str	r3, [sp, #28]
 800f660:	f8da 3000 	ldr.w	r3, [sl]
 800f664:	3302      	adds	r3, #2
 800f666:	461f      	mov	r7, r3
 800f668:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f66c:	2830      	cmp	r0, #48	; 0x30
 800f66e:	d06c      	beq.n	800f74a <__gethex+0x118>
 800f670:	f7ff ffca 	bl	800f608 <__hexdig_fun>
 800f674:	4604      	mov	r4, r0
 800f676:	2800      	cmp	r0, #0
 800f678:	d16a      	bne.n	800f750 <__gethex+0x11e>
 800f67a:	9a01      	ldr	r2, [sp, #4]
 800f67c:	9903      	ldr	r1, [sp, #12]
 800f67e:	4638      	mov	r0, r7
 800f680:	f001 fadb 	bl	8010c3a <strncmp>
 800f684:	2800      	cmp	r0, #0
 800f686:	d166      	bne.n	800f756 <__gethex+0x124>
 800f688:	9b01      	ldr	r3, [sp, #4]
 800f68a:	5cf8      	ldrb	r0, [r7, r3]
 800f68c:	18fe      	adds	r6, r7, r3
 800f68e:	f7ff ffbb 	bl	800f608 <__hexdig_fun>
 800f692:	2800      	cmp	r0, #0
 800f694:	d062      	beq.n	800f75c <__gethex+0x12a>
 800f696:	4633      	mov	r3, r6
 800f698:	7818      	ldrb	r0, [r3, #0]
 800f69a:	2830      	cmp	r0, #48	; 0x30
 800f69c:	461f      	mov	r7, r3
 800f69e:	f103 0301 	add.w	r3, r3, #1
 800f6a2:	d0f9      	beq.n	800f698 <__gethex+0x66>
 800f6a4:	f7ff ffb0 	bl	800f608 <__hexdig_fun>
 800f6a8:	fab0 f580 	clz	r5, r0
 800f6ac:	096d      	lsrs	r5, r5, #5
 800f6ae:	4634      	mov	r4, r6
 800f6b0:	f04f 0b01 	mov.w	fp, #1
 800f6b4:	463a      	mov	r2, r7
 800f6b6:	4616      	mov	r6, r2
 800f6b8:	3201      	adds	r2, #1
 800f6ba:	7830      	ldrb	r0, [r6, #0]
 800f6bc:	f7ff ffa4 	bl	800f608 <__hexdig_fun>
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d1f8      	bne.n	800f6b6 <__gethex+0x84>
 800f6c4:	9a01      	ldr	r2, [sp, #4]
 800f6c6:	9903      	ldr	r1, [sp, #12]
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f001 fab6 	bl	8010c3a <strncmp>
 800f6ce:	b950      	cbnz	r0, 800f6e6 <__gethex+0xb4>
 800f6d0:	b954      	cbnz	r4, 800f6e8 <__gethex+0xb6>
 800f6d2:	9b01      	ldr	r3, [sp, #4]
 800f6d4:	18f4      	adds	r4, r6, r3
 800f6d6:	4622      	mov	r2, r4
 800f6d8:	4616      	mov	r6, r2
 800f6da:	3201      	adds	r2, #1
 800f6dc:	7830      	ldrb	r0, [r6, #0]
 800f6de:	f7ff ff93 	bl	800f608 <__hexdig_fun>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d1f8      	bne.n	800f6d8 <__gethex+0xa6>
 800f6e6:	b10c      	cbz	r4, 800f6ec <__gethex+0xba>
 800f6e8:	1ba4      	subs	r4, r4, r6
 800f6ea:	00a4      	lsls	r4, r4, #2
 800f6ec:	7833      	ldrb	r3, [r6, #0]
 800f6ee:	2b50      	cmp	r3, #80	; 0x50
 800f6f0:	d001      	beq.n	800f6f6 <__gethex+0xc4>
 800f6f2:	2b70      	cmp	r3, #112	; 0x70
 800f6f4:	d140      	bne.n	800f778 <__gethex+0x146>
 800f6f6:	7873      	ldrb	r3, [r6, #1]
 800f6f8:	2b2b      	cmp	r3, #43	; 0x2b
 800f6fa:	d031      	beq.n	800f760 <__gethex+0x12e>
 800f6fc:	2b2d      	cmp	r3, #45	; 0x2d
 800f6fe:	d033      	beq.n	800f768 <__gethex+0x136>
 800f700:	1c71      	adds	r1, r6, #1
 800f702:	f04f 0900 	mov.w	r9, #0
 800f706:	7808      	ldrb	r0, [r1, #0]
 800f708:	f7ff ff7e 	bl	800f608 <__hexdig_fun>
 800f70c:	1e43      	subs	r3, r0, #1
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b18      	cmp	r3, #24
 800f712:	d831      	bhi.n	800f778 <__gethex+0x146>
 800f714:	f1a0 0210 	sub.w	r2, r0, #16
 800f718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f71c:	f7ff ff74 	bl	800f608 <__hexdig_fun>
 800f720:	1e43      	subs	r3, r0, #1
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b18      	cmp	r3, #24
 800f726:	d922      	bls.n	800f76e <__gethex+0x13c>
 800f728:	f1b9 0f00 	cmp.w	r9, #0
 800f72c:	d000      	beq.n	800f730 <__gethex+0xfe>
 800f72e:	4252      	negs	r2, r2
 800f730:	4414      	add	r4, r2
 800f732:	f8ca 1000 	str.w	r1, [sl]
 800f736:	b30d      	cbz	r5, 800f77c <__gethex+0x14a>
 800f738:	f1bb 0f00 	cmp.w	fp, #0
 800f73c:	bf0c      	ite	eq
 800f73e:	2706      	moveq	r7, #6
 800f740:	2700      	movne	r7, #0
 800f742:	4638      	mov	r0, r7
 800f744:	b00b      	add	sp, #44	; 0x2c
 800f746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f74a:	f10b 0b01 	add.w	fp, fp, #1
 800f74e:	e78a      	b.n	800f666 <__gethex+0x34>
 800f750:	2500      	movs	r5, #0
 800f752:	462c      	mov	r4, r5
 800f754:	e7ae      	b.n	800f6b4 <__gethex+0x82>
 800f756:	463e      	mov	r6, r7
 800f758:	2501      	movs	r5, #1
 800f75a:	e7c7      	b.n	800f6ec <__gethex+0xba>
 800f75c:	4604      	mov	r4, r0
 800f75e:	e7fb      	b.n	800f758 <__gethex+0x126>
 800f760:	f04f 0900 	mov.w	r9, #0
 800f764:	1cb1      	adds	r1, r6, #2
 800f766:	e7ce      	b.n	800f706 <__gethex+0xd4>
 800f768:	f04f 0901 	mov.w	r9, #1
 800f76c:	e7fa      	b.n	800f764 <__gethex+0x132>
 800f76e:	230a      	movs	r3, #10
 800f770:	fb03 0202 	mla	r2, r3, r2, r0
 800f774:	3a10      	subs	r2, #16
 800f776:	e7cf      	b.n	800f718 <__gethex+0xe6>
 800f778:	4631      	mov	r1, r6
 800f77a:	e7da      	b.n	800f732 <__gethex+0x100>
 800f77c:	1bf3      	subs	r3, r6, r7
 800f77e:	3b01      	subs	r3, #1
 800f780:	4629      	mov	r1, r5
 800f782:	2b07      	cmp	r3, #7
 800f784:	dc49      	bgt.n	800f81a <__gethex+0x1e8>
 800f786:	9802      	ldr	r0, [sp, #8]
 800f788:	f000 fabc 	bl	800fd04 <_Balloc>
 800f78c:	9b01      	ldr	r3, [sp, #4]
 800f78e:	f100 0914 	add.w	r9, r0, #20
 800f792:	f04f 0b00 	mov.w	fp, #0
 800f796:	f1c3 0301 	rsb	r3, r3, #1
 800f79a:	4605      	mov	r5, r0
 800f79c:	f8cd 9010 	str.w	r9, [sp, #16]
 800f7a0:	46da      	mov	sl, fp
 800f7a2:	9308      	str	r3, [sp, #32]
 800f7a4:	42b7      	cmp	r7, r6
 800f7a6:	d33b      	bcc.n	800f820 <__gethex+0x1ee>
 800f7a8:	9804      	ldr	r0, [sp, #16]
 800f7aa:	f840 ab04 	str.w	sl, [r0], #4
 800f7ae:	eba0 0009 	sub.w	r0, r0, r9
 800f7b2:	1080      	asrs	r0, r0, #2
 800f7b4:	6128      	str	r0, [r5, #16]
 800f7b6:	0147      	lsls	r7, r0, #5
 800f7b8:	4650      	mov	r0, sl
 800f7ba:	f000 fb67 	bl	800fe8c <__hi0bits>
 800f7be:	f8d8 6000 	ldr.w	r6, [r8]
 800f7c2:	1a3f      	subs	r7, r7, r0
 800f7c4:	42b7      	cmp	r7, r6
 800f7c6:	dd64      	ble.n	800f892 <__gethex+0x260>
 800f7c8:	1bbf      	subs	r7, r7, r6
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	4628      	mov	r0, r5
 800f7ce:	f000 fe77 	bl	80104c0 <__any_on>
 800f7d2:	4682      	mov	sl, r0
 800f7d4:	b178      	cbz	r0, 800f7f6 <__gethex+0x1c4>
 800f7d6:	1e7b      	subs	r3, r7, #1
 800f7d8:	1159      	asrs	r1, r3, #5
 800f7da:	f003 021f 	and.w	r2, r3, #31
 800f7de:	f04f 0a01 	mov.w	sl, #1
 800f7e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f7e6:	fa0a f202 	lsl.w	r2, sl, r2
 800f7ea:	420a      	tst	r2, r1
 800f7ec:	d003      	beq.n	800f7f6 <__gethex+0x1c4>
 800f7ee:	4553      	cmp	r3, sl
 800f7f0:	dc46      	bgt.n	800f880 <__gethex+0x24e>
 800f7f2:	f04f 0a02 	mov.w	sl, #2
 800f7f6:	4639      	mov	r1, r7
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	f7ff fecb 	bl	800f594 <rshift>
 800f7fe:	443c      	add	r4, r7
 800f800:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f804:	42a3      	cmp	r3, r4
 800f806:	da52      	bge.n	800f8ae <__gethex+0x27c>
 800f808:	4629      	mov	r1, r5
 800f80a:	9802      	ldr	r0, [sp, #8]
 800f80c:	f000 faae 	bl	800fd6c <_Bfree>
 800f810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f812:	2300      	movs	r3, #0
 800f814:	6013      	str	r3, [r2, #0]
 800f816:	27a3      	movs	r7, #163	; 0xa3
 800f818:	e793      	b.n	800f742 <__gethex+0x110>
 800f81a:	3101      	adds	r1, #1
 800f81c:	105b      	asrs	r3, r3, #1
 800f81e:	e7b0      	b.n	800f782 <__gethex+0x150>
 800f820:	1e73      	subs	r3, r6, #1
 800f822:	9305      	str	r3, [sp, #20]
 800f824:	9a07      	ldr	r2, [sp, #28]
 800f826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d018      	beq.n	800f860 <__gethex+0x22e>
 800f82e:	f1bb 0f20 	cmp.w	fp, #32
 800f832:	d107      	bne.n	800f844 <__gethex+0x212>
 800f834:	9b04      	ldr	r3, [sp, #16]
 800f836:	f8c3 a000 	str.w	sl, [r3]
 800f83a:	3304      	adds	r3, #4
 800f83c:	f04f 0a00 	mov.w	sl, #0
 800f840:	9304      	str	r3, [sp, #16]
 800f842:	46d3      	mov	fp, sl
 800f844:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f848:	f7ff fede 	bl	800f608 <__hexdig_fun>
 800f84c:	f000 000f 	and.w	r0, r0, #15
 800f850:	fa00 f00b 	lsl.w	r0, r0, fp
 800f854:	ea4a 0a00 	orr.w	sl, sl, r0
 800f858:	f10b 0b04 	add.w	fp, fp, #4
 800f85c:	9b05      	ldr	r3, [sp, #20]
 800f85e:	e00d      	b.n	800f87c <__gethex+0x24a>
 800f860:	9b05      	ldr	r3, [sp, #20]
 800f862:	9a08      	ldr	r2, [sp, #32]
 800f864:	4413      	add	r3, r2
 800f866:	42bb      	cmp	r3, r7
 800f868:	d3e1      	bcc.n	800f82e <__gethex+0x1fc>
 800f86a:	4618      	mov	r0, r3
 800f86c:	9a01      	ldr	r2, [sp, #4]
 800f86e:	9903      	ldr	r1, [sp, #12]
 800f870:	9309      	str	r3, [sp, #36]	; 0x24
 800f872:	f001 f9e2 	bl	8010c3a <strncmp>
 800f876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f878:	2800      	cmp	r0, #0
 800f87a:	d1d8      	bne.n	800f82e <__gethex+0x1fc>
 800f87c:	461e      	mov	r6, r3
 800f87e:	e791      	b.n	800f7a4 <__gethex+0x172>
 800f880:	1eb9      	subs	r1, r7, #2
 800f882:	4628      	mov	r0, r5
 800f884:	f000 fe1c 	bl	80104c0 <__any_on>
 800f888:	2800      	cmp	r0, #0
 800f88a:	d0b2      	beq.n	800f7f2 <__gethex+0x1c0>
 800f88c:	f04f 0a03 	mov.w	sl, #3
 800f890:	e7b1      	b.n	800f7f6 <__gethex+0x1c4>
 800f892:	da09      	bge.n	800f8a8 <__gethex+0x276>
 800f894:	1bf7      	subs	r7, r6, r7
 800f896:	4629      	mov	r1, r5
 800f898:	463a      	mov	r2, r7
 800f89a:	9802      	ldr	r0, [sp, #8]
 800f89c:	f000 fc32 	bl	8010104 <__lshift>
 800f8a0:	1be4      	subs	r4, r4, r7
 800f8a2:	4605      	mov	r5, r0
 800f8a4:	f100 0914 	add.w	r9, r0, #20
 800f8a8:	f04f 0a00 	mov.w	sl, #0
 800f8ac:	e7a8      	b.n	800f800 <__gethex+0x1ce>
 800f8ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f8b2:	42a0      	cmp	r0, r4
 800f8b4:	dd6a      	ble.n	800f98c <__gethex+0x35a>
 800f8b6:	1b04      	subs	r4, r0, r4
 800f8b8:	42a6      	cmp	r6, r4
 800f8ba:	dc2e      	bgt.n	800f91a <__gethex+0x2e8>
 800f8bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d022      	beq.n	800f90a <__gethex+0x2d8>
 800f8c4:	2b03      	cmp	r3, #3
 800f8c6:	d024      	beq.n	800f912 <__gethex+0x2e0>
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d115      	bne.n	800f8f8 <__gethex+0x2c6>
 800f8cc:	42a6      	cmp	r6, r4
 800f8ce:	d113      	bne.n	800f8f8 <__gethex+0x2c6>
 800f8d0:	2e01      	cmp	r6, #1
 800f8d2:	dc0b      	bgt.n	800f8ec <__gethex+0x2ba>
 800f8d4:	9a06      	ldr	r2, [sp, #24]
 800f8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f8da:	6013      	str	r3, [r2, #0]
 800f8dc:	2301      	movs	r3, #1
 800f8de:	612b      	str	r3, [r5, #16]
 800f8e0:	f8c9 3000 	str.w	r3, [r9]
 800f8e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8e6:	2762      	movs	r7, #98	; 0x62
 800f8e8:	601d      	str	r5, [r3, #0]
 800f8ea:	e72a      	b.n	800f742 <__gethex+0x110>
 800f8ec:	1e71      	subs	r1, r6, #1
 800f8ee:	4628      	mov	r0, r5
 800f8f0:	f000 fde6 	bl	80104c0 <__any_on>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d1ed      	bne.n	800f8d4 <__gethex+0x2a2>
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	9802      	ldr	r0, [sp, #8]
 800f8fc:	f000 fa36 	bl	800fd6c <_Bfree>
 800f900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f902:	2300      	movs	r3, #0
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	2750      	movs	r7, #80	; 0x50
 800f908:	e71b      	b.n	800f742 <__gethex+0x110>
 800f90a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0e1      	beq.n	800f8d4 <__gethex+0x2a2>
 800f910:	e7f2      	b.n	800f8f8 <__gethex+0x2c6>
 800f912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f914:	2b00      	cmp	r3, #0
 800f916:	d1dd      	bne.n	800f8d4 <__gethex+0x2a2>
 800f918:	e7ee      	b.n	800f8f8 <__gethex+0x2c6>
 800f91a:	1e67      	subs	r7, r4, #1
 800f91c:	f1ba 0f00 	cmp.w	sl, #0
 800f920:	d131      	bne.n	800f986 <__gethex+0x354>
 800f922:	b127      	cbz	r7, 800f92e <__gethex+0x2fc>
 800f924:	4639      	mov	r1, r7
 800f926:	4628      	mov	r0, r5
 800f928:	f000 fdca 	bl	80104c0 <__any_on>
 800f92c:	4682      	mov	sl, r0
 800f92e:	117a      	asrs	r2, r7, #5
 800f930:	2301      	movs	r3, #1
 800f932:	f007 071f 	and.w	r7, r7, #31
 800f936:	fa03 f707 	lsl.w	r7, r3, r7
 800f93a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f93e:	4621      	mov	r1, r4
 800f940:	421f      	tst	r7, r3
 800f942:	4628      	mov	r0, r5
 800f944:	bf18      	it	ne
 800f946:	f04a 0a02 	orrne.w	sl, sl, #2
 800f94a:	1b36      	subs	r6, r6, r4
 800f94c:	f7ff fe22 	bl	800f594 <rshift>
 800f950:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f954:	2702      	movs	r7, #2
 800f956:	f1ba 0f00 	cmp.w	sl, #0
 800f95a:	d048      	beq.n	800f9ee <__gethex+0x3bc>
 800f95c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f960:	2b02      	cmp	r3, #2
 800f962:	d015      	beq.n	800f990 <__gethex+0x35e>
 800f964:	2b03      	cmp	r3, #3
 800f966:	d017      	beq.n	800f998 <__gethex+0x366>
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d109      	bne.n	800f980 <__gethex+0x34e>
 800f96c:	f01a 0f02 	tst.w	sl, #2
 800f970:	d006      	beq.n	800f980 <__gethex+0x34e>
 800f972:	f8d9 3000 	ldr.w	r3, [r9]
 800f976:	ea4a 0a03 	orr.w	sl, sl, r3
 800f97a:	f01a 0f01 	tst.w	sl, #1
 800f97e:	d10e      	bne.n	800f99e <__gethex+0x36c>
 800f980:	f047 0710 	orr.w	r7, r7, #16
 800f984:	e033      	b.n	800f9ee <__gethex+0x3bc>
 800f986:	f04f 0a01 	mov.w	sl, #1
 800f98a:	e7d0      	b.n	800f92e <__gethex+0x2fc>
 800f98c:	2701      	movs	r7, #1
 800f98e:	e7e2      	b.n	800f956 <__gethex+0x324>
 800f990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f992:	f1c3 0301 	rsb	r3, r3, #1
 800f996:	9315      	str	r3, [sp, #84]	; 0x54
 800f998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0f0      	beq.n	800f980 <__gethex+0x34e>
 800f99e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f9a2:	f105 0314 	add.w	r3, r5, #20
 800f9a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f9aa:	eb03 010a 	add.w	r1, r3, sl
 800f9ae:	f04f 0c00 	mov.w	ip, #0
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f9bc:	d01c      	beq.n	800f9f8 <__gethex+0x3c6>
 800f9be:	3201      	adds	r2, #1
 800f9c0:	6002      	str	r2, [r0, #0]
 800f9c2:	2f02      	cmp	r7, #2
 800f9c4:	f105 0314 	add.w	r3, r5, #20
 800f9c8:	d138      	bne.n	800fa3c <__gethex+0x40a>
 800f9ca:	f8d8 2000 	ldr.w	r2, [r8]
 800f9ce:	3a01      	subs	r2, #1
 800f9d0:	42b2      	cmp	r2, r6
 800f9d2:	d10a      	bne.n	800f9ea <__gethex+0x3b8>
 800f9d4:	1171      	asrs	r1, r6, #5
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	f006 061f 	and.w	r6, r6, #31
 800f9dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f9e0:	fa02 f606 	lsl.w	r6, r2, r6
 800f9e4:	421e      	tst	r6, r3
 800f9e6:	bf18      	it	ne
 800f9e8:	4617      	movne	r7, r2
 800f9ea:	f047 0720 	orr.w	r7, r7, #32
 800f9ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9f0:	601d      	str	r5, [r3, #0]
 800f9f2:	9b06      	ldr	r3, [sp, #24]
 800f9f4:	601c      	str	r4, [r3, #0]
 800f9f6:	e6a4      	b.n	800f742 <__gethex+0x110>
 800f9f8:	4299      	cmp	r1, r3
 800f9fa:	f843 cc04 	str.w	ip, [r3, #-4]
 800f9fe:	d8d8      	bhi.n	800f9b2 <__gethex+0x380>
 800fa00:	68ab      	ldr	r3, [r5, #8]
 800fa02:	4599      	cmp	r9, r3
 800fa04:	db12      	blt.n	800fa2c <__gethex+0x3fa>
 800fa06:	6869      	ldr	r1, [r5, #4]
 800fa08:	9802      	ldr	r0, [sp, #8]
 800fa0a:	3101      	adds	r1, #1
 800fa0c:	f000 f97a 	bl	800fd04 <_Balloc>
 800fa10:	692a      	ldr	r2, [r5, #16]
 800fa12:	3202      	adds	r2, #2
 800fa14:	f105 010c 	add.w	r1, r5, #12
 800fa18:	4683      	mov	fp, r0
 800fa1a:	0092      	lsls	r2, r2, #2
 800fa1c:	300c      	adds	r0, #12
 800fa1e:	f7fc ff95 	bl	800c94c <memcpy>
 800fa22:	4629      	mov	r1, r5
 800fa24:	9802      	ldr	r0, [sp, #8]
 800fa26:	f000 f9a1 	bl	800fd6c <_Bfree>
 800fa2a:	465d      	mov	r5, fp
 800fa2c:	692b      	ldr	r3, [r5, #16]
 800fa2e:	1c5a      	adds	r2, r3, #1
 800fa30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800fa34:	612a      	str	r2, [r5, #16]
 800fa36:	2201      	movs	r2, #1
 800fa38:	615a      	str	r2, [r3, #20]
 800fa3a:	e7c2      	b.n	800f9c2 <__gethex+0x390>
 800fa3c:	692a      	ldr	r2, [r5, #16]
 800fa3e:	454a      	cmp	r2, r9
 800fa40:	dd0b      	ble.n	800fa5a <__gethex+0x428>
 800fa42:	2101      	movs	r1, #1
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7ff fda5 	bl	800f594 <rshift>
 800fa4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa4e:	3401      	adds	r4, #1
 800fa50:	42a3      	cmp	r3, r4
 800fa52:	f6ff aed9 	blt.w	800f808 <__gethex+0x1d6>
 800fa56:	2701      	movs	r7, #1
 800fa58:	e7c7      	b.n	800f9ea <__gethex+0x3b8>
 800fa5a:	f016 061f 	ands.w	r6, r6, #31
 800fa5e:	d0fa      	beq.n	800fa56 <__gethex+0x424>
 800fa60:	449a      	add	sl, r3
 800fa62:	f1c6 0620 	rsb	r6, r6, #32
 800fa66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800fa6a:	f000 fa0f 	bl	800fe8c <__hi0bits>
 800fa6e:	42b0      	cmp	r0, r6
 800fa70:	dbe7      	blt.n	800fa42 <__gethex+0x410>
 800fa72:	e7f0      	b.n	800fa56 <__gethex+0x424>

0800fa74 <L_shift>:
 800fa74:	f1c2 0208 	rsb	r2, r2, #8
 800fa78:	0092      	lsls	r2, r2, #2
 800fa7a:	b570      	push	{r4, r5, r6, lr}
 800fa7c:	f1c2 0620 	rsb	r6, r2, #32
 800fa80:	6843      	ldr	r3, [r0, #4]
 800fa82:	6804      	ldr	r4, [r0, #0]
 800fa84:	fa03 f506 	lsl.w	r5, r3, r6
 800fa88:	432c      	orrs	r4, r5
 800fa8a:	40d3      	lsrs	r3, r2
 800fa8c:	6004      	str	r4, [r0, #0]
 800fa8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fa92:	4288      	cmp	r0, r1
 800fa94:	d3f4      	bcc.n	800fa80 <L_shift+0xc>
 800fa96:	bd70      	pop	{r4, r5, r6, pc}

0800fa98 <__match>:
 800fa98:	b530      	push	{r4, r5, lr}
 800fa9a:	6803      	ldr	r3, [r0, #0]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800faa2:	b914      	cbnz	r4, 800faaa <__match+0x12>
 800faa4:	6003      	str	r3, [r0, #0]
 800faa6:	2001      	movs	r0, #1
 800faa8:	bd30      	pop	{r4, r5, pc}
 800faaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fab2:	2d19      	cmp	r5, #25
 800fab4:	bf98      	it	ls
 800fab6:	3220      	addls	r2, #32
 800fab8:	42a2      	cmp	r2, r4
 800faba:	d0f0      	beq.n	800fa9e <__match+0x6>
 800fabc:	2000      	movs	r0, #0
 800fabe:	e7f3      	b.n	800faa8 <__match+0x10>

0800fac0 <__hexnan>:
 800fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	680b      	ldr	r3, [r1, #0]
 800fac6:	6801      	ldr	r1, [r0, #0]
 800fac8:	115f      	asrs	r7, r3, #5
 800faca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800face:	f013 031f 	ands.w	r3, r3, #31
 800fad2:	b087      	sub	sp, #28
 800fad4:	bf18      	it	ne
 800fad6:	3704      	addne	r7, #4
 800fad8:	2500      	movs	r5, #0
 800fada:	1f3e      	subs	r6, r7, #4
 800fadc:	4682      	mov	sl, r0
 800fade:	4690      	mov	r8, r2
 800fae0:	9301      	str	r3, [sp, #4]
 800fae2:	f847 5c04 	str.w	r5, [r7, #-4]
 800fae6:	46b1      	mov	r9, r6
 800fae8:	4634      	mov	r4, r6
 800faea:	9502      	str	r5, [sp, #8]
 800faec:	46ab      	mov	fp, r5
 800faee:	784a      	ldrb	r2, [r1, #1]
 800faf0:	1c4b      	adds	r3, r1, #1
 800faf2:	9303      	str	r3, [sp, #12]
 800faf4:	b342      	cbz	r2, 800fb48 <__hexnan+0x88>
 800faf6:	4610      	mov	r0, r2
 800faf8:	9105      	str	r1, [sp, #20]
 800fafa:	9204      	str	r2, [sp, #16]
 800fafc:	f7ff fd84 	bl	800f608 <__hexdig_fun>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d143      	bne.n	800fb8c <__hexnan+0xcc>
 800fb04:	9a04      	ldr	r2, [sp, #16]
 800fb06:	9905      	ldr	r1, [sp, #20]
 800fb08:	2a20      	cmp	r2, #32
 800fb0a:	d818      	bhi.n	800fb3e <__hexnan+0x7e>
 800fb0c:	9b02      	ldr	r3, [sp, #8]
 800fb0e:	459b      	cmp	fp, r3
 800fb10:	dd13      	ble.n	800fb3a <__hexnan+0x7a>
 800fb12:	454c      	cmp	r4, r9
 800fb14:	d206      	bcs.n	800fb24 <__hexnan+0x64>
 800fb16:	2d07      	cmp	r5, #7
 800fb18:	dc04      	bgt.n	800fb24 <__hexnan+0x64>
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	4649      	mov	r1, r9
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f7ff ffa8 	bl	800fa74 <L_shift>
 800fb24:	4544      	cmp	r4, r8
 800fb26:	d944      	bls.n	800fbb2 <__hexnan+0xf2>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	f1a4 0904 	sub.w	r9, r4, #4
 800fb2e:	f844 3c04 	str.w	r3, [r4, #-4]
 800fb32:	f8cd b008 	str.w	fp, [sp, #8]
 800fb36:	464c      	mov	r4, r9
 800fb38:	461d      	mov	r5, r3
 800fb3a:	9903      	ldr	r1, [sp, #12]
 800fb3c:	e7d7      	b.n	800faee <__hexnan+0x2e>
 800fb3e:	2a29      	cmp	r2, #41	; 0x29
 800fb40:	d14a      	bne.n	800fbd8 <__hexnan+0x118>
 800fb42:	3102      	adds	r1, #2
 800fb44:	f8ca 1000 	str.w	r1, [sl]
 800fb48:	f1bb 0f00 	cmp.w	fp, #0
 800fb4c:	d044      	beq.n	800fbd8 <__hexnan+0x118>
 800fb4e:	454c      	cmp	r4, r9
 800fb50:	d206      	bcs.n	800fb60 <__hexnan+0xa0>
 800fb52:	2d07      	cmp	r5, #7
 800fb54:	dc04      	bgt.n	800fb60 <__hexnan+0xa0>
 800fb56:	462a      	mov	r2, r5
 800fb58:	4649      	mov	r1, r9
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	f7ff ff8a 	bl	800fa74 <L_shift>
 800fb60:	4544      	cmp	r4, r8
 800fb62:	d928      	bls.n	800fbb6 <__hexnan+0xf6>
 800fb64:	4643      	mov	r3, r8
 800fb66:	f854 2b04 	ldr.w	r2, [r4], #4
 800fb6a:	f843 2b04 	str.w	r2, [r3], #4
 800fb6e:	42a6      	cmp	r6, r4
 800fb70:	d2f9      	bcs.n	800fb66 <__hexnan+0xa6>
 800fb72:	2200      	movs	r2, #0
 800fb74:	f843 2b04 	str.w	r2, [r3], #4
 800fb78:	429e      	cmp	r6, r3
 800fb7a:	d2fb      	bcs.n	800fb74 <__hexnan+0xb4>
 800fb7c:	6833      	ldr	r3, [r6, #0]
 800fb7e:	b91b      	cbnz	r3, 800fb88 <__hexnan+0xc8>
 800fb80:	4546      	cmp	r6, r8
 800fb82:	d127      	bne.n	800fbd4 <__hexnan+0x114>
 800fb84:	2301      	movs	r3, #1
 800fb86:	6033      	str	r3, [r6, #0]
 800fb88:	2005      	movs	r0, #5
 800fb8a:	e026      	b.n	800fbda <__hexnan+0x11a>
 800fb8c:	3501      	adds	r5, #1
 800fb8e:	2d08      	cmp	r5, #8
 800fb90:	f10b 0b01 	add.w	fp, fp, #1
 800fb94:	dd06      	ble.n	800fba4 <__hexnan+0xe4>
 800fb96:	4544      	cmp	r4, r8
 800fb98:	d9cf      	bls.n	800fb3a <__hexnan+0x7a>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	f844 3c04 	str.w	r3, [r4, #-4]
 800fba0:	2501      	movs	r5, #1
 800fba2:	3c04      	subs	r4, #4
 800fba4:	6822      	ldr	r2, [r4, #0]
 800fba6:	f000 000f 	and.w	r0, r0, #15
 800fbaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fbae:	6020      	str	r0, [r4, #0]
 800fbb0:	e7c3      	b.n	800fb3a <__hexnan+0x7a>
 800fbb2:	2508      	movs	r5, #8
 800fbb4:	e7c1      	b.n	800fb3a <__hexnan+0x7a>
 800fbb6:	9b01      	ldr	r3, [sp, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d0df      	beq.n	800fb7c <__hexnan+0xbc>
 800fbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc0:	f1c3 0320 	rsb	r3, r3, #32
 800fbc4:	fa22 f303 	lsr.w	r3, r2, r3
 800fbc8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800fbcc:	401a      	ands	r2, r3
 800fbce:	f847 2c04 	str.w	r2, [r7, #-4]
 800fbd2:	e7d3      	b.n	800fb7c <__hexnan+0xbc>
 800fbd4:	3e04      	subs	r6, #4
 800fbd6:	e7d1      	b.n	800fb7c <__hexnan+0xbc>
 800fbd8:	2004      	movs	r0, #4
 800fbda:	b007      	add	sp, #28
 800fbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbe0 <__locale_ctype_ptr_l>:
 800fbe0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800fbe4:	4770      	bx	lr

0800fbe6 <__localeconv_l>:
 800fbe6:	30f0      	adds	r0, #240	; 0xf0
 800fbe8:	4770      	bx	lr
	...

0800fbec <_localeconv_r>:
 800fbec:	4b04      	ldr	r3, [pc, #16]	; (800fc00 <_localeconv_r+0x14>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	6a18      	ldr	r0, [r3, #32]
 800fbf2:	4b04      	ldr	r3, [pc, #16]	; (800fc04 <_localeconv_r+0x18>)
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	bf08      	it	eq
 800fbf8:	4618      	moveq	r0, r3
 800fbfa:	30f0      	adds	r0, #240	; 0xf0
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20000040 	.word	0x20000040
 800fc04:	200000a4 	.word	0x200000a4

0800fc08 <__swhatbuf_r>:
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	460e      	mov	r6, r1
 800fc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc10:	2900      	cmp	r1, #0
 800fc12:	b096      	sub	sp, #88	; 0x58
 800fc14:	4614      	mov	r4, r2
 800fc16:	461d      	mov	r5, r3
 800fc18:	da07      	bge.n	800fc2a <__swhatbuf_r+0x22>
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	602b      	str	r3, [r5, #0]
 800fc1e:	89b3      	ldrh	r3, [r6, #12]
 800fc20:	061a      	lsls	r2, r3, #24
 800fc22:	d410      	bmi.n	800fc46 <__swhatbuf_r+0x3e>
 800fc24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc28:	e00e      	b.n	800fc48 <__swhatbuf_r+0x40>
 800fc2a:	466a      	mov	r2, sp
 800fc2c:	f001 f846 	bl	8010cbc <_fstat_r>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	dbf2      	blt.n	800fc1a <__swhatbuf_r+0x12>
 800fc34:	9a01      	ldr	r2, [sp, #4]
 800fc36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc3e:	425a      	negs	r2, r3
 800fc40:	415a      	adcs	r2, r3
 800fc42:	602a      	str	r2, [r5, #0]
 800fc44:	e7ee      	b.n	800fc24 <__swhatbuf_r+0x1c>
 800fc46:	2340      	movs	r3, #64	; 0x40
 800fc48:	2000      	movs	r0, #0
 800fc4a:	6023      	str	r3, [r4, #0]
 800fc4c:	b016      	add	sp, #88	; 0x58
 800fc4e:	bd70      	pop	{r4, r5, r6, pc}

0800fc50 <__smakebuf_r>:
 800fc50:	898b      	ldrh	r3, [r1, #12]
 800fc52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc54:	079d      	lsls	r5, r3, #30
 800fc56:	4606      	mov	r6, r0
 800fc58:	460c      	mov	r4, r1
 800fc5a:	d507      	bpl.n	800fc6c <__smakebuf_r+0x1c>
 800fc5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc60:	6023      	str	r3, [r4, #0]
 800fc62:	6123      	str	r3, [r4, #16]
 800fc64:	2301      	movs	r3, #1
 800fc66:	6163      	str	r3, [r4, #20]
 800fc68:	b002      	add	sp, #8
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}
 800fc6c:	ab01      	add	r3, sp, #4
 800fc6e:	466a      	mov	r2, sp
 800fc70:	f7ff ffca 	bl	800fc08 <__swhatbuf_r>
 800fc74:	9900      	ldr	r1, [sp, #0]
 800fc76:	4605      	mov	r5, r0
 800fc78:	4630      	mov	r0, r6
 800fc7a:	f000 fc9f 	bl	80105bc <_malloc_r>
 800fc7e:	b948      	cbnz	r0, 800fc94 <__smakebuf_r+0x44>
 800fc80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc84:	059a      	lsls	r2, r3, #22
 800fc86:	d4ef      	bmi.n	800fc68 <__smakebuf_r+0x18>
 800fc88:	f023 0303 	bic.w	r3, r3, #3
 800fc8c:	f043 0302 	orr.w	r3, r3, #2
 800fc90:	81a3      	strh	r3, [r4, #12]
 800fc92:	e7e3      	b.n	800fc5c <__smakebuf_r+0xc>
 800fc94:	4b0d      	ldr	r3, [pc, #52]	; (800fccc <__smakebuf_r+0x7c>)
 800fc96:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	6020      	str	r0, [r4, #0]
 800fc9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca0:	81a3      	strh	r3, [r4, #12]
 800fca2:	9b00      	ldr	r3, [sp, #0]
 800fca4:	6163      	str	r3, [r4, #20]
 800fca6:	9b01      	ldr	r3, [sp, #4]
 800fca8:	6120      	str	r0, [r4, #16]
 800fcaa:	b15b      	cbz	r3, 800fcc4 <__smakebuf_r+0x74>
 800fcac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcb0:	4630      	mov	r0, r6
 800fcb2:	f001 f815 	bl	8010ce0 <_isatty_r>
 800fcb6:	b128      	cbz	r0, 800fcc4 <__smakebuf_r+0x74>
 800fcb8:	89a3      	ldrh	r3, [r4, #12]
 800fcba:	f023 0303 	bic.w	r3, r3, #3
 800fcbe:	f043 0301 	orr.w	r3, r3, #1
 800fcc2:	81a3      	strh	r3, [r4, #12]
 800fcc4:	89a3      	ldrh	r3, [r4, #12]
 800fcc6:	431d      	orrs	r5, r3
 800fcc8:	81a5      	strh	r5, [r4, #12]
 800fcca:	e7cd      	b.n	800fc68 <__smakebuf_r+0x18>
 800fccc:	0800f449 	.word	0x0800f449

0800fcd0 <malloc>:
 800fcd0:	4b02      	ldr	r3, [pc, #8]	; (800fcdc <malloc+0xc>)
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	6818      	ldr	r0, [r3, #0]
 800fcd6:	f000 bc71 	b.w	80105bc <_malloc_r>
 800fcda:	bf00      	nop
 800fcdc:	20000040 	.word	0x20000040

0800fce0 <__ascii_mbtowc>:
 800fce0:	b082      	sub	sp, #8
 800fce2:	b901      	cbnz	r1, 800fce6 <__ascii_mbtowc+0x6>
 800fce4:	a901      	add	r1, sp, #4
 800fce6:	b142      	cbz	r2, 800fcfa <__ascii_mbtowc+0x1a>
 800fce8:	b14b      	cbz	r3, 800fcfe <__ascii_mbtowc+0x1e>
 800fcea:	7813      	ldrb	r3, [r2, #0]
 800fcec:	600b      	str	r3, [r1, #0]
 800fcee:	7812      	ldrb	r2, [r2, #0]
 800fcf0:	1c10      	adds	r0, r2, #0
 800fcf2:	bf18      	it	ne
 800fcf4:	2001      	movne	r0, #1
 800fcf6:	b002      	add	sp, #8
 800fcf8:	4770      	bx	lr
 800fcfa:	4610      	mov	r0, r2
 800fcfc:	e7fb      	b.n	800fcf6 <__ascii_mbtowc+0x16>
 800fcfe:	f06f 0001 	mvn.w	r0, #1
 800fd02:	e7f8      	b.n	800fcf6 <__ascii_mbtowc+0x16>

0800fd04 <_Balloc>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd08:	4604      	mov	r4, r0
 800fd0a:	460e      	mov	r6, r1
 800fd0c:	b93d      	cbnz	r5, 800fd1e <_Balloc+0x1a>
 800fd0e:	2010      	movs	r0, #16
 800fd10:	f7ff ffde 	bl	800fcd0 <malloc>
 800fd14:	6260      	str	r0, [r4, #36]	; 0x24
 800fd16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd1a:	6005      	str	r5, [r0, #0]
 800fd1c:	60c5      	str	r5, [r0, #12]
 800fd1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fd20:	68eb      	ldr	r3, [r5, #12]
 800fd22:	b183      	cbz	r3, 800fd46 <_Balloc+0x42>
 800fd24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fd2c:	b9b8      	cbnz	r0, 800fd5e <_Balloc+0x5a>
 800fd2e:	2101      	movs	r1, #1
 800fd30:	fa01 f506 	lsl.w	r5, r1, r6
 800fd34:	1d6a      	adds	r2, r5, #5
 800fd36:	0092      	lsls	r2, r2, #2
 800fd38:	4620      	mov	r0, r4
 800fd3a:	f000 fbe2 	bl	8010502 <_calloc_r>
 800fd3e:	b160      	cbz	r0, 800fd5a <_Balloc+0x56>
 800fd40:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fd44:	e00e      	b.n	800fd64 <_Balloc+0x60>
 800fd46:	2221      	movs	r2, #33	; 0x21
 800fd48:	2104      	movs	r1, #4
 800fd4a:	4620      	mov	r0, r4
 800fd4c:	f000 fbd9 	bl	8010502 <_calloc_r>
 800fd50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd52:	60e8      	str	r0, [r5, #12]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1e4      	bne.n	800fd24 <_Balloc+0x20>
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	bd70      	pop	{r4, r5, r6, pc}
 800fd5e:	6802      	ldr	r2, [r0, #0]
 800fd60:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fd64:	2300      	movs	r3, #0
 800fd66:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd6a:	e7f7      	b.n	800fd5c <_Balloc+0x58>

0800fd6c <_Bfree>:
 800fd6c:	b570      	push	{r4, r5, r6, lr}
 800fd6e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fd70:	4606      	mov	r6, r0
 800fd72:	460d      	mov	r5, r1
 800fd74:	b93c      	cbnz	r4, 800fd86 <_Bfree+0x1a>
 800fd76:	2010      	movs	r0, #16
 800fd78:	f7ff ffaa 	bl	800fcd0 <malloc>
 800fd7c:	6270      	str	r0, [r6, #36]	; 0x24
 800fd7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd82:	6004      	str	r4, [r0, #0]
 800fd84:	60c4      	str	r4, [r0, #12]
 800fd86:	b13d      	cbz	r5, 800fd98 <_Bfree+0x2c>
 800fd88:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fd8a:	686a      	ldr	r2, [r5, #4]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd92:	6029      	str	r1, [r5, #0]
 800fd94:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fd98:	bd70      	pop	{r4, r5, r6, pc}

0800fd9a <__multadd>:
 800fd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd9e:	690d      	ldr	r5, [r1, #16]
 800fda0:	461f      	mov	r7, r3
 800fda2:	4606      	mov	r6, r0
 800fda4:	460c      	mov	r4, r1
 800fda6:	f101 0c14 	add.w	ip, r1, #20
 800fdaa:	2300      	movs	r3, #0
 800fdac:	f8dc 0000 	ldr.w	r0, [ip]
 800fdb0:	b281      	uxth	r1, r0
 800fdb2:	fb02 7101 	mla	r1, r2, r1, r7
 800fdb6:	0c0f      	lsrs	r7, r1, #16
 800fdb8:	0c00      	lsrs	r0, r0, #16
 800fdba:	fb02 7000 	mla	r0, r2, r0, r7
 800fdbe:	b289      	uxth	r1, r1
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fdc6:	429d      	cmp	r5, r3
 800fdc8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fdcc:	f84c 1b04 	str.w	r1, [ip], #4
 800fdd0:	dcec      	bgt.n	800fdac <__multadd+0x12>
 800fdd2:	b1d7      	cbz	r7, 800fe0a <__multadd+0x70>
 800fdd4:	68a3      	ldr	r3, [r4, #8]
 800fdd6:	42ab      	cmp	r3, r5
 800fdd8:	dc12      	bgt.n	800fe00 <__multadd+0x66>
 800fdda:	6861      	ldr	r1, [r4, #4]
 800fddc:	4630      	mov	r0, r6
 800fdde:	3101      	adds	r1, #1
 800fde0:	f7ff ff90 	bl	800fd04 <_Balloc>
 800fde4:	6922      	ldr	r2, [r4, #16]
 800fde6:	3202      	adds	r2, #2
 800fde8:	f104 010c 	add.w	r1, r4, #12
 800fdec:	4680      	mov	r8, r0
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	300c      	adds	r0, #12
 800fdf2:	f7fc fdab 	bl	800c94c <memcpy>
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	4630      	mov	r0, r6
 800fdfa:	f7ff ffb7 	bl	800fd6c <_Bfree>
 800fdfe:	4644      	mov	r4, r8
 800fe00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe04:	3501      	adds	r5, #1
 800fe06:	615f      	str	r7, [r3, #20]
 800fe08:	6125      	str	r5, [r4, #16]
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe10 <__s2b>:
 800fe10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe14:	460c      	mov	r4, r1
 800fe16:	4615      	mov	r5, r2
 800fe18:	461f      	mov	r7, r3
 800fe1a:	2209      	movs	r2, #9
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	4606      	mov	r6, r0
 800fe20:	fb93 f3f2 	sdiv	r3, r3, r2
 800fe24:	2100      	movs	r1, #0
 800fe26:	2201      	movs	r2, #1
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	db20      	blt.n	800fe6e <__s2b+0x5e>
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f7ff ff69 	bl	800fd04 <_Balloc>
 800fe32:	9b08      	ldr	r3, [sp, #32]
 800fe34:	6143      	str	r3, [r0, #20]
 800fe36:	2d09      	cmp	r5, #9
 800fe38:	f04f 0301 	mov.w	r3, #1
 800fe3c:	6103      	str	r3, [r0, #16]
 800fe3e:	dd19      	ble.n	800fe74 <__s2b+0x64>
 800fe40:	f104 0809 	add.w	r8, r4, #9
 800fe44:	46c1      	mov	r9, r8
 800fe46:	442c      	add	r4, r5
 800fe48:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fe4c:	4601      	mov	r1, r0
 800fe4e:	3b30      	subs	r3, #48	; 0x30
 800fe50:	220a      	movs	r2, #10
 800fe52:	4630      	mov	r0, r6
 800fe54:	f7ff ffa1 	bl	800fd9a <__multadd>
 800fe58:	45a1      	cmp	r9, r4
 800fe5a:	d1f5      	bne.n	800fe48 <__s2b+0x38>
 800fe5c:	eb08 0405 	add.w	r4, r8, r5
 800fe60:	3c08      	subs	r4, #8
 800fe62:	1b2d      	subs	r5, r5, r4
 800fe64:	1963      	adds	r3, r4, r5
 800fe66:	42bb      	cmp	r3, r7
 800fe68:	db07      	blt.n	800fe7a <__s2b+0x6a>
 800fe6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe6e:	0052      	lsls	r2, r2, #1
 800fe70:	3101      	adds	r1, #1
 800fe72:	e7d9      	b.n	800fe28 <__s2b+0x18>
 800fe74:	340a      	adds	r4, #10
 800fe76:	2509      	movs	r5, #9
 800fe78:	e7f3      	b.n	800fe62 <__s2b+0x52>
 800fe7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fe7e:	4601      	mov	r1, r0
 800fe80:	3b30      	subs	r3, #48	; 0x30
 800fe82:	220a      	movs	r2, #10
 800fe84:	4630      	mov	r0, r6
 800fe86:	f7ff ff88 	bl	800fd9a <__multadd>
 800fe8a:	e7eb      	b.n	800fe64 <__s2b+0x54>

0800fe8c <__hi0bits>:
 800fe8c:	0c02      	lsrs	r2, r0, #16
 800fe8e:	0412      	lsls	r2, r2, #16
 800fe90:	4603      	mov	r3, r0
 800fe92:	b9b2      	cbnz	r2, 800fec2 <__hi0bits+0x36>
 800fe94:	0403      	lsls	r3, r0, #16
 800fe96:	2010      	movs	r0, #16
 800fe98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fe9c:	bf04      	itt	eq
 800fe9e:	021b      	lsleq	r3, r3, #8
 800fea0:	3008      	addeq	r0, #8
 800fea2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fea6:	bf04      	itt	eq
 800fea8:	011b      	lsleq	r3, r3, #4
 800feaa:	3004      	addeq	r0, #4
 800feac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800feb0:	bf04      	itt	eq
 800feb2:	009b      	lsleq	r3, r3, #2
 800feb4:	3002      	addeq	r0, #2
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	db06      	blt.n	800fec8 <__hi0bits+0x3c>
 800feba:	005b      	lsls	r3, r3, #1
 800febc:	d503      	bpl.n	800fec6 <__hi0bits+0x3a>
 800febe:	3001      	adds	r0, #1
 800fec0:	4770      	bx	lr
 800fec2:	2000      	movs	r0, #0
 800fec4:	e7e8      	b.n	800fe98 <__hi0bits+0xc>
 800fec6:	2020      	movs	r0, #32
 800fec8:	4770      	bx	lr

0800feca <__lo0bits>:
 800feca:	6803      	ldr	r3, [r0, #0]
 800fecc:	f013 0207 	ands.w	r2, r3, #7
 800fed0:	4601      	mov	r1, r0
 800fed2:	d00b      	beq.n	800feec <__lo0bits+0x22>
 800fed4:	07da      	lsls	r2, r3, #31
 800fed6:	d423      	bmi.n	800ff20 <__lo0bits+0x56>
 800fed8:	0798      	lsls	r0, r3, #30
 800feda:	bf49      	itett	mi
 800fedc:	085b      	lsrmi	r3, r3, #1
 800fede:	089b      	lsrpl	r3, r3, #2
 800fee0:	2001      	movmi	r0, #1
 800fee2:	600b      	strmi	r3, [r1, #0]
 800fee4:	bf5c      	itt	pl
 800fee6:	600b      	strpl	r3, [r1, #0]
 800fee8:	2002      	movpl	r0, #2
 800feea:	4770      	bx	lr
 800feec:	b298      	uxth	r0, r3
 800feee:	b9a8      	cbnz	r0, 800ff1c <__lo0bits+0x52>
 800fef0:	0c1b      	lsrs	r3, r3, #16
 800fef2:	2010      	movs	r0, #16
 800fef4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fef8:	bf04      	itt	eq
 800fefa:	0a1b      	lsreq	r3, r3, #8
 800fefc:	3008      	addeq	r0, #8
 800fefe:	071a      	lsls	r2, r3, #28
 800ff00:	bf04      	itt	eq
 800ff02:	091b      	lsreq	r3, r3, #4
 800ff04:	3004      	addeq	r0, #4
 800ff06:	079a      	lsls	r2, r3, #30
 800ff08:	bf04      	itt	eq
 800ff0a:	089b      	lsreq	r3, r3, #2
 800ff0c:	3002      	addeq	r0, #2
 800ff0e:	07da      	lsls	r2, r3, #31
 800ff10:	d402      	bmi.n	800ff18 <__lo0bits+0x4e>
 800ff12:	085b      	lsrs	r3, r3, #1
 800ff14:	d006      	beq.n	800ff24 <__lo0bits+0x5a>
 800ff16:	3001      	adds	r0, #1
 800ff18:	600b      	str	r3, [r1, #0]
 800ff1a:	4770      	bx	lr
 800ff1c:	4610      	mov	r0, r2
 800ff1e:	e7e9      	b.n	800fef4 <__lo0bits+0x2a>
 800ff20:	2000      	movs	r0, #0
 800ff22:	4770      	bx	lr
 800ff24:	2020      	movs	r0, #32
 800ff26:	4770      	bx	lr

0800ff28 <__i2b>:
 800ff28:	b510      	push	{r4, lr}
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	2101      	movs	r1, #1
 800ff2e:	f7ff fee9 	bl	800fd04 <_Balloc>
 800ff32:	2201      	movs	r2, #1
 800ff34:	6144      	str	r4, [r0, #20]
 800ff36:	6102      	str	r2, [r0, #16]
 800ff38:	bd10      	pop	{r4, pc}

0800ff3a <__multiply>:
 800ff3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3e:	4614      	mov	r4, r2
 800ff40:	690a      	ldr	r2, [r1, #16]
 800ff42:	6923      	ldr	r3, [r4, #16]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	bfb8      	it	lt
 800ff48:	460b      	movlt	r3, r1
 800ff4a:	4688      	mov	r8, r1
 800ff4c:	bfbc      	itt	lt
 800ff4e:	46a0      	movlt	r8, r4
 800ff50:	461c      	movlt	r4, r3
 800ff52:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff56:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff5e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff62:	eb07 0609 	add.w	r6, r7, r9
 800ff66:	42b3      	cmp	r3, r6
 800ff68:	bfb8      	it	lt
 800ff6a:	3101      	addlt	r1, #1
 800ff6c:	f7ff feca 	bl	800fd04 <_Balloc>
 800ff70:	f100 0514 	add.w	r5, r0, #20
 800ff74:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ff78:	462b      	mov	r3, r5
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	4573      	cmp	r3, lr
 800ff7e:	d316      	bcc.n	800ffae <__multiply+0x74>
 800ff80:	f104 0214 	add.w	r2, r4, #20
 800ff84:	f108 0114 	add.w	r1, r8, #20
 800ff88:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ff8c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	9b00      	ldr	r3, [sp, #0]
 800ff94:	9201      	str	r2, [sp, #4]
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d80c      	bhi.n	800ffb4 <__multiply+0x7a>
 800ff9a:	2e00      	cmp	r6, #0
 800ff9c:	dd03      	ble.n	800ffa6 <__multiply+0x6c>
 800ff9e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d05d      	beq.n	8010062 <__multiply+0x128>
 800ffa6:	6106      	str	r6, [r0, #16]
 800ffa8:	b003      	add	sp, #12
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffae:	f843 2b04 	str.w	r2, [r3], #4
 800ffb2:	e7e3      	b.n	800ff7c <__multiply+0x42>
 800ffb4:	f8b2 b000 	ldrh.w	fp, [r2]
 800ffb8:	f1bb 0f00 	cmp.w	fp, #0
 800ffbc:	d023      	beq.n	8010006 <__multiply+0xcc>
 800ffbe:	4689      	mov	r9, r1
 800ffc0:	46ac      	mov	ip, r5
 800ffc2:	f04f 0800 	mov.w	r8, #0
 800ffc6:	f859 4b04 	ldr.w	r4, [r9], #4
 800ffca:	f8dc a000 	ldr.w	sl, [ip]
 800ffce:	b2a3      	uxth	r3, r4
 800ffd0:	fa1f fa8a 	uxth.w	sl, sl
 800ffd4:	fb0b a303 	mla	r3, fp, r3, sl
 800ffd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ffdc:	f8dc 4000 	ldr.w	r4, [ip]
 800ffe0:	4443      	add	r3, r8
 800ffe2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ffe6:	fb0b 840a 	mla	r4, fp, sl, r8
 800ffea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ffee:	46e2      	mov	sl, ip
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fff6:	454f      	cmp	r7, r9
 800fff8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fffc:	f84a 3b04 	str.w	r3, [sl], #4
 8010000:	d82b      	bhi.n	801005a <__multiply+0x120>
 8010002:	f8cc 8004 	str.w	r8, [ip, #4]
 8010006:	9b01      	ldr	r3, [sp, #4]
 8010008:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801000c:	3204      	adds	r2, #4
 801000e:	f1ba 0f00 	cmp.w	sl, #0
 8010012:	d020      	beq.n	8010056 <__multiply+0x11c>
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	4689      	mov	r9, r1
 8010018:	46a8      	mov	r8, r5
 801001a:	f04f 0b00 	mov.w	fp, #0
 801001e:	f8b9 c000 	ldrh.w	ip, [r9]
 8010022:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010026:	fb0a 440c 	mla	r4, sl, ip, r4
 801002a:	445c      	add	r4, fp
 801002c:	46c4      	mov	ip, r8
 801002e:	b29b      	uxth	r3, r3
 8010030:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010034:	f84c 3b04 	str.w	r3, [ip], #4
 8010038:	f859 3b04 	ldr.w	r3, [r9], #4
 801003c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010040:	0c1b      	lsrs	r3, r3, #16
 8010042:	fb0a b303 	mla	r3, sl, r3, fp
 8010046:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801004a:	454f      	cmp	r7, r9
 801004c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010050:	d805      	bhi.n	801005e <__multiply+0x124>
 8010052:	f8c8 3004 	str.w	r3, [r8, #4]
 8010056:	3504      	adds	r5, #4
 8010058:	e79b      	b.n	800ff92 <__multiply+0x58>
 801005a:	46d4      	mov	ip, sl
 801005c:	e7b3      	b.n	800ffc6 <__multiply+0x8c>
 801005e:	46e0      	mov	r8, ip
 8010060:	e7dd      	b.n	801001e <__multiply+0xe4>
 8010062:	3e01      	subs	r6, #1
 8010064:	e799      	b.n	800ff9a <__multiply+0x60>
	...

08010068 <__pow5mult>:
 8010068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801006c:	4615      	mov	r5, r2
 801006e:	f012 0203 	ands.w	r2, r2, #3
 8010072:	4606      	mov	r6, r0
 8010074:	460f      	mov	r7, r1
 8010076:	d007      	beq.n	8010088 <__pow5mult+0x20>
 8010078:	3a01      	subs	r2, #1
 801007a:	4c21      	ldr	r4, [pc, #132]	; (8010100 <__pow5mult+0x98>)
 801007c:	2300      	movs	r3, #0
 801007e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010082:	f7ff fe8a 	bl	800fd9a <__multadd>
 8010086:	4607      	mov	r7, r0
 8010088:	10ad      	asrs	r5, r5, #2
 801008a:	d035      	beq.n	80100f8 <__pow5mult+0x90>
 801008c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801008e:	b93c      	cbnz	r4, 80100a0 <__pow5mult+0x38>
 8010090:	2010      	movs	r0, #16
 8010092:	f7ff fe1d 	bl	800fcd0 <malloc>
 8010096:	6270      	str	r0, [r6, #36]	; 0x24
 8010098:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801009c:	6004      	str	r4, [r0, #0]
 801009e:	60c4      	str	r4, [r0, #12]
 80100a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100a8:	b94c      	cbnz	r4, 80100be <__pow5mult+0x56>
 80100aa:	f240 2171 	movw	r1, #625	; 0x271
 80100ae:	4630      	mov	r0, r6
 80100b0:	f7ff ff3a 	bl	800ff28 <__i2b>
 80100b4:	2300      	movs	r3, #0
 80100b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80100ba:	4604      	mov	r4, r0
 80100bc:	6003      	str	r3, [r0, #0]
 80100be:	f04f 0800 	mov.w	r8, #0
 80100c2:	07eb      	lsls	r3, r5, #31
 80100c4:	d50a      	bpl.n	80100dc <__pow5mult+0x74>
 80100c6:	4639      	mov	r1, r7
 80100c8:	4622      	mov	r2, r4
 80100ca:	4630      	mov	r0, r6
 80100cc:	f7ff ff35 	bl	800ff3a <__multiply>
 80100d0:	4639      	mov	r1, r7
 80100d2:	4681      	mov	r9, r0
 80100d4:	4630      	mov	r0, r6
 80100d6:	f7ff fe49 	bl	800fd6c <_Bfree>
 80100da:	464f      	mov	r7, r9
 80100dc:	106d      	asrs	r5, r5, #1
 80100de:	d00b      	beq.n	80100f8 <__pow5mult+0x90>
 80100e0:	6820      	ldr	r0, [r4, #0]
 80100e2:	b938      	cbnz	r0, 80100f4 <__pow5mult+0x8c>
 80100e4:	4622      	mov	r2, r4
 80100e6:	4621      	mov	r1, r4
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7ff ff26 	bl	800ff3a <__multiply>
 80100ee:	6020      	str	r0, [r4, #0]
 80100f0:	f8c0 8000 	str.w	r8, [r0]
 80100f4:	4604      	mov	r4, r0
 80100f6:	e7e4      	b.n	80100c2 <__pow5mult+0x5a>
 80100f8:	4638      	mov	r0, r7
 80100fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100fe:	bf00      	nop
 8010100:	08011628 	.word	0x08011628

08010104 <__lshift>:
 8010104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	460c      	mov	r4, r1
 801010a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801010e:	6923      	ldr	r3, [r4, #16]
 8010110:	6849      	ldr	r1, [r1, #4]
 8010112:	eb0a 0903 	add.w	r9, sl, r3
 8010116:	68a3      	ldr	r3, [r4, #8]
 8010118:	4607      	mov	r7, r0
 801011a:	4616      	mov	r6, r2
 801011c:	f109 0501 	add.w	r5, r9, #1
 8010120:	42ab      	cmp	r3, r5
 8010122:	db32      	blt.n	801018a <__lshift+0x86>
 8010124:	4638      	mov	r0, r7
 8010126:	f7ff fded 	bl	800fd04 <_Balloc>
 801012a:	2300      	movs	r3, #0
 801012c:	4680      	mov	r8, r0
 801012e:	f100 0114 	add.w	r1, r0, #20
 8010132:	461a      	mov	r2, r3
 8010134:	4553      	cmp	r3, sl
 8010136:	db2b      	blt.n	8010190 <__lshift+0x8c>
 8010138:	6920      	ldr	r0, [r4, #16]
 801013a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801013e:	f104 0314 	add.w	r3, r4, #20
 8010142:	f016 021f 	ands.w	r2, r6, #31
 8010146:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801014a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801014e:	d025      	beq.n	801019c <__lshift+0x98>
 8010150:	f1c2 0e20 	rsb	lr, r2, #32
 8010154:	2000      	movs	r0, #0
 8010156:	681e      	ldr	r6, [r3, #0]
 8010158:	468a      	mov	sl, r1
 801015a:	4096      	lsls	r6, r2
 801015c:	4330      	orrs	r0, r6
 801015e:	f84a 0b04 	str.w	r0, [sl], #4
 8010162:	f853 0b04 	ldr.w	r0, [r3], #4
 8010166:	459c      	cmp	ip, r3
 8010168:	fa20 f00e 	lsr.w	r0, r0, lr
 801016c:	d814      	bhi.n	8010198 <__lshift+0x94>
 801016e:	6048      	str	r0, [r1, #4]
 8010170:	b108      	cbz	r0, 8010176 <__lshift+0x72>
 8010172:	f109 0502 	add.w	r5, r9, #2
 8010176:	3d01      	subs	r5, #1
 8010178:	4638      	mov	r0, r7
 801017a:	f8c8 5010 	str.w	r5, [r8, #16]
 801017e:	4621      	mov	r1, r4
 8010180:	f7ff fdf4 	bl	800fd6c <_Bfree>
 8010184:	4640      	mov	r0, r8
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	3101      	adds	r1, #1
 801018c:	005b      	lsls	r3, r3, #1
 801018e:	e7c7      	b.n	8010120 <__lshift+0x1c>
 8010190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010194:	3301      	adds	r3, #1
 8010196:	e7cd      	b.n	8010134 <__lshift+0x30>
 8010198:	4651      	mov	r1, sl
 801019a:	e7dc      	b.n	8010156 <__lshift+0x52>
 801019c:	3904      	subs	r1, #4
 801019e:	f853 2b04 	ldr.w	r2, [r3], #4
 80101a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80101a6:	459c      	cmp	ip, r3
 80101a8:	d8f9      	bhi.n	801019e <__lshift+0x9a>
 80101aa:	e7e4      	b.n	8010176 <__lshift+0x72>

080101ac <__mcmp>:
 80101ac:	6903      	ldr	r3, [r0, #16]
 80101ae:	690a      	ldr	r2, [r1, #16]
 80101b0:	1a9b      	subs	r3, r3, r2
 80101b2:	b530      	push	{r4, r5, lr}
 80101b4:	d10c      	bne.n	80101d0 <__mcmp+0x24>
 80101b6:	0092      	lsls	r2, r2, #2
 80101b8:	3014      	adds	r0, #20
 80101ba:	3114      	adds	r1, #20
 80101bc:	1884      	adds	r4, r0, r2
 80101be:	4411      	add	r1, r2
 80101c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101c8:	4295      	cmp	r5, r2
 80101ca:	d003      	beq.n	80101d4 <__mcmp+0x28>
 80101cc:	d305      	bcc.n	80101da <__mcmp+0x2e>
 80101ce:	2301      	movs	r3, #1
 80101d0:	4618      	mov	r0, r3
 80101d2:	bd30      	pop	{r4, r5, pc}
 80101d4:	42a0      	cmp	r0, r4
 80101d6:	d3f3      	bcc.n	80101c0 <__mcmp+0x14>
 80101d8:	e7fa      	b.n	80101d0 <__mcmp+0x24>
 80101da:	f04f 33ff 	mov.w	r3, #4294967295
 80101de:	e7f7      	b.n	80101d0 <__mcmp+0x24>

080101e0 <__mdiff>:
 80101e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101e4:	460d      	mov	r5, r1
 80101e6:	4607      	mov	r7, r0
 80101e8:	4611      	mov	r1, r2
 80101ea:	4628      	mov	r0, r5
 80101ec:	4614      	mov	r4, r2
 80101ee:	f7ff ffdd 	bl	80101ac <__mcmp>
 80101f2:	1e06      	subs	r6, r0, #0
 80101f4:	d108      	bne.n	8010208 <__mdiff+0x28>
 80101f6:	4631      	mov	r1, r6
 80101f8:	4638      	mov	r0, r7
 80101fa:	f7ff fd83 	bl	800fd04 <_Balloc>
 80101fe:	2301      	movs	r3, #1
 8010200:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010208:	bfa4      	itt	ge
 801020a:	4623      	movge	r3, r4
 801020c:	462c      	movge	r4, r5
 801020e:	4638      	mov	r0, r7
 8010210:	6861      	ldr	r1, [r4, #4]
 8010212:	bfa6      	itte	ge
 8010214:	461d      	movge	r5, r3
 8010216:	2600      	movge	r6, #0
 8010218:	2601      	movlt	r6, #1
 801021a:	f7ff fd73 	bl	800fd04 <_Balloc>
 801021e:	692b      	ldr	r3, [r5, #16]
 8010220:	60c6      	str	r6, [r0, #12]
 8010222:	6926      	ldr	r6, [r4, #16]
 8010224:	f105 0914 	add.w	r9, r5, #20
 8010228:	f104 0214 	add.w	r2, r4, #20
 801022c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010230:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010234:	f100 0514 	add.w	r5, r0, #20
 8010238:	f04f 0e00 	mov.w	lr, #0
 801023c:	f852 ab04 	ldr.w	sl, [r2], #4
 8010240:	f859 4b04 	ldr.w	r4, [r9], #4
 8010244:	fa1e f18a 	uxtah	r1, lr, sl
 8010248:	b2a3      	uxth	r3, r4
 801024a:	1ac9      	subs	r1, r1, r3
 801024c:	0c23      	lsrs	r3, r4, #16
 801024e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010252:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010256:	b289      	uxth	r1, r1
 8010258:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801025c:	45c8      	cmp	r8, r9
 801025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010262:	4694      	mov	ip, r2
 8010264:	f845 3b04 	str.w	r3, [r5], #4
 8010268:	d8e8      	bhi.n	801023c <__mdiff+0x5c>
 801026a:	45bc      	cmp	ip, r7
 801026c:	d304      	bcc.n	8010278 <__mdiff+0x98>
 801026e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010272:	b183      	cbz	r3, 8010296 <__mdiff+0xb6>
 8010274:	6106      	str	r6, [r0, #16]
 8010276:	e7c5      	b.n	8010204 <__mdiff+0x24>
 8010278:	f85c 1b04 	ldr.w	r1, [ip], #4
 801027c:	fa1e f381 	uxtah	r3, lr, r1
 8010280:	141a      	asrs	r2, r3, #16
 8010282:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010286:	b29b      	uxth	r3, r3
 8010288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801028c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010290:	f845 3b04 	str.w	r3, [r5], #4
 8010294:	e7e9      	b.n	801026a <__mdiff+0x8a>
 8010296:	3e01      	subs	r6, #1
 8010298:	e7e9      	b.n	801026e <__mdiff+0x8e>
	...

0801029c <__ulp>:
 801029c:	4b12      	ldr	r3, [pc, #72]	; (80102e8 <__ulp+0x4c>)
 801029e:	ee10 2a90 	vmov	r2, s1
 80102a2:	401a      	ands	r2, r3
 80102a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	dd04      	ble.n	80102b6 <__ulp+0x1a>
 80102ac:	2000      	movs	r0, #0
 80102ae:	4619      	mov	r1, r3
 80102b0:	ec41 0b10 	vmov	d0, r0, r1
 80102b4:	4770      	bx	lr
 80102b6:	425b      	negs	r3, r3
 80102b8:	151b      	asrs	r3, r3, #20
 80102ba:	2b13      	cmp	r3, #19
 80102bc:	f04f 0000 	mov.w	r0, #0
 80102c0:	f04f 0100 	mov.w	r1, #0
 80102c4:	dc04      	bgt.n	80102d0 <__ulp+0x34>
 80102c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80102ca:	fa42 f103 	asr.w	r1, r2, r3
 80102ce:	e7ef      	b.n	80102b0 <__ulp+0x14>
 80102d0:	3b14      	subs	r3, #20
 80102d2:	2b1e      	cmp	r3, #30
 80102d4:	f04f 0201 	mov.w	r2, #1
 80102d8:	bfda      	itte	le
 80102da:	f1c3 031f 	rsble	r3, r3, #31
 80102de:	fa02 f303 	lslle.w	r3, r2, r3
 80102e2:	4613      	movgt	r3, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	e7e3      	b.n	80102b0 <__ulp+0x14>
 80102e8:	7ff00000 	.word	0x7ff00000

080102ec <__b2d>:
 80102ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ee:	6905      	ldr	r5, [r0, #16]
 80102f0:	f100 0714 	add.w	r7, r0, #20
 80102f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80102f8:	1f2e      	subs	r6, r5, #4
 80102fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80102fe:	4620      	mov	r0, r4
 8010300:	f7ff fdc4 	bl	800fe8c <__hi0bits>
 8010304:	f1c0 0320 	rsb	r3, r0, #32
 8010308:	280a      	cmp	r0, #10
 801030a:	600b      	str	r3, [r1, #0]
 801030c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010384 <__b2d+0x98>
 8010310:	dc14      	bgt.n	801033c <__b2d+0x50>
 8010312:	f1c0 0e0b 	rsb	lr, r0, #11
 8010316:	fa24 f10e 	lsr.w	r1, r4, lr
 801031a:	42b7      	cmp	r7, r6
 801031c:	ea41 030c 	orr.w	r3, r1, ip
 8010320:	bf34      	ite	cc
 8010322:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010326:	2100      	movcs	r1, #0
 8010328:	3015      	adds	r0, #21
 801032a:	fa04 f000 	lsl.w	r0, r4, r0
 801032e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010332:	ea40 0201 	orr.w	r2, r0, r1
 8010336:	ec43 2b10 	vmov	d0, r2, r3
 801033a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801033c:	42b7      	cmp	r7, r6
 801033e:	bf3a      	itte	cc
 8010340:	f1a5 0608 	subcc.w	r6, r5, #8
 8010344:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010348:	2100      	movcs	r1, #0
 801034a:	380b      	subs	r0, #11
 801034c:	d015      	beq.n	801037a <__b2d+0x8e>
 801034e:	4084      	lsls	r4, r0
 8010350:	f1c0 0520 	rsb	r5, r0, #32
 8010354:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010358:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801035c:	42be      	cmp	r6, r7
 801035e:	fa21 fc05 	lsr.w	ip, r1, r5
 8010362:	ea44 030c 	orr.w	r3, r4, ip
 8010366:	bf8c      	ite	hi
 8010368:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801036c:	2400      	movls	r4, #0
 801036e:	fa01 f000 	lsl.w	r0, r1, r0
 8010372:	40ec      	lsrs	r4, r5
 8010374:	ea40 0204 	orr.w	r2, r0, r4
 8010378:	e7dd      	b.n	8010336 <__b2d+0x4a>
 801037a:	ea44 030c 	orr.w	r3, r4, ip
 801037e:	460a      	mov	r2, r1
 8010380:	e7d9      	b.n	8010336 <__b2d+0x4a>
 8010382:	bf00      	nop
 8010384:	3ff00000 	.word	0x3ff00000

08010388 <__d2b>:
 8010388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801038c:	460e      	mov	r6, r1
 801038e:	2101      	movs	r1, #1
 8010390:	ec59 8b10 	vmov	r8, r9, d0
 8010394:	4615      	mov	r5, r2
 8010396:	f7ff fcb5 	bl	800fd04 <_Balloc>
 801039a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801039e:	4607      	mov	r7, r0
 80103a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80103a4:	bb34      	cbnz	r4, 80103f4 <__d2b+0x6c>
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	f1b8 0300 	subs.w	r3, r8, #0
 80103ac:	d027      	beq.n	80103fe <__d2b+0x76>
 80103ae:	a802      	add	r0, sp, #8
 80103b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80103b4:	f7ff fd89 	bl	800feca <__lo0bits>
 80103b8:	9900      	ldr	r1, [sp, #0]
 80103ba:	b1f0      	cbz	r0, 80103fa <__d2b+0x72>
 80103bc:	9a01      	ldr	r2, [sp, #4]
 80103be:	f1c0 0320 	rsb	r3, r0, #32
 80103c2:	fa02 f303 	lsl.w	r3, r2, r3
 80103c6:	430b      	orrs	r3, r1
 80103c8:	40c2      	lsrs	r2, r0
 80103ca:	617b      	str	r3, [r7, #20]
 80103cc:	9201      	str	r2, [sp, #4]
 80103ce:	9b01      	ldr	r3, [sp, #4]
 80103d0:	61bb      	str	r3, [r7, #24]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	bf14      	ite	ne
 80103d6:	2102      	movne	r1, #2
 80103d8:	2101      	moveq	r1, #1
 80103da:	6139      	str	r1, [r7, #16]
 80103dc:	b1c4      	cbz	r4, 8010410 <__d2b+0x88>
 80103de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80103e2:	4404      	add	r4, r0
 80103e4:	6034      	str	r4, [r6, #0]
 80103e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80103ea:	6028      	str	r0, [r5, #0]
 80103ec:	4638      	mov	r0, r7
 80103ee:	b003      	add	sp, #12
 80103f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103f8:	e7d5      	b.n	80103a6 <__d2b+0x1e>
 80103fa:	6179      	str	r1, [r7, #20]
 80103fc:	e7e7      	b.n	80103ce <__d2b+0x46>
 80103fe:	a801      	add	r0, sp, #4
 8010400:	f7ff fd63 	bl	800feca <__lo0bits>
 8010404:	9b01      	ldr	r3, [sp, #4]
 8010406:	617b      	str	r3, [r7, #20]
 8010408:	2101      	movs	r1, #1
 801040a:	6139      	str	r1, [r7, #16]
 801040c:	3020      	adds	r0, #32
 801040e:	e7e5      	b.n	80103dc <__d2b+0x54>
 8010410:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010418:	6030      	str	r0, [r6, #0]
 801041a:	6918      	ldr	r0, [r3, #16]
 801041c:	f7ff fd36 	bl	800fe8c <__hi0bits>
 8010420:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010424:	e7e1      	b.n	80103ea <__d2b+0x62>

08010426 <__ratio>:
 8010426:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801042a:	4688      	mov	r8, r1
 801042c:	4669      	mov	r1, sp
 801042e:	4681      	mov	r9, r0
 8010430:	f7ff ff5c 	bl	80102ec <__b2d>
 8010434:	a901      	add	r1, sp, #4
 8010436:	4640      	mov	r0, r8
 8010438:	ec57 6b10 	vmov	r6, r7, d0
 801043c:	f7ff ff56 	bl	80102ec <__b2d>
 8010440:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010444:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010448:	eba3 0c02 	sub.w	ip, r3, r2
 801044c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010450:	1a9b      	subs	r3, r3, r2
 8010452:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010456:	ec5b ab10 	vmov	sl, fp, d0
 801045a:	2b00      	cmp	r3, #0
 801045c:	bfce      	itee	gt
 801045e:	463a      	movgt	r2, r7
 8010460:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010464:	465a      	movle	r2, fp
 8010466:	4659      	mov	r1, fp
 8010468:	463d      	mov	r5, r7
 801046a:	bfd4      	ite	le
 801046c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010470:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010474:	4630      	mov	r0, r6
 8010476:	ee10 2a10 	vmov	r2, s0
 801047a:	460b      	mov	r3, r1
 801047c:	4629      	mov	r1, r5
 801047e:	f7f0 f9e5 	bl	800084c <__aeabi_ddiv>
 8010482:	ec41 0b10 	vmov	d0, r0, r1
 8010486:	b003      	add	sp, #12
 8010488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801048c <__copybits>:
 801048c:	3901      	subs	r1, #1
 801048e:	b510      	push	{r4, lr}
 8010490:	1149      	asrs	r1, r1, #5
 8010492:	6914      	ldr	r4, [r2, #16]
 8010494:	3101      	adds	r1, #1
 8010496:	f102 0314 	add.w	r3, r2, #20
 801049a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801049e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80104a2:	42a3      	cmp	r3, r4
 80104a4:	4602      	mov	r2, r0
 80104a6:	d303      	bcc.n	80104b0 <__copybits+0x24>
 80104a8:	2300      	movs	r3, #0
 80104aa:	428a      	cmp	r2, r1
 80104ac:	d305      	bcc.n	80104ba <__copybits+0x2e>
 80104ae:	bd10      	pop	{r4, pc}
 80104b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104b4:	f840 2b04 	str.w	r2, [r0], #4
 80104b8:	e7f3      	b.n	80104a2 <__copybits+0x16>
 80104ba:	f842 3b04 	str.w	r3, [r2], #4
 80104be:	e7f4      	b.n	80104aa <__copybits+0x1e>

080104c0 <__any_on>:
 80104c0:	f100 0214 	add.w	r2, r0, #20
 80104c4:	6900      	ldr	r0, [r0, #16]
 80104c6:	114b      	asrs	r3, r1, #5
 80104c8:	4298      	cmp	r0, r3
 80104ca:	b510      	push	{r4, lr}
 80104cc:	db11      	blt.n	80104f2 <__any_on+0x32>
 80104ce:	dd0a      	ble.n	80104e6 <__any_on+0x26>
 80104d0:	f011 011f 	ands.w	r1, r1, #31
 80104d4:	d007      	beq.n	80104e6 <__any_on+0x26>
 80104d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80104da:	fa24 f001 	lsr.w	r0, r4, r1
 80104de:	fa00 f101 	lsl.w	r1, r0, r1
 80104e2:	428c      	cmp	r4, r1
 80104e4:	d10b      	bne.n	80104fe <__any_on+0x3e>
 80104e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d803      	bhi.n	80104f6 <__any_on+0x36>
 80104ee:	2000      	movs	r0, #0
 80104f0:	bd10      	pop	{r4, pc}
 80104f2:	4603      	mov	r3, r0
 80104f4:	e7f7      	b.n	80104e6 <__any_on+0x26>
 80104f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104fa:	2900      	cmp	r1, #0
 80104fc:	d0f5      	beq.n	80104ea <__any_on+0x2a>
 80104fe:	2001      	movs	r0, #1
 8010500:	e7f6      	b.n	80104f0 <__any_on+0x30>

08010502 <_calloc_r>:
 8010502:	b538      	push	{r3, r4, r5, lr}
 8010504:	fb02 f401 	mul.w	r4, r2, r1
 8010508:	4621      	mov	r1, r4
 801050a:	f000 f857 	bl	80105bc <_malloc_r>
 801050e:	4605      	mov	r5, r0
 8010510:	b118      	cbz	r0, 801051a <_calloc_r+0x18>
 8010512:	4622      	mov	r2, r4
 8010514:	2100      	movs	r1, #0
 8010516:	f7fc fa24 	bl	800c962 <memset>
 801051a:	4628      	mov	r0, r5
 801051c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010520 <_free_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4605      	mov	r5, r0
 8010524:	2900      	cmp	r1, #0
 8010526:	d045      	beq.n	80105b4 <_free_r+0x94>
 8010528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801052c:	1f0c      	subs	r4, r1, #4
 801052e:	2b00      	cmp	r3, #0
 8010530:	bfb8      	it	lt
 8010532:	18e4      	addlt	r4, r4, r3
 8010534:	f000 fc0f 	bl	8010d56 <__malloc_lock>
 8010538:	4a1f      	ldr	r2, [pc, #124]	; (80105b8 <_free_r+0x98>)
 801053a:	6813      	ldr	r3, [r2, #0]
 801053c:	4610      	mov	r0, r2
 801053e:	b933      	cbnz	r3, 801054e <_free_r+0x2e>
 8010540:	6063      	str	r3, [r4, #4]
 8010542:	6014      	str	r4, [r2, #0]
 8010544:	4628      	mov	r0, r5
 8010546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801054a:	f000 bc05 	b.w	8010d58 <__malloc_unlock>
 801054e:	42a3      	cmp	r3, r4
 8010550:	d90c      	bls.n	801056c <_free_r+0x4c>
 8010552:	6821      	ldr	r1, [r4, #0]
 8010554:	1862      	adds	r2, r4, r1
 8010556:	4293      	cmp	r3, r2
 8010558:	bf04      	itt	eq
 801055a:	681a      	ldreq	r2, [r3, #0]
 801055c:	685b      	ldreq	r3, [r3, #4]
 801055e:	6063      	str	r3, [r4, #4]
 8010560:	bf04      	itt	eq
 8010562:	1852      	addeq	r2, r2, r1
 8010564:	6022      	streq	r2, [r4, #0]
 8010566:	6004      	str	r4, [r0, #0]
 8010568:	e7ec      	b.n	8010544 <_free_r+0x24>
 801056a:	4613      	mov	r3, r2
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	b10a      	cbz	r2, 8010574 <_free_r+0x54>
 8010570:	42a2      	cmp	r2, r4
 8010572:	d9fa      	bls.n	801056a <_free_r+0x4a>
 8010574:	6819      	ldr	r1, [r3, #0]
 8010576:	1858      	adds	r0, r3, r1
 8010578:	42a0      	cmp	r0, r4
 801057a:	d10b      	bne.n	8010594 <_free_r+0x74>
 801057c:	6820      	ldr	r0, [r4, #0]
 801057e:	4401      	add	r1, r0
 8010580:	1858      	adds	r0, r3, r1
 8010582:	4282      	cmp	r2, r0
 8010584:	6019      	str	r1, [r3, #0]
 8010586:	d1dd      	bne.n	8010544 <_free_r+0x24>
 8010588:	6810      	ldr	r0, [r2, #0]
 801058a:	6852      	ldr	r2, [r2, #4]
 801058c:	605a      	str	r2, [r3, #4]
 801058e:	4401      	add	r1, r0
 8010590:	6019      	str	r1, [r3, #0]
 8010592:	e7d7      	b.n	8010544 <_free_r+0x24>
 8010594:	d902      	bls.n	801059c <_free_r+0x7c>
 8010596:	230c      	movs	r3, #12
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	e7d3      	b.n	8010544 <_free_r+0x24>
 801059c:	6820      	ldr	r0, [r4, #0]
 801059e:	1821      	adds	r1, r4, r0
 80105a0:	428a      	cmp	r2, r1
 80105a2:	bf04      	itt	eq
 80105a4:	6811      	ldreq	r1, [r2, #0]
 80105a6:	6852      	ldreq	r2, [r2, #4]
 80105a8:	6062      	str	r2, [r4, #4]
 80105aa:	bf04      	itt	eq
 80105ac:	1809      	addeq	r1, r1, r0
 80105ae:	6021      	streq	r1, [r4, #0]
 80105b0:	605c      	str	r4, [r3, #4]
 80105b2:	e7c7      	b.n	8010544 <_free_r+0x24>
 80105b4:	bd38      	pop	{r3, r4, r5, pc}
 80105b6:	bf00      	nop
 80105b8:	2001ebcc 	.word	0x2001ebcc

080105bc <_malloc_r>:
 80105bc:	b570      	push	{r4, r5, r6, lr}
 80105be:	1ccd      	adds	r5, r1, #3
 80105c0:	f025 0503 	bic.w	r5, r5, #3
 80105c4:	3508      	adds	r5, #8
 80105c6:	2d0c      	cmp	r5, #12
 80105c8:	bf38      	it	cc
 80105ca:	250c      	movcc	r5, #12
 80105cc:	2d00      	cmp	r5, #0
 80105ce:	4606      	mov	r6, r0
 80105d0:	db01      	blt.n	80105d6 <_malloc_r+0x1a>
 80105d2:	42a9      	cmp	r1, r5
 80105d4:	d903      	bls.n	80105de <_malloc_r+0x22>
 80105d6:	230c      	movs	r3, #12
 80105d8:	6033      	str	r3, [r6, #0]
 80105da:	2000      	movs	r0, #0
 80105dc:	bd70      	pop	{r4, r5, r6, pc}
 80105de:	f000 fbba 	bl	8010d56 <__malloc_lock>
 80105e2:	4a21      	ldr	r2, [pc, #132]	; (8010668 <_malloc_r+0xac>)
 80105e4:	6814      	ldr	r4, [r2, #0]
 80105e6:	4621      	mov	r1, r4
 80105e8:	b991      	cbnz	r1, 8010610 <_malloc_r+0x54>
 80105ea:	4c20      	ldr	r4, [pc, #128]	; (801066c <_malloc_r+0xb0>)
 80105ec:	6823      	ldr	r3, [r4, #0]
 80105ee:	b91b      	cbnz	r3, 80105f8 <_malloc_r+0x3c>
 80105f0:	4630      	mov	r0, r6
 80105f2:	f000 facf 	bl	8010b94 <_sbrk_r>
 80105f6:	6020      	str	r0, [r4, #0]
 80105f8:	4629      	mov	r1, r5
 80105fa:	4630      	mov	r0, r6
 80105fc:	f000 faca 	bl	8010b94 <_sbrk_r>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d124      	bne.n	801064e <_malloc_r+0x92>
 8010604:	230c      	movs	r3, #12
 8010606:	6033      	str	r3, [r6, #0]
 8010608:	4630      	mov	r0, r6
 801060a:	f000 fba5 	bl	8010d58 <__malloc_unlock>
 801060e:	e7e4      	b.n	80105da <_malloc_r+0x1e>
 8010610:	680b      	ldr	r3, [r1, #0]
 8010612:	1b5b      	subs	r3, r3, r5
 8010614:	d418      	bmi.n	8010648 <_malloc_r+0x8c>
 8010616:	2b0b      	cmp	r3, #11
 8010618:	d90f      	bls.n	801063a <_malloc_r+0x7e>
 801061a:	600b      	str	r3, [r1, #0]
 801061c:	50cd      	str	r5, [r1, r3]
 801061e:	18cc      	adds	r4, r1, r3
 8010620:	4630      	mov	r0, r6
 8010622:	f000 fb99 	bl	8010d58 <__malloc_unlock>
 8010626:	f104 000b 	add.w	r0, r4, #11
 801062a:	1d23      	adds	r3, r4, #4
 801062c:	f020 0007 	bic.w	r0, r0, #7
 8010630:	1ac3      	subs	r3, r0, r3
 8010632:	d0d3      	beq.n	80105dc <_malloc_r+0x20>
 8010634:	425a      	negs	r2, r3
 8010636:	50e2      	str	r2, [r4, r3]
 8010638:	e7d0      	b.n	80105dc <_malloc_r+0x20>
 801063a:	428c      	cmp	r4, r1
 801063c:	684b      	ldr	r3, [r1, #4]
 801063e:	bf16      	itet	ne
 8010640:	6063      	strne	r3, [r4, #4]
 8010642:	6013      	streq	r3, [r2, #0]
 8010644:	460c      	movne	r4, r1
 8010646:	e7eb      	b.n	8010620 <_malloc_r+0x64>
 8010648:	460c      	mov	r4, r1
 801064a:	6849      	ldr	r1, [r1, #4]
 801064c:	e7cc      	b.n	80105e8 <_malloc_r+0x2c>
 801064e:	1cc4      	adds	r4, r0, #3
 8010650:	f024 0403 	bic.w	r4, r4, #3
 8010654:	42a0      	cmp	r0, r4
 8010656:	d005      	beq.n	8010664 <_malloc_r+0xa8>
 8010658:	1a21      	subs	r1, r4, r0
 801065a:	4630      	mov	r0, r6
 801065c:	f000 fa9a 	bl	8010b94 <_sbrk_r>
 8010660:	3001      	adds	r0, #1
 8010662:	d0cf      	beq.n	8010604 <_malloc_r+0x48>
 8010664:	6025      	str	r5, [r4, #0]
 8010666:	e7db      	b.n	8010620 <_malloc_r+0x64>
 8010668:	2001ebcc 	.word	0x2001ebcc
 801066c:	2001ebd0 	.word	0x2001ebd0

08010670 <__ssputs_r>:
 8010670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010674:	688e      	ldr	r6, [r1, #8]
 8010676:	429e      	cmp	r6, r3
 8010678:	4682      	mov	sl, r0
 801067a:	460c      	mov	r4, r1
 801067c:	4690      	mov	r8, r2
 801067e:	4699      	mov	r9, r3
 8010680:	d837      	bhi.n	80106f2 <__ssputs_r+0x82>
 8010682:	898a      	ldrh	r2, [r1, #12]
 8010684:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010688:	d031      	beq.n	80106ee <__ssputs_r+0x7e>
 801068a:	6825      	ldr	r5, [r4, #0]
 801068c:	6909      	ldr	r1, [r1, #16]
 801068e:	1a6f      	subs	r7, r5, r1
 8010690:	6965      	ldr	r5, [r4, #20]
 8010692:	2302      	movs	r3, #2
 8010694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010698:	fb95 f5f3 	sdiv	r5, r5, r3
 801069c:	f109 0301 	add.w	r3, r9, #1
 80106a0:	443b      	add	r3, r7
 80106a2:	429d      	cmp	r5, r3
 80106a4:	bf38      	it	cc
 80106a6:	461d      	movcc	r5, r3
 80106a8:	0553      	lsls	r3, r2, #21
 80106aa:	d530      	bpl.n	801070e <__ssputs_r+0x9e>
 80106ac:	4629      	mov	r1, r5
 80106ae:	f7ff ff85 	bl	80105bc <_malloc_r>
 80106b2:	4606      	mov	r6, r0
 80106b4:	b950      	cbnz	r0, 80106cc <__ssputs_r+0x5c>
 80106b6:	230c      	movs	r3, #12
 80106b8:	f8ca 3000 	str.w	r3, [sl]
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106c2:	81a3      	strh	r3, [r4, #12]
 80106c4:	f04f 30ff 	mov.w	r0, #4294967295
 80106c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106cc:	463a      	mov	r2, r7
 80106ce:	6921      	ldr	r1, [r4, #16]
 80106d0:	f7fc f93c 	bl	800c94c <memcpy>
 80106d4:	89a3      	ldrh	r3, [r4, #12]
 80106d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106de:	81a3      	strh	r3, [r4, #12]
 80106e0:	6126      	str	r6, [r4, #16]
 80106e2:	6165      	str	r5, [r4, #20]
 80106e4:	443e      	add	r6, r7
 80106e6:	1bed      	subs	r5, r5, r7
 80106e8:	6026      	str	r6, [r4, #0]
 80106ea:	60a5      	str	r5, [r4, #8]
 80106ec:	464e      	mov	r6, r9
 80106ee:	454e      	cmp	r6, r9
 80106f0:	d900      	bls.n	80106f4 <__ssputs_r+0x84>
 80106f2:	464e      	mov	r6, r9
 80106f4:	4632      	mov	r2, r6
 80106f6:	4641      	mov	r1, r8
 80106f8:	6820      	ldr	r0, [r4, #0]
 80106fa:	f000 fb13 	bl	8010d24 <memmove>
 80106fe:	68a3      	ldr	r3, [r4, #8]
 8010700:	1b9b      	subs	r3, r3, r6
 8010702:	60a3      	str	r3, [r4, #8]
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	441e      	add	r6, r3
 8010708:	6026      	str	r6, [r4, #0]
 801070a:	2000      	movs	r0, #0
 801070c:	e7dc      	b.n	80106c8 <__ssputs_r+0x58>
 801070e:	462a      	mov	r2, r5
 8010710:	f000 fb23 	bl	8010d5a <_realloc_r>
 8010714:	4606      	mov	r6, r0
 8010716:	2800      	cmp	r0, #0
 8010718:	d1e2      	bne.n	80106e0 <__ssputs_r+0x70>
 801071a:	6921      	ldr	r1, [r4, #16]
 801071c:	4650      	mov	r0, sl
 801071e:	f7ff feff 	bl	8010520 <_free_r>
 8010722:	e7c8      	b.n	80106b6 <__ssputs_r+0x46>

08010724 <_svfiprintf_r>:
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010728:	461d      	mov	r5, r3
 801072a:	898b      	ldrh	r3, [r1, #12]
 801072c:	061f      	lsls	r7, r3, #24
 801072e:	b09d      	sub	sp, #116	; 0x74
 8010730:	4680      	mov	r8, r0
 8010732:	460c      	mov	r4, r1
 8010734:	4616      	mov	r6, r2
 8010736:	d50f      	bpl.n	8010758 <_svfiprintf_r+0x34>
 8010738:	690b      	ldr	r3, [r1, #16]
 801073a:	b96b      	cbnz	r3, 8010758 <_svfiprintf_r+0x34>
 801073c:	2140      	movs	r1, #64	; 0x40
 801073e:	f7ff ff3d 	bl	80105bc <_malloc_r>
 8010742:	6020      	str	r0, [r4, #0]
 8010744:	6120      	str	r0, [r4, #16]
 8010746:	b928      	cbnz	r0, 8010754 <_svfiprintf_r+0x30>
 8010748:	230c      	movs	r3, #12
 801074a:	f8c8 3000 	str.w	r3, [r8]
 801074e:	f04f 30ff 	mov.w	r0, #4294967295
 8010752:	e0c8      	b.n	80108e6 <_svfiprintf_r+0x1c2>
 8010754:	2340      	movs	r3, #64	; 0x40
 8010756:	6163      	str	r3, [r4, #20]
 8010758:	2300      	movs	r3, #0
 801075a:	9309      	str	r3, [sp, #36]	; 0x24
 801075c:	2320      	movs	r3, #32
 801075e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010762:	2330      	movs	r3, #48	; 0x30
 8010764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010768:	9503      	str	r5, [sp, #12]
 801076a:	f04f 0b01 	mov.w	fp, #1
 801076e:	4637      	mov	r7, r6
 8010770:	463d      	mov	r5, r7
 8010772:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010776:	b10b      	cbz	r3, 801077c <_svfiprintf_r+0x58>
 8010778:	2b25      	cmp	r3, #37	; 0x25
 801077a:	d13e      	bne.n	80107fa <_svfiprintf_r+0xd6>
 801077c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010780:	d00b      	beq.n	801079a <_svfiprintf_r+0x76>
 8010782:	4653      	mov	r3, sl
 8010784:	4632      	mov	r2, r6
 8010786:	4621      	mov	r1, r4
 8010788:	4640      	mov	r0, r8
 801078a:	f7ff ff71 	bl	8010670 <__ssputs_r>
 801078e:	3001      	adds	r0, #1
 8010790:	f000 80a4 	beq.w	80108dc <_svfiprintf_r+0x1b8>
 8010794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010796:	4453      	add	r3, sl
 8010798:	9309      	str	r3, [sp, #36]	; 0x24
 801079a:	783b      	ldrb	r3, [r7, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	f000 809d 	beq.w	80108dc <_svfiprintf_r+0x1b8>
 80107a2:	2300      	movs	r3, #0
 80107a4:	f04f 32ff 	mov.w	r2, #4294967295
 80107a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107ac:	9304      	str	r3, [sp, #16]
 80107ae:	9307      	str	r3, [sp, #28]
 80107b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80107b4:	931a      	str	r3, [sp, #104]	; 0x68
 80107b6:	462f      	mov	r7, r5
 80107b8:	2205      	movs	r2, #5
 80107ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80107be:	4850      	ldr	r0, [pc, #320]	; (8010900 <_svfiprintf_r+0x1dc>)
 80107c0:	f7ef fd0e 	bl	80001e0 <memchr>
 80107c4:	9b04      	ldr	r3, [sp, #16]
 80107c6:	b9d0      	cbnz	r0, 80107fe <_svfiprintf_r+0xda>
 80107c8:	06d9      	lsls	r1, r3, #27
 80107ca:	bf44      	itt	mi
 80107cc:	2220      	movmi	r2, #32
 80107ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80107d2:	071a      	lsls	r2, r3, #28
 80107d4:	bf44      	itt	mi
 80107d6:	222b      	movmi	r2, #43	; 0x2b
 80107d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80107dc:	782a      	ldrb	r2, [r5, #0]
 80107de:	2a2a      	cmp	r2, #42	; 0x2a
 80107e0:	d015      	beq.n	801080e <_svfiprintf_r+0xea>
 80107e2:	9a07      	ldr	r2, [sp, #28]
 80107e4:	462f      	mov	r7, r5
 80107e6:	2000      	movs	r0, #0
 80107e8:	250a      	movs	r5, #10
 80107ea:	4639      	mov	r1, r7
 80107ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107f0:	3b30      	subs	r3, #48	; 0x30
 80107f2:	2b09      	cmp	r3, #9
 80107f4:	d94d      	bls.n	8010892 <_svfiprintf_r+0x16e>
 80107f6:	b1b8      	cbz	r0, 8010828 <_svfiprintf_r+0x104>
 80107f8:	e00f      	b.n	801081a <_svfiprintf_r+0xf6>
 80107fa:	462f      	mov	r7, r5
 80107fc:	e7b8      	b.n	8010770 <_svfiprintf_r+0x4c>
 80107fe:	4a40      	ldr	r2, [pc, #256]	; (8010900 <_svfiprintf_r+0x1dc>)
 8010800:	1a80      	subs	r0, r0, r2
 8010802:	fa0b f000 	lsl.w	r0, fp, r0
 8010806:	4318      	orrs	r0, r3
 8010808:	9004      	str	r0, [sp, #16]
 801080a:	463d      	mov	r5, r7
 801080c:	e7d3      	b.n	80107b6 <_svfiprintf_r+0x92>
 801080e:	9a03      	ldr	r2, [sp, #12]
 8010810:	1d11      	adds	r1, r2, #4
 8010812:	6812      	ldr	r2, [r2, #0]
 8010814:	9103      	str	r1, [sp, #12]
 8010816:	2a00      	cmp	r2, #0
 8010818:	db01      	blt.n	801081e <_svfiprintf_r+0xfa>
 801081a:	9207      	str	r2, [sp, #28]
 801081c:	e004      	b.n	8010828 <_svfiprintf_r+0x104>
 801081e:	4252      	negs	r2, r2
 8010820:	f043 0302 	orr.w	r3, r3, #2
 8010824:	9207      	str	r2, [sp, #28]
 8010826:	9304      	str	r3, [sp, #16]
 8010828:	783b      	ldrb	r3, [r7, #0]
 801082a:	2b2e      	cmp	r3, #46	; 0x2e
 801082c:	d10c      	bne.n	8010848 <_svfiprintf_r+0x124>
 801082e:	787b      	ldrb	r3, [r7, #1]
 8010830:	2b2a      	cmp	r3, #42	; 0x2a
 8010832:	d133      	bne.n	801089c <_svfiprintf_r+0x178>
 8010834:	9b03      	ldr	r3, [sp, #12]
 8010836:	1d1a      	adds	r2, r3, #4
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	9203      	str	r2, [sp, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	bfb8      	it	lt
 8010840:	f04f 33ff 	movlt.w	r3, #4294967295
 8010844:	3702      	adds	r7, #2
 8010846:	9305      	str	r3, [sp, #20]
 8010848:	4d2e      	ldr	r5, [pc, #184]	; (8010904 <_svfiprintf_r+0x1e0>)
 801084a:	7839      	ldrb	r1, [r7, #0]
 801084c:	2203      	movs	r2, #3
 801084e:	4628      	mov	r0, r5
 8010850:	f7ef fcc6 	bl	80001e0 <memchr>
 8010854:	b138      	cbz	r0, 8010866 <_svfiprintf_r+0x142>
 8010856:	2340      	movs	r3, #64	; 0x40
 8010858:	1b40      	subs	r0, r0, r5
 801085a:	fa03 f000 	lsl.w	r0, r3, r0
 801085e:	9b04      	ldr	r3, [sp, #16]
 8010860:	4303      	orrs	r3, r0
 8010862:	3701      	adds	r7, #1
 8010864:	9304      	str	r3, [sp, #16]
 8010866:	7839      	ldrb	r1, [r7, #0]
 8010868:	4827      	ldr	r0, [pc, #156]	; (8010908 <_svfiprintf_r+0x1e4>)
 801086a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801086e:	2206      	movs	r2, #6
 8010870:	1c7e      	adds	r6, r7, #1
 8010872:	f7ef fcb5 	bl	80001e0 <memchr>
 8010876:	2800      	cmp	r0, #0
 8010878:	d038      	beq.n	80108ec <_svfiprintf_r+0x1c8>
 801087a:	4b24      	ldr	r3, [pc, #144]	; (801090c <_svfiprintf_r+0x1e8>)
 801087c:	bb13      	cbnz	r3, 80108c4 <_svfiprintf_r+0x1a0>
 801087e:	9b03      	ldr	r3, [sp, #12]
 8010880:	3307      	adds	r3, #7
 8010882:	f023 0307 	bic.w	r3, r3, #7
 8010886:	3308      	adds	r3, #8
 8010888:	9303      	str	r3, [sp, #12]
 801088a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801088c:	444b      	add	r3, r9
 801088e:	9309      	str	r3, [sp, #36]	; 0x24
 8010890:	e76d      	b.n	801076e <_svfiprintf_r+0x4a>
 8010892:	fb05 3202 	mla	r2, r5, r2, r3
 8010896:	2001      	movs	r0, #1
 8010898:	460f      	mov	r7, r1
 801089a:	e7a6      	b.n	80107ea <_svfiprintf_r+0xc6>
 801089c:	2300      	movs	r3, #0
 801089e:	3701      	adds	r7, #1
 80108a0:	9305      	str	r3, [sp, #20]
 80108a2:	4619      	mov	r1, r3
 80108a4:	250a      	movs	r5, #10
 80108a6:	4638      	mov	r0, r7
 80108a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108ac:	3a30      	subs	r2, #48	; 0x30
 80108ae:	2a09      	cmp	r2, #9
 80108b0:	d903      	bls.n	80108ba <_svfiprintf_r+0x196>
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d0c8      	beq.n	8010848 <_svfiprintf_r+0x124>
 80108b6:	9105      	str	r1, [sp, #20]
 80108b8:	e7c6      	b.n	8010848 <_svfiprintf_r+0x124>
 80108ba:	fb05 2101 	mla	r1, r5, r1, r2
 80108be:	2301      	movs	r3, #1
 80108c0:	4607      	mov	r7, r0
 80108c2:	e7f0      	b.n	80108a6 <_svfiprintf_r+0x182>
 80108c4:	ab03      	add	r3, sp, #12
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	4622      	mov	r2, r4
 80108ca:	4b11      	ldr	r3, [pc, #68]	; (8010910 <_svfiprintf_r+0x1ec>)
 80108cc:	a904      	add	r1, sp, #16
 80108ce:	4640      	mov	r0, r8
 80108d0:	f7fc f8e4 	bl	800ca9c <_printf_float>
 80108d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80108d8:	4681      	mov	r9, r0
 80108da:	d1d6      	bne.n	801088a <_svfiprintf_r+0x166>
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	065b      	lsls	r3, r3, #25
 80108e0:	f53f af35 	bmi.w	801074e <_svfiprintf_r+0x2a>
 80108e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108e6:	b01d      	add	sp, #116	; 0x74
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	ab03      	add	r3, sp, #12
 80108ee:	9300      	str	r3, [sp, #0]
 80108f0:	4622      	mov	r2, r4
 80108f2:	4b07      	ldr	r3, [pc, #28]	; (8010910 <_svfiprintf_r+0x1ec>)
 80108f4:	a904      	add	r1, sp, #16
 80108f6:	4640      	mov	r0, r8
 80108f8:	f7fc fb86 	bl	800d008 <_printf_i>
 80108fc:	e7ea      	b.n	80108d4 <_svfiprintf_r+0x1b0>
 80108fe:	bf00      	nop
 8010900:	08011634 	.word	0x08011634
 8010904:	0801163a 	.word	0x0801163a
 8010908:	0801163e 	.word	0x0801163e
 801090c:	0800ca9d 	.word	0x0800ca9d
 8010910:	08010671 	.word	0x08010671

08010914 <__sfputc_r>:
 8010914:	6893      	ldr	r3, [r2, #8]
 8010916:	3b01      	subs	r3, #1
 8010918:	2b00      	cmp	r3, #0
 801091a:	b410      	push	{r4}
 801091c:	6093      	str	r3, [r2, #8]
 801091e:	da08      	bge.n	8010932 <__sfputc_r+0x1e>
 8010920:	6994      	ldr	r4, [r2, #24]
 8010922:	42a3      	cmp	r3, r4
 8010924:	db01      	blt.n	801092a <__sfputc_r+0x16>
 8010926:	290a      	cmp	r1, #10
 8010928:	d103      	bne.n	8010932 <__sfputc_r+0x1e>
 801092a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801092e:	f7fd bdb1 	b.w	800e494 <__swbuf_r>
 8010932:	6813      	ldr	r3, [r2, #0]
 8010934:	1c58      	adds	r0, r3, #1
 8010936:	6010      	str	r0, [r2, #0]
 8010938:	7019      	strb	r1, [r3, #0]
 801093a:	4608      	mov	r0, r1
 801093c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010940:	4770      	bx	lr

08010942 <__sfputs_r>:
 8010942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010944:	4606      	mov	r6, r0
 8010946:	460f      	mov	r7, r1
 8010948:	4614      	mov	r4, r2
 801094a:	18d5      	adds	r5, r2, r3
 801094c:	42ac      	cmp	r4, r5
 801094e:	d101      	bne.n	8010954 <__sfputs_r+0x12>
 8010950:	2000      	movs	r0, #0
 8010952:	e007      	b.n	8010964 <__sfputs_r+0x22>
 8010954:	463a      	mov	r2, r7
 8010956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801095a:	4630      	mov	r0, r6
 801095c:	f7ff ffda 	bl	8010914 <__sfputc_r>
 8010960:	1c43      	adds	r3, r0, #1
 8010962:	d1f3      	bne.n	801094c <__sfputs_r+0xa>
 8010964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010968 <_vfiprintf_r>:
 8010968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801096c:	460c      	mov	r4, r1
 801096e:	b09d      	sub	sp, #116	; 0x74
 8010970:	4617      	mov	r7, r2
 8010972:	461d      	mov	r5, r3
 8010974:	4606      	mov	r6, r0
 8010976:	b118      	cbz	r0, 8010980 <_vfiprintf_r+0x18>
 8010978:	6983      	ldr	r3, [r0, #24]
 801097a:	b90b      	cbnz	r3, 8010980 <_vfiprintf_r+0x18>
 801097c:	f7fe fd80 	bl	800f480 <__sinit>
 8010980:	4b7c      	ldr	r3, [pc, #496]	; (8010b74 <_vfiprintf_r+0x20c>)
 8010982:	429c      	cmp	r4, r3
 8010984:	d158      	bne.n	8010a38 <_vfiprintf_r+0xd0>
 8010986:	6874      	ldr	r4, [r6, #4]
 8010988:	89a3      	ldrh	r3, [r4, #12]
 801098a:	0718      	lsls	r0, r3, #28
 801098c:	d55e      	bpl.n	8010a4c <_vfiprintf_r+0xe4>
 801098e:	6923      	ldr	r3, [r4, #16]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d05b      	beq.n	8010a4c <_vfiprintf_r+0xe4>
 8010994:	2300      	movs	r3, #0
 8010996:	9309      	str	r3, [sp, #36]	; 0x24
 8010998:	2320      	movs	r3, #32
 801099a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801099e:	2330      	movs	r3, #48	; 0x30
 80109a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109a4:	9503      	str	r5, [sp, #12]
 80109a6:	f04f 0b01 	mov.w	fp, #1
 80109aa:	46b8      	mov	r8, r7
 80109ac:	4645      	mov	r5, r8
 80109ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80109b2:	b10b      	cbz	r3, 80109b8 <_vfiprintf_r+0x50>
 80109b4:	2b25      	cmp	r3, #37	; 0x25
 80109b6:	d154      	bne.n	8010a62 <_vfiprintf_r+0xfa>
 80109b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80109bc:	d00b      	beq.n	80109d6 <_vfiprintf_r+0x6e>
 80109be:	4653      	mov	r3, sl
 80109c0:	463a      	mov	r2, r7
 80109c2:	4621      	mov	r1, r4
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff ffbc 	bl	8010942 <__sfputs_r>
 80109ca:	3001      	adds	r0, #1
 80109cc:	f000 80c2 	beq.w	8010b54 <_vfiprintf_r+0x1ec>
 80109d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d2:	4453      	add	r3, sl
 80109d4:	9309      	str	r3, [sp, #36]	; 0x24
 80109d6:	f898 3000 	ldrb.w	r3, [r8]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 80ba 	beq.w	8010b54 <_vfiprintf_r+0x1ec>
 80109e0:	2300      	movs	r3, #0
 80109e2:	f04f 32ff 	mov.w	r2, #4294967295
 80109e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ea:	9304      	str	r3, [sp, #16]
 80109ec:	9307      	str	r3, [sp, #28]
 80109ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109f2:	931a      	str	r3, [sp, #104]	; 0x68
 80109f4:	46a8      	mov	r8, r5
 80109f6:	2205      	movs	r2, #5
 80109f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80109fc:	485e      	ldr	r0, [pc, #376]	; (8010b78 <_vfiprintf_r+0x210>)
 80109fe:	f7ef fbef 	bl	80001e0 <memchr>
 8010a02:	9b04      	ldr	r3, [sp, #16]
 8010a04:	bb78      	cbnz	r0, 8010a66 <_vfiprintf_r+0xfe>
 8010a06:	06d9      	lsls	r1, r3, #27
 8010a08:	bf44      	itt	mi
 8010a0a:	2220      	movmi	r2, #32
 8010a0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a10:	071a      	lsls	r2, r3, #28
 8010a12:	bf44      	itt	mi
 8010a14:	222b      	movmi	r2, #43	; 0x2b
 8010a16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a1a:	782a      	ldrb	r2, [r5, #0]
 8010a1c:	2a2a      	cmp	r2, #42	; 0x2a
 8010a1e:	d02a      	beq.n	8010a76 <_vfiprintf_r+0x10e>
 8010a20:	9a07      	ldr	r2, [sp, #28]
 8010a22:	46a8      	mov	r8, r5
 8010a24:	2000      	movs	r0, #0
 8010a26:	250a      	movs	r5, #10
 8010a28:	4641      	mov	r1, r8
 8010a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a2e:	3b30      	subs	r3, #48	; 0x30
 8010a30:	2b09      	cmp	r3, #9
 8010a32:	d969      	bls.n	8010b08 <_vfiprintf_r+0x1a0>
 8010a34:	b360      	cbz	r0, 8010a90 <_vfiprintf_r+0x128>
 8010a36:	e024      	b.n	8010a82 <_vfiprintf_r+0x11a>
 8010a38:	4b50      	ldr	r3, [pc, #320]	; (8010b7c <_vfiprintf_r+0x214>)
 8010a3a:	429c      	cmp	r4, r3
 8010a3c:	d101      	bne.n	8010a42 <_vfiprintf_r+0xda>
 8010a3e:	68b4      	ldr	r4, [r6, #8]
 8010a40:	e7a2      	b.n	8010988 <_vfiprintf_r+0x20>
 8010a42:	4b4f      	ldr	r3, [pc, #316]	; (8010b80 <_vfiprintf_r+0x218>)
 8010a44:	429c      	cmp	r4, r3
 8010a46:	bf08      	it	eq
 8010a48:	68f4      	ldreq	r4, [r6, #12]
 8010a4a:	e79d      	b.n	8010988 <_vfiprintf_r+0x20>
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	4630      	mov	r0, r6
 8010a50:	f7fd fd72 	bl	800e538 <__swsetup_r>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d09d      	beq.n	8010994 <_vfiprintf_r+0x2c>
 8010a58:	f04f 30ff 	mov.w	r0, #4294967295
 8010a5c:	b01d      	add	sp, #116	; 0x74
 8010a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a62:	46a8      	mov	r8, r5
 8010a64:	e7a2      	b.n	80109ac <_vfiprintf_r+0x44>
 8010a66:	4a44      	ldr	r2, [pc, #272]	; (8010b78 <_vfiprintf_r+0x210>)
 8010a68:	1a80      	subs	r0, r0, r2
 8010a6a:	fa0b f000 	lsl.w	r0, fp, r0
 8010a6e:	4318      	orrs	r0, r3
 8010a70:	9004      	str	r0, [sp, #16]
 8010a72:	4645      	mov	r5, r8
 8010a74:	e7be      	b.n	80109f4 <_vfiprintf_r+0x8c>
 8010a76:	9a03      	ldr	r2, [sp, #12]
 8010a78:	1d11      	adds	r1, r2, #4
 8010a7a:	6812      	ldr	r2, [r2, #0]
 8010a7c:	9103      	str	r1, [sp, #12]
 8010a7e:	2a00      	cmp	r2, #0
 8010a80:	db01      	blt.n	8010a86 <_vfiprintf_r+0x11e>
 8010a82:	9207      	str	r2, [sp, #28]
 8010a84:	e004      	b.n	8010a90 <_vfiprintf_r+0x128>
 8010a86:	4252      	negs	r2, r2
 8010a88:	f043 0302 	orr.w	r3, r3, #2
 8010a8c:	9207      	str	r2, [sp, #28]
 8010a8e:	9304      	str	r3, [sp, #16]
 8010a90:	f898 3000 	ldrb.w	r3, [r8]
 8010a94:	2b2e      	cmp	r3, #46	; 0x2e
 8010a96:	d10e      	bne.n	8010ab6 <_vfiprintf_r+0x14e>
 8010a98:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8010a9e:	d138      	bne.n	8010b12 <_vfiprintf_r+0x1aa>
 8010aa0:	9b03      	ldr	r3, [sp, #12]
 8010aa2:	1d1a      	adds	r2, r3, #4
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	9203      	str	r2, [sp, #12]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	bfb8      	it	lt
 8010aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ab0:	f108 0802 	add.w	r8, r8, #2
 8010ab4:	9305      	str	r3, [sp, #20]
 8010ab6:	4d33      	ldr	r5, [pc, #204]	; (8010b84 <_vfiprintf_r+0x21c>)
 8010ab8:	f898 1000 	ldrb.w	r1, [r8]
 8010abc:	2203      	movs	r2, #3
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f7ef fb8e 	bl	80001e0 <memchr>
 8010ac4:	b140      	cbz	r0, 8010ad8 <_vfiprintf_r+0x170>
 8010ac6:	2340      	movs	r3, #64	; 0x40
 8010ac8:	1b40      	subs	r0, r0, r5
 8010aca:	fa03 f000 	lsl.w	r0, r3, r0
 8010ace:	9b04      	ldr	r3, [sp, #16]
 8010ad0:	4303      	orrs	r3, r0
 8010ad2:	f108 0801 	add.w	r8, r8, #1
 8010ad6:	9304      	str	r3, [sp, #16]
 8010ad8:	f898 1000 	ldrb.w	r1, [r8]
 8010adc:	482a      	ldr	r0, [pc, #168]	; (8010b88 <_vfiprintf_r+0x220>)
 8010ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ae2:	2206      	movs	r2, #6
 8010ae4:	f108 0701 	add.w	r7, r8, #1
 8010ae8:	f7ef fb7a 	bl	80001e0 <memchr>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d037      	beq.n	8010b60 <_vfiprintf_r+0x1f8>
 8010af0:	4b26      	ldr	r3, [pc, #152]	; (8010b8c <_vfiprintf_r+0x224>)
 8010af2:	bb1b      	cbnz	r3, 8010b3c <_vfiprintf_r+0x1d4>
 8010af4:	9b03      	ldr	r3, [sp, #12]
 8010af6:	3307      	adds	r3, #7
 8010af8:	f023 0307 	bic.w	r3, r3, #7
 8010afc:	3308      	adds	r3, #8
 8010afe:	9303      	str	r3, [sp, #12]
 8010b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b02:	444b      	add	r3, r9
 8010b04:	9309      	str	r3, [sp, #36]	; 0x24
 8010b06:	e750      	b.n	80109aa <_vfiprintf_r+0x42>
 8010b08:	fb05 3202 	mla	r2, r5, r2, r3
 8010b0c:	2001      	movs	r0, #1
 8010b0e:	4688      	mov	r8, r1
 8010b10:	e78a      	b.n	8010a28 <_vfiprintf_r+0xc0>
 8010b12:	2300      	movs	r3, #0
 8010b14:	f108 0801 	add.w	r8, r8, #1
 8010b18:	9305      	str	r3, [sp, #20]
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	250a      	movs	r5, #10
 8010b1e:	4640      	mov	r0, r8
 8010b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b24:	3a30      	subs	r2, #48	; 0x30
 8010b26:	2a09      	cmp	r2, #9
 8010b28:	d903      	bls.n	8010b32 <_vfiprintf_r+0x1ca>
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d0c3      	beq.n	8010ab6 <_vfiprintf_r+0x14e>
 8010b2e:	9105      	str	r1, [sp, #20]
 8010b30:	e7c1      	b.n	8010ab6 <_vfiprintf_r+0x14e>
 8010b32:	fb05 2101 	mla	r1, r5, r1, r2
 8010b36:	2301      	movs	r3, #1
 8010b38:	4680      	mov	r8, r0
 8010b3a:	e7f0      	b.n	8010b1e <_vfiprintf_r+0x1b6>
 8010b3c:	ab03      	add	r3, sp, #12
 8010b3e:	9300      	str	r3, [sp, #0]
 8010b40:	4622      	mov	r2, r4
 8010b42:	4b13      	ldr	r3, [pc, #76]	; (8010b90 <_vfiprintf_r+0x228>)
 8010b44:	a904      	add	r1, sp, #16
 8010b46:	4630      	mov	r0, r6
 8010b48:	f7fb ffa8 	bl	800ca9c <_printf_float>
 8010b4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010b50:	4681      	mov	r9, r0
 8010b52:	d1d5      	bne.n	8010b00 <_vfiprintf_r+0x198>
 8010b54:	89a3      	ldrh	r3, [r4, #12]
 8010b56:	065b      	lsls	r3, r3, #25
 8010b58:	f53f af7e 	bmi.w	8010a58 <_vfiprintf_r+0xf0>
 8010b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b5e:	e77d      	b.n	8010a5c <_vfiprintf_r+0xf4>
 8010b60:	ab03      	add	r3, sp, #12
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	4622      	mov	r2, r4
 8010b66:	4b0a      	ldr	r3, [pc, #40]	; (8010b90 <_vfiprintf_r+0x228>)
 8010b68:	a904      	add	r1, sp, #16
 8010b6a:	4630      	mov	r0, r6
 8010b6c:	f7fc fa4c 	bl	800d008 <_printf_i>
 8010b70:	e7ec      	b.n	8010b4c <_vfiprintf_r+0x1e4>
 8010b72:	bf00      	nop
 8010b74:	080114e8 	.word	0x080114e8
 8010b78:	08011634 	.word	0x08011634
 8010b7c:	08011508 	.word	0x08011508
 8010b80:	080114c8 	.word	0x080114c8
 8010b84:	0801163a 	.word	0x0801163a
 8010b88:	0801163e 	.word	0x0801163e
 8010b8c:	0800ca9d 	.word	0x0800ca9d
 8010b90:	08010943 	.word	0x08010943

08010b94 <_sbrk_r>:
 8010b94:	b538      	push	{r3, r4, r5, lr}
 8010b96:	4c06      	ldr	r4, [pc, #24]	; (8010bb0 <_sbrk_r+0x1c>)
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	4608      	mov	r0, r1
 8010b9e:	6023      	str	r3, [r4, #0]
 8010ba0:	f7f5 fd4e 	bl	8006640 <_sbrk>
 8010ba4:	1c43      	adds	r3, r0, #1
 8010ba6:	d102      	bne.n	8010bae <_sbrk_r+0x1a>
 8010ba8:	6823      	ldr	r3, [r4, #0]
 8010baa:	b103      	cbz	r3, 8010bae <_sbrk_r+0x1a>
 8010bac:	602b      	str	r3, [r5, #0]
 8010bae:	bd38      	pop	{r3, r4, r5, pc}
 8010bb0:	2001f114 	.word	0x2001f114

08010bb4 <__sread>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	460c      	mov	r4, r1
 8010bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bbc:	f000 f8f4 	bl	8010da8 <_read_r>
 8010bc0:	2800      	cmp	r0, #0
 8010bc2:	bfab      	itete	ge
 8010bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8010bc8:	181b      	addge	r3, r3, r0
 8010bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010bce:	bfac      	ite	ge
 8010bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010bd2:	81a3      	strhlt	r3, [r4, #12]
 8010bd4:	bd10      	pop	{r4, pc}

08010bd6 <__swrite>:
 8010bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bda:	461f      	mov	r7, r3
 8010bdc:	898b      	ldrh	r3, [r1, #12]
 8010bde:	05db      	lsls	r3, r3, #23
 8010be0:	4605      	mov	r5, r0
 8010be2:	460c      	mov	r4, r1
 8010be4:	4616      	mov	r6, r2
 8010be6:	d505      	bpl.n	8010bf4 <__swrite+0x1e>
 8010be8:	2302      	movs	r3, #2
 8010bea:	2200      	movs	r2, #0
 8010bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bf0:	f000 f886 	bl	8010d00 <_lseek_r>
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bfe:	81a3      	strh	r3, [r4, #12]
 8010c00:	4632      	mov	r2, r6
 8010c02:	463b      	mov	r3, r7
 8010c04:	4628      	mov	r0, r5
 8010c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c0a:	f000 b835 	b.w	8010c78 <_write_r>

08010c0e <__sseek>:
 8010c0e:	b510      	push	{r4, lr}
 8010c10:	460c      	mov	r4, r1
 8010c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c16:	f000 f873 	bl	8010d00 <_lseek_r>
 8010c1a:	1c43      	adds	r3, r0, #1
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	bf15      	itete	ne
 8010c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c2a:	81a3      	strheq	r3, [r4, #12]
 8010c2c:	bf18      	it	ne
 8010c2e:	81a3      	strhne	r3, [r4, #12]
 8010c30:	bd10      	pop	{r4, pc}

08010c32 <__sclose>:
 8010c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c36:	f000 b831 	b.w	8010c9c <_close_r>

08010c3a <strncmp>:
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	b16a      	cbz	r2, 8010c5a <strncmp+0x20>
 8010c3e:	3901      	subs	r1, #1
 8010c40:	1884      	adds	r4, r0, r2
 8010c42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010c46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d103      	bne.n	8010c56 <strncmp+0x1c>
 8010c4e:	42a0      	cmp	r0, r4
 8010c50:	d001      	beq.n	8010c56 <strncmp+0x1c>
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1f5      	bne.n	8010c42 <strncmp+0x8>
 8010c56:	1a98      	subs	r0, r3, r2
 8010c58:	bd10      	pop	{r4, pc}
 8010c5a:	4610      	mov	r0, r2
 8010c5c:	e7fc      	b.n	8010c58 <strncmp+0x1e>

08010c5e <__ascii_wctomb>:
 8010c5e:	b149      	cbz	r1, 8010c74 <__ascii_wctomb+0x16>
 8010c60:	2aff      	cmp	r2, #255	; 0xff
 8010c62:	bf85      	ittet	hi
 8010c64:	238a      	movhi	r3, #138	; 0x8a
 8010c66:	6003      	strhi	r3, [r0, #0]
 8010c68:	700a      	strbls	r2, [r1, #0]
 8010c6a:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c6e:	bf98      	it	ls
 8010c70:	2001      	movls	r0, #1
 8010c72:	4770      	bx	lr
 8010c74:	4608      	mov	r0, r1
 8010c76:	4770      	bx	lr

08010c78 <_write_r>:
 8010c78:	b538      	push	{r3, r4, r5, lr}
 8010c7a:	4c07      	ldr	r4, [pc, #28]	; (8010c98 <_write_r+0x20>)
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	4608      	mov	r0, r1
 8010c80:	4611      	mov	r1, r2
 8010c82:	2200      	movs	r2, #0
 8010c84:	6022      	str	r2, [r4, #0]
 8010c86:	461a      	mov	r2, r3
 8010c88:	f7f5 fc89 	bl	800659e <_write>
 8010c8c:	1c43      	adds	r3, r0, #1
 8010c8e:	d102      	bne.n	8010c96 <_write_r+0x1e>
 8010c90:	6823      	ldr	r3, [r4, #0]
 8010c92:	b103      	cbz	r3, 8010c96 <_write_r+0x1e>
 8010c94:	602b      	str	r3, [r5, #0]
 8010c96:	bd38      	pop	{r3, r4, r5, pc}
 8010c98:	2001f114 	.word	0x2001f114

08010c9c <_close_r>:
 8010c9c:	b538      	push	{r3, r4, r5, lr}
 8010c9e:	4c06      	ldr	r4, [pc, #24]	; (8010cb8 <_close_r+0x1c>)
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	4605      	mov	r5, r0
 8010ca4:	4608      	mov	r0, r1
 8010ca6:	6023      	str	r3, [r4, #0]
 8010ca8:	f7f5 fc95 	bl	80065d6 <_close>
 8010cac:	1c43      	adds	r3, r0, #1
 8010cae:	d102      	bne.n	8010cb6 <_close_r+0x1a>
 8010cb0:	6823      	ldr	r3, [r4, #0]
 8010cb2:	b103      	cbz	r3, 8010cb6 <_close_r+0x1a>
 8010cb4:	602b      	str	r3, [r5, #0]
 8010cb6:	bd38      	pop	{r3, r4, r5, pc}
 8010cb8:	2001f114 	.word	0x2001f114

08010cbc <_fstat_r>:
 8010cbc:	b538      	push	{r3, r4, r5, lr}
 8010cbe:	4c07      	ldr	r4, [pc, #28]	; (8010cdc <_fstat_r+0x20>)
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	4605      	mov	r5, r0
 8010cc4:	4608      	mov	r0, r1
 8010cc6:	4611      	mov	r1, r2
 8010cc8:	6023      	str	r3, [r4, #0]
 8010cca:	f7f5 fc90 	bl	80065ee <_fstat>
 8010cce:	1c43      	adds	r3, r0, #1
 8010cd0:	d102      	bne.n	8010cd8 <_fstat_r+0x1c>
 8010cd2:	6823      	ldr	r3, [r4, #0]
 8010cd4:	b103      	cbz	r3, 8010cd8 <_fstat_r+0x1c>
 8010cd6:	602b      	str	r3, [r5, #0]
 8010cd8:	bd38      	pop	{r3, r4, r5, pc}
 8010cda:	bf00      	nop
 8010cdc:	2001f114 	.word	0x2001f114

08010ce0 <_isatty_r>:
 8010ce0:	b538      	push	{r3, r4, r5, lr}
 8010ce2:	4c06      	ldr	r4, [pc, #24]	; (8010cfc <_isatty_r+0x1c>)
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	4605      	mov	r5, r0
 8010ce8:	4608      	mov	r0, r1
 8010cea:	6023      	str	r3, [r4, #0]
 8010cec:	f7f5 fc8f 	bl	800660e <_isatty>
 8010cf0:	1c43      	adds	r3, r0, #1
 8010cf2:	d102      	bne.n	8010cfa <_isatty_r+0x1a>
 8010cf4:	6823      	ldr	r3, [r4, #0]
 8010cf6:	b103      	cbz	r3, 8010cfa <_isatty_r+0x1a>
 8010cf8:	602b      	str	r3, [r5, #0]
 8010cfa:	bd38      	pop	{r3, r4, r5, pc}
 8010cfc:	2001f114 	.word	0x2001f114

08010d00 <_lseek_r>:
 8010d00:	b538      	push	{r3, r4, r5, lr}
 8010d02:	4c07      	ldr	r4, [pc, #28]	; (8010d20 <_lseek_r+0x20>)
 8010d04:	4605      	mov	r5, r0
 8010d06:	4608      	mov	r0, r1
 8010d08:	4611      	mov	r1, r2
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	6022      	str	r2, [r4, #0]
 8010d0e:	461a      	mov	r2, r3
 8010d10:	f7f5 fc88 	bl	8006624 <_lseek>
 8010d14:	1c43      	adds	r3, r0, #1
 8010d16:	d102      	bne.n	8010d1e <_lseek_r+0x1e>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	b103      	cbz	r3, 8010d1e <_lseek_r+0x1e>
 8010d1c:	602b      	str	r3, [r5, #0]
 8010d1e:	bd38      	pop	{r3, r4, r5, pc}
 8010d20:	2001f114 	.word	0x2001f114

08010d24 <memmove>:
 8010d24:	4288      	cmp	r0, r1
 8010d26:	b510      	push	{r4, lr}
 8010d28:	eb01 0302 	add.w	r3, r1, r2
 8010d2c:	d807      	bhi.n	8010d3e <memmove+0x1a>
 8010d2e:	1e42      	subs	r2, r0, #1
 8010d30:	4299      	cmp	r1, r3
 8010d32:	d00a      	beq.n	8010d4a <memmove+0x26>
 8010d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010d3c:	e7f8      	b.n	8010d30 <memmove+0xc>
 8010d3e:	4283      	cmp	r3, r0
 8010d40:	d9f5      	bls.n	8010d2e <memmove+0xa>
 8010d42:	1881      	adds	r1, r0, r2
 8010d44:	1ad2      	subs	r2, r2, r3
 8010d46:	42d3      	cmn	r3, r2
 8010d48:	d100      	bne.n	8010d4c <memmove+0x28>
 8010d4a:	bd10      	pop	{r4, pc}
 8010d4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010d54:	e7f7      	b.n	8010d46 <memmove+0x22>

08010d56 <__malloc_lock>:
 8010d56:	4770      	bx	lr

08010d58 <__malloc_unlock>:
 8010d58:	4770      	bx	lr

08010d5a <_realloc_r>:
 8010d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d5c:	4607      	mov	r7, r0
 8010d5e:	4614      	mov	r4, r2
 8010d60:	460e      	mov	r6, r1
 8010d62:	b921      	cbnz	r1, 8010d6e <_realloc_r+0x14>
 8010d64:	4611      	mov	r1, r2
 8010d66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d6a:	f7ff bc27 	b.w	80105bc <_malloc_r>
 8010d6e:	b922      	cbnz	r2, 8010d7a <_realloc_r+0x20>
 8010d70:	f7ff fbd6 	bl	8010520 <_free_r>
 8010d74:	4625      	mov	r5, r4
 8010d76:	4628      	mov	r0, r5
 8010d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d7a:	f000 f827 	bl	8010dcc <_malloc_usable_size_r>
 8010d7e:	42a0      	cmp	r0, r4
 8010d80:	d20f      	bcs.n	8010da2 <_realloc_r+0x48>
 8010d82:	4621      	mov	r1, r4
 8010d84:	4638      	mov	r0, r7
 8010d86:	f7ff fc19 	bl	80105bc <_malloc_r>
 8010d8a:	4605      	mov	r5, r0
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	d0f2      	beq.n	8010d76 <_realloc_r+0x1c>
 8010d90:	4631      	mov	r1, r6
 8010d92:	4622      	mov	r2, r4
 8010d94:	f7fb fdda 	bl	800c94c <memcpy>
 8010d98:	4631      	mov	r1, r6
 8010d9a:	4638      	mov	r0, r7
 8010d9c:	f7ff fbc0 	bl	8010520 <_free_r>
 8010da0:	e7e9      	b.n	8010d76 <_realloc_r+0x1c>
 8010da2:	4635      	mov	r5, r6
 8010da4:	e7e7      	b.n	8010d76 <_realloc_r+0x1c>
	...

08010da8 <_read_r>:
 8010da8:	b538      	push	{r3, r4, r5, lr}
 8010daa:	4c07      	ldr	r4, [pc, #28]	; (8010dc8 <_read_r+0x20>)
 8010dac:	4605      	mov	r5, r0
 8010dae:	4608      	mov	r0, r1
 8010db0:	4611      	mov	r1, r2
 8010db2:	2200      	movs	r2, #0
 8010db4:	6022      	str	r2, [r4, #0]
 8010db6:	461a      	mov	r2, r3
 8010db8:	f7f5 fbd4 	bl	8006564 <_read>
 8010dbc:	1c43      	adds	r3, r0, #1
 8010dbe:	d102      	bne.n	8010dc6 <_read_r+0x1e>
 8010dc0:	6823      	ldr	r3, [r4, #0]
 8010dc2:	b103      	cbz	r3, 8010dc6 <_read_r+0x1e>
 8010dc4:	602b      	str	r3, [r5, #0]
 8010dc6:	bd38      	pop	{r3, r4, r5, pc}
 8010dc8:	2001f114 	.word	0x2001f114

08010dcc <_malloc_usable_size_r>:
 8010dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010dd0:	1f18      	subs	r0, r3, #4
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	bfbc      	itt	lt
 8010dd6:	580b      	ldrlt	r3, [r1, r0]
 8010dd8:	18c0      	addlt	r0, r0, r3
 8010dda:	4770      	bx	lr

08010ddc <_init>:
 8010ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dde:	bf00      	nop
 8010de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010de2:	bc08      	pop	{r3}
 8010de4:	469e      	mov	lr, r3
 8010de6:	4770      	bx	lr

08010de8 <_fini>:
 8010de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dea:	bf00      	nop
 8010dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dee:	bc08      	pop	{r3}
 8010df0:	469e      	mov	lr, r3
 8010df2:	4770      	bx	lr


robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010564  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080106f8  080106f8  000206f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cc8  08010cc8  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08010cc8  08010cc8  00020cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cd0  08010cd0  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cd0  08010cd0  00020cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cd4  08010cd4  00020cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010cd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001626c  20000210  08010ee8  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001647c  08010ee8  0003647c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022b2a  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000491b  00000000  00000000  00052d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001990  00000000  00000000  00057688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  00059018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a9e  00000000  00000000  0005a7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017333  00000000  00000000  0007f256  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb457  00000000  00000000  00096589  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001619e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e84  00000000  00000000  00161a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080106dc 	.word	0x080106dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	080106dc 	.word	0x080106dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc27 	bl	80017f4 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fb76 	bl	80097dc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fb72 	bl	80097dc <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20016030 	.word	0x20016030
 8001110:	20015ff0 	.word	0x20015ff0
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <updateEncoderCnt+0x160>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <updateEncoderCnt+0x164>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <updateEncoderCnt+0x168>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <updateEncoderCnt+0x16c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <updateEncoderCnt+0x170>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updateEncoderCnt+0x164>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <updateEncoderCnt+0x170>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <updateEncoderCnt+0x174>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <updateEncoderCnt+0x16c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <updateEncoderCnt+0x174>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <updateEncoderCnt+0x164>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <updateEncoderCnt+0x16c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <updateEncoderCnt+0x158>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <updateEncoderCnt+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <updateEncoderCnt+0x17c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <updateEncoderCnt+0x178>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <updateEncoderCnt+0x17c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <updateEncoderCnt+0x180>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <updateEncoderCnt+0x178>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <updateEncoderCnt+0x180>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <updateEncoderCnt+0x184>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <updateEncoderCnt+0x178>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <updateEncoderCnt+0x184>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <updateEncoderCnt+0x188>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <updateEncoderCnt+0x178>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <updateEncoderCnt+0x188>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <updateEncoderCnt+0x18c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateEncoderCnt+0x178>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <updateEncoderCnt+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <updateEncoderCnt+0x190>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <updateEncoderCnt+0x178>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <updateEncoderCnt+0x190>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <updateEncoderCnt+0x194>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateEncoderCnt+0x178>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <updateEncoderCnt+0x194>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <updateEncoderCnt+0x160>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <updateEncoderCnt+0x168>)
 800126a:	f242 7210 	movw	r2, #10000	; 0x2710
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001270:	bf00      	nop
 8001272:	bd98      	pop	{r3, r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	bec93a2d 	.word	0xbec93a2d
 800127c:	3f8c463a 	.word	0x3f8c463a
 8001280:	40000400 	.word	0x40000400
 8001284:	20000244 	.word	0x20000244
 8001288:	40000800 	.word	0x40000800
 800128c:	20000246 	.word	0x20000246
 8001290:	20000248 	.word	0x20000248
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000254 	.word	0x20000254
 80012a4:	20000258 	.word	0x20000258
 80012a8:	2000025c 	.word	0x2000025c
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000264 	.word	0x20000264
 80012b4:	20000268 	.word	0x20000268

080012b8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getEncoderCnt+0x2c>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getEncoderCnt+0x30>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000246 	.word	0x20000246

080012ec <getTotalDistance>:

float getTotalDistance(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return total_distance;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <getTotalDistance+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000258 	.word	0x20000258

08001308 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getGoalJudgeDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getSideLineJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <setTotalDistance>:

void setTotalDistance(float distance)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <setTotalDistance+0x1c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000258 	.word	0x20000258

08001360 <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <getCrossLineIgnoreDistance+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000264 	.word	0x20000264

0800137c <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	total_distance = 0;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <clearTotalDistance+0x18>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000258 	.word	0x20000258

08001398 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearGoalJudgeDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearSideLineJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearCrossLineIgnoreDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearSideLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <getDistance10mm+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000250 	.word	0x20000250

08001424 <clearDistance10mm>:

void clearDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <clearDistance10mm+0x18>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <getspeedcount>:

float getspeedcount(void){
 8001440:	b598      	push	{r3, r4, r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <getspeedcount+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db16      	blt.n	8001486 <getspeedcount+0x46>
		speed_cnt += 0.1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <getspeedcount+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	a30d      	add	r3, pc, #52	; (adr r3, 8001498 <getspeedcount+0x58>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7fe ff10 	bl	800028c <__adddf3>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <getspeedcount+0x64>)
 800147c:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <getspeedcount+0x60>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <getspeedcount+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	bd98      	pop	{r3, r4, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	20000254 	.word	0x20000254
 80014a4:	2000026c 	.word	0x2000026c

080014a8 <clearspeedcount>:

void clearspeedcount(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <clearspeedcount+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <clearspeedcount+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Unlock+0x20>)
 80014cc:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <FLASH_Unlock+0x24>)
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001510:	bf00      	nop
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <FLASH_WaitBusy+0x1c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <FLASH_WaitBusy+0x6>
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001536:	f006 f989 	bl	800784c <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fa3f 	bl	80079dc <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800155e:	f006 f997 	bl	8007890 <HAL_FLASH_Lock>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001578:	f7ff ffa4 	bl	80014c4 <FLASH_Unlock>

	FLASH_WaitBusy();
 800157c:	f7ff ffc6 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_Write_Word_F+0x50>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800159e:	f7ff ffb5 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80015ae:	f7ff ff9d 	bl	80014ec <FLASH_Lock>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <initGyro>:
float omega;
float theta_10mm;
float add_theta_30mm;
float ang_average = 0;

uint8_t initGyro(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 80015c6:	f001 ffc3 	bl	8003550 <IMU_init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f005 f8a5 	bl	8006720 <HAL_Delay>

	return who_i_am;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <updateIMUValue>:

void updateIMUValue(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	read_gyro_data();
 80015e6:	f001 ffd7 	bl	8003598 <read_gyro_data>
	zg_ = zg;
 80015ea:	4b5f      	ldr	r3, [pc, #380]	; (8001768 <updateIMUValue+0x188>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b5e      	ldr	r3, [pc, #376]	; (800176c <updateIMUValue+0x18c>)
 80015f2:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 80015f4:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <updateIMUValue+0x188>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <updateIMUValue+0x190>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa92 	bl	8000b58 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b4c      	ldr	r3, [pc, #304]	; (800176c <updateIMUValue+0x18c>)
 800163a:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 800163c:	4b4b      	ldr	r3, [pc, #300]	; (800176c <updateIMUValue+0x18c>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <updateIMUValue+0x194>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b43      	ldr	r3, [pc, #268]	; (800176c <updateIMUValue+0x18c>)
 8001660:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <updateIMUValue+0x18c>)
 8001664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <updateIMUValue+0x190>)
 800166a:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <updateIMUValue+0x18c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	a332      	add	r3, pc, #200	; (adr r3, 8001750 <updateIMUValue+0x170>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	a330      	add	r3, pc, #192	; (adr r3, 8001758 <updateIMUValue+0x178>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <updateIMUValue+0x198>)
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_ddiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b2e      	ldr	r3, [pc, #184]	; (800177c <updateIMUValue+0x19c>)
 80016c2:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <updateIMUValue+0x1a0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <updateIMUValue+0x19c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a320      	add	r3, pc, #128	; (adr r3, 8001760 <updateIMUValue+0x180>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <updateIMUValue+0x1a0>)
 8001702:	601a      	str	r2, [r3, #0]
	add_theta_30mm += omega * 0.001;
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <updateIMUValue+0x1a4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe ff1d 	bl	8000548 <__aeabi_f2d>
 800170e:	4604      	mov	r4, r0
 8001710:	460d      	mov	r5, r1
 8001712:	4b1a      	ldr	r3, [pc, #104]	; (800177c <updateIMUValue+0x19c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a310      	add	r3, pc, #64	; (adr r3, 8001760 <updateIMUValue+0x180>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7fe ff69 	bl	80005f8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4620      	mov	r0, r4
 800172c:	4629      	mov	r1, r5
 800172e:	f7fe fdad 	bl	800028c <__adddf3>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	4618      	mov	r0, r3
 8001738:	4621      	mov	r1, r4
 800173a:	f7ff fa55 	bl	8000be8 <__aeabi_d2f>
 800173e:	4602      	mov	r2, r0
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <updateIMUValue+0x1a4>)
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bdb0      	pop	{r4, r5, r7, pc}
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	40306666 	.word	0x40306666
 8001758:	54411744 	.word	0x54411744
 800175c:	400921fb 	.word	0x400921fb
 8001760:	d2f1a9fc 	.word	0xd2f1a9fc
 8001764:	3f50624d 	.word	0x3f50624d
 8001768:	20016158 	.word	0x20016158
 800176c:	20016070 	.word	0x20016070
 8001770:	20000274 	.word	0x20000274
 8001774:	20000270 	.word	0x20000270
 8001778:	40668000 	.word	0x40668000
 800177c:	20016080 	.word	0x20016080
 8001780:	2001607c 	.word	0x2001607c
 8001784:	20016074 	.word	0x20016074

08001788 <IMU_average>:

void IMU_average(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	float average = 0;
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	e015      	b.n	80017c6 <IMU_average+0x3e>
		average = average+zg;
 800179a:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <IMU_average+0x60>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b21b      	sxth	r3, r3
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 80017b4:	2001      	movs	r0, #1
 80017b6:	f004 ffb3 	bl	8006720 <HAL_Delay>
		setLED2('A');
 80017ba:	2041      	movs	r0, #65	; 0x41
 80017bc:	f000 f920 	bl	8001a00 <setLED2>
	for(int i=0;i<=1000;i++){
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017cc:	dde5      	ble.n	800179a <IMU_average+0x12>
	}
	ang_average = average/1000;
 80017ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80017d2:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017ec <IMU_average+0x64>
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <IMU_average+0x68>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20016158 	.word	0x20016158
 80017ec:	447a0000 	.word	0x447a0000
 80017f0:	20000270 	.word	0x20000270

080017f4 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
	return theta_10mm;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <getTheta10mm+0x18>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	ee07 3a90 	vmov	s15, r3
}
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2001607c 	.word	0x2001607c

08001810 <getaddTheta30mm>:

float getaddTheta30mm()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	return add_theta_30mm;
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <getaddTheta30mm+0x18>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	ee07 3a90 	vmov	s15, r3
}
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	20016074 	.word	0x20016074

0800182c <clearTheta10mm>:

void clearTheta10mm()
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <clearTheta10mm+0x18>)
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2001607c 	.word	0x2001607c

08001848 <clearaddTheta30mm>:

void clearaddTheta30mm()
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	add_theta_30mm = 0;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <clearaddTheta30mm+0x18>)
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20016074 	.word	0x20016074

08001864 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b52      	cmp	r3, #82	; 0x52
 8001872:	d112      	bne.n	800189a <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800187a:	4860      	ldr	r0, [pc, #384]	; (80019fc <setLED+0x198>)
 800187c:	f006 fb82 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001880:	2201      	movs	r2, #1
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	485d      	ldr	r0, [pc, #372]	; (80019fc <setLED+0x198>)
 8001888:	f006 fb7c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	485a      	ldr	r0, [pc, #360]	; (80019fc <setLED+0x198>)
 8001894:	f006 fb76 	bl	8007f84 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8001898:	e0ab      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'G'){
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b47      	cmp	r3, #71	; 0x47
 800189e:	d112      	bne.n	80018c6 <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a6:	4855      	ldr	r0, [pc, #340]	; (80019fc <setLED+0x198>)
 80018a8:	f006 fb6c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018b2:	4852      	ldr	r0, [pc, #328]	; (80019fc <setLED+0x198>)
 80018b4:	f006 fb66 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	484f      	ldr	r0, [pc, #316]	; (80019fc <setLED+0x198>)
 80018c0:	f006 fb60 	bl	8007f84 <HAL_GPIO_WritePin>
}
 80018c4:	e095      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'B'){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b42      	cmp	r3, #66	; 0x42
 80018ca:	d112      	bne.n	80018f2 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d2:	484a      	ldr	r0, [pc, #296]	; (80019fc <setLED+0x198>)
 80018d4:	f006 fb56 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018de:	4847      	ldr	r0, [pc, #284]	; (80019fc <setLED+0x198>)
 80018e0:	f006 fb50 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ea:	4844      	ldr	r0, [pc, #272]	; (80019fc <setLED+0x198>)
 80018ec:	f006 fb4a 	bl	8007f84 <HAL_GPIO_WritePin>
}
 80018f0:	e07f      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'M'){
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b4d      	cmp	r3, #77	; 0x4d
 80018f6:	d112      	bne.n	800191e <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fe:	483f      	ldr	r0, [pc, #252]	; (80019fc <setLED+0x198>)
 8001900:	f006 fb40 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	483c      	ldr	r0, [pc, #240]	; (80019fc <setLED+0x198>)
 800190c:	f006 fb3a 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001916:	4839      	ldr	r0, [pc, #228]	; (80019fc <setLED+0x198>)
 8001918:	f006 fb34 	bl	8007f84 <HAL_GPIO_WritePin>
}
 800191c:	e069      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'Y'){
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b59      	cmp	r3, #89	; 0x59
 8001922:	d112      	bne.n	800194a <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192a:	4834      	ldr	r0, [pc, #208]	; (80019fc <setLED+0x198>)
 800192c:	f006 fb2a 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4831      	ldr	r0, [pc, #196]	; (80019fc <setLED+0x198>)
 8001938:	f006 fb24 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	482e      	ldr	r0, [pc, #184]	; (80019fc <setLED+0x198>)
 8001944:	f006 fb1e 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001948:	e053      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'C'){
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b43      	cmp	r3, #67	; 0x43
 800194e:	d112      	bne.n	8001976 <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001956:	4829      	ldr	r0, [pc, #164]	; (80019fc <setLED+0x198>)
 8001958:	f006 fb14 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001962:	4826      	ldr	r0, [pc, #152]	; (80019fc <setLED+0x198>)
 8001964:	f006 fb0e 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800196e:	4823      	ldr	r0, [pc, #140]	; (80019fc <setLED+0x198>)
 8001970:	f006 fb08 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001974:	e03d      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'W'){
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b57      	cmp	r3, #87	; 0x57
 800197a:	d112      	bne.n	80019a2 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001982:	481e      	ldr	r0, [pc, #120]	; (80019fc <setLED+0x198>)
 8001984:	f006 fafe 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198e:	481b      	ldr	r0, [pc, #108]	; (80019fc <setLED+0x198>)
 8001990:	f006 faf8 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	4818      	ldr	r0, [pc, #96]	; (80019fc <setLED+0x198>)
 800199c:	f006 faf2 	bl	8007f84 <HAL_GPIO_WritePin>
}
 80019a0:	e027      	b.n	80019f2 <setLED+0x18e>
	else if(color == 'N'){
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b4e      	cmp	r3, #78	; 0x4e
 80019a6:	d112      	bne.n	80019ce <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <setLED+0x198>)
 80019b0:	f006 fae8 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ba:	4810      	ldr	r0, [pc, #64]	; (80019fc <setLED+0x198>)
 80019bc:	f006 fae2 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80019c0:	2201      	movs	r2, #1
 80019c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <setLED+0x198>)
 80019c8:	f006 fadc 	bl	8007f84 <HAL_GPIO_WritePin>
}
 80019cc:	e011      	b.n	80019f2 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <setLED+0x198>)
 80019d6:	f006 fad5 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019da:	2200      	movs	r2, #0
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	4806      	ldr	r0, [pc, #24]	; (80019fc <setLED+0x198>)
 80019e2:	f006 facf 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019e6:	2200      	movs	r2, #0
 80019e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <setLED+0x198>)
 80019ee:	f006 fac9 	bl	8007f84 <HAL_GPIO_WritePin>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40020800 	.word	0x40020800

08001a00 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b52      	cmp	r3, #82	; 0x52
 8001a0e:	d124      	bne.n	8001a5a <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a16:	48c5      	ldr	r0, [pc, #788]	; (8001d2c <setLED2+0x32c>)
 8001a18:	f006 fab4 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a22:	48c3      	ldr	r0, [pc, #780]	; (8001d30 <setLED2+0x330>)
 8001a24:	f006 faae 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2e:	48c0      	ldr	r0, [pc, #768]	; (8001d30 <setLED2+0x330>)
 8001a30:	f006 faa8 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a3a:	48bd      	ldr	r0, [pc, #756]	; (8001d30 <setLED2+0x330>)
 8001a3c:	f006 faa2 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a46:	48ba      	ldr	r0, [pc, #744]	; (8001d30 <setLED2+0x330>)
 8001a48:	f006 fa9c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a52:	48b7      	ldr	r0, [pc, #732]	; (8001d30 <setLED2+0x330>)
 8001a54:	f006 fa96 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001a58:	e163      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'G'){
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b47      	cmp	r3, #71	; 0x47
 8001a5e:	d124      	bne.n	8001aaa <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a66:	48b1      	ldr	r0, [pc, #708]	; (8001d2c <setLED2+0x32c>)
 8001a68:	f006 fa8c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a72:	48af      	ldr	r0, [pc, #700]	; (8001d30 <setLED2+0x330>)
 8001a74:	f006 fa86 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a7e:	48ac      	ldr	r0, [pc, #688]	; (8001d30 <setLED2+0x330>)
 8001a80:	f006 fa80 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a8a:	48a9      	ldr	r0, [pc, #676]	; (8001d30 <setLED2+0x330>)
 8001a8c:	f006 fa7a 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a96:	48a6      	ldr	r0, [pc, #664]	; (8001d30 <setLED2+0x330>)
 8001a98:	f006 fa74 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa2:	48a3      	ldr	r0, [pc, #652]	; (8001d30 <setLED2+0x330>)
 8001aa4:	f006 fa6e 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001aa8:	e13b      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'B'){
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	2b42      	cmp	r3, #66	; 0x42
 8001aae:	d124      	bne.n	8001afa <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab6:	489d      	ldr	r0, [pc, #628]	; (8001d2c <setLED2+0x32c>)
 8001ab8:	f006 fa64 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ac2:	489b      	ldr	r0, [pc, #620]	; (8001d30 <setLED2+0x330>)
 8001ac4:	f006 fa5e 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ace:	4898      	ldr	r0, [pc, #608]	; (8001d30 <setLED2+0x330>)
 8001ad0:	f006 fa58 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ada:	4895      	ldr	r0, [pc, #596]	; (8001d30 <setLED2+0x330>)
 8001adc:	f006 fa52 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae6:	4892      	ldr	r0, [pc, #584]	; (8001d30 <setLED2+0x330>)
 8001ae8:	f006 fa4c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001af2:	488f      	ldr	r0, [pc, #572]	; (8001d30 <setLED2+0x330>)
 8001af4:	f006 fa46 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001af8:	e113      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'W'){
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	2b57      	cmp	r3, #87	; 0x57
 8001afe:	d124      	bne.n	8001b4a <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b06:	4889      	ldr	r0, [pc, #548]	; (8001d2c <setLED2+0x32c>)
 8001b08:	f006 fa3c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b12:	4887      	ldr	r0, [pc, #540]	; (8001d30 <setLED2+0x330>)
 8001b14:	f006 fa36 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4884      	ldr	r0, [pc, #528]	; (8001d30 <setLED2+0x330>)
 8001b20:	f006 fa30 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2a:	4881      	ldr	r0, [pc, #516]	; (8001d30 <setLED2+0x330>)
 8001b2c:	f006 fa2a 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b36:	487e      	ldr	r0, [pc, #504]	; (8001d30 <setLED2+0x330>)
 8001b38:	f006 fa24 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b42:	487b      	ldr	r0, [pc, #492]	; (8001d30 <setLED2+0x330>)
 8001b44:	f006 fa1e 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001b48:	e0eb      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'Y'){
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b59      	cmp	r3, #89	; 0x59
 8001b4e:	d124      	bne.n	8001b9a <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b56:	4875      	ldr	r0, [pc, #468]	; (8001d2c <setLED2+0x32c>)
 8001b58:	f006 fa14 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b62:	4873      	ldr	r0, [pc, #460]	; (8001d30 <setLED2+0x330>)
 8001b64:	f006 fa0e 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6e:	4870      	ldr	r0, [pc, #448]	; (8001d30 <setLED2+0x330>)
 8001b70:	f006 fa08 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b7a:	486d      	ldr	r0, [pc, #436]	; (8001d30 <setLED2+0x330>)
 8001b7c:	f006 fa02 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b86:	486a      	ldr	r0, [pc, #424]	; (8001d30 <setLED2+0x330>)
 8001b88:	f006 f9fc 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b92:	4867      	ldr	r0, [pc, #412]	; (8001d30 <setLED2+0x330>)
 8001b94:	f006 f9f6 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001b98:	e0c3      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'X'){
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b58      	cmp	r3, #88	; 0x58
 8001b9e:	d124      	bne.n	8001bea <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba6:	4861      	ldr	r0, [pc, #388]	; (8001d2c <setLED2+0x32c>)
 8001ba8:	f006 f9ec 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bb2:	485f      	ldr	r0, [pc, #380]	; (8001d30 <setLED2+0x330>)
 8001bb4:	f006 f9e6 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bbe:	485c      	ldr	r0, [pc, #368]	; (8001d30 <setLED2+0x330>)
 8001bc0:	f006 f9e0 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bca:	4859      	ldr	r0, [pc, #356]	; (8001d30 <setLED2+0x330>)
 8001bcc:	f006 f9da 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd6:	4856      	ldr	r0, [pc, #344]	; (8001d30 <setLED2+0x330>)
 8001bd8:	f006 f9d4 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be2:	4853      	ldr	r0, [pc, #332]	; (8001d30 <setLED2+0x330>)
 8001be4:	f006 f9ce 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001be8:	e09b      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'V'){
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b56      	cmp	r3, #86	; 0x56
 8001bee:	d124      	bne.n	8001c3a <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bf6:	484d      	ldr	r0, [pc, #308]	; (8001d2c <setLED2+0x32c>)
 8001bf8:	f006 f9c4 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c02:	484b      	ldr	r0, [pc, #300]	; (8001d30 <setLED2+0x330>)
 8001c04:	f006 f9be 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c0e:	4848      	ldr	r0, [pc, #288]	; (8001d30 <setLED2+0x330>)
 8001c10:	f006 f9b8 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1a:	4845      	ldr	r0, [pc, #276]	; (8001d30 <setLED2+0x330>)
 8001c1c:	f006 f9b2 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c20:	2201      	movs	r2, #1
 8001c22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c26:	4842      	ldr	r0, [pc, #264]	; (8001d30 <setLED2+0x330>)
 8001c28:	f006 f9ac 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c32:	483f      	ldr	r0, [pc, #252]	; (8001d30 <setLED2+0x330>)
 8001c34:	f006 f9a6 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001c38:	e073      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'T'){
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	2b54      	cmp	r3, #84	; 0x54
 8001c3e:	d124      	bne.n	8001c8a <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c40:	2200      	movs	r2, #0
 8001c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c46:	4839      	ldr	r0, [pc, #228]	; (8001d2c <setLED2+0x32c>)
 8001c48:	f006 f99c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c52:	4837      	ldr	r0, [pc, #220]	; (8001d30 <setLED2+0x330>)
 8001c54:	f006 f996 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c5e:	4834      	ldr	r0, [pc, #208]	; (8001d30 <setLED2+0x330>)
 8001c60:	f006 f990 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	4831      	ldr	r0, [pc, #196]	; (8001d30 <setLED2+0x330>)
 8001c6c:	f006 f98a 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c76:	482e      	ldr	r0, [pc, #184]	; (8001d30 <setLED2+0x330>)
 8001c78:	f006 f984 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c82:	482b      	ldr	r0, [pc, #172]	; (8001d30 <setLED2+0x330>)
 8001c84:	f006 f97e 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001c88:	e04b      	b.n	8001d22 <setLED2+0x322>
	else if(color2 == 'A'){
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b41      	cmp	r3, #65	; 0x41
 8001c8e:	d124      	bne.n	8001cda <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c90:	2200      	movs	r2, #0
 8001c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c96:	4825      	ldr	r0, [pc, #148]	; (8001d2c <setLED2+0x32c>)
 8001c98:	f006 f974 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	4823      	ldr	r0, [pc, #140]	; (8001d30 <setLED2+0x330>)
 8001ca4:	f006 f96e 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cae:	4820      	ldr	r0, [pc, #128]	; (8001d30 <setLED2+0x330>)
 8001cb0:	f006 f968 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cba:	481d      	ldr	r0, [pc, #116]	; (8001d30 <setLED2+0x330>)
 8001cbc:	f006 f962 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cc6:	481a      	ldr	r0, [pc, #104]	; (8001d30 <setLED2+0x330>)
 8001cc8:	f006 f95c 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cd2:	4817      	ldr	r0, [pc, #92]	; (8001d30 <setLED2+0x330>)
 8001cd4:	f006 f956 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001cd8:	e023      	b.n	8001d22 <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce0:	4812      	ldr	r0, [pc, #72]	; (8001d2c <setLED2+0x32c>)
 8001ce2:	f006 f94f 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cec:	4810      	ldr	r0, [pc, #64]	; (8001d30 <setLED2+0x330>)
 8001cee:	f006 f949 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <setLED2+0x330>)
 8001cfa:	f006 f943 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <setLED2+0x330>)
 8001d06:	f006 f93d 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d10:	4807      	ldr	r0, [pc, #28]	; (8001d30 <setLED2+0x330>)
 8001d12:	f006 f937 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001d16:	2201      	movs	r2, #1
 8001d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <setLED2+0x330>)
 8001d1e:	f006 f931 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40020400 	.word	0x40020400
 8001d34:	00000000 	.word	0x00000000

08001d38 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.8, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001d40:	4bb3      	ldr	r3, [pc, #716]	; (8002010 <calculateLineFollowingTermFlip+0x2d8>)
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	4bb3      	ldr	r3, [pc, #716]	; (8002014 <calculateLineFollowingTermFlip+0x2dc>)
 8001d46:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001d4e:	4bb2      	ldr	r3, [pc, #712]	; (8002018 <calculateLineFollowingTermFlip+0x2e0>)
 8001d50:	f993 3000 	ldrsb.w	r3, [r3]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f040 8140 	bne.w	8001fda <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001d5a:	4bb0      	ldr	r3, [pc, #704]	; (800201c <calculateLineFollowingTermFlip+0x2e4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001d62:	4baf      	ldr	r3, [pc, #700]	; (8002020 <calculateLineFollowingTermFlip+0x2e8>)
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001d6a:	4bac      	ldr	r3, [pc, #688]	; (800201c <calculateLineFollowingTermFlip+0x2e4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001d70:	4bac      	ldr	r3, [pc, #688]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbd4 	bl	8000524 <__aeabi_i2d>
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <calculateLineFollowingTermFlip+0x2f0>)
 8001d82:	f7fe fc39 	bl	80005f8 <__aeabi_dmul>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	4625      	mov	r5, r4
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4ba5      	ldr	r3, [pc, #660]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001d90:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbc5 	bl	8000524 <__aeabi_i2d>
 8001d9a:	a393      	add	r3, pc, #588	; (adr r3, 8001fe8 <calculateLineFollowingTermFlip+0x2b0>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc2a 	bl	80005f8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fa6e 	bl	800028c <__adddf3>
 8001db0:	4603      	mov	r3, r0
 8001db2:	460c      	mov	r4, r1
 8001db4:	4625      	mov	r5, r4
 8001db6:	461c      	mov	r4, r3
 8001db8:	4b9a      	ldr	r3, [pc, #616]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001dba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7fe fbb0 	bl	8000524 <__aeabi_i2d>
 8001dc4:	a38a      	add	r3, pc, #552	; (adr r3, 8001ff0 <calculateLineFollowingTermFlip+0x2b8>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	f7fe fc15 	bl	80005f8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4620      	mov	r0, r4
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	f7fe fa59 	bl	800028c <__adddf3>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	4625      	mov	r5, r4
 8001de0:	461c      	mov	r4, r3
 8001de2:	4b90      	ldr	r3, [pc, #576]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001de4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe fb9b 	bl	8000524 <__aeabi_i2d>
 8001dee:	a382      	add	r3, pc, #520	; (adr r3, 8001ff8 <calculateLineFollowingTermFlip+0x2c0>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	f7fe fc00 	bl	80005f8 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fa44 	bl	800028c <__adddf3>
 8001e04:	4603      	mov	r3, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	4625      	mov	r5, r4
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	4b85      	ldr	r3, [pc, #532]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001e0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb86 	bl	8000524 <__aeabi_i2d>
 8001e18:	a379      	add	r3, pc, #484	; (adr r3, 8002000 <calculateLineFollowingTermFlip+0x2c8>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f7fe fbeb 	bl	80005f8 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4620      	mov	r0, r4
 8001e28:	4629      	mov	r1, r5
 8001e2a:	f7fe fa2f 	bl	800028c <__adddf3>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4625      	mov	r5, r4
 8001e34:	461c      	mov	r4, r3
 8001e36:	4b7b      	ldr	r3, [pc, #492]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001e38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb71 	bl	8000524 <__aeabi_i2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fa1f 	bl	800028c <__adddf3>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <calculateLineFollowingTermFlip+0x2f4>)
 8001e5c:	f7fe fcf6 	bl	800084c <__aeabi_ddiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	460c      	mov	r4, r1
 8001e64:	4625      	mov	r5, r4
 8001e66:	461c      	mov	r4, r3
 8001e68:	4b6e      	ldr	r3, [pc, #440]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001e6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7fe fb58 	bl	8000524 <__aeabi_i2d>
 8001e74:	4680      	mov	r8, r0
 8001e76:	4689      	mov	r9, r1
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001e7a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb50 	bl	8000524 <__aeabi_i2d>
 8001e84:	a35e      	add	r3, pc, #376	; (adr r3, 8002000 <calculateLineFollowingTermFlip+0x2c8>)
 8001e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8a:	f7fe fbb5 	bl	80005f8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4640      	mov	r0, r8
 8001e94:	4649      	mov	r1, r9
 8001e96:	f7fe f9f9 	bl	800028c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4690      	mov	r8, r2
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001ea4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb3b 	bl	8000524 <__aeabi_i2d>
 8001eae:	a352      	add	r3, pc, #328	; (adr r3, 8001ff8 <calculateLineFollowingTermFlip+0x2c0>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fba0 	bl	80005f8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	f7fe f9e4 	bl	800028c <__adddf3>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4690      	mov	r8, r2
 8001eca:	4699      	mov	r9, r3
 8001ecc:	4b55      	ldr	r3, [pc, #340]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001ece:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb26 	bl	8000524 <__aeabi_i2d>
 8001ed8:	a345      	add	r3, pc, #276	; (adr r3, 8001ff0 <calculateLineFollowingTermFlip+0x2b8>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb8b 	bl	80005f8 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	4649      	mov	r1, r9
 8001eea:	f7fe f9cf 	bl	800028c <__adddf3>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4690      	mov	r8, r2
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	4b4b      	ldr	r3, [pc, #300]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001ef8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb11 	bl	8000524 <__aeabi_i2d>
 8001f02:	a339      	add	r3, pc, #228	; (adr r3, 8001fe8 <calculateLineFollowingTermFlip+0x2b0>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb76 	bl	80005f8 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4640      	mov	r0, r8
 8001f12:	4649      	mov	r1, r9
 8001f14:	f7fe f9ba 	bl	800028c <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4690      	mov	r8, r2
 8001f1e:	4699      	mov	r9, r3
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <calculateLineFollowingTermFlip+0x2ec>)
 8001f22:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fafc 	bl	8000524 <__aeabi_i2d>
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <calculateLineFollowingTermFlip+0x2f0>)
 8001f32:	f7fe fb61 	bl	80005f8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4640      	mov	r0, r8
 8001f3c:	4649      	mov	r1, r9
 8001f3e:	f7fe f9a5 	bl	800028c <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <calculateLineFollowingTermFlip+0x2f4>)
 8001f50:	f7fe fc7c 	bl	800084c <__aeabi_ddiv>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4620      	mov	r0, r4
 8001f5a:	4629      	mov	r1, r5
 8001f5c:	f7fe f994 	bl	8000288 <__aeabi_dsub>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	f7fe fe3e 	bl	8000be8 <__aeabi_d2f>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001f70:	ed97 7a05 	vldr	s14, [r7, #20]
 8001f74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f7c:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001f80:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <calculateLineFollowingTermFlip+0x2f8>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f96:	ee17 0a90 	vmov	r0, s15
 8001f9a:	f7fe fad5 	bl	8000548 <__aeabi_f2d>
 8001f9e:	a31a      	add	r3, pc, #104	; (adr r3, 8002008 <calculateLineFollowingTermFlip+0x2d0>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fc52 	bl	800084c <__aeabi_ddiv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	460c      	mov	r4, r1
 8001fac:	4618      	mov	r0, r3
 8001fae:	4621      	mov	r1, r4
 8001fb0:	f7fe fe1a 	bl	8000be8 <__aeabi_d2f>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001fb8:	4b19      	ldr	r3, [pc, #100]	; (8002020 <calculateLineFollowingTermFlip+0x2e8>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <calculateLineFollowingTermFlip+0x2fc>)
 8001fd0:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001fd4:	4a16      	ldr	r2, [pc, #88]	; (8002030 <calculateLineFollowingTermFlip+0x2f8>)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6013      	str	r3, [r2, #0]
	}
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fe4:	f3af 8000 	nop.w
 8001fe8:	9999999a 	.word	0x9999999a
 8001fec:	3ff99999 	.word	0x3ff99999
 8001ff0:	33333333 	.word	0x33333333
 8001ff4:	3ff73333 	.word	0x3ff73333
 8001ff8:	cccccccd 	.word	0xcccccccd
 8001ffc:	3ff4cccc 	.word	0x3ff4cccc
 8002000:	66666666 	.word	0x66666666
 8002004:	3ff26666 	.word	0x3ff26666
 8002008:	d2f1a9fc 	.word	0xd2f1a9fc
 800200c:	3f50624d 	.word	0x3f50624d
 8002010:	40733333 	.word	0x40733333
 8002014:	3ccccccd 	.word	0x3ccccccd
 8002018:	20000276 	.word	0x20000276
 800201c:	20000277 	.word	0x20000277
 8002020:	20000284 	.word	0x20000284
 8002024:	20015f9c 	.word	0x20015f9c
 8002028:	3ffc0000 	.word	0x3ffc0000
 800202c:	40180000 	.word	0x40180000
 8002030:	20000280 	.word	0x20000280
 8002034:	20000278 	.word	0x20000278

08002038 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 800203e:	4b52      	ldr	r3, [pc, #328]	; (8002188 <lineTraceFlip+0x150>)
 8002040:	f993 3000 	ldrsb.w	r3, [r3]
 8002044:	2b01      	cmp	r3, #1
 8002046:	f040 8097 	bne.w	8002178 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 800204a:	f001 fda1 	bl	8003b90 <getVelocityControlTerm>
 800204e:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 8002052:	4b4e      	ldr	r3, [pc, #312]	; (800218c <lineTraceFlip+0x154>)
 8002054:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8002056:	ed97 7a05 	vldr	s14, [r7, #20]
 800205a:	edd7 7a03 	vldr	s15, [r7, #12]
 800205e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002066:	db02      	blt.n	800206e <lineTraceFlip+0x36>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e010      	b.n	8002090 <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 800206e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002072:	eef1 7a67 	vneg.f32	s15, s15
 8002076:	ed97 7a05 	vldr	s14, [r7, #20]
 800207a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	d805      	bhi.n	8002090 <lineTraceFlip+0x58>
 8002084:	edd7 7a03 	vldr	s15, [r7, #12]
 8002088:	eef1 7a67 	vneg.f32	s15, s15
 800208c:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8002096:	4b3e      	ldr	r3, [pc, #248]	; (8002190 <lineTraceFlip+0x158>)
 8002098:	ed93 7a00 	vldr	s14, [r3]
 800209c:	edd7 7a05 	vldr	s15, [r7, #20]
 80020a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002194 <lineTraceFlip+0x15c>
 80020a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	db0d      	blt.n	80020ce <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <lineTraceFlip+0x158>)
 80020b4:	ed93 7a00 	vldr	s14, [r3]
 80020b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002194 <lineTraceFlip+0x15c>
 80020c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020c8:	edc7 7a04 	vstr	s15, [r7, #16]
 80020cc:	e01a      	b.n	8002104 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <lineTraceFlip+0x158>)
 80020d0:	edd3 7a00 	vldr	s15, [r3]
 80020d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020dc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002198 <lineTraceFlip+0x160>
 80020e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e8:	d80c      	bhi.n	8002104 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 80020ea:	4b29      	ldr	r3, [pc, #164]	; (8002190 <lineTraceFlip+0x158>)
 80020ec:	edd3 7a00 	vldr	s15, [r3]
 80020f0:	ed97 7a05 	vldr	s14, [r7, #20]
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002198 <lineTraceFlip+0x160>
 80020fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002100:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8002104:	ed97 7a05 	vldr	s14, [r7, #20]
 8002108:	edd7 7a04 	vldr	s15, [r7, #16]
 800210c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002110:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8002114:	4b1e      	ldr	r3, [pc, #120]	; (8002190 <lineTraceFlip+0x158>)
 8002116:	ed93 7a00 	vldr	s14, [r3]
 800211a:	edd7 7a04 	vldr	s15, [r7, #16]
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002122:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <lineTraceFlip+0x158>)
 8002124:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <lineTraceFlip+0x158>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002136:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 800213a:	4b15      	ldr	r3, [pc, #84]	; (8002190 <lineTraceFlip+0x158>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ed97 7a05 	vldr	s14, [r7, #20]
 8002144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002148:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 800214c:	4a13      	ldr	r2, [pc, #76]	; (800219c <lineTraceFlip+0x164>)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 8002152:	edd7 7a02 	vldr	s15, [r7, #8]
 8002156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800215a:	ee17 3a90 	vmov	r3, s15
 800215e:	b21b      	sxth	r3, r3
 8002160:	edd7 7a01 	vldr	s15, [r7, #4]
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 2a90 	vmov	r2, s15
 800216c:	b212      	sxth	r2, r2
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f002 ffad 	bl	80050d0 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8002176:	e003      	b.n	8002180 <lineTraceFlip+0x148>
		setMotor(0, 0);
 8002178:	2100      	movs	r1, #0
 800217a:	2000      	movs	r0, #0
 800217c:	f002 ffa8 	bl	80050d0 <setMotor>
}
 8002180:	bf00      	nop
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	20000276 	.word	0x20000276
 800218c:	44b264cd 	.word	0x44b264cd
 8002190:	20000278 	.word	0x20000278
 8002194:	44d1e000 	.word	0x44d1e000
 8002198:	c4d1e000 	.word	0xc4d1e000
 800219c:	20016084 	.word	0x20016084

080021a0 <startLineTrace>:

void startLineTrace()
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <startLineTrace+0x1c>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <startLineTrace+0x20>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	701a      	strb	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000276 	.word	0x20000276
 80021c0:	20000277 	.word	0x20000277

080021c4 <stopLineTrace>:

void stopLineTrace()
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <stopLineTrace+0x1c>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <stopLineTrace+0x20>)
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000276 	.word	0x20000276
 80021e4:	20000278 	.word	0x20000278

080021e8 <checkCourseOut>:

void checkCourseOut(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <checkCourseOut+0xb4>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <checkCourseOut+0xb4>)
 80021f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <checkCourseOut+0xb4>)
 8002200:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a25      	ldr	r2, [pc, #148]	; (800229c <checkCourseOut+0xb4>)
 8002208:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800220c:	4413      	add	r3, r2
 800220e:	4a23      	ldr	r2, [pc, #140]	; (800229c <checkCourseOut+0xb4>)
 8002210:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002214:	4413      	add	r3, r2
 8002216:	4a21      	ldr	r2, [pc, #132]	; (800229c <checkCourseOut+0xb4>)
 8002218:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800221c:	4413      	add	r3, r2
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <checkCourseOut+0xb4>)
 8002220:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002224:	4413      	add	r3, r2
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <checkCourseOut+0xb4>)
 8002228:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800222c:	4413      	add	r3, r2
 800222e:	4a1b      	ldr	r2, [pc, #108]	; (800229c <checkCourseOut+0xb4>)
 8002230:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002234:	4413      	add	r3, r2
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <checkCourseOut+0xb4>)
 8002238:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800223c:	4413      	add	r3, r2
 800223e:	4a17      	ldr	r2, [pc, #92]	; (800229c <checkCourseOut+0xb4>)
 8002240:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8002244:	4413      	add	r3, r2
 8002246:	4a15      	ldr	r2, [pc, #84]	; (800229c <checkCourseOut+0xb4>)
 8002248:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 800224c:	4413      	add	r3, r2
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <checkCourseOut+0xb8>)
 8002250:	fb82 1203 	smull	r1, r2, r2, r3
 8002254:	1052      	asrs	r2, r2, #1
 8002256:	17db      	asrs	r3, r3, #31
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8002262:	d906      	bls.n	8002272 <checkCourseOut+0x8a>
		dark_cnt++;
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <checkCourseOut+0xbc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <checkCourseOut+0xbc>)
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	e002      	b.n	8002278 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <checkCourseOut+0xbc>)
 8002274:	2200      	movs	r2, #0
 8002276:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <checkCourseOut+0xbc>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b13      	cmp	r3, #19
 800227e:	d903      	bls.n	8002288 <checkCourseOut+0xa0>
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <checkCourseOut+0xc0>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8002286:	e002      	b.n	800228e <checkCourseOut+0xa6>
	else dark_flag = false;
 8002288:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <checkCourseOut+0xc0>)
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20015f9c 	.word	0x20015f9c
 80022a0:	2aaaaaab 	.word	0x2aaaaaab
 80022a4:	20000288 	.word	0x20000288
 80022a8:	2000027c 	.word	0x2000027c

080022ac <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	return dark_flag;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <getCouseOutFlag+0x14>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	2000027c 	.word	0x2000027c

080022c4 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 80022c8:	2202      	movs	r2, #2
 80022ca:	4905      	ldr	r1, [pc, #20]	; (80022e0 <initADC+0x1c>)
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <initADC+0x20>)
 80022ce:	f004 fa8d 	bl	80067ec <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 80022d2:	220c      	movs	r2, #12
 80022d4:	4904      	ldr	r1, [pc, #16]	; (80022e8 <initADC+0x24>)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <initADC+0x28>)
 80022d8:	f004 fa88 	bl	80067ec <HAL_ADC_Start_DMA>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200002a4 	.word	0x200002a4
 80022e4:	200160d8 	.word	0x200160d8
 80022e8:	2000028c 	.word	0x2000028c
 80022ec:	20016088 	.word	0x20016088

080022f0 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 80022f4:	4bc9      	ldr	r3, [pc, #804]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80022f6:	885b      	ldrh	r3, [r3, #2]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002300:	4bc7      	ldr	r3, [pc, #796]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 8002302:	edd3 7a01 	vldr	s15, [r3, #4]
 8002306:	ee77 6a67 	vsub.f32	s13, s14, s15
 800230a:	4bc6      	ldr	r3, [pc, #792]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 800230c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002314:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231c:	4bc3      	ldr	r3, [pc, #780]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002326:	ee17 3a90 	vmov	r3, s15
 800232a:	b219      	sxth	r1, r3
 800232c:	4bc0      	ldr	r3, [pc, #768]	; (8002630 <storeAnalogSensorBuffer+0x340>)
 800232e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8002332:	4bba      	ldr	r3, [pc, #744]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	4bb8      	ldr	r3, [pc, #736]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002348:	4bb6      	ldr	r3, [pc, #728]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 800234a:	ed93 7a00 	vldr	s14, [r3]
 800234e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002352:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	4bb4      	ldr	r3, [pc, #720]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002364:	ee17 3a90 	vmov	r3, s15
 8002368:	b219      	sxth	r1, r3
 800236a:	4bb2      	ldr	r3, [pc, #712]	; (8002634 <storeAnalogSensorBuffer+0x344>)
 800236c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8002370:	4baa      	ldr	r3, [pc, #680]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 8002372:	889b      	ldrh	r3, [r3, #4]
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800237c:	4ba8      	ldr	r3, [pc, #672]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 800237e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002382:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002386:	4ba7      	ldr	r3, [pc, #668]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 8002388:	ed93 7a02 	vldr	s14, [r3, #8]
 800238c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002390:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002394:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002398:	4ba4      	ldr	r3, [pc, #656]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	ee17 3a90 	vmov	r3, s15
 80023a6:	b219      	sxth	r1, r3
 80023a8:	4ba3      	ldr	r3, [pc, #652]	; (8002638 <storeAnalogSensorBuffer+0x348>)
 80023aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80023ae:	4b9b      	ldr	r3, [pc, #620]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80023b0:	88db      	ldrh	r3, [r3, #6]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ba:	4b99      	ldr	r3, [pc, #612]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 80023bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80023c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023c4:	4b97      	ldr	r3, [pc, #604]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 80023c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80023ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ce:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002628 <storeAnalogSensorBuffer+0x338>
 80023d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d6:	4b95      	ldr	r3, [pc, #596]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	b219      	sxth	r1, r3
 80023e6:	4b95      	ldr	r3, [pc, #596]	; (800263c <storeAnalogSensorBuffer+0x34c>)
 80023e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80023ec:	4b8b      	ldr	r3, [pc, #556]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80023ee:	891b      	ldrh	r3, [r3, #8]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f8:	4b89      	ldr	r3, [pc, #548]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 80023fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80023fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002402:	4b88      	ldr	r3, [pc, #544]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 8002404:	ed93 7a04 	vldr	s14, [r3, #16]
 8002408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800240c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002410:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002414:	4b85      	ldr	r3, [pc, #532]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	461a      	mov	r2, r3
 800241a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800241e:	ee17 3a90 	vmov	r3, s15
 8002422:	b219      	sxth	r1, r3
 8002424:	4b86      	ldr	r3, [pc, #536]	; (8002640 <storeAnalogSensorBuffer+0x350>)
 8002426:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800242a:	4b7c      	ldr	r3, [pc, #496]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 800242c:	895b      	ldrh	r3, [r3, #10]
 800242e:	ee07 3a90 	vmov	s15, r3
 8002432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002436:	4b7a      	ldr	r3, [pc, #488]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 8002438:	edd3 7a05 	vldr	s15, [r3, #20]
 800243c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002440:	4b78      	ldr	r3, [pc, #480]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 8002442:	ed93 7a05 	vldr	s14, [r3, #20]
 8002446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002628 <storeAnalogSensorBuffer+0x338>
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245c:	ee17 3a90 	vmov	r3, s15
 8002460:	b219      	sxth	r1, r3
 8002462:	4b78      	ldr	r3, [pc, #480]	; (8002644 <storeAnalogSensorBuffer+0x354>)
 8002464:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002468:	4b6c      	ldr	r3, [pc, #432]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 800246a:	899b      	ldrh	r3, [r3, #12]
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 8002476:	edd3 7a06 	vldr	s15, [r3, #24]
 800247a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800247e:	4b69      	ldr	r3, [pc, #420]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 8002480:	ed93 7a06 	vldr	s14, [r3, #24]
 8002484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002488:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002628 <storeAnalogSensorBuffer+0x338>
 800248c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002490:	4b66      	ldr	r3, [pc, #408]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249a:	ee17 3a90 	vmov	r3, s15
 800249e:	b219      	sxth	r1, r3
 80024a0:	4b69      	ldr	r3, [pc, #420]	; (8002648 <storeAnalogSensorBuffer+0x358>)
 80024a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024a6:	4b5d      	ldr	r3, [pc, #372]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80024a8:	89db      	ldrh	r3, [r3, #14]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 80024b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80024b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024bc:	4b59      	ldr	r3, [pc, #356]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 80024be:	ed93 7a07 	vldr	s14, [r3, #28]
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002628 <storeAnalogSensorBuffer+0x338>
 80024ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d8:	ee17 3a90 	vmov	r3, s15
 80024dc:	b219      	sxth	r1, r3
 80024de:	4b5b      	ldr	r3, [pc, #364]	; (800264c <storeAnalogSensorBuffer+0x35c>)
 80024e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80024e6:	8a1b      	ldrh	r3, [r3, #16]
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f0:	4b4b      	ldr	r3, [pc, #300]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 80024f2:	edd3 7a08 	vldr	s15, [r3, #32]
 80024f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 80024fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002504:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250c:	4b47      	ldr	r3, [pc, #284]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	b219      	sxth	r1, r3
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <storeAnalogSensorBuffer+0x360>)
 800251e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 8002524:	8a5b      	ldrh	r3, [r3, #18]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252e:	4b3c      	ldr	r3, [pc, #240]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 8002530:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002534:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 800253a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800253e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002542:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002554:	ee17 3a90 	vmov	r3, s15
 8002558:	b219      	sxth	r1, r3
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <storeAnalogSensorBuffer+0x364>)
 800255c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8002560:	4b2e      	ldr	r3, [pc, #184]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 8002562:	8a9b      	ldrh	r3, [r3, #20]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256c:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 800256e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002572:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002576:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 8002578:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800257c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002580:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002588:	4b28      	ldr	r3, [pc, #160]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002592:	ee17 3a90 	vmov	r3, s15
 8002596:	b219      	sxth	r1, r3
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <storeAnalogSensorBuffer+0x368>)
 800259a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800259e:	4b1f      	ldr	r3, [pc, #124]	; (800261c <storeAnalogSensorBuffer+0x32c>)
 80025a0:	8adb      	ldrh	r3, [r3, #22]
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <storeAnalogSensorBuffer+0x330>)
 80025ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80025b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <storeAnalogSensorBuffer+0x334>)
 80025b6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80025ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002628 <storeAnalogSensorBuffer+0x338>
 80025c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d0:	ee17 3a90 	vmov	r3, s15
 80025d4:	b219      	sxth	r1, r3
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <storeAnalogSensorBuffer+0x36c>)
 80025d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 80025dc:	4b20      	ldr	r3, [pc, #128]	; (8002660 <storeAnalogSensorBuffer+0x370>)
 80025de:	885b      	ldrh	r3, [r3, #2]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e8:	4b1e      	ldr	r3, [pc, #120]	; (8002664 <storeAnalogSensorBuffer+0x374>)
 80025ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <storeAnalogSensorBuffer+0x378>)
 80025f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80025f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025fc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002628 <storeAnalogSensorBuffer+0x338>
 8002600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <storeAnalogSensorBuffer+0x33c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800260e:	ee17 3a90 	vmov	r3, s15
 8002612:	b219      	sxth	r1, r3
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <storeAnalogSensorBuffer+0x37c>)
 8002616:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800261a:	e029      	b.n	8002670 <storeAnalogSensorBuffer+0x380>
 800261c:	2000028c 	.word	0x2000028c
 8002620:	20015f5c 	.word	0x20015f5c
 8002624:	20015fc0 	.word	0x20015fc0
 8002628:	447a0000 	.word	0x447a0000
 800262c:	20000030 	.word	0x20000030
 8002630:	200002bc 	.word	0x200002bc
 8002634:	200002a8 	.word	0x200002a8
 8002638:	200002d0 	.word	0x200002d0
 800263c:	200002e4 	.word	0x200002e4
 8002640:	200002f8 	.word	0x200002f8
 8002644:	2000030c 	.word	0x2000030c
 8002648:	20000320 	.word	0x20000320
 800264c:	20000334 	.word	0x20000334
 8002650:	20000348 	.word	0x20000348
 8002654:	2000035c 	.word	0x2000035c
 8002658:	20000370 	.word	0x20000370
 800265c:	20000384 	.word	0x20000384
 8002660:	200002a4 	.word	0x200002a4
 8002664:	20015f54 	.word	0x20015f54
 8002668:	20015f94 	.word	0x20015f94
 800266c:	20000398 	.word	0x20000398
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <storeAnalogSensorBuffer+0x3d4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <storeAnalogSensorBuffer+0x3d8>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <storeAnalogSensorBuffer+0x3dc>)
 8002688:	ed93 7a00 	vldr	s14, [r3]
 800268c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002690:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80026d0 <storeAnalogSensorBuffer+0x3e0>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <storeAnalogSensorBuffer+0x3e4>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026a2:	ee17 3a90 	vmov	r3, s15
 80026a6:	b219      	sxth	r1, r3
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <storeAnalogSensorBuffer+0x3e8>)
 80026aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <storeAnalogSensorBuffer+0x3e4>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <storeAnalogSensorBuffer+0x3e4>)
 80026b8:	701a      	strb	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	200002a4 	.word	0x200002a4
 80026c8:	20015f54 	.word	0x20015f54
 80026cc:	20015f94 	.word	0x20015f94
 80026d0:	447a0000 	.word	0x447a0000
 80026d4:	20000030 	.word	0x20000030
 80026d8:	200003ac 	.word	0x200003ac

080026dc <updateAnalogSensor>:

void updateAnalogSensor(void) {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 80026e2:	4bc9      	ldr	r3, [pc, #804]	; (8002a08 <updateAnalogSensor+0x32c>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026ee:	4bc7      	ldr	r3, [pc, #796]	; (8002a0c <updateAnalogSensor+0x330>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026f8:	4bc5      	ldr	r3, [pc, #788]	; (8002a10 <updateAnalogSensor+0x334>)
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002702:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a14 <updateAnalogSensor+0x338>
 8002706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270e:	ee17 3a90 	vmov	r3, s15
 8002712:	b21a      	sxth	r2, r3
 8002714:	4bc0      	ldr	r3, [pc, #768]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002716:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002718:	4bbb      	ldr	r3, [pc, #748]	; (8002a08 <updateAnalogSensor+0x32c>)
 800271a:	885b      	ldrh	r3, [r3, #2]
 800271c:	ee07 3a90 	vmov	s15, r3
 8002720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002724:	4bb9      	ldr	r3, [pc, #740]	; (8002a0c <updateAnalogSensor+0x330>)
 8002726:	edd3 7a01 	vldr	s15, [r3, #4]
 800272a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800272e:	4bb8      	ldr	r3, [pc, #736]	; (8002a10 <updateAnalogSensor+0x334>)
 8002730:	ed93 7a01 	vldr	s14, [r3, #4]
 8002734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002738:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a14 <updateAnalogSensor+0x338>
 800273c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002744:	ee17 3a90 	vmov	r3, s15
 8002748:	b21a      	sxth	r2, r3
 800274a:	4bb3      	ldr	r3, [pc, #716]	; (8002a18 <updateAnalogSensor+0x33c>)
 800274c:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800274e:	4bae      	ldr	r3, [pc, #696]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002750:	889b      	ldrh	r3, [r3, #4]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800275a:	4bac      	ldr	r3, [pc, #688]	; (8002a0c <updateAnalogSensor+0x330>)
 800275c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002760:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002764:	4baa      	ldr	r3, [pc, #680]	; (8002a10 <updateAnalogSensor+0x334>)
 8002766:	ed93 7a02 	vldr	s14, [r3, #8]
 800276a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800276e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a14 <updateAnalogSensor+0x338>
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277a:	ee17 3a90 	vmov	r3, s15
 800277e:	b21a      	sxth	r2, r3
 8002780:	4ba5      	ldr	r3, [pc, #660]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002782:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002784:	4ba0      	ldr	r3, [pc, #640]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002786:	88db      	ldrh	r3, [r3, #6]
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002790:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <updateAnalogSensor+0x330>)
 8002792:	edd3 7a03 	vldr	s15, [r3, #12]
 8002796:	ee77 6a67 	vsub.f32	s13, s14, s15
 800279a:	4b9d      	ldr	r3, [pc, #628]	; (8002a10 <updateAnalogSensor+0x334>)
 800279c:	ed93 7a03 	vldr	s14, [r3, #12]
 80027a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027a4:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a14 <updateAnalogSensor+0x338>
 80027a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b0:	ee17 3a90 	vmov	r3, s15
 80027b4:	b21a      	sxth	r2, r3
 80027b6:	4b98      	ldr	r3, [pc, #608]	; (8002a18 <updateAnalogSensor+0x33c>)
 80027b8:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 80027ba:	4b93      	ldr	r3, [pc, #588]	; (8002a08 <updateAnalogSensor+0x32c>)
 80027bc:	891b      	ldrh	r3, [r3, #8]
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <updateAnalogSensor+0x330>)
 80027c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80027cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <updateAnalogSensor+0x334>)
 80027d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80027d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027da:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a14 <updateAnalogSensor+0x338>
 80027de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027e6:	ee17 3a90 	vmov	r3, s15
 80027ea:	b21a      	sxth	r2, r3
 80027ec:	4b8a      	ldr	r3, [pc, #552]	; (8002a18 <updateAnalogSensor+0x33c>)
 80027ee:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 80027f0:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <updateAnalogSensor+0x32c>)
 80027f2:	895b      	ldrh	r3, [r3, #10]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027fc:	4b83      	ldr	r3, [pc, #524]	; (8002a0c <updateAnalogSensor+0x330>)
 80027fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8002802:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <updateAnalogSensor+0x334>)
 8002808:	ed93 7a05 	vldr	s14, [r3, #20]
 800280c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002810:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a14 <updateAnalogSensor+0x338>
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800281c:	ee17 3a90 	vmov	r3, s15
 8002820:	b21a      	sxth	r2, r3
 8002822:	4b7d      	ldr	r3, [pc, #500]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002824:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002826:	4b78      	ldr	r3, [pc, #480]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002828:	899b      	ldrh	r3, [r3, #12]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <updateAnalogSensor+0x330>)
 8002834:	edd3 7a06 	vldr	s15, [r3, #24]
 8002838:	ee77 6a67 	vsub.f32	s13, s14, s15
 800283c:	4b74      	ldr	r3, [pc, #464]	; (8002a10 <updateAnalogSensor+0x334>)
 800283e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002846:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a14 <updateAnalogSensor+0x338>
 800284a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002852:	ee17 3a90 	vmov	r3, s15
 8002856:	b21a      	sxth	r2, r3
 8002858:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <updateAnalogSensor+0x33c>)
 800285a:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 800285c:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <updateAnalogSensor+0x32c>)
 800285e:	89db      	ldrh	r3, [r3, #14]
 8002860:	ee07 3a90 	vmov	s15, r3
 8002864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002868:	4b68      	ldr	r3, [pc, #416]	; (8002a0c <updateAnalogSensor+0x330>)
 800286a:	edd3 7a07 	vldr	s15, [r3, #28]
 800286e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002872:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <updateAnalogSensor+0x334>)
 8002874:	ed93 7a07 	vldr	s14, [r3, #28]
 8002878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800287c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a14 <updateAnalogSensor+0x338>
 8002880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002884:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002888:	ee17 3a90 	vmov	r3, s15
 800288c:	b21a      	sxth	r2, r3
 800288e:	4b62      	ldr	r3, [pc, #392]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002890:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002894:	8a1b      	ldrh	r3, [r3, #16]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <updateAnalogSensor+0x330>)
 80028a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80028a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <updateAnalogSensor+0x334>)
 80028aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80028ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028b2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a14 <updateAnalogSensor+0x338>
 80028b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028be:	ee17 3a90 	vmov	r3, s15
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	4b54      	ldr	r3, [pc, #336]	; (8002a18 <updateAnalogSensor+0x33c>)
 80028c6:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 80028c8:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <updateAnalogSensor+0x32c>)
 80028ca:	8a5b      	ldrh	r3, [r3, #18]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <updateAnalogSensor+0x330>)
 80028d6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80028da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028de:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <updateAnalogSensor+0x334>)
 80028e0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80028e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a14 <updateAnalogSensor+0x338>
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028f4:	ee17 3a90 	vmov	r3, s15
 80028f8:	b21a      	sxth	r2, r3
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <updateAnalogSensor+0x33c>)
 80028fc:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80028fe:	4b42      	ldr	r3, [pc, #264]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002900:	8a9b      	ldrh	r3, [r3, #20]
 8002902:	ee07 3a90 	vmov	s15, r3
 8002906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800290a:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <updateAnalogSensor+0x330>)
 800290c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002910:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002914:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <updateAnalogSensor+0x334>)
 8002916:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800291a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a14 <updateAnalogSensor+0x338>
 8002922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292a:	ee17 3a90 	vmov	r3, s15
 800292e:	b21a      	sxth	r2, r3
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002932:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <updateAnalogSensor+0x32c>)
 8002936:	8adb      	ldrh	r3, [r3, #22]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <updateAnalogSensor+0x330>)
 8002942:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002946:	ee77 6a67 	vsub.f32	s13, s14, s15
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <updateAnalogSensor+0x334>)
 800294c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002954:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a14 <updateAnalogSensor+0x338>
 8002958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800295c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002960:	ee17 3a90 	vmov	r3, s15
 8002964:	b21a      	sxth	r2, r3
 8002966:	4b2c      	ldr	r3, [pc, #176]	; (8002a18 <updateAnalogSensor+0x33c>)
 8002968:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 800296a:	4b2c      	ldr	r3, [pc, #176]	; (8002a1c <updateAnalogSensor+0x340>)
 800296c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002970:	461a      	mov	r2, r3
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <updateAnalogSensor+0x340>)
 8002974:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002978:	4413      	add	r3, r2
 800297a:	4a28      	ldr	r2, [pc, #160]	; (8002a1c <updateAnalogSensor+0x340>)
 800297c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002980:	4413      	add	r3, r2
 8002982:	4a26      	ldr	r2, [pc, #152]	; (8002a1c <updateAnalogSensor+0x340>)
 8002984:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002988:	4413      	add	r3, r2
 800298a:	4a24      	ldr	r2, [pc, #144]	; (8002a1c <updateAnalogSensor+0x340>)
 800298c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002990:	4413      	add	r3, r2
 8002992:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <updateAnalogSensor+0x340>)
 8002994:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002998:	4413      	add	r3, r2
 800299a:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <updateAnalogSensor+0x340>)
 800299c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <updateAnalogSensor+0x340>)
 80029a4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80029a8:	4413      	add	r3, r2
 80029aa:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <updateAnalogSensor+0x340>)
 80029ac:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a1a      	ldr	r2, [pc, #104]	; (8002a1c <updateAnalogSensor+0x340>)
 80029b4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80029b8:	4413      	add	r3, r2
 80029ba:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <updateAnalogSensor+0x344>)
 80029bc:	fb82 1203 	smull	r1, r2, r2, r3
 80029c0:	1092      	asrs	r2, r2, #2
 80029c2:	17db      	asrs	r3, r3, #31
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	b21a      	sxth	r2, r3
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <updateAnalogSensor+0x348>)
 80029ca:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029da:	4413      	add	r3, r2
 80029dc:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029de:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029e2:	4413      	add	r3, r2
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029e6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029ee:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a0c      	ldr	r2, [pc, #48]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029f6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029fa:	4413      	add	r3, r2
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <updateAnalogSensor+0x34c>)
 80029fe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	e012      	b.n	8002a2c <updateAnalogSensor+0x350>
 8002a06:	bf00      	nop
 8002a08:	2000028c 	.word	0x2000028c
 8002a0c:	20015f5c 	.word	0x20015f5c
 8002a10:	20015fc0 	.word	0x20015fc0
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	20015f9c 	.word	0x20015f9c
 8002a1c:	20000398 	.word	0x20000398
 8002a20:	66666667 	.word	0x66666667
 8002a24:	20015f40 	.word	0x20015f40
 8002a28:	200003ac 	.word	0x200003ac
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <updateAnalogSensor+0x3d0>)
 8002a2e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a1d      	ldr	r2, [pc, #116]	; (8002aac <updateAnalogSensor+0x3d0>)
 8002a36:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <updateAnalogSensor+0x3d0>)
 8002a3e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a1a      	ldr	r2, [pc, #104]	; (8002ab0 <updateAnalogSensor+0x3d4>)
 8002a46:	fb82 1203 	smull	r1, r2, r2, r3
 8002a4a:	1092      	asrs	r2, r2, #2
 8002a4c:	17db      	asrs	r3, r3, #31
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <updateAnalogSensor+0x3d8>)
 8002a54:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	e01a      	b.n	8002a92 <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <updateAnalogSensor+0x3dc>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a68:	db05      	blt.n	8002a76 <updateAnalogSensor+0x39a>
 8002a6a:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <updateAnalogSensor+0x3dc>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002a76:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <updateAnalogSensor+0x3dc>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dc04      	bgt.n	8002a8c <updateAnalogSensor+0x3b0>
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <updateAnalogSensor+0x3dc>)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2100      	movs	r1, #0
 8002a88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b0b      	cmp	r3, #11
 8002a96:	dde1      	ble.n	8002a5c <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002a98:	4b08      	ldr	r3, [pc, #32]	; (8002abc <updateAnalogSensor+0x3e0>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]

}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	200003ac 	.word	0x200003ac
 8002ab0:	66666667 	.word	0x66666667
 8002ab4:	20015fb8 	.word	0x20015fb8
 8002ab8:	20015f9c 	.word	0x20015f9c
 8002abc:	20000030 	.word	0x20000030

08002ac0 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0a0      	sub	sp, #128	; 0x80
 8002ac4:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002ac6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aca:	2230      	movs	r2, #48	; 0x30
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f009 fbc9 	bl	800c266 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002ad4:	f107 0310 	add.w	r3, r7, #16
 8002ad8:	2230      	movs	r2, #48	; 0x30
 8002ada:	2100      	movs	r1, #0
 8002adc:	4618      	mov	r0, r3
 8002ade:	f009 fbc2 	bl	800c266 <memset>
 8002ae2:	4bd8      	ldr	r3, [pc, #864]	; (8002e44 <sensorCalibration+0x384>)
 8002ae4:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002aec:	e026      	b.n	8002b3c <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002aee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002af2:	4ad5      	ldr	r2, [pc, #852]	; (8002e48 <sensorCalibration+0x388>)
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002afe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b02:	4ad2      	ldr	r2, [pc, #840]	; (8002e4c <sensorCalibration+0x38c>)
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	4ad1      	ldr	r2, [pc, #836]	; (8002e50 <sensorCalibration+0x390>)
 8002b0a:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b0c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b16:	4413      	add	r3, r2
 8002b18:	3b40      	subs	r3, #64	; 0x40
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b20:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b70      	subs	r3, #112	; 0x70
 8002b2e:	4ac8      	ldr	r2, [pc, #800]	; (8002e50 <sensorCalibration+0x390>)
 8002b30:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b32:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b36:	3301      	adds	r3, #1
 8002b38:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002b3c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b40:	2b0b      	cmp	r3, #11
 8002b42:	d9d4      	bls.n	8002aee <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002b4a:	e013      	b.n	8002b74 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002b4c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b50:	4ac0      	ldr	r2, [pc, #768]	; (8002e54 <sensorCalibration+0x394>)
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002b5c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b60:	4abd      	ldr	r2, [pc, #756]	; (8002e58 <sensorCalibration+0x398>)
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	4aba      	ldr	r2, [pc, #744]	; (8002e50 <sensorCalibration+0x390>)
 8002b68:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b6a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b6e:	3301      	adds	r3, #1
 8002b70:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002b74:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d9e7      	bls.n	8002b4c <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002b7c:	e0f5      	b.n	8002d6a <sensorCalibration+0x2aa>

		setLED2('X');
 8002b7e:	2058      	movs	r0, #88	; 0x58
 8002b80:	f7fe ff3e 	bl	8001a00 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002b8a:	e06e      	b.n	8002c6a <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002b8c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b90:	4ab2      	ldr	r2, [pc, #712]	; (8002e5c <sensorCalibration+0x39c>)
 8002b92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002b96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b9a:	ee07 2a90 	vmov	s15, r2
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b40      	subs	r3, #64	; 0x40
 8002bac:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002bb0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bb4:	4aa9      	ldr	r2, [pc, #676]	; (8002e5c <sensorCalibration+0x39c>)
 8002bb6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bbe:	ee07 2a90 	vmov	s15, r2
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b70      	subs	r3, #112	; 0x70
 8002bd0:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002bd4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002bde:	4413      	add	r3, r2
 8002be0:	3b40      	subs	r3, #64	; 0x40
 8002be2:	ed93 7a00 	vldr	s14, [r3]
 8002be6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bea:	4a97      	ldr	r2, [pc, #604]	; (8002e48 <sensorCalibration+0x388>)
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfc:	dd0d      	ble.n	8002c1a <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002bfe:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c02:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c0c:	440a      	add	r2, r1
 8002c0e:	3a40      	subs	r2, #64	; 0x40
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	498d      	ldr	r1, [pc, #564]	; (8002e48 <sensorCalibration+0x388>)
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c1a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c24:	4413      	add	r3, r2
 8002c26:	3b70      	subs	r3, #112	; 0x70
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c30:	4a86      	ldr	r2, [pc, #536]	; (8002e4c <sensorCalibration+0x38c>)
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	d50d      	bpl.n	8002c60 <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002c44:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002c48:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002c52:	440a      	add	r2, r1
 8002c54:	3a70      	subs	r2, #112	; 0x70
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	497c      	ldr	r1, [pc, #496]	; (8002e4c <sensorCalibration+0x38c>)
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002c60:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c64:	3301      	adds	r3, #1
 8002c66:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002c6a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002c6e:	2b0b      	cmp	r3, #11
 8002c70:	d98c      	bls.n	8002b8c <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002c72:	2300      	movs	r3, #0
 8002c74:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002c78:	e073      	b.n	8002d62 <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002c7a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c7e:	4a78      	ldr	r2, [pc, #480]	; (8002e60 <sensorCalibration+0x3a0>)
 8002c80:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c84:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c88:	ee07 2a90 	vmov	s15, r2
 8002c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c96:	4413      	add	r3, r2
 8002c98:	3b78      	subs	r3, #120	; 0x78
 8002c9a:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002c9e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ca2:	4a6f      	ldr	r2, [pc, #444]	; (8002e60 <sensorCalibration+0x3a0>)
 8002ca4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ca8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cac:	ee07 2a90 	vmov	s15, r2
 8002cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b80      	subs	r3, #128	; 0x80
 8002cbe:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002cc2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b78      	subs	r3, #120	; 0x78
 8002cd0:	ed93 7a00 	vldr	s14, [r3]
 8002cd4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd8:	4a5e      	ldr	r2, [pc, #376]	; (8002e54 <sensorCalibration+0x394>)
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cea:	dd10      	ble.n	8002d0e <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002cec:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <sensorCalibration+0x3a0>)
 8002cf2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cfa:	ee07 2a90 	vmov	s15, r2
 8002cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d02:	4a54      	ldr	r2, [pc, #336]	; (8002e54 <sensorCalibration+0x394>)
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	edc3 7a00 	vstr	s15, [r3]
 8002d0c:	e024      	b.n	8002d58 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d0e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002d18:	4413      	add	r3, r2
 8002d1a:	3b80      	subs	r3, #128	; 0x80
 8002d1c:	ed93 7a00 	vldr	s14, [r3]
 8002d20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d24:	4a4c      	ldr	r2, [pc, #304]	; (8002e58 <sensorCalibration+0x398>)
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	d50f      	bpl.n	8002d58 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002d38:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d3c:	4a48      	ldr	r2, [pc, #288]	; (8002e60 <sensorCalibration+0x3a0>)
 8002d3e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d42:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d46:	ee07 2a90 	vmov	s15, r2
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	4a42      	ldr	r2, [pc, #264]	; (8002e58 <sensorCalibration+0x398>)
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d58:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002d62:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d987      	bls.n	8002c7a <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002d6a:	204c      	movs	r0, #76	; 0x4c
 8002d6c:	f003 fb58 	bl	8006420 <getSwitchStatus>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	f43f af03 	beq.w	8002b7e <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002d7e:	e01b      	b.n	8002db8 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002d80:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d84:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <sensorCalibration+0x388>)
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	ed93 7a00 	vldr	s14, [r3]
 8002d8e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d92:	4a2e      	ldr	r2, [pc, #184]	; (8002e4c <sensorCalibration+0x38c>)
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da4:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <sensorCalibration+0x3a4>)
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dae:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002db2:	3301      	adds	r3, #1
 8002db4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002db8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002dbc:	2b0b      	cmp	r3, #11
 8002dbe:	d9df      	bls.n	8002d80 <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002dc6:	e010      	b.n	8002dea <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002dc8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002dcc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002dd0:	491e      	ldr	r1, [pc, #120]	; (8002e4c <sensorCalibration+0x38c>)
 8002dd2:	0092      	lsls	r2, r2, #2
 8002dd4:	440a      	add	r2, r1
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	4923      	ldr	r1, [pc, #140]	; (8002e68 <sensorCalibration+0x3a8>)
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002de0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002de4:	3301      	adds	r3, #1
 8002de6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002dea:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002dee:	2b0b      	cmp	r3, #11
 8002df0:	d9ea      	bls.n	8002dc8 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002df8:	e01b      	b.n	8002e32 <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002dfa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002dfe:	4a15      	ldr	r2, [pc, #84]	; (8002e54 <sensorCalibration+0x394>)
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e0c:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <sensorCalibration+0x398>)
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1e:	4a13      	ldr	r2, [pc, #76]	; (8002e6c <sensorCalibration+0x3ac>)
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e28:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002e32:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d9df      	bls.n	8002dfa <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e40:	e027      	b.n	8002e92 <sensorCalibration+0x3d2>
 8002e42:	bf00      	nop
 8002e44:	447a0000 	.word	0x447a0000
 8002e48:	20016120 	.word	0x20016120
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	44bb8000 	.word	0x44bb8000
 8002e54:	200160d0 	.word	0x200160d0
 8002e58:	20016150 	.word	0x20016150
 8002e5c:	2000028c 	.word	0x2000028c
 8002e60:	200002a4 	.word	0x200002a4
 8002e64:	20015fc0 	.word	0x20015fc0
 8002e68:	20015f5c 	.word	0x20015f5c
 8002e6c:	20015f94 	.word	0x20015f94
		side_offset_values[i] = side_min_values[i];
 8002e70:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002e74:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e78:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <sensorCalibration+0x3e4>)
 8002e7a:	0092      	lsls	r2, r2, #2
 8002e7c:	440a      	add	r2, r1
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	4909      	ldr	r1, [pc, #36]	; (8002ea8 <sensorCalibration+0x3e8>)
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e88:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e92:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d9ea      	bls.n	8002e70 <sensorCalibration+0x3b0>
	}
}
 8002e9a:	bf00      	nop
 8002e9c:	3780      	adds	r7, #128	; 0x80
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20016150 	.word	0x20016150
 8002ea8:	20015f54 	.word	0x20015f54

08002eac <initLog>:
static float log_distance[2000];
static float log_theta[2000];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;
//static uint16_t log_distance_cnt, log_theta_cnt, log_x-axis_cnt, log_y-axis_cnt, log_debug_cnt;

void initLog(){
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <initLog+0x60>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <initLog+0x64>)
 8002eb6:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <initLog+0x68>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <initLog+0x6c>)
 8002ebe:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <initLog+0x70>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <initLog+0x74>)
 8002ec6:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002ec8:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <initLog+0x78>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <initLog+0x7c>)
 8002ece:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <initLog+0x80>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <initLog+0x84>)
 8002ed6:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <initLog+0x60>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <initLog+0x88>)
 8002ede:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <initLog+0x68>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <initLog+0x8c>)
 8002ee6:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <initLog+0x70>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <initLog+0x90>)
 8002eee:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <initLog+0x78>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <initLog+0x94>)
 8002ef6:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <initLog+0x80>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <initLog+0x98>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	08010758 	.word	0x08010758
 8002f10:	20015f3c 	.word	0x20015f3c
 8002f14:	0801075c 	.word	0x0801075c
 8002f18:	20015f90 	.word	0x20015f90
 8002f1c:	08010760 	.word	0x08010760
 8002f20:	20015f4c 	.word	0x20015f4c
 8002f24:	08010764 	.word	0x08010764
 8002f28:	20015f38 	.word	0x20015f38
 8002f2c:	08010768 	.word	0x08010768
 8002f30:	20015f48 	.word	0x20015f48
 8002f34:	20015f44 	.word	0x20015f44
 8002f38:	20015f50 	.word	0x20015f50
 8002f3c:	20015fbc 	.word	0x20015fbc
 8002f40:	20015fb4 	.word	0x20015fb4
 8002f44:	20015f8c 	.word	0x20015f8c

08002f48 <saveDistance>:

void saveDistance(float distance){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <saveDistance+0x2c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe fb06 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <saveDistance+0x2c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <saveDistance+0x2c>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20015f3c 	.word	0x20015f3c

08002f78 <saveTheta>:

void saveTheta(float theta){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002f82:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <saveTheta+0x2c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe faee 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002f90:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <saveTheta+0x2c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <saveTheta+0x2c>)
 8002f98:	6013      	str	r3, [r2, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20015f90 	.word	0x20015f90

08002fa8 <saveCross>:

void saveCross(float cross){
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002fb2:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <saveCross+0x2c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe fad6 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <saveCross+0x2c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	4a03      	ldr	r2, [pc, #12]	; (8002fd4 <saveCross+0x2c>)
 8002fc8:	6013      	str	r3, [r2, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20015f4c 	.word	0x20015f4c

08002fd8 <saveSide>:

void saveSide(float side){
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	; (8003004 <saveSide+0x2c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fabe 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002ff0:	4b04      	ldr	r3, [pc, #16]	; (8003004 <saveSide+0x2c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4a03      	ldr	r2, [pc, #12]	; (8003004 <saveSide+0x2c>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20015f38 	.word	0x20015f38

08003008 <saveDebug>:

void saveDebug(float value){
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <saveDebug+0x2c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	ed97 0a01 	vldr	s0, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe faa6 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <saveDebug+0x2c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3304      	adds	r3, #4
 8003026:	4a03      	ldr	r2, [pc, #12]	; (8003034 <saveDebug+0x2c>)
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	20015f48 	.word	0x20015f48

08003038 <ereaseLog>:
void saveY-axis(float y-axis){
	FLASH_Write_Word_F(writeAdd_4, side);
	writeAdd_4 += 0x04;
}*/

void ereaseLog(){
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 800303c:	2007      	movs	r0, #7
 800303e:	f7fe fa75 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8003042:	2008      	movs	r0, #8
 8003044:	f7fe fa72 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8003048:	2009      	movs	r0, #9
 800304a:	f7fe fa6f 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 800304e:	200a      	movs	r0, #10
 8003050:	f7fe fa6c 	bl	800152c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8003054:	200b      	movs	r0, #11
 8003056:	f7fe fa69 	bl	800152c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <ereaseLog+0x50>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <ereaseLog+0x54>)
 8003060:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <ereaseLog+0x58>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <ereaseLog+0x5c>)
 8003068:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <ereaseLog+0x60>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <ereaseLog+0x64>)
 8003070:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8003072:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <ereaseLog+0x68>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a0b      	ldr	r2, [pc, #44]	; (80030a4 <ereaseLog+0x6c>)
 8003078:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <ereaseLog+0x70>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a0b      	ldr	r2, [pc, #44]	; (80030ac <ereaseLog+0x74>)
 8003080:	6013      	str	r3, [r2, #0]
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	08010758 	.word	0x08010758
 800308c:	20015f3c 	.word	0x20015f3c
 8003090:	0801075c 	.word	0x0801075c
 8003094:	20015f90 	.word	0x20015f90
 8003098:	08010760 	.word	0x08010760
 800309c:	20015f4c 	.word	0x20015f4c
 80030a0:	08010764 	.word	0x08010764
 80030a4:	20015f38 	.word	0x20015f38
 80030a8:	08010768 	.word	0x08010768
 80030ac:	20015f48 	.word	0x20015f48

080030b0 <ereaseDebugLog>:

void ereaseDebugLog(){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80030b4:	200b      	movs	r0, #11
 80030b6:	f7fe fa39 	bl	800152c <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 80030ba:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <ereaseDebugLog+0x18>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <ereaseDebugLog+0x1c>)
 80030c0:	6013      	str	r3, [r2, #0]
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08010768 	.word	0x08010768
 80030cc:	20015f48 	.word	0x20015f48

080030d0 <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <getDistanceLogSize+0x14>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	200100e0 	.word	0x200100e0

080030e8 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <getCrossLogSize+0x14>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	200100e4 	.word	0x200100e4

08003100 <getSideLogSize>:

uint16_t getSideLogSize(){
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8003104:	4b03      	ldr	r3, [pc, #12]	; (8003114 <getSideLogSize+0x14>)
 8003106:	881b      	ldrh	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	200100e6 	.word	0x200100e6

08003118 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 800311c:	4b03      	ldr	r3, [pc, #12]	; (800312c <getDebugLogSize+0x14>)
 800311e:	881b      	ldrh	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	200100e8 	.word	0x200100e8

08003130 <loadDistance>:


void loadDistance(){
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <loadDistance+0x6c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <loadDistance+0x70>)
 8003140:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <loadDistance+0x74>)
 8003144:	2200      	movs	r2, #0
 8003146:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <loadDistance+0x70>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	4915      	ldr	r1, [pc, #84]	; (80031a8 <loadDistance+0x78>)
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <loadDistance+0x78>)
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eef4 7a67 	vcmp.f32	s15, s15
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d60e      	bvs.n	800318e <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8003170:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <loadDistance+0x74>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <loadDistance+0x74>)
 800317a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 800317c:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <loadDistance+0x70>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3304      	adds	r3, #4
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <loadDistance+0x70>)
 8003184:	6013      	str	r3, [r2, #0]
		i++;
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	3301      	adds	r3, #1
 800318a:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 800318c:	e7dc      	b.n	8003148 <loadDistance+0x18>
			break;
 800318e:	bf00      	nop
	}
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	08010758 	.word	0x08010758
 80031a0:	20015f44 	.word	0x20015f44
 80031a4:	200100e0 	.word	0x200100e0
 80031a8:	2000c260 	.word	0x2000c260

080031ac <loadTheta>:

void loadTheta(){
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <loadTheta+0x6c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a18      	ldr	r2, [pc, #96]	; (800321c <loadTheta+0x70>)
 80031bc:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <loadTheta+0x74>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 80031c4:	4b15      	ldr	r3, [pc, #84]	; (800321c <loadTheta+0x70>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	88fb      	ldrh	r3, [r7, #6]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	4915      	ldr	r1, [pc, #84]	; (8003224 <loadTheta+0x78>)
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 80031d6:	88fb      	ldrh	r3, [r7, #6]
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <loadTheta+0x78>)
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	edd3 7a00 	vldr	s15, [r3]
 80031e2:	eef4 7a67 	vcmp.f32	s15, s15
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d60e      	bvs.n	800320a <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <loadTheta+0x74>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <loadTheta+0x74>)
 80031f6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <loadTheta+0x70>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3304      	adds	r3, #4
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <loadTheta+0x70>)
 8003200:	6013      	str	r3, [r2, #0]
		i++;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	3301      	adds	r3, #1
 8003206:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003208:	e7dc      	b.n	80031c4 <loadTheta+0x18>
			break;
 800320a:	bf00      	nop
	}
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	0801075c 	.word	0x0801075c
 800321c:	20015f50 	.word	0x20015f50
 8003220:	200100e2 	.word	0x200100e2
 8003224:	2000e1a0 	.word	0x2000e1a0

08003228 <loadCross>:

void loadCross(){
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <loadCross+0x6c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a18      	ldr	r2, [pc, #96]	; (8003298 <loadCross+0x70>)
 8003238:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <loadCross+0x74>)
 800323c:	2200      	movs	r2, #0
 800323e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003240:	4b15      	ldr	r3, [pc, #84]	; (8003298 <loadCross+0x70>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	4915      	ldr	r1, [pc, #84]	; (80032a0 <loadCross+0x78>)
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <loadCross+0x78>)
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eef4 7a67 	vcmp.f32	s15, s15
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	d60e      	bvs.n	8003286 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <loadCross+0x74>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	3301      	adds	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <loadCross+0x74>)
 8003272:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <loadCross+0x70>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3304      	adds	r3, #4
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <loadCross+0x70>)
 800327c:	6013      	str	r3, [r2, #0]
		i++;
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	3301      	adds	r3, #1
 8003282:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8003284:	e7dc      	b.n	8003240 <loadCross+0x18>
			break;
 8003286:	bf00      	nop
	}
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	08010760 	.word	0x08010760
 8003298:	20015fbc 	.word	0x20015fbc
 800329c:	200100e4 	.word	0x200100e4
 80032a0:	200003c0 	.word	0x200003c0

080032a4 <loadSide>:

void loadSide(){
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <loadSide+0x6c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <loadSide+0x70>)
 80032b4:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <loadSide+0x74>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 80032bc:	4b15      	ldr	r3, [pc, #84]	; (8003314 <loadSide+0x70>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	4915      	ldr	r1, [pc, #84]	; (800331c <loadSide+0x78>)
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4a12      	ldr	r2, [pc, #72]	; (800331c <loadSide+0x78>)
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	eef4 7a67 	vcmp.f32	s15, s15
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	d60e      	bvs.n	8003302 <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <loadSide+0x74>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <loadSide+0x74>)
 80032ee:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <loadSide+0x70>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3304      	adds	r3, #4
 80032f6:	4a07      	ldr	r2, [pc, #28]	; (8003314 <loadSide+0x70>)
 80032f8:	6013      	str	r3, [r2, #0]
		i++;
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	3301      	adds	r3, #1
 80032fe:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 8003300:	e7dc      	b.n	80032bc <loadSide+0x18>
			break;
 8003302:	bf00      	nop
	}
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	08010764 	.word	0x08010764
 8003314:	20015fb4 	.word	0x20015fb4
 8003318:	200100e6 	.word	0x200100e6
 800331c:	20000550 	.word	0x20000550

08003320 <loadDebug>:

void loadDebug(){
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <loadDebug+0x6c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <loadDebug+0x70>)
 8003330:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <loadDebug+0x74>)
 8003334:	2200      	movs	r2, #0
 8003336:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <loadDebug+0x70>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	4915      	ldr	r1, [pc, #84]	; (8003398 <loadDebug+0x78>)
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	4a12      	ldr	r2, [pc, #72]	; (8003398 <loadDebug+0x78>)
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	eef4 7a67 	vcmp.f32	s15, s15
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d60e      	bvs.n	800337e <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <loadDebug+0x74>)
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <loadDebug+0x74>)
 800336a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <loadDebug+0x70>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	4a07      	ldr	r2, [pc, #28]	; (8003390 <loadDebug+0x70>)
 8003374:	6013      	str	r3, [r2, #0]
		i++;
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	3301      	adds	r3, #1
 800337a:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 800337c:	e7dc      	b.n	8003338 <loadDebug+0x18>
			break;
 800337e:	bf00      	nop
	}
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	08010768 	.word	0x08010768
 8003390:	20015f8c 	.word	0x20015f8c
 8003394:	200100e8 	.word	0x200100e8
 8003398:	200006e0 	.word	0x200006e0

0800339c <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
	return log_distance;
 80033a0:	4b02      	ldr	r3, [pc, #8]	; (80033ac <getDistanceArrayPointer+0x10>)
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	2000c260 	.word	0x2000c260

080033b0 <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
	return log_theta;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <getThetaArrayPointer+0x10>)
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	2000e1a0 	.word	0x2000e1a0

080033c4 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <getDistanceLog+0x28>)
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	ee07 3a90 	vmov	s15, r3
}
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	2000c260 	.word	0x2000c260

080033f0 <getThetaLog>:

float getThetaLog(uint16_t idx){
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
	return log_theta[idx];
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	4a06      	ldr	r2, [pc, #24]	; (8003418 <getThetaLog+0x28>)
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	ee07 3a90 	vmov	s15, r3
}
 8003408:	eeb0 0a67 	vmov.f32	s0, s15
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	2000e1a0 	.word	0x2000e1a0

0800341c <getCrossLog>:

float getCrossLog(uint16_t idx){
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	4a06      	ldr	r2, [pc, #24]	; (8003444 <getCrossLog+0x28>)
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ee07 3a90 	vmov	s15, r3
}
 8003434:	eeb0 0a67 	vmov.f32	s0, s15
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200003c0 	.word	0x200003c0

08003448 <getSideLog>:

float getSideLog(uint16_t idx){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 8003452:	88fb      	ldrh	r3, [r7, #6]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <getSideLog+0x28>)
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	ee07 3a90 	vmov	s15, r3
}
 8003460:	eeb0 0a67 	vmov.f32	s0, s15
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000550 	.word	0x20000550

08003474 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <getDebugLog+0x28>)
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	ee07 3a90 	vmov	s15, r3
}
 800348c:	eeb0 0a67 	vmov.f32	s0, s15
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	200006e0 	.word	0x200006e0

080034a0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 80034b4:	2200      	movs	r2, #0
 80034b6:	2104      	movs	r1, #4
 80034b8:	480d      	ldr	r0, [pc, #52]	; (80034f0 <read_byte+0x50>)
 80034ba:	f004 fd63 	bl	8007f84 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80034be:	f107 010f 	add.w	r1, r7, #15
 80034c2:	2364      	movs	r3, #100	; 0x64
 80034c4:	2201      	movs	r2, #1
 80034c6:	480b      	ldr	r0, [pc, #44]	; (80034f4 <read_byte+0x54>)
 80034c8:	f005 fb4e 	bl	8008b68 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80034cc:	f107 010e 	add.w	r1, r7, #14
 80034d0:	2364      	movs	r3, #100	; 0x64
 80034d2:	2201      	movs	r2, #1
 80034d4:	4807      	ldr	r0, [pc, #28]	; (80034f4 <read_byte+0x54>)
 80034d6:	f005 fc7b 	bl	8008dd0 <HAL_SPI_Receive>
		CS_SET;
 80034da:	2201      	movs	r2, #1
 80034dc:	2104      	movs	r1, #4
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <read_byte+0x50>)
 80034e0:	f004 fd50 	bl	8007f84 <HAL_GPIO_WritePin>

	return val;
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020c00 	.word	0x40020c00
 80034f4:	20016224 	.word	0x20016224

080034f8 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	460a      	mov	r2, r1
 8003502:	71fb      	strb	r3, [r7, #7]
 8003504:	4613      	mov	r3, r2
 8003506:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350e:	b2db      	uxtb	r3, r3
 8003510:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003512:	2200      	movs	r2, #0
 8003514:	2104      	movs	r1, #4
 8003516:	480c      	ldr	r0, [pc, #48]	; (8003548 <write_byte+0x50>)
 8003518:	f004 fd34 	bl	8007f84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800351c:	f107 010f 	add.w	r1, r7, #15
 8003520:	2364      	movs	r3, #100	; 0x64
 8003522:	2201      	movs	r2, #1
 8003524:	4809      	ldr	r0, [pc, #36]	; (800354c <write_byte+0x54>)
 8003526:	f005 fb1f 	bl	8008b68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800352a:	1db9      	adds	r1, r7, #6
 800352c:	2364      	movs	r3, #100	; 0x64
 800352e:	2201      	movs	r2, #1
 8003530:	4806      	ldr	r0, [pc, #24]	; (800354c <write_byte+0x54>)
 8003532:	f005 fc4d 	bl	8008dd0 <HAL_SPI_Receive>
	CS_SET;
 8003536:	2201      	movs	r2, #1
 8003538:	2104      	movs	r1, #4
 800353a:	4803      	ldr	r0, [pc, #12]	; (8003548 <write_byte+0x50>)
 800353c:	f004 fd22 	bl	8007f84 <HAL_GPIO_WritePin>
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40020c00 	.word	0x40020c00
 800354c:	20016224 	.word	0x20016224

08003550 <IMU_init>:

uint8_t IMU_init() {
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800355a:	2075      	movs	r0, #117	; 0x75
 800355c:	f7ff ffa0 	bl	80034a0 <read_byte>
 8003560:	4603      	mov	r3, r0
 8003562:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003564:	79bb      	ldrb	r3, [r7, #6]
 8003566:	2b70      	cmp	r3, #112	; 0x70
 8003568:	d110      	bne.n	800358c <IMU_init+0x3c>
		ret = 1;
 800356a:	2301      	movs	r3, #1
 800356c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800356e:	2100      	movs	r1, #0
 8003570:	206b      	movs	r0, #107	; 0x6b
 8003572:	f7ff ffc1 	bl	80034f8 <write_byte>
		HAL_Delay(100);
 8003576:	2064      	movs	r0, #100	; 0x64
 8003578:	f003 f8d2 	bl	8006720 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800357c:	2100      	movs	r1, #0
 800357e:	201a      	movs	r0, #26
 8003580:	f7ff ffba 	bl	80034f8 <write_byte>
		write_byte(0x1B, 0x18);
 8003584:	2118      	movs	r1, #24
 8003586:	201b      	movs	r0, #27
 8003588:	f7ff ffb6 	bl	80034f8 <write_byte>
	}
	return ret;
 800358c:	79fb      	ldrb	r3, [r7, #7]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <read_gyro_data>:

void read_gyro_data() {
 8003598:	b598      	push	{r3, r4, r7, lr}
 800359a:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 800359c:	2047      	movs	r0, #71	; 0x47
 800359e:	f7ff ff7f 	bl	80034a0 <read_byte>
 80035a2:	4603      	mov	r3, r0
 80035a4:	021b      	lsls	r3, r3, #8
 80035a6:	b21c      	sxth	r4, r3
 80035a8:	2048      	movs	r0, #72	; 0x48
 80035aa:	f7ff ff79 	bl	80034a0 <read_byte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	4323      	orrs	r3, r4
 80035b4:	b21a      	sxth	r2, r3
 80035b6:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <read_gyro_data+0x28>)
 80035b8:	801a      	strh	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	bd98      	pop	{r3, r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	20016158 	.word	0x20016158

080035c4 <CreateXYcoordinates>:
static float target_Y_coordinate;

bool lookaheadpoint_update_flag;

void CreateXYcoordinates()
{
 80035c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035c8:	b08a      	sub	sp, #40	; 0x28
 80035ca:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80035cc:	f7ff fee6 	bl	800339c <getDistanceArrayPointer>
 80035d0:	6138      	str	r0, [r7, #16]
	p_theta = getThetaArrayPointer();
 80035d2:	f7ff feed 	bl	80033b0 <getThetaArrayPointer>
 80035d6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	float x = 0, y = 0, th = 0;
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	61bb      	str	r3, [r7, #24]
	uint16_t log_size = getDistanceLogSize();
 80035ea:	f7ff fd71 	bl	80030d0 <getDistanceLogSize>
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 80035f2:	2300      	movs	r3, #0
 80035f4:	82fb      	strh	r3, [r7, #22]
 80035f6:	e08f      	b.n	8003718 <CreateXYcoordinates+0x154>
		temp_distance = p_distance[i];
 80035f8:	8afb      	ldrh	r3, [r7, #22]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 8003604:	8afb      	ldrh	r3, [r7, #22]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	627b      	str	r3, [r7, #36]	; 0x24

		if(temp_theta == 0) temp_theta = 0.00001;
 8003610:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003614:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	d101      	bne.n	8003622 <CreateXYcoordinates+0x5e>
 800361e:	4b43      	ldr	r3, [pc, #268]	; (800372c <CreateXYcoordinates+0x168>)
 8003620:	627b      	str	r3, [r7, #36]	; 0x24

		x = x + temp_distance * cos(th + temp_theta/2);
 8003622:	6a38      	ldr	r0, [r7, #32]
 8003624:	f7fc ff90 	bl	8000548 <__aeabi_f2d>
 8003628:	4604      	mov	r4, r0
 800362a:	460d      	mov	r5, r1
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fc ff8b 	bl	8000548 <__aeabi_f2d>
 8003632:	4680      	mov	r8, r0
 8003634:	4689      	mov	r9, r1
 8003636:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800363a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800363e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003642:	edd7 7a06 	vldr	s15, [r7, #24]
 8003646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff7b 	bl	8000548 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	ec43 2b10 	vmov	d0, r2, r3
 800365a:	f007 faf1 	bl	800ac40 <cos>
 800365e:	ec53 2b10 	vmov	r2, r3, d0
 8003662:	4640      	mov	r0, r8
 8003664:	4649      	mov	r1, r9
 8003666:	f7fc ffc7 	bl	80005f8 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4620      	mov	r0, r4
 8003670:	4629      	mov	r1, r5
 8003672:	f7fc fe0b 	bl	800028c <__adddf3>
 8003676:	4603      	mov	r3, r0
 8003678:	460c      	mov	r4, r1
 800367a:	4618      	mov	r0, r3
 800367c:	4621      	mov	r1, r4
 800367e:	f7fd fab3 	bl	8000be8 <__aeabi_d2f>
 8003682:	4603      	mov	r3, r0
 8003684:	623b      	str	r3, [r7, #32]
		y = y + temp_distance * sin(th + temp_theta/2);
 8003686:	69f8      	ldr	r0, [r7, #28]
 8003688:	f7fc ff5e 	bl	8000548 <__aeabi_f2d>
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7fc ff59 	bl	8000548 <__aeabi_f2d>
 8003696:	4680      	mov	r8, r0
 8003698:	4689      	mov	r9, r1
 800369a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800369e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80036aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ae:	ee17 0a90 	vmov	r0, s15
 80036b2:	f7fc ff49 	bl	8000548 <__aeabi_f2d>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ec43 2b10 	vmov	d0, r2, r3
 80036be:	f007 fb03 	bl	800acc8 <sin>
 80036c2:	ec53 2b10 	vmov	r2, r3, d0
 80036c6:	4640      	mov	r0, r8
 80036c8:	4649      	mov	r1, r9
 80036ca:	f7fc ff95 	bl	80005f8 <__aeabi_dmul>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4620      	mov	r0, r4
 80036d4:	4629      	mov	r1, r5
 80036d6:	f7fc fdd9 	bl	800028c <__adddf3>
 80036da:	4603      	mov	r3, r0
 80036dc:	460c      	mov	r4, r1
 80036de:	4618      	mov	r0, r3
 80036e0:	4621      	mov	r1, r4
 80036e2:	f7fd fa81 	bl	8000be8 <__aeabi_d2f>
 80036e6:	4603      	mov	r3, r0
 80036e8:	61fb      	str	r3, [r7, #28]
		th = th + temp_theta;
 80036ea:	ed97 7a06 	vldr	s14, [r7, #24]
 80036ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	edc7 7a06 	vstr	s15, [r7, #24]

		X_table[i] = x;
 80036fa:	8afb      	ldrh	r3, [r7, #22]
 80036fc:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <CreateXYcoordinates+0x16c>)
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	601a      	str	r2, [r3, #0]
		Y_table[i] = y;
 8003706:	8afb      	ldrh	r3, [r7, #22]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <CreateXYcoordinates+0x170>)
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < log_size; i++){
 8003712:	8afb      	ldrh	r3, [r7, #22]
 8003714:	3301      	adds	r3, #1
 8003716:	82fb      	strh	r3, [r7, #22]
 8003718:	8afa      	ldrh	r2, [r7, #22]
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	429a      	cmp	r2, r3
 800371e:	f4ff af6b 	bcc.w	80035f8 <CreateXYcoordinates+0x34>

		//saveDebug(X_table[i]);//X_tableに値が入っていることを確認
	    //saveDebug(Y_table[i]);
	}
}
 8003722:	bf00      	nop
 8003724:	3728      	adds	r7, #40	; 0x28
 8003726:	46bd      	mov	sp, r7
 8003728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800372c:	3727c5ac 	.word	0x3727c5ac
 8003730:	200100ec 	.word	0x200100ec
 8003734:	2001202c 	.word	0x2001202c

08003738 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 800374c:	f7fd fe5c 	bl	8001408 <getDistance10mm>
 8003750:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003754:	f7fe f84e 	bl	80017f4 <getTheta10mm>
 8003758:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 800375c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003760:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	d101      	bne.n	800376e <CurrentXcoordinates+0x36>
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <CurrentXcoordinates+0xd0>)
 800376c:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cos(pre_th + now_theta/2);
 800376e:	4b27      	ldr	r3, [pc, #156]	; (800380c <CurrentXcoordinates+0xd4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc fee8 	bl	8000548 <__aeabi_f2d>
 8003778:	4604      	mov	r4, r0
 800377a:	460d      	mov	r5, r1
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f7fc fee3 	bl	8000548 <__aeabi_f2d>
 8003782:	4680      	mov	r8, r0
 8003784:	4689      	mov	r9, r1
 8003786:	edd7 7a03 	vldr	s15, [r7, #12]
 800378a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800378e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <CurrentXcoordinates+0xd8>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800379c:	ee17 0a90 	vmov	r0, s15
 80037a0:	f7fc fed2 	bl	8000548 <__aeabi_f2d>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	ec43 2b10 	vmov	d0, r2, r3
 80037ac:	f007 fa48 	bl	800ac40 <cos>
 80037b0:	ec53 2b10 	vmov	r2, r3, d0
 80037b4:	4640      	mov	r0, r8
 80037b6:	4649      	mov	r1, r9
 80037b8:	f7fc ff1e 	bl	80005f8 <__aeabi_dmul>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4620      	mov	r0, r4
 80037c2:	4629      	mov	r1, r5
 80037c4:	f7fc fd62 	bl	800028c <__adddf3>
 80037c8:	4603      	mov	r3, r0
 80037ca:	460c      	mov	r4, r1
 80037cc:	4618      	mov	r0, r3
 80037ce:	4621      	mov	r1, r4
 80037d0:	f7fd fa0a 	bl	8000be8 <__aeabi_d2f>
 80037d4:	4603      	mov	r3, r0
 80037d6:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <CurrentXcoordinates+0xd8>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ed97 7a03 	vldr	s14, [r7, #12]
 80037e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e6:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 80037ea:	4a08      	ldr	r2, [pc, #32]	; (800380c <CurrentXcoordinates+0xd4>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6013      	str	r3, [r2, #0]
	pre_th = th;
 80037f0:	4a07      	ldr	r2, [pc, #28]	; (8003810 <CurrentXcoordinates+0xd8>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6013      	str	r3, [r2, #0]

	return x;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	ee07 3a90 	vmov	s15, r3
}
 80037fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003808:	3727c5ac 	.word	0x3727c5ac
 800380c:	20013f78 	.word	0x20013f78
 8003810:	20013f7c 	.word	0x20013f7c

08003814 <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003814:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003828:	f7fd fdee 	bl	8001408 <getDistance10mm>
 800382c:	ed87 0a00 	vstr	s0, [r7]
	float now_theta = getTheta10mm();
 8003830:	f7fd ffe0 	bl	80017f4 <getTheta10mm>
 8003834:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_theta == 0) now_theta = 0.00001;
 8003838:	edd7 7a03 	vldr	s15, [r7, #12]
 800383c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003844:	d101      	bne.n	800384a <CurrentYcoordinates+0x36>
 8003846:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <CurrentYcoordinates+0xd0>)
 8003848:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sin(pre_th + now_theta/2);
 800384a:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <CurrentYcoordinates+0xd4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe7a 	bl	8000548 <__aeabi_f2d>
 8003854:	4604      	mov	r4, r0
 8003856:	460d      	mov	r5, r1
 8003858:	6838      	ldr	r0, [r7, #0]
 800385a:	f7fc fe75 	bl	8000548 <__aeabi_f2d>
 800385e:	4680      	mov	r8, r0
 8003860:	4689      	mov	r9, r1
 8003862:	edd7 7a03 	vldr	s15, [r7, #12]
 8003866:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800386a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800386e:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <CurrentYcoordinates+0xd8>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003878:	ee17 0a90 	vmov	r0, s15
 800387c:	f7fc fe64 	bl	8000548 <__aeabi_f2d>
 8003880:	4602      	mov	r2, r0
 8003882:	460b      	mov	r3, r1
 8003884:	ec43 2b10 	vmov	d0, r2, r3
 8003888:	f007 fa1e 	bl	800acc8 <sin>
 800388c:	ec53 2b10 	vmov	r2, r3, d0
 8003890:	4640      	mov	r0, r8
 8003892:	4649      	mov	r1, r9
 8003894:	f7fc feb0 	bl	80005f8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4620      	mov	r0, r4
 800389e:	4629      	mov	r1, r5
 80038a0:	f7fc fcf4 	bl	800028c <__adddf3>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4618      	mov	r0, r3
 80038aa:	4621      	mov	r1, r4
 80038ac:	f7fd f99c 	bl	8000be8 <__aeabi_d2f>
 80038b0:	4603      	mov	r3, r0
 80038b2:	60bb      	str	r3, [r7, #8]
	th = pre_th + now_theta;
 80038b4:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <CurrentYcoordinates+0xd8>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80038be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c2:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 80038c6:	4a08      	ldr	r2, [pc, #32]	; (80038e8 <CurrentYcoordinates+0xd4>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	6013      	str	r3, [r2, #0]
	pre_th = th;
 80038cc:	4a07      	ldr	r2, [pc, #28]	; (80038ec <CurrentYcoordinates+0xd8>)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6013      	str	r3, [r2, #0]

	return y;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	ee07 3a90 	vmov	s15, r3
}
 80038d8:	eeb0 0a67 	vmov.f32	s0, s15
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038e4:	3727c5ac 	.word	0x3727c5ac
 80038e8:	20013f80 	.word	0x20013f80
 80038ec:	20013f84 	.word	0x20013f84

080038f0 <updateLookaheadpoints>:

void updateLookaheadpoints(){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	if(getDebugflag() == true){
 80038f4:	f002 f96a 	bl	8005bcc <getDebugflag>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03f      	beq.n	800397e <updateLookaheadpoints+0x8e>
		if(getTotalDistance() >= ref_XYdistance){
 80038fe:	f7fd fcf5 	bl	80012ec <getTotalDistance>
 8003902:	eeb0 7a40 	vmov.f32	s14, s0
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <updateLookaheadpoints+0x94>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	db14      	blt.n	8003940 <updateLookaheadpoints+0x50>
			ref_XYdistance += getDistanceLog(lookaheadpoint_table_idx);
 8003916:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <updateLookaheadpoints+0x98>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7ff fd52 	bl	80033c4 <getDistanceLog>
 8003920:	eeb0 7a40 	vmov.f32	s14, s0
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <updateLookaheadpoints+0x94>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <updateLookaheadpoints+0x94>)
 8003930:	edc3 7a00 	vstr	s15, [r3]
			lookaheadpoint_table_idx++;
 8003934:	4b14      	ldr	r3, [pc, #80]	; (8003988 <updateLookaheadpoints+0x98>)
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	3301      	adds	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <updateLookaheadpoints+0x98>)
 800393e:	801a      	strh	r2, [r3, #0]
		}
		if(lookaheadpoint_table_idx >= getDistanceLogSize()){
 8003940:	f7ff fbc6 	bl	80030d0 <getDistanceLogSize>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <updateLookaheadpoints+0x98>)
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d806      	bhi.n	800395e <updateLookaheadpoints+0x6e>
			lookaheadpoint_table_idx = getDistanceLogSize() - 1;
 8003950:	f7ff fbbe 	bl	80030d0 <getDistanceLogSize>
 8003954:	4603      	mov	r3, r0
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <updateLookaheadpoints+0x98>)
 800395c:	801a      	strh	r2, [r3, #0]
		}

		target_X_coordinate = X_table[lookaheadpoint_table_idx];
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <updateLookaheadpoints+0x98>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	4a0a      	ldr	r2, [pc, #40]	; (800398c <updateLookaheadpoints+0x9c>)
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <updateLookaheadpoints+0xa0>)
 800396c:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = Y_table[lookaheadpoint_table_idx];
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <updateLookaheadpoints+0x98>)
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	4a08      	ldr	r2, [pc, #32]	; (8003994 <updateLookaheadpoints+0xa4>)
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a07      	ldr	r2, [pc, #28]	; (8003998 <updateLookaheadpoints+0xa8>)
 800397c:	6013      	str	r3, [r2, #0]

	}
}
 800397e:	bf00      	nop
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20016164 	.word	0x20016164
 8003988:	20013f6c 	.word	0x20013f6c
 800398c:	200100ec 	.word	0x200100ec
 8003990:	20013f70 	.word	0x20013f70
 8003994:	2001202c 	.word	0x2001202c
 8003998:	20013f74 	.word	0x20013f74

0800399c <PurepursuitCalculation>:

float PurepursuitCalculation(void)
{
 800399c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800399e:	ed2d 8b02 	vpush	{d8}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
	static float ang_diff;

	float now_theta = getaddTheta30mm();
 80039a6:	f7fd ff33 	bl	8001810 <getaddTheta30mm>
 80039aa:	ed87 0a01 	vstr	s0, [r7, #4]

	if(now_theta == 0) now_theta = 0.00001;
 80039ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ba:	d101      	bne.n	80039c0 <PurepursuitCalculation+0x24>
 80039bc:	4b23      	ldr	r3, [pc, #140]	; (8003a4c <PurepursuitCalculation+0xb0>)
 80039be:	607b      	str	r3, [r7, #4]

	ang_diff = atan2((target_Y_coordinate - CurrentYcoordinates()) , (target_X_coordinate - CurrentXcoordinates())) - now_theta;//目標点と走行中の点の差分角度を計算する(rad)
 80039c0:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <PurepursuitCalculation+0xb4>)
 80039c2:	ed93 8a00 	vldr	s16, [r3]
 80039c6:	f7ff ff25 	bl	8003814 <CurrentYcoordinates>
 80039ca:	eef0 7a40 	vmov.f32	s15, s0
 80039ce:	ee78 7a67 	vsub.f32	s15, s16, s15
 80039d2:	ee17 0a90 	vmov	r0, s15
 80039d6:	f7fc fdb7 	bl	8000548 <__aeabi_f2d>
 80039da:	4604      	mov	r4, r0
 80039dc:	460d      	mov	r5, r1
 80039de:	4b1d      	ldr	r3, [pc, #116]	; (8003a54 <PurepursuitCalculation+0xb8>)
 80039e0:	ed93 8a00 	vldr	s16, [r3]
 80039e4:	f7ff fea8 	bl	8003738 <CurrentXcoordinates>
 80039e8:	eef0 7a40 	vmov.f32	s15, s0
 80039ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80039f0:	ee17 0a90 	vmov	r0, s15
 80039f4:	f7fc fda8 	bl	8000548 <__aeabi_f2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	ec43 2b11 	vmov	d1, r2, r3
 8003a00:	ec45 4b10 	vmov	d0, r4, r5
 8003a04:	f007 f9a8 	bl	800ad58 <atan2>
 8003a08:	ec56 5b10 	vmov	r5, r6, d0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fd9b 	bl	8000548 <__aeabi_f2d>
 8003a12:	4603      	mov	r3, r0
 8003a14:	460c      	mov	r4, r1
 8003a16:	461a      	mov	r2, r3
 8003a18:	4623      	mov	r3, r4
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	f7fc fc33 	bl	8000288 <__aeabi_dsub>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	4618      	mov	r0, r3
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f7fd f8dd 	bl	8000be8 <__aeabi_d2f>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <PurepursuitCalculation+0xbc>)
 8003a32:	601a      	str	r2, [r3, #0]

	return ang_diff;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <PurepursuitCalculation+0xbc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	ee07 3a90 	vmov	s15, r3
}
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	ecbd 8b02 	vpop	{d8}
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	3727c5ac 	.word	0x3727c5ac
 8003a50:	20013f74 	.word	0x20013f74
 8003a54:	20013f70 	.word	0x20013f70
 8003a58:	20013f88 	.word	0x20013f88
 8003a5c:	00000000 	.word	0x00000000

08003a60 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 8003a66:	4b40      	ldr	r3, [pc, #256]	; (8003b68 <calculateVelocityControlFlip+0x108>)
 8003a68:	61fb      	str	r3, [r7, #28]
 8003a6a:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <calculateVelocityControlFlip+0x10c>)
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 8003a7a:	f000 f8d9 	bl	8003c30 <getCurrentVelocity>
 8003a7e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8003a82:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <calculateVelocityControlFlip+0x110>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d163      	bne.n	8003b52 <calculateVelocityControlFlip+0xf2>
		if(i_clear_flag == 1){
 8003a8a:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <calculateVelocityControlFlip+0x114>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d106      	bne.n	8003aa0 <calculateVelocityControlFlip+0x40>
			i = 0;
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003a9a:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <calculateVelocityControlFlip+0x114>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003aa0:	f000 f894 	bl	8003bcc <setvariablespeed>
 8003aa4:	eeb0 7a40 	vmov.f32	s14, s0
 8003aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab0:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8003ab4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ab8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac0:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fc fd3d 	bl	8000548 <__aeabi_f2d>
 8003ace:	4604      	mov	r4, r0
 8003ad0:	460d      	mov	r5, r1
 8003ad2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ad6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	ee17 0a90 	vmov	r0, s15
 8003ae2:	f7fc fd31 	bl	8000548 <__aeabi_f2d>
 8003ae6:	a31e      	add	r3, pc, #120	; (adr r3, 8003b60 <calculateVelocityControlFlip+0x100>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fd84 	bl	80005f8 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4620      	mov	r0, r4
 8003af6:	4629      	mov	r1, r5
 8003af8:	f7fc fbc8 	bl	800028c <__adddf3>
 8003afc:	4603      	mov	r3, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	4618      	mov	r0, r3
 8003b02:	4621      	mov	r1, r4
 8003b04:	f7fd f870 	bl	8000be8 <__aeabi_d2f>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003b0c:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003b10:	ed93 7a00 	vldr	s14, [r3]
 8003b14:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b1c:	4b17      	ldr	r3, [pc, #92]	; (8003b7c <calculateVelocityControlFlip+0x11c>)
 8003b1e:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <calculateVelocityControlFlip+0x120>)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	6013      	str	r3, [r2, #0]
		mon_i = i;
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <calculateVelocityControlFlip+0x124>)
 8003b2e:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <calculateVelocityControlFlip+0x118>)
 8003b32:	ed93 7a00 	vldr	s14, [r3]
 8003b36:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <calculateVelocityControlFlip+0x128>)
 8003b48:	edc3 7a00 	vstr	s15, [r3]
			velocity_control_term = p + i + d;
		}*/

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <calculateVelocityControlFlip+0x12c>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	6013      	str	r3, [r2, #0]

	}

}
 8003b52:	bf00      	nop
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	f3af 8000 	nop.w
 8003b60:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b64:	3f50624d 	.word	0x3f50624d
 8003b68:	44bb8000 	.word	0x44bb8000
 8003b6c:	469c4000 	.word	0x469c4000
 8003b70:	20013f8c 	.word	0x20013f8c
 8003b74:	20013f8d 	.word	0x20013f8d
 8003b78:	20013f9c 	.word	0x20013f9c
 8003b7c:	2001616c 	.word	0x2001616c
 8003b80:	2001617c 	.word	0x2001617c
 8003b84:	20016174 	.word	0x20016174
 8003b88:	20013f90 	.word	0x20013f90
 8003b8c:	20013fa0 	.word	0x20013fa0

08003b90 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <getVelocityControlTerm+0x18>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	ee07 3a90 	vmov	s15, r3
}
 8003b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20013f90 	.word	0x20013f90

08003bac <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	; (8003bc8 <setTargetVelocity+0x1c>)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6013      	str	r3, [r2, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	20013f94 	.word	0x20013f94

08003bcc <setvariablespeed>:
{
	target_acceleration = acceleration;
}

float setvariablespeed(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8003bd0:	f7fd fc36 	bl	8001440 <getspeedcount>
 8003bd4:	eeb0 7a40 	vmov.f32	s14, s0
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <setvariablespeed+0x5c>)
 8003bda:	edd3 7a00 	vldr	s15, [r3]
 8003bde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	db04      	blt.n	8003bf2 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <setvariablespeed+0x5c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0f      	ldr	r2, [pc, #60]	; (8003c2c <setvariablespeed+0x60>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	e012      	b.n	8003c18 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8003bf2:	f7fd fc25 	bl	8001440 <getspeedcount>
 8003bf6:	eeb0 7a40 	vmov.f32	s14, s0
 8003bfa:	4b0b      	ldr	r3, [pc, #44]	; (8003c28 <setvariablespeed+0x5c>)
 8003bfc:	edd3 7a00 	vldr	s15, [r3]
 8003c00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c08:	d506      	bpl.n	8003c18 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 8003c0a:	f7fd fc19 	bl	8001440 <getspeedcount>
 8003c0e:	eef0 7a40 	vmov.f32	s15, s0
 8003c12:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <setvariablespeed+0x60>)
 8003c14:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <setvariablespeed+0x60>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	ee07 3a90 	vmov	s15, r3
}
 8003c20:	eeb0 0a67 	vmov.f32	s0, s15
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20013f94 	.word	0x20013f94
 8003c2c:	20013f98 	.word	0x20013f98

08003c30 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	80fb      	strh	r3, [r7, #6]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003c3e:	1d3a      	adds	r2, r7, #4
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fb37 	bl	80012b8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	0fda      	lsrs	r2, r3, #31
 8003c58:	4413      	add	r3, r2
 8003c5a:	105b      	asrs	r3, r3, #1
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c64:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7fc fc6d 	bl	8000548 <__aeabi_f2d>
 8003c6e:	a30d      	add	r3, pc, #52	; (adr r3, 8003ca4 <getCurrentVelocity+0x74>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f7fc fcc0 	bl	80005f8 <__aeabi_dmul>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	460c      	mov	r4, r1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	4621      	mov	r1, r4
 8003c80:	f7fc ffb2 	bl	8000be8 <__aeabi_d2f>
 8003c84:	4603      	mov	r3, r0
 8003c86:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003c88:	4a05      	ldr	r2, [pc, #20]	; (8003ca0 <getCurrentVelocity+0x70>)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	ee07 3a90 	vmov	s15, r3
}
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd90      	pop	{r4, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20016170 	.word	0x20016170
 8003ca4:	2df331e5 	.word	0x2df331e5
 8003ca8:	3f878fcc 	.word	0x3f878fcc

08003cac <getTargetVelocity>:

float getTargetVelocity()
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
	return target_velocity;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <getTargetVelocity+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	ee07 3a90 	vmov	s15, r3
}
 8003cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20013f94 	.word	0x20013f94

08003cc8 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <startVelocityControl+0x1c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003cd2:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <startVelocityControl+0x20>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	20013f8c 	.word	0x20013f8c
 8003ce8:	20013f8d 	.word	0x20013f8d

08003cec <stopVelocityControl>:

void stopVelocityControl(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <stopVelocityControl+0x14>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
}
 8003cf6:	bf00      	nop
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	20013f8c 	.word	0x20013f8c

08003d04 <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <setClearFlagOfVelocityControlI+0x14>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	20013f8d 	.word	0x20013f8d

08003d1c <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003d24:	1d39      	adds	r1, r7, #4
 8003d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4803      	ldr	r0, [pc, #12]	; (8003d3c <__io_putchar+0x20>)
 8003d2e:	f006 fb28 	bl	800a382 <HAL_UART_Transmit>
	return ch;
 8003d32:	687b      	ldr	r3, [r7, #4]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2001627c 	.word	0x2001627c

08003d40 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1a      	ldr	r2, [pc, #104]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d121      	bne.n	8003d96 <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 8003d52:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	4a18      	ldr	r2, [pc, #96]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003d5a:	6013      	str	r3, [r2, #0]
      timer2++;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003d64:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8003d66:	f7fd f9db 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 8003d6a:	f7fd fc39 	bl	80015e0 <updateIMUValue>
      updateAnalogSensor();
 8003d6e:	f7fe fcb5 	bl	80026dc <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 8003d72:	f7fd ffe1 	bl	8001d38 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 8003d76:	f7ff fe73 	bl	8003a60 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8003d7a:	f7fd f905 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 8003d7e:	f7fe f95b 	bl	8002038 <lineTraceFlip>
      runningFlip();
 8003d82:	f001 fc13 	bl	80055ac <runningFlip>
      motorCtrlFlip();
 8003d86:	f001 f92d 	bl	8004fe4 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8003d8a:	f001 f98f 	bl	80050ac <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8003d8e:	f001 f9fb 	bl	8005188 <updateSideSensorStatus>

      checkCourseOut();
 8003d92:	f7fe fa29 	bl	80021e8 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d106      	bne.n	8003dae <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003da8:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8003daa:	f7fe faa1 	bl	80022f0 <storeAnalogSensorBuffer>

   }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40001000 	.word	0x40001000
 8003dbc:	20016180 	.word	0x20016180
 8003dc0:	200161c8 	.word	0x200161c8
 8003dc4:	40001400 	.word	0x40001400
 8003dc8:	200163a0 	.word	0x200163a0

08003dcc <init>:

void init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
	  initADC();
 8003dd0:	f7fe fa78 	bl	80022c4 <initADC>
	  initEncoder();
 8003dd4:	f7fd f986 	bl	80010e4 <initEncoder>
	  initLog();
 8003dd8:	f7ff f868 	bl	8002eac <initLog>
	  initGyro();
 8003ddc:	f7fd fbf0 	bl	80015c0 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003de0:	4809      	ldr	r0, [pc, #36]	; (8003e08 <init+0x3c>)
 8003de2:	f005 fbdc 	bl	800959e <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8003de6:	4809      	ldr	r0, [pc, #36]	; (8003e0c <init+0x40>)
 8003de8:	f005 fbd9 	bl	800959e <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003dec:	f001 f8e2 	bl	8004fb4 <initMotor>

	  setLED('R');
 8003df0:	2052      	movs	r0, #82	; 0x52
 8003df2:	f7fd fd37 	bl	8001864 <setLED>

	  sensorCalibration();
 8003df6:	f7fe fe63 	bl	8002ac0 <sensorCalibration>

	  HAL_Delay(1000);
 8003dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dfe:	f002 fc8f 	bl	8006720 <HAL_Delay>

}
 8003e02:	bf00      	nop
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2001631c 	.word	0x2001631c
 8003e0c:	20016404 	.word	0x20016404

08003e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e16:	f002 fc11 	bl	800663c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e1a:	f000 fb79 	bl	8004510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e1e:	f001 f807 	bl	8004e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e22:	f000 ffdd 	bl	8004de0 <MX_DMA_Init>
  MX_TIM1_Init();
 8003e26:	f000 fd8d 	bl	8004944 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003e2a:	f000 fe0d 	bl	8004a48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003e2e:	f000 fe5f 	bl	8004af0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003e32:	f000 ff1b 	bl	8004c6c <MX_TIM8_Init>
  MX_ADC1_Init();
 8003e36:	f000 fbd5 	bl	80045e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003e3a:	f000 fd1f 	bl	800487c <MX_I2C1_Init>
  MX_SPI3_Init();
 8003e3e:	f000 fd4b 	bl	80048d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8003e42:	f000 ffa3 	bl	8004d8c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003e46:	f000 fea7 	bl	8004b98 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003e4a:	f000 fedb 	bl	8004c04 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003e4e:	f000 fc29 	bl	80046a4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003e52:	f7ff ffbb 	bl	8003dcc <init>

  bool running_flag = false;
 8003e56:	2300      	movs	r3, #0
 8003e58:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003e5a:	204c      	movs	r0, #76	; 0x4c
 8003e5c:	f002 fae0 	bl	8006420 <getSwitchStatus>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d109      	bne.n	8003e7a <main+0x6a>
 8003e66:	4bc3      	ldr	r3, [pc, #780]	; (8004174 <main+0x364>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <main+0x6a>
		  timer = 0;
 8003e6e:	4bc2      	ldr	r3, [pc, #776]	; (8004178 <main+0x368>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8003e74:	4bbf      	ldr	r3, [pc, #764]	; (8004174 <main+0x364>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8003e7a:	204c      	movs	r0, #76	; 0x4c
 8003e7c:	f002 fad0 	bl	8006420 <getSwitchStatus>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d10a      	bne.n	8003e9c <main+0x8c>
 8003e86:	4bbc      	ldr	r3, [pc, #752]	; (8004178 <main+0x368>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b14      	cmp	r3, #20
 8003e8c:	d906      	bls.n	8003e9c <main+0x8c>
 8003e8e:	4bb9      	ldr	r3, [pc, #740]	; (8004174 <main+0x364>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d102      	bne.n	8003e9c <main+0x8c>
		  sw = 2;
 8003e96:	4bb7      	ldr	r3, [pc, #732]	; (8004174 <main+0x364>)
 8003e98:	2202      	movs	r2, #2
 8003e9a:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8003e9c:	4bb6      	ldr	r3, [pc, #728]	; (8004178 <main+0x368>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b28      	cmp	r3, #40	; 0x28
 8003ea2:	d906      	bls.n	8003eb2 <main+0xa2>
 8003ea4:	4bb3      	ldr	r3, [pc, #716]	; (8004174 <main+0x364>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <main+0xa2>
		  sw = 0;
 8003eac:	4bb1      	ldr	r3, [pc, #708]	; (8004174 <main+0x364>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8003eb2:	204c      	movs	r0, #76	; 0x4c
 8003eb4:	f002 fab4 	bl	8006420 <getSwitchStatus>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <main+0xc8>
 8003ebe:	4bad      	ldr	r3, [pc, #692]	; (8004174 <main+0x364>)
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d108      	bne.n	8003ed8 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 8003ec6:	4bad      	ldr	r3, [pc, #692]	; (800417c <main+0x36c>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	4bab      	ldr	r3, [pc, #684]	; (800417c <main+0x36c>)
 8003ed0:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003ed2:	4ba8      	ldr	r3, [pc, #672]	; (8004174 <main+0x364>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003ed8:	2052      	movs	r0, #82	; 0x52
 8003eda:	f002 faa1 	bl	8006420 <getSwitchStatus>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d109      	bne.n	8003ef8 <main+0xe8>
 8003ee4:	4ba6      	ldr	r3, [pc, #664]	; (8004180 <main+0x370>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <main+0xe8>
	  	  timer = 0;
 8003eec:	4ba2      	ldr	r3, [pc, #648]	; (8004178 <main+0x368>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003ef2:	4ba3      	ldr	r3, [pc, #652]	; (8004180 <main+0x370>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003ef8:	2052      	movs	r0, #82	; 0x52
 8003efa:	f002 fa91 	bl	8006420 <getSwitchStatus>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d10a      	bne.n	8003f1a <main+0x10a>
 8003f04:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <main+0x368>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b14      	cmp	r3, #20
 8003f0a:	d906      	bls.n	8003f1a <main+0x10a>
 8003f0c:	4b9c      	ldr	r3, [pc, #624]	; (8004180 <main+0x370>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d102      	bne.n	8003f1a <main+0x10a>
	  	  sw2 = 2;
 8003f14:	4b9a      	ldr	r3, [pc, #616]	; (8004180 <main+0x370>)
 8003f16:	2202      	movs	r2, #2
 8003f18:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003f1a:	4b97      	ldr	r3, [pc, #604]	; (8004178 <main+0x368>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b28      	cmp	r3, #40	; 0x28
 8003f20:	d906      	bls.n	8003f30 <main+0x120>
 8003f22:	4b97      	ldr	r3, [pc, #604]	; (8004180 <main+0x370>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d102      	bne.n	8003f30 <main+0x120>
	  	  sw2 = 0;
 8003f2a:	4b95      	ldr	r3, [pc, #596]	; (8004180 <main+0x370>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003f30:	2052      	movs	r0, #82	; 0x52
 8003f32:	f002 fa75 	bl	8006420 <getSwitchStatus>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10c      	bne.n	8003f56 <main+0x146>
 8003f3c:	4b90      	ldr	r3, [pc, #576]	; (8004180 <main+0x370>)
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d108      	bne.n	8003f56 <main+0x146>
	  	  cnt++;
 8003f44:	4b8f      	ldr	r3, [pc, #572]	; (8004184 <main+0x374>)
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	4b8d      	ldr	r3, [pc, #564]	; (8004184 <main+0x374>)
 8003f4e:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003f50:	4b8b      	ldr	r3, [pc, #556]	; (8004180 <main+0x370>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <main+0x374>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d902      	bls.n	8003f64 <main+0x154>
		  cnt = 0;
 8003f5e:	4b89      	ldr	r3, [pc, #548]	; (8004184 <main+0x374>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003f64:	4b87      	ldr	r3, [pc, #540]	; (8004184 <main+0x374>)
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00b      	beq.n	8003f84 <main+0x174>
		  HAL_Delay(1000);
 8003f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f70:	f002 fbd6 	bl	8006720 <HAL_Delay>
		  running_flag = true;
 8003f74:	2301      	movs	r3, #1
 8003f76:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003f78:	4b83      	ldr	r3, [pc, #524]	; (8004188 <main+0x378>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003f7e:	4b81      	ldr	r3, [pc, #516]	; (8004184 <main+0x374>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <main+0x188>
		  stopLineTrace();
 8003f90:	f7fe f918 	bl	80021c4 <stopLineTrace>
		  stopVelocityControl();
 8003f94:	f7ff feaa 	bl	8003cec <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8003f98:	f001 fe0c 	bl	8005bb4 <getgoalStatus>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <main+0x1a2>
		  running_flag = false;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8003fa6:	4b77      	ldr	r3, [pc, #476]	; (8004184 <main+0x374>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8003fac:	2000      	movs	r0, #0
 8003fae:	f001 f8cd 	bl	800514c <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 14){
 8003fb2:	4b72      	ldr	r3, [pc, #456]	; (800417c <main+0x36c>)
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	2b0d      	cmp	r3, #13
 8003fb8:	d902      	bls.n	8003fc0 <main+0x1b0>
		  soiya = 0;
 8003fba:	4b70      	ldr	r3, [pc, #448]	; (800417c <main+0x36c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8003fc0:	4b6e      	ldr	r3, [pc, #440]	; (800417c <main+0x36c>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	2b0d      	cmp	r3, #13
 8003fc6:	f200 8279 	bhi.w	80044bc <main+0x6ac>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <main+0x1c0>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08004009 	.word	0x08004009
 8003fd4:	08004035 	.word	0x08004035
 8003fd8:	08004053 	.word	0x08004053
 8003fdc:	08004097 	.word	0x08004097
 8003fe0:	080040db 	.word	0x080040db
 8003fe4:	0800411f 	.word	0x0800411f
 8003fe8:	080041a1 	.word	0x080041a1
 8003fec:	080041f5 	.word	0x080041f5
 8003ff0:	08004249 	.word	0x08004249
 8003ff4:	0800429d 	.word	0x0800429d
 8003ff8:	080042f1 	.word	0x080042f1
 8003ffc:	08004345 	.word	0x08004345
 8004000:	08004399 	.word	0x08004399
 8004004:	080043ed 	.word	0x080043ed

			  case 0:
				  setLED('W');
 8004008:	2057      	movs	r0, #87	; 0x57
 800400a:	f7fd fc2b 	bl	8001864 <setLED>
				  setLED2('R');
 800400e:	2052      	movs	r0, #82	; 0x52
 8004010:	f7fd fcf6 	bl	8001a00 <setLED2>
				  printf("0\r\n");
 8004014:	485d      	ldr	r0, [pc, #372]	; (800418c <main+0x37c>)
 8004016:	f008 ffe1 	bl	800cfdc <puts>

				  if(running_flag == true){
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 824f 	beq.w	80044c0 <main+0x6b0>

				  		  //setsuctionMotor(500);
					      setRunMode(2);
 8004022:	2002      	movs	r0, #2
 8004024:	f001 f8da 	bl	80051dc <setRunMode>
					      runningInit();
 8004028:	f001 fbc4 	bl	80057b4 <runningInit>
					      soiya = 13;
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <main+0x36c>)
 800402e:	220d      	movs	r2, #13
 8004030:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 8004032:	e245      	b.n	80044c0 <main+0x6b0>

			  case 1:
				  setLED('G');
 8004034:	2047      	movs	r0, #71	; 0x47
 8004036:	f7fd fc15 	bl	8001864 <setLED>
				  setLED2('G');
 800403a:	2047      	movs	r0, #71	; 0x47
 800403c:	f7fd fce0 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 823e 	beq.w	80044c4 <main+0x6b4>

					  setsuctionMotor(500);
 8004048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800404c:	f001 f87e 	bl	800514c <setsuctionMotor>
						  HAL_Delay(1500);

						  running();*/
				  }

				  break;
 8004050:	e238      	b.n	80044c4 <main+0x6b4>

			  case 2:
				  setLED('Y');
 8004052:	2059      	movs	r0, #89	; 0x59
 8004054:	f7fd fc06 	bl	8001864 <setLED>
				  setLED2('R');
 8004058:	2052      	movs	r0, #82	; 0x52
 800405a:	f7fd fcd1 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8231 	beq.w	80044c8 <main+0x6b8>
						  //startLineTrace();

					      clearspeedcount();
 8004066:	f7fd fa1f 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 800406a:	f7fd fb8d 	bl	8001788 <IMU_average>

					      setRunMode(1);
 800406e:	2001      	movs	r0, #1
 8004070:	f001 f8b4 	bl	80051dc <setRunMode>

					      setVelocityRange(1.5, 1.5);
 8004074:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004078:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800407c:	f001 fdb2 	bl	8005be4 <setVelocityRange>

						  setsuctionMotor(500);
 8004080:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004084:	f001 f862 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1000);
 8004088:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800408c:	f002 fb48 	bl	8006720 <HAL_Delay>

						  running();
 8004090:	f001 f98c 	bl	80053ac <running>
				  }

				  break;
 8004094:	e218      	b.n	80044c8 <main+0x6b8>

			  case 3:
				  setLED('Y');
 8004096:	2059      	movs	r0, #89	; 0x59
 8004098:	f7fd fbe4 	bl	8001864 <setLED>
				  setLED2('G');
 800409c:	2047      	movs	r0, #71	; 0x47
 800409e:	f7fd fcaf 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8211 	beq.w	80044cc <main+0x6bc>
						  //startLineTrace();

						  clearspeedcount();
 80040aa:	f7fd f9fd 	bl	80014a8 <clearspeedcount>

						  IMU_average();
 80040ae:	f7fd fb6b 	bl	8001788 <IMU_average>

						  setRunMode(1);
 80040b2:	2001      	movs	r0, #1
 80040b4:	f001 f892 	bl	80051dc <setRunMode>

						  setVelocityRange(2.2, 2.2);
 80040b8:	eddf 0a35 	vldr	s1, [pc, #212]	; 8004190 <main+0x380>
 80040bc:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8004190 <main+0x380>
 80040c0:	f001 fd90 	bl	8005be4 <setVelocityRange>

						  setsuctionMotor(500);
 80040c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040c8:	f001 f840 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1000);
 80040cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040d0:	f002 fb26 	bl	8006720 <HAL_Delay>

						  running();
 80040d4:	f001 f96a 	bl	80053ac <running>
				  }

				  break;
 80040d8:	e1f8      	b.n	80044cc <main+0x6bc>

			  case 4:
				  setLED('C');
 80040da:	2043      	movs	r0, #67	; 0x43
 80040dc:	f7fd fbc2 	bl	8001864 <setLED>
				  setLED2('R');
 80040e0:	2052      	movs	r0, #82	; 0x52
 80040e2:	f7fd fc8d 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 81f1 	beq.w	80044d0 <main+0x6c0>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80040ee:	f7fd f9db 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 80040f2:	f7fd fb49 	bl	8001788 <IMU_average>

					      setRunMode(5);
 80040f6:	2005      	movs	r0, #5
 80040f8:	f001 f870 	bl	80051dc <setRunMode>

					      setVelocityRange(1.5, 1.5);
 80040fc:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004100:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004104:	f001 fd6e 	bl	8005be4 <setVelocityRange>

						  setsuctionMotor(500);
 8004108:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800410c:	f001 f81e 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 8004110:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004114:	f002 fb04 	bl	8006720 <HAL_Delay>

						  running();
 8004118:	f001 f948 	bl	80053ac <running>
				  }

				  break;
 800411c:	e1d8      	b.n	80044d0 <main+0x6c0>

			  case 5:
				  setLED('C');
 800411e:	2043      	movs	r0, #67	; 0x43
 8004120:	f7fd fba0 	bl	8001864 <setLED>
				  setLED2('G');
 8004124:	2047      	movs	r0, #71	; 0x47
 8004126:	f7fd fc6b 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 81d1 	beq.w	80044d4 <main+0x6c4>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004132:	f7fd f9b9 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8004136:	2002      	movs	r0, #2
 8004138:	f001 f850 	bl	80051dc <setRunMode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 800413c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004140:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004144:	f001 fd4e 	bl	8005be4 <setVelocityRange>
						  setAccDec(7, 3);
 8004148:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 800414c:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004150:	f001 fd60 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004154:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800419c <main+0x38c>
 8004158:	f001 fd74 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 800415c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004160:	f000 fff4 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 8004164:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004168:	f002 fada 	bl	8006720 <HAL_Delay>

						  running();
 800416c:	f001 f91e 	bl	80053ac <running>
				  }

				  break;
 8004170:	e1b0      	b.n	80044d4 <main+0x6c4>
 8004172:	bf00      	nop
 8004174:	2001639c 	.word	0x2001639c
 8004178:	20016180 	.word	0x20016180
 800417c:	20013fa6 	.word	0x20013fa6
 8004180:	20013fa4 	.word	0x20013fa4
 8004184:	20016220 	.word	0x20016220
 8004188:	200161c8 	.word	0x200161c8
 800418c:	080106f8 	.word	0x080106f8
 8004190:	400ccccd 	.word	0x400ccccd
 8004194:	40133333 	.word	0x40133333
 8004198:	40266666 	.word	0x40266666
 800419c:	447a0000 	.word	0x447a0000

			  case 6:
				  setLED('C');
 80041a0:	2043      	movs	r0, #67	; 0x43
 80041a2:	f7fd fb5f 	bl	8001864 <setLED>
				  setLED2('B');
 80041a6:	2042      	movs	r0, #66	; 0x42
 80041a8:	f7fd fc2a 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 8192 	beq.w	80044d8 <main+0x6c8>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80041b4:	f7fd f978 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 80041b8:	2002      	movs	r0, #2
 80041ba:	f001 f80f 	bl	80051dc <setRunMode>


						  setVelocityRange(2.0, 6.0);
 80041be:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80041c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80041c6:	f001 fd0d 	bl	8005be4 <setVelocityRange>
						  setAccDec(8, 5);
 80041ca:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80041ce:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80041d2:	f001 fd1f 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80041d6:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 800419c <main+0x38c>
 80041da:	f001 fd33 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 80041de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041e2:	f000 ffb3 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 80041e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80041ea:	f002 fa99 	bl	8006720 <HAL_Delay>

						  running();
 80041ee:	f001 f8dd 	bl	80053ac <running>
				  }

				  break;
 80041f2:	e171      	b.n	80044d8 <main+0x6c8>

			  case 7:
				  setLED('C');
 80041f4:	2043      	movs	r0, #67	; 0x43
 80041f6:	f7fd fb35 	bl	8001864 <setLED>
				  setLED2('W');
 80041fa:	2057      	movs	r0, #87	; 0x57
 80041fc:	f7fd fc00 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 816a 	beq.w	80044dc <main+0x6cc>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004208:	f7fd f94e 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 800420c:	2002      	movs	r0, #2
 800420e:	f000 ffe5 	bl	80051dc <setRunMode>

						  setVelocityRange(2.5, 6.0);
 8004212:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004216:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800421a:	f001 fce3 	bl	8005be4 <setVelocityRange>
						  setAccDec(8, 5);
 800421e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004222:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004226:	f001 fcf5 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800422a:	ed1f 0a24 	vldr	s0, [pc, #-144]	; 800419c <main+0x38c>
 800422e:	f001 fd09 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 8004232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004236:	f000 ff89 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 800423a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800423e:	f002 fa6f 	bl	8006720 <HAL_Delay>

						  running();
 8004242:	f001 f8b3 	bl	80053ac <running>
				  }

				  break;
 8004246:	e149      	b.n	80044dc <main+0x6cc>

			  case 8:
				  setLED('C');
 8004248:	2043      	movs	r0, #67	; 0x43
 800424a:	f7fd fb0b 	bl	8001864 <setLED>
				  setLED2('Y');
 800424e:	2059      	movs	r0, #89	; 0x59
 8004250:	f7fd fbd6 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 8004254:	79fb      	ldrb	r3, [r7, #7]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8142 	beq.w	80044e0 <main+0x6d0>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 800425c:	f7fd f924 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 8004260:	2003      	movs	r0, #3
 8004262:	f000 ffbb 	bl	80051dc <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004266:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 800426a:	ed1f 0a36 	vldr	s0, [pc, #-216]	; 8004194 <main+0x384>
 800426e:	f001 fcb9 	bl	8005be4 <setVelocityRange>
						  setAccDec(7, 4);
 8004272:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004276:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 800427a:	f001 fccb 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800427e:	ed1f 0a39 	vldr	s0, [pc, #-228]	; 800419c <main+0x38c>
 8004282:	f001 fcdf 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 8004286:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800428a:	f000 ff5f 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 800428e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004292:	f002 fa45 	bl	8006720 <HAL_Delay>

						  running();
 8004296:	f001 f889 	bl	80053ac <running>
				  }

			  	  break;
 800429a:	e121      	b.n	80044e0 <main+0x6d0>

			  case 9:
				  setLED('C');
 800429c:	2043      	movs	r0, #67	; 0x43
 800429e:	f7fd fae1 	bl	8001864 <setLED>
				  setLED2('X');
 80042a2:	2058      	movs	r0, #88	; 0x58
 80042a4:	f7fd fbac 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 811a 	beq.w	80044e4 <main+0x6d4>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 80042b0:	f7fd f8fa 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 80042b4:	2003      	movs	r0, #3
 80042b6:	f000 ff91 	bl	80051dc <setRunMode>

						  setVelocityRange(2.3, 6.5);
 80042ba:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 80042be:	ed1f 0a4b 	vldr	s0, [pc, #-300]	; 8004194 <main+0x384>
 80042c2:	f001 fc8f 	bl	8005be4 <setVelocityRange>
						  setAccDec(8, 6);
 80042c6:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 80042ca:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 80042ce:	f001 fca1 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80042d2:	ed1f 0a4e 	vldr	s0, [pc, #-312]	; 800419c <main+0x38c>
 80042d6:	f001 fcb5 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 80042da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042de:	f000 ff35 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1500);
 80042e2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80042e6:	f002 fa1b 	bl	8006720 <HAL_Delay>

						  running();
 80042ea:	f001 f85f 	bl	80053ac <running>
				  }

				  break;
 80042ee:	e0f9      	b.n	80044e4 <main+0x6d4>

			  case 10:
				  setLED('C');
 80042f0:	2043      	movs	r0, #67	; 0x43
 80042f2:	f7fd fab7 	bl	8001864 <setLED>
				  setLED2('V');
 80042f6:	2056      	movs	r0, #86	; 0x56
 80042f8:	f7fd fb82 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80f2 	beq.w	80044e8 <main+0x6d8>
						  //startLineTrace();

						  clearspeedcount();
 8004304:	f7fd f8d0 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8004308:	2002      	movs	r0, #2
 800430a:	f000 ff67 	bl	80051dc <setRunMode>

						  setVelocityRange(2.5, 7.5);
 800430e:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8004312:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004316:	f001 fc65 	bl	8005be4 <setVelocityRange>
						  setAccDec(7, 4);
 800431a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800431e:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004322:	f001 fc77 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004326:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 800419c <main+0x38c>
 800432a:	f001 fc8b 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 800432e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004332:	f000 ff0b 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1000);
 8004336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800433a:	f002 f9f1 	bl	8006720 <HAL_Delay>

						  running();
 800433e:	f001 f835 	bl	80053ac <running>
				  }

				  break;
 8004342:	e0d1      	b.n	80044e8 <main+0x6d8>


			  case 11:
				  setLED('C');
 8004344:	2043      	movs	r0, #67	; 0x43
 8004346:	f7fd fa8d 	bl	8001864 <setLED>
				  setLED2('T');
 800434a:	2054      	movs	r0, #84	; 0x54
 800434c:	f7fd fb58 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80ca 	beq.w	80044ec <main+0x6dc>
						  //startLineTrace();

						  clearspeedcount();
 8004358:	f7fd f8a6 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 800435c:	2003      	movs	r0, #3
 800435e:	f000 ff3d 	bl	80051dc <setRunMode>

						  setVelocityRange(2.5, 8.5);
 8004362:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 8004366:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 800436a:	f001 fc3b 	bl	8005be4 <setVelocityRange>
						  setAccDec(10, 5);
 800436e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004372:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004376:	f001 fc4d 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 800437a:	ed1f 0a78 	vldr	s0, [pc, #-480]	; 800419c <main+0x38c>
 800437e:	f001 fc61 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 8004382:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004386:	f000 fee1 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1000);
 800438a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800438e:	f002 f9c7 	bl	8006720 <HAL_Delay>

						  running();
 8004392:	f001 f80b 	bl	80053ac <running>
				  }

				  break;
 8004396:	e0a9      	b.n	80044ec <main+0x6dc>

			  case 12:
				  setLED('C');
 8004398:	2043      	movs	r0, #67	; 0x43
 800439a:	f7fd fa63 	bl	8001864 <setLED>
				  setLED2('A');
 800439e:	2041      	movs	r0, #65	; 0x41
 80043a0:	f7fd fb2e 	bl	8001a00 <setLED2>

				  if(running_flag == true){
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a2 	beq.w	80044f0 <main+0x6e0>
						  //startLineTrace();

						  clearspeedcount();
 80043ac:	f7fd f87c 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 80043b0:	2002      	movs	r0, #2
 80043b2:	f000 ff13 	bl	80051dc <setRunMode>

						  setVelocityRange(2.6, 10.0);
 80043b6:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80043ba:	ed1f 0a89 	vldr	s0, [pc, #-548]	; 8004198 <main+0x388>
 80043be:	f001 fc11 	bl	8005be4 <setVelocityRange>
						  setAccDec(7, 4);
 80043c2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80043c6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80043ca:	f001 fc23 	bl	8005c14 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80043ce:	ed1f 0a8d 	vldr	s0, [pc, #-564]	; 800419c <main+0x38c>
 80043d2:	f001 fc37 	bl	8005c44 <setStraightRadius>

						  setsuctionMotor(500);
 80043d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043da:	f000 feb7 	bl	800514c <setsuctionMotor>

						  HAL_Delay(1000);
 80043de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e2:	f002 f99d 	bl	8006720 <HAL_Delay>

						  running();
 80043e6:	f000 ffe1 	bl	80053ac <running>
				  }

				  break;
 80043ea:	e081      	b.n	80044f0 <main+0x6e0>

			  case 13:
				  setLED('M');
 80043ec:	204d      	movs	r0, #77	; 0x4d
 80043ee:	f7fd fa39 	bl	8001864 <setLED>
				  setLED2('A');
 80043f2:	2041      	movs	r0, #65	; 0x41
 80043f4:	f7fd fb04 	bl	8001a00 <setLED2>
				  printf("6\r\n");
 80043f8:	483f      	ldr	r0, [pc, #252]	; (80044f8 <main+0x6e8>)
 80043fa:	f008 fdef 	bl	800cfdc <puts>

				  if(running_flag == true){
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d077      	beq.n	80044f4 <main+0x6e4>
					  loadDistance();
 8004404:	f7fe fe94 	bl	8003130 <loadDistance>
					  loadTheta();
 8004408:	f7fe fed0 	bl	80031ac <loadTheta>
					  loadCross();
 800440c:	f7fe ff0c 	bl	8003228 <loadCross>
					  loadSide();
 8004410:	f7fe ff48 	bl	80032a4 <loadSide>
					  loadDebug();
 8004414:	f7fe ff84 	bl	8003320 <loadDebug>


					  printf("Distance, Theta\r\n");
 8004418:	4838      	ldr	r0, [pc, #224]	; (80044fc <main+0x6ec>)
 800441a:	f008 fddf 	bl	800cfdc <puts>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 800441e:	2300      	movs	r3, #0
 8004420:	80bb      	strh	r3, [r7, #4]
 8004422:	e01f      	b.n	8004464 <main+0x654>
						 printf("%f, %f\r\n", getDistanceLog(i), getThetaLog(i));
 8004424:	88bb      	ldrh	r3, [r7, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe ffcc 	bl	80033c4 <getDistanceLog>
 800442c:	ee10 3a10 	vmov	r3, s0
 8004430:	4618      	mov	r0, r3
 8004432:	f7fc f889 	bl	8000548 <__aeabi_f2d>
 8004436:	4605      	mov	r5, r0
 8004438:	460e      	mov	r6, r1
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe ffd7 	bl	80033f0 <getThetaLog>
 8004442:	ee10 3a10 	vmov	r3, s0
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f87e 	bl	8000548 <__aeabi_f2d>
 800444c:	4603      	mov	r3, r0
 800444e:	460c      	mov	r4, r1
 8004450:	e9cd 3400 	strd	r3, r4, [sp]
 8004454:	462a      	mov	r2, r5
 8004456:	4633      	mov	r3, r6
 8004458:	4829      	ldr	r0, [pc, #164]	; (8004500 <main+0x6f0>)
 800445a:	f008 fd4b 	bl	800cef4 <iprintf>
					  for(uint16_t i = 0; i < getDistanceLogSize(); i++){
 800445e:	88bb      	ldrh	r3, [r7, #4]
 8004460:	3301      	adds	r3, #1
 8004462:	80bb      	strh	r3, [r7, #4]
 8004464:	f7fe fe34 	bl	80030d0 <getDistanceLogSize>
 8004468:	4603      	mov	r3, r0
 800446a:	461a      	mov	r2, r3
 800446c:	88bb      	ldrh	r3, [r7, #4]
 800446e:	4293      	cmp	r3, r2
 8004470:	d3d8      	bcc.n	8004424 <main+0x614>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 8004472:	4824      	ldr	r0, [pc, #144]	; (8004504 <main+0x6f4>)
 8004474:	f008 fdb2 	bl	800cfdc <puts>
					  uint16_t size = getDebugLogSize();
 8004478:	f7fe fe4e 	bl	8003118 <getDebugLogSize>
 800447c:	4603      	mov	r3, r0
 800447e:	803b      	strh	r3, [r7, #0]
					  /*
					  for(uint16_t i = 0; i < size; i = i+2){
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
					  }*/
					  for(uint16_t i = 0; i < size; i++){
 8004480:	2300      	movs	r3, #0
 8004482:	807b      	strh	r3, [r7, #2]
 8004484:	e012      	b.n	80044ac <main+0x69c>
						  printf("%f\r\n", getDebugLog(i));
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fff3 	bl	8003474 <getDebugLog>
 800448e:	ee10 3a10 	vmov	r3, s0
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc f858 	bl	8000548 <__aeabi_f2d>
 8004498:	4603      	mov	r3, r0
 800449a:	460c      	mov	r4, r1
 800449c:	461a      	mov	r2, r3
 800449e:	4623      	mov	r3, r4
 80044a0:	4819      	ldr	r0, [pc, #100]	; (8004508 <main+0x6f8>)
 80044a2:	f008 fd27 	bl	800cef4 <iprintf>
					  for(uint16_t i = 0; i < size; i++){
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	3301      	adds	r3, #1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	883b      	ldrh	r3, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d3e8      	bcc.n	8004486 <main+0x676>
					  }

					  printf("9999, 9999\r\n");
 80044b4:	4815      	ldr	r0, [pc, #84]	; (800450c <main+0x6fc>)
 80044b6:	f008 fd91 	bl	800cfdc <puts>
				  }

				  break;
 80044ba:	e01b      	b.n	80044f4 <main+0x6e4>

			  default:
				  break;
 80044bc:	bf00      	nop
 80044be:	e4cc      	b.n	8003e5a <main+0x4a>
				  break;
 80044c0:	bf00      	nop
 80044c2:	e4ca      	b.n	8003e5a <main+0x4a>
				  break;
 80044c4:	bf00      	nop
 80044c6:	e4c8      	b.n	8003e5a <main+0x4a>
				  break;
 80044c8:	bf00      	nop
 80044ca:	e4c6      	b.n	8003e5a <main+0x4a>
				  break;
 80044cc:	bf00      	nop
 80044ce:	e4c4      	b.n	8003e5a <main+0x4a>
				  break;
 80044d0:	bf00      	nop
 80044d2:	e4c2      	b.n	8003e5a <main+0x4a>
				  break;
 80044d4:	bf00      	nop
 80044d6:	e4c0      	b.n	8003e5a <main+0x4a>
				  break;
 80044d8:	bf00      	nop
 80044da:	e4be      	b.n	8003e5a <main+0x4a>
				  break;
 80044dc:	bf00      	nop
 80044de:	e4bc      	b.n	8003e5a <main+0x4a>
			  	  break;
 80044e0:	bf00      	nop
 80044e2:	e4ba      	b.n	8003e5a <main+0x4a>
				  break;
 80044e4:	bf00      	nop
 80044e6:	e4b8      	b.n	8003e5a <main+0x4a>
				  break;
 80044e8:	bf00      	nop
 80044ea:	e4b6      	b.n	8003e5a <main+0x4a>
				  break;
 80044ec:	bf00      	nop
 80044ee:	e4b4      	b.n	8003e5a <main+0x4a>
				  break;
 80044f0:	bf00      	nop
 80044f2:	e4b2      	b.n	8003e5a <main+0x4a>
				  break;
 80044f4:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 80044f6:	e4b0      	b.n	8003e5a <main+0x4a>
 80044f8:	080106fc 	.word	0x080106fc
 80044fc:	08010700 	.word	0x08010700
 8004500:	08010714 	.word	0x08010714
 8004504:	08010720 	.word	0x08010720
 8004508:	08010744 	.word	0x08010744
 800450c:	0801074c 	.word	0x0801074c

08004510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b094      	sub	sp, #80	; 0x50
 8004514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004516:	f107 0320 	add.w	r3, r7, #32
 800451a:	2230      	movs	r2, #48	; 0x30
 800451c:	2100      	movs	r1, #0
 800451e:	4618      	mov	r0, r3
 8004520:	f007 fea1 	bl	800c266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	4b28      	ldr	r3, [pc, #160]	; (80045dc <SystemClock_Config+0xcc>)
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <SystemClock_Config+0xcc>)
 800453e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004542:	6413      	str	r3, [r2, #64]	; 0x40
 8004544:	4b25      	ldr	r3, [pc, #148]	; (80045dc <SystemClock_Config+0xcc>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004550:	2300      	movs	r3, #0
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	4b22      	ldr	r3, [pc, #136]	; (80045e0 <SystemClock_Config+0xd0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <SystemClock_Config+0xd0>)
 800455a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <SystemClock_Config+0xd0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800456c:	2302      	movs	r3, #2
 800456e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004570:	2301      	movs	r3, #1
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004574:	2310      	movs	r3, #16
 8004576:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004578:	2302      	movs	r3, #2
 800457a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800457c:	2300      	movs	r3, #0
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004580:	2308      	movs	r3, #8
 8004582:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004584:	23a8      	movs	r3, #168	; 0xa8
 8004586:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004588:	2302      	movs	r3, #2
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800458c:	2304      	movs	r3, #4
 800458e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004590:	f107 0320 	add.w	r3, r7, #32
 8004594:	4618      	mov	r0, r3
 8004596:	f003 fe47 	bl	8008228 <HAL_RCC_OscConfig>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80045a0:	f000 fd04 	bl	8004fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a4:	230f      	movs	r3, #15
 80045a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a8:	2302      	movs	r3, #2
 80045aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	2105      	movs	r1, #5
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 f8a0 	bl	8008708 <HAL_RCC_ClockConfig>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80045ce:	f000 fced 	bl	8004fac <Error_Handler>
  }
}
 80045d2:	bf00      	nop
 80045d4:	3750      	adds	r7, #80	; 0x50
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40007000 	.word	0x40007000

080045e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80045ea:	463b      	mov	r3, r7
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80045f6:	4b28      	ldr	r3, [pc, #160]	; (8004698 <MX_ADC1_Init+0xb4>)
 80045f8:	4a28      	ldr	r2, [pc, #160]	; (800469c <MX_ADC1_Init+0xb8>)
 80045fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <MX_ADC1_Init+0xb4>)
 80045fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <MX_ADC1_Init+0xb4>)
 800460c:	2201      	movs	r2, #1
 800460e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004610:	4b21      	ldr	r3, [pc, #132]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004612:	2201      	movs	r2, #1
 8004614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004616:	4b20      	ldr	r3, [pc, #128]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800461e:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004620:	2200      	movs	r2, #0
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004626:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <MX_ADC1_Init+0xbc>)
 8004628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <MX_ADC1_Init+0xb4>)
 800462c:	2200      	movs	r2, #0
 800462e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004630:	4b19      	ldr	r3, [pc, #100]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004632:	2202      	movs	r2, #2
 8004634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004636:	4b18      	ldr	r3, [pc, #96]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800463e:	4b16      	ldr	r3, [pc, #88]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004640:	2201      	movs	r2, #1
 8004642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004644:	4814      	ldr	r0, [pc, #80]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004646:	f002 f88d 	bl	8006764 <HAL_ADC_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004650:	f000 fcac 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004654:	230c      	movs	r3, #12
 8004656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004658:	2301      	movs	r3, #1
 800465a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800465c:	2307      	movs	r3, #7
 800465e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004660:	463b      	mov	r3, r7
 8004662:	4619      	mov	r1, r3
 8004664:	480c      	ldr	r0, [pc, #48]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004666:	f002 f9d1 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004670:	f000 fc9c 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004674:	230d      	movs	r3, #13
 8004676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004678:	2302      	movs	r3, #2
 800467a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800467c:	463b      	mov	r3, r7
 800467e:	4619      	mov	r1, r3
 8004680:	4805      	ldr	r0, [pc, #20]	; (8004698 <MX_ADC1_Init+0xb4>)
 8004682:	f002 f9c3 	bl	8006a0c <HAL_ADC_ConfigChannel>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800468c:	f000 fc8e 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004690:	bf00      	nop
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	200160d8 	.word	0x200160d8
 800469c:	40012000 	.word	0x40012000
 80046a0:	0f000001 	.word	0x0f000001

080046a4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046aa:	463b      	mov	r3, r7
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80046b6:	4b6e      	ldr	r3, [pc, #440]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046b8:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <MX_ADC2_Init+0x1d0>)
 80046ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046bc:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80046c4:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80046ca:	4b69      	ldr	r3, [pc, #420]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80046d0:	4b67      	ldr	r3, [pc, #412]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046d2:	2201      	movs	r2, #1
 80046d4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80046d6:	4b66      	ldr	r3, [pc, #408]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80046de:	4b64      	ldr	r3, [pc, #400]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046e4:	4b62      	ldr	r3, [pc, #392]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046e6:	4a64      	ldr	r2, [pc, #400]	; (8004878 <MX_ADC2_Init+0x1d4>)
 80046e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046ea:	4b61      	ldr	r3, [pc, #388]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 80046f0:	4b5f      	ldr	r3, [pc, #380]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046f2:	220c      	movs	r2, #12
 80046f4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80046f6:	4b5e      	ldr	r3, [pc, #376]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80046fe:	4b5c      	ldr	r3, [pc, #368]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004700:	2201      	movs	r2, #1
 8004702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004704:	485a      	ldr	r0, [pc, #360]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004706:	f002 f82d 	bl	8006764 <HAL_ADC_Init>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004710:	f000 fc4c 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004718:	2301      	movs	r3, #1
 800471a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800471c:	2307      	movs	r3, #7
 800471e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004720:	463b      	mov	r3, r7
 8004722:	4619      	mov	r1, r3
 8004724:	4852      	ldr	r0, [pc, #328]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004726:	f002 f971 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004730:	f000 fc3c 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004734:	2301      	movs	r3, #1
 8004736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004738:	2302      	movs	r3, #2
 800473a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800473c:	463b      	mov	r3, r7
 800473e:	4619      	mov	r1, r3
 8004740:	484b      	ldr	r0, [pc, #300]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004742:	f002 f963 	bl	8006a0c <HAL_ADC_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800474c:	f000 fc2e 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004750:	2302      	movs	r3, #2
 8004752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004754:	2303      	movs	r3, #3
 8004756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004758:	463b      	mov	r3, r7
 800475a:	4619      	mov	r1, r3
 800475c:	4844      	ldr	r0, [pc, #272]	; (8004870 <MX_ADC2_Init+0x1cc>)
 800475e:	f002 f955 	bl	8006a0c <HAL_ADC_ConfigChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004768:	f000 fc20 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800476c:	2303      	movs	r3, #3
 800476e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004770:	2304      	movs	r3, #4
 8004772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004774:	463b      	mov	r3, r7
 8004776:	4619      	mov	r1, r3
 8004778:	483d      	ldr	r0, [pc, #244]	; (8004870 <MX_ADC2_Init+0x1cc>)
 800477a:	f002 f947 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004784:	f000 fc12 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004788:	2304      	movs	r3, #4
 800478a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800478c:	2305      	movs	r3, #5
 800478e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004790:	463b      	mov	r3, r7
 8004792:	4619      	mov	r1, r3
 8004794:	4836      	ldr	r0, [pc, #216]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004796:	f002 f939 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80047a0:	f000 fc04 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80047a4:	2305      	movs	r3, #5
 80047a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80047a8:	2306      	movs	r3, #6
 80047aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047ac:	463b      	mov	r3, r7
 80047ae:	4619      	mov	r1, r3
 80047b0:	482f      	ldr	r0, [pc, #188]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80047b2:	f002 f92b 	bl	8006a0c <HAL_ADC_ConfigChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80047bc:	f000 fbf6 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047c0:	2306      	movs	r3, #6
 80047c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80047c4:	2307      	movs	r3, #7
 80047c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047c8:	463b      	mov	r3, r7
 80047ca:	4619      	mov	r1, r3
 80047cc:	4828      	ldr	r0, [pc, #160]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80047ce:	f002 f91d 	bl	8006a0c <HAL_ADC_ConfigChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80047d8:	f000 fbe8 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80047dc:	2307      	movs	r3, #7
 80047de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80047e0:	2308      	movs	r3, #8
 80047e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047e4:	463b      	mov	r3, r7
 80047e6:	4619      	mov	r1, r3
 80047e8:	4821      	ldr	r0, [pc, #132]	; (8004870 <MX_ADC2_Init+0x1cc>)
 80047ea:	f002 f90f 	bl	8006a0c <HAL_ADC_ConfigChannel>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80047f4:	f000 fbda 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80047f8:	2308      	movs	r3, #8
 80047fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80047fc:	2309      	movs	r3, #9
 80047fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004800:	463b      	mov	r3, r7
 8004802:	4619      	mov	r1, r3
 8004804:	481a      	ldr	r0, [pc, #104]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004806:	f002 f901 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004810:	f000 fbcc 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004814:	2309      	movs	r3, #9
 8004816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004818:	230a      	movs	r3, #10
 800481a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800481c:	463b      	mov	r3, r7
 800481e:	4619      	mov	r1, r3
 8004820:	4813      	ldr	r0, [pc, #76]	; (8004870 <MX_ADC2_Init+0x1cc>)
 8004822:	f002 f8f3 	bl	8006a0c <HAL_ADC_ConfigChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800482c:	f000 fbbe 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004830:	230e      	movs	r3, #14
 8004832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004834:	230b      	movs	r3, #11
 8004836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004838:	463b      	mov	r3, r7
 800483a:	4619      	mov	r1, r3
 800483c:	480c      	ldr	r0, [pc, #48]	; (8004870 <MX_ADC2_Init+0x1cc>)
 800483e:	f002 f8e5 	bl	8006a0c <HAL_ADC_ConfigChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004848:	f000 fbb0 	bl	8004fac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800484c:	230f      	movs	r3, #15
 800484e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004850:	230c      	movs	r3, #12
 8004852:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004854:	463b      	mov	r3, r7
 8004856:	4619      	mov	r1, r3
 8004858:	4805      	ldr	r0, [pc, #20]	; (8004870 <MX_ADC2_Init+0x1cc>)
 800485a:	f002 f8d7 	bl	8006a0c <HAL_ADC_ConfigChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004864:	f000 fba2 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004868:	bf00      	nop
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20016088 	.word	0x20016088
 8004874:	40012100 	.word	0x40012100
 8004878:	0f000001 	.word	0x0f000001

0800487c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004880:	4b12      	ldr	r3, [pc, #72]	; (80048cc <MX_I2C1_Init+0x50>)
 8004882:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <MX_I2C1_Init+0x54>)
 8004884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004886:	4b11      	ldr	r3, [pc, #68]	; (80048cc <MX_I2C1_Init+0x50>)
 8004888:	4a12      	ldr	r2, [pc, #72]	; (80048d4 <MX_I2C1_Init+0x58>)
 800488a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <MX_I2C1_Init+0x50>)
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <MX_I2C1_Init+0x50>)
 8004894:	2200      	movs	r2, #0
 8004896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004898:	4b0c      	ldr	r3, [pc, #48]	; (80048cc <MX_I2C1_Init+0x50>)
 800489a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800489e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048a0:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <MX_I2C1_Init+0x50>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <MX_I2C1_Init+0x50>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <MX_I2C1_Init+0x50>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <MX_I2C1_Init+0x50>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80048b8:	4804      	ldr	r0, [pc, #16]	; (80048cc <MX_I2C1_Init+0x50>)
 80048ba:	f003 fb7d 	bl	8007fb8 <HAL_I2C_Init>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80048c4:	f000 fb72 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80048c8:	bf00      	nop
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	200161cc 	.word	0x200161cc
 80048d0:	40005400 	.word	0x40005400
 80048d4:	000186a0 	.word	0x000186a0

080048d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <MX_SPI3_Init+0x64>)
 80048de:	4a18      	ldr	r2, [pc, #96]	; (8004940 <MX_SPI3_Init+0x68>)
 80048e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <MX_SPI3_Init+0x64>)
 80048e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80048ea:	4b14      	ldr	r3, [pc, #80]	; (800493c <MX_SPI3_Init+0x64>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80048f0:	4b12      	ldr	r3, [pc, #72]	; (800493c <MX_SPI3_Init+0x64>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <MX_SPI3_Init+0x64>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <MX_SPI3_Init+0x64>)
 80048fe:	2200      	movs	r2, #0
 8004900:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <MX_SPI3_Init+0x64>)
 8004904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004908:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <MX_SPI3_Init+0x64>)
 800490c:	2228      	movs	r2, #40	; 0x28
 800490e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <MX_SPI3_Init+0x64>)
 8004912:	2200      	movs	r2, #0
 8004914:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <MX_SPI3_Init+0x64>)
 8004918:	2200      	movs	r2, #0
 800491a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <MX_SPI3_Init+0x64>)
 800491e:	2200      	movs	r2, #0
 8004920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <MX_SPI3_Init+0x64>)
 8004924:	220a      	movs	r2, #10
 8004926:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004928:	4804      	ldr	r0, [pc, #16]	; (800493c <MX_SPI3_Init+0x64>)
 800492a:	f004 f8b9 	bl	8008aa0 <HAL_SPI_Init>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004934:	f000 fb3a 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004938:	bf00      	nop
 800493a:	bd80      	pop	{r7, pc}
 800493c:	20016224 	.word	0x20016224
 8004940:	40003c00 	.word	0x40003c00

08004944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b092      	sub	sp, #72	; 0x48
 8004948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800494a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	609a      	str	r2, [r3, #8]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	611a      	str	r2, [r3, #16]
 8004964:	615a      	str	r2, [r3, #20]
 8004966:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004968:	1d3b      	adds	r3, r7, #4
 800496a:	2220      	movs	r2, #32
 800496c:	2100      	movs	r1, #0
 800496e:	4618      	mov	r0, r3
 8004970:	f007 fc79 	bl	800c266 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004974:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004976:	4a33      	ldr	r2, [pc, #204]	; (8004a44 <MX_TIM1_Init+0x100>)
 8004978:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800497a:	4b31      	ldr	r3, [pc, #196]	; (8004a40 <MX_TIM1_Init+0xfc>)
 800497c:	2200      	movs	r2, #0
 800497e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004980:	4b2f      	ldr	r3, [pc, #188]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004986:	4b2e      	ldr	r3, [pc, #184]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004988:	f240 3247 	movw	r2, #839	; 0x347
 800498c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800498e:	4b2c      	ldr	r3, [pc, #176]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004996:	2200      	movs	r2, #0
 8004998:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <MX_TIM1_Init+0xfc>)
 800499c:	2200      	movs	r2, #0
 800499e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049a0:	4827      	ldr	r0, [pc, #156]	; (8004a40 <MX_TIM1_Init+0xfc>)
 80049a2:	f004 fe20 	bl	80095e6 <HAL_TIM_PWM_Init>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80049ac:	f000 fafe 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049b0:	2300      	movs	r3, #0
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049b4:	2300      	movs	r3, #0
 80049b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049bc:	4619      	mov	r1, r3
 80049be:	4820      	ldr	r0, [pc, #128]	; (8004a40 <MX_TIM1_Init+0xfc>)
 80049c0:	f005 fbb0 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80049ca:	f000 faef 	bl	8004fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ce:	2360      	movs	r3, #96	; 0x60
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049d6:	2300      	movs	r3, #0
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049de:	2300      	movs	r3, #0
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049e2:	2300      	movs	r3, #0
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ea:	220c      	movs	r2, #12
 80049ec:	4619      	mov	r1, r3
 80049ee:	4814      	ldr	r0, [pc, #80]	; (8004a40 <MX_TIM1_Init+0xfc>)
 80049f0:	f005 f834 	bl	8009a5c <HAL_TIM_PWM_ConfigChannel>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80049fa:	f000 fad7 	bl	8004fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80049fe:	2300      	movs	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4807      	ldr	r0, [pc, #28]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004a22:	f005 fbfb 	bl	800a21c <HAL_TIMEx_ConfigBreakDeadTime>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8004a2c:	f000 fabe 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004a30:	4803      	ldr	r0, [pc, #12]	; (8004a40 <MX_TIM1_Init+0xfc>)
 8004a32:	f001 fbf7 	bl	8006224 <HAL_TIM_MspPostInit>

}
 8004a36:	bf00      	nop
 8004a38:	3748      	adds	r7, #72	; 0x48
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	2001635c 	.word	0x2001635c
 8004a44:	40010000 	.word	0x40010000

08004a48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	2224      	movs	r2, #36	; 0x24
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f007 fc05 	bl	800c266 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a66:	4a21      	ldr	r2, [pc, #132]	; (8004aec <MX_TIM3_Init+0xa4>)
 8004a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a84:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a92:	2301      	movs	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004aae:	f107 030c 	add.w	r3, r7, #12
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	480c      	ldr	r0, [pc, #48]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004ab6:	f004 fdff 	bl	80096b8 <HAL_TIM_Encoder_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004ac0:	f000 fa74 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004acc:	1d3b      	adds	r3, r7, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4805      	ldr	r0, [pc, #20]	; (8004ae8 <MX_TIM3_Init+0xa0>)
 8004ad2:	f005 fb27 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004adc:	f000 fa66 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ae0:	bf00      	nop
 8004ae2:	3730      	adds	r7, #48	; 0x30
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20016030 	.word	0x20016030
 8004aec:	40000400 	.word	0x40000400

08004af0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f007 fbb1 	bl	800c266 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b04:	1d3b      	adds	r3, r7, #4
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b0e:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <MX_TIM4_Init+0xa4>)
 8004b10:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b26:	4b1a      	ldr	r3, [pc, #104]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b36:	2300      	movs	r3, #0
 8004b38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b46:	2300      	movs	r3, #0
 8004b48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	480c      	ldr	r0, [pc, #48]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b5e:	f004 fdab 	bl	80096b8 <HAL_TIM_Encoder_Init>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004b68:	f000 fa20 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4805      	ldr	r0, [pc, #20]	; (8004b90 <MX_TIM4_Init+0xa0>)
 8004b7a:	f005 fad3 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004b84:	f000 fa12 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b88:	bf00      	nop
 8004b8a:	3730      	adds	r7, #48	; 0x30
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20015ff0 	.word	0x20015ff0
 8004b94:	40000800 	.word	0x40000800

08004b98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004ba8:	4a15      	ldr	r2, [pc, #84]	; (8004c00 <MX_TIM6_Init+0x68>)
 8004baa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004bae:	2253      	movs	r2, #83	; 0x53
 8004bb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004bba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bbe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bc0:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bc6:	480d      	ldr	r0, [pc, #52]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004bc8:	f004 fcbe 	bl	8009548 <HAL_TIM_Base_Init>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004bd2:	f000 f9eb 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bde:	463b      	mov	r3, r7
 8004be0:	4619      	mov	r1, r3
 8004be2:	4806      	ldr	r0, [pc, #24]	; (8004bfc <MX_TIM6_Init+0x64>)
 8004be4:	f005 fa9e 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004bee:	f000 f9dd 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2001631c 	.word	0x2001631c
 8004c00:	40001000 	.word	0x40001000

08004c04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c0a:	463b      	mov	r3, r7
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <MX_TIM7_Init+0x64>)
 8004c16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c1a:	2253      	movs	r2, #83	; 0x53
 8004c1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c1e:	4b11      	ldr	r3, [pc, #68]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8004c24:	4b0f      	ldr	r3, [pc, #60]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c26:	2263      	movs	r2, #99	; 0x63
 8004c28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c2a:	4b0e      	ldr	r3, [pc, #56]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c30:	480c      	ldr	r0, [pc, #48]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c32:	f004 fc89 	bl	8009548 <HAL_TIM_Base_Init>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004c3c:	f000 f9b6 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c48:	463b      	mov	r3, r7
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4805      	ldr	r0, [pc, #20]	; (8004c64 <MX_TIM7_Init+0x60>)
 8004c4e:	f005 fa69 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004c58:	f000 f9a8 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20016404 	.word	0x20016404
 8004c68:	40001400 	.word	0x40001400

08004c6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b092      	sub	sp, #72	; 0x48
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
 8004c8c:	615a      	str	r2, [r3, #20]
 8004c8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	2220      	movs	r2, #32
 8004c94:	2100      	movs	r1, #0
 8004c96:	4618      	mov	r0, r3
 8004c98:	f007 fae5 	bl	800c266 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c9c:	4b39      	ldr	r3, [pc, #228]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004c9e:	4a3a      	ldr	r2, [pc, #232]	; (8004d88 <MX_TIM8_Init+0x11c>)
 8004ca0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004ca4:	2203      	movs	r2, #3
 8004ca6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8004cae:	4b35      	ldr	r3, [pc, #212]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004cb0:	f240 628f 	movw	r2, #1679	; 0x68f
 8004cb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cb6:	4b33      	ldr	r3, [pc, #204]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc2:	4b30      	ldr	r3, [pc, #192]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004cc8:	482e      	ldr	r0, [pc, #184]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004cca:	f004 fc8c 	bl	80095e6 <HAL_TIM_PWM_Init>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004cd4:	f000 f96a 	bl	8004fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ce0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4827      	ldr	r0, [pc, #156]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004ce8:	f005 fa1c 	bl	800a124 <HAL_TIMEx_MasterConfigSynchronization>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004cf2:	f000 f95b 	bl	8004fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cf6:	2360      	movs	r3, #96	; 0x60
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d02:	2300      	movs	r3, #0
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d16:	2200      	movs	r2, #0
 8004d18:	4619      	mov	r1, r3
 8004d1a:	481a      	ldr	r0, [pc, #104]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004d1c:	f004 fe9e 	bl	8009a5c <HAL_TIM_PWM_ConfigChannel>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004d26:	f000 f941 	bl	8004fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d2e:	2208      	movs	r2, #8
 8004d30:	4619      	mov	r1, r3
 8004d32:	4814      	ldr	r0, [pc, #80]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004d34:	f004 fe92 	bl	8009a5c <HAL_TIM_PWM_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8004d3e:	f000 f935 	bl	8004fac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d60:	1d3b      	adds	r3, r7, #4
 8004d62:	4619      	mov	r1, r3
 8004d64:	4807      	ldr	r0, [pc, #28]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004d66:	f005 fa59 	bl	800a21c <HAL_TIMEx_ConfigBreakDeadTime>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004d70:	f000 f91c 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004d74:	4803      	ldr	r0, [pc, #12]	; (8004d84 <MX_TIM8_Init+0x118>)
 8004d76:	f001 fa55 	bl	8006224 <HAL_TIM_MspPostInit>

}
 8004d7a:	bf00      	nop
 8004d7c:	3748      	adds	r7, #72	; 0x48
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20016184 	.word	0x20016184
 8004d88:	40010400 	.word	0x40010400

08004d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <MX_USART1_UART_Init+0x50>)
 8004d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d9e:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004db0:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004db2:	220c      	movs	r2, #12
 8004db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004dc2:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <MX_USART1_UART_Init+0x4c>)
 8004dc4:	f005 fa90 	bl	800a2e8 <HAL_UART_Init>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004dce:	f000 f8ed 	bl	8004fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	2001627c 	.word	0x2001627c
 8004ddc:	40011000 	.word	0x40011000

08004de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	607b      	str	r3, [r7, #4]
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <MX_DMA_Init+0x4c>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	4a0f      	ldr	r2, [pc, #60]	; (8004e2c <MX_DMA_Init+0x4c>)
 8004df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004df4:	6313      	str	r3, [r2, #48]	; 0x30
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <MX_DMA_Init+0x4c>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004e02:	2200      	movs	r2, #0
 8004e04:	2100      	movs	r1, #0
 8004e06:	2038      	movs	r0, #56	; 0x38
 8004e08:	f002 f97b 	bl	8007102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004e0c:	2038      	movs	r0, #56	; 0x38
 8004e0e:	f002 f994 	bl	800713a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004e12:	2200      	movs	r2, #0
 8004e14:	2100      	movs	r1, #0
 8004e16:	203a      	movs	r0, #58	; 0x3a
 8004e18:	f002 f973 	bl	8007102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004e1c:	203a      	movs	r0, #58	; 0x3a
 8004e1e:	f002 f98c 	bl	800713a <HAL_NVIC_EnableIRQ>

}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b08a      	sub	sp, #40	; 0x28
 8004e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e36:	f107 0314 	add.w	r3, r7, #20
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	609a      	str	r2, [r3, #8]
 8004e42:	60da      	str	r2, [r3, #12]
 8004e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	4b53      	ldr	r3, [pc, #332]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a52      	ldr	r2, [pc, #328]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b50      	ldr	r3, [pc, #320]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b49      	ldr	r3, [pc, #292]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60bb      	str	r3, [r7, #8]
 8004e82:	4b45      	ldr	r3, [pc, #276]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a44      	ldr	r2, [pc, #272]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	60bb      	str	r3, [r7, #8]
 8004e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
 8004e9e:	4b3e      	ldr	r3, [pc, #248]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a3d      	ldr	r2, [pc, #244]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004ea4:	f043 0302 	orr.w	r3, r3, #2
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b3b      	ldr	r3, [pc, #236]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	607b      	str	r3, [r7, #4]
 8004eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4b37      	ldr	r3, [pc, #220]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4a36      	ldr	r2, [pc, #216]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <MX_GPIO_Init+0x168>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004ed8:	4830      	ldr	r0, [pc, #192]	; (8004f9c <MX_GPIO_Init+0x16c>)
 8004eda:	f003 f853 	bl	8007f84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004ee4:	482e      	ldr	r0, [pc, #184]	; (8004fa0 <MX_GPIO_Init+0x170>)
 8004ee6:	f003 f84d 	bl	8007f84 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8004eea:	2200      	movs	r2, #0
 8004eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef0:	482c      	ldr	r0, [pc, #176]	; (8004fa4 <MX_GPIO_Init+0x174>)
 8004ef2:	f003 f847 	bl	8007f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2104      	movs	r1, #4
 8004efa:	482b      	ldr	r0, [pc, #172]	; (8004fa8 <MX_GPIO_Init+0x178>)
 8004efc:	f003 f842 	bl	8007f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004f00:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004f04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f12:	f107 0314 	add.w	r3, r7, #20
 8004f16:	4619      	mov	r1, r3
 8004f18:	4820      	ldr	r0, [pc, #128]	; (8004f9c <MX_GPIO_Init+0x16c>)
 8004f1a:	f002 fe81 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004f1e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8004f22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f24:	2301      	movs	r3, #1
 8004f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4619      	mov	r1, r3
 8004f36:	481a      	ldr	r0, [pc, #104]	; (8004fa0 <MX_GPIO_Init+0x170>)
 8004f38:	f002 fe72 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8004f3c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8004f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4814      	ldr	r0, [pc, #80]	; (8004fa4 <MX_GPIO_Init+0x174>)
 8004f52:	f002 fe65 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_GPIO_Init+0x174>)
 8004f70:	f002 fe56 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f74:	2304      	movs	r3, #4
 8004f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f80:	2300      	movs	r3, #0
 8004f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <MX_GPIO_Init+0x178>)
 8004f8c:	f002 fe48 	bl	8007c20 <HAL_GPIO_Init>

}
 8004f90:	bf00      	nop
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	40020800 	.word	0x40020800
 8004fa0:	40020400 	.word	0x40020400
 8004fa4:	40020000 	.word	0x40020000
 8004fa8:	40020c00 	.word	0x40020c00

08004fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fb2:	e7fe      	b.n	8004fb2 <Error_Handler+0x6>

08004fb4 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4808      	ldr	r0, [pc, #32]	; (8004fdc <initMotor+0x28>)
 8004fbc:	f004 fb3e 	bl	800963c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8004fc0:	2108      	movs	r1, #8
 8004fc2:	4806      	ldr	r0, [pc, #24]	; (8004fdc <initMotor+0x28>)
 8004fc4:	f004 fb3a 	bl	800963c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004fc8:	210c      	movs	r1, #12
 8004fca:	4805      	ldr	r0, [pc, #20]	; (8004fe0 <initMotor+0x2c>)
 8004fcc:	f004 fb36 	bl	800963c <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8004fd0:	2064      	movs	r0, #100	; 0x64
 8004fd2:	f001 fba5 	bl	8006720 <HAL_Delay>
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20016184 	.word	0x20016184
 8004fe0:	2001635c 	.word	0x2001635c

08004fe4 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8004fea:	4b2a      	ldr	r3, [pc, #168]	; (8005094 <motorCtrlFlip+0xb0>)
 8004fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db0d      	blt.n	8005010 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004ff4:	4b27      	ldr	r3, [pc, #156]	; (8005094 <motorCtrlFlip+0xb0>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004ffa:	4b27      	ldr	r3, [pc, #156]	; (8005098 <motorCtrlFlip+0xb4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005002:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	4824      	ldr	r0, [pc, #144]	; (800509c <motorCtrlFlip+0xb8>)
 800500a:	f002 ffbb 	bl	8007f84 <HAL_GPIO_WritePin>
 800500e:	e010      	b.n	8005032 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8005010:	4b20      	ldr	r3, [pc, #128]	; (8005094 <motorCtrlFlip+0xb0>)
 8005012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005016:	b29b      	uxth	r3, r3
 8005018:	425b      	negs	r3, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <motorCtrlFlip+0xb4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005026:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8005028:	2201      	movs	r2, #1
 800502a:	2180      	movs	r1, #128	; 0x80
 800502c:	481b      	ldr	r0, [pc, #108]	; (800509c <motorCtrlFlip+0xb8>)
 800502e:	f002 ffa9 	bl	8007f84 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <motorCtrlFlip+0xbc>)
 8005034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	db0e      	blt.n	800505a <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 800503c:	4b18      	ldr	r3, [pc, #96]	; (80050a0 <motorCtrlFlip+0xbc>)
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8005042:	4b15      	ldr	r3, [pc, #84]	; (8005098 <motorCtrlFlip+0xb4>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800504c:	2200      	movs	r2, #0
 800504e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005052:	4812      	ldr	r0, [pc, #72]	; (800509c <motorCtrlFlip+0xb8>)
 8005054:	f002 ff96 	bl	8007f84 <HAL_GPIO_WritePin>
 8005058:	e011      	b.n	800507e <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 800505a:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <motorCtrlFlip+0xbc>)
 800505c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005060:	b29b      	uxth	r3, r3
 8005062:	425b      	negs	r3, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <motorCtrlFlip+0xb4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8005072:	2201      	movs	r2, #1
 8005074:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005078:	4808      	ldr	r0, [pc, #32]	; (800509c <motorCtrlFlip+0xb8>)
 800507a:	f002 ff83 	bl	8007f84 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <motorCtrlFlip+0xc0>)
 8005080:	88fb      	ldrh	r3, [r7, #6]
 8005082:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <motorCtrlFlip+0xc4>)
 8005086:	88bb      	ldrh	r3, [r7, #4]
 8005088:	8013      	strh	r3, [r2, #0]
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20013fa8 	.word	0x20013fa8
 8005098:	20016184 	.word	0x20016184
 800509c:	40020800 	.word	0x40020800
 80050a0:	20013faa 	.word	0x20013faa
 80050a4:	20016448 	.word	0x20016448
 80050a8:	20016446 	.word	0x20016446

080050ac <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <suctionmotorCtrlFlip+0x1c>)
 80050b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <suctionmotorCtrlFlip+0x20>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050bc:	bf00      	nop
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	20013fac 	.word	0x20013fac
 80050cc:	2001635c 	.word	0x2001635c

080050d0 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	460a      	mov	r2, r1
 80050da:	80fb      	strh	r3, [r7, #6]
 80050dc:	4613      	mov	r3, r2
 80050de:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 80050e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050e4:	f240 628e 	movw	r2, #1678	; 0x68e
 80050e8:	4293      	cmp	r3, r2
 80050ea:	dd03      	ble.n	80050f4 <setMotor+0x24>
 80050ec:	f240 638f 	movw	r3, #1679	; 0x68f
 80050f0:	80fb      	strh	r3, [r7, #6]
 80050f2:	e007      	b.n	8005104 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 80050f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050f8:	4a11      	ldr	r2, [pc, #68]	; (8005140 <setMotor+0x70>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	da02      	bge.n	8005104 <setMotor+0x34>
 80050fe:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005102:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8005104:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005108:	f240 628e 	movw	r2, #1678	; 0x68e
 800510c:	4293      	cmp	r3, r2
 800510e:	dd03      	ble.n	8005118 <setMotor+0x48>
 8005110:	f240 638f 	movw	r3, #1679	; 0x68f
 8005114:	80bb      	strh	r3, [r7, #4]
 8005116:	e007      	b.n	8005128 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8005118:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <setMotor+0x70>)
 800511e:	4293      	cmp	r3, r2
 8005120:	da02      	bge.n	8005128 <setMotor+0x58>
 8005122:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005126:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8005128:	4a06      	ldr	r2, [pc, #24]	; (8005144 <setMotor+0x74>)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 800512e:	4a06      	ldr	r2, [pc, #24]	; (8005148 <setMotor+0x78>)
 8005130:	88bb      	ldrh	r3, [r7, #4]
 8005132:	8013      	strh	r3, [r2, #0]
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	fffff972 	.word	0xfffff972
 8005144:	20013fa8 	.word	0x20013fa8
 8005148:	20013faa 	.word	0x20013faa

0800514c <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8005156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bfb8      	it	lt
 800515e:	425b      	neglt	r3, r3
 8005160:	b21a      	sxth	r2, r3
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <setsuctionMotor+0x38>)
 8005164:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8005166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800516a:	f240 3246 	movw	r2, #838	; 0x346
 800516e:	4293      	cmp	r3, r2
 8005170:	dd02      	ble.n	8005178 <setsuctionMotor+0x2c>
 8005172:	f240 3347 	movw	r3, #839	; 0x347
 8005176:	80fb      	strh	r3, [r7, #6]
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20013fac 	.word	0x20013fac

08005188 <updateSideSensorStatus>:

static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;

void updateSideSensorStatus(){
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 800518c:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <updateSideSensorStatus+0x44>)
 800518e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005192:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005196:	dc03      	bgt.n	80051a0 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <updateSideSensorStatus+0x48>)
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e002      	b.n	80051a6 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <updateSideSensorStatus+0x48>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <updateSideSensorStatus+0x4c>)
 80051a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051b0:	dc03      	bgt.n	80051ba <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 80051b2:	4b09      	ldr	r3, [pc, #36]	; (80051d8 <updateSideSensorStatus+0x50>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 80051b8:	e002      	b.n	80051c0 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <updateSideSensorStatus+0x50>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	20015fb8 	.word	0x20015fb8
 80051d0:	20015efc 	.word	0x20015efc
 80051d4:	20015f40 	.word	0x20015f40
 80051d8:	20015efd 	.word	0x20015efd

080051dc <setRunMode>:

void setRunMode(uint16_t num){
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	80fb      	strh	r3, [r7, #6]
	mode = num;
 80051e6:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <setRunMode+0x1c>)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	8013      	strh	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20016450 	.word	0x20016450

080051fc <isCrossLine>:

bool isCrossLine()
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005202:	4b20      	ldr	r3, [pc, #128]	; (8005284 <isCrossLine+0x88>)
 8005204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005208:	ee07 3a90 	vmov	s15, r3
 800520c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005210:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <isCrossLine+0x88>)
 8005216:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005222:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8005226:	edd7 7a01 	vldr	s15, [r7, #4]
 800522a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005288 <isCrossLine+0x8c>
 800522e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	d50f      	bpl.n	8005258 <isCrossLine+0x5c>
 8005238:	edd7 7a00 	vldr	s15, [r7]
 800523c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005288 <isCrossLine+0x8c>
 8005240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005248:	d506      	bpl.n	8005258 <isCrossLine+0x5c>
		cnt++;
 800524a:	4b10      	ldr	r3, [pc, #64]	; (800528c <isCrossLine+0x90>)
 800524c:	881b      	ldrh	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	4b0e      	ldr	r3, [pc, #56]	; (800528c <isCrossLine+0x90>)
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e002      	b.n	800525e <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <isCrossLine+0x90>)
 800525a:	2200      	movs	r2, #0
 800525c:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <isCrossLine+0x90>)
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d903      	bls.n	800526e <isCrossLine+0x72>
		flag = true;
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <isCrossLine+0x94>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
 800526c:	e002      	b.n	8005274 <isCrossLine+0x78>
	}
	else{
		flag = false;
 800526e:	4b08      	ldr	r3, [pc, #32]	; (8005290 <isCrossLine+0x94>)
 8005270:	2200      	movs	r2, #0
 8005272:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <isCrossLine+0x94>)
 8005276:	781b      	ldrb	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	20015f9c 	.word	0x20015f9c
 8005288:	442f0000 	.word	0x442f0000
 800528c:	20015f1c 	.word	0x20015f1c
 8005290:	20015f1e 	.word	0x20015f1e
 8005294:	00000000 	.word	0x00000000

08005298 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005298:	b580      	push	{r7, lr}
 800529a:	ed2d 8b02 	vpush	{d8}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 80052a2:	2300      	movs	r3, #0
 80052a4:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 80052a6:	4b2e      	ldr	r3, [pc, #184]	; (8005360 <isContinuousCurvature+0xc8>)
 80052a8:	ed93 8a00 	vldr	s16, [r3]
 80052ac:	f7fc faa2 	bl	80017f4 <getTheta10mm>
 80052b0:	eef0 7a40 	vmov.f32	s15, s0
 80052b4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80052b8:	eef0 7ae7 	vabs.f32	s15, s15
 80052bc:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 80052c0:	4b28      	ldr	r3, [pc, #160]	; (8005364 <isContinuousCurvature+0xcc>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d006      	beq.n	80052d6 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <isContinuousCurvature+0xcc>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 80052ce:	4b26      	ldr	r3, [pc, #152]	; (8005368 <isContinuousCurvature+0xd0>)
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
	}

	if(diff_theta <= 0.020) continuous_cnt++;
 80052d6:	6838      	ldr	r0, [r7, #0]
 80052d8:	f7fb f936 	bl	8000548 <__aeabi_f2d>
 80052dc:	a31e      	add	r3, pc, #120	; (adr r3, 8005358 <isContinuousCurvature+0xc0>)
 80052de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e2:	f7fb fc05 	bl	8000af0 <__aeabi_dcmple>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <isContinuousCurvature+0x6a>
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <isContinuousCurvature+0xd0>)
 80052ee:	edd3 7a00 	vldr	s15, [r3]
 80052f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <isContinuousCurvature+0xd0>)
 80052fc:	edc3 7a00 	vstr	s15, [r3]
 8005300:	e003      	b.n	800530a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005302:	4b19      	ldr	r3, [pc, #100]	; (8005368 <isContinuousCurvature+0xd0>)
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <isContinuousCurvature+0xd0>)
 800530c:	edd3 7a00 	vldr	s15, [r3]
 8005310:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800536c <isContinuousCurvature+0xd4>
 8005314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531c:	db01      	blt.n	8005322 <isContinuousCurvature+0x8a>
 800531e:	2301      	movs	r3, #1
 8005320:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8005322:	4b11      	ldr	r3, [pc, #68]	; (8005368 <isContinuousCurvature+0xd0>)
 8005324:	edd3 7a00 	vldr	s15, [r3]
 8005328:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005370 <isContinuousCurvature+0xd8>
 800532c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005334:	db02      	blt.n	800533c <isContinuousCurvature+0xa4>
 8005336:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <isContinuousCurvature+0xd0>)
 8005338:	4a0e      	ldr	r2, [pc, #56]	; (8005374 <isContinuousCurvature+0xdc>)
 800533a:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 800533c:	f7fc fa5a 	bl	80017f4 <getTheta10mm>
 8005340:	eef0 7a40 	vmov.f32	s15, s0
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <isContinuousCurvature+0xc8>)
 8005346:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 800534a:	79fb      	ldrb	r3, [r7, #7]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	ecbd 8b02 	vpop	{d8}
 8005356:	bd80      	pop	{r7, pc}
 8005358:	47ae147b 	.word	0x47ae147b
 800535c:	3f947ae1 	.word	0x3f947ae1
 8005360:	20015f20 	.word	0x20015f20
 8005364:	20015f00 	.word	0x20015f00
 8005368:	20015f24 	.word	0x20015f24
 800536c:	42200000 	.word	0x42200000
 8005370:	447a0000 	.word	0x447a0000
 8005374:	447a0000 	.word	0x447a0000

08005378 <isTargetDistance>:

bool isTargetDistance(float target){
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8005386:	f7fc f83f 	bl	8001408 <getDistance10mm>
 800538a:	eeb0 7a40 	vmov.f32	s14, s0
 800538e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005392:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539a:	d801      	bhi.n	80053a0 <isTargetDistance+0x28>
		ret = true;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <running>:

void running(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	80fb      	strh	r3, [r7, #6]

	runningInit();
 80053b6:	f000 f9fd 	bl	80057b4 <runningInit>
	startLineTrace();
 80053ba:	f7fc fef1 	bl	80021a0 <startLineTrace>
	startVelocityControl();
 80053be:	f7fe fc83 	bl	8003cc8 <startVelocityControl>
	setTargetVelocity(min_velocity);
 80053c2:	4b73      	ldr	r3, [pc, #460]	; (8005590 <running+0x1e4>)
 80053c4:	edd3 7a00 	vldr	s15, [r3]
 80053c8:	eeb0 0a67 	vmov.f32	s0, s15
 80053cc:	f7fe fbee 	bl	8003bac <setTargetVelocity>

	while(goal_flag == false){
 80053d0:	e0d2      	b.n	8005578 <running+0x1cc>
		switch(pattern){
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	2b14      	cmp	r3, #20
 80053d6:	f200 80c2 	bhi.w	800555e <running+0x1b2>
 80053da:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <running+0x34>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	08005435 	.word	0x08005435
 80053e4:	0800555f 	.word	0x0800555f
 80053e8:	0800555f 	.word	0x0800555f
 80053ec:	0800555f 	.word	0x0800555f
 80053f0:	0800555f 	.word	0x0800555f
 80053f4:	08005483 	.word	0x08005483
 80053f8:	0800555f 	.word	0x0800555f
 80053fc:	0800555f 	.word	0x0800555f
 8005400:	0800555f 	.word	0x0800555f
 8005404:	0800555f 	.word	0x0800555f
 8005408:	08005497 	.word	0x08005497
 800540c:	0800555f 	.word	0x0800555f
 8005410:	0800555f 	.word	0x0800555f
 8005414:	0800555f 	.word	0x0800555f
 8005418:	0800555f 	.word	0x0800555f
 800541c:	0800555f 	.word	0x0800555f
 8005420:	0800555f 	.word	0x0800555f
 8005424:	0800555f 	.word	0x0800555f
 8005428:	0800555f 	.word	0x0800555f
 800542c:	0800555f 	.word	0x0800555f
 8005430:	08005533 	.word	0x08005533

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005434:	f000 fc22 	bl	8005c7c <getSideSensorStatusR>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 808c 	beq.w	8005558 <running+0x1ac>
						  start_goal_line_cnt++;
 8005440:	4b54      	ldr	r3, [pc, #336]	; (8005594 <running+0x1e8>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	b2da      	uxtb	r2, r3
 8005448:	4b52      	ldr	r3, [pc, #328]	; (8005594 <running+0x1e8>)
 800544a:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 800544c:	4b52      	ldr	r3, [pc, #328]	; (8005598 <running+0x1ec>)
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d102      	bne.n	800545a <running+0xae>
 8005454:	f000 fa32 	bl	80058bc <startLogging>
 8005458:	e00c      	b.n	8005474 <running+0xc8>
						  else if(mode == 2 || mode == 3) startVelocityUpdate();
 800545a:	4b4f      	ldr	r3, [pc, #316]	; (8005598 <running+0x1ec>)
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d003      	beq.n	800546a <running+0xbe>
 8005462:	4b4d      	ldr	r3, [pc, #308]	; (8005598 <running+0x1ec>)
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d102      	bne.n	8005470 <running+0xc4>
 800546a:	f000 fa63 	bl	8005934 <startVelocityUpdate>
 800546e:	e001      	b.n	8005474 <running+0xc8>
						  else startDebugLogging();
 8005470:	f000 fa42 	bl	80058f8 <startDebugLogging>

						  clearGoalJudgeDistance();
 8005474:	f7fb ff90 	bl	8001398 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8005478:	f7fb ff9c 	bl	80013b4 <clearSideLineJudgeDistance>
						  pattern = 5;
 800547c:	2305      	movs	r3, #5
 800547e:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8005480:	e06a      	b.n	8005558 <running+0x1ac>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8005482:	f000 fbfb 	bl	8005c7c <getSideSensorStatusR>
 8005486:	4603      	mov	r3, r0
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <running+0xea>
 8005492:	230a      	movs	r3, #10
 8005494:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005496:	f000 fbe5 	bl	8005c64 <getSideSensorStatusL>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <running+0xfe>
						  goal_judge_flag = false;
 80054a0:	4b3e      	ldr	r3, [pc, #248]	; (800559c <running+0x1f0>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80054a6:	f7fb ff77 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 80054aa:	4b3c      	ldr	r3, [pc, #240]	; (800559c <running+0x1f0>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f083 0301 	eor.w	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d015      	beq.n	80054e4 <running+0x138>
 80054b8:	f000 fbe0 	bl	8005c7c <getSideSensorStatusR>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d010      	beq.n	80054e4 <running+0x138>
 80054c2:	f7fb ff21 	bl	8001308 <getGoalJudgeDistance>
 80054c6:	eeb0 7a40 	vmov.f32	s14, s0
 80054ca:	eddf 7a35 	vldr	s15, [pc, #212]	; 80055a0 <running+0x1f4>
 80054ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	db05      	blt.n	80054e4 <running+0x138>
						  goal_judge_flag = true;
 80054d8:	4b30      	ldr	r3, [pc, #192]	; (800559c <running+0x1f0>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 80054de:	f7fb ff5b 	bl	8001398 <clearGoalJudgeDistance>
 80054e2:	e019      	b.n	8005518 <running+0x16c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 80054e4:	4b2d      	ldr	r3, [pc, #180]	; (800559c <running+0x1f0>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <running+0x16c>
 80054ec:	f7fb ff0c 	bl	8001308 <getGoalJudgeDistance>
 80054f0:	eeb0 7a40 	vmov.f32	s14, s0
 80054f4:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80055a0 <running+0x1f4>
 80054f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005500:	db0a      	blt.n	8005518 <running+0x16c>
						  start_goal_line_cnt++;
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <running+0x1e8>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <running+0x1e8>)
 800550c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 800550e:	4b23      	ldr	r3, [pc, #140]	; (800559c <running+0x1f0>)
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005514:	f7fb ff40 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <running+0x1e8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d91d      	bls.n	800555c <running+0x1b0>
						  stopLogging();
 8005520:	f000 f9de 	bl	80058e0 <stopLogging>
						  stopDebugLogging();
 8005524:	f000 f9fa 	bl	800591c <stopDebugLogging>
						  stopVelocityUpdate();
 8005528:	f000 fa26 	bl	8005978 <stopVelocityUpdate>
						  pattern = 20;
 800552c:	2314      	movs	r3, #20
 800552e:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005530:	e014      	b.n	800555c <running+0x1b0>

				  case 20:

					  setTargetVelocity(1.0);
 8005532:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005536:	f7fe fb39 	bl	8003bac <setTargetVelocity>
					  HAL_Delay(100);
 800553a:	2064      	movs	r0, #100	; 0x64
 800553c:	f001 f8f0 	bl	8006720 <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 8005540:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80055a4 <running+0x1f8>
 8005544:	f7fe fb32 	bl	8003bac <setTargetVelocity>
					  HAL_Delay(500);
 8005548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800554c:	f001 f8e8 	bl	8006720 <HAL_Delay>

					  goal_flag = true;
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <running+0x1fc>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]

					  break;
 8005556:	e002      	b.n	800555e <running+0x1b2>
					  break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <running+0x1b2>
					  break;
 800555c:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 800555e:	f7fc fea5 	bl	80022ac <getCouseOutFlag>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d007      	beq.n	8005578 <running+0x1cc>
		{
			stopLogging();
 8005568:	f000 f9ba 	bl	80058e0 <stopLogging>
			stopDebugLogging();
 800556c:	f000 f9d6 	bl	800591c <stopDebugLogging>
			stopVelocityUpdate();
 8005570:	f000 fa02 	bl	8005978 <stopVelocityUpdate>
		    pattern = 20;
 8005574:	2314      	movs	r3, #20
 8005576:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <running+0x1fc>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f083 0301 	eor.w	r3, r3, #1
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f47f af25 	bne.w	80053d2 <running+0x26>
	    }
	}
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20015f08 	.word	0x20015f08
 8005594:	20015ef0 	.word	0x20015ef0
 8005598:	20016450 	.word	0x20016450
 800559c:	20015eff 	.word	0x20015eff
 80055a0:	428c0000 	.word	0x428c0000
 80055a4:	00000000 	.word	0x00000000
 80055a8:	20015efe 	.word	0x20015efe

080055ac <runningFlip>:

void runningFlip()
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
	if(run_flag == true){
 80055b0:	4b76      	ldr	r3, [pc, #472]	; (800578c <runningFlip+0x1e0>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80e7 	beq.w	8005788 <runningFlip+0x1dc>
		setLED('G');
 80055ba:	2047      	movs	r0, #71	; 0x47
 80055bc:	f7fc f952 	bl	8001864 <setLED>
		updateTargetVelocity();//速度の変更
 80055c0:	f000 f9e6 	bl	8005990 <updateTargetVelocity>
		updateLookaheadpoints();//座標の変更
 80055c4:	f7fe f994 	bl	80038f0 <updateLookaheadpoints>

		if(isTargetDistance(30) == true){//30mmごとにデータ取得
 80055c8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80055cc:	f7ff fed4 	bl	8005378 <isTargetDistance>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <runningFlip+0x46>
			saveLog();
 80055d6:	f000 f931 	bl	800583c <saveLog>

			if(isContinuousCurvature() == true){
 80055da:	f7ff fe5d 	bl	8005298 <isContinuousCurvature>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <runningFlip+0x3e>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 80055e4:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <runningFlip+0x1e4>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 80055ea:	f7fb ff1b 	bl	8001424 <clearDistance10mm>
			clearTheta10mm();
 80055ee:	f7fc f91d 	bl	800182c <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 80055f2:	f7ff fe03 	bl	80051fc <isCrossLine>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d026      	beq.n	800564a <runningFlip+0x9e>
 80055fc:	4b65      	ldr	r3, [pc, #404]	; (8005794 <runningFlip+0x1e8>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f083 0301 	eor.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01f      	beq.n	800564a <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 800560a:	4b62      	ldr	r3, [pc, #392]	; (8005794 <runningFlip+0x1e8>)
 800560c:	2201      	movs	r2, #1
 800560e:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005610:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <runningFlip+0x1e4>)
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005616:	f7fb fedb 	bl	80013d0 <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 800561a:	f7fb fee7 	bl	80013ec <clearSideLineIgnoreDistance>

			if(mode == 1){
 800561e:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <runningFlip+0x1ec>)
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10b      	bne.n	800563e <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 8005626:	4b5d      	ldr	r3, [pc, #372]	; (800579c <runningFlip+0x1f0>)
 8005628:	2200      	movs	r2, #0
 800562a:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 800562c:	f7fb fe5e 	bl	80012ec <getTotalDistance>
 8005630:	eef0 7a40 	vmov.f32	s15, s0
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	f7fd fcb6 	bl	8002fa8 <saveCross>
			if(mode == 1){
 800563c:	e017      	b.n	800566e <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 800563e:	4b57      	ldr	r3, [pc, #348]	; (800579c <runningFlip+0x1f0>)
 8005640:	2200      	movs	r2, #0
 8005642:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 8005644:	f000 fa0a 	bl	8005a5c <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 8005648:	e011      	b.n	800566e <runningFlip+0xc2>
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 800564a:	4b52      	ldr	r3, [pc, #328]	; (8005794 <runningFlip+0x1e8>)
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00d      	beq.n	800566e <runningFlip+0xc2>
 8005652:	f7fb fe85 	bl	8001360 <getCrossLineIgnoreDistance>
 8005656:	eeb0 7a40 	vmov.f32	s14, s0
 800565a:	eddf 7a51 	vldr	s15, [pc, #324]	; 80057a0 <runningFlip+0x1f4>
 800565e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005666:	db02      	blt.n	800566e <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 8005668:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <runningFlip+0x1e8>)
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 800566e:	f000 fb05 	bl	8005c7c <getSideSensorStatusR>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <runningFlip+0xd6>
			side_line_judge_flag = false;
 8005678:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <runningFlip+0x1f8>)
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 800567e:	f7fb fe99 	bl	80013b4 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8005682:	4b48      	ldr	r3, [pc, #288]	; (80057a4 <runningFlip+0x1f8>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	f083 0301 	eor.w	r3, r3, #1
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d015      	beq.n	80056bc <runningFlip+0x110>
 8005690:	f000 fae8 	bl	8005c64 <getSideSensorStatusL>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d010      	beq.n	80056bc <runningFlip+0x110>
 800569a:	f7fb fe43 	bl	8001324 <getSideLineJudgeDistance>
 800569e:	eeb0 7a40 	vmov.f32	s14, s0
 80056a2:	eddf 7a41 	vldr	s15, [pc, #260]	; 80057a8 <runningFlip+0x1fc>
 80056a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ae:	db05      	blt.n	80056bc <runningFlip+0x110>
			side_line_judge_flag = true;
 80056b0:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <runningFlip+0x1f8>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80056b6:	f7fb fe7d 	bl	80013b4 <clearSideLineJudgeDistance>
 80056ba:	e02f      	b.n	800571c <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 80056bc:	4b39      	ldr	r3, [pc, #228]	; (80057a4 <runningFlip+0x1f8>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d02b      	beq.n	800571c <runningFlip+0x170>
 80056c4:	f7fb fe2e 	bl	8001324 <getSideLineJudgeDistance>
 80056c8:	eeb0 7a40 	vmov.f32	s14, s0
 80056cc:	eddf 7a36 	vldr	s15, [pc, #216]	; 80057a8 <runningFlip+0x1fc>
 80056d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80056d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d8:	db20      	blt.n	800571c <runningFlip+0x170>
			clearSideLineJudgeDistance();
 80056da:	f7fb fe6b 	bl	80013b4 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <runningFlip+0x1f8>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 80056e4:	4b2a      	ldr	r3, [pc, #168]	; (8005790 <runningFlip+0x1e4>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d017      	beq.n	800571c <runningFlip+0x170>
				continuous_curve_flag = false;
 80056ec:	4b28      	ldr	r3, [pc, #160]	; (8005790 <runningFlip+0x1e4>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 80056f2:	4b2e      	ldr	r3, [pc, #184]	; (80057ac <runningFlip+0x200>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <runningFlip+0x1ec>)
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d10b      	bne.n	8005718 <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <runningFlip+0x204>)
 8005702:	2200      	movs	r2, #0
 8005704:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8005706:	f7fb fdf1 	bl	80012ec <getTotalDistance>
 800570a:	eef0 7a40 	vmov.f32	s15, s0
 800570e:	eeb0 0a67 	vmov.f32	s0, s15
 8005712:	f7fd fc61 	bl	8002fd8 <saveSide>
 8005716:	e001      	b.n	800571c <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005718:	f000 f9f6 	bl	8005b08 <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 800571c:	4b1f      	ldr	r3, [pc, #124]	; (800579c <runningFlip+0x1f0>)
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	4b1d      	ldr	r3, [pc, #116]	; (800579c <runningFlip+0x1f0>)
 8005726:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8005728:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <runningFlip+0x204>)
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	3301      	adds	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <runningFlip+0x204>)
 8005732:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 8005734:	4b19      	ldr	r3, [pc, #100]	; (800579c <runningFlip+0x1f0>)
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	f242 720f 	movw	r2, #9999	; 0x270f
 800573c:	4293      	cmp	r3, r2
 800573e:	d903      	bls.n	8005748 <runningFlip+0x19c>
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <runningFlip+0x1f0>)
 8005742:	f242 7210 	movw	r2, #10000	; 0x2710
 8005746:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 8005748:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <runningFlip+0x204>)
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005750:	4293      	cmp	r3, r2
 8005752:	d903      	bls.n	800575c <runningFlip+0x1b0>
 8005754:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <runningFlip+0x204>)
 8005756:	f242 7210 	movw	r2, #10000	; 0x2710
 800575a:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <runningFlip+0x204>)
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	2b96      	cmp	r3, #150	; 0x96
 8005762:	d803      	bhi.n	800576c <runningFlip+0x1c0>
 8005764:	2047      	movs	r0, #71	; 0x47
 8005766:	f7fc f94b 	bl	8001a00 <setLED2>
 800576a:	e002      	b.n	8005772 <runningFlip+0x1c6>
	    else setLED2('N');
 800576c:	204e      	movs	r0, #78	; 0x4e
 800576e:	f7fc f947 	bl	8001a00 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8005772:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <runningFlip+0x204>)
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	2b96      	cmp	r3, #150	; 0x96
 8005778:	d803      	bhi.n	8005782 <runningFlip+0x1d6>
 800577a:	2042      	movs	r0, #66	; 0x42
 800577c:	f7fc f872 	bl	8001864 <setLED>
	    else setLED('G');
	}
}
 8005780:	e002      	b.n	8005788 <runningFlip+0x1dc>
	    else setLED('G');
 8005782:	2047      	movs	r0, #71	; 0x47
 8005784:	f7fc f86e 	bl	8001864 <setLED>
}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20015f02 	.word	0x20015f02
 8005790:	20015f01 	.word	0x20015f01
 8005794:	20015efa 	.word	0x20015efa
 8005798:	20016450 	.word	0x20016450
 800579c:	20015ef6 	.word	0x20015ef6
 80057a0:	42480000 	.word	0x42480000
 80057a4:	20015efb 	.word	0x20015efb
 80057a8:	42700000 	.word	0x42700000
 80057ac:	20015f00 	.word	0x20015f00
 80057b0:	20015ef8 	.word	0x20015ef8

080057b4 <runningInit>:

void runningInit()
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
	if(mode == 1){
 80057b8:	4b18      	ldr	r3, [pc, #96]	; (800581c <runningInit+0x68>)
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d105      	bne.n	80057cc <runningInit+0x18>
		setLED('W');
 80057c0:	2057      	movs	r0, #87	; 0x57
 80057c2:	f7fc f84f 	bl	8001864 <setLED>
		ereaseLog();
 80057c6:	f7fd fc37 	bl	8003038 <ereaseLog>
 80057ca:	e00b      	b.n	80057e4 <runningInit+0x30>
	}
	else
	{
		ereaseDebugLog();
 80057cc:	f7fd fc70 	bl	80030b0 <ereaseDebugLog>
		loadDistance();
 80057d0:	f7fd fcae 	bl	8003130 <loadDistance>
		loadTheta();
 80057d4:	f7fd fcea 	bl	80031ac <loadTheta>
		loadCross();
 80057d8:	f7fd fd26 	bl	8003228 <loadCross>
		loadSide();
 80057dc:	f7fd fd62 	bl	80032a4 <loadSide>
		//createVelocityTable();
		CreateXYcoordinates();
 80057e0:	f7fd fef0 	bl	80035c4 <CreateXYcoordinates>

	}

	clearCrossLineIgnoreDistance();
 80057e4:	f7fb fdf4 	bl	80013d0 <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 80057e8:	f7fb fe00 	bl	80013ec <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <runningInit+0x6c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <runningInit+0x70>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <runningInit+0x74>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 80057fe:	4b0b      	ldr	r3, [pc, #44]	; (800582c <runningInit+0x78>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005804:	4b0a      	ldr	r3, [pc, #40]	; (8005830 <runningInit+0x7c>)
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <runningInit+0x80>)
 800580c:	2200      	movs	r2, #0
 800580e:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <runningInit+0x84>)
 8005812:	2201      	movs	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20016450 	.word	0x20016450
 8005820:	20015ef0 	.word	0x20015ef0
 8005824:	20015efa 	.word	0x20015efa
 8005828:	20015efb 	.word	0x20015efb
 800582c:	20015eff 	.word	0x20015eff
 8005830:	20015f00 	.word	0x20015f00
 8005834:	20015f01 	.word	0x20015f01
 8005838:	20015f02 	.word	0x20015f02

0800583c <saveLog>:

void saveLog(){
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 8005840:	4b1b      	ldr	r3, [pc, #108]	; (80058b0 <saveLog+0x74>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8005848:	f7fb fdde 	bl	8001408 <getDistance10mm>
 800584c:	eef0 7a40 	vmov.f32	s15, s0
 8005850:	eeb0 0a67 	vmov.f32	s0, s15
 8005854:	f7fd fb78 	bl	8002f48 <saveDistance>
		saveTheta(getTheta10mm());
 8005858:	f7fb ffcc 	bl	80017f4 <getTheta10mm>
 800585c:	eef0 7a40 	vmov.f32	s15, s0
 8005860:	eeb0 0a67 	vmov.f32	s0, s15
 8005864:	f7fd fb88 	bl	8002f78 <saveTheta>
	else if(debug_flag == true){
		//saveDebug(getLookaheadpoints_X());
		//saveDebug(getLookaheadpoints_Y());
		saveDebug(PurepursuitCalculation());
	}
}
 8005868:	e020      	b.n	80058ac <saveLog+0x70>
	else if(velocity_update_flag == true){
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <saveLog+0x78>)
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <saveLog+0x58>
		saveDebug(getTargetVelocity());
 8005872:	f7fe fa1b 	bl	8003cac <getTargetVelocity>
 8005876:	eef0 7a40 	vmov.f32	s15, s0
 800587a:	eeb0 0a67 	vmov.f32	s0, s15
 800587e:	f7fd fbc3 	bl	8003008 <saveDebug>
	    saveDebug(getCurrentVelocity());
 8005882:	f7fe f9d5 	bl	8003c30 <getCurrentVelocity>
 8005886:	eef0 7a40 	vmov.f32	s15, s0
 800588a:	eeb0 0a67 	vmov.f32	s0, s15
 800588e:	f7fd fbbb 	bl	8003008 <saveDebug>
}
 8005892:	e00b      	b.n	80058ac <saveLog+0x70>
	else if(debug_flag == true){
 8005894:	4b08      	ldr	r3, [pc, #32]	; (80058b8 <saveLog+0x7c>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <saveLog+0x70>
		saveDebug(PurepursuitCalculation());
 800589c:	f7fe f87e 	bl	800399c <PurepursuitCalculation>
 80058a0:	eef0 7a40 	vmov.f32	s15, s0
 80058a4:	eeb0 0a67 	vmov.f32	s0, s15
 80058a8:	f7fd fbae 	bl	8003008 <saveDebug>
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20015f03 	.word	0x20015f03
 80058b4:	20015f05 	.word	0x20015f05
 80058b8:	20015f04 	.word	0x20015f04

080058bc <startLogging>:

void startLogging()
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80058c0:	f7fb fdb0 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 80058c4:	f7fb ffb2 	bl	800182c <clearTheta10mm>
	clearaddTheta30mm();
 80058c8:	f7fb ffbe 	bl	8001848 <clearaddTheta30mm>
	clearTotalDistance();
 80058cc:	f7fb fd56 	bl	800137c <clearTotalDistance>
	logging_flag = true;
 80058d0:	4b02      	ldr	r3, [pc, #8]	; (80058dc <startLogging+0x20>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20015f03 	.word	0x20015f03

080058e0 <stopLogging>:

void stopLogging()
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
	logging_flag = false;
 80058e4:	4b03      	ldr	r3, [pc, #12]	; (80058f4 <stopLogging+0x14>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
}
 80058ea:	bf00      	nop
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20015f03 	.word	0x20015f03

080058f8 <startDebugLogging>:

void startDebugLogging()
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80058fc:	f7fb fd92 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 8005900:	f7fb ff94 	bl	800182c <clearTheta10mm>
	clearaddTheta30mm();
 8005904:	f7fb ffa0 	bl	8001848 <clearaddTheta30mm>
	clearTotalDistance();
 8005908:	f7fb fd38 	bl	800137c <clearTotalDistance>
	debug_flag = true;
 800590c:	4b02      	ldr	r3, [pc, #8]	; (8005918 <startDebugLogging+0x20>)
 800590e:	2201      	movs	r2, #1
 8005910:	701a      	strb	r2, [r3, #0]
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20015f04 	.word	0x20015f04

0800591c <stopDebugLogging>:

void stopDebugLogging()
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
	debug_flag = false;
 8005920:	4b03      	ldr	r3, [pc, #12]	; (8005930 <stopDebugLogging+0x14>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20015f04 	.word	0x20015f04

08005934 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005938:	f7fb fd74 	bl	8001424 <clearDistance10mm>
	clearTotalDistance();
 800593c:	f7fb fd1e 	bl	800137c <clearTotalDistance>
	velocity_table_idx = 0;
 8005940:	4b08      	ldr	r3, [pc, #32]	; (8005964 <startVelocityUpdate+0x30>)
 8005942:	2200      	movs	r2, #0
 8005944:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <startVelocityUpdate+0x34>)
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <startVelocityUpdate+0x38>)
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005954:	4b06      	ldr	r3, [pc, #24]	; (8005970 <startVelocityUpdate+0x3c>)
 8005956:	2200      	movs	r2, #0
 8005958:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 800595a:	4b06      	ldr	r3, [pc, #24]	; (8005974 <startVelocityUpdate+0x40>)
 800595c:	2200      	movs	r2, #0
 800595e:	801a      	strh	r2, [r3, #0]
}
 8005960:	bf00      	nop
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20016452 	.word	0x20016452
 8005968:	2001644c 	.word	0x2001644c
 800596c:	20015f05 	.word	0x20015f05
 8005970:	20015ef2 	.word	0x20015ef2
 8005974:	20015ef4 	.word	0x20015ef4

08005978 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <stopVelocityUpdate+0x14>)
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20015f05 	.word	0x20015f05

08005990 <updateTargetVelocity>:
			}
		}
	}
}

void updateTargetVelocity(){
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005994:	4b2c      	ldr	r3, [pc, #176]	; (8005a48 <updateTargetVelocity+0xb8>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d053      	beq.n	8005a44 <updateTargetVelocity+0xb4>
		if(getTotalDistance() >= ref_distance){
 800599c:	f7fb fca6 	bl	80012ec <getTotalDistance>
 80059a0:	eeb0 7a40 	vmov.f32	s14, s0
 80059a4:	4b29      	ldr	r3, [pc, #164]	; (8005a4c <updateTargetVelocity+0xbc>)
 80059a6:	edd3 7a00 	vldr	s15, [r3]
 80059aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	db14      	blt.n	80059de <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 80059b4:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fd fd03 	bl	80033c4 <getDistanceLog>
 80059be:	eeb0 7a40 	vmov.f32	s14, s0
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <updateTargetVelocity+0xbc>)
 80059c4:	edd3 7a00 	vldr	s15, [r3]
 80059c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059cc:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <updateTargetVelocity+0xbc>)
 80059ce:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 80059d2:	4b1f      	ldr	r3, [pc, #124]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	3301      	adds	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	4b1d      	ldr	r3, [pc, #116]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059dc:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 80059de:	f7fd fb77 	bl	80030d0 <getDistanceLogSize>
 80059e2:	4603      	mov	r3, r0
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d806      	bhi.n	80059fc <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 80059ee:	f7fd fb6f 	bl	80030d0 <getDistanceLogSize>
 80059f2:	4603      	mov	r3, r0
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059fa:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <updateTargetVelocity+0xc0>)
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	4a14      	ldr	r2, [pc, #80]	; (8005a54 <updateTargetVelocity+0xc4>)
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	edd3 7a00 	vldr	s15, [r3]
 8005a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a0e:	f7fe f8cd 	bl	8003bac <setTargetVelocity>
		//setTargetAcceleration(acceleration_table[velocity_table_idx]);

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <updateTargetVelocity+0xc0>)
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	4a0f      	ldr	r2, [pc, #60]	; (8005a54 <updateTargetVelocity+0xc4>)
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	ed93 7a00 	vldr	s14, [r3]
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <updateTargetVelocity+0xc8>)
 8005a22:	edd3 7a00 	vldr	s15, [r3]
 8005a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2e:	d501      	bpl.n	8005a34 <updateTargetVelocity+0xa4>
			setClearFlagOfVelocityControlI();
 8005a30:	f7fe f968 	bl	8003d04 <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005a34:	4b06      	ldr	r3, [pc, #24]	; (8005a50 <updateTargetVelocity+0xc0>)
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	4a06      	ldr	r2, [pc, #24]	; (8005a54 <updateTargetVelocity+0xc4>)
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <updateTargetVelocity+0xc8>)
 8005a42:	6013      	str	r3, [r2, #0]

	}
}
 8005a44:	bf00      	nop
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20015f05 	.word	0x20015f05
 8005a4c:	2001644c 	.word	0x2001644c
 8005a50:	20016452 	.word	0x20016452
 8005a54:	20013fb0 	.word	0x20013fb0
 8005a58:	20015f28 	.word	0x20015f28

08005a5c <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005a62:	e03f      	b.n	8005ae4 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fd fcd7 	bl	800341c <getCrossLog>
 8005a6e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005a72:	f7fb fc3b 	bl	80012ec <getTotalDistance>
 8005a76:	eeb0 7a40 	vmov.f32	s14, s0
 8005a7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a82:	eef0 7ae7 	vabs.f32	s15, s15
 8005a86:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005a8a:	edd7 7a00 	vldr	s15, [r7]
 8005a8e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005b00 <correctionTotalDistanceFromCrossLine+0xa4>
 8005a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9a:	d80d      	bhi.n	8005ab8 <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005aa2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005aa6:	f7fb fc4b 	bl	8001340 <setTotalDistance>
			cross_line_idx++;
 8005aaa:	4b14      	ldr	r3, [pc, #80]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005ab4:	801a      	strh	r2, [r3, #0]
			break;
 8005ab6:	e01d      	b.n	8005af4 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005ab8:	4b10      	ldr	r3, [pc, #64]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005ac2:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005ac4:	f7fd fb10 	bl	80030e8 <getCrossLogSize>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d807      	bhi.n	8005ae4 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005ad4:	f7fd fb08 	bl	80030e8 <getCrossLogSize>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	4b07      	ldr	r3, [pc, #28]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005ae0:	801a      	strh	r2, [r3, #0]
			break;
 8005ae2:	e007      	b.n	8005af4 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005ae4:	f7fd fb00 	bl	80030e8 <getCrossLogSize>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	461a      	mov	r2, r3
 8005aec:	4b03      	ldr	r3, [pc, #12]	; (8005afc <correctionTotalDistanceFromCrossLine+0xa0>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d2b7      	bcs.n	8005a64 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20015ef2 	.word	0x20015ef2
 8005b00:	437a0000 	.word	0x437a0000
 8005b04:	20015ef6 	.word	0x20015ef6

08005b08 <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005b0e:	e03f      	b.n	8005b90 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005b10:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fd fc97 	bl	8003448 <getSideLog>
 8005b1a:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005b1e:	f7fb fbe5 	bl	80012ec <getTotalDistance>
 8005b22:	eeb0 7a40 	vmov.f32	s14, s0
 8005b26:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b2e:	eef0 7ae7 	vabs.f32	s15, s15
 8005b32:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005b36:	edd7 7a00 	vldr	s15, [r7]
 8005b3a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005bac <correctionTotalDistanceFromSideLine+0xa4>
 8005b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b46:	d80d      	bhi.n	8005b64 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005b48:	4b19      	ldr	r3, [pc, #100]	; (8005bb0 <correctionTotalDistanceFromSideLine+0xa8>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005b4e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b52:	f7fb fbf5 	bl	8001340 <setTotalDistance>
			side_line_idx++;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b60:	801a      	strh	r2, [r3, #0]
			break;
 8005b62:	e01d      	b.n	8005ba0 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005b64:	4b10      	ldr	r3, [pc, #64]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b6e:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005b70:	f7fd fac6 	bl	8003100 <getSideLogSize>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461a      	mov	r2, r3
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d807      	bhi.n	8005b90 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005b80:	f7fd fabe 	bl	8003100 <getSideLogSize>
 8005b84:	4603      	mov	r3, r0
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b8c:	801a      	strh	r2, [r3, #0]
			break;
 8005b8e:	e007      	b.n	8005ba0 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005b90:	f7fd fab6 	bl	8003100 <getSideLogSize>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b03      	ldr	r3, [pc, #12]	; (8005ba8 <correctionTotalDistanceFromSideLine+0xa0>)
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d2b7      	bcs.n	8005b10 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20015ef4 	.word	0x20015ef4
 8005bac:	437a0000 	.word	0x437a0000
 8005bb0:	20015ef8 	.word	0x20015ef8

08005bb4 <getgoalStatus>:
    }
}
*/

bool getgoalStatus()
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	return goal_flag;
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <getgoalStatus+0x14>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20015efe 	.word	0x20015efe

08005bcc <getDebugflag>:

bool getDebugflag()//デバックflag監視
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
	return debug_flag;
 8005bd0:	4b03      	ldr	r3, [pc, #12]	; (8005be0 <getDebugflag+0x14>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20015f04 	.word	0x20015f04

08005be4 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	ed87 0a01 	vstr	s0, [r7, #4]
 8005bee:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005bf2:	4a06      	ldr	r2, [pc, #24]	; (8005c0c <setVelocityRange+0x28>)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005bf8:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <setVelocityRange+0x2c>)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20015f08 	.word	0x20015f08
 8005c10:	20015f0c 	.word	0x20015f0c

08005c14 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c1e:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005c22:	4a06      	ldr	r2, [pc, #24]	; (8005c3c <setAccDec+0x28>)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005c28:	4a05      	ldr	r2, [pc, #20]	; (8005c40 <setAccDec+0x2c>)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20015f10 	.word	0x20015f10
 8005c40:	20015f14 	.word	0x20015f14

08005c44 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005c4e:	4a04      	ldr	r2, [pc, #16]	; (8005c60 <setStraightRadius+0x1c>)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6013      	str	r3, [r2, #0]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	20015f18 	.word	0x20015f18

08005c64 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005c68:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <getSideSensorStatusL+0x14>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20015efc 	.word	0x20015efc

08005c7c <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005c80:	4b03      	ldr	r3, [pc, #12]	; (8005c90 <getSideSensorStatusR+0x14>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20015efd 	.word	0x20015efd

08005c94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	607b      	str	r3, [r7, #4]
 8005c9e:	4b10      	ldr	r3, [pc, #64]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	4a0f      	ldr	r2, [pc, #60]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb2:	607b      	str	r3, [r7, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	4a08      	ldr	r2, [pc, #32]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc6:	4b06      	ldr	r3, [pc, #24]	; (8005ce0 <HAL_MspInit+0x4c>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800

08005ce4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08e      	sub	sp, #56	; 0x38
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a79      	ldr	r2, [pc, #484]	; (8005ee8 <HAL_ADC_MspInit+0x204>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d158      	bne.n	8005db8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	4b78      	ldr	r3, [pc, #480]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0e:	4a77      	ldr	r2, [pc, #476]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d14:	6453      	str	r3, [r2, #68]	; 0x44
 8005d16:	4b75      	ldr	r3, [pc, #468]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1e:	623b      	str	r3, [r7, #32]
 8005d20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	4b71      	ldr	r3, [pc, #452]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	4a70      	ldr	r2, [pc, #448]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d2c:	f043 0304 	orr.w	r3, r3, #4
 8005d30:	6313      	str	r3, [r2, #48]	; 0x30
 8005d32:	4b6e      	ldr	r3, [pc, #440]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005d3e:	230e      	movs	r3, #14
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d42:	2303      	movs	r3, #3
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4867      	ldr	r0, [pc, #412]	; (8005ef0 <HAL_ADC_MspInit+0x20c>)
 8005d52:	f001 ff65 	bl	8007c20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005d56:	4b67      	ldr	r3, [pc, #412]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d58:	4a67      	ldr	r2, [pc, #412]	; (8005ef8 <HAL_ADC_MspInit+0x214>)
 8005d5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005d5c:	4b65      	ldr	r3, [pc, #404]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d62:	4b64      	ldr	r3, [pc, #400]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d68:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d6e:	4b61      	ldr	r3, [pc, #388]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d76:	4b5f      	ldr	r3, [pc, #380]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d7e:	4b5d      	ldr	r3, [pc, #372]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d86:	4b5b      	ldr	r3, [pc, #364]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005d8e:	4b59      	ldr	r3, [pc, #356]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d94:	4b57      	ldr	r3, [pc, #348]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d9a:	4856      	ldr	r0, [pc, #344]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005d9c:	f001 f9e8 	bl	8007170 <HAL_DMA_Init>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005da6:	f7ff f901 	bl	8004fac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a51      	ldr	r2, [pc, #324]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38
 8005db0:	4a50      	ldr	r2, [pc, #320]	; (8005ef4 <HAL_ADC_MspInit+0x210>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005db6:	e092      	b.n	8005ede <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a4f      	ldr	r2, [pc, #316]	; (8005efc <HAL_ADC_MspInit+0x218>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	f040 808d 	bne.w	8005ede <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	4b48      	ldr	r3, [pc, #288]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dcc:	4a47      	ldr	r2, [pc, #284]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8005dd4:	4b45      	ldr	r3, [pc, #276]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005de0:	2300      	movs	r3, #0
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	4b41      	ldr	r3, [pc, #260]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	4a40      	ldr	r2, [pc, #256]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	6313      	str	r3, [r2, #48]	; 0x30
 8005df0:	4b3e      	ldr	r3, [pc, #248]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	4b3a      	ldr	r3, [pc, #232]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e04:	4a39      	ldr	r2, [pc, #228]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e06:	f043 0304 	orr.w	r3, r3, #4
 8005e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e0c:	4b37      	ldr	r3, [pc, #220]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	4b33      	ldr	r3, [pc, #204]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e20:	4a32      	ldr	r2, [pc, #200]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e22:	f043 0302 	orr.w	r3, r3, #2
 8005e26:	6313      	str	r3, [r2, #48]	; 0x30
 8005e28:	4b30      	ldr	r3, [pc, #192]	; (8005eec <HAL_ADC_MspInit+0x208>)
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e34:	23ff      	movs	r3, #255	; 0xff
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e44:	4619      	mov	r1, r3
 8005e46:	482e      	ldr	r0, [pc, #184]	; (8005f00 <HAL_ADC_MspInit+0x21c>)
 8005e48:	f001 feea 	bl	8007c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e4c:	2330      	movs	r3, #48	; 0x30
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e50:	2303      	movs	r3, #3
 8005e52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4824      	ldr	r0, [pc, #144]	; (8005ef0 <HAL_ADC_MspInit+0x20c>)
 8005e60:	f001 fede 	bl	8007c20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e64:	2303      	movs	r3, #3
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e74:	4619      	mov	r1, r3
 8005e76:	4823      	ldr	r0, [pc, #140]	; (8005f04 <HAL_ADC_MspInit+0x220>)
 8005e78:	f001 fed2 	bl	8007c20 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005e7c:	4b22      	ldr	r3, [pc, #136]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005e7e:	4a23      	ldr	r2, [pc, #140]	; (8005f0c <HAL_ADC_MspInit+0x228>)
 8005e80:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005e84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e88:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e90:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ea6:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eac:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005eae:	4b16      	ldr	r3, [pc, #88]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eb4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ebc:	4b12      	ldr	r3, [pc, #72]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005ec2:	4811      	ldr	r0, [pc, #68]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005ec4:	f001 f954 	bl	8007170 <HAL_DMA_Init>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005ece:	f7ff f86d 	bl	8004fac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a0c      	ldr	r2, [pc, #48]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ed8:	4a0b      	ldr	r2, [pc, #44]	; (8005f08 <HAL_ADC_MspInit+0x224>)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ede:	bf00      	nop
 8005ee0:	3738      	adds	r7, #56	; 0x38
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40012000 	.word	0x40012000
 8005eec:	40023800 	.word	0x40023800
 8005ef0:	40020800 	.word	0x40020800
 8005ef4:	200162bc 	.word	0x200162bc
 8005ef8:	40026410 	.word	0x40026410
 8005efc:	40012100 	.word	0x40012100
 8005f00:	40020000 	.word	0x40020000
 8005f04:	40020400 	.word	0x40020400
 8005f08:	200163a4 	.word	0x200163a4
 8005f0c:	40026440 	.word	0x40026440

08005f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08a      	sub	sp, #40	; 0x28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f18:	f107 0314 	add.w	r3, r7, #20
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]
 8005f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_I2C_MspInit+0x84>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d12c      	bne.n	8005f8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	6313      	str	r3, [r2, #48]	; 0x30
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f54:	2312      	movs	r3, #18
 8005f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005f60:	2304      	movs	r3, #4
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f64:	f107 0314 	add.w	r3, r7, #20
 8005f68:	4619      	mov	r1, r3
 8005f6a:	480c      	ldr	r0, [pc, #48]	; (8005f9c <HAL_I2C_MspInit+0x8c>)
 8005f6c:	f001 fe58 	bl	8007c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	4b08      	ldr	r3, [pc, #32]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005f80:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_I2C_MspInit+0x88>)
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005f8c:	bf00      	nop
 8005f8e:	3728      	adds	r7, #40	; 0x28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	40005400 	.word	0x40005400
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	40020400 	.word	0x40020400

08005fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0314 	add.w	r3, r7, #20
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a19      	ldr	r2, [pc, #100]	; (8006024 <HAL_SPI_MspInit+0x84>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d12c      	bne.n	800601c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	613b      	str	r3, [r7, #16]
 8005fc6:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fda:	613b      	str	r3, [r7, #16]
 8005fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	4b11      	ldr	r3, [pc, #68]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a10      	ldr	r2, [pc, #64]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b0e      	ldr	r3, [pc, #56]	; (8006028 <HAL_SPI_MspInit+0x88>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005ffa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006000:	2302      	movs	r3, #2
 8006002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006004:	2300      	movs	r3, #0
 8006006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006008:	2303      	movs	r3, #3
 800600a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800600c:	2306      	movs	r3, #6
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	4619      	mov	r1, r3
 8006016:	4805      	ldr	r0, [pc, #20]	; (800602c <HAL_SPI_MspInit+0x8c>)
 8006018:	f001 fe02 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800601c:	bf00      	nop
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40003c00 	.word	0x40003c00
 8006028:	40023800 	.word	0x40023800
 800602c:	40020800 	.word	0x40020800

08006030 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a15      	ldr	r2, [pc, #84]	; (8006094 <HAL_TIM_PWM_MspInit+0x64>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d10e      	bne.n	8006060 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	4a13      	ldr	r2, [pc, #76]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6453      	str	r3, [r2, #68]	; 0x44
 8006052:	4b11      	ldr	r3, [pc, #68]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	60fb      	str	r3, [r7, #12]
 800605c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800605e:	e012      	b.n	8006086 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0d      	ldr	r2, [pc, #52]	; (800609c <HAL_TIM_PWM_MspInit+0x6c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10d      	bne.n	8006086 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	4a09      	ldr	r2, [pc, #36]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 8006074:	f043 0302 	orr.w	r3, r3, #2
 8006078:	6453      	str	r3, [r2, #68]	; 0x44
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <HAL_TIM_PWM_MspInit+0x68>)
 800607c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607e:	f003 0302 	and.w	r3, r3, #2
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40010000 	.word	0x40010000
 8006098:	40023800 	.word	0x40023800
 800609c:	40010400 	.word	0x40010400

080060a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	; 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a8:	f107 031c 	add.w	r3, r7, #28
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a32      	ldr	r2, [pc, #200]	; (8006188 <HAL_TIM_Encoder_MspInit+0xe8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d12c      	bne.n	800611c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	4a30      	ldr	r2, [pc, #192]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6413      	str	r3, [r2, #64]	; 0x40
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	61bb      	str	r3, [r7, #24]
 80060dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	4a29      	ldr	r2, [pc, #164]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060e8:	f043 0302 	orr.w	r3, r3, #2
 80060ec:	6313      	str	r3, [r2, #48]	; 0x30
 80060ee:	4b27      	ldr	r3, [pc, #156]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80060fa:	2330      	movs	r3, #48	; 0x30
 80060fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fe:	2302      	movs	r3, #2
 8006100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006106:	2300      	movs	r3, #0
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800610a:	2302      	movs	r3, #2
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610e:	f107 031c 	add.w	r3, r7, #28
 8006112:	4619      	mov	r1, r3
 8006114:	481e      	ldr	r0, [pc, #120]	; (8006190 <HAL_TIM_Encoder_MspInit+0xf0>)
 8006116:	f001 fd83 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800611a:	e030      	b.n	800617e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <HAL_TIM_Encoder_MspInit+0xf4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d12b      	bne.n	800617e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006126:	2300      	movs	r3, #0
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	4b18      	ldr	r3, [pc, #96]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	4a17      	ldr	r2, [pc, #92]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 8006130:	f043 0304 	orr.w	r3, r3, #4
 8006134:	6413      	str	r3, [r2, #64]	; 0x40
 8006136:	4b15      	ldr	r3, [pc, #84]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 8006138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6313      	str	r3, [r2, #48]	; 0x30
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_TIM_Encoder_MspInit+0xec>)
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800615e:	23c0      	movs	r3, #192	; 0xc0
 8006160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006162:	2302      	movs	r3, #2
 8006164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616a:	2300      	movs	r3, #0
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800616e:	2302      	movs	r3, #2
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006172:	f107 031c 	add.w	r3, r7, #28
 8006176:	4619      	mov	r1, r3
 8006178:	4805      	ldr	r0, [pc, #20]	; (8006190 <HAL_TIM_Encoder_MspInit+0xf0>)
 800617a:	f001 fd51 	bl	8007c20 <HAL_GPIO_Init>
}
 800617e:	bf00      	nop
 8006180:	3730      	adds	r7, #48	; 0x30
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40000400 	.word	0x40000400
 800618c:	40023800 	.word	0x40023800
 8006190:	40020400 	.word	0x40020400
 8006194:	40000800 	.word	0x40000800

08006198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <HAL_TIM_Base_MspInit+0x80>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d116      	bne.n	80061d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	4b1b      	ldr	r3, [pc, #108]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	4a1a      	ldr	r2, [pc, #104]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80061c6:	2200      	movs	r2, #0
 80061c8:	2101      	movs	r1, #1
 80061ca:	2036      	movs	r0, #54	; 0x36
 80061cc:	f000 ff99 	bl	8007102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80061d0:	2036      	movs	r0, #54	; 0x36
 80061d2:	f000 ffb2 	bl	800713a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80061d6:	e01a      	b.n	800620e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a10      	ldr	r2, [pc, #64]	; (8006220 <HAL_TIM_Base_MspInit+0x88>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d115      	bne.n	800620e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	4b0d      	ldr	r3, [pc, #52]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	4a0c      	ldr	r2, [pc, #48]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061ec:	f043 0320 	orr.w	r3, r3, #32
 80061f0:	6413      	str	r3, [r2, #64]	; 0x40
 80061f2:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_TIM_Base_MspInit+0x84>)
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	60bb      	str	r3, [r7, #8]
 80061fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	2037      	movs	r0, #55	; 0x37
 8006204:	f000 ff7d 	bl	8007102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006208:	2037      	movs	r0, #55	; 0x37
 800620a:	f000 ff96 	bl	800713a <HAL_NVIC_EnableIRQ>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40001000 	.word	0x40001000
 800621c:	40023800 	.word	0x40023800
 8006220:	40001400 	.word	0x40001400

08006224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800622c:	f107 0314 	add.w	r3, r7, #20
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	609a      	str	r2, [r3, #8]
 8006238:	60da      	str	r2, [r3, #12]
 800623a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <HAL_TIM_MspPostInit+0xb4>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d11f      	bne.n	8006286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	4b24      	ldr	r3, [pc, #144]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	4a23      	ldr	r2, [pc, #140]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	6313      	str	r3, [r2, #48]	; 0x30
 8006256:	4b21      	ldr	r3, [pc, #132]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006268:	2302      	movs	r3, #2
 800626a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006270:	2300      	movs	r3, #0
 8006272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006274:	2301      	movs	r3, #1
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006278:	f107 0314 	add.w	r3, r7, #20
 800627c:	4619      	mov	r1, r3
 800627e:	4818      	ldr	r0, [pc, #96]	; (80062e0 <HAL_TIM_MspPostInit+0xbc>)
 8006280:	f001 fcce 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006284:	e023      	b.n	80062ce <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_TIM_MspPostInit+0xc0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d11e      	bne.n	80062ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	4a10      	ldr	r2, [pc, #64]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 800629a:	f043 0304 	orr.w	r3, r3, #4
 800629e:	6313      	str	r3, [r2, #48]	; 0x30
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_TIM_MspPostInit+0xb8>)
 80062a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80062ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80062b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b2:	2302      	movs	r3, #2
 80062b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ba:	2300      	movs	r3, #0
 80062bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80062be:	2303      	movs	r3, #3
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062c2:	f107 0314 	add.w	r3, r7, #20
 80062c6:	4619      	mov	r1, r3
 80062c8:	4807      	ldr	r0, [pc, #28]	; (80062e8 <HAL_TIM_MspPostInit+0xc4>)
 80062ca:	f001 fca9 	bl	8007c20 <HAL_GPIO_Init>
}
 80062ce:	bf00      	nop
 80062d0:	3728      	adds	r7, #40	; 0x28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40023800 	.word	0x40023800
 80062e0:	40020000 	.word	0x40020000
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40020800 	.word	0x40020800

080062ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_UART_MspInit+0x84>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d12c      	bne.n	8006368 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	613b      	str	r3, [r7, #16]
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <HAL_UART_MspInit+0x88>)
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	4a17      	ldr	r2, [pc, #92]	; (8006374 <HAL_UART_MspInit+0x88>)
 8006318:	f043 0310 	orr.w	r3, r3, #16
 800631c:	6453      	str	r3, [r2, #68]	; 0x44
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_UART_MspInit+0x88>)
 8006320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	613b      	str	r3, [r7, #16]
 8006328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	4b11      	ldr	r3, [pc, #68]	; (8006374 <HAL_UART_MspInit+0x88>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4a10      	ldr	r2, [pc, #64]	; (8006374 <HAL_UART_MspInit+0x88>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6313      	str	r3, [r2, #48]	; 0x30
 800633a:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <HAL_UART_MspInit+0x88>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006346:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800634a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634c:	2302      	movs	r3, #2
 800634e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006354:	2303      	movs	r3, #3
 8006356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006358:	2307      	movs	r3, #7
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	4619      	mov	r1, r3
 8006362:	4805      	ldr	r0, [pc, #20]	; (8006378 <HAL_UART_MspInit+0x8c>)
 8006364:	f001 fc5c 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006368:	bf00      	nop
 800636a:	3728      	adds	r7, #40	; 0x28
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40011000 	.word	0x40011000
 8006374:	40023800 	.word	0x40023800
 8006378:	40020000 	.word	0x40020000

0800637c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006380:	e7fe      	b.n	8006380 <NMI_Handler+0x4>

08006382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006382:	b480      	push	{r7}
 8006384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006386:	e7fe      	b.n	8006386 <HardFault_Handler+0x4>

08006388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800638c:	e7fe      	b.n	800638c <MemManage_Handler+0x4>

0800638e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800638e:	b480      	push	{r7}
 8006390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006392:	e7fe      	b.n	8006392 <BusFault_Handler+0x4>

08006394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006398:	e7fe      	b.n	8006398 <UsageFault_Handler+0x4>

0800639a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800639a:	b480      	push	{r7}
 800639c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800639e:	bf00      	nop
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063b6:	b480      	push	{r7}
 80063b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063ba:	bf00      	nop
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063c8:	f000 f98a 	bl	80066e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063cc:	bf00      	nop
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80063d4:	4802      	ldr	r0, [pc, #8]	; (80063e0 <TIM6_DAC_IRQHandler+0x10>)
 80063d6:	f003 fa38 	bl	800984a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80063da:	bf00      	nop
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2001631c 	.word	0x2001631c

080063e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80063e8:	4802      	ldr	r0, [pc, #8]	; (80063f4 <TIM7_IRQHandler+0x10>)
 80063ea:	f003 fa2e 	bl	800984a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20016404 	.word	0x20016404

080063f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80063fc:	4802      	ldr	r0, [pc, #8]	; (8006408 <DMA2_Stream0_IRQHandler+0x10>)
 80063fe:	f000 ffbd 	bl	800737c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006402:	bf00      	nop
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	200162bc 	.word	0x200162bc

0800640c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006410:	4802      	ldr	r0, [pc, #8]	; (800641c <DMA2_Stream2_IRQHandler+0x10>)
 8006412:	f000 ffb3 	bl	800737c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200163a4 	.word	0x200163a4

08006420 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b52      	cmp	r3, #82	; 0x52
 8006432:	d10a      	bne.n	800644a <getSwitchStatus+0x2a>
 8006434:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006438:	480d      	ldr	r0, [pc, #52]	; (8006470 <getSwitchStatus+0x50>)
 800643a:	f001 fd8b 	bl	8007f54 <HAL_GPIO_ReadPin>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <getSwitchStatus+0x2a>
		ret = 1;
 8006444:	2301      	movs	r3, #1
 8006446:	81fb      	strh	r3, [r7, #14]
 8006448:	e00c      	b.n	8006464 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b4c      	cmp	r3, #76	; 0x4c
 800644e:	d109      	bne.n	8006464 <getSwitchStatus+0x44>
 8006450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006454:	4806      	ldr	r0, [pc, #24]	; (8006470 <getSwitchStatus+0x50>)
 8006456:	f001 fd7d 	bl	8007f54 <HAL_GPIO_ReadPin>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <getSwitchStatus+0x44>
		ret = 1;
 8006460:	2301      	movs	r3, #1
 8006462:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006464:	89fb      	ldrh	r3, [r7, #14]

}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	40020000 	.word	0x40020000

08006474 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
 8006484:	e00a      	b.n	800649c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006486:	f3af 8000 	nop.w
 800648a:	4601      	mov	r1, r0
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	60ba      	str	r2, [r7, #8]
 8006492:	b2ca      	uxtb	r2, r1
 8006494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3301      	adds	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	dbf0      	blt.n	8006486 <_read+0x12>
	}

return len;
 80064a4:	687b      	ldr	r3, [r7, #4]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e009      	b.n	80064d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	60ba      	str	r2, [r7, #8]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fd fc27 	bl	8003d1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	3301      	adds	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	dbf1      	blt.n	80064c0 <_write+0x12>
	}
	return len;
 80064dc:	687b      	ldr	r3, [r7, #4]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <_close>:

int _close(int file)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
	return -1;
 80064ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800650e:	605a      	str	r2, [r3, #4]
	return 0;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <_isatty>:

int _isatty(int file)
{
 800651e:	b480      	push	{r7}
 8006520:	b083      	sub	sp, #12
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
	return 1;
 8006526:	2301      	movs	r3, #1
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
	return 0;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
	...

08006550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006558:	4a14      	ldr	r2, [pc, #80]	; (80065ac <_sbrk+0x5c>)
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <_sbrk+0x60>)
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006564:	4b13      	ldr	r3, [pc, #76]	; (80065b4 <_sbrk+0x64>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d102      	bne.n	8006572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800656c:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <_sbrk+0x64>)
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <_sbrk+0x68>)
 8006570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006572:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <_sbrk+0x64>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	429a      	cmp	r2, r3
 800657e:	d207      	bcs.n	8006590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006580:	f005 fe3c 	bl	800c1fc <__errno>
 8006584:	4602      	mov	r2, r0
 8006586:	230c      	movs	r3, #12
 8006588:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800658a:	f04f 33ff 	mov.w	r3, #4294967295
 800658e:	e009      	b.n	80065a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006590:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <_sbrk+0x64>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <_sbrk+0x64>)
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	4a05      	ldr	r2, [pc, #20]	; (80065b4 <_sbrk+0x64>)
 80065a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065a2:	68fb      	ldr	r3, [r7, #12]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20020000 	.word	0x20020000
 80065b0:	00000400 	.word	0x00000400
 80065b4:	20015f2c 	.word	0x20015f2c
 80065b8:	20016480 	.word	0x20016480

080065bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <SystemInit+0x28>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <SystemInit+0x28>)
 80065c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <SystemInit+0x28>)
 80065d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065d6:	609a      	str	r2, [r3, #8]
#endif
}
 80065d8:	bf00      	nop
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	e000ed00 	.word	0xe000ed00

080065e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80065e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006620 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80065ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80065ee:	e003      	b.n	80065f8 <LoopCopyDataInit>

080065f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80065f0:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80065f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80065f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80065f6:	3104      	adds	r1, #4

080065f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80065f8:	480b      	ldr	r0, [pc, #44]	; (8006628 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80065fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80065fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006600:	d3f6      	bcc.n	80065f0 <CopyDataInit>
  ldr  r2, =_sbss
 8006602:	4a0b      	ldr	r2, [pc, #44]	; (8006630 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006604:	e002      	b.n	800660c <LoopFillZerobss>

08006606 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006606:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006608:	f842 3b04 	str.w	r3, [r2], #4

0800660c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800660e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006610:	d3f9      	bcc.n	8006606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006612:	f7ff ffd3 	bl	80065bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006616:	f005 fdf7 	bl	800c208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800661a:	f7fd fbf9 	bl	8003e10 <main>
  bx  lr    
 800661e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006620:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006624:	08010cd8 	.word	0x08010cd8
  ldr  r0, =_sdata
 8006628:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800662c:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 8006630:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8006634:	2001647c 	.word	0x2001647c

08006638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006638:	e7fe      	b.n	8006638 <ADC_IRQHandler>
	...

0800663c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006640:	4b0e      	ldr	r3, [pc, #56]	; (800667c <HAL_Init+0x40>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a0d      	ldr	r2, [pc, #52]	; (800667c <HAL_Init+0x40>)
 8006646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800664a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_Init+0x40>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <HAL_Init+0x40>)
 8006652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006658:	4b08      	ldr	r3, [pc, #32]	; (800667c <HAL_Init+0x40>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a07      	ldr	r2, [pc, #28]	; (800667c <HAL_Init+0x40>)
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006664:	2003      	movs	r0, #3
 8006666:	f000 fd41 	bl	80070ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800666a:	2000      	movs	r0, #0
 800666c:	f000 f808 	bl	8006680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006670:	f7ff fb10 	bl	8005c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40023c00 	.word	0x40023c00

08006680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006688:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <HAL_InitTick+0x54>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_InitTick+0x58>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	4619      	mov	r1, r3
 8006692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006696:	fbb3 f3f1 	udiv	r3, r3, r1
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd59 	bl	8007156 <HAL_SYSTICK_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e00e      	b.n	80066cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b0f      	cmp	r3, #15
 80066b2:	d80a      	bhi.n	80066ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80066b4:	2200      	movs	r2, #0
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	f04f 30ff 	mov.w	r0, #4294967295
 80066bc:	f000 fd21 	bl	8007102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80066c0:	4a06      	ldr	r2, [pc, #24]	; (80066dc <HAL_InitTick+0x5c>)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	e000      	b.n	80066cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000034 	.word	0x20000034
 80066d8:	2000003c 	.word	0x2000003c
 80066dc:	20000038 	.word	0x20000038

080066e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80066e4:	4b06      	ldr	r3, [pc, #24]	; (8006700 <HAL_IncTick+0x20>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <HAL_IncTick+0x24>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4413      	add	r3, r2
 80066f0:	4a04      	ldr	r2, [pc, #16]	; (8006704 <HAL_IncTick+0x24>)
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bf00      	nop
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	2000003c 	.word	0x2000003c
 8006704:	20016454 	.word	0x20016454

08006708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
  return uwTick;
 800670c:	4b03      	ldr	r3, [pc, #12]	; (800671c <HAL_GetTick+0x14>)
 800670e:	681b      	ldr	r3, [r3, #0]
}
 8006710:	4618      	mov	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	20016454 	.word	0x20016454

08006720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006728:	f7ff ffee 	bl	8006708 <HAL_GetTick>
 800672c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006738:	d005      	beq.n	8006746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800673a:	4b09      	ldr	r3, [pc, #36]	; (8006760 <HAL_Delay+0x40>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006746:	bf00      	nop
 8006748:	f7ff ffde 	bl	8006708 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	429a      	cmp	r2, r3
 8006756:	d8f7      	bhi.n	8006748 <HAL_Delay+0x28>
  {
  }
}
 8006758:	bf00      	nop
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	2000003c 	.word	0x2000003c

08006764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e033      	b.n	80067e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f7ff faae 	bl	8005ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f003 0310 	and.w	r3, r3, #16
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d118      	bne.n	80067d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067aa:	f023 0302 	bic.w	r3, r3, #2
 80067ae:	f043 0202 	orr.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa4a 	bl	8006c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f023 0303 	bic.w	r3, r3, #3
 80067ca:	f043 0201 	orr.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	641a      	str	r2, [r3, #64]	; 0x40
 80067d2:	e001      	b.n	80067d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_ADC_Start_DMA+0x1e>
 8006806:	2302      	movs	r3, #2
 8006808:	e0cc      	b.n	80069a4 <HAL_ADC_Start_DMA+0x1b8>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d018      	beq.n	8006852 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f042 0201 	orr.w	r2, r2, #1
 800682e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006830:	4b5e      	ldr	r3, [pc, #376]	; (80069ac <HAL_ADC_Start_DMA+0x1c0>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a5e      	ldr	r2, [pc, #376]	; (80069b0 <HAL_ADC_Start_DMA+0x1c4>)
 8006836:	fba2 2303 	umull	r2, r3, r2, r3
 800683a:	0c9a      	lsrs	r2, r3, #18
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006844:	e002      	b.n	800684c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	3b01      	subs	r3, #1
 800684a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f9      	bne.n	8006846 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b01      	cmp	r3, #1
 800685e:	f040 80a0 	bne.w	80069a2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800688c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800689c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a0:	d106      	bne.n	80068b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a6:	f023 0206 	bic.w	r2, r3, #6
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	645a      	str	r2, [r3, #68]	; 0x44
 80068ae:	e002      	b.n	80068b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068be:	4b3d      	ldr	r3, [pc, #244]	; (80069b4 <HAL_ADC_Start_DMA+0x1c8>)
 80068c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	4a3c      	ldr	r2, [pc, #240]	; (80069b8 <HAL_ADC_Start_DMA+0x1cc>)
 80068c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ce:	4a3b      	ldr	r2, [pc, #236]	; (80069bc <HAL_ADC_Start_DMA+0x1d0>)
 80068d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <HAL_ADC_Start_DMA+0x1d4>)
 80068d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80068e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80068f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006902:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	334c      	adds	r3, #76	; 0x4c
 800690e:	4619      	mov	r1, r3
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f000 fcda 	bl	80072cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2b00      	cmp	r3, #0
 8006922:	d12a      	bne.n	800697a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <HAL_ADC_Start_DMA+0x1d8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d015      	beq.n	800695a <HAL_ADC_Start_DMA+0x16e>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <HAL_ADC_Start_DMA+0x1dc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d105      	bne.n	8006944 <HAL_ADC_Start_DMA+0x158>
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <HAL_ADC_Start_DMA+0x1c8>)
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 031f 	and.w	r3, r3, #31
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_ADC_Start_DMA+0x1e0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d129      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
 800694e:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <HAL_ADC_Start_DMA+0x1c8>)
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d823      	bhi.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d11c      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006976:	609a      	str	r2, [r3, #8]
 8006978:	e013      	b.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a11      	ldr	r2, [pc, #68]	; (80069c4 <HAL_ADC_Start_DMA+0x1d8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10e      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d107      	bne.n	80069a2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80069a0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000034 	.word	0x20000034
 80069b0:	431bde83 	.word	0x431bde83
 80069b4:	40012300 	.word	0x40012300
 80069b8:	08006e49 	.word	0x08006e49
 80069bc:	08006f03 	.word	0x08006f03
 80069c0:	08006f1f 	.word	0x08006f1f
 80069c4:	40012000 	.word	0x40012000
 80069c8:	40012100 	.word	0x40012100
 80069cc:	40012200 	.word	0x40012200

080069d0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_ADC_ConfigChannel+0x1c>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e105      	b.n	8006c34 <HAL_ADC_ConfigChannel+0x228>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b09      	cmp	r3, #9
 8006a36:	d925      	bls.n	8006a84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68d9      	ldr	r1, [r3, #12]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	4613      	mov	r3, r2
 8006a48:	005b      	lsls	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3b1e      	subs	r3, #30
 8006a4e:	2207      	movs	r2, #7
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	43da      	mvns	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	400a      	ands	r2, r1
 8006a5c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68d9      	ldr	r1, [r3, #12]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4618      	mov	r0, r3
 8006a70:	4603      	mov	r3, r0
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	4403      	add	r3, r0
 8006a76:	3b1e      	subs	r3, #30
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	e022      	b.n	8006aca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6919      	ldr	r1, [r3, #16]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	4613      	mov	r3, r2
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	4413      	add	r3, r2
 8006a98:	2207      	movs	r2, #7
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43da      	mvns	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6919      	ldr	r1, [r3, #16]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4618      	mov	r0, r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	4403      	add	r3, r0
 8006ac0:	409a      	lsls	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d824      	bhi.n	8006b1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3b05      	subs	r3, #5
 8006ae4:	221f      	movs	r2, #31
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43da      	mvns	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	400a      	ands	r2, r1
 8006af2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	4618      	mov	r0, r3
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	3b05      	subs	r3, #5
 8006b0e:	fa00 f203 	lsl.w	r2, r0, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	635a      	str	r2, [r3, #52]	; 0x34
 8006b1a:	e04c      	b.n	8006bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b0c      	cmp	r3, #12
 8006b22:	d824      	bhi.n	8006b6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685a      	ldr	r2, [r3, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	3b23      	subs	r3, #35	; 0x23
 8006b36:	221f      	movs	r2, #31
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	43da      	mvns	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	400a      	ands	r2, r1
 8006b44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4618      	mov	r0, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3b23      	subs	r3, #35	; 0x23
 8006b60:	fa00 f203 	lsl.w	r2, r0, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b6c:	e023      	b.n	8006bb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3b41      	subs	r3, #65	; 0x41
 8006b80:	221f      	movs	r2, #31
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43da      	mvns	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	400a      	ands	r2, r1
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3b41      	subs	r3, #65	; 0x41
 8006baa:	fa00 f203 	lsl.w	r2, r0, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_ADC_ConfigChannel+0x234>)
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <HAL_ADC_ConfigChannel+0x238>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d109      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x1cc>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b12      	cmp	r3, #18
 8006bca:	d105      	bne.n	8006bd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a19      	ldr	r2, [pc, #100]	; (8006c44 <HAL_ADC_ConfigChannel+0x238>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d123      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x21e>
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d003      	beq.n	8006bf2 <HAL_ADC_ConfigChannel+0x1e6>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b11      	cmp	r3, #17
 8006bf0:	d11b      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b10      	cmp	r3, #16
 8006c04:	d111      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <HAL_ADC_ConfigChannel+0x23c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a10      	ldr	r2, [pc, #64]	; (8006c4c <HAL_ADC_ConfigChannel+0x240>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	0c9a      	lsrs	r2, r3, #18
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c1c:	e002      	b.n	8006c24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1f9      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012300 	.word	0x40012300
 8006c44:	40012000 	.word	0x40012000
 8006c48:	20000034 	.word	0x20000034
 8006c4c:	431bde83 	.word	0x431bde83

08006c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c58:	4b79      	ldr	r3, [pc, #484]	; (8006e40 <ADC_Init+0x1f0>)
 8006c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	431a      	orrs	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6859      	ldr	r1, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	021a      	lsls	r2, r3, #8
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6859      	ldr	r1, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce2:	4a58      	ldr	r2, [pc, #352]	; (8006e44 <ADC_Init+0x1f4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d022      	beq.n	8006d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6899      	ldr	r1, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6899      	ldr	r1, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]
 8006d2c:	e00f      	b.n	8006d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0202 	bic.w	r2, r2, #2
 8006d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6899      	ldr	r1, [r3, #8]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7e1b      	ldrb	r3, [r3, #24]
 8006d68:	005a      	lsls	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01b      	beq.n	8006db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	3b01      	subs	r3, #1
 8006da8:	035a      	lsls	r2, r3, #13
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	e007      	b.n	8006dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	051a      	lsls	r2, r3, #20
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6899      	ldr	r1, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006e06:	025a      	lsls	r2, r3, #9
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6899      	ldr	r1, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	029a      	lsls	r2, r3, #10
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	609a      	str	r2, [r3, #8]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	40012300 	.word	0x40012300
 8006e44:	0f000001 	.word	0x0f000001

08006e48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d13c      	bne.n	8006edc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d12b      	bne.n	8006ed4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d127      	bne.n	8006ed4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d119      	bne.n	8006ed4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 0220 	bic.w	r2, r2, #32
 8006eae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d105      	bne.n	8006ed4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	f043 0201 	orr.w	r2, r3, #1
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fd7b 	bl	80069d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006eda:	e00e      	b.n	8006efa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f003 0310 	and.w	r3, r3, #16
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f7ff fd85 	bl	80069f8 <HAL_ADC_ErrorCallback>
}
 8006eee:	e004      	b.n	8006efa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b084      	sub	sp, #16
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7ff fd67 	bl	80069e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2240      	movs	r2, #64	; 0x40
 8006f30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f043 0204 	orr.w	r2, r3, #4
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff fd5a 	bl	80069f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f003 0307 	and.w	r3, r3, #7
 8006f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <__NVIC_SetPriorityGrouping+0x44>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f68:	4013      	ands	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f7e:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <__NVIC_SetPriorityGrouping+0x44>)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	60d3      	str	r3, [r2, #12]
}
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	e000ed00 	.word	0xe000ed00

08006f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f98:	4b04      	ldr	r3, [pc, #16]	; (8006fac <__NVIC_GetPriorityGrouping+0x18>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	f003 0307 	and.w	r3, r3, #7
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	db0b      	blt.n	8006fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	f003 021f 	and.w	r2, r3, #31
 8006fc8:	4907      	ldr	r1, [pc, #28]	; (8006fe8 <__NVIC_EnableIRQ+0x38>)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8006fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000e100 	.word	0xe000e100

08006fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	db0a      	blt.n	8007016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	b2da      	uxtb	r2, r3
 8007004:	490c      	ldr	r1, [pc, #48]	; (8007038 <__NVIC_SetPriority+0x4c>)
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	0112      	lsls	r2, r2, #4
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	440b      	add	r3, r1
 8007010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007014:	e00a      	b.n	800702c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	b2da      	uxtb	r2, r3
 800701a:	4908      	ldr	r1, [pc, #32]	; (800703c <__NVIC_SetPriority+0x50>)
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	3b04      	subs	r3, #4
 8007024:	0112      	lsls	r2, r2, #4
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	440b      	add	r3, r1
 800702a:	761a      	strb	r2, [r3, #24]
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	e000e100 	.word	0xe000e100
 800703c:	e000ed00 	.word	0xe000ed00

08007040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007040:	b480      	push	{r7}
 8007042:	b089      	sub	sp, #36	; 0x24
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f1c3 0307 	rsb	r3, r3, #7
 800705a:	2b04      	cmp	r3, #4
 800705c:	bf28      	it	cs
 800705e:	2304      	movcs	r3, #4
 8007060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	3304      	adds	r3, #4
 8007066:	2b06      	cmp	r3, #6
 8007068:	d902      	bls.n	8007070 <NVIC_EncodePriority+0x30>
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	3b03      	subs	r3, #3
 800706e:	e000      	b.n	8007072 <NVIC_EncodePriority+0x32>
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007074:	f04f 32ff 	mov.w	r2, #4294967295
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	43da      	mvns	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	401a      	ands	r2, r3
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007088:	f04f 31ff 	mov.w	r1, #4294967295
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	fa01 f303 	lsl.w	r3, r1, r3
 8007092:	43d9      	mvns	r1, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007098:	4313      	orrs	r3, r2
         );
}
 800709a:	4618      	mov	r0, r3
 800709c:	3724      	adds	r7, #36	; 0x24
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070b8:	d301      	bcc.n	80070be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070ba:	2301      	movs	r3, #1
 80070bc:	e00f      	b.n	80070de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070be:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <SysTick_Config+0x40>)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070c6:	210f      	movs	r1, #15
 80070c8:	f04f 30ff 	mov.w	r0, #4294967295
 80070cc:	f7ff ff8e 	bl	8006fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <SysTick_Config+0x40>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070d6:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <SysTick_Config+0x40>)
 80070d8:	2207      	movs	r2, #7
 80070da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	e000e010 	.word	0xe000e010

080070ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f7ff ff29 	bl	8006f4c <__NVIC_SetPriorityGrouping>
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	4603      	mov	r3, r0
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007114:	f7ff ff3e 	bl	8006f94 <__NVIC_GetPriorityGrouping>
 8007118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	6978      	ldr	r0, [r7, #20]
 8007120:	f7ff ff8e 	bl	8007040 <NVIC_EncodePriority>
 8007124:	4602      	mov	r2, r0
 8007126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712a:	4611      	mov	r1, r2
 800712c:	4618      	mov	r0, r3
 800712e:	f7ff ff5d 	bl	8006fec <__NVIC_SetPriority>
}
 8007132:	bf00      	nop
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	4603      	mov	r3, r0
 8007142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ff31 	bl	8006fb0 <__NVIC_EnableIRQ>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff ffa2 	bl	80070a8 <SysTick_Config>
 8007164:	4603      	mov	r3, r0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800717c:	f7ff fac4 	bl	8006708 <HAL_GetTick>
 8007180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e099      	b.n	80072c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ac:	e00f      	b.n	80071ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80071ae:	f7ff faab 	bl	8006708 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	d908      	bls.n	80071ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2203      	movs	r2, #3
 80071c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e078      	b.n	80072c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e8      	bne.n	80071ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <HAL_DMA_Init+0x158>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80071fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	2b04      	cmp	r3, #4
 8007226:	d107      	bne.n	8007238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007230:	4313      	orrs	r3, r2
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0307 	bic.w	r3, r3, #7
 800724e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b04      	cmp	r3, #4
 8007260:	d117      	bne.n	8007292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00e      	beq.n	8007292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa6f 	bl	8007758 <DMA_CheckFifoParam>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d008      	beq.n	8007292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2240      	movs	r2, #64	; 0x40
 8007284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800728e:	2301      	movs	r3, #1
 8007290:	e016      	b.n	80072c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa26 	bl	80076ec <DMA_CalcBaseAndBitshift>
 80072a0:	4603      	mov	r3, r0
 80072a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a8:	223f      	movs	r2, #63	; 0x3f
 80072aa:	409a      	lsls	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	f010803f 	.word	0xf010803f

080072cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_DMA_Start_IT+0x26>
 80072ee:	2302      	movs	r3, #2
 80072f0:	e040      	b.n	8007374 <HAL_DMA_Start_IT+0xa8>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d12f      	bne.n	8007366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f9b8 	bl	8007690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007324:	223f      	movs	r2, #63	; 0x3f
 8007326:	409a      	lsls	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0216 	orr.w	r2, r2, #22
 800733a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0208 	orr.w	r2, r2, #8
 8007352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	e005      	b.n	8007372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800736e:	2302      	movs	r3, #2
 8007370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007372:	7dfb      	ldrb	r3, [r7, #23]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007388:	4b92      	ldr	r3, [pc, #584]	; (80075d4 <HAL_DMA_IRQHandler+0x258>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a92      	ldr	r2, [pc, #584]	; (80075d8 <HAL_DMA_IRQHandler+0x25c>)
 800738e:	fba2 2303 	umull	r2, r3, r2, r3
 8007392:	0a9b      	lsrs	r3, r3, #10
 8007394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a6:	2208      	movs	r2, #8
 80073a8:	409a      	lsls	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d01a      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d013      	beq.n	80073e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0204 	bic.w	r2, r2, #4
 80073ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	2208      	movs	r2, #8
 80073d6:	409a      	lsls	r2, r3
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e0:	f043 0201 	orr.w	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ec:	2201      	movs	r2, #1
 80073ee:	409a      	lsls	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d012      	beq.n	800741e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	695b      	ldr	r3, [r3, #20]
 80073fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00b      	beq.n	800741e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740a:	2201      	movs	r2, #1
 800740c:	409a      	lsls	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007416:	f043 0202 	orr.w	r2, r3, #2
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	2204      	movs	r2, #4
 8007424:	409a      	lsls	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	d012      	beq.n	8007454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0302 	and.w	r3, r3, #2
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007440:	2204      	movs	r2, #4
 8007442:	409a      	lsls	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f043 0204 	orr.w	r2, r3, #4
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007458:	2210      	movs	r2, #16
 800745a:	409a      	lsls	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d043      	beq.n	80074ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03c      	beq.n	80074ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007476:	2210      	movs	r2, #16
 8007478:	409a      	lsls	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d018      	beq.n	80074be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d108      	bne.n	80074ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d024      	beq.n	80074ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
 80074aa:	e01f      	b.n	80074ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01b      	beq.n	80074ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	e016      	b.n	80074ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0208 	bic.w	r2, r2, #8
 80074da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	2220      	movs	r2, #32
 80074f2:	409a      	lsls	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 808e 	beq.w	800761a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0310 	and.w	r3, r3, #16
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 8086 	beq.w	800761a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	2220      	movs	r2, #32
 8007514:	409a      	lsls	r2, r3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b05      	cmp	r3, #5
 8007524:	d136      	bne.n	8007594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0216 	bic.w	r2, r2, #22
 8007534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	695a      	ldr	r2, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d103      	bne.n	8007556 <HAL_DMA_IRQHandler+0x1da>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f022 0208 	bic.w	r2, r2, #8
 8007564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800756a:	223f      	movs	r2, #63	; 0x3f
 800756c:	409a      	lsls	r2, r3
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007586:	2b00      	cmp	r3, #0
 8007588:	d07d      	beq.n	8007686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
        }
        return;
 8007592:	e078      	b.n	8007686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01c      	beq.n	80075dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d108      	bne.n	80075c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d030      	beq.n	800761a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
 80075c0:	e02b      	b.n	800761a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d027      	beq.n	800761a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
 80075d2:	e022      	b.n	800761a <HAL_DMA_IRQHandler+0x29e>
 80075d4:	20000034 	.word	0x20000034
 80075d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10f      	bne.n	800760a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0210 	bic.w	r2, r2, #16
 80075f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	2b00      	cmp	r3, #0
 8007620:	d032      	beq.n	8007688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d022      	beq.n	8007674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2205      	movs	r2, #5
 8007632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0201 	bic.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	3301      	adds	r3, #1
 800764a:	60bb      	str	r3, [r7, #8]
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	429a      	cmp	r2, r3
 8007650:	d307      	bcc.n	8007662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f2      	bne.n	8007646 <HAL_DMA_IRQHandler+0x2ca>
 8007660:	e000      	b.n	8007664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007662:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
 8007684:	e000      	b.n	8007688 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007686:	bf00      	nop
    }
  }
}
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop

08007690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80076ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d108      	bne.n	80076d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80076ce:	e007      	b.n	80076e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	3b10      	subs	r3, #16
 80076fc:	4a14      	ldr	r2, [pc, #80]	; (8007750 <DMA_CalcBaseAndBitshift+0x64>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	091b      	lsrs	r3, r3, #4
 8007704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <DMA_CalcBaseAndBitshift+0x68>)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2b03      	cmp	r3, #3
 8007718:	d909      	bls.n	800772e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007722:	f023 0303 	bic.w	r3, r3, #3
 8007726:	1d1a      	adds	r2, r3, #4
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	659a      	str	r2, [r3, #88]	; 0x58
 800772c:	e007      	b.n	800773e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007742:	4618      	mov	r0, r3
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	aaaaaaab 	.word	0xaaaaaaab
 8007754:	08010784 	.word	0x08010784

08007758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11f      	bne.n	80077b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d855      	bhi.n	8007824 <DMA_CheckFifoParam+0xcc>
 8007778:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <DMA_CheckFifoParam+0x28>)
 800777a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777e:	bf00      	nop
 8007780:	08007791 	.word	0x08007791
 8007784:	080077a3 	.word	0x080077a3
 8007788:	08007791 	.word	0x08007791
 800778c:	08007825 	.word	0x08007825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d045      	beq.n	8007828 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077a0:	e042      	b.n	8007828 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077aa:	d13f      	bne.n	800782c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b0:	e03c      	b.n	800782c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077ba:	d121      	bne.n	8007800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d836      	bhi.n	8007830 <DMA_CheckFifoParam+0xd8>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <DMA_CheckFifoParam+0x70>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077df 	.word	0x080077df
 80077d0:	080077d9 	.word	0x080077d9
 80077d4:	080077f1 	.word	0x080077f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e02f      	b.n	800783e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d024      	beq.n	8007834 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077ee:	e021      	b.n	8007834 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80077f8:	d11e      	bne.n	8007838 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80077fe:	e01b      	b.n	8007838 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d902      	bls.n	800780c <DMA_CheckFifoParam+0xb4>
 8007806:	2b03      	cmp	r3, #3
 8007808:	d003      	beq.n	8007812 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800780a:	e018      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	73fb      	strb	r3, [r7, #15]
      break;
 8007810:	e015      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00e      	beq.n	800783c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
      break;
 8007822:	e00b      	b.n	800783c <DMA_CheckFifoParam+0xe4>
      break;
 8007824:	bf00      	nop
 8007826:	e00a      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 8007828:	bf00      	nop
 800782a:	e008      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 800782c:	bf00      	nop
 800782e:	e006      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 8007830:	bf00      	nop
 8007832:	e004      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 8007834:	bf00      	nop
 8007836:	e002      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;   
 8007838:	bf00      	nop
 800783a:	e000      	b.n	800783e <DMA_CheckFifoParam+0xe6>
      break;
 800783c:	bf00      	nop
    }
  } 
  
  return status; 
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007856:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <HAL_FLASH_Unlock+0x38>)
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	da0b      	bge.n	8007876 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <HAL_FLASH_Unlock+0x38>)
 8007860:	4a09      	ldr	r2, [pc, #36]	; (8007888 <HAL_FLASH_Unlock+0x3c>)
 8007862:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <HAL_FLASH_Unlock+0x38>)
 8007866:	4a09      	ldr	r2, [pc, #36]	; (800788c <HAL_FLASH_Unlock+0x40>)
 8007868:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800786a:	4b06      	ldr	r3, [pc, #24]	; (8007884 <HAL_FLASH_Unlock+0x38>)
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da01      	bge.n	8007876 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007876:	79fb      	ldrb	r3, [r7, #7]
}
 8007878:	4618      	mov	r0, r3
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40023c00 	.word	0x40023c00
 8007888:	45670123 	.word	0x45670123
 800788c:	cdef89ab 	.word	0xcdef89ab

08007890 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007894:	4b05      	ldr	r3, [pc, #20]	; (80078ac <HAL_FLASH_Lock+0x1c>)
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	4a04      	ldr	r2, [pc, #16]	; (80078ac <HAL_FLASH_Lock+0x1c>)
 800789a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800789e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr
 80078ac:	40023c00 	.word	0x40023c00

080078b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <FLASH_WaitForLastOperation+0x78>)
 80078be:	2200      	movs	r2, #0
 80078c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80078c2:	f7fe ff21 	bl	8006708 <HAL_GetTick>
 80078c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80078c8:	e010      	b.n	80078ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d00c      	beq.n	80078ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <FLASH_WaitForLastOperation+0x38>
 80078d8:	f7fe ff16 	bl	8006708 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d201      	bcs.n	80078ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e019      	b.n	8007920 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80078ec:	4b0f      	ldr	r3, [pc, #60]	; (800792c <FLASH_WaitForLastOperation+0x7c>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e8      	bne.n	80078ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80078f8:	4b0c      	ldr	r3, [pc, #48]	; (800792c <FLASH_WaitForLastOperation+0x7c>)
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <FLASH_WaitForLastOperation+0x7c>)
 8007906:	2201      	movs	r2, #1
 8007908:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800790a:	4b08      	ldr	r3, [pc, #32]	; (800792c <FLASH_WaitForLastOperation+0x7c>)
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007916:	f000 f80b 	bl	8007930 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e000      	b.n	8007920 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
  
}  
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20016458 	.word	0x20016458
 800792c:	40023c00 	.word	0x40023c00

08007930 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007934:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0310 	and.w	r3, r3, #16
 800793c:	2b00      	cmp	r3, #0
 800793e:	d008      	beq.n	8007952 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007940:	4b25      	ldr	r3, [pc, #148]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f043 0310 	orr.w	r3, r3, #16
 8007948:	4a23      	ldr	r2, [pc, #140]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 800794a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800794c:	4b21      	ldr	r3, [pc, #132]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 800794e:	2210      	movs	r2, #16
 8007950:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007952:	4b20      	ldr	r3, [pc, #128]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d008      	beq.n	8007970 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800795e:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	f043 0308 	orr.w	r3, r3, #8
 8007966:	4a1c      	ldr	r2, [pc, #112]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 8007968:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 800796c:	2220      	movs	r2, #32
 800796e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007970:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800797c:	4b16      	ldr	r3, [pc, #88]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	f043 0304 	orr.w	r3, r3, #4
 8007984:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 8007986:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007988:	4b12      	ldr	r3, [pc, #72]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 800798a:	2240      	movs	r2, #64	; 0x40
 800798c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007996:	2b00      	cmp	r3, #0
 8007998:	d008      	beq.n	80079ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800799a:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	4a0d      	ldr	r2, [pc, #52]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 80079a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80079a6:	4b0b      	ldr	r3, [pc, #44]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 80079a8:	2280      	movs	r2, #128	; 0x80
 80079aa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80079ac:	4b09      	ldr	r3, [pc, #36]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	f003 0302 	and.w	r3, r3, #2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d008      	beq.n	80079ca <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80079b8:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f043 0320 	orr.w	r3, r3, #32
 80079c0:	4a05      	ldr	r2, [pc, #20]	; (80079d8 <FLASH_SetErrorCode+0xa8>)
 80079c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80079c4:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <FLASH_SetErrorCode+0xa4>)
 80079c6:	2202      	movs	r2, #2
 80079c8:	60da      	str	r2, [r3, #12]
  }
}
 80079ca:	bf00      	nop
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	40023c00 	.word	0x40023c00
 80079d8:	20016458 	.word	0x20016458

080079dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079ee:	4b31      	ldr	r3, [pc, #196]	; (8007ab4 <HAL_FLASHEx_Erase+0xd8>)
 80079f0:	7e1b      	ldrb	r3, [r3, #24]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_FLASHEx_Erase+0x1e>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e058      	b.n	8007aac <HAL_FLASHEx_Erase+0xd0>
 80079fa:	4b2e      	ldr	r3, [pc, #184]	; (8007ab4 <HAL_FLASHEx_Erase+0xd8>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a00:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a04:	f7ff ff54 	bl	80078b0 <FLASH_WaitForLastOperation>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d148      	bne.n	8007aa4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d115      	bne.n	8007a4e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f000 f844 	bl	8007abc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a38:	f7ff ff3a 	bl	80078b0 <FLASH_WaitForLastOperation>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007a40:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <HAL_FLASHEx_Erase+0xdc>)
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	4a1c      	ldr	r2, [pc, #112]	; (8007ab8 <HAL_FLASHEx_Erase+0xdc>)
 8007a46:	f023 0304 	bic.w	r3, r3, #4
 8007a4a:	6113      	str	r3, [r2, #16]
 8007a4c:	e028      	b.n	8007aa0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	60bb      	str	r3, [r7, #8]
 8007a54:	e01c      	b.n	8007a90 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	68b8      	ldr	r0, [r7, #8]
 8007a60:	f000 f850 	bl	8007b04 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a64:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a68:	f7ff ff22 	bl	80078b0 <FLASH_WaitForLastOperation>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <HAL_FLASHEx_Erase+0xdc>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	4a10      	ldr	r2, [pc, #64]	; (8007ab8 <HAL_FLASHEx_Erase+0xdc>)
 8007a76:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007a7a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	601a      	str	r2, [r3, #0]
          break;
 8007a88:	e00a      	b.n	8007aa0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d3da      	bcc.n	8007a56 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007aa0:	f000 f878 	bl	8007b94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007aa4:	4b03      	ldr	r3, [pc, #12]	; (8007ab4 <HAL_FLASHEx_Erase+0xd8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	761a      	strb	r2, [r3, #24]

  return status;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20016458 	.word	0x20016458
 8007ab8:	40023c00 	.word	0x40023c00

08007abc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <FLASH_MassErase+0x44>)
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	4a0c      	ldr	r2, [pc, #48]	; (8007b00 <FLASH_MassErase+0x44>)
 8007ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007ad4:	4b0a      	ldr	r3, [pc, #40]	; (8007b00 <FLASH_MassErase+0x44>)
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4a09      	ldr	r2, [pc, #36]	; (8007b00 <FLASH_MassErase+0x44>)
 8007ada:	f043 0304 	orr.w	r3, r3, #4
 8007ade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007ae0:	4b07      	ldr	r3, [pc, #28]	; (8007b00 <FLASH_MassErase+0x44>)
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	4a05      	ldr	r2, [pc, #20]	; (8007b00 <FLASH_MassErase+0x44>)
 8007aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af0:	6113      	str	r3, [r2, #16]
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	40023c00 	.word	0x40023c00

08007b04 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d102      	bne.n	8007b20 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e010      	b.n	8007b42 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d103      	bne.n	8007b2e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	e009      	b.n	8007b42 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d103      	bne.n	8007b3c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e002      	b.n	8007b42 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007b3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007b40:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	4a12      	ldr	r2, [pc, #72]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007b4e:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	490f      	ldr	r1, [pc, #60]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	4a0c      	ldr	r2, [pc, #48]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007b64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007b66:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4a07      	ldr	r2, [pc, #28]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b72:	f043 0302 	orr.w	r3, r3, #2
 8007b76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	4a04      	ldr	r2, [pc, #16]	; (8007b90 <FLASH_Erase_Sector+0x8c>)
 8007b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b82:	6113      	str	r3, [r2, #16]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40023c00 	.word	0x40023c00

08007b94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d017      	beq.n	8007bd4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007baa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bc6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007bc8:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bd2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007bd4:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007be0:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a0d      	ldr	r2, [pc, #52]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bea:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0a      	ldr	r2, [pc, #40]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c02:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c04:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a04      	ldr	r2, [pc, #16]	; (8007c1c <FLASH_FlushCaches+0x88>)
 8007c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007c0e:	6013      	str	r3, [r2, #0]
  }
}
 8007c10:	bf00      	nop
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	40023c00 	.word	0x40023c00

08007c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c36:	2300      	movs	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
 8007c3a:	e16b      	b.n	8007f14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	f040 815a 	bne.w	8007f0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d00b      	beq.n	8007c7a <HAL_GPIO_Init+0x5a>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d007      	beq.n	8007c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c6e:	2b11      	cmp	r3, #17
 8007c70:	d003      	beq.n	8007c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2b12      	cmp	r3, #18
 8007c78:	d130      	bne.n	8007cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	005b      	lsls	r3, r3, #1
 8007c84:	2203      	movs	r2, #3
 8007c86:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8a:	43db      	mvns	r3, r3
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	69ba      	ldr	r2, [r7, #24]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69ba      	ldr	r2, [r7, #24]
 8007ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	091b      	lsrs	r3, r3, #4
 8007cc6:	f003 0201 	and.w	r2, r3, #1
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	43db      	mvns	r3, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d003      	beq.n	8007d1c <HAL_GPIO_Init+0xfc>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	2b12      	cmp	r3, #18
 8007d1a:	d123      	bne.n	8007d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	08da      	lsrs	r2, r3, #3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3208      	adds	r2, #8
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	220f      	movs	r2, #15
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	43db      	mvns	r3, r3
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	08da      	lsrs	r2, r3, #3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3208      	adds	r2, #8
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	2203      	movs	r2, #3
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	43db      	mvns	r3, r3
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f003 0203 	and.w	r2, r3, #3
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 80b4 	beq.w	8007f0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	4b5f      	ldr	r3, [pc, #380]	; (8007f28 <HAL_GPIO_Init+0x308>)
 8007dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dae:	4a5e      	ldr	r2, [pc, #376]	; (8007f28 <HAL_GPIO_Init+0x308>)
 8007db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db4:	6453      	str	r3, [r2, #68]	; 0x44
 8007db6:	4b5c      	ldr	r3, [pc, #368]	; (8007f28 <HAL_GPIO_Init+0x308>)
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007dc2:	4a5a      	ldr	r2, [pc, #360]	; (8007f2c <HAL_GPIO_Init+0x30c>)
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	089b      	lsrs	r3, r3, #2
 8007dc8:	3302      	adds	r3, #2
 8007dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	f003 0303 	and.w	r3, r3, #3
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	220f      	movs	r2, #15
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a51      	ldr	r2, [pc, #324]	; (8007f30 <HAL_GPIO_Init+0x310>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d02b      	beq.n	8007e46 <HAL_GPIO_Init+0x226>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a50      	ldr	r2, [pc, #320]	; (8007f34 <HAL_GPIO_Init+0x314>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d025      	beq.n	8007e42 <HAL_GPIO_Init+0x222>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a4f      	ldr	r2, [pc, #316]	; (8007f38 <HAL_GPIO_Init+0x318>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01f      	beq.n	8007e3e <HAL_GPIO_Init+0x21e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a4e      	ldr	r2, [pc, #312]	; (8007f3c <HAL_GPIO_Init+0x31c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d019      	beq.n	8007e3a <HAL_GPIO_Init+0x21a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a4d      	ldr	r2, [pc, #308]	; (8007f40 <HAL_GPIO_Init+0x320>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d013      	beq.n	8007e36 <HAL_GPIO_Init+0x216>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a4c      	ldr	r2, [pc, #304]	; (8007f44 <HAL_GPIO_Init+0x324>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00d      	beq.n	8007e32 <HAL_GPIO_Init+0x212>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a4b      	ldr	r2, [pc, #300]	; (8007f48 <HAL_GPIO_Init+0x328>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <HAL_GPIO_Init+0x20e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a4a      	ldr	r2, [pc, #296]	; (8007f4c <HAL_GPIO_Init+0x32c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d101      	bne.n	8007e2a <HAL_GPIO_Init+0x20a>
 8007e26:	2307      	movs	r3, #7
 8007e28:	e00e      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e2a:	2308      	movs	r3, #8
 8007e2c:	e00c      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e2e:	2306      	movs	r3, #6
 8007e30:	e00a      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e32:	2305      	movs	r3, #5
 8007e34:	e008      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e36:	2304      	movs	r3, #4
 8007e38:	e006      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e004      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e002      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_GPIO_Init+0x228>
 8007e46:	2300      	movs	r3, #0
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	f002 0203 	and.w	r2, r2, #3
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	4093      	lsls	r3, r2
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e58:	4934      	ldr	r1, [pc, #208]	; (8007f2c <HAL_GPIO_Init+0x30c>)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	089b      	lsrs	r3, r3, #2
 8007e5e:	3302      	adds	r3, #2
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e66:	4b3a      	ldr	r3, [pc, #232]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e8a:	4a31      	ldr	r2, [pc, #196]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e90:	4b2f      	ldr	r3, [pc, #188]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007eb4:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007eba:	4b25      	ldr	r3, [pc, #148]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ede:	4a1c      	ldr	r2, [pc, #112]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ee4:	4b1a      	ldr	r3, [pc, #104]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f08:	4a11      	ldr	r2, [pc, #68]	; (8007f50 <HAL_GPIO_Init+0x330>)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3301      	adds	r3, #1
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	2b0f      	cmp	r3, #15
 8007f18:	f67f ae90 	bls.w	8007c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	3724      	adds	r7, #36	; 0x24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	40013800 	.word	0x40013800
 8007f30:	40020000 	.word	0x40020000
 8007f34:	40020400 	.word	0x40020400
 8007f38:	40020800 	.word	0x40020800
 8007f3c:	40020c00 	.word	0x40020c00
 8007f40:	40021000 	.word	0x40021000
 8007f44:	40021400 	.word	0x40021400
 8007f48:	40021800 	.word	0x40021800
 8007f4c:	40021c00 	.word	0x40021c00
 8007f50:	40013c00 	.word	0x40013c00

08007f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691a      	ldr	r2, [r3, #16]
 8007f64:	887b      	ldrh	r3, [r7, #2]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	73fb      	strb	r3, [r7, #15]
 8007f70:	e001      	b.n	8007f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f72:	2300      	movs	r3, #0
 8007f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	807b      	strh	r3, [r7, #2]
 8007f90:	4613      	mov	r3, r2
 8007f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f94:	787b      	ldrb	r3, [r7, #1]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f9a:	887a      	ldrh	r2, [r7, #2]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fa0:	e003      	b.n	8007faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fa2:	887b      	ldrh	r3, [r7, #2]
 8007fa4:	041a      	lsls	r2, r3, #16
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	619a      	str	r2, [r3, #24]
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
	...

08007fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e11f      	b.n	800820a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d106      	bne.n	8007fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7fd ff96 	bl	8005f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2224      	movs	r2, #36	; 0x24
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0201 	bic.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800800a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800801a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800801c:	f000 fd18 	bl	8008a50 <HAL_RCC_GetPCLK1Freq>
 8008020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	4a7b      	ldr	r2, [pc, #492]	; (8008214 <HAL_I2C_Init+0x25c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d807      	bhi.n	800803c <HAL_I2C_Init+0x84>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a7a      	ldr	r2, [pc, #488]	; (8008218 <HAL_I2C_Init+0x260>)
 8008030:	4293      	cmp	r3, r2
 8008032:	bf94      	ite	ls
 8008034:	2301      	movls	r3, #1
 8008036:	2300      	movhi	r3, #0
 8008038:	b2db      	uxtb	r3, r3
 800803a:	e006      	b.n	800804a <HAL_I2C_Init+0x92>
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	4a77      	ldr	r2, [pc, #476]	; (800821c <HAL_I2C_Init+0x264>)
 8008040:	4293      	cmp	r3, r2
 8008042:	bf94      	ite	ls
 8008044:	2301      	movls	r3, #1
 8008046:	2300      	movhi	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e0db      	b.n	800820a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4a72      	ldr	r2, [pc, #456]	; (8008220 <HAL_I2C_Init+0x268>)
 8008056:	fba2 2303 	umull	r2, r3, r2, r3
 800805a:	0c9b      	lsrs	r3, r3, #18
 800805c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	430a      	orrs	r2, r1
 8008070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	4a64      	ldr	r2, [pc, #400]	; (8008214 <HAL_I2C_Init+0x25c>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d802      	bhi.n	800808c <HAL_I2C_Init+0xd4>
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	3301      	adds	r3, #1
 800808a:	e009      	b.n	80080a0 <HAL_I2C_Init+0xe8>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	4a63      	ldr	r2, [pc, #396]	; (8008224 <HAL_I2C_Init+0x26c>)
 8008098:	fba2 2303 	umull	r2, r3, r2, r3
 800809c:	099b      	lsrs	r3, r3, #6
 800809e:	3301      	adds	r3, #1
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	6812      	ldr	r2, [r2, #0]
 80080a4:	430b      	orrs	r3, r1
 80080a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	4956      	ldr	r1, [pc, #344]	; (8008214 <HAL_I2C_Init+0x25c>)
 80080bc:	428b      	cmp	r3, r1
 80080be:	d80d      	bhi.n	80080dc <HAL_I2C_Init+0x124>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	1e59      	subs	r1, r3, #1
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80080ce:	3301      	adds	r3, #1
 80080d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	bf38      	it	cc
 80080d8:	2304      	movcc	r3, #4
 80080da:	e04f      	b.n	800817c <HAL_I2C_Init+0x1c4>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d111      	bne.n	8008108 <HAL_I2C_Init+0x150>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	1e58      	subs	r0, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6859      	ldr	r1, [r3, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	440b      	add	r3, r1
 80080f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80080f6:	3301      	adds	r3, #1
 80080f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bf0c      	ite	eq
 8008100:	2301      	moveq	r3, #1
 8008102:	2300      	movne	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	e012      	b.n	800812e <HAL_I2C_Init+0x176>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1e58      	subs	r0, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	440b      	add	r3, r1
 8008116:	0099      	lsls	r1, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	fbb0 f3f3 	udiv	r3, r0, r3
 800811e:	3301      	adds	r3, #1
 8008120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008124:	2b00      	cmp	r3, #0
 8008126:	bf0c      	ite	eq
 8008128:	2301      	moveq	r3, #1
 800812a:	2300      	movne	r3, #0
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <HAL_I2C_Init+0x17e>
 8008132:	2301      	movs	r3, #1
 8008134:	e022      	b.n	800817c <HAL_I2C_Init+0x1c4>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10e      	bne.n	800815c <HAL_I2C_Init+0x1a4>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1e58      	subs	r0, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	440b      	add	r3, r1
 800814c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008150:	3301      	adds	r3, #1
 8008152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815a:	e00f      	b.n	800817c <HAL_I2C_Init+0x1c4>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1e58      	subs	r0, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6859      	ldr	r1, [r3, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	0099      	lsls	r1, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008172:	3301      	adds	r3, #1
 8008174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008178:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800817c:	6879      	ldr	r1, [r7, #4]
 800817e:	6809      	ldr	r1, [r1, #0]
 8008180:	4313      	orrs	r3, r2
 8008182:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6911      	ldr	r1, [r2, #16]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	68d2      	ldr	r2, [r2, #12]
 80081b6:	4311      	orrs	r1, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	430b      	orrs	r3, r1
 80081be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	695a      	ldr	r2, [r3, #20]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	000186a0 	.word	0x000186a0
 8008218:	001e847f 	.word	0x001e847f
 800821c:	003d08ff 	.word	0x003d08ff
 8008220:	431bde83 	.word	0x431bde83
 8008224:	10624dd3 	.word	0x10624dd3

08008228 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e25b      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d075      	beq.n	8008332 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008246:	4ba3      	ldr	r3, [pc, #652]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f003 030c 	and.w	r3, r3, #12
 800824e:	2b04      	cmp	r3, #4
 8008250:	d00c      	beq.n	800826c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008252:	4ba0      	ldr	r3, [pc, #640]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800825a:	2b08      	cmp	r3, #8
 800825c:	d112      	bne.n	8008284 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800825e:	4b9d      	ldr	r3, [pc, #628]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800826a:	d10b      	bne.n	8008284 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800826c:	4b99      	ldr	r3, [pc, #612]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d05b      	beq.n	8008330 <HAL_RCC_OscConfig+0x108>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d157      	bne.n	8008330 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e236      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d106      	bne.n	800829c <HAL_RCC_OscConfig+0x74>
 800828e:	4b91      	ldr	r3, [pc, #580]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a90      	ldr	r2, [pc, #576]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e01d      	b.n	80082d8 <HAL_RCC_OscConfig+0xb0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCC_OscConfig+0x98>
 80082a6:	4b8b      	ldr	r3, [pc, #556]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a8a      	ldr	r2, [pc, #552]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	4b88      	ldr	r3, [pc, #544]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a87      	ldr	r2, [pc, #540]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	e00b      	b.n	80082d8 <HAL_RCC_OscConfig+0xb0>
 80082c0:	4b84      	ldr	r3, [pc, #528]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a83      	ldr	r2, [pc, #524]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	4b81      	ldr	r3, [pc, #516]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a80      	ldr	r2, [pc, #512]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d013      	beq.n	8008308 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fe fa12 	bl	8006708 <HAL_GetTick>
 80082e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082e6:	e008      	b.n	80082fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80082e8:	f7fe fa0e 	bl	8006708 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b64      	cmp	r3, #100	; 0x64
 80082f4:	d901      	bls.n	80082fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e1fb      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80082fa:	4b76      	ldr	r3, [pc, #472]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d0f0      	beq.n	80082e8 <HAL_RCC_OscConfig+0xc0>
 8008306:	e014      	b.n	8008332 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008308:	f7fe f9fe 	bl	8006708 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800830e:	e008      	b.n	8008322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008310:	f7fe f9fa 	bl	8006708 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b64      	cmp	r3, #100	; 0x64
 800831c:	d901      	bls.n	8008322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e1e7      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008322:	4b6c      	ldr	r3, [pc, #432]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1f0      	bne.n	8008310 <HAL_RCC_OscConfig+0xe8>
 800832e:	e000      	b.n	8008332 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d063      	beq.n	8008406 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800833e:	4b65      	ldr	r3, [pc, #404]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f003 030c 	and.w	r3, r3, #12
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00b      	beq.n	8008362 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800834a:	4b62      	ldr	r3, [pc, #392]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008352:	2b08      	cmp	r3, #8
 8008354:	d11c      	bne.n	8008390 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008356:	4b5f      	ldr	r3, [pc, #380]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d116      	bne.n	8008390 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008362:	4b5c      	ldr	r3, [pc, #368]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_RCC_OscConfig+0x152>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68db      	ldr	r3, [r3, #12]
 8008372:	2b01      	cmp	r3, #1
 8008374:	d001      	beq.n	800837a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e1bb      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800837a:	4b56      	ldr	r3, [pc, #344]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	00db      	lsls	r3, r3, #3
 8008388:	4952      	ldr	r1, [pc, #328]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800838a:	4313      	orrs	r3, r2
 800838c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800838e:	e03a      	b.n	8008406 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d020      	beq.n	80083da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008398:	4b4f      	ldr	r3, [pc, #316]	; (80084d8 <HAL_RCC_OscConfig+0x2b0>)
 800839a:	2201      	movs	r2, #1
 800839c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839e:	f7fe f9b3 	bl	8006708 <HAL_GetTick>
 80083a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083a6:	f7fe f9af 	bl	8006708 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e19c      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083b8:	4b46      	ldr	r3, [pc, #280]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d0f0      	beq.n	80083a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083c4:	4b43      	ldr	r3, [pc, #268]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4940      	ldr	r1, [pc, #256]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]
 80083d8:	e015      	b.n	8008406 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083da:	4b3f      	ldr	r3, [pc, #252]	; (80084d8 <HAL_RCC_OscConfig+0x2b0>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fe f992 	bl	8006708 <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083e8:	f7fe f98e 	bl	8006708 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e17b      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80083fa:	4b36      	ldr	r3, [pc, #216]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0302 	and.w	r3, r3, #2
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d030      	beq.n	8008474 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d016      	beq.n	8008448 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800841a:	4b30      	ldr	r3, [pc, #192]	; (80084dc <HAL_RCC_OscConfig+0x2b4>)
 800841c:	2201      	movs	r2, #1
 800841e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008420:	f7fe f972 	bl	8006708 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008428:	f7fe f96e 	bl	8006708 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e15b      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800843a:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800843c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCC_OscConfig+0x200>
 8008446:	e015      	b.n	8008474 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008448:	4b24      	ldr	r3, [pc, #144]	; (80084dc <HAL_RCC_OscConfig+0x2b4>)
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800844e:	f7fe f95b 	bl	8006708 <HAL_GetTick>
 8008452:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008454:	e008      	b.n	8008468 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008456:	f7fe f957 	bl	8006708 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	2b02      	cmp	r3, #2
 8008462:	d901      	bls.n	8008468 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e144      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008468:	4b1a      	ldr	r3, [pc, #104]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800846a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846c:	f003 0302 	and.w	r3, r3, #2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f0      	bne.n	8008456 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 80a0 	beq.w	80085c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008482:	2300      	movs	r3, #0
 8008484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008486:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10f      	bne.n	80084b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008492:	2300      	movs	r3, #0
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 8008498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849a:	4a0e      	ldr	r2, [pc, #56]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 800849c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a0:	6413      	str	r3, [r2, #64]	; 0x40
 80084a2:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <HAL_RCC_OscConfig+0x2ac>)
 80084a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084aa:	60bb      	str	r3, [r7, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084ae:	2301      	movs	r3, #1
 80084b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <HAL_RCC_OscConfig+0x2b8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d121      	bne.n	8008502 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084be:	4b08      	ldr	r3, [pc, #32]	; (80084e0 <HAL_RCC_OscConfig+0x2b8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a07      	ldr	r2, [pc, #28]	; (80084e0 <HAL_RCC_OscConfig+0x2b8>)
 80084c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084ca:	f7fe f91d 	bl	8006708 <HAL_GetTick>
 80084ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084d0:	e011      	b.n	80084f6 <HAL_RCC_OscConfig+0x2ce>
 80084d2:	bf00      	nop
 80084d4:	40023800 	.word	0x40023800
 80084d8:	42470000 	.word	0x42470000
 80084dc:	42470e80 	.word	0x42470e80
 80084e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084e4:	f7fe f910 	bl	8006708 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e0fd      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084f6:	4b81      	ldr	r3, [pc, #516]	; (80086fc <HAL_RCC_OscConfig+0x4d4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0f0      	beq.n	80084e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d106      	bne.n	8008518 <HAL_RCC_OscConfig+0x2f0>
 800850a:	4b7d      	ldr	r3, [pc, #500]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	4a7c      	ldr	r2, [pc, #496]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008510:	f043 0301 	orr.w	r3, r3, #1
 8008514:	6713      	str	r3, [r2, #112]	; 0x70
 8008516:	e01c      	b.n	8008552 <HAL_RCC_OscConfig+0x32a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b05      	cmp	r3, #5
 800851e:	d10c      	bne.n	800853a <HAL_RCC_OscConfig+0x312>
 8008520:	4b77      	ldr	r3, [pc, #476]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008524:	4a76      	ldr	r2, [pc, #472]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008526:	f043 0304 	orr.w	r3, r3, #4
 800852a:	6713      	str	r3, [r2, #112]	; 0x70
 800852c:	4b74      	ldr	r3, [pc, #464]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	4a73      	ldr	r2, [pc, #460]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008532:	f043 0301 	orr.w	r3, r3, #1
 8008536:	6713      	str	r3, [r2, #112]	; 0x70
 8008538:	e00b      	b.n	8008552 <HAL_RCC_OscConfig+0x32a>
 800853a:	4b71      	ldr	r3, [pc, #452]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 800853c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853e:	4a70      	ldr	r2, [pc, #448]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	6713      	str	r3, [r2, #112]	; 0x70
 8008546:	4b6e      	ldr	r3, [pc, #440]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800854a:	4a6d      	ldr	r2, [pc, #436]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 800854c:	f023 0304 	bic.w	r3, r3, #4
 8008550:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d015      	beq.n	8008586 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800855a:	f7fe f8d5 	bl	8006708 <HAL_GetTick>
 800855e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008560:	e00a      	b.n	8008578 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008562:	f7fe f8d1 	bl	8006708 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008570:	4293      	cmp	r3, r2
 8008572:	d901      	bls.n	8008578 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e0bc      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008578:	4b61      	ldr	r3, [pc, #388]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0ee      	beq.n	8008562 <HAL_RCC_OscConfig+0x33a>
 8008584:	e014      	b.n	80085b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008586:	f7fe f8bf 	bl	8006708 <HAL_GetTick>
 800858a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800858c:	e00a      	b.n	80085a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800858e:	f7fe f8bb 	bl	8006708 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f241 3288 	movw	r2, #5000	; 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e0a6      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085a4:	4b56      	ldr	r3, [pc, #344]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1ee      	bne.n	800858e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d105      	bne.n	80085c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085b6:	4b52      	ldr	r3, [pc, #328]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	4a51      	ldr	r2, [pc, #324]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 80085bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8092 	beq.w	80086f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80085cc:	4b4c      	ldr	r3, [pc, #304]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 030c 	and.w	r3, r3, #12
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d05c      	beq.n	8008692 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d141      	bne.n	8008664 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085e0:	4b48      	ldr	r3, [pc, #288]	; (8008704 <HAL_RCC_OscConfig+0x4dc>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085e6:	f7fe f88f 	bl	8006708 <HAL_GetTick>
 80085ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ec:	e008      	b.n	8008600 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085ee:	f7fe f88b 	bl	8006708 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d901      	bls.n	8008600 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e078      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008600:	4b3f      	ldr	r3, [pc, #252]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1f0      	bne.n	80085ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	69da      	ldr	r2, [r3, #28]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	431a      	orrs	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	019b      	lsls	r3, r3, #6
 800861c:	431a      	orrs	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	085b      	lsrs	r3, r3, #1
 8008624:	3b01      	subs	r3, #1
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	061b      	lsls	r3, r3, #24
 8008630:	4933      	ldr	r1, [pc, #204]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008632:	4313      	orrs	r3, r2
 8008634:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008636:	4b33      	ldr	r3, [pc, #204]	; (8008704 <HAL_RCC_OscConfig+0x4dc>)
 8008638:	2201      	movs	r2, #1
 800863a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800863c:	f7fe f864 	bl	8006708 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008644:	f7fe f860 	bl	8006708 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e04d      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008656:	4b2a      	ldr	r3, [pc, #168]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCC_OscConfig+0x41c>
 8008662:	e045      	b.n	80086f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008664:	4b27      	ldr	r3, [pc, #156]	; (8008704 <HAL_RCC_OscConfig+0x4dc>)
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866a:	f7fe f84d 	bl	8006708 <HAL_GetTick>
 800866e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008672:	f7fe f849 	bl	8006708 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e036      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008684:	4b1e      	ldr	r3, [pc, #120]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1f0      	bne.n	8008672 <HAL_RCC_OscConfig+0x44a>
 8008690:	e02e      	b.n	80086f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d101      	bne.n	800869e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e029      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800869e:	4b18      	ldr	r3, [pc, #96]	; (8008700 <HAL_RCC_OscConfig+0x4d8>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d11c      	bne.n	80086ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086bc:	429a      	cmp	r2, r3
 80086be:	d115      	bne.n	80086ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086c6:	4013      	ands	r3, r2
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d10d      	bne.n	80086ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086da:	429a      	cmp	r2, r3
 80086dc:	d106      	bne.n	80086ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d001      	beq.n	80086f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	40007000 	.word	0x40007000
 8008700:	40023800 	.word	0x40023800
 8008704:	42470060 	.word	0x42470060

08008708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e0cc      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800871c:	4b68      	ldr	r3, [pc, #416]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d90c      	bls.n	8008744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800872a:	4b65      	ldr	r3, [pc, #404]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008732:	4b63      	ldr	r3, [pc, #396]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	429a      	cmp	r2, r3
 800873e:	d001      	beq.n	8008744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e0b8      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d020      	beq.n	8008792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800875c:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	4a58      	ldr	r2, [pc, #352]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b00      	cmp	r3, #0
 8008772:	d005      	beq.n	8008780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008774:	4b53      	ldr	r3, [pc, #332]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	4a52      	ldr	r2, [pc, #328]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800877a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800877e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008780:	4b50      	ldr	r3, [pc, #320]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	494d      	ldr	r1, [pc, #308]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800878e:	4313      	orrs	r3, r2
 8008790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	2b00      	cmp	r3, #0
 800879c:	d044      	beq.n	8008828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d107      	bne.n	80087b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087a6:	4b47      	ldr	r3, [pc, #284]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d119      	bne.n	80087e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e07f      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d003      	beq.n	80087c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d107      	bne.n	80087d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c6:	4b3f      	ldr	r3, [pc, #252]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d109      	bne.n	80087e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e06f      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087d6:	4b3b      	ldr	r3, [pc, #236]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e067      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80087e6:	4b37      	ldr	r3, [pc, #220]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f023 0203 	bic.w	r2, r3, #3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4934      	ldr	r1, [pc, #208]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80087f8:	f7fd ff86 	bl	8006708 <HAL_GetTick>
 80087fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087fe:	e00a      	b.n	8008816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008800:	f7fd ff82 	bl	8006708 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f241 3288 	movw	r2, #5000	; 0x1388
 800880e:	4293      	cmp	r3, r2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e04f      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008816:	4b2b      	ldr	r3, [pc, #172]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 020c 	and.w	r2, r3, #12
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	429a      	cmp	r2, r3
 8008826:	d1eb      	bne.n	8008800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008828:	4b25      	ldr	r3, [pc, #148]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 030f 	and.w	r3, r3, #15
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d20c      	bcs.n	8008850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008836:	4b22      	ldr	r3, [pc, #136]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800883e:	4b20      	ldr	r3, [pc, #128]	; (80088c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d001      	beq.n	8008850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e032      	b.n	80088b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d008      	beq.n	800886e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800885c:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4916      	ldr	r1, [pc, #88]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800886a:	4313      	orrs	r3, r2
 800886c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d009      	beq.n	800888e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	490e      	ldr	r1, [pc, #56]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 800888a:	4313      	orrs	r3, r2
 800888c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800888e:	f000 f821 	bl	80088d4 <HAL_RCC_GetSysClockFreq>
 8008892:	4601      	mov	r1, r0
 8008894:	4b0b      	ldr	r3, [pc, #44]	; (80088c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	091b      	lsrs	r3, r3, #4
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <HAL_RCC_ClockConfig+0x1c0>)
 80088a0:	5cd3      	ldrb	r3, [r2, r3]
 80088a2:	fa21 f303 	lsr.w	r3, r1, r3
 80088a6:	4a09      	ldr	r2, [pc, #36]	; (80088cc <HAL_RCC_ClockConfig+0x1c4>)
 80088a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <HAL_RCC_ClockConfig+0x1c8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fd fee6 	bl	8006680 <HAL_InitTick>

  return HAL_OK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40023c00 	.word	0x40023c00
 80088c4:	40023800 	.word	0x40023800
 80088c8:	0801076c 	.word	0x0801076c
 80088cc:	20000034 	.word	0x20000034
 80088d0:	20000038 	.word	0x20000038

080088d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80088d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
 80088de:	2300      	movs	r3, #0
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	2300      	movs	r3, #0
 80088e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80088ea:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 030c 	and.w	r3, r3, #12
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d007      	beq.n	8008906 <HAL_RCC_GetSysClockFreq+0x32>
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d008      	beq.n	800890c <HAL_RCC_GetSysClockFreq+0x38>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f040 808d 	bne.w	8008a1a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008900:	4b4b      	ldr	r3, [pc, #300]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008902:	60bb      	str	r3, [r7, #8]
       break;
 8008904:	e08c      	b.n	8008a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008906:	4b4b      	ldr	r3, [pc, #300]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x160>)
 8008908:	60bb      	str	r3, [r7, #8]
      break;
 800890a:	e089      	b.n	8008a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800890c:	4b47      	ldr	r3, [pc, #284]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008914:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008916:	4b45      	ldr	r3, [pc, #276]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d023      	beq.n	800896a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008922:	4b42      	ldr	r3, [pc, #264]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	f04f 0400 	mov.w	r4, #0
 800892c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	ea03 0501 	and.w	r5, r3, r1
 8008938:	ea04 0602 	and.w	r6, r4, r2
 800893c:	4a3d      	ldr	r2, [pc, #244]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800893e:	fb02 f106 	mul.w	r1, r2, r6
 8008942:	2200      	movs	r2, #0
 8008944:	fb02 f205 	mul.w	r2, r2, r5
 8008948:	440a      	add	r2, r1
 800894a:	493a      	ldr	r1, [pc, #232]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x160>)
 800894c:	fba5 0101 	umull	r0, r1, r5, r1
 8008950:	1853      	adds	r3, r2, r1
 8008952:	4619      	mov	r1, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f04f 0400 	mov.w	r4, #0
 800895a:	461a      	mov	r2, r3
 800895c:	4623      	mov	r3, r4
 800895e:	f7f8 f993 	bl	8000c88 <__aeabi_uldivmod>
 8008962:	4603      	mov	r3, r0
 8008964:	460c      	mov	r4, r1
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	e049      	b.n	80089fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800896a:	4b30      	ldr	r3, [pc, #192]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	099b      	lsrs	r3, r3, #6
 8008970:	f04f 0400 	mov.w	r4, #0
 8008974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008978:	f04f 0200 	mov.w	r2, #0
 800897c:	ea03 0501 	and.w	r5, r3, r1
 8008980:	ea04 0602 	and.w	r6, r4, r2
 8008984:	4629      	mov	r1, r5
 8008986:	4632      	mov	r2, r6
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	f04f 0400 	mov.w	r4, #0
 8008990:	0154      	lsls	r4, r2, #5
 8008992:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008996:	014b      	lsls	r3, r1, #5
 8008998:	4619      	mov	r1, r3
 800899a:	4622      	mov	r2, r4
 800899c:	1b49      	subs	r1, r1, r5
 800899e:	eb62 0206 	sbc.w	r2, r2, r6
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	f04f 0400 	mov.w	r4, #0
 80089aa:	0194      	lsls	r4, r2, #6
 80089ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80089b0:	018b      	lsls	r3, r1, #6
 80089b2:	1a5b      	subs	r3, r3, r1
 80089b4:	eb64 0402 	sbc.w	r4, r4, r2
 80089b8:	f04f 0100 	mov.w	r1, #0
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	00e2      	lsls	r2, r4, #3
 80089c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80089c6:	00d9      	lsls	r1, r3, #3
 80089c8:	460b      	mov	r3, r1
 80089ca:	4614      	mov	r4, r2
 80089cc:	195b      	adds	r3, r3, r5
 80089ce:	eb44 0406 	adc.w	r4, r4, r6
 80089d2:	f04f 0100 	mov.w	r1, #0
 80089d6:	f04f 0200 	mov.w	r2, #0
 80089da:	02a2      	lsls	r2, r4, #10
 80089dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80089e0:	0299      	lsls	r1, r3, #10
 80089e2:	460b      	mov	r3, r1
 80089e4:	4614      	mov	r4, r2
 80089e6:	4618      	mov	r0, r3
 80089e8:	4621      	mov	r1, r4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f04f 0400 	mov.w	r4, #0
 80089f0:	461a      	mov	r2, r3
 80089f2:	4623      	mov	r3, r4
 80089f4:	f7f8 f948 	bl	8000c88 <__aeabi_uldivmod>
 80089f8:	4603      	mov	r3, r0
 80089fa:	460c      	mov	r4, r1
 80089fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x158>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	3301      	adds	r3, #1
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	60bb      	str	r3, [r7, #8]
      break;
 8008a18:	e002      	b.n	8008a20 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a1a:	4b05      	ldr	r3, [pc, #20]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x15c>)
 8008a1c:	60bb      	str	r3, [r7, #8]
      break;
 8008a1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a20:	68bb      	ldr	r3, [r7, #8]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40023800 	.word	0x40023800
 8008a30:	00f42400 	.word	0x00f42400
 8008a34:	00bebc20 	.word	0x00bebc20

08008a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a3c:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000034 	.word	0x20000034

08008a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008a54:	f7ff fff0 	bl	8008a38 <HAL_RCC_GetHCLKFreq>
 8008a58:	4601      	mov	r1, r0
 8008a5a:	4b05      	ldr	r3, [pc, #20]	; (8008a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	0a9b      	lsrs	r3, r3, #10
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	4a03      	ldr	r2, [pc, #12]	; (8008a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a66:	5cd3      	ldrb	r3, [r2, r3]
 8008a68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	40023800 	.word	0x40023800
 8008a74:	0801077c 	.word	0x0801077c

08008a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008a7c:	f7ff ffdc 	bl	8008a38 <HAL_RCC_GetHCLKFreq>
 8008a80:	4601      	mov	r1, r0
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	0b5b      	lsrs	r3, r3, #13
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	4a03      	ldr	r2, [pc, #12]	; (8008a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a8e:	5cd3      	ldrb	r3, [r2, r3]
 8008a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	0801077c 	.word	0x0801077c

08008aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e056      	b.n	8008b60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d106      	bne.n	8008ad2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7fd fa67 	bl	8005fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ae8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	431a      	orrs	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	69db      	ldr	r3, [r3, #28]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a1b      	ldr	r3, [r3, #32]
 8008b1a:	ea42 0103 	orr.w	r1, r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	699b      	ldr	r3, [r3, #24]
 8008b2e:	0c1b      	lsrs	r3, r3, #16
 8008b30:	f003 0104 	and.w	r1, r3, #4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69da      	ldr	r2, [r3, #28]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	603b      	str	r3, [r7, #0]
 8008b74:	4613      	mov	r3, r2
 8008b76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d101      	bne.n	8008b8a <HAL_SPI_Transmit+0x22>
 8008b86:	2302      	movs	r3, #2
 8008b88:	e11e      	b.n	8008dc8 <HAL_SPI_Transmit+0x260>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b92:	f7fd fdb9 	bl	8006708 <HAL_GetTick>
 8008b96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b98:	88fb      	ldrh	r3, [r7, #6]
 8008b9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d002      	beq.n	8008bae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bac:	e103      	b.n	8008db6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_SPI_Transmit+0x52>
 8008bb4:	88fb      	ldrh	r3, [r7, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d102      	bne.n	8008bc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008bbe:	e0fa      	b.n	8008db6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	88fa      	ldrh	r2, [r7, #6]
 8008bde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2200      	movs	r2, #0
 8008bea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c06:	d107      	bne.n	8008c18 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	d007      	beq.n	8008c36 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3e:	d14b      	bne.n	8008cd8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <HAL_SPI_Transmit+0xe6>
 8008c48:	8afb      	ldrh	r3, [r7, #22]
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d13e      	bne.n	8008ccc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c52:	881a      	ldrh	r2, [r3, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5e:	1c9a      	adds	r2, r3, #2
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c72:	e02b      	b.n	8008ccc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d112      	bne.n	8008ca8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	881a      	ldrh	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c92:	1c9a      	adds	r2, r3, #2
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ca6:	e011      	b.n	8008ccc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca8:	f7fd fd2e 	bl	8006708 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d803      	bhi.n	8008cc0 <HAL_SPI_Transmit+0x158>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_Transmit+0x15e>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008cca:	e074      	b.n	8008db6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1ce      	bne.n	8008c74 <HAL_SPI_Transmit+0x10c>
 8008cd6:	e04c      	b.n	8008d72 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_SPI_Transmit+0x17e>
 8008ce0:	8afb      	ldrh	r3, [r7, #22]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d140      	bne.n	8008d68 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	330c      	adds	r3, #12
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	1c5a      	adds	r2, r3, #1
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3b01      	subs	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008d0c:	e02c      	b.n	8008d68 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d113      	bne.n	8008d44 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	7812      	ldrb	r2, [r2, #0]
 8008d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d42:	e011      	b.n	8008d68 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d44:	f7fd fce0 	bl	8006708 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d803      	bhi.n	8008d5c <HAL_SPI_Transmit+0x1f4>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d102      	bne.n	8008d62 <HAL_SPI_Transmit+0x1fa>
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d66:	e026      	b.n	8008db6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1cd      	bne.n	8008d0e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 fba4 	bl	80094c4 <SPI_EndRxTxTransaction>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d90:	2300      	movs	r3, #0
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	613b      	str	r3, [r7, #16]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	613b      	str	r3, [r7, #16]
 8008da4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	77fb      	strb	r3, [r7, #31]
 8008db2:	e000      	b.n	8008db6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008db4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2201      	movs	r2, #1
 8008dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b088      	sub	sp, #32
 8008dd4:	af02      	add	r7, sp, #8
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dec:	d112      	bne.n	8008e14 <HAL_SPI_Receive+0x44>
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d10e      	bne.n	8008e14 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2204      	movs	r2, #4
 8008dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008dfe:	88fa      	ldrh	r2, [r7, #6]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	9300      	str	r3, [sp, #0]
 8008e04:	4613      	mov	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 f8e9 	bl	8008fe2 <HAL_SPI_TransmitReceive>
 8008e10:	4603      	mov	r3, r0
 8008e12:	e0e2      	b.n	8008fda <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <HAL_SPI_Receive+0x52>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e0db      	b.n	8008fda <HAL_SPI_Receive+0x20a>
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e2a:	f7fd fc6d 	bl	8006708 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d002      	beq.n	8008e42 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e40:	e0c2      	b.n	8008fc8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <HAL_SPI_Receive+0x7e>
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e52:	e0b9      	b.n	8008fc8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2204      	movs	r2, #4
 8008e58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	88fa      	ldrh	r2, [r7, #6]
 8008e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	88fa      	ldrh	r2, [r7, #6]
 8008e72:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2200      	movs	r2, #0
 8008e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9a:	d107      	bne.n	8008eac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008eaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb6:	2b40      	cmp	r3, #64	; 0x40
 8008eb8:	d007      	beq.n	8008eca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ec8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d162      	bne.n	8008f98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ed2:	e02e      	b.n	8008f32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d115      	bne.n	8008f0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f103 020c 	add.w	r2, r3, #12
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef8:	1c5a      	adds	r2, r3, #1
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f0c:	e011      	b.n	8008f32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f0e:	f7fd fbfb 	bl	8006708 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d803      	bhi.n	8008f26 <HAL_SPI_Receive+0x156>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d102      	bne.n	8008f2c <HAL_SPI_Receive+0x15c>
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f30:	e04a      	b.n	8008fc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1cb      	bne.n	8008ed4 <HAL_SPI_Receive+0x104>
 8008f3c:	e031      	b.n	8008fa2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d113      	bne.n	8008f74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68da      	ldr	r2, [r3, #12]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f56:	b292      	uxth	r2, r2
 8008f58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5e:	1c9a      	adds	r2, r3, #2
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008f72:	e011      	b.n	8008f98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f74:	f7fd fbc8 	bl	8006708 <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d803      	bhi.n	8008f8c <HAL_SPI_Receive+0x1bc>
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8a:	d102      	bne.n	8008f92 <HAL_SPI_Receive+0x1c2>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d102      	bne.n	8008f98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008f96:	e017      	b.n	8008fc8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1cd      	bne.n	8008f3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 fa27 	bl	80093fa <SPI_EndRxTransaction>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2220      	movs	r2, #32
 8008fb6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	75fb      	strb	r3, [r7, #23]
 8008fc4:	e000      	b.n	8008fc8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b08c      	sub	sp, #48	; 0x30
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	60b9      	str	r1, [r7, #8]
 8008fec:	607a      	str	r2, [r7, #4]
 8008fee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_SPI_TransmitReceive+0x26>
 8009004:	2302      	movs	r3, #2
 8009006:	e18a      	b.n	800931e <HAL_SPI_TransmitReceive+0x33c>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009010:	f7fd fb7a 	bl	8006708 <HAL_GetTick>
 8009014:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800901c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009026:	887b      	ldrh	r3, [r7, #2]
 8009028:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800902a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800902e:	2b01      	cmp	r3, #1
 8009030:	d00f      	beq.n	8009052 <HAL_SPI_TransmitReceive+0x70>
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009038:	d107      	bne.n	800904a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d103      	bne.n	800904a <HAL_SPI_TransmitReceive+0x68>
 8009042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009046:	2b04      	cmp	r3, #4
 8009048:	d003      	beq.n	8009052 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800904a:	2302      	movs	r3, #2
 800904c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009050:	e15b      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d005      	beq.n	8009064 <HAL_SPI_TransmitReceive+0x82>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d002      	beq.n	8009064 <HAL_SPI_TransmitReceive+0x82>
 800905e:	887b      	ldrh	r3, [r7, #2]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800906a:	e14e      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009072:	b2db      	uxtb	r3, r3
 8009074:	2b04      	cmp	r3, #4
 8009076:	d003      	beq.n	8009080 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2205      	movs	r2, #5
 800907c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	887a      	ldrh	r2, [r7, #2]
 8009090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	887a      	ldrh	r2, [r7, #2]
 8009096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	887a      	ldrh	r2, [r7, #2]
 80090a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	887a      	ldrh	r2, [r7, #2]
 80090a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d007      	beq.n	80090d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090dc:	d178      	bne.n	80091d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <HAL_SPI_TransmitReceive+0x10a>
 80090e6:	8b7b      	ldrh	r3, [r7, #26]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d166      	bne.n	80091ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f0:	881a      	ldrh	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	1c9a      	adds	r2, r3, #2
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009106:	b29b      	uxth	r3, r3
 8009108:	3b01      	subs	r3, #1
 800910a:	b29a      	uxth	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009110:	e053      	b.n	80091ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0302 	and.w	r3, r3, #2
 800911c:	2b02      	cmp	r3, #2
 800911e:	d11b      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x176>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009124:	b29b      	uxth	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x176>
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d113      	bne.n	8009158 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	881a      	ldrh	r2, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	1c9a      	adds	r2, r3, #2
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800914a:	b29b      	uxth	r3, r3
 800914c:	3b01      	subs	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b01      	cmp	r3, #1
 8009164:	d119      	bne.n	800919a <HAL_SPI_TransmitReceive+0x1b8>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d014      	beq.n	800919a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	b292      	uxth	r2, r2
 800917c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009182:	1c9a      	adds	r2, r3, #2
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800918c:	b29b      	uxth	r3, r3
 800918e:	3b01      	subs	r3, #1
 8009190:	b29a      	uxth	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009196:	2301      	movs	r3, #1
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800919a:	f7fd fab5 	bl	8006708 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d807      	bhi.n	80091ba <HAL_SPI_TransmitReceive+0x1d8>
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b0:	d003      	beq.n	80091ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80091b8:	e0a7      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1a6      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x130>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1a1      	bne.n	8009112 <HAL_SPI_TransmitReceive+0x130>
 80091ce:	e07c      	b.n	80092ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_SPI_TransmitReceive+0x1fc>
 80091d8:	8b7b      	ldrh	r3, [r7, #26]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d16b      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	7812      	ldrb	r2, [r2, #0]
 80091ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f0:	1c5a      	adds	r2, r3, #1
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009204:	e057      	b.n	80092b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b02      	cmp	r3, #2
 8009212:	d11c      	bne.n	800924e <HAL_SPI_TransmitReceive+0x26c>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009218:	b29b      	uxth	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	d017      	beq.n	800924e <HAL_SPI_TransmitReceive+0x26c>
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	2b01      	cmp	r3, #1
 8009222:	d114      	bne.n	800924e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	330c      	adds	r3, #12
 800922e:	7812      	ldrb	r2, [r2, #0]
 8009230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	f003 0301 	and.w	r3, r3, #1
 8009258:	2b01      	cmp	r3, #1
 800925a:	d119      	bne.n	8009290 <HAL_SPI_TransmitReceive+0x2ae>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009260:	b29b      	uxth	r3, r3
 8009262:	2b00      	cmp	r3, #0
 8009264:	d014      	beq.n	8009290 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009270:	b2d2      	uxtb	r2, r2
 8009272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	1c5a      	adds	r2, r3, #1
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009282:	b29b      	uxth	r3, r3
 8009284:	3b01      	subs	r3, #1
 8009286:	b29a      	uxth	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800928c:	2301      	movs	r3, #1
 800928e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009290:	f7fd fa3a 	bl	8006708 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800929c:	429a      	cmp	r2, r3
 800929e:	d803      	bhi.n	80092a8 <HAL_SPI_TransmitReceive+0x2c6>
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092a6:	d102      	bne.n	80092ae <HAL_SPI_TransmitReceive+0x2cc>
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d103      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80092ae:	2303      	movs	r3, #3
 80092b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80092b4:	e029      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1a2      	bne.n	8009206 <HAL_SPI_TransmitReceive+0x224>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d19d      	bne.n	8009206 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 f8f8 	bl	80094c4 <SPI_EndRxTxTransaction>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d006      	beq.n	80092e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80092e6:	e010      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10b      	bne.n	8009308 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092f0:	2300      	movs	r3, #0
 80092f2:	617b      	str	r3, [r7, #20]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	e000      	b.n	800930a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800931a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800931e:	4618      	mov	r0, r3
 8009320:	3730      	adds	r7, #48	; 0x30
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b084      	sub	sp, #16
 800932a:	af00      	add	r7, sp, #0
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	60b9      	str	r1, [r7, #8]
 8009330:	603b      	str	r3, [r7, #0]
 8009332:	4613      	mov	r3, r2
 8009334:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009336:	e04c      	b.n	80093d2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933e:	d048      	beq.n	80093d2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009340:	f7fd f9e2 	bl	8006708 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d902      	bls.n	8009356 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d13d      	bne.n	80093d2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936e:	d111      	bne.n	8009394 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009378:	d004      	beq.n	8009384 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009382:	d107      	bne.n	8009394 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939c:	d10f      	bne.n	80093be <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e00f      	b.n	80093f2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4013      	ands	r3, r2
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	429a      	cmp	r2, r3
 80093e0:	bf0c      	ite	eq
 80093e2:	2301      	moveq	r3, #1
 80093e4:	2300      	movne	r3, #0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d1a3      	bne.n	8009338 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b086      	sub	sp, #24
 80093fe:	af02      	add	r7, sp, #8
 8009400:	60f8      	str	r0, [r7, #12]
 8009402:	60b9      	str	r1, [r7, #8]
 8009404:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800940e:	d111      	bne.n	8009434 <SPI_EndRxTransaction+0x3a>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009418:	d004      	beq.n	8009424 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009422:	d107      	bne.n	8009434 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009432:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800943c:	d12a      	bne.n	8009494 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009446:	d012      	beq.n	800946e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2200      	movs	r2, #0
 8009450:	2180      	movs	r1, #128	; 0x80
 8009452:	68f8      	ldr	r0, [r7, #12]
 8009454:	f7ff ff67 	bl	8009326 <SPI_WaitFlagStateUntilTimeout>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d02d      	beq.n	80094ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009462:	f043 0220 	orr.w	r2, r3, #32
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e026      	b.n	80094bc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2200      	movs	r2, #0
 8009476:	2101      	movs	r1, #1
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff ff54 	bl	8009326 <SPI_WaitFlagStateUntilTimeout>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01a      	beq.n	80094ba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e013      	b.n	80094bc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2200      	movs	r2, #0
 800949c:	2101      	movs	r1, #1
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff ff41 	bl	8009326 <SPI_WaitFlagStateUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ae:	f043 0220 	orr.w	r2, r3, #32
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e000      	b.n	80094bc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b088      	sub	sp, #32
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094d0:	4b1b      	ldr	r3, [pc, #108]	; (8009540 <SPI_EndRxTxTransaction+0x7c>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1b      	ldr	r2, [pc, #108]	; (8009544 <SPI_EndRxTxTransaction+0x80>)
 80094d6:	fba2 2303 	umull	r2, r3, r2, r3
 80094da:	0d5b      	lsrs	r3, r3, #21
 80094dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094e0:	fb02 f303 	mul.w	r3, r2, r3
 80094e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ee:	d112      	bne.n	8009516 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	2180      	movs	r1, #128	; 0x80
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff ff13 	bl	8009326 <SPI_WaitFlagStateUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d016      	beq.n	8009534 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	f043 0220 	orr.w	r2, r3, #32
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e00f      	b.n	8009536 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	3b01      	subs	r3, #1
 8009520:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952c:	2b80      	cmp	r3, #128	; 0x80
 800952e:	d0f2      	beq.n	8009516 <SPI_EndRxTxTransaction+0x52>
 8009530:	e000      	b.n	8009534 <SPI_EndRxTxTransaction+0x70>
        break;
 8009532:	bf00      	nop
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20000034 	.word	0x20000034
 8009544:	165e9f81 	.word	0x165e9f81

08009548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e01d      	b.n	8009596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7fc fe12 	bl	8006198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	4619      	mov	r1, r3
 8009586:	4610      	mov	r0, r2
 8009588:	f000 fb56 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800959e:	b480      	push	{r7}
 80095a0:	b085      	sub	sp, #20
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0201 	orr.w	r2, r2, #1
 80095b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b06      	cmp	r3, #6
 80095c6:	d007      	beq.n	80095d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f042 0201 	orr.w	r2, r2, #1
 80095d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e01d      	b.n	8009634 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7fc fd0f 	bl	8006030 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f000 fb07 	bl	8009c38 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2201      	movs	r2, #1
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 fd42 	bl	800a0d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a15      	ldr	r2, [pc, #84]	; (80096b0 <HAL_TIM_PWM_Start+0x74>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d004      	beq.n	8009668 <HAL_TIM_PWM_Start+0x2c>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a14      	ldr	r2, [pc, #80]	; (80096b4 <HAL_TIM_PWM_Start+0x78>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d101      	bne.n	800966c <HAL_TIM_PWM_Start+0x30>
 8009668:	2301      	movs	r3, #1
 800966a:	e000      	b.n	800966e <HAL_TIM_PWM_Start+0x32>
 800966c:	2300      	movs	r3, #0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d007      	beq.n	8009682 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f003 0307 	and.w	r3, r3, #7
 800968c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2b06      	cmp	r3, #6
 8009692:	d007      	beq.n	80096a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0201 	orr.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40010000 	.word	0x40010000
 80096b4:	40010400 	.word	0x40010400

080096b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e083      	b.n	80097d4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d106      	bne.n	80096e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7fc fcdd 	bl	80060a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6812      	ldr	r2, [r2, #0]
 80096f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096fc:	f023 0307 	bic.w	r3, r3, #7
 8009700:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f000 fa93 	bl	8009c38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	021b      	lsls	r3, r3, #8
 800974a:	4313      	orrs	r3, r2
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009758:	f023 030c 	bic.w	r3, r3, #12
 800975c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009764:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	69db      	ldr	r3, [r3, #28]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	4313      	orrs	r3, r2
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	011a      	lsls	r2, r3, #4
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	031b      	lsls	r3, r3, #12
 8009788:	4313      	orrs	r3, r2
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009796:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800979e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	4313      	orrs	r3, r2
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_TIM_Encoder_Start+0x16>
 80097ec:	2b04      	cmp	r3, #4
 80097ee:	d008      	beq.n	8009802 <HAL_TIM_Encoder_Start+0x26>
 80097f0:	e00f      	b.n	8009812 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2201      	movs	r2, #1
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fc6c 	bl	800a0d8 <TIM_CCxChannelCmd>
      break;
 8009800:	e016      	b.n	8009830 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2201      	movs	r2, #1
 8009808:	2104      	movs	r1, #4
 800980a:	4618      	mov	r0, r3
 800980c:	f000 fc64 	bl	800a0d8 <TIM_CCxChannelCmd>
      break;
 8009810:	e00e      	b.n	8009830 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2201      	movs	r2, #1
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fc5c 	bl	800a0d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2201      	movs	r2, #1
 8009826:	2104      	movs	r1, #4
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fc55 	bl	800a0d8 <TIM_CCxChannelCmd>
      break;
 800982e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d122      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d11b      	bne.n	80098a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0202 	mvn.w	r2, #2
 8009876:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 f9b5 	bl	8009bfc <HAL_TIM_IC_CaptureCallback>
 8009892:	e005      	b.n	80098a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f9a7 	bl	8009be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f9b8 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b04      	cmp	r3, #4
 80098b2:	d122      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d11b      	bne.n	80098fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f06f 0204 	mvn.w	r2, #4
 80098ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f000 f98b 	bl	8009bfc <HAL_TIM_IC_CaptureCallback>
 80098e6:	e005      	b.n	80098f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f97d 	bl	8009be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f98e 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	f003 0308 	and.w	r3, r3, #8
 8009904:	2b08      	cmp	r3, #8
 8009906:	d122      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f003 0308 	and.w	r3, r3, #8
 8009912:	2b08      	cmp	r3, #8
 8009914:	d11b      	bne.n	800994e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f06f 0208 	mvn.w	r2, #8
 800991e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2204      	movs	r2, #4
 8009924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f961 	bl	8009bfc <HAL_TIM_IC_CaptureCallback>
 800993a:	e005      	b.n	8009948 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f953 	bl	8009be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f964 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d122      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	f003 0310 	and.w	r3, r3, #16
 8009966:	2b10      	cmp	r3, #16
 8009968:	d11b      	bne.n	80099a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f06f 0210 	mvn.w	r2, #16
 8009972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2208      	movs	r2, #8
 8009978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	69db      	ldr	r3, [r3, #28]
 8009980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009984:	2b00      	cmp	r3, #0
 8009986:	d003      	beq.n	8009990 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f937 	bl	8009bfc <HAL_TIM_IC_CaptureCallback>
 800998e:	e005      	b.n	800999c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f929 	bl	8009be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f93a 	bl	8009c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d10e      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d107      	bne.n	80099ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f06f 0201 	mvn.w	r2, #1
 80099c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fa f9b9 	bl	8003d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d8:	2b80      	cmp	r3, #128	; 0x80
 80099da:	d10e      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e6:	2b80      	cmp	r3, #128	; 0x80
 80099e8:	d107      	bne.n	80099fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fc6d 	bl	800a2d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a04:	2b40      	cmp	r3, #64	; 0x40
 8009a06:	d10e      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d107      	bne.n	8009a26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f8ff 	bl	8009c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f003 0320 	and.w	r3, r3, #32
 8009a30:	2b20      	cmp	r3, #32
 8009a32:	d10e      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f003 0320 	and.w	r3, r3, #32
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d107      	bne.n	8009a52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f06f 0220 	mvn.w	r2, #32
 8009a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fc37 	bl	800a2c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a52:	bf00      	nop
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e0b4      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2202      	movs	r2, #2
 8009a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b0c      	cmp	r3, #12
 8009a8a:	f200 809f 	bhi.w	8009bcc <HAL_TIM_PWM_ConfigChannel+0x170>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009ac9 	.word	0x08009ac9
 8009a98:	08009bcd 	.word	0x08009bcd
 8009a9c:	08009bcd 	.word	0x08009bcd
 8009aa0:	08009bcd 	.word	0x08009bcd
 8009aa4:	08009b09 	.word	0x08009b09
 8009aa8:	08009bcd 	.word	0x08009bcd
 8009aac:	08009bcd 	.word	0x08009bcd
 8009ab0:	08009bcd 	.word	0x08009bcd
 8009ab4:	08009b4b 	.word	0x08009b4b
 8009ab8:	08009bcd 	.word	0x08009bcd
 8009abc:	08009bcd 	.word	0x08009bcd
 8009ac0:	08009bcd 	.word	0x08009bcd
 8009ac4:	08009b8b 	.word	0x08009b8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 f952 	bl	8009d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0208 	orr.w	r2, r2, #8
 8009ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	699a      	ldr	r2, [r3, #24]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0204 	bic.w	r2, r2, #4
 8009af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6999      	ldr	r1, [r3, #24]
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	619a      	str	r2, [r3, #24]
      break;
 8009b06:	e062      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f9a2 	bl	8009e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699a      	ldr	r2, [r3, #24]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6999      	ldr	r1, [r3, #24]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	021a      	lsls	r2, r3, #8
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	619a      	str	r2, [r3, #24]
      break;
 8009b48:	e041      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68b9      	ldr	r1, [r7, #8]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f000 f9f7 	bl	8009f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69da      	ldr	r2, [r3, #28]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f042 0208 	orr.w	r2, r2, #8
 8009b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69da      	ldr	r2, [r3, #28]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f022 0204 	bic.w	r2, r2, #4
 8009b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	69d9      	ldr	r1, [r3, #28]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	691a      	ldr	r2, [r3, #16]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	430a      	orrs	r2, r1
 8009b86:	61da      	str	r2, [r3, #28]
      break;
 8009b88:	e021      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 fa4b 	bl	800a02c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	69da      	ldr	r2, [r3, #28]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	69d9      	ldr	r1, [r3, #28]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	021a      	lsls	r2, r3, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	61da      	str	r2, [r3, #28]
      break;
 8009bca:	e000      	b.n	8009bce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009bcc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a40      	ldr	r2, [pc, #256]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d013      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c56:	d00f      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3d      	ldr	r2, [pc, #244]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d00b      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3c      	ldr	r2, [pc, #240]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d007      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3b      	ldr	r2, [pc, #236]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d003      	beq.n	8009c78 <TIM_Base_SetConfig+0x40>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a3a      	ldr	r2, [pc, #232]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d108      	bne.n	8009c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2f      	ldr	r2, [pc, #188]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d02b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c98:	d027      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2c      	ldr	r2, [pc, #176]	; (8009d50 <TIM_Base_SetConfig+0x118>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d023      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2b      	ldr	r2, [pc, #172]	; (8009d54 <TIM_Base_SetConfig+0x11c>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a2a      	ldr	r2, [pc, #168]	; (8009d58 <TIM_Base_SetConfig+0x120>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d01b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a29      	ldr	r2, [pc, #164]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d017      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a28      	ldr	r2, [pc, #160]	; (8009d60 <TIM_Base_SetConfig+0x128>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d013      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a27      	ldr	r2, [pc, #156]	; (8009d64 <TIM_Base_SetConfig+0x12c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00f      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a26      	ldr	r2, [pc, #152]	; (8009d68 <TIM_Base_SetConfig+0x130>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d00b      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a25      	ldr	r2, [pc, #148]	; (8009d6c <TIM_Base_SetConfig+0x134>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d007      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <TIM_Base_SetConfig+0x138>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d003      	beq.n	8009cea <TIM_Base_SetConfig+0xb2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a23      	ldr	r2, [pc, #140]	; (8009d74 <TIM_Base_SetConfig+0x13c>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d108      	bne.n	8009cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	68fa      	ldr	r2, [r7, #12]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0a      	ldr	r2, [pc, #40]	; (8009d4c <TIM_Base_SetConfig+0x114>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_Base_SetConfig+0xf8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <TIM_Base_SetConfig+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d103      	bne.n	8009d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	691a      	ldr	r2, [r3, #16]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	615a      	str	r2, [r3, #20]
}
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	40010000 	.word	0x40010000
 8009d50:	40000400 	.word	0x40000400
 8009d54:	40000800 	.word	0x40000800
 8009d58:	40000c00 	.word	0x40000c00
 8009d5c:	40010400 	.word	0x40010400
 8009d60:	40014000 	.word	0x40014000
 8009d64:	40014400 	.word	0x40014400
 8009d68:	40014800 	.word	0x40014800
 8009d6c:	40001800 	.word	0x40001800
 8009d70:	40001c00 	.word	0x40001c00
 8009d74:	40002000 	.word	0x40002000

08009d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a1b      	ldr	r3, [r3, #32]
 8009d86:	f023 0201 	bic.w	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	699b      	ldr	r3, [r3, #24]
 8009d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f023 0303 	bic.w	r3, r3, #3
 8009dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f023 0302 	bic.w	r3, r3, #2
 8009dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a20      	ldr	r2, [pc, #128]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d003      	beq.n	8009ddc <TIM_OC1_SetConfig+0x64>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10c      	bne.n	8009df6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	f023 0308 	bic.w	r3, r3, #8
 8009de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0304 	bic.w	r3, r3, #4
 8009df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <TIM_OC1_SetConfig+0xd8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d003      	beq.n	8009e06 <TIM_OC1_SetConfig+0x8e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a14      	ldr	r2, [pc, #80]	; (8009e54 <TIM_OC1_SetConfig+0xdc>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d111      	bne.n	8009e2a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685a      	ldr	r2, [r3, #4]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	621a      	str	r2, [r3, #32]
}
 8009e44:	bf00      	nop
 8009e46:	371c      	adds	r7, #28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	40010000 	.word	0x40010000
 8009e54:	40010400 	.word	0x40010400

08009e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0210 	bic.w	r2, r3, #16
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	011b      	lsls	r3, r3, #4
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d003      	beq.n	8009ec0 <TIM_OC2_SetConfig+0x68>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d10d      	bne.n	8009edc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a17      	ldr	r2, [pc, #92]	; (8009f3c <TIM_OC2_SetConfig+0xe4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC2_SetConfig+0x94>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a16      	ldr	r2, [pc, #88]	; (8009f40 <TIM_OC2_SetConfig+0xe8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d113      	bne.n	8009f14 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	621a      	str	r2, [r3, #32]
}
 8009f2e:	bf00      	nop
 8009f30:	371c      	adds	r7, #28
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr
 8009f3a:	bf00      	nop
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400

08009f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a21      	ldr	r2, [pc, #132]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d003      	beq.n	8009faa <TIM_OC3_SetConfig+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a20      	ldr	r2, [pc, #128]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d10d      	bne.n	8009fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a16      	ldr	r2, [pc, #88]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC3_SetConfig+0x92>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a15      	ldr	r2, [pc, #84]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d113      	bne.n	8009ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	621a      	str	r2, [r3, #32]
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	40010000 	.word	0x40010000
 800a028:	40010400 	.word	0x40010400

0800a02c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b087      	sub	sp, #28
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	021b      	lsls	r3, r3, #8
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	031b      	lsls	r3, r3, #12
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4a12      	ldr	r2, [pc, #72]	; (800a0d0 <TIM_OC4_SetConfig+0xa4>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d003      	beq.n	800a094 <TIM_OC4_SetConfig+0x68>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a11      	ldr	r2, [pc, #68]	; (800a0d4 <TIM_OC4_SetConfig+0xa8>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d109      	bne.n	800a0a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	019b      	lsls	r3, r3, #6
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	685a      	ldr	r2, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	621a      	str	r2, [r3, #32]
}
 800a0c2:	bf00      	nop
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	40010000 	.word	0x40010000
 800a0d4:	40010400 	.word	0x40010400

0800a0d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f003 031f 	and.w	r3, r3, #31
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a1a      	ldr	r2, [r3, #32]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	43db      	mvns	r3, r3
 800a0fa:	401a      	ands	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6a1a      	ldr	r2, [r3, #32]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	f003 031f 	and.w	r3, r3, #31
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	fa01 f303 	lsl.w	r3, r1, r3
 800a110:	431a      	orrs	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	621a      	str	r2, [r3, #32]
}
 800a116:	bf00      	nop
 800a118:	371c      	adds	r7, #28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a138:	2302      	movs	r3, #2
 800a13a:	e05a      	b.n	800a1f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2202      	movs	r2, #2
 800a148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	68fa      	ldr	r2, [r7, #12]
 800a16a:	4313      	orrs	r3, r2
 800a16c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a21      	ldr	r2, [pc, #132]	; (800a200 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d022      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a188:	d01d      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1d      	ldr	r2, [pc, #116]	; (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d018      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1b      	ldr	r2, [pc, #108]	; (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d013      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1a      	ldr	r2, [pc, #104]	; (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00e      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a18      	ldr	r2, [pc, #96]	; (800a210 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d009      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a17      	ldr	r2, [pc, #92]	; (800a214 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d004      	beq.n	800a1c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a15      	ldr	r2, [pc, #84]	; (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d10c      	bne.n	800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68ba      	ldr	r2, [r7, #8]
 800a1de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	40010000 	.word	0x40010000
 800a204:	40000400 	.word	0x40000400
 800a208:	40000800 	.word	0x40000800
 800a20c:	40000c00 	.word	0x40000c00
 800a210:	40010400 	.word	0x40010400
 800a214:	40014000 	.word	0x40014000
 800a218:	40001800 	.word	0x40001800

0800a21c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a234:	2302      	movs	r3, #2
 800a236:	e03d      	b.n	800a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	4313      	orrs	r3, r2
 800a25a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	4313      	orrs	r3, r2
 800a268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4313      	orrs	r3, r2
 800a276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	4313      	orrs	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2dc:	bf00      	nop
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e03f      	b.n	800a37a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d106      	bne.n	800a314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fb ffec 	bl	80062ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2224      	movs	r2, #36	; 0x24
 800a318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a32a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f90b 	bl	800a548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	691a      	ldr	r2, [r3, #16]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	695a      	ldr	r2, [r3, #20]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2220      	movs	r2, #32
 800a36c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b088      	sub	sp, #32
 800a386:	af02      	add	r7, sp, #8
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	603b      	str	r3, [r7, #0]
 800a38e:	4613      	mov	r3, r2
 800a390:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	f040 8083 	bne.w	800a4aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <HAL_UART_Transmit+0x2e>
 800a3aa:	88fb      	ldrh	r3, [r7, #6]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e07b      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d101      	bne.n	800a3c2 <HAL_UART_Transmit+0x40>
 800a3be:	2302      	movs	r3, #2
 800a3c0:	e074      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2221      	movs	r2, #33	; 0x21
 800a3d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a3d8:	f7fc f996 	bl	8006708 <HAL_GetTick>
 800a3dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	88fa      	ldrh	r2, [r7, #6]
 800a3e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	88fa      	ldrh	r2, [r7, #6]
 800a3e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a3f2:	e042      	b.n	800a47a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a40a:	d122      	bne.n	800a452 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2200      	movs	r2, #0
 800a414:	2180      	movs	r1, #128	; 0x80
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f000 f84c 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a422:	2303      	movs	r3, #3
 800a424:	e042      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a438:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d103      	bne.n	800a44a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3302      	adds	r3, #2
 800a446:	60bb      	str	r3, [r7, #8]
 800a448:	e017      	b.n	800a47a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60bb      	str	r3, [r7, #8]
 800a450:	e013      	b.n	800a47a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2200      	movs	r2, #0
 800a45a:	2180      	movs	r1, #128	; 0x80
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f829 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a468:	2303      	movs	r3, #3
 800a46a:	e01f      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	60ba      	str	r2, [r7, #8]
 800a472:	781a      	ldrb	r2, [r3, #0]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a47e:	b29b      	uxth	r3, r3
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1b7      	bne.n	800a3f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2200      	movs	r2, #0
 800a48c:	2140      	movs	r1, #64	; 0x40
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 f810 	bl	800a4b4 <UART_WaitOnFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e006      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e000      	b.n	800a4ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a4aa:	2302      	movs	r3, #2
  }
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4c4:	e02c      	b.n	800a520 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4cc:	d028      	beq.n	800a520 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d007      	beq.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4d4:	f7fc f918 	bl	8006708 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	69ba      	ldr	r2, [r7, #24]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d21d      	bcs.n	800a520 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68da      	ldr	r2, [r3, #12]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0201 	bic.w	r2, r2, #1
 800a502:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2220      	movs	r2, #32
 800a508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a51c:	2303      	movs	r3, #3
 800a51e:	e00f      	b.n	800a540 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4013      	ands	r3, r2
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461a      	mov	r2, r3
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d0c3      	beq.n	800a4c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	b085      	sub	sp, #20
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	68da      	ldr	r2, [r3, #12]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	691b      	ldr	r3, [r3, #16]
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	431a      	orrs	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	69db      	ldr	r3, [r3, #28]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a58a:	f023 030c 	bic.w	r3, r3, #12
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	430b      	orrs	r3, r1
 800a596:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5b6:	f040 818b 	bne.w	800a8d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4ac1      	ldr	r2, [pc, #772]	; (800a8c4 <UART_SetConfig+0x37c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d005      	beq.n	800a5d0 <UART_SetConfig+0x88>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4abf      	ldr	r2, [pc, #764]	; (800a8c8 <UART_SetConfig+0x380>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	f040 80bd 	bne.w	800a74a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5d0:	f7fe fa52 	bl	8008a78 <HAL_RCC_GetPCLK2Freq>
 800a5d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	461d      	mov	r5, r3
 800a5da:	f04f 0600 	mov.w	r6, #0
 800a5de:	46a8      	mov	r8, r5
 800a5e0:	46b1      	mov	r9, r6
 800a5e2:	eb18 0308 	adds.w	r3, r8, r8
 800a5e6:	eb49 0409 	adc.w	r4, r9, r9
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	46a1      	mov	r9, r4
 800a5ee:	eb18 0805 	adds.w	r8, r8, r5
 800a5f2:	eb49 0906 	adc.w	r9, r9, r6
 800a5f6:	f04f 0100 	mov.w	r1, #0
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a602:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a606:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a60a:	4688      	mov	r8, r1
 800a60c:	4691      	mov	r9, r2
 800a60e:	eb18 0005 	adds.w	r0, r8, r5
 800a612:	eb49 0106 	adc.w	r1, r9, r6
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	461d      	mov	r5, r3
 800a61c:	f04f 0600 	mov.w	r6, #0
 800a620:	196b      	adds	r3, r5, r5
 800a622:	eb46 0406 	adc.w	r4, r6, r6
 800a626:	461a      	mov	r2, r3
 800a628:	4623      	mov	r3, r4
 800a62a:	f7f6 fb2d 	bl	8000c88 <__aeabi_uldivmod>
 800a62e:	4603      	mov	r3, r0
 800a630:	460c      	mov	r4, r1
 800a632:	461a      	mov	r2, r3
 800a634:	4ba5      	ldr	r3, [pc, #660]	; (800a8cc <UART_SetConfig+0x384>)
 800a636:	fba3 2302 	umull	r2, r3, r3, r2
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	461d      	mov	r5, r3
 800a644:	f04f 0600 	mov.w	r6, #0
 800a648:	46a9      	mov	r9, r5
 800a64a:	46b2      	mov	sl, r6
 800a64c:	eb19 0309 	adds.w	r3, r9, r9
 800a650:	eb4a 040a 	adc.w	r4, sl, sl
 800a654:	4699      	mov	r9, r3
 800a656:	46a2      	mov	sl, r4
 800a658:	eb19 0905 	adds.w	r9, r9, r5
 800a65c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a660:	f04f 0100 	mov.w	r1, #0
 800a664:	f04f 0200 	mov.w	r2, #0
 800a668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a66c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a674:	4689      	mov	r9, r1
 800a676:	4692      	mov	sl, r2
 800a678:	eb19 0005 	adds.w	r0, r9, r5
 800a67c:	eb4a 0106 	adc.w	r1, sl, r6
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	461d      	mov	r5, r3
 800a686:	f04f 0600 	mov.w	r6, #0
 800a68a:	196b      	adds	r3, r5, r5
 800a68c:	eb46 0406 	adc.w	r4, r6, r6
 800a690:	461a      	mov	r2, r3
 800a692:	4623      	mov	r3, r4
 800a694:	f7f6 faf8 	bl	8000c88 <__aeabi_uldivmod>
 800a698:	4603      	mov	r3, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	461a      	mov	r2, r3
 800a69e:	4b8b      	ldr	r3, [pc, #556]	; (800a8cc <UART_SetConfig+0x384>)
 800a6a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6a4:	095b      	lsrs	r3, r3, #5
 800a6a6:	2164      	movs	r1, #100	; 0x64
 800a6a8:	fb01 f303 	mul.w	r3, r1, r3
 800a6ac:	1ad3      	subs	r3, r2, r3
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	3332      	adds	r3, #50	; 0x32
 800a6b2:	4a86      	ldr	r2, [pc, #536]	; (800a8cc <UART_SetConfig+0x384>)
 800a6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b8:	095b      	lsrs	r3, r3, #5
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a6c0:	4498      	add	r8, r3
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	461d      	mov	r5, r3
 800a6c6:	f04f 0600 	mov.w	r6, #0
 800a6ca:	46a9      	mov	r9, r5
 800a6cc:	46b2      	mov	sl, r6
 800a6ce:	eb19 0309 	adds.w	r3, r9, r9
 800a6d2:	eb4a 040a 	adc.w	r4, sl, sl
 800a6d6:	4699      	mov	r9, r3
 800a6d8:	46a2      	mov	sl, r4
 800a6da:	eb19 0905 	adds.w	r9, r9, r5
 800a6de:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6e2:	f04f 0100 	mov.w	r1, #0
 800a6e6:	f04f 0200 	mov.w	r2, #0
 800a6ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6f6:	4689      	mov	r9, r1
 800a6f8:	4692      	mov	sl, r2
 800a6fa:	eb19 0005 	adds.w	r0, r9, r5
 800a6fe:	eb4a 0106 	adc.w	r1, sl, r6
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	461d      	mov	r5, r3
 800a708:	f04f 0600 	mov.w	r6, #0
 800a70c:	196b      	adds	r3, r5, r5
 800a70e:	eb46 0406 	adc.w	r4, r6, r6
 800a712:	461a      	mov	r2, r3
 800a714:	4623      	mov	r3, r4
 800a716:	f7f6 fab7 	bl	8000c88 <__aeabi_uldivmod>
 800a71a:	4603      	mov	r3, r0
 800a71c:	460c      	mov	r4, r1
 800a71e:	461a      	mov	r2, r3
 800a720:	4b6a      	ldr	r3, [pc, #424]	; (800a8cc <UART_SetConfig+0x384>)
 800a722:	fba3 1302 	umull	r1, r3, r3, r2
 800a726:	095b      	lsrs	r3, r3, #5
 800a728:	2164      	movs	r1, #100	; 0x64
 800a72a:	fb01 f303 	mul.w	r3, r1, r3
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	00db      	lsls	r3, r3, #3
 800a732:	3332      	adds	r3, #50	; 0x32
 800a734:	4a65      	ldr	r2, [pc, #404]	; (800a8cc <UART_SetConfig+0x384>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	095b      	lsrs	r3, r3, #5
 800a73c:	f003 0207 	and.w	r2, r3, #7
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4442      	add	r2, r8
 800a746:	609a      	str	r2, [r3, #8]
 800a748:	e26f      	b.n	800ac2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a74a:	f7fe f981 	bl	8008a50 <HAL_RCC_GetPCLK1Freq>
 800a74e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	461d      	mov	r5, r3
 800a754:	f04f 0600 	mov.w	r6, #0
 800a758:	46a8      	mov	r8, r5
 800a75a:	46b1      	mov	r9, r6
 800a75c:	eb18 0308 	adds.w	r3, r8, r8
 800a760:	eb49 0409 	adc.w	r4, r9, r9
 800a764:	4698      	mov	r8, r3
 800a766:	46a1      	mov	r9, r4
 800a768:	eb18 0805 	adds.w	r8, r8, r5
 800a76c:	eb49 0906 	adc.w	r9, r9, r6
 800a770:	f04f 0100 	mov.w	r1, #0
 800a774:	f04f 0200 	mov.w	r2, #0
 800a778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a77c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a784:	4688      	mov	r8, r1
 800a786:	4691      	mov	r9, r2
 800a788:	eb18 0005 	adds.w	r0, r8, r5
 800a78c:	eb49 0106 	adc.w	r1, r9, r6
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	461d      	mov	r5, r3
 800a796:	f04f 0600 	mov.w	r6, #0
 800a79a:	196b      	adds	r3, r5, r5
 800a79c:	eb46 0406 	adc.w	r4, r6, r6
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4623      	mov	r3, r4
 800a7a4:	f7f6 fa70 	bl	8000c88 <__aeabi_uldivmod>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4b47      	ldr	r3, [pc, #284]	; (800a8cc <UART_SetConfig+0x384>)
 800a7b0:	fba3 2302 	umull	r2, r3, r3, r2
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	461d      	mov	r5, r3
 800a7be:	f04f 0600 	mov.w	r6, #0
 800a7c2:	46a9      	mov	r9, r5
 800a7c4:	46b2      	mov	sl, r6
 800a7c6:	eb19 0309 	adds.w	r3, r9, r9
 800a7ca:	eb4a 040a 	adc.w	r4, sl, sl
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	eb19 0905 	adds.w	r9, r9, r5
 800a7d6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7da:	f04f 0100 	mov.w	r1, #0
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7ee:	4689      	mov	r9, r1
 800a7f0:	4692      	mov	sl, r2
 800a7f2:	eb19 0005 	adds.w	r0, r9, r5
 800a7f6:	eb4a 0106 	adc.w	r1, sl, r6
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	461d      	mov	r5, r3
 800a800:	f04f 0600 	mov.w	r6, #0
 800a804:	196b      	adds	r3, r5, r5
 800a806:	eb46 0406 	adc.w	r4, r6, r6
 800a80a:	461a      	mov	r2, r3
 800a80c:	4623      	mov	r3, r4
 800a80e:	f7f6 fa3b 	bl	8000c88 <__aeabi_uldivmod>
 800a812:	4603      	mov	r3, r0
 800a814:	460c      	mov	r4, r1
 800a816:	461a      	mov	r2, r3
 800a818:	4b2c      	ldr	r3, [pc, #176]	; (800a8cc <UART_SetConfig+0x384>)
 800a81a:	fba3 1302 	umull	r1, r3, r3, r2
 800a81e:	095b      	lsrs	r3, r3, #5
 800a820:	2164      	movs	r1, #100	; 0x64
 800a822:	fb01 f303 	mul.w	r3, r1, r3
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	00db      	lsls	r3, r3, #3
 800a82a:	3332      	adds	r3, #50	; 0x32
 800a82c:	4a27      	ldr	r2, [pc, #156]	; (800a8cc <UART_SetConfig+0x384>)
 800a82e:	fba2 2303 	umull	r2, r3, r2, r3
 800a832:	095b      	lsrs	r3, r3, #5
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a83a:	4498      	add	r8, r3
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	461d      	mov	r5, r3
 800a840:	f04f 0600 	mov.w	r6, #0
 800a844:	46a9      	mov	r9, r5
 800a846:	46b2      	mov	sl, r6
 800a848:	eb19 0309 	adds.w	r3, r9, r9
 800a84c:	eb4a 040a 	adc.w	r4, sl, sl
 800a850:	4699      	mov	r9, r3
 800a852:	46a2      	mov	sl, r4
 800a854:	eb19 0905 	adds.w	r9, r9, r5
 800a858:	eb4a 0a06 	adc.w	sl, sl, r6
 800a85c:	f04f 0100 	mov.w	r1, #0
 800a860:	f04f 0200 	mov.w	r2, #0
 800a864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a868:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a86c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a870:	4689      	mov	r9, r1
 800a872:	4692      	mov	sl, r2
 800a874:	eb19 0005 	adds.w	r0, r9, r5
 800a878:	eb4a 0106 	adc.w	r1, sl, r6
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	461d      	mov	r5, r3
 800a882:	f04f 0600 	mov.w	r6, #0
 800a886:	196b      	adds	r3, r5, r5
 800a888:	eb46 0406 	adc.w	r4, r6, r6
 800a88c:	461a      	mov	r2, r3
 800a88e:	4623      	mov	r3, r4
 800a890:	f7f6 f9fa 	bl	8000c88 <__aeabi_uldivmod>
 800a894:	4603      	mov	r3, r0
 800a896:	460c      	mov	r4, r1
 800a898:	461a      	mov	r2, r3
 800a89a:	4b0c      	ldr	r3, [pc, #48]	; (800a8cc <UART_SetConfig+0x384>)
 800a89c:	fba3 1302 	umull	r1, r3, r3, r2
 800a8a0:	095b      	lsrs	r3, r3, #5
 800a8a2:	2164      	movs	r1, #100	; 0x64
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	00db      	lsls	r3, r3, #3
 800a8ac:	3332      	adds	r3, #50	; 0x32
 800a8ae:	4a07      	ldr	r2, [pc, #28]	; (800a8cc <UART_SetConfig+0x384>)
 800a8b0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b4:	095b      	lsrs	r3, r3, #5
 800a8b6:	f003 0207 	and.w	r2, r3, #7
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4442      	add	r2, r8
 800a8c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a8c2:	e1b2      	b.n	800ac2a <UART_SetConfig+0x6e2>
 800a8c4:	40011000 	.word	0x40011000
 800a8c8:	40011400 	.word	0x40011400
 800a8cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4ad7      	ldr	r2, [pc, #860]	; (800ac34 <UART_SetConfig+0x6ec>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d005      	beq.n	800a8e6 <UART_SetConfig+0x39e>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4ad6      	ldr	r2, [pc, #856]	; (800ac38 <UART_SetConfig+0x6f0>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	f040 80d1 	bne.w	800aa88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8e6:	f7fe f8c7 	bl	8008a78 <HAL_RCC_GetPCLK2Freq>
 800a8ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	469a      	mov	sl, r3
 800a8f0:	f04f 0b00 	mov.w	fp, #0
 800a8f4:	46d0      	mov	r8, sl
 800a8f6:	46d9      	mov	r9, fp
 800a8f8:	eb18 0308 	adds.w	r3, r8, r8
 800a8fc:	eb49 0409 	adc.w	r4, r9, r9
 800a900:	4698      	mov	r8, r3
 800a902:	46a1      	mov	r9, r4
 800a904:	eb18 080a 	adds.w	r8, r8, sl
 800a908:	eb49 090b 	adc.w	r9, r9, fp
 800a90c:	f04f 0100 	mov.w	r1, #0
 800a910:	f04f 0200 	mov.w	r2, #0
 800a914:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a918:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a91c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a920:	4688      	mov	r8, r1
 800a922:	4691      	mov	r9, r2
 800a924:	eb1a 0508 	adds.w	r5, sl, r8
 800a928:	eb4b 0609 	adc.w	r6, fp, r9
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	4619      	mov	r1, r3
 800a932:	f04f 0200 	mov.w	r2, #0
 800a936:	f04f 0300 	mov.w	r3, #0
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	0094      	lsls	r4, r2, #2
 800a940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a944:	008b      	lsls	r3, r1, #2
 800a946:	461a      	mov	r2, r3
 800a948:	4623      	mov	r3, r4
 800a94a:	4628      	mov	r0, r5
 800a94c:	4631      	mov	r1, r6
 800a94e:	f7f6 f99b 	bl	8000c88 <__aeabi_uldivmod>
 800a952:	4603      	mov	r3, r0
 800a954:	460c      	mov	r4, r1
 800a956:	461a      	mov	r2, r3
 800a958:	4bb8      	ldr	r3, [pc, #736]	; (800ac3c <UART_SetConfig+0x6f4>)
 800a95a:	fba3 2302 	umull	r2, r3, r3, r2
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	469b      	mov	fp, r3
 800a968:	f04f 0c00 	mov.w	ip, #0
 800a96c:	46d9      	mov	r9, fp
 800a96e:	46e2      	mov	sl, ip
 800a970:	eb19 0309 	adds.w	r3, r9, r9
 800a974:	eb4a 040a 	adc.w	r4, sl, sl
 800a978:	4699      	mov	r9, r3
 800a97a:	46a2      	mov	sl, r4
 800a97c:	eb19 090b 	adds.w	r9, r9, fp
 800a980:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a984:	f04f 0100 	mov.w	r1, #0
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a998:	4689      	mov	r9, r1
 800a99a:	4692      	mov	sl, r2
 800a99c:	eb1b 0509 	adds.w	r5, fp, r9
 800a9a0:	eb4c 060a 	adc.w	r6, ip, sl
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	f04f 0200 	mov.w	r2, #0
 800a9ae:	f04f 0300 	mov.w	r3, #0
 800a9b2:	f04f 0400 	mov.w	r4, #0
 800a9b6:	0094      	lsls	r4, r2, #2
 800a9b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9bc:	008b      	lsls	r3, r1, #2
 800a9be:	461a      	mov	r2, r3
 800a9c0:	4623      	mov	r3, r4
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	f7f6 f95f 	bl	8000c88 <__aeabi_uldivmod>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4b9a      	ldr	r3, [pc, #616]	; (800ac3c <UART_SetConfig+0x6f4>)
 800a9d2:	fba3 1302 	umull	r1, r3, r3, r2
 800a9d6:	095b      	lsrs	r3, r3, #5
 800a9d8:	2164      	movs	r1, #100	; 0x64
 800a9da:	fb01 f303 	mul.w	r3, r1, r3
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	011b      	lsls	r3, r3, #4
 800a9e2:	3332      	adds	r3, #50	; 0x32
 800a9e4:	4a95      	ldr	r2, [pc, #596]	; (800ac3c <UART_SetConfig+0x6f4>)
 800a9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ea:	095b      	lsrs	r3, r3, #5
 800a9ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9f0:	4498      	add	r8, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	469b      	mov	fp, r3
 800a9f6:	f04f 0c00 	mov.w	ip, #0
 800a9fa:	46d9      	mov	r9, fp
 800a9fc:	46e2      	mov	sl, ip
 800a9fe:	eb19 0309 	adds.w	r3, r9, r9
 800aa02:	eb4a 040a 	adc.w	r4, sl, sl
 800aa06:	4699      	mov	r9, r3
 800aa08:	46a2      	mov	sl, r4
 800aa0a:	eb19 090b 	adds.w	r9, r9, fp
 800aa0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800aa12:	f04f 0100 	mov.w	r1, #0
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa26:	4689      	mov	r9, r1
 800aa28:	4692      	mov	sl, r2
 800aa2a:	eb1b 0509 	adds.w	r5, fp, r9
 800aa2e:	eb4c 060a 	adc.w	r6, ip, sl
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	4619      	mov	r1, r3
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	f04f 0400 	mov.w	r4, #0
 800aa44:	0094      	lsls	r4, r2, #2
 800aa46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa4a:	008b      	lsls	r3, r1, #2
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	4623      	mov	r3, r4
 800aa50:	4628      	mov	r0, r5
 800aa52:	4631      	mov	r1, r6
 800aa54:	f7f6 f918 	bl	8000c88 <__aeabi_uldivmod>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4b77      	ldr	r3, [pc, #476]	; (800ac3c <UART_SetConfig+0x6f4>)
 800aa60:	fba3 1302 	umull	r1, r3, r3, r2
 800aa64:	095b      	lsrs	r3, r3, #5
 800aa66:	2164      	movs	r1, #100	; 0x64
 800aa68:	fb01 f303 	mul.w	r3, r1, r3
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	3332      	adds	r3, #50	; 0x32
 800aa72:	4a72      	ldr	r2, [pc, #456]	; (800ac3c <UART_SetConfig+0x6f4>)
 800aa74:	fba2 2303 	umull	r2, r3, r2, r3
 800aa78:	095b      	lsrs	r3, r3, #5
 800aa7a:	f003 020f 	and.w	r2, r3, #15
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4442      	add	r2, r8
 800aa84:	609a      	str	r2, [r3, #8]
 800aa86:	e0d0      	b.n	800ac2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa88:	f7fd ffe2 	bl	8008a50 <HAL_RCC_GetPCLK1Freq>
 800aa8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	469a      	mov	sl, r3
 800aa92:	f04f 0b00 	mov.w	fp, #0
 800aa96:	46d0      	mov	r8, sl
 800aa98:	46d9      	mov	r9, fp
 800aa9a:	eb18 0308 	adds.w	r3, r8, r8
 800aa9e:	eb49 0409 	adc.w	r4, r9, r9
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	46a1      	mov	r9, r4
 800aaa6:	eb18 080a 	adds.w	r8, r8, sl
 800aaaa:	eb49 090b 	adc.w	r9, r9, fp
 800aaae:	f04f 0100 	mov.w	r1, #0
 800aab2:	f04f 0200 	mov.w	r2, #0
 800aab6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aaba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aabe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aac2:	4688      	mov	r8, r1
 800aac4:	4691      	mov	r9, r2
 800aac6:	eb1a 0508 	adds.w	r5, sl, r8
 800aaca:	eb4b 0609 	adc.w	r6, fp, r9
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	4619      	mov	r1, r3
 800aad4:	f04f 0200 	mov.w	r2, #0
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	f04f 0400 	mov.w	r4, #0
 800aae0:	0094      	lsls	r4, r2, #2
 800aae2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aae6:	008b      	lsls	r3, r1, #2
 800aae8:	461a      	mov	r2, r3
 800aaea:	4623      	mov	r3, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	4631      	mov	r1, r6
 800aaf0:	f7f6 f8ca 	bl	8000c88 <__aeabi_uldivmod>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	461a      	mov	r2, r3
 800aafa:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <UART_SetConfig+0x6f4>)
 800aafc:	fba3 2302 	umull	r2, r3, r3, r2
 800ab00:	095b      	lsrs	r3, r3, #5
 800ab02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	469b      	mov	fp, r3
 800ab0a:	f04f 0c00 	mov.w	ip, #0
 800ab0e:	46d9      	mov	r9, fp
 800ab10:	46e2      	mov	sl, ip
 800ab12:	eb19 0309 	adds.w	r3, r9, r9
 800ab16:	eb4a 040a 	adc.w	r4, sl, sl
 800ab1a:	4699      	mov	r9, r3
 800ab1c:	46a2      	mov	sl, r4
 800ab1e:	eb19 090b 	adds.w	r9, r9, fp
 800ab22:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab26:	f04f 0100 	mov.w	r1, #0
 800ab2a:	f04f 0200 	mov.w	r2, #0
 800ab2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab3a:	4689      	mov	r9, r1
 800ab3c:	4692      	mov	sl, r2
 800ab3e:	eb1b 0509 	adds.w	r5, fp, r9
 800ab42:	eb4c 060a 	adc.w	r6, ip, sl
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	f04f 0200 	mov.w	r2, #0
 800ab50:	f04f 0300 	mov.w	r3, #0
 800ab54:	f04f 0400 	mov.w	r4, #0
 800ab58:	0094      	lsls	r4, r2, #2
 800ab5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab5e:	008b      	lsls	r3, r1, #2
 800ab60:	461a      	mov	r2, r3
 800ab62:	4623      	mov	r3, r4
 800ab64:	4628      	mov	r0, r5
 800ab66:	4631      	mov	r1, r6
 800ab68:	f7f6 f88e 	bl	8000c88 <__aeabi_uldivmod>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	461a      	mov	r2, r3
 800ab72:	4b32      	ldr	r3, [pc, #200]	; (800ac3c <UART_SetConfig+0x6f4>)
 800ab74:	fba3 1302 	umull	r1, r3, r3, r2
 800ab78:	095b      	lsrs	r3, r3, #5
 800ab7a:	2164      	movs	r1, #100	; 0x64
 800ab7c:	fb01 f303 	mul.w	r3, r1, r3
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	011b      	lsls	r3, r3, #4
 800ab84:	3332      	adds	r3, #50	; 0x32
 800ab86:	4a2d      	ldr	r2, [pc, #180]	; (800ac3c <UART_SetConfig+0x6f4>)
 800ab88:	fba2 2303 	umull	r2, r3, r2, r3
 800ab8c:	095b      	lsrs	r3, r3, #5
 800ab8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab92:	4498      	add	r8, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	469b      	mov	fp, r3
 800ab98:	f04f 0c00 	mov.w	ip, #0
 800ab9c:	46d9      	mov	r9, fp
 800ab9e:	46e2      	mov	sl, ip
 800aba0:	eb19 0309 	adds.w	r3, r9, r9
 800aba4:	eb4a 040a 	adc.w	r4, sl, sl
 800aba8:	4699      	mov	r9, r3
 800abaa:	46a2      	mov	sl, r4
 800abac:	eb19 090b 	adds.w	r9, r9, fp
 800abb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800abb4:	f04f 0100 	mov.w	r1, #0
 800abb8:	f04f 0200 	mov.w	r2, #0
 800abbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800abc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800abc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abc8:	4689      	mov	r9, r1
 800abca:	4692      	mov	sl, r2
 800abcc:	eb1b 0509 	adds.w	r5, fp, r9
 800abd0:	eb4c 060a 	adc.w	r6, ip, sl
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4619      	mov	r1, r3
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	f04f 0300 	mov.w	r3, #0
 800abe2:	f04f 0400 	mov.w	r4, #0
 800abe6:	0094      	lsls	r4, r2, #2
 800abe8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abec:	008b      	lsls	r3, r1, #2
 800abee:	461a      	mov	r2, r3
 800abf0:	4623      	mov	r3, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	4631      	mov	r1, r6
 800abf6:	f7f6 f847 	bl	8000c88 <__aeabi_uldivmod>
 800abfa:	4603      	mov	r3, r0
 800abfc:	460c      	mov	r4, r1
 800abfe:	461a      	mov	r2, r3
 800ac00:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <UART_SetConfig+0x6f4>)
 800ac02:	fba3 1302 	umull	r1, r3, r3, r2
 800ac06:	095b      	lsrs	r3, r3, #5
 800ac08:	2164      	movs	r1, #100	; 0x64
 800ac0a:	fb01 f303 	mul.w	r3, r1, r3
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	011b      	lsls	r3, r3, #4
 800ac12:	3332      	adds	r3, #50	; 0x32
 800ac14:	4a09      	ldr	r2, [pc, #36]	; (800ac3c <UART_SetConfig+0x6f4>)
 800ac16:	fba2 2303 	umull	r2, r3, r2, r3
 800ac1a:	095b      	lsrs	r3, r3, #5
 800ac1c:	f003 020f 	and.w	r2, r3, #15
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4442      	add	r2, r8
 800ac26:	609a      	str	r2, [r3, #8]
}
 800ac28:	e7ff      	b.n	800ac2a <UART_SetConfig+0x6e2>
 800ac2a:	bf00      	nop
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	40011000 	.word	0x40011000
 800ac38:	40011400 	.word	0x40011400
 800ac3c:	51eb851f 	.word	0x51eb851f

0800ac40 <cos>:
 800ac40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac42:	ec51 0b10 	vmov	r0, r1, d0
 800ac46:	4a1e      	ldr	r2, [pc, #120]	; (800acc0 <cos+0x80>)
 800ac48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	dc06      	bgt.n	800ac5e <cos+0x1e>
 800ac50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800acb8 <cos+0x78>
 800ac54:	f000 fb58 	bl	800b308 <__kernel_cos>
 800ac58:	ec51 0b10 	vmov	r0, r1, d0
 800ac5c:	e007      	b.n	800ac6e <cos+0x2e>
 800ac5e:	4a19      	ldr	r2, [pc, #100]	; (800acc4 <cos+0x84>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	dd09      	ble.n	800ac78 <cos+0x38>
 800ac64:	ee10 2a10 	vmov	r2, s0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	f7f5 fb0d 	bl	8000288 <__aeabi_dsub>
 800ac6e:	ec41 0b10 	vmov	d0, r0, r1
 800ac72:	b005      	add	sp, #20
 800ac74:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac78:	4668      	mov	r0, sp
 800ac7a:	f000 f951 	bl	800af20 <__ieee754_rem_pio2>
 800ac7e:	f000 0003 	and.w	r0, r0, #3
 800ac82:	2801      	cmp	r0, #1
 800ac84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ac88:	ed9d 0b00 	vldr	d0, [sp]
 800ac8c:	d007      	beq.n	800ac9e <cos+0x5e>
 800ac8e:	2802      	cmp	r0, #2
 800ac90:	d00e      	beq.n	800acb0 <cos+0x70>
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d0de      	beq.n	800ac54 <cos+0x14>
 800ac96:	2001      	movs	r0, #1
 800ac98:	f000 ff3e 	bl	800bb18 <__kernel_sin>
 800ac9c:	e7dc      	b.n	800ac58 <cos+0x18>
 800ac9e:	f000 ff3b 	bl	800bb18 <__kernel_sin>
 800aca2:	ec53 2b10 	vmov	r2, r3, d0
 800aca6:	ee10 0a10 	vmov	r0, s0
 800acaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800acae:	e7de      	b.n	800ac6e <cos+0x2e>
 800acb0:	f000 fb2a 	bl	800b308 <__kernel_cos>
 800acb4:	e7f5      	b.n	800aca2 <cos+0x62>
 800acb6:	bf00      	nop
	...
 800acc0:	3fe921fb 	.word	0x3fe921fb
 800acc4:	7fefffff 	.word	0x7fefffff

0800acc8 <sin>:
 800acc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acca:	ec51 0b10 	vmov	r0, r1, d0
 800acce:	4a20      	ldr	r2, [pc, #128]	; (800ad50 <sin+0x88>)
 800acd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acd4:	4293      	cmp	r3, r2
 800acd6:	dc07      	bgt.n	800ace8 <sin+0x20>
 800acd8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ad48 <sin+0x80>
 800acdc:	2000      	movs	r0, #0
 800acde:	f000 ff1b 	bl	800bb18 <__kernel_sin>
 800ace2:	ec51 0b10 	vmov	r0, r1, d0
 800ace6:	e007      	b.n	800acf8 <sin+0x30>
 800ace8:	4a1a      	ldr	r2, [pc, #104]	; (800ad54 <sin+0x8c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	dd09      	ble.n	800ad02 <sin+0x3a>
 800acee:	ee10 2a10 	vmov	r2, s0
 800acf2:	460b      	mov	r3, r1
 800acf4:	f7f5 fac8 	bl	8000288 <__aeabi_dsub>
 800acf8:	ec41 0b10 	vmov	d0, r0, r1
 800acfc:	b005      	add	sp, #20
 800acfe:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad02:	4668      	mov	r0, sp
 800ad04:	f000 f90c 	bl	800af20 <__ieee754_rem_pio2>
 800ad08:	f000 0003 	and.w	r0, r0, #3
 800ad0c:	2801      	cmp	r0, #1
 800ad0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ad12:	ed9d 0b00 	vldr	d0, [sp]
 800ad16:	d004      	beq.n	800ad22 <sin+0x5a>
 800ad18:	2802      	cmp	r0, #2
 800ad1a:	d005      	beq.n	800ad28 <sin+0x60>
 800ad1c:	b970      	cbnz	r0, 800ad3c <sin+0x74>
 800ad1e:	2001      	movs	r0, #1
 800ad20:	e7dd      	b.n	800acde <sin+0x16>
 800ad22:	f000 faf1 	bl	800b308 <__kernel_cos>
 800ad26:	e7dc      	b.n	800ace2 <sin+0x1a>
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f000 fef5 	bl	800bb18 <__kernel_sin>
 800ad2e:	ec53 2b10 	vmov	r2, r3, d0
 800ad32:	ee10 0a10 	vmov	r0, s0
 800ad36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad3a:	e7dd      	b.n	800acf8 <sin+0x30>
 800ad3c:	f000 fae4 	bl	800b308 <__kernel_cos>
 800ad40:	e7f5      	b.n	800ad2e <sin+0x66>
 800ad42:	bf00      	nop
 800ad44:	f3af 8000 	nop.w
	...
 800ad50:	3fe921fb 	.word	0x3fe921fb
 800ad54:	7fefffff 	.word	0x7fefffff

0800ad58 <atan2>:
 800ad58:	f000 b802 	b.w	800ad60 <__ieee754_atan2>
 800ad5c:	0000      	movs	r0, r0
	...

0800ad60 <__ieee754_atan2>:
 800ad60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	ec57 6b11 	vmov	r6, r7, d1
 800ad68:	4273      	negs	r3, r6
 800ad6a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad6e:	4333      	orrs	r3, r6
 800ad70:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800af18 <__ieee754_atan2+0x1b8>
 800ad74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad78:	4573      	cmp	r3, lr
 800ad7a:	ec51 0b10 	vmov	r0, r1, d0
 800ad7e:	ee11 8a10 	vmov	r8, s2
 800ad82:	d80a      	bhi.n	800ad9a <__ieee754_atan2+0x3a>
 800ad84:	4244      	negs	r4, r0
 800ad86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad8a:	4304      	orrs	r4, r0
 800ad8c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad90:	4574      	cmp	r4, lr
 800ad92:	468c      	mov	ip, r1
 800ad94:	ee10 9a10 	vmov	r9, s0
 800ad98:	d907      	bls.n	800adaa <__ieee754_atan2+0x4a>
 800ad9a:	4632      	mov	r2, r6
 800ad9c:	463b      	mov	r3, r7
 800ad9e:	f7f5 fa75 	bl	800028c <__adddf3>
 800ada2:	ec41 0b10 	vmov	d0, r0, r1
 800ada6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adaa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800adae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800adb2:	4334      	orrs	r4, r6
 800adb4:	d103      	bne.n	800adbe <__ieee754_atan2+0x5e>
 800adb6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adba:	f000 bf69 	b.w	800bc90 <atan>
 800adbe:	17bc      	asrs	r4, r7, #30
 800adc0:	f004 0402 	and.w	r4, r4, #2
 800adc4:	ea53 0909 	orrs.w	r9, r3, r9
 800adc8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800adcc:	d107      	bne.n	800adde <__ieee754_atan2+0x7e>
 800adce:	2c02      	cmp	r4, #2
 800add0:	d073      	beq.n	800aeba <__ieee754_atan2+0x15a>
 800add2:	2c03      	cmp	r4, #3
 800add4:	d1e5      	bne.n	800ada2 <__ieee754_atan2+0x42>
 800add6:	a13e      	add	r1, pc, #248	; (adr r1, 800aed0 <__ieee754_atan2+0x170>)
 800add8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800addc:	e7e1      	b.n	800ada2 <__ieee754_atan2+0x42>
 800adde:	ea52 0808 	orrs.w	r8, r2, r8
 800ade2:	d106      	bne.n	800adf2 <__ieee754_atan2+0x92>
 800ade4:	f1bc 0f00 	cmp.w	ip, #0
 800ade8:	da6b      	bge.n	800aec2 <__ieee754_atan2+0x162>
 800adea:	a13b      	add	r1, pc, #236	; (adr r1, 800aed8 <__ieee754_atan2+0x178>)
 800adec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adf0:	e7d7      	b.n	800ada2 <__ieee754_atan2+0x42>
 800adf2:	4572      	cmp	r2, lr
 800adf4:	d120      	bne.n	800ae38 <__ieee754_atan2+0xd8>
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d111      	bne.n	800ae1e <__ieee754_atan2+0xbe>
 800adfa:	2c02      	cmp	r4, #2
 800adfc:	d007      	beq.n	800ae0e <__ieee754_atan2+0xae>
 800adfe:	2c03      	cmp	r4, #3
 800ae00:	d009      	beq.n	800ae16 <__ieee754_atan2+0xb6>
 800ae02:	2c01      	cmp	r4, #1
 800ae04:	d155      	bne.n	800aeb2 <__ieee754_atan2+0x152>
 800ae06:	a136      	add	r1, pc, #216	; (adr r1, 800aee0 <__ieee754_atan2+0x180>)
 800ae08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae0c:	e7c9      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae0e:	a136      	add	r1, pc, #216	; (adr r1, 800aee8 <__ieee754_atan2+0x188>)
 800ae10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae14:	e7c5      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae16:	a136      	add	r1, pc, #216	; (adr r1, 800aef0 <__ieee754_atan2+0x190>)
 800ae18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae1c:	e7c1      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae1e:	2c02      	cmp	r4, #2
 800ae20:	d04b      	beq.n	800aeba <__ieee754_atan2+0x15a>
 800ae22:	2c03      	cmp	r4, #3
 800ae24:	d0d7      	beq.n	800add6 <__ieee754_atan2+0x76>
 800ae26:	2c01      	cmp	r4, #1
 800ae28:	f04f 0000 	mov.w	r0, #0
 800ae2c:	d102      	bne.n	800ae34 <__ieee754_atan2+0xd4>
 800ae2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ae32:	e7b6      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae34:	2100      	movs	r1, #0
 800ae36:	e7b4      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae38:	4573      	cmp	r3, lr
 800ae3a:	d0d3      	beq.n	800ade4 <__ieee754_atan2+0x84>
 800ae3c:	1a9b      	subs	r3, r3, r2
 800ae3e:	151b      	asrs	r3, r3, #20
 800ae40:	2b3c      	cmp	r3, #60	; 0x3c
 800ae42:	dc1e      	bgt.n	800ae82 <__ieee754_atan2+0x122>
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	da01      	bge.n	800ae4c <__ieee754_atan2+0xec>
 800ae48:	333c      	adds	r3, #60	; 0x3c
 800ae4a:	db1e      	blt.n	800ae8a <__ieee754_atan2+0x12a>
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	463b      	mov	r3, r7
 800ae50:	f7f5 fcfc 	bl	800084c <__aeabi_ddiv>
 800ae54:	ec41 0b10 	vmov	d0, r0, r1
 800ae58:	f001 f8ba 	bl	800bfd0 <fabs>
 800ae5c:	f000 ff18 	bl	800bc90 <atan>
 800ae60:	ec51 0b10 	vmov	r0, r1, d0
 800ae64:	2c01      	cmp	r4, #1
 800ae66:	d013      	beq.n	800ae90 <__ieee754_atan2+0x130>
 800ae68:	2c02      	cmp	r4, #2
 800ae6a:	d015      	beq.n	800ae98 <__ieee754_atan2+0x138>
 800ae6c:	2c00      	cmp	r4, #0
 800ae6e:	d098      	beq.n	800ada2 <__ieee754_atan2+0x42>
 800ae70:	a321      	add	r3, pc, #132	; (adr r3, 800aef8 <__ieee754_atan2+0x198>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7f5 fa07 	bl	8000288 <__aeabi_dsub>
 800ae7a:	a321      	add	r3, pc, #132	; (adr r3, 800af00 <__ieee754_atan2+0x1a0>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	e014      	b.n	800aeac <__ieee754_atan2+0x14c>
 800ae82:	a121      	add	r1, pc, #132	; (adr r1, 800af08 <__ieee754_atan2+0x1a8>)
 800ae84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae88:	e7ec      	b.n	800ae64 <__ieee754_atan2+0x104>
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	e7e9      	b.n	800ae64 <__ieee754_atan2+0x104>
 800ae90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae94:	4619      	mov	r1, r3
 800ae96:	e784      	b.n	800ada2 <__ieee754_atan2+0x42>
 800ae98:	a317      	add	r3, pc, #92	; (adr r3, 800aef8 <__ieee754_atan2+0x198>)
 800ae9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9e:	f7f5 f9f3 	bl	8000288 <__aeabi_dsub>
 800aea2:	4602      	mov	r2, r0
 800aea4:	460b      	mov	r3, r1
 800aea6:	a116      	add	r1, pc, #88	; (adr r1, 800af00 <__ieee754_atan2+0x1a0>)
 800aea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeac:	f7f5 f9ec 	bl	8000288 <__aeabi_dsub>
 800aeb0:	e777      	b.n	800ada2 <__ieee754_atan2+0x42>
 800aeb2:	a117      	add	r1, pc, #92	; (adr r1, 800af10 <__ieee754_atan2+0x1b0>)
 800aeb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeb8:	e773      	b.n	800ada2 <__ieee754_atan2+0x42>
 800aeba:	a111      	add	r1, pc, #68	; (adr r1, 800af00 <__ieee754_atan2+0x1a0>)
 800aebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec0:	e76f      	b.n	800ada2 <__ieee754_atan2+0x42>
 800aec2:	a111      	add	r1, pc, #68	; (adr r1, 800af08 <__ieee754_atan2+0x1a8>)
 800aec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec8:	e76b      	b.n	800ada2 <__ieee754_atan2+0x42>
 800aeca:	bf00      	nop
 800aecc:	f3af 8000 	nop.w
 800aed0:	54442d18 	.word	0x54442d18
 800aed4:	c00921fb 	.word	0xc00921fb
 800aed8:	54442d18 	.word	0x54442d18
 800aedc:	bff921fb 	.word	0xbff921fb
 800aee0:	54442d18 	.word	0x54442d18
 800aee4:	bfe921fb 	.word	0xbfe921fb
 800aee8:	7f3321d2 	.word	0x7f3321d2
 800aeec:	4002d97c 	.word	0x4002d97c
 800aef0:	7f3321d2 	.word	0x7f3321d2
 800aef4:	c002d97c 	.word	0xc002d97c
 800aef8:	33145c07 	.word	0x33145c07
 800aefc:	3ca1a626 	.word	0x3ca1a626
 800af00:	54442d18 	.word	0x54442d18
 800af04:	400921fb 	.word	0x400921fb
 800af08:	54442d18 	.word	0x54442d18
 800af0c:	3ff921fb 	.word	0x3ff921fb
 800af10:	54442d18 	.word	0x54442d18
 800af14:	3fe921fb 	.word	0x3fe921fb
 800af18:	7ff00000 	.word	0x7ff00000
 800af1c:	00000000 	.word	0x00000000

0800af20 <__ieee754_rem_pio2>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	ec57 6b10 	vmov	r6, r7, d0
 800af28:	4bc3      	ldr	r3, [pc, #780]	; (800b238 <__ieee754_rem_pio2+0x318>)
 800af2a:	b08d      	sub	sp, #52	; 0x34
 800af2c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800af30:	4598      	cmp	r8, r3
 800af32:	4604      	mov	r4, r0
 800af34:	9704      	str	r7, [sp, #16]
 800af36:	dc07      	bgt.n	800af48 <__ieee754_rem_pio2+0x28>
 800af38:	2200      	movs	r2, #0
 800af3a:	2300      	movs	r3, #0
 800af3c:	ed84 0b00 	vstr	d0, [r4]
 800af40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800af44:	2500      	movs	r5, #0
 800af46:	e027      	b.n	800af98 <__ieee754_rem_pio2+0x78>
 800af48:	4bbc      	ldr	r3, [pc, #752]	; (800b23c <__ieee754_rem_pio2+0x31c>)
 800af4a:	4598      	cmp	r8, r3
 800af4c:	dc75      	bgt.n	800b03a <__ieee754_rem_pio2+0x11a>
 800af4e:	9b04      	ldr	r3, [sp, #16]
 800af50:	4dbb      	ldr	r5, [pc, #748]	; (800b240 <__ieee754_rem_pio2+0x320>)
 800af52:	2b00      	cmp	r3, #0
 800af54:	ee10 0a10 	vmov	r0, s0
 800af58:	a3a9      	add	r3, pc, #676	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2e0>)
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	4639      	mov	r1, r7
 800af60:	dd36      	ble.n	800afd0 <__ieee754_rem_pio2+0xb0>
 800af62:	f7f5 f991 	bl	8000288 <__aeabi_dsub>
 800af66:	45a8      	cmp	r8, r5
 800af68:	4606      	mov	r6, r0
 800af6a:	460f      	mov	r7, r1
 800af6c:	d018      	beq.n	800afa0 <__ieee754_rem_pio2+0x80>
 800af6e:	a3a6      	add	r3, pc, #664	; (adr r3, 800b208 <__ieee754_rem_pio2+0x2e8>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	f7f5 f988 	bl	8000288 <__aeabi_dsub>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	e9c4 2300 	strd	r2, r3, [r4]
 800af80:	4630      	mov	r0, r6
 800af82:	4639      	mov	r1, r7
 800af84:	f7f5 f980 	bl	8000288 <__aeabi_dsub>
 800af88:	a39f      	add	r3, pc, #636	; (adr r3, 800b208 <__ieee754_rem_pio2+0x2e8>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 f97b 	bl	8000288 <__aeabi_dsub>
 800af92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800af96:	2501      	movs	r5, #1
 800af98:	4628      	mov	r0, r5
 800af9a:	b00d      	add	sp, #52	; 0x34
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	a39b      	add	r3, pc, #620	; (adr r3, 800b210 <__ieee754_rem_pio2+0x2f0>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 f96f 	bl	8000288 <__aeabi_dsub>
 800afaa:	a39b      	add	r3, pc, #620	; (adr r3, 800b218 <__ieee754_rem_pio2+0x2f8>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	4606      	mov	r6, r0
 800afb2:	460f      	mov	r7, r1
 800afb4:	f7f5 f968 	bl	8000288 <__aeabi_dsub>
 800afb8:	4602      	mov	r2, r0
 800afba:	460b      	mov	r3, r1
 800afbc:	e9c4 2300 	strd	r2, r3, [r4]
 800afc0:	4630      	mov	r0, r6
 800afc2:	4639      	mov	r1, r7
 800afc4:	f7f5 f960 	bl	8000288 <__aeabi_dsub>
 800afc8:	a393      	add	r3, pc, #588	; (adr r3, 800b218 <__ieee754_rem_pio2+0x2f8>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	e7de      	b.n	800af8e <__ieee754_rem_pio2+0x6e>
 800afd0:	f7f5 f95c 	bl	800028c <__adddf3>
 800afd4:	45a8      	cmp	r8, r5
 800afd6:	4606      	mov	r6, r0
 800afd8:	460f      	mov	r7, r1
 800afda:	d016      	beq.n	800b00a <__ieee754_rem_pio2+0xea>
 800afdc:	a38a      	add	r3, pc, #552	; (adr r3, 800b208 <__ieee754_rem_pio2+0x2e8>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 f953 	bl	800028c <__adddf3>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	e9c4 2300 	strd	r2, r3, [r4]
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 f949 	bl	8000288 <__aeabi_dsub>
 800aff6:	a384      	add	r3, pc, #528	; (adr r3, 800b208 <__ieee754_rem_pio2+0x2e8>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 f946 	bl	800028c <__adddf3>
 800b000:	f04f 35ff 	mov.w	r5, #4294967295
 800b004:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b008:	e7c6      	b.n	800af98 <__ieee754_rem_pio2+0x78>
 800b00a:	a381      	add	r3, pc, #516	; (adr r3, 800b210 <__ieee754_rem_pio2+0x2f0>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 f93c 	bl	800028c <__adddf3>
 800b014:	a380      	add	r3, pc, #512	; (adr r3, 800b218 <__ieee754_rem_pio2+0x2f8>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	4606      	mov	r6, r0
 800b01c:	460f      	mov	r7, r1
 800b01e:	f7f5 f935 	bl	800028c <__adddf3>
 800b022:	4602      	mov	r2, r0
 800b024:	460b      	mov	r3, r1
 800b026:	e9c4 2300 	strd	r2, r3, [r4]
 800b02a:	4630      	mov	r0, r6
 800b02c:	4639      	mov	r1, r7
 800b02e:	f7f5 f92b 	bl	8000288 <__aeabi_dsub>
 800b032:	a379      	add	r3, pc, #484	; (adr r3, 800b218 <__ieee754_rem_pio2+0x2f8>)
 800b034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b038:	e7e0      	b.n	800affc <__ieee754_rem_pio2+0xdc>
 800b03a:	4b82      	ldr	r3, [pc, #520]	; (800b244 <__ieee754_rem_pio2+0x324>)
 800b03c:	4598      	cmp	r8, r3
 800b03e:	f300 80d0 	bgt.w	800b1e2 <__ieee754_rem_pio2+0x2c2>
 800b042:	f000 ffc5 	bl	800bfd0 <fabs>
 800b046:	ec57 6b10 	vmov	r6, r7, d0
 800b04a:	ee10 0a10 	vmov	r0, s0
 800b04e:	a374      	add	r3, pc, #464	; (adr r3, 800b220 <__ieee754_rem_pio2+0x300>)
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 facf 	bl	80005f8 <__aeabi_dmul>
 800b05a:	2200      	movs	r2, #0
 800b05c:	4b7a      	ldr	r3, [pc, #488]	; (800b248 <__ieee754_rem_pio2+0x328>)
 800b05e:	f7f5 f915 	bl	800028c <__adddf3>
 800b062:	f7f5 fd79 	bl	8000b58 <__aeabi_d2iz>
 800b066:	4605      	mov	r5, r0
 800b068:	f7f5 fa5c 	bl	8000524 <__aeabi_i2d>
 800b06c:	a364      	add	r3, pc, #400	; (adr r3, 800b200 <__ieee754_rem_pio2+0x2e0>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4630      	mov	r0, r6
 800b080:	4639      	mov	r1, r7
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	a360      	add	r3, pc, #384	; (adr r3, 800b208 <__ieee754_rem_pio2+0x2e8>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	4682      	mov	sl, r0
 800b08e:	468b      	mov	fp, r1
 800b090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b094:	f7f5 fab0 	bl	80005f8 <__aeabi_dmul>
 800b098:	2d1f      	cmp	r5, #31
 800b09a:	4606      	mov	r6, r0
 800b09c:	460f      	mov	r7, r1
 800b09e:	dc0c      	bgt.n	800b0ba <__ieee754_rem_pio2+0x19a>
 800b0a0:	1e6a      	subs	r2, r5, #1
 800b0a2:	4b6a      	ldr	r3, [pc, #424]	; (800b24c <__ieee754_rem_pio2+0x32c>)
 800b0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a8:	4543      	cmp	r3, r8
 800b0aa:	d006      	beq.n	800b0ba <__ieee754_rem_pio2+0x19a>
 800b0ac:	4632      	mov	r2, r6
 800b0ae:	463b      	mov	r3, r7
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	f7f5 f8e8 	bl	8000288 <__aeabi_dsub>
 800b0b8:	e00e      	b.n	800b0d8 <__ieee754_rem_pio2+0x1b8>
 800b0ba:	4632      	mov	r2, r6
 800b0bc:	463b      	mov	r3, r7
 800b0be:	4650      	mov	r0, sl
 800b0c0:	4659      	mov	r1, fp
 800b0c2:	f7f5 f8e1 	bl	8000288 <__aeabi_dsub>
 800b0c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	9a05      	ldr	r2, [sp, #20]
 800b0ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b10      	cmp	r3, #16
 800b0d6:	dc02      	bgt.n	800b0de <__ieee754_rem_pio2+0x1be>
 800b0d8:	e9c4 0100 	strd	r0, r1, [r4]
 800b0dc:	e039      	b.n	800b152 <__ieee754_rem_pio2+0x232>
 800b0de:	a34c      	add	r3, pc, #304	; (adr r3, 800b210 <__ieee754_rem_pio2+0x2f0>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e8:	f7f5 fa86 	bl	80005f8 <__aeabi_dmul>
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	460f      	mov	r7, r1
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4650      	mov	r0, sl
 800b0f6:	4659      	mov	r1, fp
 800b0f8:	f7f5 f8c6 	bl	8000288 <__aeabi_dsub>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	460b      	mov	r3, r1
 800b100:	4680      	mov	r8, r0
 800b102:	4689      	mov	r9, r1
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	f7f5 f8be 	bl	8000288 <__aeabi_dsub>
 800b10c:	4632      	mov	r2, r6
 800b10e:	463b      	mov	r3, r7
 800b110:	f7f5 f8ba 	bl	8000288 <__aeabi_dsub>
 800b114:	a340      	add	r3, pc, #256	; (adr r3, 800b218 <__ieee754_rem_pio2+0x2f8>)
 800b116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11a:	4606      	mov	r6, r0
 800b11c:	460f      	mov	r7, r1
 800b11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b122:	f7f5 fa69 	bl	80005f8 <__aeabi_dmul>
 800b126:	4632      	mov	r2, r6
 800b128:	463b      	mov	r3, r7
 800b12a:	f7f5 f8ad 	bl	8000288 <__aeabi_dsub>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4606      	mov	r6, r0
 800b134:	460f      	mov	r7, r1
 800b136:	4640      	mov	r0, r8
 800b138:	4649      	mov	r1, r9
 800b13a:	f7f5 f8a5 	bl	8000288 <__aeabi_dsub>
 800b13e:	9a05      	ldr	r2, [sp, #20]
 800b140:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	2b31      	cmp	r3, #49	; 0x31
 800b148:	dc20      	bgt.n	800b18c <__ieee754_rem_pio2+0x26c>
 800b14a:	e9c4 0100 	strd	r0, r1, [r4]
 800b14e:	46c2      	mov	sl, r8
 800b150:	46cb      	mov	fp, r9
 800b152:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b156:	4650      	mov	r0, sl
 800b158:	4642      	mov	r2, r8
 800b15a:	464b      	mov	r3, r9
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 f893 	bl	8000288 <__aeabi_dsub>
 800b162:	463b      	mov	r3, r7
 800b164:	4632      	mov	r2, r6
 800b166:	f7f5 f88f 	bl	8000288 <__aeabi_dsub>
 800b16a:	9b04      	ldr	r3, [sp, #16]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b172:	f6bf af11 	bge.w	800af98 <__ieee754_rem_pio2+0x78>
 800b176:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b17a:	6063      	str	r3, [r4, #4]
 800b17c:	f8c4 8000 	str.w	r8, [r4]
 800b180:	60a0      	str	r0, [r4, #8]
 800b182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b186:	60e3      	str	r3, [r4, #12]
 800b188:	426d      	negs	r5, r5
 800b18a:	e705      	b.n	800af98 <__ieee754_rem_pio2+0x78>
 800b18c:	a326      	add	r3, pc, #152	; (adr r3, 800b228 <__ieee754_rem_pio2+0x308>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b196:	f7f5 fa2f 	bl	80005f8 <__aeabi_dmul>
 800b19a:	4606      	mov	r6, r0
 800b19c:	460f      	mov	r7, r1
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f86f 	bl	8000288 <__aeabi_dsub>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4682      	mov	sl, r0
 800b1b0:	468b      	mov	fp, r1
 800b1b2:	4640      	mov	r0, r8
 800b1b4:	4649      	mov	r1, r9
 800b1b6:	f7f5 f867 	bl	8000288 <__aeabi_dsub>
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	463b      	mov	r3, r7
 800b1be:	f7f5 f863 	bl	8000288 <__aeabi_dsub>
 800b1c2:	a31b      	add	r3, pc, #108	; (adr r3, 800b230 <__ieee754_rem_pio2+0x310>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	460f      	mov	r7, r1
 800b1cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d0:	f7f5 fa12 	bl	80005f8 <__aeabi_dmul>
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	f7f5 f856 	bl	8000288 <__aeabi_dsub>
 800b1dc:	4606      	mov	r6, r0
 800b1de:	460f      	mov	r7, r1
 800b1e0:	e764      	b.n	800b0ac <__ieee754_rem_pio2+0x18c>
 800b1e2:	4b1b      	ldr	r3, [pc, #108]	; (800b250 <__ieee754_rem_pio2+0x330>)
 800b1e4:	4598      	cmp	r8, r3
 800b1e6:	dd35      	ble.n	800b254 <__ieee754_rem_pio2+0x334>
 800b1e8:	ee10 2a10 	vmov	r2, s0
 800b1ec:	463b      	mov	r3, r7
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	f7f5 f849 	bl	8000288 <__aeabi_dsub>
 800b1f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b1fa:	e9c4 0100 	strd	r0, r1, [r4]
 800b1fe:	e6a1      	b.n	800af44 <__ieee754_rem_pio2+0x24>
 800b200:	54400000 	.word	0x54400000
 800b204:	3ff921fb 	.word	0x3ff921fb
 800b208:	1a626331 	.word	0x1a626331
 800b20c:	3dd0b461 	.word	0x3dd0b461
 800b210:	1a600000 	.word	0x1a600000
 800b214:	3dd0b461 	.word	0x3dd0b461
 800b218:	2e037073 	.word	0x2e037073
 800b21c:	3ba3198a 	.word	0x3ba3198a
 800b220:	6dc9c883 	.word	0x6dc9c883
 800b224:	3fe45f30 	.word	0x3fe45f30
 800b228:	2e000000 	.word	0x2e000000
 800b22c:	3ba3198a 	.word	0x3ba3198a
 800b230:	252049c1 	.word	0x252049c1
 800b234:	397b839a 	.word	0x397b839a
 800b238:	3fe921fb 	.word	0x3fe921fb
 800b23c:	4002d97b 	.word	0x4002d97b
 800b240:	3ff921fb 	.word	0x3ff921fb
 800b244:	413921fb 	.word	0x413921fb
 800b248:	3fe00000 	.word	0x3fe00000
 800b24c:	0801078c 	.word	0x0801078c
 800b250:	7fefffff 	.word	0x7fefffff
 800b254:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b258:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b25c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b260:	4630      	mov	r0, r6
 800b262:	460f      	mov	r7, r1
 800b264:	f7f5 fc78 	bl	8000b58 <__aeabi_d2iz>
 800b268:	f7f5 f95c 	bl	8000524 <__aeabi_i2d>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b278:	f7f5 f806 	bl	8000288 <__aeabi_dsub>
 800b27c:	2200      	movs	r2, #0
 800b27e:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <__ieee754_rem_pio2+0x3dc>)
 800b280:	f7f5 f9ba 	bl	80005f8 <__aeabi_dmul>
 800b284:	460f      	mov	r7, r1
 800b286:	4606      	mov	r6, r0
 800b288:	f7f5 fc66 	bl	8000b58 <__aeabi_d2iz>
 800b28c:	f7f5 f94a 	bl	8000524 <__aeabi_i2d>
 800b290:	4602      	mov	r2, r0
 800b292:	460b      	mov	r3, r1
 800b294:	4630      	mov	r0, r6
 800b296:	4639      	mov	r1, r7
 800b298:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b29c:	f7f4 fff4 	bl	8000288 <__aeabi_dsub>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4b16      	ldr	r3, [pc, #88]	; (800b2fc <__ieee754_rem_pio2+0x3dc>)
 800b2a4:	f7f5 f9a8 	bl	80005f8 <__aeabi_dmul>
 800b2a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2ac:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800b2b0:	f04f 0803 	mov.w	r8, #3
 800b2b4:	2600      	movs	r6, #0
 800b2b6:	2700      	movs	r7, #0
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b2c0:	f108 3aff 	add.w	sl, r8, #4294967295
 800b2c4:	f7f5 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c8:	b9b0      	cbnz	r0, 800b2f8 <__ieee754_rem_pio2+0x3d8>
 800b2ca:	4b0d      	ldr	r3, [pc, #52]	; (800b300 <__ieee754_rem_pio2+0x3e0>)
 800b2cc:	9301      	str	r3, [sp, #4]
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	9300      	str	r3, [sp, #0]
 800b2d2:	462a      	mov	r2, r5
 800b2d4:	4643      	mov	r3, r8
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	a806      	add	r0, sp, #24
 800b2da:	f000 f8dd 	bl	800b498 <__kernel_rem_pio2>
 800b2de:	9b04      	ldr	r3, [sp, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	f6bf ae58 	bge.w	800af98 <__ieee754_rem_pio2+0x78>
 800b2e8:	6863      	ldr	r3, [r4, #4]
 800b2ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2ee:	6063      	str	r3, [r4, #4]
 800b2f0:	68e3      	ldr	r3, [r4, #12]
 800b2f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2f6:	e746      	b.n	800b186 <__ieee754_rem_pio2+0x266>
 800b2f8:	46d0      	mov	r8, sl
 800b2fa:	e7dd      	b.n	800b2b8 <__ieee754_rem_pio2+0x398>
 800b2fc:	41700000 	.word	0x41700000
 800b300:	0801080c 	.word	0x0801080c
 800b304:	00000000 	.word	0x00000000

0800b308 <__kernel_cos>:
 800b308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b30c:	ec59 8b10 	vmov	r8, r9, d0
 800b310:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800b314:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b318:	ed2d 8b02 	vpush	{d8}
 800b31c:	eeb0 8a41 	vmov.f32	s16, s2
 800b320:	eef0 8a61 	vmov.f32	s17, s3
 800b324:	da07      	bge.n	800b336 <__kernel_cos+0x2e>
 800b326:	ee10 0a10 	vmov	r0, s0
 800b32a:	4649      	mov	r1, r9
 800b32c:	f7f5 fc14 	bl	8000b58 <__aeabi_d2iz>
 800b330:	2800      	cmp	r0, #0
 800b332:	f000 8089 	beq.w	800b448 <__kernel_cos+0x140>
 800b336:	4642      	mov	r2, r8
 800b338:	464b      	mov	r3, r9
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	f7f5 f95b 	bl	80005f8 <__aeabi_dmul>
 800b342:	2200      	movs	r2, #0
 800b344:	4b4e      	ldr	r3, [pc, #312]	; (800b480 <__kernel_cos+0x178>)
 800b346:	4604      	mov	r4, r0
 800b348:	460d      	mov	r5, r1
 800b34a:	f7f5 f955 	bl	80005f8 <__aeabi_dmul>
 800b34e:	a340      	add	r3, pc, #256	; (adr r3, 800b450 <__kernel_cos+0x148>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	4682      	mov	sl, r0
 800b356:	468b      	mov	fp, r1
 800b358:	4620      	mov	r0, r4
 800b35a:	4629      	mov	r1, r5
 800b35c:	f7f5 f94c 	bl	80005f8 <__aeabi_dmul>
 800b360:	a33d      	add	r3, pc, #244	; (adr r3, 800b458 <__kernel_cos+0x150>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f4 ff91 	bl	800028c <__adddf3>
 800b36a:	4622      	mov	r2, r4
 800b36c:	462b      	mov	r3, r5
 800b36e:	f7f5 f943 	bl	80005f8 <__aeabi_dmul>
 800b372:	a33b      	add	r3, pc, #236	; (adr r3, 800b460 <__kernel_cos+0x158>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ff86 	bl	8000288 <__aeabi_dsub>
 800b37c:	4622      	mov	r2, r4
 800b37e:	462b      	mov	r3, r5
 800b380:	f7f5 f93a 	bl	80005f8 <__aeabi_dmul>
 800b384:	a338      	add	r3, pc, #224	; (adr r3, 800b468 <__kernel_cos+0x160>)
 800b386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b38a:	f7f4 ff7f 	bl	800028c <__adddf3>
 800b38e:	4622      	mov	r2, r4
 800b390:	462b      	mov	r3, r5
 800b392:	f7f5 f931 	bl	80005f8 <__aeabi_dmul>
 800b396:	a336      	add	r3, pc, #216	; (adr r3, 800b470 <__kernel_cos+0x168>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	f7f4 ff74 	bl	8000288 <__aeabi_dsub>
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f7f5 f928 	bl	80005f8 <__aeabi_dmul>
 800b3a8:	a333      	add	r3, pc, #204	; (adr r3, 800b478 <__kernel_cos+0x170>)
 800b3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ae:	f7f4 ff6d 	bl	800028c <__adddf3>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f5 f91f 	bl	80005f8 <__aeabi_dmul>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f5 f91b 	bl	80005f8 <__aeabi_dmul>
 800b3c2:	ec53 2b18 	vmov	r2, r3, d8
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	460d      	mov	r5, r1
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	f7f5 f913 	bl	80005f8 <__aeabi_dmul>
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7f4 ff55 	bl	8000288 <__aeabi_dsub>
 800b3de:	4b29      	ldr	r3, [pc, #164]	; (800b484 <__kernel_cos+0x17c>)
 800b3e0:	429e      	cmp	r6, r3
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	4689      	mov	r9, r1
 800b3e6:	dc11      	bgt.n	800b40c <__kernel_cos+0x104>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	f7f4 ff4a 	bl	8000288 <__aeabi_dsub>
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	4924      	ldr	r1, [pc, #144]	; (800b488 <__kernel_cos+0x180>)
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f7f4 ff44 	bl	8000288 <__aeabi_dsub>
 800b400:	ecbd 8b02 	vpop	{d8}
 800b404:	ec41 0b10 	vmov	d0, r0, r1
 800b408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b40c:	4b1f      	ldr	r3, [pc, #124]	; (800b48c <__kernel_cos+0x184>)
 800b40e:	491e      	ldr	r1, [pc, #120]	; (800b488 <__kernel_cos+0x180>)
 800b410:	429e      	cmp	r6, r3
 800b412:	bfcc      	ite	gt
 800b414:	4d1e      	ldrgt	r5, [pc, #120]	; (800b490 <__kernel_cos+0x188>)
 800b416:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b41a:	2400      	movs	r4, #0
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	2000      	movs	r0, #0
 800b422:	f7f4 ff31 	bl	8000288 <__aeabi_dsub>
 800b426:	4622      	mov	r2, r4
 800b428:	4606      	mov	r6, r0
 800b42a:	460f      	mov	r7, r1
 800b42c:	462b      	mov	r3, r5
 800b42e:	4650      	mov	r0, sl
 800b430:	4659      	mov	r1, fp
 800b432:	f7f4 ff29 	bl	8000288 <__aeabi_dsub>
 800b436:	4642      	mov	r2, r8
 800b438:	464b      	mov	r3, r9
 800b43a:	f7f4 ff25 	bl	8000288 <__aeabi_dsub>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4630      	mov	r0, r6
 800b444:	4639      	mov	r1, r7
 800b446:	e7d9      	b.n	800b3fc <__kernel_cos+0xf4>
 800b448:	2000      	movs	r0, #0
 800b44a:	490f      	ldr	r1, [pc, #60]	; (800b488 <__kernel_cos+0x180>)
 800b44c:	e7d8      	b.n	800b400 <__kernel_cos+0xf8>
 800b44e:	bf00      	nop
 800b450:	be8838d4 	.word	0xbe8838d4
 800b454:	bda8fae9 	.word	0xbda8fae9
 800b458:	bdb4b1c4 	.word	0xbdb4b1c4
 800b45c:	3e21ee9e 	.word	0x3e21ee9e
 800b460:	809c52ad 	.word	0x809c52ad
 800b464:	3e927e4f 	.word	0x3e927e4f
 800b468:	19cb1590 	.word	0x19cb1590
 800b46c:	3efa01a0 	.word	0x3efa01a0
 800b470:	16c15177 	.word	0x16c15177
 800b474:	3f56c16c 	.word	0x3f56c16c
 800b478:	5555554c 	.word	0x5555554c
 800b47c:	3fa55555 	.word	0x3fa55555
 800b480:	3fe00000 	.word	0x3fe00000
 800b484:	3fd33332 	.word	0x3fd33332
 800b488:	3ff00000 	.word	0x3ff00000
 800b48c:	3fe90000 	.word	0x3fe90000
 800b490:	3fd20000 	.word	0x3fd20000
 800b494:	00000000 	.word	0x00000000

0800b498 <__kernel_rem_pio2>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ed2d 8b02 	vpush	{d8}
 800b4a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b4a4:	1ed4      	subs	r4, r2, #3
 800b4a6:	9308      	str	r3, [sp, #32]
 800b4a8:	9101      	str	r1, [sp, #4]
 800b4aa:	4bc5      	ldr	r3, [pc, #788]	; (800b7c0 <__kernel_rem_pio2+0x328>)
 800b4ac:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b4ae:	9009      	str	r0, [sp, #36]	; 0x24
 800b4b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	2318      	movs	r3, #24
 800b4be:	fb94 f4f3 	sdiv	r4, r4, r3
 800b4c2:	f06f 0317 	mvn.w	r3, #23
 800b4c6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b4ca:	fb04 3303 	mla	r3, r4, r3, r3
 800b4ce:	eb03 0a02 	add.w	sl, r3, r2
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	9a07      	ldr	r2, [sp, #28]
 800b4d6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b7b0 <__kernel_rem_pio2+0x318>
 800b4da:	eb03 0802 	add.w	r8, r3, r2
 800b4de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b4e0:	1aa7      	subs	r7, r4, r2
 800b4e2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b4e6:	ae22      	add	r6, sp, #136	; 0x88
 800b4e8:	2500      	movs	r5, #0
 800b4ea:	4545      	cmp	r5, r8
 800b4ec:	dd13      	ble.n	800b516 <__kernel_rem_pio2+0x7e>
 800b4ee:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b7b0 <__kernel_rem_pio2+0x318>
 800b4f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	9b04      	ldr	r3, [sp, #16]
 800b4fa:	429e      	cmp	r6, r3
 800b4fc:	dc32      	bgt.n	800b564 <__kernel_rem_pio2+0xcc>
 800b4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b500:	9302      	str	r3, [sp, #8]
 800b502:	9b08      	ldr	r3, [sp, #32]
 800b504:	199d      	adds	r5, r3, r6
 800b506:	ab22      	add	r3, sp, #136	; 0x88
 800b508:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b50c:	9306      	str	r3, [sp, #24]
 800b50e:	ec59 8b18 	vmov	r8, r9, d8
 800b512:	2700      	movs	r7, #0
 800b514:	e01f      	b.n	800b556 <__kernel_rem_pio2+0xbe>
 800b516:	42ef      	cmn	r7, r5
 800b518:	d407      	bmi.n	800b52a <__kernel_rem_pio2+0x92>
 800b51a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b51e:	f7f5 f801 	bl	8000524 <__aeabi_i2d>
 800b522:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b526:	3501      	adds	r5, #1
 800b528:	e7df      	b.n	800b4ea <__kernel_rem_pio2+0x52>
 800b52a:	ec51 0b18 	vmov	r0, r1, d8
 800b52e:	e7f8      	b.n	800b522 <__kernel_rem_pio2+0x8a>
 800b530:	9906      	ldr	r1, [sp, #24]
 800b532:	9d02      	ldr	r5, [sp, #8]
 800b534:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b538:	9106      	str	r1, [sp, #24]
 800b53a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b53e:	9502      	str	r5, [sp, #8]
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	4640      	mov	r0, r8
 800b54a:	4649      	mov	r1, r9
 800b54c:	f7f4 fe9e 	bl	800028c <__adddf3>
 800b550:	3701      	adds	r7, #1
 800b552:	4680      	mov	r8, r0
 800b554:	4689      	mov	r9, r1
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	429f      	cmp	r7, r3
 800b55a:	dde9      	ble.n	800b530 <__kernel_rem_pio2+0x98>
 800b55c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b560:	3601      	adds	r6, #1
 800b562:	e7c9      	b.n	800b4f8 <__kernel_rem_pio2+0x60>
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	aa0e      	add	r2, sp, #56	; 0x38
 800b568:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b56c:	930c      	str	r3, [sp, #48]	; 0x30
 800b56e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b570:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b574:	9c04      	ldr	r4, [sp, #16]
 800b576:	930b      	str	r3, [sp, #44]	; 0x2c
 800b578:	ab9a      	add	r3, sp, #616	; 0x268
 800b57a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b57e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b582:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b586:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b58a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b58e:	ab9a      	add	r3, sp, #616	; 0x268
 800b590:	445b      	add	r3, fp
 800b592:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b596:	2500      	movs	r5, #0
 800b598:	1b63      	subs	r3, r4, r5
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	dc78      	bgt.n	800b690 <__kernel_rem_pio2+0x1f8>
 800b59e:	4650      	mov	r0, sl
 800b5a0:	ec49 8b10 	vmov	d0, r8, r9
 800b5a4:	f000 fda4 	bl	800c0f0 <scalbn>
 800b5a8:	ec57 6b10 	vmov	r6, r7, d0
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b5b2:	ee10 0a10 	vmov	r0, s0
 800b5b6:	4639      	mov	r1, r7
 800b5b8:	f7f5 f81e 	bl	80005f8 <__aeabi_dmul>
 800b5bc:	ec41 0b10 	vmov	d0, r0, r1
 800b5c0:	f000 fd12 	bl	800bfe8 <floor>
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	ec51 0b10 	vmov	r0, r1, d0
 800b5ca:	4b7e      	ldr	r3, [pc, #504]	; (800b7c4 <__kernel_rem_pio2+0x32c>)
 800b5cc:	f7f5 f814 	bl	80005f8 <__aeabi_dmul>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	4639      	mov	r1, r7
 800b5d8:	f7f4 fe56 	bl	8000288 <__aeabi_dsub>
 800b5dc:	460f      	mov	r7, r1
 800b5de:	4606      	mov	r6, r0
 800b5e0:	f7f5 faba 	bl	8000b58 <__aeabi_d2iz>
 800b5e4:	9006      	str	r0, [sp, #24]
 800b5e6:	f7f4 ff9d 	bl	8000524 <__aeabi_i2d>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	f7f4 fe49 	bl	8000288 <__aeabi_dsub>
 800b5f6:	f1ba 0f00 	cmp.w	sl, #0
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	dd6c      	ble.n	800b6da <__kernel_rem_pio2+0x242>
 800b600:	1e62      	subs	r2, r4, #1
 800b602:	ab0e      	add	r3, sp, #56	; 0x38
 800b604:	f1ca 0118 	rsb	r1, sl, #24
 800b608:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b60c:	9d06      	ldr	r5, [sp, #24]
 800b60e:	fa40 f301 	asr.w	r3, r0, r1
 800b612:	441d      	add	r5, r3
 800b614:	408b      	lsls	r3, r1
 800b616:	1ac0      	subs	r0, r0, r3
 800b618:	ab0e      	add	r3, sp, #56	; 0x38
 800b61a:	9506      	str	r5, [sp, #24]
 800b61c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b620:	f1ca 0317 	rsb	r3, sl, #23
 800b624:	fa40 f303 	asr.w	r3, r0, r3
 800b628:	9302      	str	r3, [sp, #8]
 800b62a:	9b02      	ldr	r3, [sp, #8]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	dd62      	ble.n	800b6f6 <__kernel_rem_pio2+0x25e>
 800b630:	9b06      	ldr	r3, [sp, #24]
 800b632:	2200      	movs	r2, #0
 800b634:	3301      	adds	r3, #1
 800b636:	9306      	str	r3, [sp, #24]
 800b638:	4615      	mov	r5, r2
 800b63a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b63e:	4294      	cmp	r4, r2
 800b640:	f300 8095 	bgt.w	800b76e <__kernel_rem_pio2+0x2d6>
 800b644:	f1ba 0f00 	cmp.w	sl, #0
 800b648:	dd07      	ble.n	800b65a <__kernel_rem_pio2+0x1c2>
 800b64a:	f1ba 0f01 	cmp.w	sl, #1
 800b64e:	f000 80a2 	beq.w	800b796 <__kernel_rem_pio2+0x2fe>
 800b652:	f1ba 0f02 	cmp.w	sl, #2
 800b656:	f000 80c1 	beq.w	800b7dc <__kernel_rem_pio2+0x344>
 800b65a:	9b02      	ldr	r3, [sp, #8]
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d14a      	bne.n	800b6f6 <__kernel_rem_pio2+0x25e>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	2000      	movs	r0, #0
 800b666:	4958      	ldr	r1, [pc, #352]	; (800b7c8 <__kernel_rem_pio2+0x330>)
 800b668:	f7f4 fe0e 	bl	8000288 <__aeabi_dsub>
 800b66c:	4606      	mov	r6, r0
 800b66e:	460f      	mov	r7, r1
 800b670:	2d00      	cmp	r5, #0
 800b672:	d040      	beq.n	800b6f6 <__kernel_rem_pio2+0x25e>
 800b674:	4650      	mov	r0, sl
 800b676:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b7b8 <__kernel_rem_pio2+0x320>
 800b67a:	f000 fd39 	bl	800c0f0 <scalbn>
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	ec53 2b10 	vmov	r2, r3, d0
 800b686:	f7f4 fdff 	bl	8000288 <__aeabi_dsub>
 800b68a:	4606      	mov	r6, r0
 800b68c:	460f      	mov	r7, r1
 800b68e:	e032      	b.n	800b6f6 <__kernel_rem_pio2+0x25e>
 800b690:	2200      	movs	r2, #0
 800b692:	4b4e      	ldr	r3, [pc, #312]	; (800b7cc <__kernel_rem_pio2+0x334>)
 800b694:	4640      	mov	r0, r8
 800b696:	4649      	mov	r1, r9
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	f7f5 fa5c 	bl	8000b58 <__aeabi_d2iz>
 800b6a0:	f7f4 ff40 	bl	8000524 <__aeabi_i2d>
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4b4a      	ldr	r3, [pc, #296]	; (800b7d0 <__kernel_rem_pio2+0x338>)
 800b6a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6ac:	f7f4 ffa4 	bl	80005f8 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	f7f4 fde6 	bl	8000288 <__aeabi_dsub>
 800b6bc:	f7f5 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800b6c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b6c2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b6c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b6ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ce:	f7f4 fddd 	bl	800028c <__adddf3>
 800b6d2:	3501      	adds	r5, #1
 800b6d4:	4680      	mov	r8, r0
 800b6d6:	4689      	mov	r9, r1
 800b6d8:	e75e      	b.n	800b598 <__kernel_rem_pio2+0x100>
 800b6da:	d105      	bne.n	800b6e8 <__kernel_rem_pio2+0x250>
 800b6dc:	1e63      	subs	r3, r4, #1
 800b6de:	aa0e      	add	r2, sp, #56	; 0x38
 800b6e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b6e4:	15c3      	asrs	r3, r0, #23
 800b6e6:	e79f      	b.n	800b628 <__kernel_rem_pio2+0x190>
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	4b3a      	ldr	r3, [pc, #232]	; (800b7d4 <__kernel_rem_pio2+0x33c>)
 800b6ec:	f7f5 fa0a 	bl	8000b04 <__aeabi_dcmpge>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d139      	bne.n	800b768 <__kernel_rem_pio2+0x2d0>
 800b6f4:	9002      	str	r0, [sp, #8]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f5 f9e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b702:	2800      	cmp	r0, #0
 800b704:	f000 80c7 	beq.w	800b896 <__kernel_rem_pio2+0x3fe>
 800b708:	1e65      	subs	r5, r4, #1
 800b70a:	462b      	mov	r3, r5
 800b70c:	2200      	movs	r2, #0
 800b70e:	9904      	ldr	r1, [sp, #16]
 800b710:	428b      	cmp	r3, r1
 800b712:	da6a      	bge.n	800b7ea <__kernel_rem_pio2+0x352>
 800b714:	2a00      	cmp	r2, #0
 800b716:	f000 8088 	beq.w	800b82a <__kernel_rem_pio2+0x392>
 800b71a:	ab0e      	add	r3, sp, #56	; 0x38
 800b71c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b720:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b724:	2b00      	cmp	r3, #0
 800b726:	f000 80b4 	beq.w	800b892 <__kernel_rem_pio2+0x3fa>
 800b72a:	4650      	mov	r0, sl
 800b72c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b7b8 <__kernel_rem_pio2+0x320>
 800b730:	f000 fcde 	bl	800c0f0 <scalbn>
 800b734:	00ec      	lsls	r4, r5, #3
 800b736:	ab72      	add	r3, sp, #456	; 0x1c8
 800b738:	191e      	adds	r6, r3, r4
 800b73a:	ec59 8b10 	vmov	r8, r9, d0
 800b73e:	f106 0a08 	add.w	sl, r6, #8
 800b742:	462f      	mov	r7, r5
 800b744:	2f00      	cmp	r7, #0
 800b746:	f280 80df 	bge.w	800b908 <__kernel_rem_pio2+0x470>
 800b74a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b7b0 <__kernel_rem_pio2+0x318>
 800b74e:	f04f 0a00 	mov.w	sl, #0
 800b752:	eba5 030a 	sub.w	r3, r5, sl
 800b756:	2b00      	cmp	r3, #0
 800b758:	f2c0 810a 	blt.w	800b970 <__kernel_rem_pio2+0x4d8>
 800b75c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b7d8 <__kernel_rem_pio2+0x340>
 800b760:	ec59 8b18 	vmov	r8, r9, d8
 800b764:	2700      	movs	r7, #0
 800b766:	e0f5      	b.n	800b954 <__kernel_rem_pio2+0x4bc>
 800b768:	2302      	movs	r3, #2
 800b76a:	9302      	str	r3, [sp, #8]
 800b76c:	e760      	b.n	800b630 <__kernel_rem_pio2+0x198>
 800b76e:	ab0e      	add	r3, sp, #56	; 0x38
 800b770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b774:	b94d      	cbnz	r5, 800b78a <__kernel_rem_pio2+0x2f2>
 800b776:	b12b      	cbz	r3, 800b784 <__kernel_rem_pio2+0x2ec>
 800b778:	a80e      	add	r0, sp, #56	; 0x38
 800b77a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b77e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b782:	2301      	movs	r3, #1
 800b784:	3201      	adds	r2, #1
 800b786:	461d      	mov	r5, r3
 800b788:	e759      	b.n	800b63e <__kernel_rem_pio2+0x1a6>
 800b78a:	a80e      	add	r0, sp, #56	; 0x38
 800b78c:	1acb      	subs	r3, r1, r3
 800b78e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b792:	462b      	mov	r3, r5
 800b794:	e7f6      	b.n	800b784 <__kernel_rem_pio2+0x2ec>
 800b796:	1e62      	subs	r2, r4, #1
 800b798:	ab0e      	add	r3, sp, #56	; 0x38
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b7a2:	a90e      	add	r1, sp, #56	; 0x38
 800b7a4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b7a8:	e757      	b.n	800b65a <__kernel_rem_pio2+0x1c2>
 800b7aa:	bf00      	nop
 800b7ac:	f3af 8000 	nop.w
	...
 800b7bc:	3ff00000 	.word	0x3ff00000
 800b7c0:	08010958 	.word	0x08010958
 800b7c4:	40200000 	.word	0x40200000
 800b7c8:	3ff00000 	.word	0x3ff00000
 800b7cc:	3e700000 	.word	0x3e700000
 800b7d0:	41700000 	.word	0x41700000
 800b7d4:	3fe00000 	.word	0x3fe00000
 800b7d8:	08010918 	.word	0x08010918
 800b7dc:	1e62      	subs	r2, r4, #1
 800b7de:	ab0e      	add	r3, sp, #56	; 0x38
 800b7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b7e8:	e7db      	b.n	800b7a2 <__kernel_rem_pio2+0x30a>
 800b7ea:	a90e      	add	r1, sp, #56	; 0x38
 800b7ec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	430a      	orrs	r2, r1
 800b7f4:	e78b      	b.n	800b70e <__kernel_rem_pio2+0x276>
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d0fa      	beq.n	800b7f6 <__kernel_rem_pio2+0x35e>
 800b800:	9a08      	ldr	r2, [sp, #32]
 800b802:	4422      	add	r2, r4
 800b804:	00d2      	lsls	r2, r2, #3
 800b806:	a922      	add	r1, sp, #136	; 0x88
 800b808:	18e3      	adds	r3, r4, r3
 800b80a:	9206      	str	r2, [sp, #24]
 800b80c:	440a      	add	r2, r1
 800b80e:	9302      	str	r3, [sp, #8]
 800b810:	f10b 0108 	add.w	r1, fp, #8
 800b814:	f102 0308 	add.w	r3, r2, #8
 800b818:	1c66      	adds	r6, r4, #1
 800b81a:	910a      	str	r1, [sp, #40]	; 0x28
 800b81c:	2500      	movs	r5, #0
 800b81e:	930d      	str	r3, [sp, #52]	; 0x34
 800b820:	9b02      	ldr	r3, [sp, #8]
 800b822:	42b3      	cmp	r3, r6
 800b824:	da04      	bge.n	800b830 <__kernel_rem_pio2+0x398>
 800b826:	461c      	mov	r4, r3
 800b828:	e6a6      	b.n	800b578 <__kernel_rem_pio2+0xe0>
 800b82a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b82c:	2301      	movs	r3, #1
 800b82e:	e7e3      	b.n	800b7f8 <__kernel_rem_pio2+0x360>
 800b830:	9b06      	ldr	r3, [sp, #24]
 800b832:	18ef      	adds	r7, r5, r3
 800b834:	ab22      	add	r3, sp, #136	; 0x88
 800b836:	441f      	add	r7, r3
 800b838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b83e:	f7f4 fe71 	bl	8000524 <__aeabi_i2d>
 800b842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b844:	461c      	mov	r4, r3
 800b846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b848:	e9c7 0100 	strd	r0, r1, [r7]
 800b84c:	eb03 0b05 	add.w	fp, r3, r5
 800b850:	2700      	movs	r7, #0
 800b852:	f04f 0800 	mov.w	r8, #0
 800b856:	f04f 0900 	mov.w	r9, #0
 800b85a:	9b07      	ldr	r3, [sp, #28]
 800b85c:	429f      	cmp	r7, r3
 800b85e:	dd08      	ble.n	800b872 <__kernel_rem_pio2+0x3da>
 800b860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b862:	aa72      	add	r2, sp, #456	; 0x1c8
 800b864:	18eb      	adds	r3, r5, r3
 800b866:	4413      	add	r3, r2
 800b868:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b86c:	3601      	adds	r6, #1
 800b86e:	3508      	adds	r5, #8
 800b870:	e7d6      	b.n	800b820 <__kernel_rem_pio2+0x388>
 800b872:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b876:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b87a:	f7f4 febd 	bl	80005f8 <__aeabi_dmul>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4640      	mov	r0, r8
 800b884:	4649      	mov	r1, r9
 800b886:	f7f4 fd01 	bl	800028c <__adddf3>
 800b88a:	3701      	adds	r7, #1
 800b88c:	4680      	mov	r8, r0
 800b88e:	4689      	mov	r9, r1
 800b890:	e7e3      	b.n	800b85a <__kernel_rem_pio2+0x3c2>
 800b892:	3d01      	subs	r5, #1
 800b894:	e741      	b.n	800b71a <__kernel_rem_pio2+0x282>
 800b896:	f1ca 0000 	rsb	r0, sl, #0
 800b89a:	ec47 6b10 	vmov	d0, r6, r7
 800b89e:	f000 fc27 	bl	800c0f0 <scalbn>
 800b8a2:	ec57 6b10 	vmov	r6, r7, d0
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4b99      	ldr	r3, [pc, #612]	; (800bb10 <__kernel_rem_pio2+0x678>)
 800b8aa:	ee10 0a10 	vmov	r0, s0
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f5 f928 	bl	8000b04 <__aeabi_dcmpge>
 800b8b4:	b1f8      	cbz	r0, 800b8f6 <__kernel_rem_pio2+0x45e>
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	4b96      	ldr	r3, [pc, #600]	; (800bb14 <__kernel_rem_pio2+0x67c>)
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f4 fe9b 	bl	80005f8 <__aeabi_dmul>
 800b8c2:	f7f5 f949 	bl	8000b58 <__aeabi_d2iz>
 800b8c6:	4680      	mov	r8, r0
 800b8c8:	f7f4 fe2c 	bl	8000524 <__aeabi_i2d>
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	4b90      	ldr	r3, [pc, #576]	; (800bb10 <__kernel_rem_pio2+0x678>)
 800b8d0:	f7f4 fe92 	bl	80005f8 <__aeabi_dmul>
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	4639      	mov	r1, r7
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7f4 fcd4 	bl	8000288 <__aeabi_dsub>
 800b8e0:	f7f5 f93a 	bl	8000b58 <__aeabi_d2iz>
 800b8e4:	1c65      	adds	r5, r4, #1
 800b8e6:	ab0e      	add	r3, sp, #56	; 0x38
 800b8e8:	f10a 0a18 	add.w	sl, sl, #24
 800b8ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b8f0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b8f4:	e719      	b.n	800b72a <__kernel_rem_pio2+0x292>
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	4639      	mov	r1, r7
 800b8fa:	f7f5 f92d 	bl	8000b58 <__aeabi_d2iz>
 800b8fe:	ab0e      	add	r3, sp, #56	; 0x38
 800b900:	4625      	mov	r5, r4
 800b902:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b906:	e710      	b.n	800b72a <__kernel_rem_pio2+0x292>
 800b908:	ab0e      	add	r3, sp, #56	; 0x38
 800b90a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b90e:	f7f4 fe09 	bl	8000524 <__aeabi_i2d>
 800b912:	4642      	mov	r2, r8
 800b914:	464b      	mov	r3, r9
 800b916:	f7f4 fe6f 	bl	80005f8 <__aeabi_dmul>
 800b91a:	2200      	movs	r2, #0
 800b91c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b920:	4b7c      	ldr	r3, [pc, #496]	; (800bb14 <__kernel_rem_pio2+0x67c>)
 800b922:	4640      	mov	r0, r8
 800b924:	4649      	mov	r1, r9
 800b926:	f7f4 fe67 	bl	80005f8 <__aeabi_dmul>
 800b92a:	3f01      	subs	r7, #1
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	e708      	b.n	800b744 <__kernel_rem_pio2+0x2ac>
 800b932:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b93e:	f7f4 fe5b 	bl	80005f8 <__aeabi_dmul>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4640      	mov	r0, r8
 800b948:	4649      	mov	r1, r9
 800b94a:	f7f4 fc9f 	bl	800028c <__adddf3>
 800b94e:	3701      	adds	r7, #1
 800b950:	4680      	mov	r8, r0
 800b952:	4689      	mov	r9, r1
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	429f      	cmp	r7, r3
 800b958:	dc01      	bgt.n	800b95e <__kernel_rem_pio2+0x4c6>
 800b95a:	45ba      	cmp	sl, r7
 800b95c:	dae9      	bge.n	800b932 <__kernel_rem_pio2+0x49a>
 800b95e:	ab4a      	add	r3, sp, #296	; 0x128
 800b960:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b964:	e9c3 8900 	strd	r8, r9, [r3]
 800b968:	f10a 0a01 	add.w	sl, sl, #1
 800b96c:	3e08      	subs	r6, #8
 800b96e:	e6f0      	b.n	800b752 <__kernel_rem_pio2+0x2ba>
 800b970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b972:	2b03      	cmp	r3, #3
 800b974:	d85b      	bhi.n	800ba2e <__kernel_rem_pio2+0x596>
 800b976:	e8df f003 	tbb	[pc, r3]
 800b97a:	264a      	.short	0x264a
 800b97c:	0226      	.short	0x0226
 800b97e:	ab9a      	add	r3, sp, #616	; 0x268
 800b980:	441c      	add	r4, r3
 800b982:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b986:	46a2      	mov	sl, r4
 800b988:	46ab      	mov	fp, r5
 800b98a:	f1bb 0f00 	cmp.w	fp, #0
 800b98e:	dc6c      	bgt.n	800ba6a <__kernel_rem_pio2+0x5d2>
 800b990:	46a2      	mov	sl, r4
 800b992:	46ab      	mov	fp, r5
 800b994:	f1bb 0f01 	cmp.w	fp, #1
 800b998:	f300 8086 	bgt.w	800baa8 <__kernel_rem_pio2+0x610>
 800b99c:	2000      	movs	r0, #0
 800b99e:	2100      	movs	r1, #0
 800b9a0:	2d01      	cmp	r5, #1
 800b9a2:	f300 80a0 	bgt.w	800bae6 <__kernel_rem_pio2+0x64e>
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b9ac:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f040 809e 	bne.w	800baf2 <__kernel_rem_pio2+0x65a>
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	e9c3 7800 	strd	r7, r8, [r3]
 800b9bc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b9c0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b9c4:	e033      	b.n	800ba2e <__kernel_rem_pio2+0x596>
 800b9c6:	3408      	adds	r4, #8
 800b9c8:	ab4a      	add	r3, sp, #296	; 0x128
 800b9ca:	441c      	add	r4, r3
 800b9cc:	462e      	mov	r6, r5
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	2e00      	cmp	r6, #0
 800b9d4:	da3a      	bge.n	800ba4c <__kernel_rem_pio2+0x5b4>
 800b9d6:	9b02      	ldr	r3, [sp, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d03d      	beq.n	800ba58 <__kernel_rem_pio2+0x5c0>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9e2:	9c01      	ldr	r4, [sp, #4]
 800b9e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b9f0:	f7f4 fc4a 	bl	8000288 <__aeabi_dsub>
 800b9f4:	ae4c      	add	r6, sp, #304	; 0x130
 800b9f6:	2401      	movs	r4, #1
 800b9f8:	42a5      	cmp	r5, r4
 800b9fa:	da30      	bge.n	800ba5e <__kernel_rem_pio2+0x5c6>
 800b9fc:	9b02      	ldr	r3, [sp, #8]
 800b9fe:	b113      	cbz	r3, 800ba06 <__kernel_rem_pio2+0x56e>
 800ba00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba04:	4619      	mov	r1, r3
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ba0c:	e00f      	b.n	800ba2e <__kernel_rem_pio2+0x596>
 800ba0e:	ab9a      	add	r3, sp, #616	; 0x268
 800ba10:	441c      	add	r4, r3
 800ba12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ba16:	2000      	movs	r0, #0
 800ba18:	2100      	movs	r1, #0
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	da10      	bge.n	800ba40 <__kernel_rem_pio2+0x5a8>
 800ba1e:	9b02      	ldr	r3, [sp, #8]
 800ba20:	b113      	cbz	r3, 800ba28 <__kernel_rem_pio2+0x590>
 800ba22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba26:	4619      	mov	r1, r3
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	e9c3 0100 	strd	r0, r1, [r3]
 800ba2e:	9b06      	ldr	r3, [sp, #24]
 800ba30:	f003 0007 	and.w	r0, r3, #7
 800ba34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ba38:	ecbd 8b02 	vpop	{d8}
 800ba3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba40:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba44:	f7f4 fc22 	bl	800028c <__adddf3>
 800ba48:	3d01      	subs	r5, #1
 800ba4a:	e7e6      	b.n	800ba1a <__kernel_rem_pio2+0x582>
 800ba4c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ba50:	f7f4 fc1c 	bl	800028c <__adddf3>
 800ba54:	3e01      	subs	r6, #1
 800ba56:	e7bc      	b.n	800b9d2 <__kernel_rem_pio2+0x53a>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	e7c1      	b.n	800b9e2 <__kernel_rem_pio2+0x54a>
 800ba5e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ba62:	f7f4 fc13 	bl	800028c <__adddf3>
 800ba66:	3401      	adds	r4, #1
 800ba68:	e7c6      	b.n	800b9f8 <__kernel_rem_pio2+0x560>
 800ba6a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800ba6e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ba72:	4640      	mov	r0, r8
 800ba74:	ec53 2b17 	vmov	r2, r3, d7
 800ba78:	4649      	mov	r1, r9
 800ba7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba7e:	f7f4 fc05 	bl	800028c <__adddf3>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	4606      	mov	r6, r0
 800ba88:	460f      	mov	r7, r1
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	4649      	mov	r1, r9
 800ba8e:	f7f4 fbfb 	bl	8000288 <__aeabi_dsub>
 800ba92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba96:	f7f4 fbf9 	bl	800028c <__adddf3>
 800ba9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba9e:	e9ca 0100 	strd	r0, r1, [sl]
 800baa2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800baa6:	e770      	b.n	800b98a <__kernel_rem_pio2+0x4f2>
 800baa8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800baac:	ed3a 7b02 	vldmdb	sl!, {d7}
 800bab0:	4630      	mov	r0, r6
 800bab2:	ec53 2b17 	vmov	r2, r3, d7
 800bab6:	4639      	mov	r1, r7
 800bab8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800babc:	f7f4 fbe6 	bl	800028c <__adddf3>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4680      	mov	r8, r0
 800bac6:	4689      	mov	r9, r1
 800bac8:	4630      	mov	r0, r6
 800baca:	4639      	mov	r1, r7
 800bacc:	f7f4 fbdc 	bl	8000288 <__aeabi_dsub>
 800bad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bad4:	f7f4 fbda 	bl	800028c <__adddf3>
 800bad8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800badc:	e9ca 0100 	strd	r0, r1, [sl]
 800bae0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800bae4:	e756      	b.n	800b994 <__kernel_rem_pio2+0x4fc>
 800bae6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800baea:	f7f4 fbcf 	bl	800028c <__adddf3>
 800baee:	3d01      	subs	r5, #1
 800baf0:	e756      	b.n	800b9a0 <__kernel_rem_pio2+0x508>
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	9a01      	ldr	r2, [sp, #4]
 800baf6:	601f      	str	r7, [r3, #0]
 800baf8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800bafc:	605c      	str	r4, [r3, #4]
 800bafe:	609d      	str	r5, [r3, #8]
 800bb00:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bb04:	60d3      	str	r3, [r2, #12]
 800bb06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb0a:	6110      	str	r0, [r2, #16]
 800bb0c:	6153      	str	r3, [r2, #20]
 800bb0e:	e78e      	b.n	800ba2e <__kernel_rem_pio2+0x596>
 800bb10:	41700000 	.word	0x41700000
 800bb14:	3e700000 	.word	0x3e700000

0800bb18 <__kernel_sin>:
 800bb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb1c:	ec55 4b10 	vmov	r4, r5, d0
 800bb20:	b085      	sub	sp, #20
 800bb22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bb26:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb2a:	ed8d 1b00 	vstr	d1, [sp]
 800bb2e:	9002      	str	r0, [sp, #8]
 800bb30:	da06      	bge.n	800bb40 <__kernel_sin+0x28>
 800bb32:	ee10 0a10 	vmov	r0, s0
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f5 f80e 	bl	8000b58 <__aeabi_d2iz>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d051      	beq.n	800bbe4 <__kernel_sin+0xcc>
 800bb40:	4622      	mov	r2, r4
 800bb42:	462b      	mov	r3, r5
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fd56 	bl	80005f8 <__aeabi_dmul>
 800bb4c:	4682      	mov	sl, r0
 800bb4e:	468b      	mov	fp, r1
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fd4e 	bl	80005f8 <__aeabi_dmul>
 800bb5c:	a341      	add	r3, pc, #260	; (adr r3, 800bc64 <__kernel_sin+0x14c>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	4680      	mov	r8, r0
 800bb64:	4689      	mov	r9, r1
 800bb66:	4650      	mov	r0, sl
 800bb68:	4659      	mov	r1, fp
 800bb6a:	f7f4 fd45 	bl	80005f8 <__aeabi_dmul>
 800bb6e:	a33f      	add	r3, pc, #252	; (adr r3, 800bc6c <__kernel_sin+0x154>)
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f7f4 fb88 	bl	8000288 <__aeabi_dsub>
 800bb78:	4652      	mov	r2, sl
 800bb7a:	465b      	mov	r3, fp
 800bb7c:	f7f4 fd3c 	bl	80005f8 <__aeabi_dmul>
 800bb80:	a33c      	add	r3, pc, #240	; (adr r3, 800bc74 <__kernel_sin+0x15c>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f7f4 fb81 	bl	800028c <__adddf3>
 800bb8a:	4652      	mov	r2, sl
 800bb8c:	465b      	mov	r3, fp
 800bb8e:	f7f4 fd33 	bl	80005f8 <__aeabi_dmul>
 800bb92:	a33a      	add	r3, pc, #232	; (adr r3, 800bc7c <__kernel_sin+0x164>)
 800bb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb98:	f7f4 fb76 	bl	8000288 <__aeabi_dsub>
 800bb9c:	4652      	mov	r2, sl
 800bb9e:	465b      	mov	r3, fp
 800bba0:	f7f4 fd2a 	bl	80005f8 <__aeabi_dmul>
 800bba4:	a337      	add	r3, pc, #220	; (adr r3, 800bc84 <__kernel_sin+0x16c>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fb6f 	bl	800028c <__adddf3>
 800bbae:	9b02      	ldr	r3, [sp, #8]
 800bbb0:	4606      	mov	r6, r0
 800bbb2:	460f      	mov	r7, r1
 800bbb4:	b9db      	cbnz	r3, 800bbee <__kernel_sin+0xd6>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4650      	mov	r0, sl
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	f7f4 fd1b 	bl	80005f8 <__aeabi_dmul>
 800bbc2:	a325      	add	r3, pc, #148	; (adr r3, 800bc58 <__kernel_sin+0x140>)
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	f7f4 fb5e 	bl	8000288 <__aeabi_dsub>
 800bbcc:	4642      	mov	r2, r8
 800bbce:	464b      	mov	r3, r9
 800bbd0:	f7f4 fd12 	bl	80005f8 <__aeabi_dmul>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4620      	mov	r0, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7f4 fb56 	bl	800028c <__adddf3>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	ec45 4b10 	vmov	d0, r4, r5
 800bbe8:	b005      	add	sp, #20
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4b1b      	ldr	r3, [pc, #108]	; (800bc60 <__kernel_sin+0x148>)
 800bbf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbf6:	f7f4 fcff 	bl	80005f8 <__aeabi_dmul>
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc00:	463b      	mov	r3, r7
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fcf7 	bl	80005f8 <__aeabi_dmul>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc12:	f7f4 fb39 	bl	8000288 <__aeabi_dsub>
 800bc16:	4652      	mov	r2, sl
 800bc18:	465b      	mov	r3, fp
 800bc1a:	f7f4 fced 	bl	80005f8 <__aeabi_dmul>
 800bc1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc22:	f7f4 fb31 	bl	8000288 <__aeabi_dsub>
 800bc26:	a30c      	add	r3, pc, #48	; (adr r3, 800bc58 <__kernel_sin+0x140>)
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	4606      	mov	r6, r0
 800bc2e:	460f      	mov	r7, r1
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 fce0 	bl	80005f8 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f7f4 fb24 	bl	800028c <__adddf3>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4620      	mov	r0, r4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	f7f4 fb1c 	bl	8000288 <__aeabi_dsub>
 800bc50:	e7c6      	b.n	800bbe0 <__kernel_sin+0xc8>
 800bc52:	bf00      	nop
 800bc54:	f3af 8000 	nop.w
 800bc58:	55555549 	.word	0x55555549
 800bc5c:	3fc55555 	.word	0x3fc55555
 800bc60:	3fe00000 	.word	0x3fe00000
 800bc64:	5acfd57c 	.word	0x5acfd57c
 800bc68:	3de5d93a 	.word	0x3de5d93a
 800bc6c:	8a2b9ceb 	.word	0x8a2b9ceb
 800bc70:	3e5ae5e6 	.word	0x3e5ae5e6
 800bc74:	57b1fe7d 	.word	0x57b1fe7d
 800bc78:	3ec71de3 	.word	0x3ec71de3
 800bc7c:	19c161d5 	.word	0x19c161d5
 800bc80:	3f2a01a0 	.word	0x3f2a01a0
 800bc84:	1110f8a6 	.word	0x1110f8a6
 800bc88:	3f811111 	.word	0x3f811111
 800bc8c:	00000000 	.word	0x00000000

0800bc90 <atan>:
 800bc90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc94:	ec55 4b10 	vmov	r4, r5, d0
 800bc98:	4bc3      	ldr	r3, [pc, #780]	; (800bfa8 <atan+0x318>)
 800bc9a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc9e:	429e      	cmp	r6, r3
 800bca0:	46ab      	mov	fp, r5
 800bca2:	dd18      	ble.n	800bcd6 <atan+0x46>
 800bca4:	4bc1      	ldr	r3, [pc, #772]	; (800bfac <atan+0x31c>)
 800bca6:	429e      	cmp	r6, r3
 800bca8:	dc01      	bgt.n	800bcae <atan+0x1e>
 800bcaa:	d109      	bne.n	800bcc0 <atan+0x30>
 800bcac:	b144      	cbz	r4, 800bcc0 <atan+0x30>
 800bcae:	4622      	mov	r2, r4
 800bcb0:	462b      	mov	r3, r5
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f7f4 fae9 	bl	800028c <__adddf3>
 800bcba:	4604      	mov	r4, r0
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	e006      	b.n	800bcce <atan+0x3e>
 800bcc0:	f1bb 0f00 	cmp.w	fp, #0
 800bcc4:	f340 8131 	ble.w	800bf2a <atan+0x29a>
 800bcc8:	a59b      	add	r5, pc, #620	; (adr r5, 800bf38 <atan+0x2a8>)
 800bcca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bcce:	ec45 4b10 	vmov	d0, r4, r5
 800bcd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	4bb6      	ldr	r3, [pc, #728]	; (800bfb0 <atan+0x320>)
 800bcd8:	429e      	cmp	r6, r3
 800bcda:	dc14      	bgt.n	800bd06 <atan+0x76>
 800bcdc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bce0:	429e      	cmp	r6, r3
 800bce2:	dc0d      	bgt.n	800bd00 <atan+0x70>
 800bce4:	a396      	add	r3, pc, #600	; (adr r3, 800bf40 <atan+0x2b0>)
 800bce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcea:	ee10 0a10 	vmov	r0, s0
 800bcee:	4629      	mov	r1, r5
 800bcf0:	f7f4 facc 	bl	800028c <__adddf3>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4baf      	ldr	r3, [pc, #700]	; (800bfb4 <atan+0x324>)
 800bcf8:	f7f4 ff0e 	bl	8000b18 <__aeabi_dcmpgt>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1e6      	bne.n	800bcce <atan+0x3e>
 800bd00:	f04f 3aff 	mov.w	sl, #4294967295
 800bd04:	e02b      	b.n	800bd5e <atan+0xce>
 800bd06:	f000 f963 	bl	800bfd0 <fabs>
 800bd0a:	4bab      	ldr	r3, [pc, #684]	; (800bfb8 <atan+0x328>)
 800bd0c:	429e      	cmp	r6, r3
 800bd0e:	ec55 4b10 	vmov	r4, r5, d0
 800bd12:	f300 80bf 	bgt.w	800be94 <atan+0x204>
 800bd16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	f300 80a0 	bgt.w	800be60 <atan+0x1d0>
 800bd20:	ee10 2a10 	vmov	r2, s0
 800bd24:	ee10 0a10 	vmov	r0, s0
 800bd28:	462b      	mov	r3, r5
 800bd2a:	4629      	mov	r1, r5
 800bd2c:	f7f4 faae 	bl	800028c <__adddf3>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4ba0      	ldr	r3, [pc, #640]	; (800bfb4 <atan+0x324>)
 800bd34:	f7f4 faa8 	bl	8000288 <__aeabi_dsub>
 800bd38:	2200      	movs	r2, #0
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd42:	4620      	mov	r0, r4
 800bd44:	4629      	mov	r1, r5
 800bd46:	f7f4 faa1 	bl	800028c <__adddf3>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	4630      	mov	r0, r6
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 fd7b 	bl	800084c <__aeabi_ddiv>
 800bd56:	f04f 0a00 	mov.w	sl, #0
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	4622      	mov	r2, r4
 800bd60:	462b      	mov	r3, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	4629      	mov	r1, r5
 800bd66:	f7f4 fc47 	bl	80005f8 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4680      	mov	r8, r0
 800bd70:	4689      	mov	r9, r1
 800bd72:	f7f4 fc41 	bl	80005f8 <__aeabi_dmul>
 800bd76:	a374      	add	r3, pc, #464	; (adr r3, 800bf48 <atan+0x2b8>)
 800bd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	460f      	mov	r7, r1
 800bd80:	f7f4 fc3a 	bl	80005f8 <__aeabi_dmul>
 800bd84:	a372      	add	r3, pc, #456	; (adr r3, 800bf50 <atan+0x2c0>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 fa7f 	bl	800028c <__adddf3>
 800bd8e:	4632      	mov	r2, r6
 800bd90:	463b      	mov	r3, r7
 800bd92:	f7f4 fc31 	bl	80005f8 <__aeabi_dmul>
 800bd96:	a370      	add	r3, pc, #448	; (adr r3, 800bf58 <atan+0x2c8>)
 800bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9c:	f7f4 fa76 	bl	800028c <__adddf3>
 800bda0:	4632      	mov	r2, r6
 800bda2:	463b      	mov	r3, r7
 800bda4:	f7f4 fc28 	bl	80005f8 <__aeabi_dmul>
 800bda8:	a36d      	add	r3, pc, #436	; (adr r3, 800bf60 <atan+0x2d0>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fa6d 	bl	800028c <__adddf3>
 800bdb2:	4632      	mov	r2, r6
 800bdb4:	463b      	mov	r3, r7
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	a36b      	add	r3, pc, #428	; (adr r3, 800bf68 <atan+0x2d8>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fa64 	bl	800028c <__adddf3>
 800bdc4:	4632      	mov	r2, r6
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	f7f4 fc16 	bl	80005f8 <__aeabi_dmul>
 800bdcc:	a368      	add	r3, pc, #416	; (adr r3, 800bf70 <atan+0x2e0>)
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f7f4 fa5b 	bl	800028c <__adddf3>
 800bdd6:	4642      	mov	r2, r8
 800bdd8:	464b      	mov	r3, r9
 800bdda:	f7f4 fc0d 	bl	80005f8 <__aeabi_dmul>
 800bdde:	a366      	add	r3, pc, #408	; (adr r3, 800bf78 <atan+0x2e8>)
 800bde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde4:	4680      	mov	r8, r0
 800bde6:	4689      	mov	r9, r1
 800bde8:	4630      	mov	r0, r6
 800bdea:	4639      	mov	r1, r7
 800bdec:	f7f4 fc04 	bl	80005f8 <__aeabi_dmul>
 800bdf0:	a363      	add	r3, pc, #396	; (adr r3, 800bf80 <atan+0x2f0>)
 800bdf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf6:	f7f4 fa47 	bl	8000288 <__aeabi_dsub>
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	a361      	add	r3, pc, #388	; (adr r3, 800bf88 <atan+0x2f8>)
 800be04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be08:	f7f4 fa3e 	bl	8000288 <__aeabi_dsub>
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	a35e      	add	r3, pc, #376	; (adr r3, 800bf90 <atan+0x300>)
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f7f4 fa35 	bl	8000288 <__aeabi_dsub>
 800be1e:	4632      	mov	r2, r6
 800be20:	463b      	mov	r3, r7
 800be22:	f7f4 fbe9 	bl	80005f8 <__aeabi_dmul>
 800be26:	a35c      	add	r3, pc, #368	; (adr r3, 800bf98 <atan+0x308>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	f7f4 fa2c 	bl	8000288 <__aeabi_dsub>
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	f7f4 fbe0 	bl	80005f8 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4640      	mov	r0, r8
 800be3e:	4649      	mov	r1, r9
 800be40:	f7f4 fa24 	bl	800028c <__adddf3>
 800be44:	4622      	mov	r2, r4
 800be46:	462b      	mov	r3, r5
 800be48:	f7f4 fbd6 	bl	80005f8 <__aeabi_dmul>
 800be4c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	d14b      	bne.n	800beee <atan+0x25e>
 800be56:	4620      	mov	r0, r4
 800be58:	4629      	mov	r1, r5
 800be5a:	f7f4 fa15 	bl	8000288 <__aeabi_dsub>
 800be5e:	e72c      	b.n	800bcba <atan+0x2a>
 800be60:	ee10 0a10 	vmov	r0, s0
 800be64:	2200      	movs	r2, #0
 800be66:	4b53      	ldr	r3, [pc, #332]	; (800bfb4 <atan+0x324>)
 800be68:	4629      	mov	r1, r5
 800be6a:	f7f4 fa0d 	bl	8000288 <__aeabi_dsub>
 800be6e:	2200      	movs	r2, #0
 800be70:	4606      	mov	r6, r0
 800be72:	460f      	mov	r7, r1
 800be74:	4b4f      	ldr	r3, [pc, #316]	; (800bfb4 <atan+0x324>)
 800be76:	4620      	mov	r0, r4
 800be78:	4629      	mov	r1, r5
 800be7a:	f7f4 fa07 	bl	800028c <__adddf3>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 fce1 	bl	800084c <__aeabi_ddiv>
 800be8a:	f04f 0a01 	mov.w	sl, #1
 800be8e:	4604      	mov	r4, r0
 800be90:	460d      	mov	r5, r1
 800be92:	e764      	b.n	800bd5e <atan+0xce>
 800be94:	4b49      	ldr	r3, [pc, #292]	; (800bfbc <atan+0x32c>)
 800be96:	429e      	cmp	r6, r3
 800be98:	dc1d      	bgt.n	800bed6 <atan+0x246>
 800be9a:	ee10 0a10 	vmov	r0, s0
 800be9e:	2200      	movs	r2, #0
 800bea0:	4b47      	ldr	r3, [pc, #284]	; (800bfc0 <atan+0x330>)
 800bea2:	4629      	mov	r1, r5
 800bea4:	f7f4 f9f0 	bl	8000288 <__aeabi_dsub>
 800bea8:	2200      	movs	r2, #0
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	4b44      	ldr	r3, [pc, #272]	; (800bfc0 <atan+0x330>)
 800beb0:	4620      	mov	r0, r4
 800beb2:	4629      	mov	r1, r5
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	2200      	movs	r2, #0
 800beba:	4b3e      	ldr	r3, [pc, #248]	; (800bfb4 <atan+0x324>)
 800bebc:	f7f4 f9e6 	bl	800028c <__adddf3>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	4639      	mov	r1, r7
 800bec8:	f7f4 fcc0 	bl	800084c <__aeabi_ddiv>
 800becc:	f04f 0a02 	mov.w	sl, #2
 800bed0:	4604      	mov	r4, r0
 800bed2:	460d      	mov	r5, r1
 800bed4:	e743      	b.n	800bd5e <atan+0xce>
 800bed6:	462b      	mov	r3, r5
 800bed8:	ee10 2a10 	vmov	r2, s0
 800bedc:	2000      	movs	r0, #0
 800bede:	4939      	ldr	r1, [pc, #228]	; (800bfc4 <atan+0x334>)
 800bee0:	f7f4 fcb4 	bl	800084c <__aeabi_ddiv>
 800bee4:	f04f 0a03 	mov.w	sl, #3
 800bee8:	4604      	mov	r4, r0
 800beea:	460d      	mov	r5, r1
 800beec:	e737      	b.n	800bd5e <atan+0xce>
 800beee:	4b36      	ldr	r3, [pc, #216]	; (800bfc8 <atan+0x338>)
 800bef0:	4e36      	ldr	r6, [pc, #216]	; (800bfcc <atan+0x33c>)
 800bef2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bef6:	4456      	add	r6, sl
 800bef8:	449a      	add	sl, r3
 800befa:	e9da 2300 	ldrd	r2, r3, [sl]
 800befe:	f7f4 f9c3 	bl	8000288 <__aeabi_dsub>
 800bf02:	4622      	mov	r2, r4
 800bf04:	462b      	mov	r3, r5
 800bf06:	f7f4 f9bf 	bl	8000288 <__aeabi_dsub>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bf12:	f7f4 f9b9 	bl	8000288 <__aeabi_dsub>
 800bf16:	f1bb 0f00 	cmp.w	fp, #0
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	460d      	mov	r5, r1
 800bf1e:	f6bf aed6 	bge.w	800bcce <atan+0x3e>
 800bf22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf26:	461d      	mov	r5, r3
 800bf28:	e6d1      	b.n	800bcce <atan+0x3e>
 800bf2a:	a51d      	add	r5, pc, #116	; (adr r5, 800bfa0 <atan+0x310>)
 800bf2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf30:	e6cd      	b.n	800bcce <atan+0x3e>
 800bf32:	bf00      	nop
 800bf34:	f3af 8000 	nop.w
 800bf38:	54442d18 	.word	0x54442d18
 800bf3c:	3ff921fb 	.word	0x3ff921fb
 800bf40:	8800759c 	.word	0x8800759c
 800bf44:	7e37e43c 	.word	0x7e37e43c
 800bf48:	e322da11 	.word	0xe322da11
 800bf4c:	3f90ad3a 	.word	0x3f90ad3a
 800bf50:	24760deb 	.word	0x24760deb
 800bf54:	3fa97b4b 	.word	0x3fa97b4b
 800bf58:	a0d03d51 	.word	0xa0d03d51
 800bf5c:	3fb10d66 	.word	0x3fb10d66
 800bf60:	c54c206e 	.word	0xc54c206e
 800bf64:	3fb745cd 	.word	0x3fb745cd
 800bf68:	920083ff 	.word	0x920083ff
 800bf6c:	3fc24924 	.word	0x3fc24924
 800bf70:	5555550d 	.word	0x5555550d
 800bf74:	3fd55555 	.word	0x3fd55555
 800bf78:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf7c:	bfa2b444 	.word	0xbfa2b444
 800bf80:	52defd9a 	.word	0x52defd9a
 800bf84:	3fadde2d 	.word	0x3fadde2d
 800bf88:	af749a6d 	.word	0xaf749a6d
 800bf8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf90:	fe231671 	.word	0xfe231671
 800bf94:	3fbc71c6 	.word	0x3fbc71c6
 800bf98:	9998ebc4 	.word	0x9998ebc4
 800bf9c:	3fc99999 	.word	0x3fc99999
 800bfa0:	54442d18 	.word	0x54442d18
 800bfa4:	bff921fb 	.word	0xbff921fb
 800bfa8:	440fffff 	.word	0x440fffff
 800bfac:	7ff00000 	.word	0x7ff00000
 800bfb0:	3fdbffff 	.word	0x3fdbffff
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	3ff2ffff 	.word	0x3ff2ffff
 800bfbc:	40037fff 	.word	0x40037fff
 800bfc0:	3ff80000 	.word	0x3ff80000
 800bfc4:	bff00000 	.word	0xbff00000
 800bfc8:	08010988 	.word	0x08010988
 800bfcc:	08010968 	.word	0x08010968

0800bfd0 <fabs>:
 800bfd0:	ec51 0b10 	vmov	r0, r1, d0
 800bfd4:	ee10 2a10 	vmov	r2, s0
 800bfd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfdc:	ec43 2b10 	vmov	d0, r2, r3
 800bfe0:	4770      	bx	lr
 800bfe2:	0000      	movs	r0, r0
 800bfe4:	0000      	movs	r0, r0
	...

0800bfe8 <floor>:
 800bfe8:	ec51 0b10 	vmov	r0, r1, d0
 800bfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800bff4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800bff8:	2e13      	cmp	r6, #19
 800bffa:	460c      	mov	r4, r1
 800bffc:	ee10 5a10 	vmov	r5, s0
 800c000:	4680      	mov	r8, r0
 800c002:	dc34      	bgt.n	800c06e <floor+0x86>
 800c004:	2e00      	cmp	r6, #0
 800c006:	da16      	bge.n	800c036 <floor+0x4e>
 800c008:	a335      	add	r3, pc, #212	; (adr r3, 800c0e0 <floor+0xf8>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 f93d 	bl	800028c <__adddf3>
 800c012:	2200      	movs	r2, #0
 800c014:	2300      	movs	r3, #0
 800c016:	f7f4 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800c01a:	b148      	cbz	r0, 800c030 <floor+0x48>
 800c01c:	2c00      	cmp	r4, #0
 800c01e:	da59      	bge.n	800c0d4 <floor+0xec>
 800c020:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c024:	4a30      	ldr	r2, [pc, #192]	; (800c0e8 <floor+0x100>)
 800c026:	432b      	orrs	r3, r5
 800c028:	2500      	movs	r5, #0
 800c02a:	42ab      	cmp	r3, r5
 800c02c:	bf18      	it	ne
 800c02e:	4614      	movne	r4, r2
 800c030:	4621      	mov	r1, r4
 800c032:	4628      	mov	r0, r5
 800c034:	e025      	b.n	800c082 <floor+0x9a>
 800c036:	4f2d      	ldr	r7, [pc, #180]	; (800c0ec <floor+0x104>)
 800c038:	4137      	asrs	r7, r6
 800c03a:	ea01 0307 	and.w	r3, r1, r7
 800c03e:	4303      	orrs	r3, r0
 800c040:	d01f      	beq.n	800c082 <floor+0x9a>
 800c042:	a327      	add	r3, pc, #156	; (adr r3, 800c0e0 <floor+0xf8>)
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	f7f4 f920 	bl	800028c <__adddf3>
 800c04c:	2200      	movs	r2, #0
 800c04e:	2300      	movs	r3, #0
 800c050:	f7f4 fd62 	bl	8000b18 <__aeabi_dcmpgt>
 800c054:	2800      	cmp	r0, #0
 800c056:	d0eb      	beq.n	800c030 <floor+0x48>
 800c058:	2c00      	cmp	r4, #0
 800c05a:	bfbe      	ittt	lt
 800c05c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c060:	fa43 f606 	asrlt.w	r6, r3, r6
 800c064:	19a4      	addlt	r4, r4, r6
 800c066:	ea24 0407 	bic.w	r4, r4, r7
 800c06a:	2500      	movs	r5, #0
 800c06c:	e7e0      	b.n	800c030 <floor+0x48>
 800c06e:	2e33      	cmp	r6, #51	; 0x33
 800c070:	dd0b      	ble.n	800c08a <floor+0xa2>
 800c072:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c076:	d104      	bne.n	800c082 <floor+0x9a>
 800c078:	ee10 2a10 	vmov	r2, s0
 800c07c:	460b      	mov	r3, r1
 800c07e:	f7f4 f905 	bl	800028c <__adddf3>
 800c082:	ec41 0b10 	vmov	d0, r0, r1
 800c086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c08a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c08e:	f04f 33ff 	mov.w	r3, #4294967295
 800c092:	fa23 f707 	lsr.w	r7, r3, r7
 800c096:	4207      	tst	r7, r0
 800c098:	d0f3      	beq.n	800c082 <floor+0x9a>
 800c09a:	a311      	add	r3, pc, #68	; (adr r3, 800c0e0 <floor+0xf8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f8f4 	bl	800028c <__adddf3>
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	f7f4 fd36 	bl	8000b18 <__aeabi_dcmpgt>
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	d0bf      	beq.n	800c030 <floor+0x48>
 800c0b0:	2c00      	cmp	r4, #0
 800c0b2:	da02      	bge.n	800c0ba <floor+0xd2>
 800c0b4:	2e14      	cmp	r6, #20
 800c0b6:	d103      	bne.n	800c0c0 <floor+0xd8>
 800c0b8:	3401      	adds	r4, #1
 800c0ba:	ea25 0507 	bic.w	r5, r5, r7
 800c0be:	e7b7      	b.n	800c030 <floor+0x48>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c0c6:	fa03 f606 	lsl.w	r6, r3, r6
 800c0ca:	4435      	add	r5, r6
 800c0cc:	4545      	cmp	r5, r8
 800c0ce:	bf38      	it	cc
 800c0d0:	18e4      	addcc	r4, r4, r3
 800c0d2:	e7f2      	b.n	800c0ba <floor+0xd2>
 800c0d4:	2500      	movs	r5, #0
 800c0d6:	462c      	mov	r4, r5
 800c0d8:	e7aa      	b.n	800c030 <floor+0x48>
 800c0da:	bf00      	nop
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	8800759c 	.word	0x8800759c
 800c0e4:	7e37e43c 	.word	0x7e37e43c
 800c0e8:	bff00000 	.word	0xbff00000
 800c0ec:	000fffff 	.word	0x000fffff

0800c0f0 <scalbn>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	ec55 4b10 	vmov	r4, r5, d0
 800c0f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	b9aa      	cbnz	r2, 800c12c <scalbn+0x3c>
 800c100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c104:	4323      	orrs	r3, r4
 800c106:	d03b      	beq.n	800c180 <scalbn+0x90>
 800c108:	4b31      	ldr	r3, [pc, #196]	; (800c1d0 <scalbn+0xe0>)
 800c10a:	4629      	mov	r1, r5
 800c10c:	2200      	movs	r2, #0
 800c10e:	ee10 0a10 	vmov	r0, s0
 800c112:	f7f4 fa71 	bl	80005f8 <__aeabi_dmul>
 800c116:	4b2f      	ldr	r3, [pc, #188]	; (800c1d4 <scalbn+0xe4>)
 800c118:	429e      	cmp	r6, r3
 800c11a:	4604      	mov	r4, r0
 800c11c:	460d      	mov	r5, r1
 800c11e:	da12      	bge.n	800c146 <scalbn+0x56>
 800c120:	a327      	add	r3, pc, #156	; (adr r3, 800c1c0 <scalbn+0xd0>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7f4 fa67 	bl	80005f8 <__aeabi_dmul>
 800c12a:	e009      	b.n	800c140 <scalbn+0x50>
 800c12c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c130:	428a      	cmp	r2, r1
 800c132:	d10c      	bne.n	800c14e <scalbn+0x5e>
 800c134:	ee10 2a10 	vmov	r2, s0
 800c138:	4620      	mov	r0, r4
 800c13a:	4629      	mov	r1, r5
 800c13c:	f7f4 f8a6 	bl	800028c <__adddf3>
 800c140:	4604      	mov	r4, r0
 800c142:	460d      	mov	r5, r1
 800c144:	e01c      	b.n	800c180 <scalbn+0x90>
 800c146:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c14a:	460b      	mov	r3, r1
 800c14c:	3a36      	subs	r2, #54	; 0x36
 800c14e:	4432      	add	r2, r6
 800c150:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c154:	428a      	cmp	r2, r1
 800c156:	dd0b      	ble.n	800c170 <scalbn+0x80>
 800c158:	ec45 4b11 	vmov	d1, r4, r5
 800c15c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c1c8 <scalbn+0xd8>
 800c160:	f000 f83c 	bl	800c1dc <copysign>
 800c164:	a318      	add	r3, pc, #96	; (adr r3, 800c1c8 <scalbn+0xd8>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	ec51 0b10 	vmov	r0, r1, d0
 800c16e:	e7da      	b.n	800c126 <scalbn+0x36>
 800c170:	2a00      	cmp	r2, #0
 800c172:	dd08      	ble.n	800c186 <scalbn+0x96>
 800c174:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c17c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c180:	ec45 4b10 	vmov	d0, r4, r5
 800c184:	bd70      	pop	{r4, r5, r6, pc}
 800c186:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c18a:	da0d      	bge.n	800c1a8 <scalbn+0xb8>
 800c18c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c190:	429e      	cmp	r6, r3
 800c192:	ec45 4b11 	vmov	d1, r4, r5
 800c196:	dce1      	bgt.n	800c15c <scalbn+0x6c>
 800c198:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c1c0 <scalbn+0xd0>
 800c19c:	f000 f81e 	bl	800c1dc <copysign>
 800c1a0:	a307      	add	r3, pc, #28	; (adr r3, 800c1c0 <scalbn+0xd0>)
 800c1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a6:	e7e0      	b.n	800c16a <scalbn+0x7a>
 800c1a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1ac:	3236      	adds	r2, #54	; 0x36
 800c1ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <scalbn+0xe8>)
 800c1be:	e7b2      	b.n	800c126 <scalbn+0x36>
 800c1c0:	c2f8f359 	.word	0xc2f8f359
 800c1c4:	01a56e1f 	.word	0x01a56e1f
 800c1c8:	8800759c 	.word	0x8800759c
 800c1cc:	7e37e43c 	.word	0x7e37e43c
 800c1d0:	43500000 	.word	0x43500000
 800c1d4:	ffff3cb0 	.word	0xffff3cb0
 800c1d8:	3c900000 	.word	0x3c900000

0800c1dc <copysign>:
 800c1dc:	ec51 0b10 	vmov	r0, r1, d0
 800c1e0:	ee11 0a90 	vmov	r0, s3
 800c1e4:	ee10 2a10 	vmov	r2, s0
 800c1e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c1ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c1f0:	ea41 0300 	orr.w	r3, r1, r0
 800c1f4:	ec43 2b10 	vmov	d0, r2, r3
 800c1f8:	4770      	bx	lr
	...

0800c1fc <__errno>:
 800c1fc:	4b01      	ldr	r3, [pc, #4]	; (800c204 <__errno+0x8>)
 800c1fe:	6818      	ldr	r0, [r3, #0]
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20000040 	.word	0x20000040

0800c208 <__libc_init_array>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4e0d      	ldr	r6, [pc, #52]	; (800c240 <__libc_init_array+0x38>)
 800c20c:	4c0d      	ldr	r4, [pc, #52]	; (800c244 <__libc_init_array+0x3c>)
 800c20e:	1ba4      	subs	r4, r4, r6
 800c210:	10a4      	asrs	r4, r4, #2
 800c212:	2500      	movs	r5, #0
 800c214:	42a5      	cmp	r5, r4
 800c216:	d109      	bne.n	800c22c <__libc_init_array+0x24>
 800c218:	4e0b      	ldr	r6, [pc, #44]	; (800c248 <__libc_init_array+0x40>)
 800c21a:	4c0c      	ldr	r4, [pc, #48]	; (800c24c <__libc_init_array+0x44>)
 800c21c:	f004 fa5e 	bl	80106dc <_init>
 800c220:	1ba4      	subs	r4, r4, r6
 800c222:	10a4      	asrs	r4, r4, #2
 800c224:	2500      	movs	r5, #0
 800c226:	42a5      	cmp	r5, r4
 800c228:	d105      	bne.n	800c236 <__libc_init_array+0x2e>
 800c22a:	bd70      	pop	{r4, r5, r6, pc}
 800c22c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c230:	4798      	blx	r3
 800c232:	3501      	adds	r5, #1
 800c234:	e7ee      	b.n	800c214 <__libc_init_array+0xc>
 800c236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c23a:	4798      	blx	r3
 800c23c:	3501      	adds	r5, #1
 800c23e:	e7f2      	b.n	800c226 <__libc_init_array+0x1e>
 800c240:	08010cd0 	.word	0x08010cd0
 800c244:	08010cd0 	.word	0x08010cd0
 800c248:	08010cd0 	.word	0x08010cd0
 800c24c:	08010cd4 	.word	0x08010cd4

0800c250 <memcpy>:
 800c250:	b510      	push	{r4, lr}
 800c252:	1e43      	subs	r3, r0, #1
 800c254:	440a      	add	r2, r1
 800c256:	4291      	cmp	r1, r2
 800c258:	d100      	bne.n	800c25c <memcpy+0xc>
 800c25a:	bd10      	pop	{r4, pc}
 800c25c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c260:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c264:	e7f7      	b.n	800c256 <memcpy+0x6>

0800c266 <memset>:
 800c266:	4402      	add	r2, r0
 800c268:	4603      	mov	r3, r0
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d100      	bne.n	800c270 <memset+0xa>
 800c26e:	4770      	bx	lr
 800c270:	f803 1b01 	strb.w	r1, [r3], #1
 800c274:	e7f9      	b.n	800c26a <memset+0x4>

0800c276 <__cvt>:
 800c276:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c27a:	ec55 4b10 	vmov	r4, r5, d0
 800c27e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c280:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c284:	2d00      	cmp	r5, #0
 800c286:	460e      	mov	r6, r1
 800c288:	4691      	mov	r9, r2
 800c28a:	4619      	mov	r1, r3
 800c28c:	bfb8      	it	lt
 800c28e:	4622      	movlt	r2, r4
 800c290:	462b      	mov	r3, r5
 800c292:	f027 0720 	bic.w	r7, r7, #32
 800c296:	bfbb      	ittet	lt
 800c298:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c29c:	461d      	movlt	r5, r3
 800c29e:	2300      	movge	r3, #0
 800c2a0:	232d      	movlt	r3, #45	; 0x2d
 800c2a2:	bfb8      	it	lt
 800c2a4:	4614      	movlt	r4, r2
 800c2a6:	2f46      	cmp	r7, #70	; 0x46
 800c2a8:	700b      	strb	r3, [r1, #0]
 800c2aa:	d004      	beq.n	800c2b6 <__cvt+0x40>
 800c2ac:	2f45      	cmp	r7, #69	; 0x45
 800c2ae:	d100      	bne.n	800c2b2 <__cvt+0x3c>
 800c2b0:	3601      	adds	r6, #1
 800c2b2:	2102      	movs	r1, #2
 800c2b4:	e000      	b.n	800c2b8 <__cvt+0x42>
 800c2b6:	2103      	movs	r1, #3
 800c2b8:	ab03      	add	r3, sp, #12
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	ab02      	add	r3, sp, #8
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	4632      	mov	r2, r6
 800c2c2:	4653      	mov	r3, sl
 800c2c4:	ec45 4b10 	vmov	d0, r4, r5
 800c2c8:	f001 feb2 	bl	800e030 <_dtoa_r>
 800c2cc:	2f47      	cmp	r7, #71	; 0x47
 800c2ce:	4680      	mov	r8, r0
 800c2d0:	d102      	bne.n	800c2d8 <__cvt+0x62>
 800c2d2:	f019 0f01 	tst.w	r9, #1
 800c2d6:	d026      	beq.n	800c326 <__cvt+0xb0>
 800c2d8:	2f46      	cmp	r7, #70	; 0x46
 800c2da:	eb08 0906 	add.w	r9, r8, r6
 800c2de:	d111      	bne.n	800c304 <__cvt+0x8e>
 800c2e0:	f898 3000 	ldrb.w	r3, [r8]
 800c2e4:	2b30      	cmp	r3, #48	; 0x30
 800c2e6:	d10a      	bne.n	800c2fe <__cvt+0x88>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4620      	mov	r0, r4
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f7f4 fbea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2f4:	b918      	cbnz	r0, 800c2fe <__cvt+0x88>
 800c2f6:	f1c6 0601 	rsb	r6, r6, #1
 800c2fa:	f8ca 6000 	str.w	r6, [sl]
 800c2fe:	f8da 3000 	ldr.w	r3, [sl]
 800c302:	4499      	add	r9, r3
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	4620      	mov	r0, r4
 800c30a:	4629      	mov	r1, r5
 800c30c:	f7f4 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c310:	b938      	cbnz	r0, 800c322 <__cvt+0xac>
 800c312:	2230      	movs	r2, #48	; 0x30
 800c314:	9b03      	ldr	r3, [sp, #12]
 800c316:	454b      	cmp	r3, r9
 800c318:	d205      	bcs.n	800c326 <__cvt+0xb0>
 800c31a:	1c59      	adds	r1, r3, #1
 800c31c:	9103      	str	r1, [sp, #12]
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e7f8      	b.n	800c314 <__cvt+0x9e>
 800c322:	f8cd 900c 	str.w	r9, [sp, #12]
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c32a:	eba3 0308 	sub.w	r3, r3, r8
 800c32e:	4640      	mov	r0, r8
 800c330:	6013      	str	r3, [r2, #0]
 800c332:	b004      	add	sp, #16
 800c334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c338 <__exponent>:
 800c338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c33a:	2900      	cmp	r1, #0
 800c33c:	4604      	mov	r4, r0
 800c33e:	bfba      	itte	lt
 800c340:	4249      	neglt	r1, r1
 800c342:	232d      	movlt	r3, #45	; 0x2d
 800c344:	232b      	movge	r3, #43	; 0x2b
 800c346:	2909      	cmp	r1, #9
 800c348:	f804 2b02 	strb.w	r2, [r4], #2
 800c34c:	7043      	strb	r3, [r0, #1]
 800c34e:	dd20      	ble.n	800c392 <__exponent+0x5a>
 800c350:	f10d 0307 	add.w	r3, sp, #7
 800c354:	461f      	mov	r7, r3
 800c356:	260a      	movs	r6, #10
 800c358:	fb91 f5f6 	sdiv	r5, r1, r6
 800c35c:	fb06 1115 	mls	r1, r6, r5, r1
 800c360:	3130      	adds	r1, #48	; 0x30
 800c362:	2d09      	cmp	r5, #9
 800c364:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c368:	f103 32ff 	add.w	r2, r3, #4294967295
 800c36c:	4629      	mov	r1, r5
 800c36e:	dc09      	bgt.n	800c384 <__exponent+0x4c>
 800c370:	3130      	adds	r1, #48	; 0x30
 800c372:	3b02      	subs	r3, #2
 800c374:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c378:	42bb      	cmp	r3, r7
 800c37a:	4622      	mov	r2, r4
 800c37c:	d304      	bcc.n	800c388 <__exponent+0x50>
 800c37e:	1a10      	subs	r0, r2, r0
 800c380:	b003      	add	sp, #12
 800c382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c384:	4613      	mov	r3, r2
 800c386:	e7e7      	b.n	800c358 <__exponent+0x20>
 800c388:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c38c:	f804 2b01 	strb.w	r2, [r4], #1
 800c390:	e7f2      	b.n	800c378 <__exponent+0x40>
 800c392:	2330      	movs	r3, #48	; 0x30
 800c394:	4419      	add	r1, r3
 800c396:	7083      	strb	r3, [r0, #2]
 800c398:	1d02      	adds	r2, r0, #4
 800c39a:	70c1      	strb	r1, [r0, #3]
 800c39c:	e7ef      	b.n	800c37e <__exponent+0x46>
	...

0800c3a0 <_printf_float>:
 800c3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a4:	b08d      	sub	sp, #52	; 0x34
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c3ac:	4616      	mov	r6, r2
 800c3ae:	461f      	mov	r7, r3
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	f003 f89b 	bl	800f4ec <_localeconv_r>
 800c3b6:	6803      	ldr	r3, [r0, #0]
 800c3b8:	9304      	str	r3, [sp, #16]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f3 ff08 	bl	80001d0 <strlen>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3c8:	9005      	str	r0, [sp, #20]
 800c3ca:	3307      	adds	r3, #7
 800c3cc:	f023 0307 	bic.w	r3, r3, #7
 800c3d0:	f103 0208 	add.w	r2, r3, #8
 800c3d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3d8:	f8d4 b000 	ldr.w	fp, [r4]
 800c3dc:	f8c8 2000 	str.w	r2, [r8]
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3f0:	9307      	str	r3, [sp, #28]
 800c3f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fa:	4ba7      	ldr	r3, [pc, #668]	; (800c698 <_printf_float+0x2f8>)
 800c3fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c400:	f7f4 fb94 	bl	8000b2c <__aeabi_dcmpun>
 800c404:	bb70      	cbnz	r0, 800c464 <_printf_float+0xc4>
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	4ba3      	ldr	r3, [pc, #652]	; (800c698 <_printf_float+0x2f8>)
 800c40c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c410:	f7f4 fb6e 	bl	8000af0 <__aeabi_dcmple>
 800c414:	bb30      	cbnz	r0, 800c464 <_printf_float+0xc4>
 800c416:	2200      	movs	r2, #0
 800c418:	2300      	movs	r3, #0
 800c41a:	4640      	mov	r0, r8
 800c41c:	4649      	mov	r1, r9
 800c41e:	f7f4 fb5d 	bl	8000adc <__aeabi_dcmplt>
 800c422:	b110      	cbz	r0, 800c42a <_printf_float+0x8a>
 800c424:	232d      	movs	r3, #45	; 0x2d
 800c426:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c42a:	4a9c      	ldr	r2, [pc, #624]	; (800c69c <_printf_float+0x2fc>)
 800c42c:	4b9c      	ldr	r3, [pc, #624]	; (800c6a0 <_printf_float+0x300>)
 800c42e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c432:	bf8c      	ite	hi
 800c434:	4690      	movhi	r8, r2
 800c436:	4698      	movls	r8, r3
 800c438:	2303      	movs	r3, #3
 800c43a:	f02b 0204 	bic.w	r2, fp, #4
 800c43e:	6123      	str	r3, [r4, #16]
 800c440:	6022      	str	r2, [r4, #0]
 800c442:	f04f 0900 	mov.w	r9, #0
 800c446:	9700      	str	r7, [sp, #0]
 800c448:	4633      	mov	r3, r6
 800c44a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 f9e6 	bl	800c820 <_printf_common>
 800c454:	3001      	adds	r0, #1
 800c456:	f040 808d 	bne.w	800c574 <_printf_float+0x1d4>
 800c45a:	f04f 30ff 	mov.w	r0, #4294967295
 800c45e:	b00d      	add	sp, #52	; 0x34
 800c460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c464:	4642      	mov	r2, r8
 800c466:	464b      	mov	r3, r9
 800c468:	4640      	mov	r0, r8
 800c46a:	4649      	mov	r1, r9
 800c46c:	f7f4 fb5e 	bl	8000b2c <__aeabi_dcmpun>
 800c470:	b110      	cbz	r0, 800c478 <_printf_float+0xd8>
 800c472:	4a8c      	ldr	r2, [pc, #560]	; (800c6a4 <_printf_float+0x304>)
 800c474:	4b8c      	ldr	r3, [pc, #560]	; (800c6a8 <_printf_float+0x308>)
 800c476:	e7da      	b.n	800c42e <_printf_float+0x8e>
 800c478:	6861      	ldr	r1, [r4, #4]
 800c47a:	1c4b      	adds	r3, r1, #1
 800c47c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c480:	a80a      	add	r0, sp, #40	; 0x28
 800c482:	d13e      	bne.n	800c502 <_printf_float+0x162>
 800c484:	2306      	movs	r3, #6
 800c486:	6063      	str	r3, [r4, #4]
 800c488:	2300      	movs	r3, #0
 800c48a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c48e:	ab09      	add	r3, sp, #36	; 0x24
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	ec49 8b10 	vmov	d0, r8, r9
 800c496:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c49a:	6022      	str	r2, [r4, #0]
 800c49c:	f8cd a004 	str.w	sl, [sp, #4]
 800c4a0:	6861      	ldr	r1, [r4, #4]
 800c4a2:	4628      	mov	r0, r5
 800c4a4:	f7ff fee7 	bl	800c276 <__cvt>
 800c4a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c4ac:	2b47      	cmp	r3, #71	; 0x47
 800c4ae:	4680      	mov	r8, r0
 800c4b0:	d109      	bne.n	800c4c6 <_printf_float+0x126>
 800c4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b4:	1cd8      	adds	r0, r3, #3
 800c4b6:	db02      	blt.n	800c4be <_printf_float+0x11e>
 800c4b8:	6862      	ldr	r2, [r4, #4]
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	dd47      	ble.n	800c54e <_printf_float+0x1ae>
 800c4be:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4c2:	fa5f fa8a 	uxtb.w	sl, sl
 800c4c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c4ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4cc:	d824      	bhi.n	800c518 <_printf_float+0x178>
 800c4ce:	3901      	subs	r1, #1
 800c4d0:	4652      	mov	r2, sl
 800c4d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4d6:	9109      	str	r1, [sp, #36]	; 0x24
 800c4d8:	f7ff ff2e 	bl	800c338 <__exponent>
 800c4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4de:	1813      	adds	r3, r2, r0
 800c4e0:	2a01      	cmp	r2, #1
 800c4e2:	4681      	mov	r9, r0
 800c4e4:	6123      	str	r3, [r4, #16]
 800c4e6:	dc02      	bgt.n	800c4ee <_printf_float+0x14e>
 800c4e8:	6822      	ldr	r2, [r4, #0]
 800c4ea:	07d1      	lsls	r1, r2, #31
 800c4ec:	d501      	bpl.n	800c4f2 <_printf_float+0x152>
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	6123      	str	r3, [r4, #16]
 800c4f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0a5      	beq.n	800c446 <_printf_float+0xa6>
 800c4fa:	232d      	movs	r3, #45	; 0x2d
 800c4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c500:	e7a1      	b.n	800c446 <_printf_float+0xa6>
 800c502:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c506:	f000 8177 	beq.w	800c7f8 <_printf_float+0x458>
 800c50a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c50e:	d1bb      	bne.n	800c488 <_printf_float+0xe8>
 800c510:	2900      	cmp	r1, #0
 800c512:	d1b9      	bne.n	800c488 <_printf_float+0xe8>
 800c514:	2301      	movs	r3, #1
 800c516:	e7b6      	b.n	800c486 <_printf_float+0xe6>
 800c518:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c51c:	d119      	bne.n	800c552 <_printf_float+0x1b2>
 800c51e:	2900      	cmp	r1, #0
 800c520:	6863      	ldr	r3, [r4, #4]
 800c522:	dd0c      	ble.n	800c53e <_printf_float+0x19e>
 800c524:	6121      	str	r1, [r4, #16]
 800c526:	b913      	cbnz	r3, 800c52e <_printf_float+0x18e>
 800c528:	6822      	ldr	r2, [r4, #0]
 800c52a:	07d2      	lsls	r2, r2, #31
 800c52c:	d502      	bpl.n	800c534 <_printf_float+0x194>
 800c52e:	3301      	adds	r3, #1
 800c530:	440b      	add	r3, r1
 800c532:	6123      	str	r3, [r4, #16]
 800c534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c536:	65a3      	str	r3, [r4, #88]	; 0x58
 800c538:	f04f 0900 	mov.w	r9, #0
 800c53c:	e7d9      	b.n	800c4f2 <_printf_float+0x152>
 800c53e:	b913      	cbnz	r3, 800c546 <_printf_float+0x1a6>
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	07d0      	lsls	r0, r2, #31
 800c544:	d501      	bpl.n	800c54a <_printf_float+0x1aa>
 800c546:	3302      	adds	r3, #2
 800c548:	e7f3      	b.n	800c532 <_printf_float+0x192>
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7f1      	b.n	800c532 <_printf_float+0x192>
 800c54e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c552:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c556:	4293      	cmp	r3, r2
 800c558:	db05      	blt.n	800c566 <_printf_float+0x1c6>
 800c55a:	6822      	ldr	r2, [r4, #0]
 800c55c:	6123      	str	r3, [r4, #16]
 800c55e:	07d1      	lsls	r1, r2, #31
 800c560:	d5e8      	bpl.n	800c534 <_printf_float+0x194>
 800c562:	3301      	adds	r3, #1
 800c564:	e7e5      	b.n	800c532 <_printf_float+0x192>
 800c566:	2b00      	cmp	r3, #0
 800c568:	bfd4      	ite	le
 800c56a:	f1c3 0302 	rsble	r3, r3, #2
 800c56e:	2301      	movgt	r3, #1
 800c570:	4413      	add	r3, r2
 800c572:	e7de      	b.n	800c532 <_printf_float+0x192>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	055a      	lsls	r2, r3, #21
 800c578:	d407      	bmi.n	800c58a <_printf_float+0x1ea>
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	4642      	mov	r2, r8
 800c57e:	4631      	mov	r1, r6
 800c580:	4628      	mov	r0, r5
 800c582:	47b8      	blx	r7
 800c584:	3001      	adds	r0, #1
 800c586:	d12b      	bne.n	800c5e0 <_printf_float+0x240>
 800c588:	e767      	b.n	800c45a <_printf_float+0xba>
 800c58a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c58e:	f240 80dc 	bls.w	800c74a <_printf_float+0x3aa>
 800c592:	2200      	movs	r2, #0
 800c594:	2300      	movs	r3, #0
 800c596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c59a:	f7f4 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d033      	beq.n	800c60a <_printf_float+0x26a>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	4a41      	ldr	r2, [pc, #260]	; (800c6ac <_printf_float+0x30c>)
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f af54 	beq.w	800c45a <_printf_float+0xba>
 800c5b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	db02      	blt.n	800c5c0 <_printf_float+0x220>
 800c5ba:	6823      	ldr	r3, [r4, #0]
 800c5bc:	07d8      	lsls	r0, r3, #31
 800c5be:	d50f      	bpl.n	800c5e0 <_printf_float+0x240>
 800c5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5c4:	4631      	mov	r1, r6
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	47b8      	blx	r7
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	f43f af45 	beq.w	800c45a <_printf_float+0xba>
 800c5d0:	f04f 0800 	mov.w	r8, #0
 800c5d4:	f104 091a 	add.w	r9, r4, #26
 800c5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	4543      	cmp	r3, r8
 800c5de:	dc09      	bgt.n	800c5f4 <_printf_float+0x254>
 800c5e0:	6823      	ldr	r3, [r4, #0]
 800c5e2:	079b      	lsls	r3, r3, #30
 800c5e4:	f100 8103 	bmi.w	800c7ee <_printf_float+0x44e>
 800c5e8:	68e0      	ldr	r0, [r4, #12]
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	4298      	cmp	r0, r3
 800c5ee:	bfb8      	it	lt
 800c5f0:	4618      	movlt	r0, r3
 800c5f2:	e734      	b.n	800c45e <_printf_float+0xbe>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	464a      	mov	r2, r9
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af2b 	beq.w	800c45a <_printf_float+0xba>
 800c604:	f108 0801 	add.w	r8, r8, #1
 800c608:	e7e6      	b.n	800c5d8 <_printf_float+0x238>
 800c60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	dc2b      	bgt.n	800c668 <_printf_float+0x2c8>
 800c610:	2301      	movs	r3, #1
 800c612:	4a26      	ldr	r2, [pc, #152]	; (800c6ac <_printf_float+0x30c>)
 800c614:	4631      	mov	r1, r6
 800c616:	4628      	mov	r0, r5
 800c618:	47b8      	blx	r7
 800c61a:	3001      	adds	r0, #1
 800c61c:	f43f af1d 	beq.w	800c45a <_printf_float+0xba>
 800c620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c622:	b923      	cbnz	r3, 800c62e <_printf_float+0x28e>
 800c624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c626:	b913      	cbnz	r3, 800c62e <_printf_float+0x28e>
 800c628:	6823      	ldr	r3, [r4, #0]
 800c62a:	07d9      	lsls	r1, r3, #31
 800c62c:	d5d8      	bpl.n	800c5e0 <_printf_float+0x240>
 800c62e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c632:	4631      	mov	r1, r6
 800c634:	4628      	mov	r0, r5
 800c636:	47b8      	blx	r7
 800c638:	3001      	adds	r0, #1
 800c63a:	f43f af0e 	beq.w	800c45a <_printf_float+0xba>
 800c63e:	f04f 0900 	mov.w	r9, #0
 800c642:	f104 0a1a 	add.w	sl, r4, #26
 800c646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c648:	425b      	negs	r3, r3
 800c64a:	454b      	cmp	r3, r9
 800c64c:	dc01      	bgt.n	800c652 <_printf_float+0x2b2>
 800c64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c650:	e794      	b.n	800c57c <_printf_float+0x1dc>
 800c652:	2301      	movs	r3, #1
 800c654:	4652      	mov	r2, sl
 800c656:	4631      	mov	r1, r6
 800c658:	4628      	mov	r0, r5
 800c65a:	47b8      	blx	r7
 800c65c:	3001      	adds	r0, #1
 800c65e:	f43f aefc 	beq.w	800c45a <_printf_float+0xba>
 800c662:	f109 0901 	add.w	r9, r9, #1
 800c666:	e7ee      	b.n	800c646 <_printf_float+0x2a6>
 800c668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c66a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c66c:	429a      	cmp	r2, r3
 800c66e:	bfa8      	it	ge
 800c670:	461a      	movge	r2, r3
 800c672:	2a00      	cmp	r2, #0
 800c674:	4691      	mov	r9, r2
 800c676:	dd07      	ble.n	800c688 <_printf_float+0x2e8>
 800c678:	4613      	mov	r3, r2
 800c67a:	4631      	mov	r1, r6
 800c67c:	4642      	mov	r2, r8
 800c67e:	4628      	mov	r0, r5
 800c680:	47b8      	blx	r7
 800c682:	3001      	adds	r0, #1
 800c684:	f43f aee9 	beq.w	800c45a <_printf_float+0xba>
 800c688:	f104 031a 	add.w	r3, r4, #26
 800c68c:	f04f 0b00 	mov.w	fp, #0
 800c690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c694:	9306      	str	r3, [sp, #24]
 800c696:	e015      	b.n	800c6c4 <_printf_float+0x324>
 800c698:	7fefffff 	.word	0x7fefffff
 800c69c:	080109b0 	.word	0x080109b0
 800c6a0:	080109ac 	.word	0x080109ac
 800c6a4:	080109b8 	.word	0x080109b8
 800c6a8:	080109b4 	.word	0x080109b4
 800c6ac:	080109bc 	.word	0x080109bc
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	9a06      	ldr	r2, [sp, #24]
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	47b8      	blx	r7
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	f43f aecd 	beq.w	800c45a <_printf_float+0xba>
 800c6c0:	f10b 0b01 	add.w	fp, fp, #1
 800c6c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c6c8:	ebaa 0309 	sub.w	r3, sl, r9
 800c6cc:	455b      	cmp	r3, fp
 800c6ce:	dcef      	bgt.n	800c6b0 <_printf_float+0x310>
 800c6d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	44d0      	add	r8, sl
 800c6d8:	db15      	blt.n	800c706 <_printf_float+0x366>
 800c6da:	6823      	ldr	r3, [r4, #0]
 800c6dc:	07da      	lsls	r2, r3, #31
 800c6de:	d412      	bmi.n	800c706 <_printf_float+0x366>
 800c6e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6e4:	eba3 020a 	sub.w	r2, r3, sl
 800c6e8:	eba3 0a01 	sub.w	sl, r3, r1
 800c6ec:	4592      	cmp	sl, r2
 800c6ee:	bfa8      	it	ge
 800c6f0:	4692      	movge	sl, r2
 800c6f2:	f1ba 0f00 	cmp.w	sl, #0
 800c6f6:	dc0e      	bgt.n	800c716 <_printf_float+0x376>
 800c6f8:	f04f 0800 	mov.w	r8, #0
 800c6fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c700:	f104 091a 	add.w	r9, r4, #26
 800c704:	e019      	b.n	800c73a <_printf_float+0x39a>
 800c706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c70a:	4631      	mov	r1, r6
 800c70c:	4628      	mov	r0, r5
 800c70e:	47b8      	blx	r7
 800c710:	3001      	adds	r0, #1
 800c712:	d1e5      	bne.n	800c6e0 <_printf_float+0x340>
 800c714:	e6a1      	b.n	800c45a <_printf_float+0xba>
 800c716:	4653      	mov	r3, sl
 800c718:	4642      	mov	r2, r8
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	d1e9      	bne.n	800c6f8 <_printf_float+0x358>
 800c724:	e699      	b.n	800c45a <_printf_float+0xba>
 800c726:	2301      	movs	r3, #1
 800c728:	464a      	mov	r2, r9
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f ae92 	beq.w	800c45a <_printf_float+0xba>
 800c736:	f108 0801 	add.w	r8, r8, #1
 800c73a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c73e:	1a9b      	subs	r3, r3, r2
 800c740:	eba3 030a 	sub.w	r3, r3, sl
 800c744:	4543      	cmp	r3, r8
 800c746:	dcee      	bgt.n	800c726 <_printf_float+0x386>
 800c748:	e74a      	b.n	800c5e0 <_printf_float+0x240>
 800c74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c74c:	2a01      	cmp	r2, #1
 800c74e:	dc01      	bgt.n	800c754 <_printf_float+0x3b4>
 800c750:	07db      	lsls	r3, r3, #31
 800c752:	d53a      	bpl.n	800c7ca <_printf_float+0x42a>
 800c754:	2301      	movs	r3, #1
 800c756:	4642      	mov	r2, r8
 800c758:	4631      	mov	r1, r6
 800c75a:	4628      	mov	r0, r5
 800c75c:	47b8      	blx	r7
 800c75e:	3001      	adds	r0, #1
 800c760:	f43f ae7b 	beq.w	800c45a <_printf_float+0xba>
 800c764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f108 0801 	add.w	r8, r8, #1
 800c774:	f43f ae71 	beq.w	800c45a <_printf_float+0xba>
 800c778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c77a:	2200      	movs	r2, #0
 800c77c:	f103 3aff 	add.w	sl, r3, #4294967295
 800c780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c784:	2300      	movs	r3, #0
 800c786:	f7f4 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c78a:	b9c8      	cbnz	r0, 800c7c0 <_printf_float+0x420>
 800c78c:	4653      	mov	r3, sl
 800c78e:	4642      	mov	r2, r8
 800c790:	4631      	mov	r1, r6
 800c792:	4628      	mov	r0, r5
 800c794:	47b8      	blx	r7
 800c796:	3001      	adds	r0, #1
 800c798:	d10e      	bne.n	800c7b8 <_printf_float+0x418>
 800c79a:	e65e      	b.n	800c45a <_printf_float+0xba>
 800c79c:	2301      	movs	r3, #1
 800c79e:	4652      	mov	r2, sl
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	f43f ae57 	beq.w	800c45a <_printf_float+0xba>
 800c7ac:	f108 0801 	add.w	r8, r8, #1
 800c7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	4543      	cmp	r3, r8
 800c7b6:	dcf1      	bgt.n	800c79c <_printf_float+0x3fc>
 800c7b8:	464b      	mov	r3, r9
 800c7ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7be:	e6de      	b.n	800c57e <_printf_float+0x1de>
 800c7c0:	f04f 0800 	mov.w	r8, #0
 800c7c4:	f104 0a1a 	add.w	sl, r4, #26
 800c7c8:	e7f2      	b.n	800c7b0 <_printf_float+0x410>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e7df      	b.n	800c78e <_printf_float+0x3ee>
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	464a      	mov	r2, r9
 800c7d2:	4631      	mov	r1, r6
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	47b8      	blx	r7
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f43f ae3e 	beq.w	800c45a <_printf_float+0xba>
 800c7de:	f108 0801 	add.w	r8, r8, #1
 800c7e2:	68e3      	ldr	r3, [r4, #12]
 800c7e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7e6:	1a9b      	subs	r3, r3, r2
 800c7e8:	4543      	cmp	r3, r8
 800c7ea:	dcf0      	bgt.n	800c7ce <_printf_float+0x42e>
 800c7ec:	e6fc      	b.n	800c5e8 <_printf_float+0x248>
 800c7ee:	f04f 0800 	mov.w	r8, #0
 800c7f2:	f104 0919 	add.w	r9, r4, #25
 800c7f6:	e7f4      	b.n	800c7e2 <_printf_float+0x442>
 800c7f8:	2900      	cmp	r1, #0
 800c7fa:	f43f ae8b 	beq.w	800c514 <_printf_float+0x174>
 800c7fe:	2300      	movs	r3, #0
 800c800:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c804:	ab09      	add	r3, sp, #36	; 0x24
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	ec49 8b10 	vmov	d0, r8, r9
 800c80c:	6022      	str	r2, [r4, #0]
 800c80e:	f8cd a004 	str.w	sl, [sp, #4]
 800c812:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c816:	4628      	mov	r0, r5
 800c818:	f7ff fd2d 	bl	800c276 <__cvt>
 800c81c:	4680      	mov	r8, r0
 800c81e:	e648      	b.n	800c4b2 <_printf_float+0x112>

0800c820 <_printf_common>:
 800c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c824:	4691      	mov	r9, r2
 800c826:	461f      	mov	r7, r3
 800c828:	688a      	ldr	r2, [r1, #8]
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c830:	4293      	cmp	r3, r2
 800c832:	bfb8      	it	lt
 800c834:	4613      	movlt	r3, r2
 800c836:	f8c9 3000 	str.w	r3, [r9]
 800c83a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c83e:	4606      	mov	r6, r0
 800c840:	460c      	mov	r4, r1
 800c842:	b112      	cbz	r2, 800c84a <_printf_common+0x2a>
 800c844:	3301      	adds	r3, #1
 800c846:	f8c9 3000 	str.w	r3, [r9]
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	0699      	lsls	r1, r3, #26
 800c84e:	bf42      	ittt	mi
 800c850:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c854:	3302      	addmi	r3, #2
 800c856:	f8c9 3000 	strmi.w	r3, [r9]
 800c85a:	6825      	ldr	r5, [r4, #0]
 800c85c:	f015 0506 	ands.w	r5, r5, #6
 800c860:	d107      	bne.n	800c872 <_printf_common+0x52>
 800c862:	f104 0a19 	add.w	sl, r4, #25
 800c866:	68e3      	ldr	r3, [r4, #12]
 800c868:	f8d9 2000 	ldr.w	r2, [r9]
 800c86c:	1a9b      	subs	r3, r3, r2
 800c86e:	42ab      	cmp	r3, r5
 800c870:	dc28      	bgt.n	800c8c4 <_printf_common+0xa4>
 800c872:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	3300      	adds	r3, #0
 800c87a:	bf18      	it	ne
 800c87c:	2301      	movne	r3, #1
 800c87e:	0692      	lsls	r2, r2, #26
 800c880:	d42d      	bmi.n	800c8de <_printf_common+0xbe>
 800c882:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c886:	4639      	mov	r1, r7
 800c888:	4630      	mov	r0, r6
 800c88a:	47c0      	blx	r8
 800c88c:	3001      	adds	r0, #1
 800c88e:	d020      	beq.n	800c8d2 <_printf_common+0xb2>
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	68e5      	ldr	r5, [r4, #12]
 800c894:	f8d9 2000 	ldr.w	r2, [r9]
 800c898:	f003 0306 	and.w	r3, r3, #6
 800c89c:	2b04      	cmp	r3, #4
 800c89e:	bf08      	it	eq
 800c8a0:	1aad      	subeq	r5, r5, r2
 800c8a2:	68a3      	ldr	r3, [r4, #8]
 800c8a4:	6922      	ldr	r2, [r4, #16]
 800c8a6:	bf0c      	ite	eq
 800c8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8ac:	2500      	movne	r5, #0
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	bfc4      	itt	gt
 800c8b2:	1a9b      	subgt	r3, r3, r2
 800c8b4:	18ed      	addgt	r5, r5, r3
 800c8b6:	f04f 0900 	mov.w	r9, #0
 800c8ba:	341a      	adds	r4, #26
 800c8bc:	454d      	cmp	r5, r9
 800c8be:	d11a      	bne.n	800c8f6 <_printf_common+0xd6>
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	e008      	b.n	800c8d6 <_printf_common+0xb6>
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	4652      	mov	r2, sl
 800c8c8:	4639      	mov	r1, r7
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	47c0      	blx	r8
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	d103      	bne.n	800c8da <_printf_common+0xba>
 800c8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8da:	3501      	adds	r5, #1
 800c8dc:	e7c3      	b.n	800c866 <_printf_common+0x46>
 800c8de:	18e1      	adds	r1, r4, r3
 800c8e0:	1c5a      	adds	r2, r3, #1
 800c8e2:	2030      	movs	r0, #48	; 0x30
 800c8e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8e8:	4422      	add	r2, r4
 800c8ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8f2:	3302      	adds	r3, #2
 800c8f4:	e7c5      	b.n	800c882 <_printf_common+0x62>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	4622      	mov	r2, r4
 800c8fa:	4639      	mov	r1, r7
 800c8fc:	4630      	mov	r0, r6
 800c8fe:	47c0      	blx	r8
 800c900:	3001      	adds	r0, #1
 800c902:	d0e6      	beq.n	800c8d2 <_printf_common+0xb2>
 800c904:	f109 0901 	add.w	r9, r9, #1
 800c908:	e7d8      	b.n	800c8bc <_printf_common+0x9c>
	...

0800c90c <_printf_i>:
 800c90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c910:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c914:	460c      	mov	r4, r1
 800c916:	7e09      	ldrb	r1, [r1, #24]
 800c918:	b085      	sub	sp, #20
 800c91a:	296e      	cmp	r1, #110	; 0x6e
 800c91c:	4617      	mov	r7, r2
 800c91e:	4606      	mov	r6, r0
 800c920:	4698      	mov	r8, r3
 800c922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c924:	f000 80b3 	beq.w	800ca8e <_printf_i+0x182>
 800c928:	d822      	bhi.n	800c970 <_printf_i+0x64>
 800c92a:	2963      	cmp	r1, #99	; 0x63
 800c92c:	d036      	beq.n	800c99c <_printf_i+0x90>
 800c92e:	d80a      	bhi.n	800c946 <_printf_i+0x3a>
 800c930:	2900      	cmp	r1, #0
 800c932:	f000 80b9 	beq.w	800caa8 <_printf_i+0x19c>
 800c936:	2958      	cmp	r1, #88	; 0x58
 800c938:	f000 8083 	beq.w	800ca42 <_printf_i+0x136>
 800c93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c940:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c944:	e032      	b.n	800c9ac <_printf_i+0xa0>
 800c946:	2964      	cmp	r1, #100	; 0x64
 800c948:	d001      	beq.n	800c94e <_printf_i+0x42>
 800c94a:	2969      	cmp	r1, #105	; 0x69
 800c94c:	d1f6      	bne.n	800c93c <_printf_i+0x30>
 800c94e:	6820      	ldr	r0, [r4, #0]
 800c950:	6813      	ldr	r3, [r2, #0]
 800c952:	0605      	lsls	r5, r0, #24
 800c954:	f103 0104 	add.w	r1, r3, #4
 800c958:	d52a      	bpl.n	800c9b0 <_printf_i+0xa4>
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6011      	str	r1, [r2, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	da03      	bge.n	800c96a <_printf_i+0x5e>
 800c962:	222d      	movs	r2, #45	; 0x2d
 800c964:	425b      	negs	r3, r3
 800c966:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c96a:	486f      	ldr	r0, [pc, #444]	; (800cb28 <_printf_i+0x21c>)
 800c96c:	220a      	movs	r2, #10
 800c96e:	e039      	b.n	800c9e4 <_printf_i+0xd8>
 800c970:	2973      	cmp	r1, #115	; 0x73
 800c972:	f000 809d 	beq.w	800cab0 <_printf_i+0x1a4>
 800c976:	d808      	bhi.n	800c98a <_printf_i+0x7e>
 800c978:	296f      	cmp	r1, #111	; 0x6f
 800c97a:	d020      	beq.n	800c9be <_printf_i+0xb2>
 800c97c:	2970      	cmp	r1, #112	; 0x70
 800c97e:	d1dd      	bne.n	800c93c <_printf_i+0x30>
 800c980:	6823      	ldr	r3, [r4, #0]
 800c982:	f043 0320 	orr.w	r3, r3, #32
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	e003      	b.n	800c992 <_printf_i+0x86>
 800c98a:	2975      	cmp	r1, #117	; 0x75
 800c98c:	d017      	beq.n	800c9be <_printf_i+0xb2>
 800c98e:	2978      	cmp	r1, #120	; 0x78
 800c990:	d1d4      	bne.n	800c93c <_printf_i+0x30>
 800c992:	2378      	movs	r3, #120	; 0x78
 800c994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c998:	4864      	ldr	r0, [pc, #400]	; (800cb2c <_printf_i+0x220>)
 800c99a:	e055      	b.n	800ca48 <_printf_i+0x13c>
 800c99c:	6813      	ldr	r3, [r2, #0]
 800c99e:	1d19      	adds	r1, r3, #4
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	6011      	str	r1, [r2, #0]
 800c9a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e08c      	b.n	800caca <_printf_i+0x1be>
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	6011      	str	r1, [r2, #0]
 800c9b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9b8:	bf18      	it	ne
 800c9ba:	b21b      	sxthne	r3, r3
 800c9bc:	e7cf      	b.n	800c95e <_printf_i+0x52>
 800c9be:	6813      	ldr	r3, [r2, #0]
 800c9c0:	6825      	ldr	r5, [r4, #0]
 800c9c2:	1d18      	adds	r0, r3, #4
 800c9c4:	6010      	str	r0, [r2, #0]
 800c9c6:	0628      	lsls	r0, r5, #24
 800c9c8:	d501      	bpl.n	800c9ce <_printf_i+0xc2>
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	e002      	b.n	800c9d4 <_printf_i+0xc8>
 800c9ce:	0668      	lsls	r0, r5, #25
 800c9d0:	d5fb      	bpl.n	800c9ca <_printf_i+0xbe>
 800c9d2:	881b      	ldrh	r3, [r3, #0]
 800c9d4:	4854      	ldr	r0, [pc, #336]	; (800cb28 <_printf_i+0x21c>)
 800c9d6:	296f      	cmp	r1, #111	; 0x6f
 800c9d8:	bf14      	ite	ne
 800c9da:	220a      	movne	r2, #10
 800c9dc:	2208      	moveq	r2, #8
 800c9de:	2100      	movs	r1, #0
 800c9e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9e4:	6865      	ldr	r5, [r4, #4]
 800c9e6:	60a5      	str	r5, [r4, #8]
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	f2c0 8095 	blt.w	800cb18 <_printf_i+0x20c>
 800c9ee:	6821      	ldr	r1, [r4, #0]
 800c9f0:	f021 0104 	bic.w	r1, r1, #4
 800c9f4:	6021      	str	r1, [r4, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d13d      	bne.n	800ca76 <_printf_i+0x16a>
 800c9fa:	2d00      	cmp	r5, #0
 800c9fc:	f040 808e 	bne.w	800cb1c <_printf_i+0x210>
 800ca00:	4665      	mov	r5, ip
 800ca02:	2a08      	cmp	r2, #8
 800ca04:	d10b      	bne.n	800ca1e <_printf_i+0x112>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	07db      	lsls	r3, r3, #31
 800ca0a:	d508      	bpl.n	800ca1e <_printf_i+0x112>
 800ca0c:	6923      	ldr	r3, [r4, #16]
 800ca0e:	6862      	ldr	r2, [r4, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	bfde      	ittt	le
 800ca14:	2330      	movle	r3, #48	; 0x30
 800ca16:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca1e:	ebac 0305 	sub.w	r3, ip, r5
 800ca22:	6123      	str	r3, [r4, #16]
 800ca24:	f8cd 8000 	str.w	r8, [sp]
 800ca28:	463b      	mov	r3, r7
 800ca2a:	aa03      	add	r2, sp, #12
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4630      	mov	r0, r6
 800ca30:	f7ff fef6 	bl	800c820 <_printf_common>
 800ca34:	3001      	adds	r0, #1
 800ca36:	d14d      	bne.n	800cad4 <_printf_i+0x1c8>
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	b005      	add	sp, #20
 800ca3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca42:	4839      	ldr	r0, [pc, #228]	; (800cb28 <_printf_i+0x21c>)
 800ca44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca48:	6813      	ldr	r3, [r2, #0]
 800ca4a:	6821      	ldr	r1, [r4, #0]
 800ca4c:	1d1d      	adds	r5, r3, #4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6015      	str	r5, [r2, #0]
 800ca52:	060a      	lsls	r2, r1, #24
 800ca54:	d50b      	bpl.n	800ca6e <_printf_i+0x162>
 800ca56:	07ca      	lsls	r2, r1, #31
 800ca58:	bf44      	itt	mi
 800ca5a:	f041 0120 	orrmi.w	r1, r1, #32
 800ca5e:	6021      	strmi	r1, [r4, #0]
 800ca60:	b91b      	cbnz	r3, 800ca6a <_printf_i+0x15e>
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	f022 0220 	bic.w	r2, r2, #32
 800ca68:	6022      	str	r2, [r4, #0]
 800ca6a:	2210      	movs	r2, #16
 800ca6c:	e7b7      	b.n	800c9de <_printf_i+0xd2>
 800ca6e:	064d      	lsls	r5, r1, #25
 800ca70:	bf48      	it	mi
 800ca72:	b29b      	uxthmi	r3, r3
 800ca74:	e7ef      	b.n	800ca56 <_printf_i+0x14a>
 800ca76:	4665      	mov	r5, ip
 800ca78:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca7c:	fb02 3311 	mls	r3, r2, r1, r3
 800ca80:	5cc3      	ldrb	r3, [r0, r3]
 800ca82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca86:	460b      	mov	r3, r1
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	d1f5      	bne.n	800ca78 <_printf_i+0x16c>
 800ca8c:	e7b9      	b.n	800ca02 <_printf_i+0xf6>
 800ca8e:	6813      	ldr	r3, [r2, #0]
 800ca90:	6825      	ldr	r5, [r4, #0]
 800ca92:	6961      	ldr	r1, [r4, #20]
 800ca94:	1d18      	adds	r0, r3, #4
 800ca96:	6010      	str	r0, [r2, #0]
 800ca98:	0628      	lsls	r0, r5, #24
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	d501      	bpl.n	800caa2 <_printf_i+0x196>
 800ca9e:	6019      	str	r1, [r3, #0]
 800caa0:	e002      	b.n	800caa8 <_printf_i+0x19c>
 800caa2:	066a      	lsls	r2, r5, #25
 800caa4:	d5fb      	bpl.n	800ca9e <_printf_i+0x192>
 800caa6:	8019      	strh	r1, [r3, #0]
 800caa8:	2300      	movs	r3, #0
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	4665      	mov	r5, ip
 800caae:	e7b9      	b.n	800ca24 <_printf_i+0x118>
 800cab0:	6813      	ldr	r3, [r2, #0]
 800cab2:	1d19      	adds	r1, r3, #4
 800cab4:	6011      	str	r1, [r2, #0]
 800cab6:	681d      	ldr	r5, [r3, #0]
 800cab8:	6862      	ldr	r2, [r4, #4]
 800caba:	2100      	movs	r1, #0
 800cabc:	4628      	mov	r0, r5
 800cabe:	f7f3 fb8f 	bl	80001e0 <memchr>
 800cac2:	b108      	cbz	r0, 800cac8 <_printf_i+0x1bc>
 800cac4:	1b40      	subs	r0, r0, r5
 800cac6:	6060      	str	r0, [r4, #4]
 800cac8:	6863      	ldr	r3, [r4, #4]
 800caca:	6123      	str	r3, [r4, #16]
 800cacc:	2300      	movs	r3, #0
 800cace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cad2:	e7a7      	b.n	800ca24 <_printf_i+0x118>
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	462a      	mov	r2, r5
 800cad8:	4639      	mov	r1, r7
 800cada:	4630      	mov	r0, r6
 800cadc:	47c0      	blx	r8
 800cade:	3001      	adds	r0, #1
 800cae0:	d0aa      	beq.n	800ca38 <_printf_i+0x12c>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	079b      	lsls	r3, r3, #30
 800cae6:	d413      	bmi.n	800cb10 <_printf_i+0x204>
 800cae8:	68e0      	ldr	r0, [r4, #12]
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	4298      	cmp	r0, r3
 800caee:	bfb8      	it	lt
 800caf0:	4618      	movlt	r0, r3
 800caf2:	e7a3      	b.n	800ca3c <_printf_i+0x130>
 800caf4:	2301      	movs	r3, #1
 800caf6:	464a      	mov	r2, r9
 800caf8:	4639      	mov	r1, r7
 800cafa:	4630      	mov	r0, r6
 800cafc:	47c0      	blx	r8
 800cafe:	3001      	adds	r0, #1
 800cb00:	d09a      	beq.n	800ca38 <_printf_i+0x12c>
 800cb02:	3501      	adds	r5, #1
 800cb04:	68e3      	ldr	r3, [r4, #12]
 800cb06:	9a03      	ldr	r2, [sp, #12]
 800cb08:	1a9b      	subs	r3, r3, r2
 800cb0a:	42ab      	cmp	r3, r5
 800cb0c:	dcf2      	bgt.n	800caf4 <_printf_i+0x1e8>
 800cb0e:	e7eb      	b.n	800cae8 <_printf_i+0x1dc>
 800cb10:	2500      	movs	r5, #0
 800cb12:	f104 0919 	add.w	r9, r4, #25
 800cb16:	e7f5      	b.n	800cb04 <_printf_i+0x1f8>
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d1ac      	bne.n	800ca76 <_printf_i+0x16a>
 800cb1c:	7803      	ldrb	r3, [r0, #0]
 800cb1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb26:	e76c      	b.n	800ca02 <_printf_i+0xf6>
 800cb28:	080109be 	.word	0x080109be
 800cb2c:	080109cf 	.word	0x080109cf

0800cb30 <_scanf_float>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	469a      	mov	sl, r3
 800cb36:	688b      	ldr	r3, [r1, #8]
 800cb38:	4616      	mov	r6, r2
 800cb3a:	1e5a      	subs	r2, r3, #1
 800cb3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb40:	b087      	sub	sp, #28
 800cb42:	bf83      	ittte	hi
 800cb44:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cb48:	189b      	addhi	r3, r3, r2
 800cb4a:	9301      	strhi	r3, [sp, #4]
 800cb4c:	2300      	movls	r3, #0
 800cb4e:	bf86      	itte	hi
 800cb50:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb54:	608b      	strhi	r3, [r1, #8]
 800cb56:	9301      	strls	r3, [sp, #4]
 800cb58:	680b      	ldr	r3, [r1, #0]
 800cb5a:	4688      	mov	r8, r1
 800cb5c:	f04f 0b00 	mov.w	fp, #0
 800cb60:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb64:	f848 3b1c 	str.w	r3, [r8], #28
 800cb68:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	4645      	mov	r5, r8
 800cb72:	465a      	mov	r2, fp
 800cb74:	46d9      	mov	r9, fp
 800cb76:	f8cd b008 	str.w	fp, [sp, #8]
 800cb7a:	68a1      	ldr	r1, [r4, #8]
 800cb7c:	b181      	cbz	r1, 800cba0 <_scanf_float+0x70>
 800cb7e:	6833      	ldr	r3, [r6, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b49      	cmp	r3, #73	; 0x49
 800cb84:	d071      	beq.n	800cc6a <_scanf_float+0x13a>
 800cb86:	d84d      	bhi.n	800cc24 <_scanf_float+0xf4>
 800cb88:	2b39      	cmp	r3, #57	; 0x39
 800cb8a:	d840      	bhi.n	800cc0e <_scanf_float+0xde>
 800cb8c:	2b31      	cmp	r3, #49	; 0x31
 800cb8e:	f080 8088 	bcs.w	800cca2 <_scanf_float+0x172>
 800cb92:	2b2d      	cmp	r3, #45	; 0x2d
 800cb94:	f000 8090 	beq.w	800ccb8 <_scanf_float+0x188>
 800cb98:	d815      	bhi.n	800cbc6 <_scanf_float+0x96>
 800cb9a:	2b2b      	cmp	r3, #43	; 0x2b
 800cb9c:	f000 808c 	beq.w	800ccb8 <_scanf_float+0x188>
 800cba0:	f1b9 0f00 	cmp.w	r9, #0
 800cba4:	d003      	beq.n	800cbae <_scanf_float+0x7e>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	3a01      	subs	r2, #1
 800cbb0:	2a01      	cmp	r2, #1
 800cbb2:	f200 80ea 	bhi.w	800cd8a <_scanf_float+0x25a>
 800cbb6:	4545      	cmp	r5, r8
 800cbb8:	f200 80dc 	bhi.w	800cd74 <_scanf_float+0x244>
 800cbbc:	2601      	movs	r6, #1
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	b007      	add	sp, #28
 800cbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc6:	2b2e      	cmp	r3, #46	; 0x2e
 800cbc8:	f000 809f 	beq.w	800cd0a <_scanf_float+0x1da>
 800cbcc:	2b30      	cmp	r3, #48	; 0x30
 800cbce:	d1e7      	bne.n	800cba0 <_scanf_float+0x70>
 800cbd0:	6820      	ldr	r0, [r4, #0]
 800cbd2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800cbd6:	d064      	beq.n	800cca2 <_scanf_float+0x172>
 800cbd8:	9b01      	ldr	r3, [sp, #4]
 800cbda:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cbde:	6020      	str	r0, [r4, #0]
 800cbe0:	f109 0901 	add.w	r9, r9, #1
 800cbe4:	b11b      	cbz	r3, 800cbee <_scanf_float+0xbe>
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	3101      	adds	r1, #1
 800cbea:	9301      	str	r3, [sp, #4]
 800cbec:	60a1      	str	r1, [r4, #8]
 800cbee:	68a3      	ldr	r3, [r4, #8]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	60a3      	str	r3, [r4, #8]
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	6123      	str	r3, [r4, #16]
 800cbfa:	6873      	ldr	r3, [r6, #4]
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	6073      	str	r3, [r6, #4]
 800cc02:	f340 80ac 	ble.w	800cd5e <_scanf_float+0x22e>
 800cc06:	6833      	ldr	r3, [r6, #0]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	6033      	str	r3, [r6, #0]
 800cc0c:	e7b5      	b.n	800cb7a <_scanf_float+0x4a>
 800cc0e:	2b45      	cmp	r3, #69	; 0x45
 800cc10:	f000 8085 	beq.w	800cd1e <_scanf_float+0x1ee>
 800cc14:	2b46      	cmp	r3, #70	; 0x46
 800cc16:	d06a      	beq.n	800ccee <_scanf_float+0x1be>
 800cc18:	2b41      	cmp	r3, #65	; 0x41
 800cc1a:	d1c1      	bne.n	800cba0 <_scanf_float+0x70>
 800cc1c:	2a01      	cmp	r2, #1
 800cc1e:	d1bf      	bne.n	800cba0 <_scanf_float+0x70>
 800cc20:	2202      	movs	r2, #2
 800cc22:	e046      	b.n	800ccb2 <_scanf_float+0x182>
 800cc24:	2b65      	cmp	r3, #101	; 0x65
 800cc26:	d07a      	beq.n	800cd1e <_scanf_float+0x1ee>
 800cc28:	d818      	bhi.n	800cc5c <_scanf_float+0x12c>
 800cc2a:	2b54      	cmp	r3, #84	; 0x54
 800cc2c:	d066      	beq.n	800ccfc <_scanf_float+0x1cc>
 800cc2e:	d811      	bhi.n	800cc54 <_scanf_float+0x124>
 800cc30:	2b4e      	cmp	r3, #78	; 0x4e
 800cc32:	d1b5      	bne.n	800cba0 <_scanf_float+0x70>
 800cc34:	2a00      	cmp	r2, #0
 800cc36:	d146      	bne.n	800ccc6 <_scanf_float+0x196>
 800cc38:	f1b9 0f00 	cmp.w	r9, #0
 800cc3c:	d145      	bne.n	800ccca <_scanf_float+0x19a>
 800cc3e:	6821      	ldr	r1, [r4, #0]
 800cc40:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc44:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc48:	d13f      	bne.n	800ccca <_scanf_float+0x19a>
 800cc4a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc4e:	6021      	str	r1, [r4, #0]
 800cc50:	2201      	movs	r2, #1
 800cc52:	e02e      	b.n	800ccb2 <_scanf_float+0x182>
 800cc54:	2b59      	cmp	r3, #89	; 0x59
 800cc56:	d01e      	beq.n	800cc96 <_scanf_float+0x166>
 800cc58:	2b61      	cmp	r3, #97	; 0x61
 800cc5a:	e7de      	b.n	800cc1a <_scanf_float+0xea>
 800cc5c:	2b6e      	cmp	r3, #110	; 0x6e
 800cc5e:	d0e9      	beq.n	800cc34 <_scanf_float+0x104>
 800cc60:	d815      	bhi.n	800cc8e <_scanf_float+0x15e>
 800cc62:	2b66      	cmp	r3, #102	; 0x66
 800cc64:	d043      	beq.n	800ccee <_scanf_float+0x1be>
 800cc66:	2b69      	cmp	r3, #105	; 0x69
 800cc68:	d19a      	bne.n	800cba0 <_scanf_float+0x70>
 800cc6a:	f1bb 0f00 	cmp.w	fp, #0
 800cc6e:	d138      	bne.n	800cce2 <_scanf_float+0x1b2>
 800cc70:	f1b9 0f00 	cmp.w	r9, #0
 800cc74:	d197      	bne.n	800cba6 <_scanf_float+0x76>
 800cc76:	6821      	ldr	r1, [r4, #0]
 800cc78:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc7c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc80:	d195      	bne.n	800cbae <_scanf_float+0x7e>
 800cc82:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc86:	6021      	str	r1, [r4, #0]
 800cc88:	f04f 0b01 	mov.w	fp, #1
 800cc8c:	e011      	b.n	800ccb2 <_scanf_float+0x182>
 800cc8e:	2b74      	cmp	r3, #116	; 0x74
 800cc90:	d034      	beq.n	800ccfc <_scanf_float+0x1cc>
 800cc92:	2b79      	cmp	r3, #121	; 0x79
 800cc94:	d184      	bne.n	800cba0 <_scanf_float+0x70>
 800cc96:	f1bb 0f07 	cmp.w	fp, #7
 800cc9a:	d181      	bne.n	800cba0 <_scanf_float+0x70>
 800cc9c:	f04f 0b08 	mov.w	fp, #8
 800cca0:	e007      	b.n	800ccb2 <_scanf_float+0x182>
 800cca2:	eb12 0f0b 	cmn.w	r2, fp
 800cca6:	f47f af7b 	bne.w	800cba0 <_scanf_float+0x70>
 800ccaa:	6821      	ldr	r1, [r4, #0]
 800ccac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ccb0:	6021      	str	r1, [r4, #0]
 800ccb2:	702b      	strb	r3, [r5, #0]
 800ccb4:	3501      	adds	r5, #1
 800ccb6:	e79a      	b.n	800cbee <_scanf_float+0xbe>
 800ccb8:	6821      	ldr	r1, [r4, #0]
 800ccba:	0608      	lsls	r0, r1, #24
 800ccbc:	f57f af70 	bpl.w	800cba0 <_scanf_float+0x70>
 800ccc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ccc4:	e7f4      	b.n	800ccb0 <_scanf_float+0x180>
 800ccc6:	2a02      	cmp	r2, #2
 800ccc8:	d047      	beq.n	800cd5a <_scanf_float+0x22a>
 800ccca:	f1bb 0f01 	cmp.w	fp, #1
 800ccce:	d003      	beq.n	800ccd8 <_scanf_float+0x1a8>
 800ccd0:	f1bb 0f04 	cmp.w	fp, #4
 800ccd4:	f47f af64 	bne.w	800cba0 <_scanf_float+0x70>
 800ccd8:	f10b 0b01 	add.w	fp, fp, #1
 800ccdc:	fa5f fb8b 	uxtb.w	fp, fp
 800cce0:	e7e7      	b.n	800ccb2 <_scanf_float+0x182>
 800cce2:	f1bb 0f03 	cmp.w	fp, #3
 800cce6:	d0f7      	beq.n	800ccd8 <_scanf_float+0x1a8>
 800cce8:	f1bb 0f05 	cmp.w	fp, #5
 800ccec:	e7f2      	b.n	800ccd4 <_scanf_float+0x1a4>
 800ccee:	f1bb 0f02 	cmp.w	fp, #2
 800ccf2:	f47f af55 	bne.w	800cba0 <_scanf_float+0x70>
 800ccf6:	f04f 0b03 	mov.w	fp, #3
 800ccfa:	e7da      	b.n	800ccb2 <_scanf_float+0x182>
 800ccfc:	f1bb 0f06 	cmp.w	fp, #6
 800cd00:	f47f af4e 	bne.w	800cba0 <_scanf_float+0x70>
 800cd04:	f04f 0b07 	mov.w	fp, #7
 800cd08:	e7d3      	b.n	800ccb2 <_scanf_float+0x182>
 800cd0a:	6821      	ldr	r1, [r4, #0]
 800cd0c:	0588      	lsls	r0, r1, #22
 800cd0e:	f57f af47 	bpl.w	800cba0 <_scanf_float+0x70>
 800cd12:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800cd16:	6021      	str	r1, [r4, #0]
 800cd18:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd1c:	e7c9      	b.n	800ccb2 <_scanf_float+0x182>
 800cd1e:	6821      	ldr	r1, [r4, #0]
 800cd20:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cd24:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cd28:	d006      	beq.n	800cd38 <_scanf_float+0x208>
 800cd2a:	0548      	lsls	r0, r1, #21
 800cd2c:	f57f af38 	bpl.w	800cba0 <_scanf_float+0x70>
 800cd30:	f1b9 0f00 	cmp.w	r9, #0
 800cd34:	f43f af3b 	beq.w	800cbae <_scanf_float+0x7e>
 800cd38:	0588      	lsls	r0, r1, #22
 800cd3a:	bf58      	it	pl
 800cd3c:	9802      	ldrpl	r0, [sp, #8]
 800cd3e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cd42:	bf58      	it	pl
 800cd44:	eba9 0000 	subpl.w	r0, r9, r0
 800cd48:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cd4c:	bf58      	it	pl
 800cd4e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cd52:	6021      	str	r1, [r4, #0]
 800cd54:	f04f 0900 	mov.w	r9, #0
 800cd58:	e7ab      	b.n	800ccb2 <_scanf_float+0x182>
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	e7a9      	b.n	800ccb2 <_scanf_float+0x182>
 800cd5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd62:	9205      	str	r2, [sp, #20]
 800cd64:	4631      	mov	r1, r6
 800cd66:	4638      	mov	r0, r7
 800cd68:	4798      	blx	r3
 800cd6a:	9a05      	ldr	r2, [sp, #20]
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	f43f af04 	beq.w	800cb7a <_scanf_float+0x4a>
 800cd72:	e715      	b.n	800cba0 <_scanf_float+0x70>
 800cd74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cd7c:	4632      	mov	r2, r6
 800cd7e:	4638      	mov	r0, r7
 800cd80:	4798      	blx	r3
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	3b01      	subs	r3, #1
 800cd86:	6123      	str	r3, [r4, #16]
 800cd88:	e715      	b.n	800cbb6 <_scanf_float+0x86>
 800cd8a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd8e:	2b06      	cmp	r3, #6
 800cd90:	d80a      	bhi.n	800cda8 <_scanf_float+0x278>
 800cd92:	f1bb 0f02 	cmp.w	fp, #2
 800cd96:	d968      	bls.n	800ce6a <_scanf_float+0x33a>
 800cd98:	f1ab 0b03 	sub.w	fp, fp, #3
 800cd9c:	fa5f fb8b 	uxtb.w	fp, fp
 800cda0:	eba5 0b0b 	sub.w	fp, r5, fp
 800cda4:	455d      	cmp	r5, fp
 800cda6:	d14b      	bne.n	800ce40 <_scanf_float+0x310>
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	05da      	lsls	r2, r3, #23
 800cdac:	d51f      	bpl.n	800cdee <_scanf_float+0x2be>
 800cdae:	055b      	lsls	r3, r3, #21
 800cdb0:	d468      	bmi.n	800ce84 <_scanf_float+0x354>
 800cdb2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	2965      	cmp	r1, #101	; 0x65
 800cdba:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdbe:	f105 3bff 	add.w	fp, r5, #4294967295
 800cdc2:	6123      	str	r3, [r4, #16]
 800cdc4:	d00d      	beq.n	800cde2 <_scanf_float+0x2b2>
 800cdc6:	2945      	cmp	r1, #69	; 0x45
 800cdc8:	d00b      	beq.n	800cde2 <_scanf_float+0x2b2>
 800cdca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	4798      	blx	r3
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	f1a5 0b02 	sub.w	fp, r5, #2
 800cde0:	6123      	str	r3, [r4, #16]
 800cde2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cde6:	4632      	mov	r2, r6
 800cde8:	4638      	mov	r0, r7
 800cdea:	4798      	blx	r3
 800cdec:	465d      	mov	r5, fp
 800cdee:	6826      	ldr	r6, [r4, #0]
 800cdf0:	f016 0610 	ands.w	r6, r6, #16
 800cdf4:	d17a      	bne.n	800ceec <_scanf_float+0x3bc>
 800cdf6:	702e      	strb	r6, [r5, #0]
 800cdf8:	6823      	ldr	r3, [r4, #0]
 800cdfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cdfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce02:	d142      	bne.n	800ce8a <_scanf_float+0x35a>
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	eba9 0303 	sub.w	r3, r9, r3
 800ce0a:	425a      	negs	r2, r3
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d149      	bne.n	800cea4 <_scanf_float+0x374>
 800ce10:	2200      	movs	r2, #0
 800ce12:	4641      	mov	r1, r8
 800ce14:	4638      	mov	r0, r7
 800ce16:	f000 ff1f 	bl	800dc58 <_strtod_r>
 800ce1a:	6825      	ldr	r5, [r4, #0]
 800ce1c:	f8da 3000 	ldr.w	r3, [sl]
 800ce20:	f015 0f02 	tst.w	r5, #2
 800ce24:	f103 0204 	add.w	r2, r3, #4
 800ce28:	ec59 8b10 	vmov	r8, r9, d0
 800ce2c:	f8ca 2000 	str.w	r2, [sl]
 800ce30:	d043      	beq.n	800ceba <_scanf_float+0x38a>
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	e9c3 8900 	strd	r8, r9, [r3]
 800ce38:	68e3      	ldr	r3, [r4, #12]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	60e3      	str	r3, [r4, #12]
 800ce3e:	e6be      	b.n	800cbbe <_scanf_float+0x8e>
 800ce40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce48:	4632      	mov	r2, r6
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	4798      	blx	r3
 800ce4e:	6923      	ldr	r3, [r4, #16]
 800ce50:	3b01      	subs	r3, #1
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	e7a6      	b.n	800cda4 <_scanf_float+0x274>
 800ce56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce5a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce5e:	4632      	mov	r2, r6
 800ce60:	4638      	mov	r0, r7
 800ce62:	4798      	blx	r3
 800ce64:	6923      	ldr	r3, [r4, #16]
 800ce66:	3b01      	subs	r3, #1
 800ce68:	6123      	str	r3, [r4, #16]
 800ce6a:	4545      	cmp	r5, r8
 800ce6c:	d8f3      	bhi.n	800ce56 <_scanf_float+0x326>
 800ce6e:	e6a5      	b.n	800cbbc <_scanf_float+0x8c>
 800ce70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce78:	4632      	mov	r2, r6
 800ce7a:	4638      	mov	r0, r7
 800ce7c:	4798      	blx	r3
 800ce7e:	6923      	ldr	r3, [r4, #16]
 800ce80:	3b01      	subs	r3, #1
 800ce82:	6123      	str	r3, [r4, #16]
 800ce84:	4545      	cmp	r5, r8
 800ce86:	d8f3      	bhi.n	800ce70 <_scanf_float+0x340>
 800ce88:	e698      	b.n	800cbbc <_scanf_float+0x8c>
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d0bf      	beq.n	800ce10 <_scanf_float+0x2e0>
 800ce90:	9904      	ldr	r1, [sp, #16]
 800ce92:	230a      	movs	r3, #10
 800ce94:	4632      	mov	r2, r6
 800ce96:	3101      	adds	r1, #1
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f000 ff69 	bl	800dd70 <_strtol_r>
 800ce9e:	9b03      	ldr	r3, [sp, #12]
 800cea0:	9d04      	ldr	r5, [sp, #16]
 800cea2:	1ac2      	subs	r2, r0, r3
 800cea4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cea8:	429d      	cmp	r5, r3
 800ceaa:	bf28      	it	cs
 800ceac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ceb0:	490f      	ldr	r1, [pc, #60]	; (800cef0 <_scanf_float+0x3c0>)
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f000 f8a0 	bl	800cff8 <siprintf>
 800ceb8:	e7aa      	b.n	800ce10 <_scanf_float+0x2e0>
 800ceba:	f015 0504 	ands.w	r5, r5, #4
 800cebe:	d1b8      	bne.n	800ce32 <_scanf_float+0x302>
 800cec0:	681f      	ldr	r7, [r3, #0]
 800cec2:	ee10 2a10 	vmov	r2, s0
 800cec6:	464b      	mov	r3, r9
 800cec8:	ee10 0a10 	vmov	r0, s0
 800cecc:	4649      	mov	r1, r9
 800cece:	f7f3 fe2d 	bl	8000b2c <__aeabi_dcmpun>
 800ced2:	b128      	cbz	r0, 800cee0 <_scanf_float+0x3b0>
 800ced4:	4628      	mov	r0, r5
 800ced6:	f000 f889 	bl	800cfec <nanf>
 800ceda:	ed87 0a00 	vstr	s0, [r7]
 800cede:	e7ab      	b.n	800ce38 <_scanf_float+0x308>
 800cee0:	4640      	mov	r0, r8
 800cee2:	4649      	mov	r1, r9
 800cee4:	f7f3 fe80 	bl	8000be8 <__aeabi_d2f>
 800cee8:	6038      	str	r0, [r7, #0]
 800ceea:	e7a5      	b.n	800ce38 <_scanf_float+0x308>
 800ceec:	2600      	movs	r6, #0
 800ceee:	e666      	b.n	800cbbe <_scanf_float+0x8e>
 800cef0:	080109e0 	.word	0x080109e0

0800cef4 <iprintf>:
 800cef4:	b40f      	push	{r0, r1, r2, r3}
 800cef6:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <iprintf+0x2c>)
 800cef8:	b513      	push	{r0, r1, r4, lr}
 800cefa:	681c      	ldr	r4, [r3, #0]
 800cefc:	b124      	cbz	r4, 800cf08 <iprintf+0x14>
 800cefe:	69a3      	ldr	r3, [r4, #24]
 800cf00:	b913      	cbnz	r3, 800cf08 <iprintf+0x14>
 800cf02:	4620      	mov	r0, r4
 800cf04:	f001 ff3c 	bl	800ed80 <__sinit>
 800cf08:	ab05      	add	r3, sp, #20
 800cf0a:	9a04      	ldr	r2, [sp, #16]
 800cf0c:	68a1      	ldr	r1, [r4, #8]
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	4620      	mov	r0, r4
 800cf12:	f003 f9a9 	bl	8010268 <_vfiprintf_r>
 800cf16:	b002      	add	sp, #8
 800cf18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf1c:	b004      	add	sp, #16
 800cf1e:	4770      	bx	lr
 800cf20:	20000040 	.word	0x20000040

0800cf24 <_puts_r>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	460e      	mov	r6, r1
 800cf28:	4605      	mov	r5, r0
 800cf2a:	b118      	cbz	r0, 800cf34 <_puts_r+0x10>
 800cf2c:	6983      	ldr	r3, [r0, #24]
 800cf2e:	b90b      	cbnz	r3, 800cf34 <_puts_r+0x10>
 800cf30:	f001 ff26 	bl	800ed80 <__sinit>
 800cf34:	69ab      	ldr	r3, [r5, #24]
 800cf36:	68ac      	ldr	r4, [r5, #8]
 800cf38:	b913      	cbnz	r3, 800cf40 <_puts_r+0x1c>
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f001 ff20 	bl	800ed80 <__sinit>
 800cf40:	4b23      	ldr	r3, [pc, #140]	; (800cfd0 <_puts_r+0xac>)
 800cf42:	429c      	cmp	r4, r3
 800cf44:	d117      	bne.n	800cf76 <_puts_r+0x52>
 800cf46:	686c      	ldr	r4, [r5, #4]
 800cf48:	89a3      	ldrh	r3, [r4, #12]
 800cf4a:	071b      	lsls	r3, r3, #28
 800cf4c:	d51d      	bpl.n	800cf8a <_puts_r+0x66>
 800cf4e:	6923      	ldr	r3, [r4, #16]
 800cf50:	b1db      	cbz	r3, 800cf8a <_puts_r+0x66>
 800cf52:	3e01      	subs	r6, #1
 800cf54:	68a3      	ldr	r3, [r4, #8]
 800cf56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	60a3      	str	r3, [r4, #8]
 800cf5e:	b9e9      	cbnz	r1, 800cf9c <_puts_r+0x78>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	da2e      	bge.n	800cfc2 <_puts_r+0x9e>
 800cf64:	4622      	mov	r2, r4
 800cf66:	210a      	movs	r1, #10
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f000 ff13 	bl	800dd94 <__swbuf_r>
 800cf6e:	3001      	adds	r0, #1
 800cf70:	d011      	beq.n	800cf96 <_puts_r+0x72>
 800cf72:	200a      	movs	r0, #10
 800cf74:	e011      	b.n	800cf9a <_puts_r+0x76>
 800cf76:	4b17      	ldr	r3, [pc, #92]	; (800cfd4 <_puts_r+0xb0>)
 800cf78:	429c      	cmp	r4, r3
 800cf7a:	d101      	bne.n	800cf80 <_puts_r+0x5c>
 800cf7c:	68ac      	ldr	r4, [r5, #8]
 800cf7e:	e7e3      	b.n	800cf48 <_puts_r+0x24>
 800cf80:	4b15      	ldr	r3, [pc, #84]	; (800cfd8 <_puts_r+0xb4>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	bf08      	it	eq
 800cf86:	68ec      	ldreq	r4, [r5, #12]
 800cf88:	e7de      	b.n	800cf48 <_puts_r+0x24>
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4628      	mov	r0, r5
 800cf8e:	f000 ff53 	bl	800de38 <__swsetup_r>
 800cf92:	2800      	cmp	r0, #0
 800cf94:	d0dd      	beq.n	800cf52 <_puts_r+0x2e>
 800cf96:	f04f 30ff 	mov.w	r0, #4294967295
 800cf9a:	bd70      	pop	{r4, r5, r6, pc}
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	da04      	bge.n	800cfaa <_puts_r+0x86>
 800cfa0:	69a2      	ldr	r2, [r4, #24]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	dc06      	bgt.n	800cfb4 <_puts_r+0x90>
 800cfa6:	290a      	cmp	r1, #10
 800cfa8:	d004      	beq.n	800cfb4 <_puts_r+0x90>
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	6022      	str	r2, [r4, #0]
 800cfb0:	7019      	strb	r1, [r3, #0]
 800cfb2:	e7cf      	b.n	800cf54 <_puts_r+0x30>
 800cfb4:	4622      	mov	r2, r4
 800cfb6:	4628      	mov	r0, r5
 800cfb8:	f000 feec 	bl	800dd94 <__swbuf_r>
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	d1c9      	bne.n	800cf54 <_puts_r+0x30>
 800cfc0:	e7e9      	b.n	800cf96 <_puts_r+0x72>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	200a      	movs	r0, #10
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	6022      	str	r2, [r4, #0]
 800cfca:	7018      	strb	r0, [r3, #0]
 800cfcc:	e7e5      	b.n	800cf9a <_puts_r+0x76>
 800cfce:	bf00      	nop
 800cfd0:	08010a68 	.word	0x08010a68
 800cfd4:	08010a88 	.word	0x08010a88
 800cfd8:	08010a48 	.word	0x08010a48

0800cfdc <puts>:
 800cfdc:	4b02      	ldr	r3, [pc, #8]	; (800cfe8 <puts+0xc>)
 800cfde:	4601      	mov	r1, r0
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	f7ff bf9f 	b.w	800cf24 <_puts_r>
 800cfe6:	bf00      	nop
 800cfe8:	20000040 	.word	0x20000040

0800cfec <nanf>:
 800cfec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cff4 <nanf+0x8>
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	7fc00000 	.word	0x7fc00000

0800cff8 <siprintf>:
 800cff8:	b40e      	push	{r1, r2, r3}
 800cffa:	b500      	push	{lr}
 800cffc:	b09c      	sub	sp, #112	; 0x70
 800cffe:	ab1d      	add	r3, sp, #116	; 0x74
 800d000:	9002      	str	r0, [sp, #8]
 800d002:	9006      	str	r0, [sp, #24]
 800d004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d008:	4809      	ldr	r0, [pc, #36]	; (800d030 <siprintf+0x38>)
 800d00a:	9107      	str	r1, [sp, #28]
 800d00c:	9104      	str	r1, [sp, #16]
 800d00e:	4909      	ldr	r1, [pc, #36]	; (800d034 <siprintf+0x3c>)
 800d010:	f853 2b04 	ldr.w	r2, [r3], #4
 800d014:	9105      	str	r1, [sp, #20]
 800d016:	6800      	ldr	r0, [r0, #0]
 800d018:	9301      	str	r3, [sp, #4]
 800d01a:	a902      	add	r1, sp, #8
 800d01c:	f003 f802 	bl	8010024 <_svfiprintf_r>
 800d020:	9b02      	ldr	r3, [sp, #8]
 800d022:	2200      	movs	r2, #0
 800d024:	701a      	strb	r2, [r3, #0]
 800d026:	b01c      	add	sp, #112	; 0x70
 800d028:	f85d eb04 	ldr.w	lr, [sp], #4
 800d02c:	b003      	add	sp, #12
 800d02e:	4770      	bx	lr
 800d030:	20000040 	.word	0x20000040
 800d034:	ffff0208 	.word	0xffff0208

0800d038 <sulp>:
 800d038:	b570      	push	{r4, r5, r6, lr}
 800d03a:	4604      	mov	r4, r0
 800d03c:	460d      	mov	r5, r1
 800d03e:	ec45 4b10 	vmov	d0, r4, r5
 800d042:	4616      	mov	r6, r2
 800d044:	f002 fdaa 	bl	800fb9c <__ulp>
 800d048:	ec51 0b10 	vmov	r0, r1, d0
 800d04c:	b17e      	cbz	r6, 800d06e <sulp+0x36>
 800d04e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d052:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d056:	2b00      	cmp	r3, #0
 800d058:	dd09      	ble.n	800d06e <sulp+0x36>
 800d05a:	051b      	lsls	r3, r3, #20
 800d05c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d060:	2400      	movs	r4, #0
 800d062:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d066:	4622      	mov	r2, r4
 800d068:	462b      	mov	r3, r5
 800d06a:	f7f3 fac5 	bl	80005f8 <__aeabi_dmul>
 800d06e:	bd70      	pop	{r4, r5, r6, pc}

0800d070 <_strtod_l>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	461f      	mov	r7, r3
 800d076:	b0a1      	sub	sp, #132	; 0x84
 800d078:	2300      	movs	r3, #0
 800d07a:	4681      	mov	r9, r0
 800d07c:	4638      	mov	r0, r7
 800d07e:	460e      	mov	r6, r1
 800d080:	9217      	str	r2, [sp, #92]	; 0x5c
 800d082:	931c      	str	r3, [sp, #112]	; 0x70
 800d084:	f002 fa2f 	bl	800f4e6 <__localeconv_l>
 800d088:	4680      	mov	r8, r0
 800d08a:	6800      	ldr	r0, [r0, #0]
 800d08c:	f7f3 f8a0 	bl	80001d0 <strlen>
 800d090:	f04f 0a00 	mov.w	sl, #0
 800d094:	4604      	mov	r4, r0
 800d096:	f04f 0b00 	mov.w	fp, #0
 800d09a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d09c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d09e:	781a      	ldrb	r2, [r3, #0]
 800d0a0:	2a0d      	cmp	r2, #13
 800d0a2:	d832      	bhi.n	800d10a <_strtod_l+0x9a>
 800d0a4:	2a09      	cmp	r2, #9
 800d0a6:	d236      	bcs.n	800d116 <_strtod_l+0xa6>
 800d0a8:	2a00      	cmp	r2, #0
 800d0aa:	d03e      	beq.n	800d12a <_strtod_l+0xba>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	930d      	str	r3, [sp, #52]	; 0x34
 800d0b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800d0b2:	782b      	ldrb	r3, [r5, #0]
 800d0b4:	2b30      	cmp	r3, #48	; 0x30
 800d0b6:	f040 80ac 	bne.w	800d212 <_strtod_l+0x1a2>
 800d0ba:	786b      	ldrb	r3, [r5, #1]
 800d0bc:	2b58      	cmp	r3, #88	; 0x58
 800d0be:	d001      	beq.n	800d0c4 <_strtod_l+0x54>
 800d0c0:	2b78      	cmp	r3, #120	; 0x78
 800d0c2:	d167      	bne.n	800d194 <_strtod_l+0x124>
 800d0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0c6:	9301      	str	r3, [sp, #4]
 800d0c8:	ab1c      	add	r3, sp, #112	; 0x70
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	9702      	str	r7, [sp, #8]
 800d0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d0d0:	4a88      	ldr	r2, [pc, #544]	; (800d2f4 <_strtod_l+0x284>)
 800d0d2:	a91b      	add	r1, sp, #108	; 0x6c
 800d0d4:	4648      	mov	r0, r9
 800d0d6:	f001 ff2c 	bl	800ef32 <__gethex>
 800d0da:	f010 0407 	ands.w	r4, r0, #7
 800d0de:	4606      	mov	r6, r0
 800d0e0:	d005      	beq.n	800d0ee <_strtod_l+0x7e>
 800d0e2:	2c06      	cmp	r4, #6
 800d0e4:	d12b      	bne.n	800d13e <_strtod_l+0xce>
 800d0e6:	3501      	adds	r5, #1
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	951b      	str	r5, [sp, #108]	; 0x6c
 800d0ec:	930d      	str	r3, [sp, #52]	; 0x34
 800d0ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 859a 	bne.w	800dc2a <_strtod_l+0xbba>
 800d0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0f8:	b1e3      	cbz	r3, 800d134 <_strtod_l+0xc4>
 800d0fa:	4652      	mov	r2, sl
 800d0fc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d100:	ec43 2b10 	vmov	d0, r2, r3
 800d104:	b021      	add	sp, #132	; 0x84
 800d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10a:	2a2b      	cmp	r2, #43	; 0x2b
 800d10c:	d015      	beq.n	800d13a <_strtod_l+0xca>
 800d10e:	2a2d      	cmp	r2, #45	; 0x2d
 800d110:	d004      	beq.n	800d11c <_strtod_l+0xac>
 800d112:	2a20      	cmp	r2, #32
 800d114:	d1ca      	bne.n	800d0ac <_strtod_l+0x3c>
 800d116:	3301      	adds	r3, #1
 800d118:	931b      	str	r3, [sp, #108]	; 0x6c
 800d11a:	e7bf      	b.n	800d09c <_strtod_l+0x2c>
 800d11c:	2201      	movs	r2, #1
 800d11e:	920d      	str	r2, [sp, #52]	; 0x34
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	921b      	str	r2, [sp, #108]	; 0x6c
 800d124:	785b      	ldrb	r3, [r3, #1]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d1c2      	bne.n	800d0b0 <_strtod_l+0x40>
 800d12a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d12c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f040 8579 	bne.w	800dc26 <_strtod_l+0xbb6>
 800d134:	4652      	mov	r2, sl
 800d136:	465b      	mov	r3, fp
 800d138:	e7e2      	b.n	800d100 <_strtod_l+0x90>
 800d13a:	2200      	movs	r2, #0
 800d13c:	e7ef      	b.n	800d11e <_strtod_l+0xae>
 800d13e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d140:	b13a      	cbz	r2, 800d152 <_strtod_l+0xe2>
 800d142:	2135      	movs	r1, #53	; 0x35
 800d144:	a81e      	add	r0, sp, #120	; 0x78
 800d146:	f002 fe21 	bl	800fd8c <__copybits>
 800d14a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d14c:	4648      	mov	r0, r9
 800d14e:	f002 fa8d 	bl	800f66c <_Bfree>
 800d152:	3c01      	subs	r4, #1
 800d154:	2c04      	cmp	r4, #4
 800d156:	d806      	bhi.n	800d166 <_strtod_l+0xf6>
 800d158:	e8df f004 	tbb	[pc, r4]
 800d15c:	1714030a 	.word	0x1714030a
 800d160:	0a          	.byte	0x0a
 800d161:	00          	.byte	0x00
 800d162:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d166:	0730      	lsls	r0, r6, #28
 800d168:	d5c1      	bpl.n	800d0ee <_strtod_l+0x7e>
 800d16a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d16e:	e7be      	b.n	800d0ee <_strtod_l+0x7e>
 800d170:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d174:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d17a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d17e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d182:	e7f0      	b.n	800d166 <_strtod_l+0xf6>
 800d184:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d2f8 <_strtod_l+0x288>
 800d188:	e7ed      	b.n	800d166 <_strtod_l+0xf6>
 800d18a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d18e:	f04f 3aff 	mov.w	sl, #4294967295
 800d192:	e7e8      	b.n	800d166 <_strtod_l+0xf6>
 800d194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	921b      	str	r2, [sp, #108]	; 0x6c
 800d19a:	785b      	ldrb	r3, [r3, #1]
 800d19c:	2b30      	cmp	r3, #48	; 0x30
 800d19e:	d0f9      	beq.n	800d194 <_strtod_l+0x124>
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d0a4      	beq.n	800d0ee <_strtod_l+0x7e>
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	2500      	movs	r5, #0
 800d1a8:	9306      	str	r3, [sp, #24]
 800d1aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1ac:	9308      	str	r3, [sp, #32]
 800d1ae:	9507      	str	r5, [sp, #28]
 800d1b0:	9505      	str	r5, [sp, #20]
 800d1b2:	220a      	movs	r2, #10
 800d1b4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d1b6:	7807      	ldrb	r7, [r0, #0]
 800d1b8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d1bc:	b2d9      	uxtb	r1, r3
 800d1be:	2909      	cmp	r1, #9
 800d1c0:	d929      	bls.n	800d216 <_strtod_l+0x1a6>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	f8d8 1000 	ldr.w	r1, [r8]
 800d1c8:	f003 f9b7 	bl	801053a <strncmp>
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d031      	beq.n	800d234 <_strtod_l+0x1c4>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	9c05      	ldr	r4, [sp, #20]
 800d1d4:	9004      	str	r0, [sp, #16]
 800d1d6:	463b      	mov	r3, r7
 800d1d8:	4602      	mov	r2, r0
 800d1da:	2b65      	cmp	r3, #101	; 0x65
 800d1dc:	d001      	beq.n	800d1e2 <_strtod_l+0x172>
 800d1de:	2b45      	cmp	r3, #69	; 0x45
 800d1e0:	d114      	bne.n	800d20c <_strtod_l+0x19c>
 800d1e2:	b924      	cbnz	r4, 800d1ee <_strtod_l+0x17e>
 800d1e4:	b910      	cbnz	r0, 800d1ec <_strtod_l+0x17c>
 800d1e6:	9b06      	ldr	r3, [sp, #24]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d09e      	beq.n	800d12a <_strtod_l+0xba>
 800d1ec:	2400      	movs	r4, #0
 800d1ee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d1f0:	1c73      	adds	r3, r6, #1
 800d1f2:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1f4:	7873      	ldrb	r3, [r6, #1]
 800d1f6:	2b2b      	cmp	r3, #43	; 0x2b
 800d1f8:	d078      	beq.n	800d2ec <_strtod_l+0x27c>
 800d1fa:	2b2d      	cmp	r3, #45	; 0x2d
 800d1fc:	d070      	beq.n	800d2e0 <_strtod_l+0x270>
 800d1fe:	f04f 0c00 	mov.w	ip, #0
 800d202:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d206:	2f09      	cmp	r7, #9
 800d208:	d97c      	bls.n	800d304 <_strtod_l+0x294>
 800d20a:	961b      	str	r6, [sp, #108]	; 0x6c
 800d20c:	f04f 0e00 	mov.w	lr, #0
 800d210:	e09a      	b.n	800d348 <_strtod_l+0x2d8>
 800d212:	2300      	movs	r3, #0
 800d214:	e7c7      	b.n	800d1a6 <_strtod_l+0x136>
 800d216:	9905      	ldr	r1, [sp, #20]
 800d218:	2908      	cmp	r1, #8
 800d21a:	bfdd      	ittte	le
 800d21c:	9907      	ldrle	r1, [sp, #28]
 800d21e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d222:	9307      	strle	r3, [sp, #28]
 800d224:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d228:	9b05      	ldr	r3, [sp, #20]
 800d22a:	3001      	adds	r0, #1
 800d22c:	3301      	adds	r3, #1
 800d22e:	9305      	str	r3, [sp, #20]
 800d230:	901b      	str	r0, [sp, #108]	; 0x6c
 800d232:	e7bf      	b.n	800d1b4 <_strtod_l+0x144>
 800d234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d236:	191a      	adds	r2, r3, r4
 800d238:	921b      	str	r2, [sp, #108]	; 0x6c
 800d23a:	9a05      	ldr	r2, [sp, #20]
 800d23c:	5d1b      	ldrb	r3, [r3, r4]
 800d23e:	2a00      	cmp	r2, #0
 800d240:	d037      	beq.n	800d2b2 <_strtod_l+0x242>
 800d242:	9c05      	ldr	r4, [sp, #20]
 800d244:	4602      	mov	r2, r0
 800d246:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d24a:	2909      	cmp	r1, #9
 800d24c:	d913      	bls.n	800d276 <_strtod_l+0x206>
 800d24e:	2101      	movs	r1, #1
 800d250:	9104      	str	r1, [sp, #16]
 800d252:	e7c2      	b.n	800d1da <_strtod_l+0x16a>
 800d254:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	921b      	str	r2, [sp, #108]	; 0x6c
 800d25a:	785b      	ldrb	r3, [r3, #1]
 800d25c:	3001      	adds	r0, #1
 800d25e:	2b30      	cmp	r3, #48	; 0x30
 800d260:	d0f8      	beq.n	800d254 <_strtod_l+0x1e4>
 800d262:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d266:	2a08      	cmp	r2, #8
 800d268:	f200 84e4 	bhi.w	800dc34 <_strtod_l+0xbc4>
 800d26c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d26e:	9208      	str	r2, [sp, #32]
 800d270:	4602      	mov	r2, r0
 800d272:	2000      	movs	r0, #0
 800d274:	4604      	mov	r4, r0
 800d276:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d27a:	f100 0101 	add.w	r1, r0, #1
 800d27e:	d012      	beq.n	800d2a6 <_strtod_l+0x236>
 800d280:	440a      	add	r2, r1
 800d282:	eb00 0c04 	add.w	ip, r0, r4
 800d286:	4621      	mov	r1, r4
 800d288:	270a      	movs	r7, #10
 800d28a:	458c      	cmp	ip, r1
 800d28c:	d113      	bne.n	800d2b6 <_strtod_l+0x246>
 800d28e:	1821      	adds	r1, r4, r0
 800d290:	2908      	cmp	r1, #8
 800d292:	f104 0401 	add.w	r4, r4, #1
 800d296:	4404      	add	r4, r0
 800d298:	dc19      	bgt.n	800d2ce <_strtod_l+0x25e>
 800d29a:	9b07      	ldr	r3, [sp, #28]
 800d29c:	210a      	movs	r1, #10
 800d29e:	fb01 e303 	mla	r3, r1, r3, lr
 800d2a2:	9307      	str	r3, [sp, #28]
 800d2a4:	2100      	movs	r1, #0
 800d2a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2a8:	1c58      	adds	r0, r3, #1
 800d2aa:	901b      	str	r0, [sp, #108]	; 0x6c
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	4608      	mov	r0, r1
 800d2b0:	e7c9      	b.n	800d246 <_strtod_l+0x1d6>
 800d2b2:	9805      	ldr	r0, [sp, #20]
 800d2b4:	e7d3      	b.n	800d25e <_strtod_l+0x1ee>
 800d2b6:	2908      	cmp	r1, #8
 800d2b8:	f101 0101 	add.w	r1, r1, #1
 800d2bc:	dc03      	bgt.n	800d2c6 <_strtod_l+0x256>
 800d2be:	9b07      	ldr	r3, [sp, #28]
 800d2c0:	437b      	muls	r3, r7
 800d2c2:	9307      	str	r3, [sp, #28]
 800d2c4:	e7e1      	b.n	800d28a <_strtod_l+0x21a>
 800d2c6:	2910      	cmp	r1, #16
 800d2c8:	bfd8      	it	le
 800d2ca:	437d      	mulle	r5, r7
 800d2cc:	e7dd      	b.n	800d28a <_strtod_l+0x21a>
 800d2ce:	2c10      	cmp	r4, #16
 800d2d0:	bfdc      	itt	le
 800d2d2:	210a      	movle	r1, #10
 800d2d4:	fb01 e505 	mlale	r5, r1, r5, lr
 800d2d8:	e7e4      	b.n	800d2a4 <_strtod_l+0x234>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	9304      	str	r3, [sp, #16]
 800d2de:	e781      	b.n	800d1e4 <_strtod_l+0x174>
 800d2e0:	f04f 0c01 	mov.w	ip, #1
 800d2e4:	1cb3      	adds	r3, r6, #2
 800d2e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2e8:	78b3      	ldrb	r3, [r6, #2]
 800d2ea:	e78a      	b.n	800d202 <_strtod_l+0x192>
 800d2ec:	f04f 0c00 	mov.w	ip, #0
 800d2f0:	e7f8      	b.n	800d2e4 <_strtod_l+0x274>
 800d2f2:	bf00      	nop
 800d2f4:	080109e8 	.word	0x080109e8
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2fe:	1c5f      	adds	r7, r3, #1
 800d300:	971b      	str	r7, [sp, #108]	; 0x6c
 800d302:	785b      	ldrb	r3, [r3, #1]
 800d304:	2b30      	cmp	r3, #48	; 0x30
 800d306:	d0f9      	beq.n	800d2fc <_strtod_l+0x28c>
 800d308:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d30c:	2f08      	cmp	r7, #8
 800d30e:	f63f af7d 	bhi.w	800d20c <_strtod_l+0x19c>
 800d312:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d318:	930a      	str	r3, [sp, #40]	; 0x28
 800d31a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d31c:	1c5f      	adds	r7, r3, #1
 800d31e:	971b      	str	r7, [sp, #108]	; 0x6c
 800d320:	785b      	ldrb	r3, [r3, #1]
 800d322:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d326:	f1b8 0f09 	cmp.w	r8, #9
 800d32a:	d937      	bls.n	800d39c <_strtod_l+0x32c>
 800d32c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d32e:	1a7f      	subs	r7, r7, r1
 800d330:	2f08      	cmp	r7, #8
 800d332:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d336:	dc37      	bgt.n	800d3a8 <_strtod_l+0x338>
 800d338:	45be      	cmp	lr, r7
 800d33a:	bfa8      	it	ge
 800d33c:	46be      	movge	lr, r7
 800d33e:	f1bc 0f00 	cmp.w	ip, #0
 800d342:	d001      	beq.n	800d348 <_strtod_l+0x2d8>
 800d344:	f1ce 0e00 	rsb	lr, lr, #0
 800d348:	2c00      	cmp	r4, #0
 800d34a:	d151      	bne.n	800d3f0 <_strtod_l+0x380>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f47f aece 	bne.w	800d0ee <_strtod_l+0x7e>
 800d352:	9a06      	ldr	r2, [sp, #24]
 800d354:	2a00      	cmp	r2, #0
 800d356:	f47f aeca 	bne.w	800d0ee <_strtod_l+0x7e>
 800d35a:	9a04      	ldr	r2, [sp, #16]
 800d35c:	2a00      	cmp	r2, #0
 800d35e:	f47f aee4 	bne.w	800d12a <_strtod_l+0xba>
 800d362:	2b4e      	cmp	r3, #78	; 0x4e
 800d364:	d027      	beq.n	800d3b6 <_strtod_l+0x346>
 800d366:	dc21      	bgt.n	800d3ac <_strtod_l+0x33c>
 800d368:	2b49      	cmp	r3, #73	; 0x49
 800d36a:	f47f aede 	bne.w	800d12a <_strtod_l+0xba>
 800d36e:	49a0      	ldr	r1, [pc, #640]	; (800d5f0 <_strtod_l+0x580>)
 800d370:	a81b      	add	r0, sp, #108	; 0x6c
 800d372:	f002 f811 	bl	800f398 <__match>
 800d376:	2800      	cmp	r0, #0
 800d378:	f43f aed7 	beq.w	800d12a <_strtod_l+0xba>
 800d37c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d37e:	499d      	ldr	r1, [pc, #628]	; (800d5f4 <_strtod_l+0x584>)
 800d380:	3b01      	subs	r3, #1
 800d382:	a81b      	add	r0, sp, #108	; 0x6c
 800d384:	931b      	str	r3, [sp, #108]	; 0x6c
 800d386:	f002 f807 	bl	800f398 <__match>
 800d38a:	b910      	cbnz	r0, 800d392 <_strtod_l+0x322>
 800d38c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d38e:	3301      	adds	r3, #1
 800d390:	931b      	str	r3, [sp, #108]	; 0x6c
 800d392:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d608 <_strtod_l+0x598>
 800d396:	f04f 0a00 	mov.w	sl, #0
 800d39a:	e6a8      	b.n	800d0ee <_strtod_l+0x7e>
 800d39c:	210a      	movs	r1, #10
 800d39e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d3a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d3a6:	e7b8      	b.n	800d31a <_strtod_l+0x2aa>
 800d3a8:	46be      	mov	lr, r7
 800d3aa:	e7c8      	b.n	800d33e <_strtod_l+0x2ce>
 800d3ac:	2b69      	cmp	r3, #105	; 0x69
 800d3ae:	d0de      	beq.n	800d36e <_strtod_l+0x2fe>
 800d3b0:	2b6e      	cmp	r3, #110	; 0x6e
 800d3b2:	f47f aeba 	bne.w	800d12a <_strtod_l+0xba>
 800d3b6:	4990      	ldr	r1, [pc, #576]	; (800d5f8 <_strtod_l+0x588>)
 800d3b8:	a81b      	add	r0, sp, #108	; 0x6c
 800d3ba:	f001 ffed 	bl	800f398 <__match>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f43f aeb3 	beq.w	800d12a <_strtod_l+0xba>
 800d3c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d3c6:	781b      	ldrb	r3, [r3, #0]
 800d3c8:	2b28      	cmp	r3, #40	; 0x28
 800d3ca:	d10e      	bne.n	800d3ea <_strtod_l+0x37a>
 800d3cc:	aa1e      	add	r2, sp, #120	; 0x78
 800d3ce:	498b      	ldr	r1, [pc, #556]	; (800d5fc <_strtod_l+0x58c>)
 800d3d0:	a81b      	add	r0, sp, #108	; 0x6c
 800d3d2:	f001 fff5 	bl	800f3c0 <__hexnan>
 800d3d6:	2805      	cmp	r0, #5
 800d3d8:	d107      	bne.n	800d3ea <_strtod_l+0x37a>
 800d3da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d3dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d3e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d3e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d3e8:	e681      	b.n	800d0ee <_strtod_l+0x7e>
 800d3ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d610 <_strtod_l+0x5a0>
 800d3ee:	e7d2      	b.n	800d396 <_strtod_l+0x326>
 800d3f0:	ebae 0302 	sub.w	r3, lr, r2
 800d3f4:	9306      	str	r3, [sp, #24]
 800d3f6:	9b05      	ldr	r3, [sp, #20]
 800d3f8:	9807      	ldr	r0, [sp, #28]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	bf08      	it	eq
 800d3fe:	4623      	moveq	r3, r4
 800d400:	2c10      	cmp	r4, #16
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	46a0      	mov	r8, r4
 800d406:	bfa8      	it	ge
 800d408:	f04f 0810 	movge.w	r8, #16
 800d40c:	f7f3 f87a 	bl	8000504 <__aeabi_ui2d>
 800d410:	2c09      	cmp	r4, #9
 800d412:	4682      	mov	sl, r0
 800d414:	468b      	mov	fp, r1
 800d416:	dc13      	bgt.n	800d440 <_strtod_l+0x3d0>
 800d418:	9b06      	ldr	r3, [sp, #24]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f43f ae67 	beq.w	800d0ee <_strtod_l+0x7e>
 800d420:	9b06      	ldr	r3, [sp, #24]
 800d422:	dd7a      	ble.n	800d51a <_strtod_l+0x4aa>
 800d424:	2b16      	cmp	r3, #22
 800d426:	dc61      	bgt.n	800d4ec <_strtod_l+0x47c>
 800d428:	4a75      	ldr	r2, [pc, #468]	; (800d600 <_strtod_l+0x590>)
 800d42a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d42e:	e9de 0100 	ldrd	r0, r1, [lr]
 800d432:	4652      	mov	r2, sl
 800d434:	465b      	mov	r3, fp
 800d436:	f7f3 f8df 	bl	80005f8 <__aeabi_dmul>
 800d43a:	4682      	mov	sl, r0
 800d43c:	468b      	mov	fp, r1
 800d43e:	e656      	b.n	800d0ee <_strtod_l+0x7e>
 800d440:	4b6f      	ldr	r3, [pc, #444]	; (800d600 <_strtod_l+0x590>)
 800d442:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d446:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d44a:	f7f3 f8d5 	bl	80005f8 <__aeabi_dmul>
 800d44e:	4606      	mov	r6, r0
 800d450:	4628      	mov	r0, r5
 800d452:	460f      	mov	r7, r1
 800d454:	f7f3 f856 	bl	8000504 <__aeabi_ui2d>
 800d458:	4602      	mov	r2, r0
 800d45a:	460b      	mov	r3, r1
 800d45c:	4630      	mov	r0, r6
 800d45e:	4639      	mov	r1, r7
 800d460:	f7f2 ff14 	bl	800028c <__adddf3>
 800d464:	2c0f      	cmp	r4, #15
 800d466:	4682      	mov	sl, r0
 800d468:	468b      	mov	fp, r1
 800d46a:	ddd5      	ble.n	800d418 <_strtod_l+0x3a8>
 800d46c:	9b06      	ldr	r3, [sp, #24]
 800d46e:	eba4 0808 	sub.w	r8, r4, r8
 800d472:	4498      	add	r8, r3
 800d474:	f1b8 0f00 	cmp.w	r8, #0
 800d478:	f340 8096 	ble.w	800d5a8 <_strtod_l+0x538>
 800d47c:	f018 030f 	ands.w	r3, r8, #15
 800d480:	d00a      	beq.n	800d498 <_strtod_l+0x428>
 800d482:	495f      	ldr	r1, [pc, #380]	; (800d600 <_strtod_l+0x590>)
 800d484:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d488:	4652      	mov	r2, sl
 800d48a:	465b      	mov	r3, fp
 800d48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d490:	f7f3 f8b2 	bl	80005f8 <__aeabi_dmul>
 800d494:	4682      	mov	sl, r0
 800d496:	468b      	mov	fp, r1
 800d498:	f038 080f 	bics.w	r8, r8, #15
 800d49c:	d073      	beq.n	800d586 <_strtod_l+0x516>
 800d49e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d4a2:	dd47      	ble.n	800d534 <_strtod_l+0x4c4>
 800d4a4:	2400      	movs	r4, #0
 800d4a6:	46a0      	mov	r8, r4
 800d4a8:	9407      	str	r4, [sp, #28]
 800d4aa:	9405      	str	r4, [sp, #20]
 800d4ac:	2322      	movs	r3, #34	; 0x22
 800d4ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d608 <_strtod_l+0x598>
 800d4b2:	f8c9 3000 	str.w	r3, [r9]
 800d4b6:	f04f 0a00 	mov.w	sl, #0
 800d4ba:	9b07      	ldr	r3, [sp, #28]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f43f ae16 	beq.w	800d0ee <_strtod_l+0x7e>
 800d4c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d4c4:	4648      	mov	r0, r9
 800d4c6:	f002 f8d1 	bl	800f66c <_Bfree>
 800d4ca:	9905      	ldr	r1, [sp, #20]
 800d4cc:	4648      	mov	r0, r9
 800d4ce:	f002 f8cd 	bl	800f66c <_Bfree>
 800d4d2:	4641      	mov	r1, r8
 800d4d4:	4648      	mov	r0, r9
 800d4d6:	f002 f8c9 	bl	800f66c <_Bfree>
 800d4da:	9907      	ldr	r1, [sp, #28]
 800d4dc:	4648      	mov	r0, r9
 800d4de:	f002 f8c5 	bl	800f66c <_Bfree>
 800d4e2:	4621      	mov	r1, r4
 800d4e4:	4648      	mov	r0, r9
 800d4e6:	f002 f8c1 	bl	800f66c <_Bfree>
 800d4ea:	e600      	b.n	800d0ee <_strtod_l+0x7e>
 800d4ec:	9a06      	ldr	r2, [sp, #24]
 800d4ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	dbba      	blt.n	800d46c <_strtod_l+0x3fc>
 800d4f6:	4d42      	ldr	r5, [pc, #264]	; (800d600 <_strtod_l+0x590>)
 800d4f8:	f1c4 040f 	rsb	r4, r4, #15
 800d4fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d500:	4652      	mov	r2, sl
 800d502:	465b      	mov	r3, fp
 800d504:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d508:	f7f3 f876 	bl	80005f8 <__aeabi_dmul>
 800d50c:	9b06      	ldr	r3, [sp, #24]
 800d50e:	1b1c      	subs	r4, r3, r4
 800d510:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d514:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d518:	e78d      	b.n	800d436 <_strtod_l+0x3c6>
 800d51a:	f113 0f16 	cmn.w	r3, #22
 800d51e:	dba5      	blt.n	800d46c <_strtod_l+0x3fc>
 800d520:	4a37      	ldr	r2, [pc, #220]	; (800d600 <_strtod_l+0x590>)
 800d522:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d526:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d52a:	4650      	mov	r0, sl
 800d52c:	4659      	mov	r1, fp
 800d52e:	f7f3 f98d 	bl	800084c <__aeabi_ddiv>
 800d532:	e782      	b.n	800d43a <_strtod_l+0x3ca>
 800d534:	2300      	movs	r3, #0
 800d536:	4e33      	ldr	r6, [pc, #204]	; (800d604 <_strtod_l+0x594>)
 800d538:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d53c:	4650      	mov	r0, sl
 800d53e:	4659      	mov	r1, fp
 800d540:	461d      	mov	r5, r3
 800d542:	f1b8 0f01 	cmp.w	r8, #1
 800d546:	dc21      	bgt.n	800d58c <_strtod_l+0x51c>
 800d548:	b10b      	cbz	r3, 800d54e <_strtod_l+0x4de>
 800d54a:	4682      	mov	sl, r0
 800d54c:	468b      	mov	fp, r1
 800d54e:	4b2d      	ldr	r3, [pc, #180]	; (800d604 <_strtod_l+0x594>)
 800d550:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d554:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d558:	4652      	mov	r2, sl
 800d55a:	465b      	mov	r3, fp
 800d55c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d560:	f7f3 f84a 	bl	80005f8 <__aeabi_dmul>
 800d564:	4b28      	ldr	r3, [pc, #160]	; (800d608 <_strtod_l+0x598>)
 800d566:	460a      	mov	r2, r1
 800d568:	400b      	ands	r3, r1
 800d56a:	4928      	ldr	r1, [pc, #160]	; (800d60c <_strtod_l+0x59c>)
 800d56c:	428b      	cmp	r3, r1
 800d56e:	4682      	mov	sl, r0
 800d570:	d898      	bhi.n	800d4a4 <_strtod_l+0x434>
 800d572:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d576:	428b      	cmp	r3, r1
 800d578:	bf86      	itte	hi
 800d57a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d614 <_strtod_l+0x5a4>
 800d57e:	f04f 3aff 	movhi.w	sl, #4294967295
 800d582:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d586:	2300      	movs	r3, #0
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	e077      	b.n	800d67c <_strtod_l+0x60c>
 800d58c:	f018 0f01 	tst.w	r8, #1
 800d590:	d006      	beq.n	800d5a0 <_strtod_l+0x530>
 800d592:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59a:	f7f3 f82d 	bl	80005f8 <__aeabi_dmul>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	3501      	adds	r5, #1
 800d5a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d5a6:	e7cc      	b.n	800d542 <_strtod_l+0x4d2>
 800d5a8:	d0ed      	beq.n	800d586 <_strtod_l+0x516>
 800d5aa:	f1c8 0800 	rsb	r8, r8, #0
 800d5ae:	f018 020f 	ands.w	r2, r8, #15
 800d5b2:	d00a      	beq.n	800d5ca <_strtod_l+0x55a>
 800d5b4:	4b12      	ldr	r3, [pc, #72]	; (800d600 <_strtod_l+0x590>)
 800d5b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5ba:	4650      	mov	r0, sl
 800d5bc:	4659      	mov	r1, fp
 800d5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c2:	f7f3 f943 	bl	800084c <__aeabi_ddiv>
 800d5c6:	4682      	mov	sl, r0
 800d5c8:	468b      	mov	fp, r1
 800d5ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d5ce:	d0da      	beq.n	800d586 <_strtod_l+0x516>
 800d5d0:	f1b8 0f1f 	cmp.w	r8, #31
 800d5d4:	dd20      	ble.n	800d618 <_strtod_l+0x5a8>
 800d5d6:	2400      	movs	r4, #0
 800d5d8:	46a0      	mov	r8, r4
 800d5da:	9407      	str	r4, [sp, #28]
 800d5dc:	9405      	str	r4, [sp, #20]
 800d5de:	2322      	movs	r3, #34	; 0x22
 800d5e0:	f04f 0a00 	mov.w	sl, #0
 800d5e4:	f04f 0b00 	mov.w	fp, #0
 800d5e8:	f8c9 3000 	str.w	r3, [r9]
 800d5ec:	e765      	b.n	800d4ba <_strtod_l+0x44a>
 800d5ee:	bf00      	nop
 800d5f0:	080109b1 	.word	0x080109b1
 800d5f4:	08010a3b 	.word	0x08010a3b
 800d5f8:	080109b9 	.word	0x080109b9
 800d5fc:	080109fc 	.word	0x080109fc
 800d600:	08010ae0 	.word	0x08010ae0
 800d604:	08010ab8 	.word	0x08010ab8
 800d608:	7ff00000 	.word	0x7ff00000
 800d60c:	7ca00000 	.word	0x7ca00000
 800d610:	fff80000 	.word	0xfff80000
 800d614:	7fefffff 	.word	0x7fefffff
 800d618:	f018 0310 	ands.w	r3, r8, #16
 800d61c:	bf18      	it	ne
 800d61e:	236a      	movne	r3, #106	; 0x6a
 800d620:	4da0      	ldr	r5, [pc, #640]	; (800d8a4 <_strtod_l+0x834>)
 800d622:	9304      	str	r3, [sp, #16]
 800d624:	4650      	mov	r0, sl
 800d626:	4659      	mov	r1, fp
 800d628:	2300      	movs	r3, #0
 800d62a:	f1b8 0f00 	cmp.w	r8, #0
 800d62e:	f300 810a 	bgt.w	800d846 <_strtod_l+0x7d6>
 800d632:	b10b      	cbz	r3, 800d638 <_strtod_l+0x5c8>
 800d634:	4682      	mov	sl, r0
 800d636:	468b      	mov	fp, r1
 800d638:	9b04      	ldr	r3, [sp, #16]
 800d63a:	b1bb      	cbz	r3, 800d66c <_strtod_l+0x5fc>
 800d63c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d640:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d644:	2b00      	cmp	r3, #0
 800d646:	4659      	mov	r1, fp
 800d648:	dd10      	ble.n	800d66c <_strtod_l+0x5fc>
 800d64a:	2b1f      	cmp	r3, #31
 800d64c:	f340 8107 	ble.w	800d85e <_strtod_l+0x7ee>
 800d650:	2b34      	cmp	r3, #52	; 0x34
 800d652:	bfde      	ittt	le
 800d654:	3b20      	suble	r3, #32
 800d656:	f04f 32ff 	movle.w	r2, #4294967295
 800d65a:	fa02 f303 	lslle.w	r3, r2, r3
 800d65e:	f04f 0a00 	mov.w	sl, #0
 800d662:	bfcc      	ite	gt
 800d664:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d668:	ea03 0b01 	andle.w	fp, r3, r1
 800d66c:	2200      	movs	r2, #0
 800d66e:	2300      	movs	r3, #0
 800d670:	4650      	mov	r0, sl
 800d672:	4659      	mov	r1, fp
 800d674:	f7f3 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 800d678:	2800      	cmp	r0, #0
 800d67a:	d1ac      	bne.n	800d5d6 <_strtod_l+0x566>
 800d67c:	9b07      	ldr	r3, [sp, #28]
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	9a05      	ldr	r2, [sp, #20]
 800d682:	9908      	ldr	r1, [sp, #32]
 800d684:	4623      	mov	r3, r4
 800d686:	4648      	mov	r0, r9
 800d688:	f002 f842 	bl	800f710 <__s2b>
 800d68c:	9007      	str	r0, [sp, #28]
 800d68e:	2800      	cmp	r0, #0
 800d690:	f43f af08 	beq.w	800d4a4 <_strtod_l+0x434>
 800d694:	9a06      	ldr	r2, [sp, #24]
 800d696:	9b06      	ldr	r3, [sp, #24]
 800d698:	2a00      	cmp	r2, #0
 800d69a:	f1c3 0300 	rsb	r3, r3, #0
 800d69e:	bfa8      	it	ge
 800d6a0:	2300      	movge	r3, #0
 800d6a2:	930e      	str	r3, [sp, #56]	; 0x38
 800d6a4:	2400      	movs	r4, #0
 800d6a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d6aa:	9316      	str	r3, [sp, #88]	; 0x58
 800d6ac:	46a0      	mov	r8, r4
 800d6ae:	9b07      	ldr	r3, [sp, #28]
 800d6b0:	4648      	mov	r0, r9
 800d6b2:	6859      	ldr	r1, [r3, #4]
 800d6b4:	f001 ffa6 	bl	800f604 <_Balloc>
 800d6b8:	9005      	str	r0, [sp, #20]
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	f43f aef6 	beq.w	800d4ac <_strtod_l+0x43c>
 800d6c0:	9b07      	ldr	r3, [sp, #28]
 800d6c2:	691a      	ldr	r2, [r3, #16]
 800d6c4:	3202      	adds	r2, #2
 800d6c6:	f103 010c 	add.w	r1, r3, #12
 800d6ca:	0092      	lsls	r2, r2, #2
 800d6cc:	300c      	adds	r0, #12
 800d6ce:	f7fe fdbf 	bl	800c250 <memcpy>
 800d6d2:	aa1e      	add	r2, sp, #120	; 0x78
 800d6d4:	a91d      	add	r1, sp, #116	; 0x74
 800d6d6:	ec4b ab10 	vmov	d0, sl, fp
 800d6da:	4648      	mov	r0, r9
 800d6dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d6e0:	f002 fad2 	bl	800fc88 <__d2b>
 800d6e4:	901c      	str	r0, [sp, #112]	; 0x70
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f43f aee0 	beq.w	800d4ac <_strtod_l+0x43c>
 800d6ec:	2101      	movs	r1, #1
 800d6ee:	4648      	mov	r0, r9
 800d6f0:	f002 f89a 	bl	800f828 <__i2b>
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	f43f aed8 	beq.w	800d4ac <_strtod_l+0x43c>
 800d6fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d6fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d700:	2e00      	cmp	r6, #0
 800d702:	bfab      	itete	ge
 800d704:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d706:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d708:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d70a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d70c:	bfac      	ite	ge
 800d70e:	18f7      	addge	r7, r6, r3
 800d710:	1b9d      	sublt	r5, r3, r6
 800d712:	9b04      	ldr	r3, [sp, #16]
 800d714:	1af6      	subs	r6, r6, r3
 800d716:	4416      	add	r6, r2
 800d718:	4b63      	ldr	r3, [pc, #396]	; (800d8a8 <_strtod_l+0x838>)
 800d71a:	3e01      	subs	r6, #1
 800d71c:	429e      	cmp	r6, r3
 800d71e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d722:	f280 80af 	bge.w	800d884 <_strtod_l+0x814>
 800d726:	1b9b      	subs	r3, r3, r6
 800d728:	2b1f      	cmp	r3, #31
 800d72a:	eba2 0203 	sub.w	r2, r2, r3
 800d72e:	f04f 0101 	mov.w	r1, #1
 800d732:	f300 809b 	bgt.w	800d86c <_strtod_l+0x7fc>
 800d736:	fa01 f303 	lsl.w	r3, r1, r3
 800d73a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d73c:	2300      	movs	r3, #0
 800d73e:	930a      	str	r3, [sp, #40]	; 0x28
 800d740:	18be      	adds	r6, r7, r2
 800d742:	9b04      	ldr	r3, [sp, #16]
 800d744:	42b7      	cmp	r7, r6
 800d746:	4415      	add	r5, r2
 800d748:	441d      	add	r5, r3
 800d74a:	463b      	mov	r3, r7
 800d74c:	bfa8      	it	ge
 800d74e:	4633      	movge	r3, r6
 800d750:	42ab      	cmp	r3, r5
 800d752:	bfa8      	it	ge
 800d754:	462b      	movge	r3, r5
 800d756:	2b00      	cmp	r3, #0
 800d758:	bfc2      	ittt	gt
 800d75a:	1af6      	subgt	r6, r6, r3
 800d75c:	1aed      	subgt	r5, r5, r3
 800d75e:	1aff      	subgt	r7, r7, r3
 800d760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d762:	b1bb      	cbz	r3, 800d794 <_strtod_l+0x724>
 800d764:	4641      	mov	r1, r8
 800d766:	461a      	mov	r2, r3
 800d768:	4648      	mov	r0, r9
 800d76a:	f002 f8fd 	bl	800f968 <__pow5mult>
 800d76e:	4680      	mov	r8, r0
 800d770:	2800      	cmp	r0, #0
 800d772:	f43f ae9b 	beq.w	800d4ac <_strtod_l+0x43c>
 800d776:	4601      	mov	r1, r0
 800d778:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d77a:	4648      	mov	r0, r9
 800d77c:	f002 f85d 	bl	800f83a <__multiply>
 800d780:	900c      	str	r0, [sp, #48]	; 0x30
 800d782:	2800      	cmp	r0, #0
 800d784:	f43f ae92 	beq.w	800d4ac <_strtod_l+0x43c>
 800d788:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d78a:	4648      	mov	r0, r9
 800d78c:	f001 ff6e 	bl	800f66c <_Bfree>
 800d790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d792:	931c      	str	r3, [sp, #112]	; 0x70
 800d794:	2e00      	cmp	r6, #0
 800d796:	dc7a      	bgt.n	800d88e <_strtod_l+0x81e>
 800d798:	9b06      	ldr	r3, [sp, #24]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd08      	ble.n	800d7b0 <_strtod_l+0x740>
 800d79e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d7a0:	9905      	ldr	r1, [sp, #20]
 800d7a2:	4648      	mov	r0, r9
 800d7a4:	f002 f8e0 	bl	800f968 <__pow5mult>
 800d7a8:	9005      	str	r0, [sp, #20]
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	f43f ae7e 	beq.w	800d4ac <_strtod_l+0x43c>
 800d7b0:	2d00      	cmp	r5, #0
 800d7b2:	dd08      	ble.n	800d7c6 <_strtod_l+0x756>
 800d7b4:	462a      	mov	r2, r5
 800d7b6:	9905      	ldr	r1, [sp, #20]
 800d7b8:	4648      	mov	r0, r9
 800d7ba:	f002 f923 	bl	800fa04 <__lshift>
 800d7be:	9005      	str	r0, [sp, #20]
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f43f ae73 	beq.w	800d4ac <_strtod_l+0x43c>
 800d7c6:	2f00      	cmp	r7, #0
 800d7c8:	dd08      	ble.n	800d7dc <_strtod_l+0x76c>
 800d7ca:	4641      	mov	r1, r8
 800d7cc:	463a      	mov	r2, r7
 800d7ce:	4648      	mov	r0, r9
 800d7d0:	f002 f918 	bl	800fa04 <__lshift>
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	f43f ae68 	beq.w	800d4ac <_strtod_l+0x43c>
 800d7dc:	9a05      	ldr	r2, [sp, #20]
 800d7de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7e0:	4648      	mov	r0, r9
 800d7e2:	f002 f97d 	bl	800fae0 <__mdiff>
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	f43f ae5f 	beq.w	800d4ac <_strtod_l+0x43c>
 800d7ee:	68c3      	ldr	r3, [r0, #12]
 800d7f0:	930c      	str	r3, [sp, #48]	; 0x30
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	60c3      	str	r3, [r0, #12]
 800d7f6:	4641      	mov	r1, r8
 800d7f8:	f002 f958 	bl	800faac <__mcmp>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	da55      	bge.n	800d8ac <_strtod_l+0x83c>
 800d800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d802:	b9e3      	cbnz	r3, 800d83e <_strtod_l+0x7ce>
 800d804:	f1ba 0f00 	cmp.w	sl, #0
 800d808:	d119      	bne.n	800d83e <_strtod_l+0x7ce>
 800d80a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d80e:	b9b3      	cbnz	r3, 800d83e <_strtod_l+0x7ce>
 800d810:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d814:	0d1b      	lsrs	r3, r3, #20
 800d816:	051b      	lsls	r3, r3, #20
 800d818:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d81c:	d90f      	bls.n	800d83e <_strtod_l+0x7ce>
 800d81e:	6963      	ldr	r3, [r4, #20]
 800d820:	b913      	cbnz	r3, 800d828 <_strtod_l+0x7b8>
 800d822:	6923      	ldr	r3, [r4, #16]
 800d824:	2b01      	cmp	r3, #1
 800d826:	dd0a      	ble.n	800d83e <_strtod_l+0x7ce>
 800d828:	4621      	mov	r1, r4
 800d82a:	2201      	movs	r2, #1
 800d82c:	4648      	mov	r0, r9
 800d82e:	f002 f8e9 	bl	800fa04 <__lshift>
 800d832:	4641      	mov	r1, r8
 800d834:	4604      	mov	r4, r0
 800d836:	f002 f939 	bl	800faac <__mcmp>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	dc67      	bgt.n	800d90e <_strtod_l+0x89e>
 800d83e:	9b04      	ldr	r3, [sp, #16]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d171      	bne.n	800d928 <_strtod_l+0x8b8>
 800d844:	e63d      	b.n	800d4c2 <_strtod_l+0x452>
 800d846:	f018 0f01 	tst.w	r8, #1
 800d84a:	d004      	beq.n	800d856 <_strtod_l+0x7e6>
 800d84c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d850:	f7f2 fed2 	bl	80005f8 <__aeabi_dmul>
 800d854:	2301      	movs	r3, #1
 800d856:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d85a:	3508      	adds	r5, #8
 800d85c:	e6e5      	b.n	800d62a <_strtod_l+0x5ba>
 800d85e:	f04f 32ff 	mov.w	r2, #4294967295
 800d862:	fa02 f303 	lsl.w	r3, r2, r3
 800d866:	ea03 0a0a 	and.w	sl, r3, sl
 800d86a:	e6ff      	b.n	800d66c <_strtod_l+0x5fc>
 800d86c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d870:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d874:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d878:	36e2      	adds	r6, #226	; 0xe2
 800d87a:	fa01 f306 	lsl.w	r3, r1, r6
 800d87e:	930a      	str	r3, [sp, #40]	; 0x28
 800d880:	910f      	str	r1, [sp, #60]	; 0x3c
 800d882:	e75d      	b.n	800d740 <_strtod_l+0x6d0>
 800d884:	2300      	movs	r3, #0
 800d886:	930a      	str	r3, [sp, #40]	; 0x28
 800d888:	2301      	movs	r3, #1
 800d88a:	930f      	str	r3, [sp, #60]	; 0x3c
 800d88c:	e758      	b.n	800d740 <_strtod_l+0x6d0>
 800d88e:	4632      	mov	r2, r6
 800d890:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d892:	4648      	mov	r0, r9
 800d894:	f002 f8b6 	bl	800fa04 <__lshift>
 800d898:	901c      	str	r0, [sp, #112]	; 0x70
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f47f af7c 	bne.w	800d798 <_strtod_l+0x728>
 800d8a0:	e604      	b.n	800d4ac <_strtod_l+0x43c>
 800d8a2:	bf00      	nop
 800d8a4:	08010a10 	.word	0x08010a10
 800d8a8:	fffffc02 	.word	0xfffffc02
 800d8ac:	465d      	mov	r5, fp
 800d8ae:	f040 8086 	bne.w	800d9be <_strtod_l+0x94e>
 800d8b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d8b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8b8:	b32a      	cbz	r2, 800d906 <_strtod_l+0x896>
 800d8ba:	4aaf      	ldr	r2, [pc, #700]	; (800db78 <_strtod_l+0xb08>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d153      	bne.n	800d968 <_strtod_l+0x8f8>
 800d8c0:	9b04      	ldr	r3, [sp, #16]
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	b1d3      	cbz	r3, 800d8fc <_strtod_l+0x88c>
 800d8c6:	4aad      	ldr	r2, [pc, #692]	; (800db7c <_strtod_l+0xb0c>)
 800d8c8:	402a      	ands	r2, r5
 800d8ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d8ce:	f04f 31ff 	mov.w	r1, #4294967295
 800d8d2:	d816      	bhi.n	800d902 <_strtod_l+0x892>
 800d8d4:	0d12      	lsrs	r2, r2, #20
 800d8d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d8da:	fa01 f303 	lsl.w	r3, r1, r3
 800d8de:	4298      	cmp	r0, r3
 800d8e0:	d142      	bne.n	800d968 <_strtod_l+0x8f8>
 800d8e2:	4ba7      	ldr	r3, [pc, #668]	; (800db80 <_strtod_l+0xb10>)
 800d8e4:	429d      	cmp	r5, r3
 800d8e6:	d102      	bne.n	800d8ee <_strtod_l+0x87e>
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f43f addf 	beq.w	800d4ac <_strtod_l+0x43c>
 800d8ee:	4ba3      	ldr	r3, [pc, #652]	; (800db7c <_strtod_l+0xb0c>)
 800d8f0:	402b      	ands	r3, r5
 800d8f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d8f6:	f04f 0a00 	mov.w	sl, #0
 800d8fa:	e7a0      	b.n	800d83e <_strtod_l+0x7ce>
 800d8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800d900:	e7ed      	b.n	800d8de <_strtod_l+0x86e>
 800d902:	460b      	mov	r3, r1
 800d904:	e7eb      	b.n	800d8de <_strtod_l+0x86e>
 800d906:	bb7b      	cbnz	r3, 800d968 <_strtod_l+0x8f8>
 800d908:	f1ba 0f00 	cmp.w	sl, #0
 800d90c:	d12c      	bne.n	800d968 <_strtod_l+0x8f8>
 800d90e:	9904      	ldr	r1, [sp, #16]
 800d910:	4a9a      	ldr	r2, [pc, #616]	; (800db7c <_strtod_l+0xb0c>)
 800d912:	465b      	mov	r3, fp
 800d914:	b1f1      	cbz	r1, 800d954 <_strtod_l+0x8e4>
 800d916:	ea02 010b 	and.w	r1, r2, fp
 800d91a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d91e:	dc19      	bgt.n	800d954 <_strtod_l+0x8e4>
 800d920:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d924:	f77f ae5b 	ble.w	800d5de <_strtod_l+0x56e>
 800d928:	4a96      	ldr	r2, [pc, #600]	; (800db84 <_strtod_l+0xb14>)
 800d92a:	2300      	movs	r3, #0
 800d92c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d930:	4650      	mov	r0, sl
 800d932:	4659      	mov	r1, fp
 800d934:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d938:	f7f2 fe5e 	bl	80005f8 <__aeabi_dmul>
 800d93c:	4682      	mov	sl, r0
 800d93e:	468b      	mov	fp, r1
 800d940:	2900      	cmp	r1, #0
 800d942:	f47f adbe 	bne.w	800d4c2 <_strtod_l+0x452>
 800d946:	2800      	cmp	r0, #0
 800d948:	f47f adbb 	bne.w	800d4c2 <_strtod_l+0x452>
 800d94c:	2322      	movs	r3, #34	; 0x22
 800d94e:	f8c9 3000 	str.w	r3, [r9]
 800d952:	e5b6      	b.n	800d4c2 <_strtod_l+0x452>
 800d954:	4013      	ands	r3, r2
 800d956:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d95a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d95e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d962:	f04f 3aff 	mov.w	sl, #4294967295
 800d966:	e76a      	b.n	800d83e <_strtod_l+0x7ce>
 800d968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d96a:	b193      	cbz	r3, 800d992 <_strtod_l+0x922>
 800d96c:	422b      	tst	r3, r5
 800d96e:	f43f af66 	beq.w	800d83e <_strtod_l+0x7ce>
 800d972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d974:	9a04      	ldr	r2, [sp, #16]
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	b173      	cbz	r3, 800d99a <_strtod_l+0x92a>
 800d97c:	f7ff fb5c 	bl	800d038 <sulp>
 800d980:	4602      	mov	r2, r0
 800d982:	460b      	mov	r3, r1
 800d984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d988:	f7f2 fc80 	bl	800028c <__adddf3>
 800d98c:	4682      	mov	sl, r0
 800d98e:	468b      	mov	fp, r1
 800d990:	e755      	b.n	800d83e <_strtod_l+0x7ce>
 800d992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d994:	ea13 0f0a 	tst.w	r3, sl
 800d998:	e7e9      	b.n	800d96e <_strtod_l+0x8fe>
 800d99a:	f7ff fb4d 	bl	800d038 <sulp>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d9a6:	f7f2 fc6f 	bl	8000288 <__aeabi_dsub>
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	2300      	movs	r3, #0
 800d9ae:	4682      	mov	sl, r0
 800d9b0:	468b      	mov	fp, r1
 800d9b2:	f7f3 f889 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	f47f ae11 	bne.w	800d5de <_strtod_l+0x56e>
 800d9bc:	e73f      	b.n	800d83e <_strtod_l+0x7ce>
 800d9be:	4641      	mov	r1, r8
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f002 f9b0 	bl	800fd26 <__ratio>
 800d9c6:	ec57 6b10 	vmov	r6, r7, d0
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9d0:	ee10 0a10 	vmov	r0, s0
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	f7f3 f88b 	bl	8000af0 <__aeabi_dcmple>
 800d9da:	2800      	cmp	r0, #0
 800d9dc:	d077      	beq.n	800dace <_strtod_l+0xa5e>
 800d9de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d04a      	beq.n	800da7a <_strtod_l+0xa0a>
 800d9e4:	4b68      	ldr	r3, [pc, #416]	; (800db88 <_strtod_l+0xb18>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d9ec:	4f66      	ldr	r7, [pc, #408]	; (800db88 <_strtod_l+0xb18>)
 800d9ee:	2600      	movs	r6, #0
 800d9f0:	4b62      	ldr	r3, [pc, #392]	; (800db7c <_strtod_l+0xb0c>)
 800d9f2:	402b      	ands	r3, r5
 800d9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9f8:	4b64      	ldr	r3, [pc, #400]	; (800db8c <_strtod_l+0xb1c>)
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	f040 80ce 	bne.w	800db9c <_strtod_l+0xb2c>
 800da00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800da04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da08:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800da0c:	ec4b ab10 	vmov	d0, sl, fp
 800da10:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800da14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800da18:	f002 f8c0 	bl	800fb9c <__ulp>
 800da1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800da20:	ec53 2b10 	vmov	r2, r3, d0
 800da24:	f7f2 fde8 	bl	80005f8 <__aeabi_dmul>
 800da28:	4652      	mov	r2, sl
 800da2a:	465b      	mov	r3, fp
 800da2c:	f7f2 fc2e 	bl	800028c <__adddf3>
 800da30:	460b      	mov	r3, r1
 800da32:	4952      	ldr	r1, [pc, #328]	; (800db7c <_strtod_l+0xb0c>)
 800da34:	4a56      	ldr	r2, [pc, #344]	; (800db90 <_strtod_l+0xb20>)
 800da36:	4019      	ands	r1, r3
 800da38:	4291      	cmp	r1, r2
 800da3a:	4682      	mov	sl, r0
 800da3c:	d95b      	bls.n	800daf6 <_strtod_l+0xa86>
 800da3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800da44:	4293      	cmp	r3, r2
 800da46:	d103      	bne.n	800da50 <_strtod_l+0x9e0>
 800da48:	9b08      	ldr	r3, [sp, #32]
 800da4a:	3301      	adds	r3, #1
 800da4c:	f43f ad2e 	beq.w	800d4ac <_strtod_l+0x43c>
 800da50:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800db80 <_strtod_l+0xb10>
 800da54:	f04f 3aff 	mov.w	sl, #4294967295
 800da58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800da5a:	4648      	mov	r0, r9
 800da5c:	f001 fe06 	bl	800f66c <_Bfree>
 800da60:	9905      	ldr	r1, [sp, #20]
 800da62:	4648      	mov	r0, r9
 800da64:	f001 fe02 	bl	800f66c <_Bfree>
 800da68:	4641      	mov	r1, r8
 800da6a:	4648      	mov	r0, r9
 800da6c:	f001 fdfe 	bl	800f66c <_Bfree>
 800da70:	4621      	mov	r1, r4
 800da72:	4648      	mov	r0, r9
 800da74:	f001 fdfa 	bl	800f66c <_Bfree>
 800da78:	e619      	b.n	800d6ae <_strtod_l+0x63e>
 800da7a:	f1ba 0f00 	cmp.w	sl, #0
 800da7e:	d11a      	bne.n	800dab6 <_strtod_l+0xa46>
 800da80:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da84:	b9eb      	cbnz	r3, 800dac2 <_strtod_l+0xa52>
 800da86:	2200      	movs	r2, #0
 800da88:	4b3f      	ldr	r3, [pc, #252]	; (800db88 <_strtod_l+0xb18>)
 800da8a:	4630      	mov	r0, r6
 800da8c:	4639      	mov	r1, r7
 800da8e:	f7f3 f825 	bl	8000adc <__aeabi_dcmplt>
 800da92:	b9c8      	cbnz	r0, 800dac8 <_strtod_l+0xa58>
 800da94:	4630      	mov	r0, r6
 800da96:	4639      	mov	r1, r7
 800da98:	2200      	movs	r2, #0
 800da9a:	4b3e      	ldr	r3, [pc, #248]	; (800db94 <_strtod_l+0xb24>)
 800da9c:	f7f2 fdac 	bl	80005f8 <__aeabi_dmul>
 800daa0:	4606      	mov	r6, r0
 800daa2:	460f      	mov	r7, r1
 800daa4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800daa8:	9618      	str	r6, [sp, #96]	; 0x60
 800daaa:	9319      	str	r3, [sp, #100]	; 0x64
 800daac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800dab0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dab4:	e79c      	b.n	800d9f0 <_strtod_l+0x980>
 800dab6:	f1ba 0f01 	cmp.w	sl, #1
 800daba:	d102      	bne.n	800dac2 <_strtod_l+0xa52>
 800dabc:	2d00      	cmp	r5, #0
 800dabe:	f43f ad8e 	beq.w	800d5de <_strtod_l+0x56e>
 800dac2:	2200      	movs	r2, #0
 800dac4:	4b34      	ldr	r3, [pc, #208]	; (800db98 <_strtod_l+0xb28>)
 800dac6:	e78f      	b.n	800d9e8 <_strtod_l+0x978>
 800dac8:	2600      	movs	r6, #0
 800daca:	4f32      	ldr	r7, [pc, #200]	; (800db94 <_strtod_l+0xb24>)
 800dacc:	e7ea      	b.n	800daa4 <_strtod_l+0xa34>
 800dace:	4b31      	ldr	r3, [pc, #196]	; (800db94 <_strtod_l+0xb24>)
 800dad0:	4630      	mov	r0, r6
 800dad2:	4639      	mov	r1, r7
 800dad4:	2200      	movs	r2, #0
 800dad6:	f7f2 fd8f 	bl	80005f8 <__aeabi_dmul>
 800dada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dadc:	4606      	mov	r6, r0
 800dade:	460f      	mov	r7, r1
 800dae0:	b933      	cbnz	r3, 800daf0 <_strtod_l+0xa80>
 800dae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dae6:	9010      	str	r0, [sp, #64]	; 0x40
 800dae8:	9311      	str	r3, [sp, #68]	; 0x44
 800daea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800daee:	e7df      	b.n	800dab0 <_strtod_l+0xa40>
 800daf0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800daf4:	e7f9      	b.n	800daea <_strtod_l+0xa7a>
 800daf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dafa:	9b04      	ldr	r3, [sp, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1ab      	bne.n	800da58 <_strtod_l+0x9e8>
 800db00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db04:	0d1b      	lsrs	r3, r3, #20
 800db06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db08:	051b      	lsls	r3, r3, #20
 800db0a:	429a      	cmp	r2, r3
 800db0c:	465d      	mov	r5, fp
 800db0e:	d1a3      	bne.n	800da58 <_strtod_l+0x9e8>
 800db10:	4639      	mov	r1, r7
 800db12:	4630      	mov	r0, r6
 800db14:	f7f3 f820 	bl	8000b58 <__aeabi_d2iz>
 800db18:	f7f2 fd04 	bl	8000524 <__aeabi_i2d>
 800db1c:	460b      	mov	r3, r1
 800db1e:	4602      	mov	r2, r0
 800db20:	4639      	mov	r1, r7
 800db22:	4630      	mov	r0, r6
 800db24:	f7f2 fbb0 	bl	8000288 <__aeabi_dsub>
 800db28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db2a:	4606      	mov	r6, r0
 800db2c:	460f      	mov	r7, r1
 800db2e:	b933      	cbnz	r3, 800db3e <_strtod_l+0xace>
 800db30:	f1ba 0f00 	cmp.w	sl, #0
 800db34:	d103      	bne.n	800db3e <_strtod_l+0xace>
 800db36:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	d06d      	beq.n	800dc1a <_strtod_l+0xbaa>
 800db3e:	a30a      	add	r3, pc, #40	; (adr r3, 800db68 <_strtod_l+0xaf8>)
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	4630      	mov	r0, r6
 800db46:	4639      	mov	r1, r7
 800db48:	f7f2 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f47f acb8 	bne.w	800d4c2 <_strtod_l+0x452>
 800db52:	a307      	add	r3, pc, #28	; (adr r3, 800db70 <_strtod_l+0xb00>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	4630      	mov	r0, r6
 800db5a:	4639      	mov	r1, r7
 800db5c:	f7f2 ffdc 	bl	8000b18 <__aeabi_dcmpgt>
 800db60:	2800      	cmp	r0, #0
 800db62:	f43f af79 	beq.w	800da58 <_strtod_l+0x9e8>
 800db66:	e4ac      	b.n	800d4c2 <_strtod_l+0x452>
 800db68:	94a03595 	.word	0x94a03595
 800db6c:	3fdfffff 	.word	0x3fdfffff
 800db70:	35afe535 	.word	0x35afe535
 800db74:	3fe00000 	.word	0x3fe00000
 800db78:	000fffff 	.word	0x000fffff
 800db7c:	7ff00000 	.word	0x7ff00000
 800db80:	7fefffff 	.word	0x7fefffff
 800db84:	39500000 	.word	0x39500000
 800db88:	3ff00000 	.word	0x3ff00000
 800db8c:	7fe00000 	.word	0x7fe00000
 800db90:	7c9fffff 	.word	0x7c9fffff
 800db94:	3fe00000 	.word	0x3fe00000
 800db98:	bff00000 	.word	0xbff00000
 800db9c:	9b04      	ldr	r3, [sp, #16]
 800db9e:	b333      	cbz	r3, 800dbee <_strtod_l+0xb7e>
 800dba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dba2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dba6:	d822      	bhi.n	800dbee <_strtod_l+0xb7e>
 800dba8:	a327      	add	r3, pc, #156	; (adr r3, 800dc48 <_strtod_l+0xbd8>)
 800dbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbae:	4630      	mov	r0, r6
 800dbb0:	4639      	mov	r1, r7
 800dbb2:	f7f2 ff9d 	bl	8000af0 <__aeabi_dcmple>
 800dbb6:	b1a0      	cbz	r0, 800dbe2 <_strtod_l+0xb72>
 800dbb8:	4639      	mov	r1, r7
 800dbba:	4630      	mov	r0, r6
 800dbbc:	f7f2 fff4 	bl	8000ba8 <__aeabi_d2uiz>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	bf08      	it	eq
 800dbc4:	2001      	moveq	r0, #1
 800dbc6:	f7f2 fc9d 	bl	8000504 <__aeabi_ui2d>
 800dbca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbcc:	4606      	mov	r6, r0
 800dbce:	460f      	mov	r7, r1
 800dbd0:	bb03      	cbnz	r3, 800dc14 <_strtod_l+0xba4>
 800dbd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd6:	9012      	str	r0, [sp, #72]	; 0x48
 800dbd8:	9313      	str	r3, [sp, #76]	; 0x4c
 800dbda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800dbde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dbe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dbe6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dbea:	1a9b      	subs	r3, r3, r2
 800dbec:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbee:	ed9d 0b08 	vldr	d0, [sp, #32]
 800dbf2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dbf6:	f001 ffd1 	bl	800fb9c <__ulp>
 800dbfa:	4650      	mov	r0, sl
 800dbfc:	ec53 2b10 	vmov	r2, r3, d0
 800dc00:	4659      	mov	r1, fp
 800dc02:	f7f2 fcf9 	bl	80005f8 <__aeabi_dmul>
 800dc06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dc0a:	f7f2 fb3f 	bl	800028c <__adddf3>
 800dc0e:	4682      	mov	sl, r0
 800dc10:	468b      	mov	fp, r1
 800dc12:	e772      	b.n	800dafa <_strtod_l+0xa8a>
 800dc14:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800dc18:	e7df      	b.n	800dbda <_strtod_l+0xb6a>
 800dc1a:	a30d      	add	r3, pc, #52	; (adr r3, 800dc50 <_strtod_l+0xbe0>)
 800dc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc20:	f7f2 ff5c 	bl	8000adc <__aeabi_dcmplt>
 800dc24:	e79c      	b.n	800db60 <_strtod_l+0xaf0>
 800dc26:	2300      	movs	r3, #0
 800dc28:	930d      	str	r3, [sp, #52]	; 0x34
 800dc2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc2e:	6013      	str	r3, [r2, #0]
 800dc30:	f7ff ba61 	b.w	800d0f6 <_strtod_l+0x86>
 800dc34:	2b65      	cmp	r3, #101	; 0x65
 800dc36:	f04f 0200 	mov.w	r2, #0
 800dc3a:	f43f ab4e 	beq.w	800d2da <_strtod_l+0x26a>
 800dc3e:	2101      	movs	r1, #1
 800dc40:	4614      	mov	r4, r2
 800dc42:	9104      	str	r1, [sp, #16]
 800dc44:	f7ff bacb 	b.w	800d1de <_strtod_l+0x16e>
 800dc48:	ffc00000 	.word	0xffc00000
 800dc4c:	41dfffff 	.word	0x41dfffff
 800dc50:	94a03595 	.word	0x94a03595
 800dc54:	3fcfffff 	.word	0x3fcfffff

0800dc58 <_strtod_r>:
 800dc58:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <_strtod_r+0x18>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	b410      	push	{r4}
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	4c04      	ldr	r4, [pc, #16]	; (800dc74 <_strtod_r+0x1c>)
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	bf08      	it	eq
 800dc66:	4623      	moveq	r3, r4
 800dc68:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc6c:	f7ff ba00 	b.w	800d070 <_strtod_l>
 800dc70:	20000040 	.word	0x20000040
 800dc74:	200000a4 	.word	0x200000a4

0800dc78 <_strtol_l.isra.0>:
 800dc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	4680      	mov	r8, r0
 800dc7e:	4689      	mov	r9, r1
 800dc80:	4692      	mov	sl, r2
 800dc82:	461e      	mov	r6, r3
 800dc84:	460f      	mov	r7, r1
 800dc86:	463d      	mov	r5, r7
 800dc88:	9808      	ldr	r0, [sp, #32]
 800dc8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc8e:	f001 fc27 	bl	800f4e0 <__locale_ctype_ptr_l>
 800dc92:	4420      	add	r0, r4
 800dc94:	7843      	ldrb	r3, [r0, #1]
 800dc96:	f013 0308 	ands.w	r3, r3, #8
 800dc9a:	d132      	bne.n	800dd02 <_strtol_l.isra.0+0x8a>
 800dc9c:	2c2d      	cmp	r4, #45	; 0x2d
 800dc9e:	d132      	bne.n	800dd06 <_strtol_l.isra.0+0x8e>
 800dca0:	787c      	ldrb	r4, [r7, #1]
 800dca2:	1cbd      	adds	r5, r7, #2
 800dca4:	2201      	movs	r2, #1
 800dca6:	2e00      	cmp	r6, #0
 800dca8:	d05d      	beq.n	800dd66 <_strtol_l.isra.0+0xee>
 800dcaa:	2e10      	cmp	r6, #16
 800dcac:	d109      	bne.n	800dcc2 <_strtol_l.isra.0+0x4a>
 800dcae:	2c30      	cmp	r4, #48	; 0x30
 800dcb0:	d107      	bne.n	800dcc2 <_strtol_l.isra.0+0x4a>
 800dcb2:	782b      	ldrb	r3, [r5, #0]
 800dcb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dcb8:	2b58      	cmp	r3, #88	; 0x58
 800dcba:	d14f      	bne.n	800dd5c <_strtol_l.isra.0+0xe4>
 800dcbc:	786c      	ldrb	r4, [r5, #1]
 800dcbe:	2610      	movs	r6, #16
 800dcc0:	3502      	adds	r5, #2
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	bf14      	ite	ne
 800dcc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dcca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dcce:	2700      	movs	r7, #0
 800dcd0:	fbb1 fcf6 	udiv	ip, r1, r6
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dcda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dcde:	2b09      	cmp	r3, #9
 800dce0:	d817      	bhi.n	800dd12 <_strtol_l.isra.0+0x9a>
 800dce2:	461c      	mov	r4, r3
 800dce4:	42a6      	cmp	r6, r4
 800dce6:	dd23      	ble.n	800dd30 <_strtol_l.isra.0+0xb8>
 800dce8:	1c7b      	adds	r3, r7, #1
 800dcea:	d007      	beq.n	800dcfc <_strtol_l.isra.0+0x84>
 800dcec:	4584      	cmp	ip, r0
 800dcee:	d31c      	bcc.n	800dd2a <_strtol_l.isra.0+0xb2>
 800dcf0:	d101      	bne.n	800dcf6 <_strtol_l.isra.0+0x7e>
 800dcf2:	45a6      	cmp	lr, r4
 800dcf4:	db19      	blt.n	800dd2a <_strtol_l.isra.0+0xb2>
 800dcf6:	fb00 4006 	mla	r0, r0, r6, r4
 800dcfa:	2701      	movs	r7, #1
 800dcfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd00:	e7eb      	b.n	800dcda <_strtol_l.isra.0+0x62>
 800dd02:	462f      	mov	r7, r5
 800dd04:	e7bf      	b.n	800dc86 <_strtol_l.isra.0+0xe>
 800dd06:	2c2b      	cmp	r4, #43	; 0x2b
 800dd08:	bf04      	itt	eq
 800dd0a:	1cbd      	addeq	r5, r7, #2
 800dd0c:	787c      	ldrbeq	r4, [r7, #1]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	e7c9      	b.n	800dca6 <_strtol_l.isra.0+0x2e>
 800dd12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dd16:	2b19      	cmp	r3, #25
 800dd18:	d801      	bhi.n	800dd1e <_strtol_l.isra.0+0xa6>
 800dd1a:	3c37      	subs	r4, #55	; 0x37
 800dd1c:	e7e2      	b.n	800dce4 <_strtol_l.isra.0+0x6c>
 800dd1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dd22:	2b19      	cmp	r3, #25
 800dd24:	d804      	bhi.n	800dd30 <_strtol_l.isra.0+0xb8>
 800dd26:	3c57      	subs	r4, #87	; 0x57
 800dd28:	e7dc      	b.n	800dce4 <_strtol_l.isra.0+0x6c>
 800dd2a:	f04f 37ff 	mov.w	r7, #4294967295
 800dd2e:	e7e5      	b.n	800dcfc <_strtol_l.isra.0+0x84>
 800dd30:	1c7b      	adds	r3, r7, #1
 800dd32:	d108      	bne.n	800dd46 <_strtol_l.isra.0+0xce>
 800dd34:	2322      	movs	r3, #34	; 0x22
 800dd36:	f8c8 3000 	str.w	r3, [r8]
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	f1ba 0f00 	cmp.w	sl, #0
 800dd40:	d107      	bne.n	800dd52 <_strtol_l.isra.0+0xda>
 800dd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd46:	b102      	cbz	r2, 800dd4a <_strtol_l.isra.0+0xd2>
 800dd48:	4240      	negs	r0, r0
 800dd4a:	f1ba 0f00 	cmp.w	sl, #0
 800dd4e:	d0f8      	beq.n	800dd42 <_strtol_l.isra.0+0xca>
 800dd50:	b10f      	cbz	r7, 800dd56 <_strtol_l.isra.0+0xde>
 800dd52:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd56:	f8ca 9000 	str.w	r9, [sl]
 800dd5a:	e7f2      	b.n	800dd42 <_strtol_l.isra.0+0xca>
 800dd5c:	2430      	movs	r4, #48	; 0x30
 800dd5e:	2e00      	cmp	r6, #0
 800dd60:	d1af      	bne.n	800dcc2 <_strtol_l.isra.0+0x4a>
 800dd62:	2608      	movs	r6, #8
 800dd64:	e7ad      	b.n	800dcc2 <_strtol_l.isra.0+0x4a>
 800dd66:	2c30      	cmp	r4, #48	; 0x30
 800dd68:	d0a3      	beq.n	800dcb2 <_strtol_l.isra.0+0x3a>
 800dd6a:	260a      	movs	r6, #10
 800dd6c:	e7a9      	b.n	800dcc2 <_strtol_l.isra.0+0x4a>
	...

0800dd70 <_strtol_r>:
 800dd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd72:	4c06      	ldr	r4, [pc, #24]	; (800dd8c <_strtol_r+0x1c>)
 800dd74:	4d06      	ldr	r5, [pc, #24]	; (800dd90 <_strtol_r+0x20>)
 800dd76:	6824      	ldr	r4, [r4, #0]
 800dd78:	6a24      	ldr	r4, [r4, #32]
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	bf08      	it	eq
 800dd7e:	462c      	moveq	r4, r5
 800dd80:	9400      	str	r4, [sp, #0]
 800dd82:	f7ff ff79 	bl	800dc78 <_strtol_l.isra.0>
 800dd86:	b003      	add	sp, #12
 800dd88:	bd30      	pop	{r4, r5, pc}
 800dd8a:	bf00      	nop
 800dd8c:	20000040 	.word	0x20000040
 800dd90:	200000a4 	.word	0x200000a4

0800dd94 <__swbuf_r>:
 800dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd96:	460e      	mov	r6, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	b118      	cbz	r0, 800dda6 <__swbuf_r+0x12>
 800dd9e:	6983      	ldr	r3, [r0, #24]
 800dda0:	b90b      	cbnz	r3, 800dda6 <__swbuf_r+0x12>
 800dda2:	f000 ffed 	bl	800ed80 <__sinit>
 800dda6:	4b21      	ldr	r3, [pc, #132]	; (800de2c <__swbuf_r+0x98>)
 800dda8:	429c      	cmp	r4, r3
 800ddaa:	d12a      	bne.n	800de02 <__swbuf_r+0x6e>
 800ddac:	686c      	ldr	r4, [r5, #4]
 800ddae:	69a3      	ldr	r3, [r4, #24]
 800ddb0:	60a3      	str	r3, [r4, #8]
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	071a      	lsls	r2, r3, #28
 800ddb6:	d52e      	bpl.n	800de16 <__swbuf_r+0x82>
 800ddb8:	6923      	ldr	r3, [r4, #16]
 800ddba:	b363      	cbz	r3, 800de16 <__swbuf_r+0x82>
 800ddbc:	6923      	ldr	r3, [r4, #16]
 800ddbe:	6820      	ldr	r0, [r4, #0]
 800ddc0:	1ac0      	subs	r0, r0, r3
 800ddc2:	6963      	ldr	r3, [r4, #20]
 800ddc4:	b2f6      	uxtb	r6, r6
 800ddc6:	4283      	cmp	r3, r0
 800ddc8:	4637      	mov	r7, r6
 800ddca:	dc04      	bgt.n	800ddd6 <__swbuf_r+0x42>
 800ddcc:	4621      	mov	r1, r4
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 ff6c 	bl	800ecac <_fflush_r>
 800ddd4:	bb28      	cbnz	r0, 800de22 <__swbuf_r+0x8e>
 800ddd6:	68a3      	ldr	r3, [r4, #8]
 800ddd8:	3b01      	subs	r3, #1
 800ddda:	60a3      	str	r3, [r4, #8]
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	6022      	str	r2, [r4, #0]
 800dde2:	701e      	strb	r6, [r3, #0]
 800dde4:	6963      	ldr	r3, [r4, #20]
 800dde6:	3001      	adds	r0, #1
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d004      	beq.n	800ddf6 <__swbuf_r+0x62>
 800ddec:	89a3      	ldrh	r3, [r4, #12]
 800ddee:	07db      	lsls	r3, r3, #31
 800ddf0:	d519      	bpl.n	800de26 <__swbuf_r+0x92>
 800ddf2:	2e0a      	cmp	r6, #10
 800ddf4:	d117      	bne.n	800de26 <__swbuf_r+0x92>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f000 ff57 	bl	800ecac <_fflush_r>
 800ddfe:	b190      	cbz	r0, 800de26 <__swbuf_r+0x92>
 800de00:	e00f      	b.n	800de22 <__swbuf_r+0x8e>
 800de02:	4b0b      	ldr	r3, [pc, #44]	; (800de30 <__swbuf_r+0x9c>)
 800de04:	429c      	cmp	r4, r3
 800de06:	d101      	bne.n	800de0c <__swbuf_r+0x78>
 800de08:	68ac      	ldr	r4, [r5, #8]
 800de0a:	e7d0      	b.n	800ddae <__swbuf_r+0x1a>
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <__swbuf_r+0xa0>)
 800de0e:	429c      	cmp	r4, r3
 800de10:	bf08      	it	eq
 800de12:	68ec      	ldreq	r4, [r5, #12]
 800de14:	e7cb      	b.n	800ddae <__swbuf_r+0x1a>
 800de16:	4621      	mov	r1, r4
 800de18:	4628      	mov	r0, r5
 800de1a:	f000 f80d 	bl	800de38 <__swsetup_r>
 800de1e:	2800      	cmp	r0, #0
 800de20:	d0cc      	beq.n	800ddbc <__swbuf_r+0x28>
 800de22:	f04f 37ff 	mov.w	r7, #4294967295
 800de26:	4638      	mov	r0, r7
 800de28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de2a:	bf00      	nop
 800de2c:	08010a68 	.word	0x08010a68
 800de30:	08010a88 	.word	0x08010a88
 800de34:	08010a48 	.word	0x08010a48

0800de38 <__swsetup_r>:
 800de38:	4b32      	ldr	r3, [pc, #200]	; (800df04 <__swsetup_r+0xcc>)
 800de3a:	b570      	push	{r4, r5, r6, lr}
 800de3c:	681d      	ldr	r5, [r3, #0]
 800de3e:	4606      	mov	r6, r0
 800de40:	460c      	mov	r4, r1
 800de42:	b125      	cbz	r5, 800de4e <__swsetup_r+0x16>
 800de44:	69ab      	ldr	r3, [r5, #24]
 800de46:	b913      	cbnz	r3, 800de4e <__swsetup_r+0x16>
 800de48:	4628      	mov	r0, r5
 800de4a:	f000 ff99 	bl	800ed80 <__sinit>
 800de4e:	4b2e      	ldr	r3, [pc, #184]	; (800df08 <__swsetup_r+0xd0>)
 800de50:	429c      	cmp	r4, r3
 800de52:	d10f      	bne.n	800de74 <__swsetup_r+0x3c>
 800de54:	686c      	ldr	r4, [r5, #4]
 800de56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	0715      	lsls	r5, r2, #28
 800de5e:	d42c      	bmi.n	800deba <__swsetup_r+0x82>
 800de60:	06d0      	lsls	r0, r2, #27
 800de62:	d411      	bmi.n	800de88 <__swsetup_r+0x50>
 800de64:	2209      	movs	r2, #9
 800de66:	6032      	str	r2, [r6, #0]
 800de68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6c:	81a3      	strh	r3, [r4, #12]
 800de6e:	f04f 30ff 	mov.w	r0, #4294967295
 800de72:	e03e      	b.n	800def2 <__swsetup_r+0xba>
 800de74:	4b25      	ldr	r3, [pc, #148]	; (800df0c <__swsetup_r+0xd4>)
 800de76:	429c      	cmp	r4, r3
 800de78:	d101      	bne.n	800de7e <__swsetup_r+0x46>
 800de7a:	68ac      	ldr	r4, [r5, #8]
 800de7c:	e7eb      	b.n	800de56 <__swsetup_r+0x1e>
 800de7e:	4b24      	ldr	r3, [pc, #144]	; (800df10 <__swsetup_r+0xd8>)
 800de80:	429c      	cmp	r4, r3
 800de82:	bf08      	it	eq
 800de84:	68ec      	ldreq	r4, [r5, #12]
 800de86:	e7e6      	b.n	800de56 <__swsetup_r+0x1e>
 800de88:	0751      	lsls	r1, r2, #29
 800de8a:	d512      	bpl.n	800deb2 <__swsetup_r+0x7a>
 800de8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de8e:	b141      	cbz	r1, 800dea2 <__swsetup_r+0x6a>
 800de90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <__swsetup_r+0x66>
 800de98:	4630      	mov	r0, r6
 800de9a:	f001 ffc1 	bl	800fe20 <_free_r>
 800de9e:	2300      	movs	r3, #0
 800dea0:	6363      	str	r3, [r4, #52]	; 0x34
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	2300      	movs	r3, #0
 800deac:	6063      	str	r3, [r4, #4]
 800deae:	6923      	ldr	r3, [r4, #16]
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	89a3      	ldrh	r3, [r4, #12]
 800deb4:	f043 0308 	orr.w	r3, r3, #8
 800deb8:	81a3      	strh	r3, [r4, #12]
 800deba:	6923      	ldr	r3, [r4, #16]
 800debc:	b94b      	cbnz	r3, 800ded2 <__swsetup_r+0x9a>
 800debe:	89a3      	ldrh	r3, [r4, #12]
 800dec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dec8:	d003      	beq.n	800ded2 <__swsetup_r+0x9a>
 800deca:	4621      	mov	r1, r4
 800decc:	4630      	mov	r0, r6
 800dece:	f001 fb3f 	bl	800f550 <__smakebuf_r>
 800ded2:	89a2      	ldrh	r2, [r4, #12]
 800ded4:	f012 0301 	ands.w	r3, r2, #1
 800ded8:	d00c      	beq.n	800def4 <__swsetup_r+0xbc>
 800deda:	2300      	movs	r3, #0
 800dedc:	60a3      	str	r3, [r4, #8]
 800dede:	6963      	ldr	r3, [r4, #20]
 800dee0:	425b      	negs	r3, r3
 800dee2:	61a3      	str	r3, [r4, #24]
 800dee4:	6923      	ldr	r3, [r4, #16]
 800dee6:	b953      	cbnz	r3, 800defe <__swsetup_r+0xc6>
 800dee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800def0:	d1ba      	bne.n	800de68 <__swsetup_r+0x30>
 800def2:	bd70      	pop	{r4, r5, r6, pc}
 800def4:	0792      	lsls	r2, r2, #30
 800def6:	bf58      	it	pl
 800def8:	6963      	ldrpl	r3, [r4, #20]
 800defa:	60a3      	str	r3, [r4, #8]
 800defc:	e7f2      	b.n	800dee4 <__swsetup_r+0xac>
 800defe:	2000      	movs	r0, #0
 800df00:	e7f7      	b.n	800def2 <__swsetup_r+0xba>
 800df02:	bf00      	nop
 800df04:	20000040 	.word	0x20000040
 800df08:	08010a68 	.word	0x08010a68
 800df0c:	08010a88 	.word	0x08010a88
 800df10:	08010a48 	.word	0x08010a48

0800df14 <quorem>:
 800df14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df18:	6903      	ldr	r3, [r0, #16]
 800df1a:	690c      	ldr	r4, [r1, #16]
 800df1c:	42a3      	cmp	r3, r4
 800df1e:	4680      	mov	r8, r0
 800df20:	f2c0 8082 	blt.w	800e028 <quorem+0x114>
 800df24:	3c01      	subs	r4, #1
 800df26:	f101 0714 	add.w	r7, r1, #20
 800df2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800df2e:	f100 0614 	add.w	r6, r0, #20
 800df32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800df36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800df3a:	eb06 030c 	add.w	r3, r6, ip
 800df3e:	3501      	adds	r5, #1
 800df40:	eb07 090c 	add.w	r9, r7, ip
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	fbb0 f5f5 	udiv	r5, r0, r5
 800df4a:	b395      	cbz	r5, 800dfb2 <quorem+0x9e>
 800df4c:	f04f 0a00 	mov.w	sl, #0
 800df50:	4638      	mov	r0, r7
 800df52:	46b6      	mov	lr, r6
 800df54:	46d3      	mov	fp, sl
 800df56:	f850 2b04 	ldr.w	r2, [r0], #4
 800df5a:	b293      	uxth	r3, r2
 800df5c:	fb05 a303 	mla	r3, r5, r3, sl
 800df60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df64:	b29b      	uxth	r3, r3
 800df66:	ebab 0303 	sub.w	r3, fp, r3
 800df6a:	0c12      	lsrs	r2, r2, #16
 800df6c:	f8de b000 	ldr.w	fp, [lr]
 800df70:	fb05 a202 	mla	r2, r5, r2, sl
 800df74:	fa13 f38b 	uxtah	r3, r3, fp
 800df78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800df7c:	fa1f fb82 	uxth.w	fp, r2
 800df80:	f8de 2000 	ldr.w	r2, [lr]
 800df84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800df88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df92:	4581      	cmp	r9, r0
 800df94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800df98:	f84e 3b04 	str.w	r3, [lr], #4
 800df9c:	d2db      	bcs.n	800df56 <quorem+0x42>
 800df9e:	f856 300c 	ldr.w	r3, [r6, ip]
 800dfa2:	b933      	cbnz	r3, 800dfb2 <quorem+0x9e>
 800dfa4:	9b01      	ldr	r3, [sp, #4]
 800dfa6:	3b04      	subs	r3, #4
 800dfa8:	429e      	cmp	r6, r3
 800dfaa:	461a      	mov	r2, r3
 800dfac:	d330      	bcc.n	800e010 <quorem+0xfc>
 800dfae:	f8c8 4010 	str.w	r4, [r8, #16]
 800dfb2:	4640      	mov	r0, r8
 800dfb4:	f001 fd7a 	bl	800faac <__mcmp>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	db25      	blt.n	800e008 <quorem+0xf4>
 800dfbc:	3501      	adds	r5, #1
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	f04f 0c00 	mov.w	ip, #0
 800dfc4:	f857 2b04 	ldr.w	r2, [r7], #4
 800dfc8:	f8d0 e000 	ldr.w	lr, [r0]
 800dfcc:	b293      	uxth	r3, r2
 800dfce:	ebac 0303 	sub.w	r3, ip, r3
 800dfd2:	0c12      	lsrs	r2, r2, #16
 800dfd4:	fa13 f38e 	uxtah	r3, r3, lr
 800dfd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfe6:	45b9      	cmp	r9, r7
 800dfe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfec:	f840 3b04 	str.w	r3, [r0], #4
 800dff0:	d2e8      	bcs.n	800dfc4 <quorem+0xb0>
 800dff2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dff6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dffa:	b92a      	cbnz	r2, 800e008 <quorem+0xf4>
 800dffc:	3b04      	subs	r3, #4
 800dffe:	429e      	cmp	r6, r3
 800e000:	461a      	mov	r2, r3
 800e002:	d30b      	bcc.n	800e01c <quorem+0x108>
 800e004:	f8c8 4010 	str.w	r4, [r8, #16]
 800e008:	4628      	mov	r0, r5
 800e00a:	b003      	add	sp, #12
 800e00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e010:	6812      	ldr	r2, [r2, #0]
 800e012:	3b04      	subs	r3, #4
 800e014:	2a00      	cmp	r2, #0
 800e016:	d1ca      	bne.n	800dfae <quorem+0x9a>
 800e018:	3c01      	subs	r4, #1
 800e01a:	e7c5      	b.n	800dfa8 <quorem+0x94>
 800e01c:	6812      	ldr	r2, [r2, #0]
 800e01e:	3b04      	subs	r3, #4
 800e020:	2a00      	cmp	r2, #0
 800e022:	d1ef      	bne.n	800e004 <quorem+0xf0>
 800e024:	3c01      	subs	r4, #1
 800e026:	e7ea      	b.n	800dffe <quorem+0xea>
 800e028:	2000      	movs	r0, #0
 800e02a:	e7ee      	b.n	800e00a <quorem+0xf6>
 800e02c:	0000      	movs	r0, r0
	...

0800e030 <_dtoa_r>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	ec57 6b10 	vmov	r6, r7, d0
 800e038:	b097      	sub	sp, #92	; 0x5c
 800e03a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e03c:	9106      	str	r1, [sp, #24]
 800e03e:	4604      	mov	r4, r0
 800e040:	920b      	str	r2, [sp, #44]	; 0x2c
 800e042:	9312      	str	r3, [sp, #72]	; 0x48
 800e044:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e048:	e9cd 6700 	strd	r6, r7, [sp]
 800e04c:	b93d      	cbnz	r5, 800e05e <_dtoa_r+0x2e>
 800e04e:	2010      	movs	r0, #16
 800e050:	f001 fabe 	bl	800f5d0 <malloc>
 800e054:	6260      	str	r0, [r4, #36]	; 0x24
 800e056:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e05a:	6005      	str	r5, [r0, #0]
 800e05c:	60c5      	str	r5, [r0, #12]
 800e05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e060:	6819      	ldr	r1, [r3, #0]
 800e062:	b151      	cbz	r1, 800e07a <_dtoa_r+0x4a>
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	604a      	str	r2, [r1, #4]
 800e068:	2301      	movs	r3, #1
 800e06a:	4093      	lsls	r3, r2
 800e06c:	608b      	str	r3, [r1, #8]
 800e06e:	4620      	mov	r0, r4
 800e070:	f001 fafc 	bl	800f66c <_Bfree>
 800e074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e076:	2200      	movs	r2, #0
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	1e3b      	subs	r3, r7, #0
 800e07c:	bfbb      	ittet	lt
 800e07e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e082:	9301      	strlt	r3, [sp, #4]
 800e084:	2300      	movge	r3, #0
 800e086:	2201      	movlt	r2, #1
 800e088:	bfac      	ite	ge
 800e08a:	f8c8 3000 	strge.w	r3, [r8]
 800e08e:	f8c8 2000 	strlt.w	r2, [r8]
 800e092:	4baf      	ldr	r3, [pc, #700]	; (800e350 <_dtoa_r+0x320>)
 800e094:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e098:	ea33 0308 	bics.w	r3, r3, r8
 800e09c:	d114      	bne.n	800e0c8 <_dtoa_r+0x98>
 800e09e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e0a4:	6013      	str	r3, [r2, #0]
 800e0a6:	9b00      	ldr	r3, [sp, #0]
 800e0a8:	b923      	cbnz	r3, 800e0b4 <_dtoa_r+0x84>
 800e0aa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f000 8542 	beq.w	800eb38 <_dtoa_r+0xb08>
 800e0b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0b6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e364 <_dtoa_r+0x334>
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 8544 	beq.w	800eb48 <_dtoa_r+0xb18>
 800e0c0:	f10b 0303 	add.w	r3, fp, #3
 800e0c4:	f000 bd3e 	b.w	800eb44 <_dtoa_r+0xb14>
 800e0c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	4639      	mov	r1, r7
 800e0d4:	f7f2 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d8:	4681      	mov	r9, r0
 800e0da:	b168      	cbz	r0, 800e0f8 <_dtoa_r+0xc8>
 800e0dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e0de:	2301      	movs	r3, #1
 800e0e0:	6013      	str	r3, [r2, #0]
 800e0e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 8524 	beq.w	800eb32 <_dtoa_r+0xb02>
 800e0ea:	4b9a      	ldr	r3, [pc, #616]	; (800e354 <_dtoa_r+0x324>)
 800e0ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e0ee:	f103 3bff 	add.w	fp, r3, #4294967295
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	f000 bd28 	b.w	800eb48 <_dtoa_r+0xb18>
 800e0f8:	aa14      	add	r2, sp, #80	; 0x50
 800e0fa:	a915      	add	r1, sp, #84	; 0x54
 800e0fc:	ec47 6b10 	vmov	d0, r6, r7
 800e100:	4620      	mov	r0, r4
 800e102:	f001 fdc1 	bl	800fc88 <__d2b>
 800e106:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e10a:	9004      	str	r0, [sp, #16]
 800e10c:	2d00      	cmp	r5, #0
 800e10e:	d07c      	beq.n	800e20a <_dtoa_r+0x1da>
 800e110:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e114:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e118:	46b2      	mov	sl, r6
 800e11a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e122:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e126:	2200      	movs	r2, #0
 800e128:	4b8b      	ldr	r3, [pc, #556]	; (800e358 <_dtoa_r+0x328>)
 800e12a:	4650      	mov	r0, sl
 800e12c:	4659      	mov	r1, fp
 800e12e:	f7f2 f8ab 	bl	8000288 <__aeabi_dsub>
 800e132:	a381      	add	r3, pc, #516	; (adr r3, 800e338 <_dtoa_r+0x308>)
 800e134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e138:	f7f2 fa5e 	bl	80005f8 <__aeabi_dmul>
 800e13c:	a380      	add	r3, pc, #512	; (adr r3, 800e340 <_dtoa_r+0x310>)
 800e13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e142:	f7f2 f8a3 	bl	800028c <__adddf3>
 800e146:	4606      	mov	r6, r0
 800e148:	4628      	mov	r0, r5
 800e14a:	460f      	mov	r7, r1
 800e14c:	f7f2 f9ea 	bl	8000524 <__aeabi_i2d>
 800e150:	a37d      	add	r3, pc, #500	; (adr r3, 800e348 <_dtoa_r+0x318>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	f7f2 fa4f 	bl	80005f8 <__aeabi_dmul>
 800e15a:	4602      	mov	r2, r0
 800e15c:	460b      	mov	r3, r1
 800e15e:	4630      	mov	r0, r6
 800e160:	4639      	mov	r1, r7
 800e162:	f7f2 f893 	bl	800028c <__adddf3>
 800e166:	4606      	mov	r6, r0
 800e168:	460f      	mov	r7, r1
 800e16a:	f7f2 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800e16e:	2200      	movs	r2, #0
 800e170:	4682      	mov	sl, r0
 800e172:	2300      	movs	r3, #0
 800e174:	4630      	mov	r0, r6
 800e176:	4639      	mov	r1, r7
 800e178:	f7f2 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800e17c:	b148      	cbz	r0, 800e192 <_dtoa_r+0x162>
 800e17e:	4650      	mov	r0, sl
 800e180:	f7f2 f9d0 	bl	8000524 <__aeabi_i2d>
 800e184:	4632      	mov	r2, r6
 800e186:	463b      	mov	r3, r7
 800e188:	f7f2 fc9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e18c:	b908      	cbnz	r0, 800e192 <_dtoa_r+0x162>
 800e18e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e192:	f1ba 0f16 	cmp.w	sl, #22
 800e196:	d859      	bhi.n	800e24c <_dtoa_r+0x21c>
 800e198:	4970      	ldr	r1, [pc, #448]	; (800e35c <_dtoa_r+0x32c>)
 800e19a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e19e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a6:	f7f2 fcb7 	bl	8000b18 <__aeabi_dcmpgt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d050      	beq.n	800e250 <_dtoa_r+0x220>
 800e1ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1b8:	1b5d      	subs	r5, r3, r5
 800e1ba:	f1b5 0801 	subs.w	r8, r5, #1
 800e1be:	bf49      	itett	mi
 800e1c0:	f1c5 0301 	rsbmi	r3, r5, #1
 800e1c4:	2300      	movpl	r3, #0
 800e1c6:	9305      	strmi	r3, [sp, #20]
 800e1c8:	f04f 0800 	movmi.w	r8, #0
 800e1cc:	bf58      	it	pl
 800e1ce:	9305      	strpl	r3, [sp, #20]
 800e1d0:	f1ba 0f00 	cmp.w	sl, #0
 800e1d4:	db3e      	blt.n	800e254 <_dtoa_r+0x224>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	44d0      	add	r8, sl
 800e1da:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e1de:	9307      	str	r3, [sp, #28]
 800e1e0:	9b06      	ldr	r3, [sp, #24]
 800e1e2:	2b09      	cmp	r3, #9
 800e1e4:	f200 8090 	bhi.w	800e308 <_dtoa_r+0x2d8>
 800e1e8:	2b05      	cmp	r3, #5
 800e1ea:	bfc4      	itt	gt
 800e1ec:	3b04      	subgt	r3, #4
 800e1ee:	9306      	strgt	r3, [sp, #24]
 800e1f0:	9b06      	ldr	r3, [sp, #24]
 800e1f2:	f1a3 0302 	sub.w	r3, r3, #2
 800e1f6:	bfcc      	ite	gt
 800e1f8:	2500      	movgt	r5, #0
 800e1fa:	2501      	movle	r5, #1
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	f200 808f 	bhi.w	800e320 <_dtoa_r+0x2f0>
 800e202:	e8df f003 	tbb	[pc, r3]
 800e206:	7f7d      	.short	0x7f7d
 800e208:	7131      	.short	0x7131
 800e20a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e20e:	441d      	add	r5, r3
 800e210:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e214:	2820      	cmp	r0, #32
 800e216:	dd13      	ble.n	800e240 <_dtoa_r+0x210>
 800e218:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e21c:	9b00      	ldr	r3, [sp, #0]
 800e21e:	fa08 f800 	lsl.w	r8, r8, r0
 800e222:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e226:	fa23 f000 	lsr.w	r0, r3, r0
 800e22a:	ea48 0000 	orr.w	r0, r8, r0
 800e22e:	f7f2 f969 	bl	8000504 <__aeabi_ui2d>
 800e232:	2301      	movs	r3, #1
 800e234:	4682      	mov	sl, r0
 800e236:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e23a:	3d01      	subs	r5, #1
 800e23c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e23e:	e772      	b.n	800e126 <_dtoa_r+0xf6>
 800e240:	9b00      	ldr	r3, [sp, #0]
 800e242:	f1c0 0020 	rsb	r0, r0, #32
 800e246:	fa03 f000 	lsl.w	r0, r3, r0
 800e24a:	e7f0      	b.n	800e22e <_dtoa_r+0x1fe>
 800e24c:	2301      	movs	r3, #1
 800e24e:	e7b1      	b.n	800e1b4 <_dtoa_r+0x184>
 800e250:	900f      	str	r0, [sp, #60]	; 0x3c
 800e252:	e7b0      	b.n	800e1b6 <_dtoa_r+0x186>
 800e254:	9b05      	ldr	r3, [sp, #20]
 800e256:	eba3 030a 	sub.w	r3, r3, sl
 800e25a:	9305      	str	r3, [sp, #20]
 800e25c:	f1ca 0300 	rsb	r3, sl, #0
 800e260:	9307      	str	r3, [sp, #28]
 800e262:	2300      	movs	r3, #0
 800e264:	930e      	str	r3, [sp, #56]	; 0x38
 800e266:	e7bb      	b.n	800e1e0 <_dtoa_r+0x1b0>
 800e268:	2301      	movs	r3, #1
 800e26a:	930a      	str	r3, [sp, #40]	; 0x28
 800e26c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e26e:	2b00      	cmp	r3, #0
 800e270:	dd59      	ble.n	800e326 <_dtoa_r+0x2f6>
 800e272:	9302      	str	r3, [sp, #8]
 800e274:	4699      	mov	r9, r3
 800e276:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e278:	2200      	movs	r2, #0
 800e27a:	6072      	str	r2, [r6, #4]
 800e27c:	2204      	movs	r2, #4
 800e27e:	f102 0014 	add.w	r0, r2, #20
 800e282:	4298      	cmp	r0, r3
 800e284:	6871      	ldr	r1, [r6, #4]
 800e286:	d953      	bls.n	800e330 <_dtoa_r+0x300>
 800e288:	4620      	mov	r0, r4
 800e28a:	f001 f9bb 	bl	800f604 <_Balloc>
 800e28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e290:	6030      	str	r0, [r6, #0]
 800e292:	f1b9 0f0e 	cmp.w	r9, #14
 800e296:	f8d3 b000 	ldr.w	fp, [r3]
 800e29a:	f200 80e6 	bhi.w	800e46a <_dtoa_r+0x43a>
 800e29e:	2d00      	cmp	r5, #0
 800e2a0:	f000 80e3 	beq.w	800e46a <_dtoa_r+0x43a>
 800e2a4:	ed9d 7b00 	vldr	d7, [sp]
 800e2a8:	f1ba 0f00 	cmp.w	sl, #0
 800e2ac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e2b0:	dd74      	ble.n	800e39c <_dtoa_r+0x36c>
 800e2b2:	4a2a      	ldr	r2, [pc, #168]	; (800e35c <_dtoa_r+0x32c>)
 800e2b4:	f00a 030f 	and.w	r3, sl, #15
 800e2b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e2bc:	ed93 7b00 	vldr	d7, [r3]
 800e2c0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e2c4:	06f0      	lsls	r0, r6, #27
 800e2c6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e2ca:	d565      	bpl.n	800e398 <_dtoa_r+0x368>
 800e2cc:	4b24      	ldr	r3, [pc, #144]	; (800e360 <_dtoa_r+0x330>)
 800e2ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2d6:	f7f2 fab9 	bl	800084c <__aeabi_ddiv>
 800e2da:	e9cd 0100 	strd	r0, r1, [sp]
 800e2de:	f006 060f 	and.w	r6, r6, #15
 800e2e2:	2503      	movs	r5, #3
 800e2e4:	4f1e      	ldr	r7, [pc, #120]	; (800e360 <_dtoa_r+0x330>)
 800e2e6:	e04c      	b.n	800e382 <_dtoa_r+0x352>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800e2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2ee:	4453      	add	r3, sl
 800e2f0:	f103 0901 	add.w	r9, r3, #1
 800e2f4:	9302      	str	r3, [sp, #8]
 800e2f6:	464b      	mov	r3, r9
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	bfb8      	it	lt
 800e2fc:	2301      	movlt	r3, #1
 800e2fe:	e7ba      	b.n	800e276 <_dtoa_r+0x246>
 800e300:	2300      	movs	r3, #0
 800e302:	e7b2      	b.n	800e26a <_dtoa_r+0x23a>
 800e304:	2300      	movs	r3, #0
 800e306:	e7f0      	b.n	800e2ea <_dtoa_r+0x2ba>
 800e308:	2501      	movs	r5, #1
 800e30a:	2300      	movs	r3, #0
 800e30c:	9306      	str	r3, [sp, #24]
 800e30e:	950a      	str	r5, [sp, #40]	; 0x28
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
 800e314:	9302      	str	r3, [sp, #8]
 800e316:	4699      	mov	r9, r3
 800e318:	2200      	movs	r2, #0
 800e31a:	2312      	movs	r3, #18
 800e31c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e31e:	e7aa      	b.n	800e276 <_dtoa_r+0x246>
 800e320:	2301      	movs	r3, #1
 800e322:	930a      	str	r3, [sp, #40]	; 0x28
 800e324:	e7f4      	b.n	800e310 <_dtoa_r+0x2e0>
 800e326:	2301      	movs	r3, #1
 800e328:	9302      	str	r3, [sp, #8]
 800e32a:	4699      	mov	r9, r3
 800e32c:	461a      	mov	r2, r3
 800e32e:	e7f5      	b.n	800e31c <_dtoa_r+0x2ec>
 800e330:	3101      	adds	r1, #1
 800e332:	6071      	str	r1, [r6, #4]
 800e334:	0052      	lsls	r2, r2, #1
 800e336:	e7a2      	b.n	800e27e <_dtoa_r+0x24e>
 800e338:	636f4361 	.word	0x636f4361
 800e33c:	3fd287a7 	.word	0x3fd287a7
 800e340:	8b60c8b3 	.word	0x8b60c8b3
 800e344:	3fc68a28 	.word	0x3fc68a28
 800e348:	509f79fb 	.word	0x509f79fb
 800e34c:	3fd34413 	.word	0x3fd34413
 800e350:	7ff00000 	.word	0x7ff00000
 800e354:	080109bd 	.word	0x080109bd
 800e358:	3ff80000 	.word	0x3ff80000
 800e35c:	08010ae0 	.word	0x08010ae0
 800e360:	08010ab8 	.word	0x08010ab8
 800e364:	08010a41 	.word	0x08010a41
 800e368:	07f1      	lsls	r1, r6, #31
 800e36a:	d508      	bpl.n	800e37e <_dtoa_r+0x34e>
 800e36c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e374:	f7f2 f940 	bl	80005f8 <__aeabi_dmul>
 800e378:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e37c:	3501      	adds	r5, #1
 800e37e:	1076      	asrs	r6, r6, #1
 800e380:	3708      	adds	r7, #8
 800e382:	2e00      	cmp	r6, #0
 800e384:	d1f0      	bne.n	800e368 <_dtoa_r+0x338>
 800e386:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e38a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e38e:	f7f2 fa5d 	bl	800084c <__aeabi_ddiv>
 800e392:	e9cd 0100 	strd	r0, r1, [sp]
 800e396:	e01a      	b.n	800e3ce <_dtoa_r+0x39e>
 800e398:	2502      	movs	r5, #2
 800e39a:	e7a3      	b.n	800e2e4 <_dtoa_r+0x2b4>
 800e39c:	f000 80a0 	beq.w	800e4e0 <_dtoa_r+0x4b0>
 800e3a0:	f1ca 0600 	rsb	r6, sl, #0
 800e3a4:	4b9f      	ldr	r3, [pc, #636]	; (800e624 <_dtoa_r+0x5f4>)
 800e3a6:	4fa0      	ldr	r7, [pc, #640]	; (800e628 <_dtoa_r+0x5f8>)
 800e3a8:	f006 020f 	and.w	r2, r6, #15
 800e3ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e3b8:	f7f2 f91e 	bl	80005f8 <__aeabi_dmul>
 800e3bc:	e9cd 0100 	strd	r0, r1, [sp]
 800e3c0:	1136      	asrs	r6, r6, #4
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	2502      	movs	r5, #2
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	d17f      	bne.n	800e4ca <_dtoa_r+0x49a>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1e1      	bne.n	800e392 <_dtoa_r+0x362>
 800e3ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 8087 	beq.w	800e4e4 <_dtoa_r+0x4b4>
 800e3d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	4b93      	ldr	r3, [pc, #588]	; (800e62c <_dtoa_r+0x5fc>)
 800e3de:	4630      	mov	r0, r6
 800e3e0:	4639      	mov	r1, r7
 800e3e2:	f7f2 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	d07c      	beq.n	800e4e4 <_dtoa_r+0x4b4>
 800e3ea:	f1b9 0f00 	cmp.w	r9, #0
 800e3ee:	d079      	beq.n	800e4e4 <_dtoa_r+0x4b4>
 800e3f0:	9b02      	ldr	r3, [sp, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	dd35      	ble.n	800e462 <_dtoa_r+0x432>
 800e3f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e3fa:	9308      	str	r3, [sp, #32]
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	2200      	movs	r2, #0
 800e400:	4b8b      	ldr	r3, [pc, #556]	; (800e630 <_dtoa_r+0x600>)
 800e402:	4630      	mov	r0, r6
 800e404:	f7f2 f8f8 	bl	80005f8 <__aeabi_dmul>
 800e408:	e9cd 0100 	strd	r0, r1, [sp]
 800e40c:	9f02      	ldr	r7, [sp, #8]
 800e40e:	3501      	adds	r5, #1
 800e410:	4628      	mov	r0, r5
 800e412:	f7f2 f887 	bl	8000524 <__aeabi_i2d>
 800e416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e41a:	f7f2 f8ed 	bl	80005f8 <__aeabi_dmul>
 800e41e:	2200      	movs	r2, #0
 800e420:	4b84      	ldr	r3, [pc, #528]	; (800e634 <_dtoa_r+0x604>)
 800e422:	f7f1 ff33 	bl	800028c <__adddf3>
 800e426:	4605      	mov	r5, r0
 800e428:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e42c:	2f00      	cmp	r7, #0
 800e42e:	d15d      	bne.n	800e4ec <_dtoa_r+0x4bc>
 800e430:	2200      	movs	r2, #0
 800e432:	4b81      	ldr	r3, [pc, #516]	; (800e638 <_dtoa_r+0x608>)
 800e434:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e438:	f7f1 ff26 	bl	8000288 <__aeabi_dsub>
 800e43c:	462a      	mov	r2, r5
 800e43e:	4633      	mov	r3, r6
 800e440:	e9cd 0100 	strd	r0, r1, [sp]
 800e444:	f7f2 fb68 	bl	8000b18 <__aeabi_dcmpgt>
 800e448:	2800      	cmp	r0, #0
 800e44a:	f040 8288 	bne.w	800e95e <_dtoa_r+0x92e>
 800e44e:	462a      	mov	r2, r5
 800e450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e454:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e458:	f7f2 fb40 	bl	8000adc <__aeabi_dcmplt>
 800e45c:	2800      	cmp	r0, #0
 800e45e:	f040 827c 	bne.w	800e95a <_dtoa_r+0x92a>
 800e462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e466:	e9cd 2300 	strd	r2, r3, [sp]
 800e46a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f2c0 8150 	blt.w	800e712 <_dtoa_r+0x6e2>
 800e472:	f1ba 0f0e 	cmp.w	sl, #14
 800e476:	f300 814c 	bgt.w	800e712 <_dtoa_r+0x6e2>
 800e47a:	4b6a      	ldr	r3, [pc, #424]	; (800e624 <_dtoa_r+0x5f4>)
 800e47c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e480:	ed93 7b00 	vldr	d7, [r3]
 800e484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e486:	2b00      	cmp	r3, #0
 800e488:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e48c:	f280 80d8 	bge.w	800e640 <_dtoa_r+0x610>
 800e490:	f1b9 0f00 	cmp.w	r9, #0
 800e494:	f300 80d4 	bgt.w	800e640 <_dtoa_r+0x610>
 800e498:	f040 825e 	bne.w	800e958 <_dtoa_r+0x928>
 800e49c:	2200      	movs	r2, #0
 800e49e:	4b66      	ldr	r3, [pc, #408]	; (800e638 <_dtoa_r+0x608>)
 800e4a0:	ec51 0b17 	vmov	r0, r1, d7
 800e4a4:	f7f2 f8a8 	bl	80005f8 <__aeabi_dmul>
 800e4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ac:	f7f2 fb2a 	bl	8000b04 <__aeabi_dcmpge>
 800e4b0:	464f      	mov	r7, r9
 800e4b2:	464e      	mov	r6, r9
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f040 8234 	bne.w	800e922 <_dtoa_r+0x8f2>
 800e4ba:	2331      	movs	r3, #49	; 0x31
 800e4bc:	f10b 0501 	add.w	r5, fp, #1
 800e4c0:	f88b 3000 	strb.w	r3, [fp]
 800e4c4:	f10a 0a01 	add.w	sl, sl, #1
 800e4c8:	e22f      	b.n	800e92a <_dtoa_r+0x8fa>
 800e4ca:	07f2      	lsls	r2, r6, #31
 800e4cc:	d505      	bpl.n	800e4da <_dtoa_r+0x4aa>
 800e4ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4d2:	f7f2 f891 	bl	80005f8 <__aeabi_dmul>
 800e4d6:	3501      	adds	r5, #1
 800e4d8:	2301      	movs	r3, #1
 800e4da:	1076      	asrs	r6, r6, #1
 800e4dc:	3708      	adds	r7, #8
 800e4de:	e772      	b.n	800e3c6 <_dtoa_r+0x396>
 800e4e0:	2502      	movs	r5, #2
 800e4e2:	e774      	b.n	800e3ce <_dtoa_r+0x39e>
 800e4e4:	f8cd a020 	str.w	sl, [sp, #32]
 800e4e8:	464f      	mov	r7, r9
 800e4ea:	e791      	b.n	800e410 <_dtoa_r+0x3e0>
 800e4ec:	4b4d      	ldr	r3, [pc, #308]	; (800e624 <_dtoa_r+0x5f4>)
 800e4ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d047      	beq.n	800e58c <_dtoa_r+0x55c>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	460b      	mov	r3, r1
 800e500:	2000      	movs	r0, #0
 800e502:	494e      	ldr	r1, [pc, #312]	; (800e63c <_dtoa_r+0x60c>)
 800e504:	f7f2 f9a2 	bl	800084c <__aeabi_ddiv>
 800e508:	462a      	mov	r2, r5
 800e50a:	4633      	mov	r3, r6
 800e50c:	f7f1 febc 	bl	8000288 <__aeabi_dsub>
 800e510:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e514:	465d      	mov	r5, fp
 800e516:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e51a:	f7f2 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800e51e:	4606      	mov	r6, r0
 800e520:	f7f2 f800 	bl	8000524 <__aeabi_i2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e52c:	f7f1 feac 	bl	8000288 <__aeabi_dsub>
 800e530:	3630      	adds	r6, #48	; 0x30
 800e532:	f805 6b01 	strb.w	r6, [r5], #1
 800e536:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e53a:	e9cd 0100 	strd	r0, r1, [sp]
 800e53e:	f7f2 facd 	bl	8000adc <__aeabi_dcmplt>
 800e542:	2800      	cmp	r0, #0
 800e544:	d163      	bne.n	800e60e <_dtoa_r+0x5de>
 800e546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e54a:	2000      	movs	r0, #0
 800e54c:	4937      	ldr	r1, [pc, #220]	; (800e62c <_dtoa_r+0x5fc>)
 800e54e:	f7f1 fe9b 	bl	8000288 <__aeabi_dsub>
 800e552:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e556:	f7f2 fac1 	bl	8000adc <__aeabi_dcmplt>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f040 80b7 	bne.w	800e6ce <_dtoa_r+0x69e>
 800e560:	eba5 030b 	sub.w	r3, r5, fp
 800e564:	429f      	cmp	r7, r3
 800e566:	f77f af7c 	ble.w	800e462 <_dtoa_r+0x432>
 800e56a:	2200      	movs	r2, #0
 800e56c:	4b30      	ldr	r3, [pc, #192]	; (800e630 <_dtoa_r+0x600>)
 800e56e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e572:	f7f2 f841 	bl	80005f8 <__aeabi_dmul>
 800e576:	2200      	movs	r2, #0
 800e578:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e57c:	4b2c      	ldr	r3, [pc, #176]	; (800e630 <_dtoa_r+0x600>)
 800e57e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e582:	f7f2 f839 	bl	80005f8 <__aeabi_dmul>
 800e586:	e9cd 0100 	strd	r0, r1, [sp]
 800e58a:	e7c4      	b.n	800e516 <_dtoa_r+0x4e6>
 800e58c:	462a      	mov	r2, r5
 800e58e:	4633      	mov	r3, r6
 800e590:	f7f2 f832 	bl	80005f8 <__aeabi_dmul>
 800e594:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e598:	eb0b 0507 	add.w	r5, fp, r7
 800e59c:	465e      	mov	r6, fp
 800e59e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5a2:	f7f2 fad9 	bl	8000b58 <__aeabi_d2iz>
 800e5a6:	4607      	mov	r7, r0
 800e5a8:	f7f1 ffbc 	bl	8000524 <__aeabi_i2d>
 800e5ac:	3730      	adds	r7, #48	; 0x30
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5b6:	f7f1 fe67 	bl	8000288 <__aeabi_dsub>
 800e5ba:	f806 7b01 	strb.w	r7, [r6], #1
 800e5be:	42ae      	cmp	r6, r5
 800e5c0:	e9cd 0100 	strd	r0, r1, [sp]
 800e5c4:	f04f 0200 	mov.w	r2, #0
 800e5c8:	d126      	bne.n	800e618 <_dtoa_r+0x5e8>
 800e5ca:	4b1c      	ldr	r3, [pc, #112]	; (800e63c <_dtoa_r+0x60c>)
 800e5cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5d0:	f7f1 fe5c 	bl	800028c <__adddf3>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5dc:	f7f2 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	d174      	bne.n	800e6ce <_dtoa_r+0x69e>
 800e5e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	4914      	ldr	r1, [pc, #80]	; (800e63c <_dtoa_r+0x60c>)
 800e5ec:	f7f1 fe4c 	bl	8000288 <__aeabi_dsub>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5f8:	f7f2 fa70 	bl	8000adc <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f43f af30 	beq.w	800e462 <_dtoa_r+0x432>
 800e602:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e606:	2b30      	cmp	r3, #48	; 0x30
 800e608:	f105 32ff 	add.w	r2, r5, #4294967295
 800e60c:	d002      	beq.n	800e614 <_dtoa_r+0x5e4>
 800e60e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e612:	e04a      	b.n	800e6aa <_dtoa_r+0x67a>
 800e614:	4615      	mov	r5, r2
 800e616:	e7f4      	b.n	800e602 <_dtoa_r+0x5d2>
 800e618:	4b05      	ldr	r3, [pc, #20]	; (800e630 <_dtoa_r+0x600>)
 800e61a:	f7f1 ffed 	bl	80005f8 <__aeabi_dmul>
 800e61e:	e9cd 0100 	strd	r0, r1, [sp]
 800e622:	e7bc      	b.n	800e59e <_dtoa_r+0x56e>
 800e624:	08010ae0 	.word	0x08010ae0
 800e628:	08010ab8 	.word	0x08010ab8
 800e62c:	3ff00000 	.word	0x3ff00000
 800e630:	40240000 	.word	0x40240000
 800e634:	401c0000 	.word	0x401c0000
 800e638:	40140000 	.word	0x40140000
 800e63c:	3fe00000 	.word	0x3fe00000
 800e640:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e644:	465d      	mov	r5, fp
 800e646:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e64a:	4630      	mov	r0, r6
 800e64c:	4639      	mov	r1, r7
 800e64e:	f7f2 f8fd 	bl	800084c <__aeabi_ddiv>
 800e652:	f7f2 fa81 	bl	8000b58 <__aeabi_d2iz>
 800e656:	4680      	mov	r8, r0
 800e658:	f7f1 ff64 	bl	8000524 <__aeabi_i2d>
 800e65c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e660:	f7f1 ffca 	bl	80005f8 <__aeabi_dmul>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	4630      	mov	r0, r6
 800e66a:	4639      	mov	r1, r7
 800e66c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e670:	f7f1 fe0a 	bl	8000288 <__aeabi_dsub>
 800e674:	f805 6b01 	strb.w	r6, [r5], #1
 800e678:	eba5 060b 	sub.w	r6, r5, fp
 800e67c:	45b1      	cmp	r9, r6
 800e67e:	4602      	mov	r2, r0
 800e680:	460b      	mov	r3, r1
 800e682:	d139      	bne.n	800e6f8 <_dtoa_r+0x6c8>
 800e684:	f7f1 fe02 	bl	800028c <__adddf3>
 800e688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e68c:	4606      	mov	r6, r0
 800e68e:	460f      	mov	r7, r1
 800e690:	f7f2 fa42 	bl	8000b18 <__aeabi_dcmpgt>
 800e694:	b9c8      	cbnz	r0, 800e6ca <_dtoa_r+0x69a>
 800e696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e69a:	4630      	mov	r0, r6
 800e69c:	4639      	mov	r1, r7
 800e69e:	f7f2 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6a2:	b110      	cbz	r0, 800e6aa <_dtoa_r+0x67a>
 800e6a4:	f018 0f01 	tst.w	r8, #1
 800e6a8:	d10f      	bne.n	800e6ca <_dtoa_r+0x69a>
 800e6aa:	9904      	ldr	r1, [sp, #16]
 800e6ac:	4620      	mov	r0, r4
 800e6ae:	f000 ffdd 	bl	800f66c <_Bfree>
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6b6:	702b      	strb	r3, [r5, #0]
 800e6b8:	f10a 0301 	add.w	r3, sl, #1
 800e6bc:	6013      	str	r3, [r2, #0]
 800e6be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 8241 	beq.w	800eb48 <_dtoa_r+0xb18>
 800e6c6:	601d      	str	r5, [r3, #0]
 800e6c8:	e23e      	b.n	800eb48 <_dtoa_r+0xb18>
 800e6ca:	f8cd a020 	str.w	sl, [sp, #32]
 800e6ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6d2:	2a39      	cmp	r2, #57	; 0x39
 800e6d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800e6d8:	d108      	bne.n	800e6ec <_dtoa_r+0x6bc>
 800e6da:	459b      	cmp	fp, r3
 800e6dc:	d10a      	bne.n	800e6f4 <_dtoa_r+0x6c4>
 800e6de:	9b08      	ldr	r3, [sp, #32]
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	9308      	str	r3, [sp, #32]
 800e6e4:	2330      	movs	r3, #48	; 0x30
 800e6e6:	f88b 3000 	strb.w	r3, [fp]
 800e6ea:	465b      	mov	r3, fp
 800e6ec:	781a      	ldrb	r2, [r3, #0]
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	701a      	strb	r2, [r3, #0]
 800e6f2:	e78c      	b.n	800e60e <_dtoa_r+0x5de>
 800e6f4:	461d      	mov	r5, r3
 800e6f6:	e7ea      	b.n	800e6ce <_dtoa_r+0x69e>
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	4b9b      	ldr	r3, [pc, #620]	; (800e968 <_dtoa_r+0x938>)
 800e6fc:	f7f1 ff7c 	bl	80005f8 <__aeabi_dmul>
 800e700:	2200      	movs	r2, #0
 800e702:	2300      	movs	r3, #0
 800e704:	4606      	mov	r6, r0
 800e706:	460f      	mov	r7, r1
 800e708:	f7f2 f9de 	bl	8000ac8 <__aeabi_dcmpeq>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d09a      	beq.n	800e646 <_dtoa_r+0x616>
 800e710:	e7cb      	b.n	800e6aa <_dtoa_r+0x67a>
 800e712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e714:	2a00      	cmp	r2, #0
 800e716:	f000 808b 	beq.w	800e830 <_dtoa_r+0x800>
 800e71a:	9a06      	ldr	r2, [sp, #24]
 800e71c:	2a01      	cmp	r2, #1
 800e71e:	dc6e      	bgt.n	800e7fe <_dtoa_r+0x7ce>
 800e720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e722:	2a00      	cmp	r2, #0
 800e724:	d067      	beq.n	800e7f6 <_dtoa_r+0x7c6>
 800e726:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e72a:	9f07      	ldr	r7, [sp, #28]
 800e72c:	9d05      	ldr	r5, [sp, #20]
 800e72e:	9a05      	ldr	r2, [sp, #20]
 800e730:	2101      	movs	r1, #1
 800e732:	441a      	add	r2, r3
 800e734:	4620      	mov	r0, r4
 800e736:	9205      	str	r2, [sp, #20]
 800e738:	4498      	add	r8, r3
 800e73a:	f001 f875 	bl	800f828 <__i2b>
 800e73e:	4606      	mov	r6, r0
 800e740:	2d00      	cmp	r5, #0
 800e742:	dd0c      	ble.n	800e75e <_dtoa_r+0x72e>
 800e744:	f1b8 0f00 	cmp.w	r8, #0
 800e748:	dd09      	ble.n	800e75e <_dtoa_r+0x72e>
 800e74a:	4545      	cmp	r5, r8
 800e74c:	9a05      	ldr	r2, [sp, #20]
 800e74e:	462b      	mov	r3, r5
 800e750:	bfa8      	it	ge
 800e752:	4643      	movge	r3, r8
 800e754:	1ad2      	subs	r2, r2, r3
 800e756:	9205      	str	r2, [sp, #20]
 800e758:	1aed      	subs	r5, r5, r3
 800e75a:	eba8 0803 	sub.w	r8, r8, r3
 800e75e:	9b07      	ldr	r3, [sp, #28]
 800e760:	b1eb      	cbz	r3, 800e79e <_dtoa_r+0x76e>
 800e762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e764:	2b00      	cmp	r3, #0
 800e766:	d067      	beq.n	800e838 <_dtoa_r+0x808>
 800e768:	b18f      	cbz	r7, 800e78e <_dtoa_r+0x75e>
 800e76a:	4631      	mov	r1, r6
 800e76c:	463a      	mov	r2, r7
 800e76e:	4620      	mov	r0, r4
 800e770:	f001 f8fa 	bl	800f968 <__pow5mult>
 800e774:	9a04      	ldr	r2, [sp, #16]
 800e776:	4601      	mov	r1, r0
 800e778:	4606      	mov	r6, r0
 800e77a:	4620      	mov	r0, r4
 800e77c:	f001 f85d 	bl	800f83a <__multiply>
 800e780:	9904      	ldr	r1, [sp, #16]
 800e782:	9008      	str	r0, [sp, #32]
 800e784:	4620      	mov	r0, r4
 800e786:	f000 ff71 	bl	800f66c <_Bfree>
 800e78a:	9b08      	ldr	r3, [sp, #32]
 800e78c:	9304      	str	r3, [sp, #16]
 800e78e:	9b07      	ldr	r3, [sp, #28]
 800e790:	1bda      	subs	r2, r3, r7
 800e792:	d004      	beq.n	800e79e <_dtoa_r+0x76e>
 800e794:	9904      	ldr	r1, [sp, #16]
 800e796:	4620      	mov	r0, r4
 800e798:	f001 f8e6 	bl	800f968 <__pow5mult>
 800e79c:	9004      	str	r0, [sp, #16]
 800e79e:	2101      	movs	r1, #1
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f001 f841 	bl	800f828 <__i2b>
 800e7a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7a8:	4607      	mov	r7, r0
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 81d0 	beq.w	800eb50 <_dtoa_r+0xb20>
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f001 f8d7 	bl	800f968 <__pow5mult>
 800e7ba:	9b06      	ldr	r3, [sp, #24]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	4607      	mov	r7, r0
 800e7c0:	dc40      	bgt.n	800e844 <_dtoa_r+0x814>
 800e7c2:	9b00      	ldr	r3, [sp, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d139      	bne.n	800e83c <_dtoa_r+0x80c>
 800e7c8:	9b01      	ldr	r3, [sp, #4]
 800e7ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d136      	bne.n	800e840 <_dtoa_r+0x810>
 800e7d2:	9b01      	ldr	r3, [sp, #4]
 800e7d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7d8:	0d1b      	lsrs	r3, r3, #20
 800e7da:	051b      	lsls	r3, r3, #20
 800e7dc:	b12b      	cbz	r3, 800e7ea <_dtoa_r+0x7ba>
 800e7de:	9b05      	ldr	r3, [sp, #20]
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	9305      	str	r3, [sp, #20]
 800e7e4:	f108 0801 	add.w	r8, r8, #1
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	9307      	str	r3, [sp, #28]
 800e7ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d12a      	bne.n	800e848 <_dtoa_r+0x818>
 800e7f2:	2001      	movs	r0, #1
 800e7f4:	e030      	b.n	800e858 <_dtoa_r+0x828>
 800e7f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e7fc:	e795      	b.n	800e72a <_dtoa_r+0x6fa>
 800e7fe:	9b07      	ldr	r3, [sp, #28]
 800e800:	f109 37ff 	add.w	r7, r9, #4294967295
 800e804:	42bb      	cmp	r3, r7
 800e806:	bfbf      	itttt	lt
 800e808:	9b07      	ldrlt	r3, [sp, #28]
 800e80a:	9707      	strlt	r7, [sp, #28]
 800e80c:	1afa      	sublt	r2, r7, r3
 800e80e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e810:	bfbb      	ittet	lt
 800e812:	189b      	addlt	r3, r3, r2
 800e814:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e816:	1bdf      	subge	r7, r3, r7
 800e818:	2700      	movlt	r7, #0
 800e81a:	f1b9 0f00 	cmp.w	r9, #0
 800e81e:	bfb5      	itete	lt
 800e820:	9b05      	ldrlt	r3, [sp, #20]
 800e822:	9d05      	ldrge	r5, [sp, #20]
 800e824:	eba3 0509 	sublt.w	r5, r3, r9
 800e828:	464b      	movge	r3, r9
 800e82a:	bfb8      	it	lt
 800e82c:	2300      	movlt	r3, #0
 800e82e:	e77e      	b.n	800e72e <_dtoa_r+0x6fe>
 800e830:	9f07      	ldr	r7, [sp, #28]
 800e832:	9d05      	ldr	r5, [sp, #20]
 800e834:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e836:	e783      	b.n	800e740 <_dtoa_r+0x710>
 800e838:	9a07      	ldr	r2, [sp, #28]
 800e83a:	e7ab      	b.n	800e794 <_dtoa_r+0x764>
 800e83c:	2300      	movs	r3, #0
 800e83e:	e7d4      	b.n	800e7ea <_dtoa_r+0x7ba>
 800e840:	9b00      	ldr	r3, [sp, #0]
 800e842:	e7d2      	b.n	800e7ea <_dtoa_r+0x7ba>
 800e844:	2300      	movs	r3, #0
 800e846:	9307      	str	r3, [sp, #28]
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e84e:	6918      	ldr	r0, [r3, #16]
 800e850:	f000 ff9c 	bl	800f78c <__hi0bits>
 800e854:	f1c0 0020 	rsb	r0, r0, #32
 800e858:	4440      	add	r0, r8
 800e85a:	f010 001f 	ands.w	r0, r0, #31
 800e85e:	d047      	beq.n	800e8f0 <_dtoa_r+0x8c0>
 800e860:	f1c0 0320 	rsb	r3, r0, #32
 800e864:	2b04      	cmp	r3, #4
 800e866:	dd3b      	ble.n	800e8e0 <_dtoa_r+0x8b0>
 800e868:	9b05      	ldr	r3, [sp, #20]
 800e86a:	f1c0 001c 	rsb	r0, r0, #28
 800e86e:	4403      	add	r3, r0
 800e870:	9305      	str	r3, [sp, #20]
 800e872:	4405      	add	r5, r0
 800e874:	4480      	add	r8, r0
 800e876:	9b05      	ldr	r3, [sp, #20]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	dd05      	ble.n	800e888 <_dtoa_r+0x858>
 800e87c:	461a      	mov	r2, r3
 800e87e:	9904      	ldr	r1, [sp, #16]
 800e880:	4620      	mov	r0, r4
 800e882:	f001 f8bf 	bl	800fa04 <__lshift>
 800e886:	9004      	str	r0, [sp, #16]
 800e888:	f1b8 0f00 	cmp.w	r8, #0
 800e88c:	dd05      	ble.n	800e89a <_dtoa_r+0x86a>
 800e88e:	4639      	mov	r1, r7
 800e890:	4642      	mov	r2, r8
 800e892:	4620      	mov	r0, r4
 800e894:	f001 f8b6 	bl	800fa04 <__lshift>
 800e898:	4607      	mov	r7, r0
 800e89a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e89c:	b353      	cbz	r3, 800e8f4 <_dtoa_r+0x8c4>
 800e89e:	4639      	mov	r1, r7
 800e8a0:	9804      	ldr	r0, [sp, #16]
 800e8a2:	f001 f903 	bl	800faac <__mcmp>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	da24      	bge.n	800e8f4 <_dtoa_r+0x8c4>
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	220a      	movs	r2, #10
 800e8ae:	9904      	ldr	r1, [sp, #16]
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fef2 	bl	800f69a <__multadd>
 800e8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8b8:	9004      	str	r0, [sp, #16]
 800e8ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	f000 814d 	beq.w	800eb5e <_dtoa_r+0xb2e>
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	220a      	movs	r2, #10
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f000 fee5 	bl	800f69a <__multadd>
 800e8d0:	9b02      	ldr	r3, [sp, #8]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	dc4f      	bgt.n	800e978 <_dtoa_r+0x948>
 800e8d8:	9b06      	ldr	r3, [sp, #24]
 800e8da:	2b02      	cmp	r3, #2
 800e8dc:	dd4c      	ble.n	800e978 <_dtoa_r+0x948>
 800e8de:	e011      	b.n	800e904 <_dtoa_r+0x8d4>
 800e8e0:	d0c9      	beq.n	800e876 <_dtoa_r+0x846>
 800e8e2:	9a05      	ldr	r2, [sp, #20]
 800e8e4:	331c      	adds	r3, #28
 800e8e6:	441a      	add	r2, r3
 800e8e8:	9205      	str	r2, [sp, #20]
 800e8ea:	441d      	add	r5, r3
 800e8ec:	4498      	add	r8, r3
 800e8ee:	e7c2      	b.n	800e876 <_dtoa_r+0x846>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	e7f6      	b.n	800e8e2 <_dtoa_r+0x8b2>
 800e8f4:	f1b9 0f00 	cmp.w	r9, #0
 800e8f8:	dc38      	bgt.n	800e96c <_dtoa_r+0x93c>
 800e8fa:	9b06      	ldr	r3, [sp, #24]
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	dd35      	ble.n	800e96c <_dtoa_r+0x93c>
 800e900:	f8cd 9008 	str.w	r9, [sp, #8]
 800e904:	9b02      	ldr	r3, [sp, #8]
 800e906:	b963      	cbnz	r3, 800e922 <_dtoa_r+0x8f2>
 800e908:	4639      	mov	r1, r7
 800e90a:	2205      	movs	r2, #5
 800e90c:	4620      	mov	r0, r4
 800e90e:	f000 fec4 	bl	800f69a <__multadd>
 800e912:	4601      	mov	r1, r0
 800e914:	4607      	mov	r7, r0
 800e916:	9804      	ldr	r0, [sp, #16]
 800e918:	f001 f8c8 	bl	800faac <__mcmp>
 800e91c:	2800      	cmp	r0, #0
 800e91e:	f73f adcc 	bgt.w	800e4ba <_dtoa_r+0x48a>
 800e922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e924:	465d      	mov	r5, fp
 800e926:	ea6f 0a03 	mvn.w	sl, r3
 800e92a:	f04f 0900 	mov.w	r9, #0
 800e92e:	4639      	mov	r1, r7
 800e930:	4620      	mov	r0, r4
 800e932:	f000 fe9b 	bl	800f66c <_Bfree>
 800e936:	2e00      	cmp	r6, #0
 800e938:	f43f aeb7 	beq.w	800e6aa <_dtoa_r+0x67a>
 800e93c:	f1b9 0f00 	cmp.w	r9, #0
 800e940:	d005      	beq.n	800e94e <_dtoa_r+0x91e>
 800e942:	45b1      	cmp	r9, r6
 800e944:	d003      	beq.n	800e94e <_dtoa_r+0x91e>
 800e946:	4649      	mov	r1, r9
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fe8f 	bl	800f66c <_Bfree>
 800e94e:	4631      	mov	r1, r6
 800e950:	4620      	mov	r0, r4
 800e952:	f000 fe8b 	bl	800f66c <_Bfree>
 800e956:	e6a8      	b.n	800e6aa <_dtoa_r+0x67a>
 800e958:	2700      	movs	r7, #0
 800e95a:	463e      	mov	r6, r7
 800e95c:	e7e1      	b.n	800e922 <_dtoa_r+0x8f2>
 800e95e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e962:	463e      	mov	r6, r7
 800e964:	e5a9      	b.n	800e4ba <_dtoa_r+0x48a>
 800e966:	bf00      	nop
 800e968:	40240000 	.word	0x40240000
 800e96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96e:	f8cd 9008 	str.w	r9, [sp, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 80fa 	beq.w	800eb6c <_dtoa_r+0xb3c>
 800e978:	2d00      	cmp	r5, #0
 800e97a:	dd05      	ble.n	800e988 <_dtoa_r+0x958>
 800e97c:	4631      	mov	r1, r6
 800e97e:	462a      	mov	r2, r5
 800e980:	4620      	mov	r0, r4
 800e982:	f001 f83f 	bl	800fa04 <__lshift>
 800e986:	4606      	mov	r6, r0
 800e988:	9b07      	ldr	r3, [sp, #28]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d04c      	beq.n	800ea28 <_dtoa_r+0x9f8>
 800e98e:	6871      	ldr	r1, [r6, #4]
 800e990:	4620      	mov	r0, r4
 800e992:	f000 fe37 	bl	800f604 <_Balloc>
 800e996:	6932      	ldr	r2, [r6, #16]
 800e998:	3202      	adds	r2, #2
 800e99a:	4605      	mov	r5, r0
 800e99c:	0092      	lsls	r2, r2, #2
 800e99e:	f106 010c 	add.w	r1, r6, #12
 800e9a2:	300c      	adds	r0, #12
 800e9a4:	f7fd fc54 	bl	800c250 <memcpy>
 800e9a8:	2201      	movs	r2, #1
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f001 f829 	bl	800fa04 <__lshift>
 800e9b2:	9b00      	ldr	r3, [sp, #0]
 800e9b4:	f8cd b014 	str.w	fp, [sp, #20]
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	46b1      	mov	r9, r6
 800e9be:	9307      	str	r3, [sp, #28]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	9804      	ldr	r0, [sp, #16]
 800e9c6:	f7ff faa5 	bl	800df14 <quorem>
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e9d2:	9804      	ldr	r0, [sp, #16]
 800e9d4:	f001 f86a 	bl	800faac <__mcmp>
 800e9d8:	4632      	mov	r2, r6
 800e9da:	9000      	str	r0, [sp, #0]
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f001 f87e 	bl	800fae0 <__mdiff>
 800e9e4:	68c3      	ldr	r3, [r0, #12]
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	bb03      	cbnz	r3, 800ea2c <_dtoa_r+0x9fc>
 800e9ea:	4601      	mov	r1, r0
 800e9ec:	9008      	str	r0, [sp, #32]
 800e9ee:	9804      	ldr	r0, [sp, #16]
 800e9f0:	f001 f85c 	bl	800faac <__mcmp>
 800e9f4:	9a08      	ldr	r2, [sp, #32]
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	4611      	mov	r1, r2
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	9308      	str	r3, [sp, #32]
 800e9fe:	f000 fe35 	bl	800f66c <_Bfree>
 800ea02:	9b08      	ldr	r3, [sp, #32]
 800ea04:	b9a3      	cbnz	r3, 800ea30 <_dtoa_r+0xa00>
 800ea06:	9a06      	ldr	r2, [sp, #24]
 800ea08:	b992      	cbnz	r2, 800ea30 <_dtoa_r+0xa00>
 800ea0a:	9a07      	ldr	r2, [sp, #28]
 800ea0c:	b982      	cbnz	r2, 800ea30 <_dtoa_r+0xa00>
 800ea0e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea12:	d029      	beq.n	800ea68 <_dtoa_r+0xa38>
 800ea14:	9b00      	ldr	r3, [sp, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	dd01      	ble.n	800ea1e <_dtoa_r+0x9ee>
 800ea1a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ea1e:	9b05      	ldr	r3, [sp, #20]
 800ea20:	1c5d      	adds	r5, r3, #1
 800ea22:	f883 8000 	strb.w	r8, [r3]
 800ea26:	e782      	b.n	800e92e <_dtoa_r+0x8fe>
 800ea28:	4630      	mov	r0, r6
 800ea2a:	e7c2      	b.n	800e9b2 <_dtoa_r+0x982>
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	e7e3      	b.n	800e9f8 <_dtoa_r+0x9c8>
 800ea30:	9a00      	ldr	r2, [sp, #0]
 800ea32:	2a00      	cmp	r2, #0
 800ea34:	db04      	blt.n	800ea40 <_dtoa_r+0xa10>
 800ea36:	d125      	bne.n	800ea84 <_dtoa_r+0xa54>
 800ea38:	9a06      	ldr	r2, [sp, #24]
 800ea3a:	bb1a      	cbnz	r2, 800ea84 <_dtoa_r+0xa54>
 800ea3c:	9a07      	ldr	r2, [sp, #28]
 800ea3e:	bb0a      	cbnz	r2, 800ea84 <_dtoa_r+0xa54>
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	ddec      	ble.n	800ea1e <_dtoa_r+0x9ee>
 800ea44:	2201      	movs	r2, #1
 800ea46:	9904      	ldr	r1, [sp, #16]
 800ea48:	4620      	mov	r0, r4
 800ea4a:	f000 ffdb 	bl	800fa04 <__lshift>
 800ea4e:	4639      	mov	r1, r7
 800ea50:	9004      	str	r0, [sp, #16]
 800ea52:	f001 f82b 	bl	800faac <__mcmp>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	dc03      	bgt.n	800ea62 <_dtoa_r+0xa32>
 800ea5a:	d1e0      	bne.n	800ea1e <_dtoa_r+0x9ee>
 800ea5c:	f018 0f01 	tst.w	r8, #1
 800ea60:	d0dd      	beq.n	800ea1e <_dtoa_r+0x9ee>
 800ea62:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea66:	d1d8      	bne.n	800ea1a <_dtoa_r+0x9ea>
 800ea68:	9b05      	ldr	r3, [sp, #20]
 800ea6a:	9a05      	ldr	r2, [sp, #20]
 800ea6c:	1c5d      	adds	r5, r3, #1
 800ea6e:	2339      	movs	r3, #57	; 0x39
 800ea70:	7013      	strb	r3, [r2, #0]
 800ea72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea76:	2b39      	cmp	r3, #57	; 0x39
 800ea78:	f105 32ff 	add.w	r2, r5, #4294967295
 800ea7c:	d04f      	beq.n	800eb1e <_dtoa_r+0xaee>
 800ea7e:	3301      	adds	r3, #1
 800ea80:	7013      	strb	r3, [r2, #0]
 800ea82:	e754      	b.n	800e92e <_dtoa_r+0x8fe>
 800ea84:	9a05      	ldr	r2, [sp, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	f102 0501 	add.w	r5, r2, #1
 800ea8c:	dd06      	ble.n	800ea9c <_dtoa_r+0xa6c>
 800ea8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ea92:	d0e9      	beq.n	800ea68 <_dtoa_r+0xa38>
 800ea94:	f108 0801 	add.w	r8, r8, #1
 800ea98:	9b05      	ldr	r3, [sp, #20]
 800ea9a:	e7c2      	b.n	800ea22 <_dtoa_r+0x9f2>
 800ea9c:	9a02      	ldr	r2, [sp, #8]
 800ea9e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800eaa2:	eba5 030b 	sub.w	r3, r5, fp
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d021      	beq.n	800eaee <_dtoa_r+0xabe>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	220a      	movs	r2, #10
 800eaae:	9904      	ldr	r1, [sp, #16]
 800eab0:	4620      	mov	r0, r4
 800eab2:	f000 fdf2 	bl	800f69a <__multadd>
 800eab6:	45b1      	cmp	r9, r6
 800eab8:	9004      	str	r0, [sp, #16]
 800eaba:	f04f 0300 	mov.w	r3, #0
 800eabe:	f04f 020a 	mov.w	r2, #10
 800eac2:	4649      	mov	r1, r9
 800eac4:	4620      	mov	r0, r4
 800eac6:	d105      	bne.n	800ead4 <_dtoa_r+0xaa4>
 800eac8:	f000 fde7 	bl	800f69a <__multadd>
 800eacc:	4681      	mov	r9, r0
 800eace:	4606      	mov	r6, r0
 800ead0:	9505      	str	r5, [sp, #20]
 800ead2:	e776      	b.n	800e9c2 <_dtoa_r+0x992>
 800ead4:	f000 fde1 	bl	800f69a <__multadd>
 800ead8:	4631      	mov	r1, r6
 800eada:	4681      	mov	r9, r0
 800eadc:	2300      	movs	r3, #0
 800eade:	220a      	movs	r2, #10
 800eae0:	4620      	mov	r0, r4
 800eae2:	f000 fdda 	bl	800f69a <__multadd>
 800eae6:	4606      	mov	r6, r0
 800eae8:	e7f2      	b.n	800ead0 <_dtoa_r+0xaa0>
 800eaea:	f04f 0900 	mov.w	r9, #0
 800eaee:	2201      	movs	r2, #1
 800eaf0:	9904      	ldr	r1, [sp, #16]
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f000 ff86 	bl	800fa04 <__lshift>
 800eaf8:	4639      	mov	r1, r7
 800eafa:	9004      	str	r0, [sp, #16]
 800eafc:	f000 ffd6 	bl	800faac <__mcmp>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	dcb6      	bgt.n	800ea72 <_dtoa_r+0xa42>
 800eb04:	d102      	bne.n	800eb0c <_dtoa_r+0xadc>
 800eb06:	f018 0f01 	tst.w	r8, #1
 800eb0a:	d1b2      	bne.n	800ea72 <_dtoa_r+0xa42>
 800eb0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800eb10:	2b30      	cmp	r3, #48	; 0x30
 800eb12:	f105 32ff 	add.w	r2, r5, #4294967295
 800eb16:	f47f af0a 	bne.w	800e92e <_dtoa_r+0x8fe>
 800eb1a:	4615      	mov	r5, r2
 800eb1c:	e7f6      	b.n	800eb0c <_dtoa_r+0xadc>
 800eb1e:	4593      	cmp	fp, r2
 800eb20:	d105      	bne.n	800eb2e <_dtoa_r+0xafe>
 800eb22:	2331      	movs	r3, #49	; 0x31
 800eb24:	f10a 0a01 	add.w	sl, sl, #1
 800eb28:	f88b 3000 	strb.w	r3, [fp]
 800eb2c:	e6ff      	b.n	800e92e <_dtoa_r+0x8fe>
 800eb2e:	4615      	mov	r5, r2
 800eb30:	e79f      	b.n	800ea72 <_dtoa_r+0xa42>
 800eb32:	f8df b064 	ldr.w	fp, [pc, #100]	; 800eb98 <_dtoa_r+0xb68>
 800eb36:	e007      	b.n	800eb48 <_dtoa_r+0xb18>
 800eb38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb3a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800eb9c <_dtoa_r+0xb6c>
 800eb3e:	b11b      	cbz	r3, 800eb48 <_dtoa_r+0xb18>
 800eb40:	f10b 0308 	add.w	r3, fp, #8
 800eb44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb46:	6013      	str	r3, [r2, #0]
 800eb48:	4658      	mov	r0, fp
 800eb4a:	b017      	add	sp, #92	; 0x5c
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	9b06      	ldr	r3, [sp, #24]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	f77f ae35 	ble.w	800e7c2 <_dtoa_r+0x792>
 800eb58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb5a:	9307      	str	r3, [sp, #28]
 800eb5c:	e649      	b.n	800e7f2 <_dtoa_r+0x7c2>
 800eb5e:	9b02      	ldr	r3, [sp, #8]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	dc03      	bgt.n	800eb6c <_dtoa_r+0xb3c>
 800eb64:	9b06      	ldr	r3, [sp, #24]
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	f73f aecc 	bgt.w	800e904 <_dtoa_r+0x8d4>
 800eb6c:	465d      	mov	r5, fp
 800eb6e:	4639      	mov	r1, r7
 800eb70:	9804      	ldr	r0, [sp, #16]
 800eb72:	f7ff f9cf 	bl	800df14 <quorem>
 800eb76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eb7a:	f805 8b01 	strb.w	r8, [r5], #1
 800eb7e:	9a02      	ldr	r2, [sp, #8]
 800eb80:	eba5 030b 	sub.w	r3, r5, fp
 800eb84:	429a      	cmp	r2, r3
 800eb86:	ddb0      	ble.n	800eaea <_dtoa_r+0xaba>
 800eb88:	2300      	movs	r3, #0
 800eb8a:	220a      	movs	r2, #10
 800eb8c:	9904      	ldr	r1, [sp, #16]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f000 fd83 	bl	800f69a <__multadd>
 800eb94:	9004      	str	r0, [sp, #16]
 800eb96:	e7ea      	b.n	800eb6e <_dtoa_r+0xb3e>
 800eb98:	080109bc 	.word	0x080109bc
 800eb9c:	08010a38 	.word	0x08010a38

0800eba0 <__sflush_r>:
 800eba0:	898a      	ldrh	r2, [r1, #12]
 800eba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba6:	4605      	mov	r5, r0
 800eba8:	0710      	lsls	r0, r2, #28
 800ebaa:	460c      	mov	r4, r1
 800ebac:	d458      	bmi.n	800ec60 <__sflush_r+0xc0>
 800ebae:	684b      	ldr	r3, [r1, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	dc05      	bgt.n	800ebc0 <__sflush_r+0x20>
 800ebb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dc02      	bgt.n	800ebc0 <__sflush_r+0x20>
 800ebba:	2000      	movs	r0, #0
 800ebbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebc2:	2e00      	cmp	r6, #0
 800ebc4:	d0f9      	beq.n	800ebba <__sflush_r+0x1a>
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ebcc:	682f      	ldr	r7, [r5, #0]
 800ebce:	6a21      	ldr	r1, [r4, #32]
 800ebd0:	602b      	str	r3, [r5, #0]
 800ebd2:	d032      	beq.n	800ec3a <__sflush_r+0x9a>
 800ebd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ebd6:	89a3      	ldrh	r3, [r4, #12]
 800ebd8:	075a      	lsls	r2, r3, #29
 800ebda:	d505      	bpl.n	800ebe8 <__sflush_r+0x48>
 800ebdc:	6863      	ldr	r3, [r4, #4]
 800ebde:	1ac0      	subs	r0, r0, r3
 800ebe0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe2:	b10b      	cbz	r3, 800ebe8 <__sflush_r+0x48>
 800ebe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ebe6:	1ac0      	subs	r0, r0, r3
 800ebe8:	2300      	movs	r3, #0
 800ebea:	4602      	mov	r2, r0
 800ebec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebee:	6a21      	ldr	r1, [r4, #32]
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	47b0      	blx	r6
 800ebf4:	1c43      	adds	r3, r0, #1
 800ebf6:	89a3      	ldrh	r3, [r4, #12]
 800ebf8:	d106      	bne.n	800ec08 <__sflush_r+0x68>
 800ebfa:	6829      	ldr	r1, [r5, #0]
 800ebfc:	291d      	cmp	r1, #29
 800ebfe:	d848      	bhi.n	800ec92 <__sflush_r+0xf2>
 800ec00:	4a29      	ldr	r2, [pc, #164]	; (800eca8 <__sflush_r+0x108>)
 800ec02:	40ca      	lsrs	r2, r1
 800ec04:	07d6      	lsls	r6, r2, #31
 800ec06:	d544      	bpl.n	800ec92 <__sflush_r+0xf2>
 800ec08:	2200      	movs	r2, #0
 800ec0a:	6062      	str	r2, [r4, #4]
 800ec0c:	04d9      	lsls	r1, r3, #19
 800ec0e:	6922      	ldr	r2, [r4, #16]
 800ec10:	6022      	str	r2, [r4, #0]
 800ec12:	d504      	bpl.n	800ec1e <__sflush_r+0x7e>
 800ec14:	1c42      	adds	r2, r0, #1
 800ec16:	d101      	bne.n	800ec1c <__sflush_r+0x7c>
 800ec18:	682b      	ldr	r3, [r5, #0]
 800ec1a:	b903      	cbnz	r3, 800ec1e <__sflush_r+0x7e>
 800ec1c:	6560      	str	r0, [r4, #84]	; 0x54
 800ec1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec20:	602f      	str	r7, [r5, #0]
 800ec22:	2900      	cmp	r1, #0
 800ec24:	d0c9      	beq.n	800ebba <__sflush_r+0x1a>
 800ec26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec2a:	4299      	cmp	r1, r3
 800ec2c:	d002      	beq.n	800ec34 <__sflush_r+0x94>
 800ec2e:	4628      	mov	r0, r5
 800ec30:	f001 f8f6 	bl	800fe20 <_free_r>
 800ec34:	2000      	movs	r0, #0
 800ec36:	6360      	str	r0, [r4, #52]	; 0x34
 800ec38:	e7c0      	b.n	800ebbc <__sflush_r+0x1c>
 800ec3a:	2301      	movs	r3, #1
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	47b0      	blx	r6
 800ec40:	1c41      	adds	r1, r0, #1
 800ec42:	d1c8      	bne.n	800ebd6 <__sflush_r+0x36>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d0c5      	beq.n	800ebd6 <__sflush_r+0x36>
 800ec4a:	2b1d      	cmp	r3, #29
 800ec4c:	d001      	beq.n	800ec52 <__sflush_r+0xb2>
 800ec4e:	2b16      	cmp	r3, #22
 800ec50:	d101      	bne.n	800ec56 <__sflush_r+0xb6>
 800ec52:	602f      	str	r7, [r5, #0]
 800ec54:	e7b1      	b.n	800ebba <__sflush_r+0x1a>
 800ec56:	89a3      	ldrh	r3, [r4, #12]
 800ec58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec5c:	81a3      	strh	r3, [r4, #12]
 800ec5e:	e7ad      	b.n	800ebbc <__sflush_r+0x1c>
 800ec60:	690f      	ldr	r7, [r1, #16]
 800ec62:	2f00      	cmp	r7, #0
 800ec64:	d0a9      	beq.n	800ebba <__sflush_r+0x1a>
 800ec66:	0793      	lsls	r3, r2, #30
 800ec68:	680e      	ldr	r6, [r1, #0]
 800ec6a:	bf08      	it	eq
 800ec6c:	694b      	ldreq	r3, [r1, #20]
 800ec6e:	600f      	str	r7, [r1, #0]
 800ec70:	bf18      	it	ne
 800ec72:	2300      	movne	r3, #0
 800ec74:	eba6 0807 	sub.w	r8, r6, r7
 800ec78:	608b      	str	r3, [r1, #8]
 800ec7a:	f1b8 0f00 	cmp.w	r8, #0
 800ec7e:	dd9c      	ble.n	800ebba <__sflush_r+0x1a>
 800ec80:	4643      	mov	r3, r8
 800ec82:	463a      	mov	r2, r7
 800ec84:	6a21      	ldr	r1, [r4, #32]
 800ec86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b0      	blx	r6
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	dc06      	bgt.n	800ec9e <__sflush_r+0xfe>
 800ec90:	89a3      	ldrh	r3, [r4, #12]
 800ec92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec96:	81a3      	strh	r3, [r4, #12]
 800ec98:	f04f 30ff 	mov.w	r0, #4294967295
 800ec9c:	e78e      	b.n	800ebbc <__sflush_r+0x1c>
 800ec9e:	4407      	add	r7, r0
 800eca0:	eba8 0800 	sub.w	r8, r8, r0
 800eca4:	e7e9      	b.n	800ec7a <__sflush_r+0xda>
 800eca6:	bf00      	nop
 800eca8:	20400001 	.word	0x20400001

0800ecac <_fflush_r>:
 800ecac:	b538      	push	{r3, r4, r5, lr}
 800ecae:	690b      	ldr	r3, [r1, #16]
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	b1db      	cbz	r3, 800ecee <_fflush_r+0x42>
 800ecb6:	b118      	cbz	r0, 800ecc0 <_fflush_r+0x14>
 800ecb8:	6983      	ldr	r3, [r0, #24]
 800ecba:	b90b      	cbnz	r3, 800ecc0 <_fflush_r+0x14>
 800ecbc:	f000 f860 	bl	800ed80 <__sinit>
 800ecc0:	4b0c      	ldr	r3, [pc, #48]	; (800ecf4 <_fflush_r+0x48>)
 800ecc2:	429c      	cmp	r4, r3
 800ecc4:	d109      	bne.n	800ecda <_fflush_r+0x2e>
 800ecc6:	686c      	ldr	r4, [r5, #4]
 800ecc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eccc:	b17b      	cbz	r3, 800ecee <_fflush_r+0x42>
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecd6:	f7ff bf63 	b.w	800eba0 <__sflush_r>
 800ecda:	4b07      	ldr	r3, [pc, #28]	; (800ecf8 <_fflush_r+0x4c>)
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	d101      	bne.n	800ece4 <_fflush_r+0x38>
 800ece0:	68ac      	ldr	r4, [r5, #8]
 800ece2:	e7f1      	b.n	800ecc8 <_fflush_r+0x1c>
 800ece4:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <_fflush_r+0x50>)
 800ece6:	429c      	cmp	r4, r3
 800ece8:	bf08      	it	eq
 800ecea:	68ec      	ldreq	r4, [r5, #12]
 800ecec:	e7ec      	b.n	800ecc8 <_fflush_r+0x1c>
 800ecee:	2000      	movs	r0, #0
 800ecf0:	bd38      	pop	{r3, r4, r5, pc}
 800ecf2:	bf00      	nop
 800ecf4:	08010a68 	.word	0x08010a68
 800ecf8:	08010a88 	.word	0x08010a88
 800ecfc:	08010a48 	.word	0x08010a48

0800ed00 <std>:
 800ed00:	2300      	movs	r3, #0
 800ed02:	b510      	push	{r4, lr}
 800ed04:	4604      	mov	r4, r0
 800ed06:	e9c0 3300 	strd	r3, r3, [r0]
 800ed0a:	6083      	str	r3, [r0, #8]
 800ed0c:	8181      	strh	r1, [r0, #12]
 800ed0e:	6643      	str	r3, [r0, #100]	; 0x64
 800ed10:	81c2      	strh	r2, [r0, #14]
 800ed12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed16:	6183      	str	r3, [r0, #24]
 800ed18:	4619      	mov	r1, r3
 800ed1a:	2208      	movs	r2, #8
 800ed1c:	305c      	adds	r0, #92	; 0x5c
 800ed1e:	f7fd faa2 	bl	800c266 <memset>
 800ed22:	4b05      	ldr	r3, [pc, #20]	; (800ed38 <std+0x38>)
 800ed24:	6263      	str	r3, [r4, #36]	; 0x24
 800ed26:	4b05      	ldr	r3, [pc, #20]	; (800ed3c <std+0x3c>)
 800ed28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed2a:	4b05      	ldr	r3, [pc, #20]	; (800ed40 <std+0x40>)
 800ed2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <std+0x44>)
 800ed30:	6224      	str	r4, [r4, #32]
 800ed32:	6323      	str	r3, [r4, #48]	; 0x30
 800ed34:	bd10      	pop	{r4, pc}
 800ed36:	bf00      	nop
 800ed38:	080104b5 	.word	0x080104b5
 800ed3c:	080104d7 	.word	0x080104d7
 800ed40:	0801050f 	.word	0x0801050f
 800ed44:	08010533 	.word	0x08010533

0800ed48 <_cleanup_r>:
 800ed48:	4901      	ldr	r1, [pc, #4]	; (800ed50 <_cleanup_r+0x8>)
 800ed4a:	f000 b885 	b.w	800ee58 <_fwalk_reent>
 800ed4e:	bf00      	nop
 800ed50:	0800ecad 	.word	0x0800ecad

0800ed54 <__sfmoreglue>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	1e4a      	subs	r2, r1, #1
 800ed58:	2568      	movs	r5, #104	; 0x68
 800ed5a:	4355      	muls	r5, r2
 800ed5c:	460e      	mov	r6, r1
 800ed5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ed62:	f001 f8ab 	bl	800febc <_malloc_r>
 800ed66:	4604      	mov	r4, r0
 800ed68:	b140      	cbz	r0, 800ed7c <__sfmoreglue+0x28>
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ed70:	300c      	adds	r0, #12
 800ed72:	60a0      	str	r0, [r4, #8]
 800ed74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ed78:	f7fd fa75 	bl	800c266 <memset>
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}

0800ed80 <__sinit>:
 800ed80:	6983      	ldr	r3, [r0, #24]
 800ed82:	b510      	push	{r4, lr}
 800ed84:	4604      	mov	r4, r0
 800ed86:	bb33      	cbnz	r3, 800edd6 <__sinit+0x56>
 800ed88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ed8c:	6503      	str	r3, [r0, #80]	; 0x50
 800ed8e:	4b12      	ldr	r3, [pc, #72]	; (800edd8 <__sinit+0x58>)
 800ed90:	4a12      	ldr	r2, [pc, #72]	; (800eddc <__sinit+0x5c>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	6282      	str	r2, [r0, #40]	; 0x28
 800ed96:	4298      	cmp	r0, r3
 800ed98:	bf04      	itt	eq
 800ed9a:	2301      	moveq	r3, #1
 800ed9c:	6183      	streq	r3, [r0, #24]
 800ed9e:	f000 f81f 	bl	800ede0 <__sfp>
 800eda2:	6060      	str	r0, [r4, #4]
 800eda4:	4620      	mov	r0, r4
 800eda6:	f000 f81b 	bl	800ede0 <__sfp>
 800edaa:	60a0      	str	r0, [r4, #8]
 800edac:	4620      	mov	r0, r4
 800edae:	f000 f817 	bl	800ede0 <__sfp>
 800edb2:	2200      	movs	r2, #0
 800edb4:	60e0      	str	r0, [r4, #12]
 800edb6:	2104      	movs	r1, #4
 800edb8:	6860      	ldr	r0, [r4, #4]
 800edba:	f7ff ffa1 	bl	800ed00 <std>
 800edbe:	2201      	movs	r2, #1
 800edc0:	2109      	movs	r1, #9
 800edc2:	68a0      	ldr	r0, [r4, #8]
 800edc4:	f7ff ff9c 	bl	800ed00 <std>
 800edc8:	2202      	movs	r2, #2
 800edca:	2112      	movs	r1, #18
 800edcc:	68e0      	ldr	r0, [r4, #12]
 800edce:	f7ff ff97 	bl	800ed00 <std>
 800edd2:	2301      	movs	r3, #1
 800edd4:	61a3      	str	r3, [r4, #24]
 800edd6:	bd10      	pop	{r4, pc}
 800edd8:	080109a8 	.word	0x080109a8
 800eddc:	0800ed49 	.word	0x0800ed49

0800ede0 <__sfp>:
 800ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ede2:	4b1b      	ldr	r3, [pc, #108]	; (800ee50 <__sfp+0x70>)
 800ede4:	681e      	ldr	r6, [r3, #0]
 800ede6:	69b3      	ldr	r3, [r6, #24]
 800ede8:	4607      	mov	r7, r0
 800edea:	b913      	cbnz	r3, 800edf2 <__sfp+0x12>
 800edec:	4630      	mov	r0, r6
 800edee:	f7ff ffc7 	bl	800ed80 <__sinit>
 800edf2:	3648      	adds	r6, #72	; 0x48
 800edf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800edf8:	3b01      	subs	r3, #1
 800edfa:	d503      	bpl.n	800ee04 <__sfp+0x24>
 800edfc:	6833      	ldr	r3, [r6, #0]
 800edfe:	b133      	cbz	r3, 800ee0e <__sfp+0x2e>
 800ee00:	6836      	ldr	r6, [r6, #0]
 800ee02:	e7f7      	b.n	800edf4 <__sfp+0x14>
 800ee04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ee08:	b16d      	cbz	r5, 800ee26 <__sfp+0x46>
 800ee0a:	3468      	adds	r4, #104	; 0x68
 800ee0c:	e7f4      	b.n	800edf8 <__sfp+0x18>
 800ee0e:	2104      	movs	r1, #4
 800ee10:	4638      	mov	r0, r7
 800ee12:	f7ff ff9f 	bl	800ed54 <__sfmoreglue>
 800ee16:	6030      	str	r0, [r6, #0]
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d1f1      	bne.n	800ee00 <__sfp+0x20>
 800ee1c:	230c      	movs	r3, #12
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	4604      	mov	r4, r0
 800ee22:	4620      	mov	r0, r4
 800ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee26:	4b0b      	ldr	r3, [pc, #44]	; (800ee54 <__sfp+0x74>)
 800ee28:	6665      	str	r5, [r4, #100]	; 0x64
 800ee2a:	e9c4 5500 	strd	r5, r5, [r4]
 800ee2e:	60a5      	str	r5, [r4, #8]
 800ee30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ee34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ee38:	2208      	movs	r2, #8
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ee40:	f7fd fa11 	bl	800c266 <memset>
 800ee44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ee48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ee4c:	e7e9      	b.n	800ee22 <__sfp+0x42>
 800ee4e:	bf00      	nop
 800ee50:	080109a8 	.word	0x080109a8
 800ee54:	ffff0001 	.word	0xffff0001

0800ee58 <_fwalk_reent>:
 800ee58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee5c:	4680      	mov	r8, r0
 800ee5e:	4689      	mov	r9, r1
 800ee60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ee64:	2600      	movs	r6, #0
 800ee66:	b914      	cbnz	r4, 800ee6e <_fwalk_reent+0x16>
 800ee68:	4630      	mov	r0, r6
 800ee6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ee72:	3f01      	subs	r7, #1
 800ee74:	d501      	bpl.n	800ee7a <_fwalk_reent+0x22>
 800ee76:	6824      	ldr	r4, [r4, #0]
 800ee78:	e7f5      	b.n	800ee66 <_fwalk_reent+0xe>
 800ee7a:	89ab      	ldrh	r3, [r5, #12]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d907      	bls.n	800ee90 <_fwalk_reent+0x38>
 800ee80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ee84:	3301      	adds	r3, #1
 800ee86:	d003      	beq.n	800ee90 <_fwalk_reent+0x38>
 800ee88:	4629      	mov	r1, r5
 800ee8a:	4640      	mov	r0, r8
 800ee8c:	47c8      	blx	r9
 800ee8e:	4306      	orrs	r6, r0
 800ee90:	3568      	adds	r5, #104	; 0x68
 800ee92:	e7ee      	b.n	800ee72 <_fwalk_reent+0x1a>

0800ee94 <rshift>:
 800ee94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee96:	6906      	ldr	r6, [r0, #16]
 800ee98:	114b      	asrs	r3, r1, #5
 800ee9a:	429e      	cmp	r6, r3
 800ee9c:	f100 0414 	add.w	r4, r0, #20
 800eea0:	dd30      	ble.n	800ef04 <rshift+0x70>
 800eea2:	f011 011f 	ands.w	r1, r1, #31
 800eea6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800eeaa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800eeae:	d108      	bne.n	800eec2 <rshift+0x2e>
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	42b2      	cmp	r2, r6
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	d211      	bcs.n	800eedc <rshift+0x48>
 800eeb8:	f852 3b04 	ldr.w	r3, [r2], #4
 800eebc:	f841 3b04 	str.w	r3, [r1], #4
 800eec0:	e7f7      	b.n	800eeb2 <rshift+0x1e>
 800eec2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800eec6:	f1c1 0c20 	rsb	ip, r1, #32
 800eeca:	40cd      	lsrs	r5, r1
 800eecc:	3204      	adds	r2, #4
 800eece:	4623      	mov	r3, r4
 800eed0:	42b2      	cmp	r2, r6
 800eed2:	4617      	mov	r7, r2
 800eed4:	d30c      	bcc.n	800eef0 <rshift+0x5c>
 800eed6:	601d      	str	r5, [r3, #0]
 800eed8:	b105      	cbz	r5, 800eedc <rshift+0x48>
 800eeda:	3304      	adds	r3, #4
 800eedc:	1b1a      	subs	r2, r3, r4
 800eede:	42a3      	cmp	r3, r4
 800eee0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eee4:	bf08      	it	eq
 800eee6:	2300      	moveq	r3, #0
 800eee8:	6102      	str	r2, [r0, #16]
 800eeea:	bf08      	it	eq
 800eeec:	6143      	streq	r3, [r0, #20]
 800eeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eef0:	683f      	ldr	r7, [r7, #0]
 800eef2:	fa07 f70c 	lsl.w	r7, r7, ip
 800eef6:	433d      	orrs	r5, r7
 800eef8:	f843 5b04 	str.w	r5, [r3], #4
 800eefc:	f852 5b04 	ldr.w	r5, [r2], #4
 800ef00:	40cd      	lsrs	r5, r1
 800ef02:	e7e5      	b.n	800eed0 <rshift+0x3c>
 800ef04:	4623      	mov	r3, r4
 800ef06:	e7e9      	b.n	800eedc <rshift+0x48>

0800ef08 <__hexdig_fun>:
 800ef08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ef0c:	2b09      	cmp	r3, #9
 800ef0e:	d802      	bhi.n	800ef16 <__hexdig_fun+0xe>
 800ef10:	3820      	subs	r0, #32
 800ef12:	b2c0      	uxtb	r0, r0
 800ef14:	4770      	bx	lr
 800ef16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ef1a:	2b05      	cmp	r3, #5
 800ef1c:	d801      	bhi.n	800ef22 <__hexdig_fun+0x1a>
 800ef1e:	3847      	subs	r0, #71	; 0x47
 800ef20:	e7f7      	b.n	800ef12 <__hexdig_fun+0xa>
 800ef22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ef26:	2b05      	cmp	r3, #5
 800ef28:	d801      	bhi.n	800ef2e <__hexdig_fun+0x26>
 800ef2a:	3827      	subs	r0, #39	; 0x27
 800ef2c:	e7f1      	b.n	800ef12 <__hexdig_fun+0xa>
 800ef2e:	2000      	movs	r0, #0
 800ef30:	4770      	bx	lr

0800ef32 <__gethex>:
 800ef32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef36:	b08b      	sub	sp, #44	; 0x2c
 800ef38:	468a      	mov	sl, r1
 800ef3a:	9002      	str	r0, [sp, #8]
 800ef3c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ef3e:	9306      	str	r3, [sp, #24]
 800ef40:	4690      	mov	r8, r2
 800ef42:	f000 fad0 	bl	800f4e6 <__localeconv_l>
 800ef46:	6803      	ldr	r3, [r0, #0]
 800ef48:	9303      	str	r3, [sp, #12]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7f1 f940 	bl	80001d0 <strlen>
 800ef50:	9b03      	ldr	r3, [sp, #12]
 800ef52:	9001      	str	r0, [sp, #4]
 800ef54:	4403      	add	r3, r0
 800ef56:	f04f 0b00 	mov.w	fp, #0
 800ef5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ef5e:	9307      	str	r3, [sp, #28]
 800ef60:	f8da 3000 	ldr.w	r3, [sl]
 800ef64:	3302      	adds	r3, #2
 800ef66:	461f      	mov	r7, r3
 800ef68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ef6c:	2830      	cmp	r0, #48	; 0x30
 800ef6e:	d06c      	beq.n	800f04a <__gethex+0x118>
 800ef70:	f7ff ffca 	bl	800ef08 <__hexdig_fun>
 800ef74:	4604      	mov	r4, r0
 800ef76:	2800      	cmp	r0, #0
 800ef78:	d16a      	bne.n	800f050 <__gethex+0x11e>
 800ef7a:	9a01      	ldr	r2, [sp, #4]
 800ef7c:	9903      	ldr	r1, [sp, #12]
 800ef7e:	4638      	mov	r0, r7
 800ef80:	f001 fadb 	bl	801053a <strncmp>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d166      	bne.n	800f056 <__gethex+0x124>
 800ef88:	9b01      	ldr	r3, [sp, #4]
 800ef8a:	5cf8      	ldrb	r0, [r7, r3]
 800ef8c:	18fe      	adds	r6, r7, r3
 800ef8e:	f7ff ffbb 	bl	800ef08 <__hexdig_fun>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	d062      	beq.n	800f05c <__gethex+0x12a>
 800ef96:	4633      	mov	r3, r6
 800ef98:	7818      	ldrb	r0, [r3, #0]
 800ef9a:	2830      	cmp	r0, #48	; 0x30
 800ef9c:	461f      	mov	r7, r3
 800ef9e:	f103 0301 	add.w	r3, r3, #1
 800efa2:	d0f9      	beq.n	800ef98 <__gethex+0x66>
 800efa4:	f7ff ffb0 	bl	800ef08 <__hexdig_fun>
 800efa8:	fab0 f580 	clz	r5, r0
 800efac:	096d      	lsrs	r5, r5, #5
 800efae:	4634      	mov	r4, r6
 800efb0:	f04f 0b01 	mov.w	fp, #1
 800efb4:	463a      	mov	r2, r7
 800efb6:	4616      	mov	r6, r2
 800efb8:	3201      	adds	r2, #1
 800efba:	7830      	ldrb	r0, [r6, #0]
 800efbc:	f7ff ffa4 	bl	800ef08 <__hexdig_fun>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d1f8      	bne.n	800efb6 <__gethex+0x84>
 800efc4:	9a01      	ldr	r2, [sp, #4]
 800efc6:	9903      	ldr	r1, [sp, #12]
 800efc8:	4630      	mov	r0, r6
 800efca:	f001 fab6 	bl	801053a <strncmp>
 800efce:	b950      	cbnz	r0, 800efe6 <__gethex+0xb4>
 800efd0:	b954      	cbnz	r4, 800efe8 <__gethex+0xb6>
 800efd2:	9b01      	ldr	r3, [sp, #4]
 800efd4:	18f4      	adds	r4, r6, r3
 800efd6:	4622      	mov	r2, r4
 800efd8:	4616      	mov	r6, r2
 800efda:	3201      	adds	r2, #1
 800efdc:	7830      	ldrb	r0, [r6, #0]
 800efde:	f7ff ff93 	bl	800ef08 <__hexdig_fun>
 800efe2:	2800      	cmp	r0, #0
 800efe4:	d1f8      	bne.n	800efd8 <__gethex+0xa6>
 800efe6:	b10c      	cbz	r4, 800efec <__gethex+0xba>
 800efe8:	1ba4      	subs	r4, r4, r6
 800efea:	00a4      	lsls	r4, r4, #2
 800efec:	7833      	ldrb	r3, [r6, #0]
 800efee:	2b50      	cmp	r3, #80	; 0x50
 800eff0:	d001      	beq.n	800eff6 <__gethex+0xc4>
 800eff2:	2b70      	cmp	r3, #112	; 0x70
 800eff4:	d140      	bne.n	800f078 <__gethex+0x146>
 800eff6:	7873      	ldrb	r3, [r6, #1]
 800eff8:	2b2b      	cmp	r3, #43	; 0x2b
 800effa:	d031      	beq.n	800f060 <__gethex+0x12e>
 800effc:	2b2d      	cmp	r3, #45	; 0x2d
 800effe:	d033      	beq.n	800f068 <__gethex+0x136>
 800f000:	1c71      	adds	r1, r6, #1
 800f002:	f04f 0900 	mov.w	r9, #0
 800f006:	7808      	ldrb	r0, [r1, #0]
 800f008:	f7ff ff7e 	bl	800ef08 <__hexdig_fun>
 800f00c:	1e43      	subs	r3, r0, #1
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b18      	cmp	r3, #24
 800f012:	d831      	bhi.n	800f078 <__gethex+0x146>
 800f014:	f1a0 0210 	sub.w	r2, r0, #16
 800f018:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f01c:	f7ff ff74 	bl	800ef08 <__hexdig_fun>
 800f020:	1e43      	subs	r3, r0, #1
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b18      	cmp	r3, #24
 800f026:	d922      	bls.n	800f06e <__gethex+0x13c>
 800f028:	f1b9 0f00 	cmp.w	r9, #0
 800f02c:	d000      	beq.n	800f030 <__gethex+0xfe>
 800f02e:	4252      	negs	r2, r2
 800f030:	4414      	add	r4, r2
 800f032:	f8ca 1000 	str.w	r1, [sl]
 800f036:	b30d      	cbz	r5, 800f07c <__gethex+0x14a>
 800f038:	f1bb 0f00 	cmp.w	fp, #0
 800f03c:	bf0c      	ite	eq
 800f03e:	2706      	moveq	r7, #6
 800f040:	2700      	movne	r7, #0
 800f042:	4638      	mov	r0, r7
 800f044:	b00b      	add	sp, #44	; 0x2c
 800f046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f04a:	f10b 0b01 	add.w	fp, fp, #1
 800f04e:	e78a      	b.n	800ef66 <__gethex+0x34>
 800f050:	2500      	movs	r5, #0
 800f052:	462c      	mov	r4, r5
 800f054:	e7ae      	b.n	800efb4 <__gethex+0x82>
 800f056:	463e      	mov	r6, r7
 800f058:	2501      	movs	r5, #1
 800f05a:	e7c7      	b.n	800efec <__gethex+0xba>
 800f05c:	4604      	mov	r4, r0
 800f05e:	e7fb      	b.n	800f058 <__gethex+0x126>
 800f060:	f04f 0900 	mov.w	r9, #0
 800f064:	1cb1      	adds	r1, r6, #2
 800f066:	e7ce      	b.n	800f006 <__gethex+0xd4>
 800f068:	f04f 0901 	mov.w	r9, #1
 800f06c:	e7fa      	b.n	800f064 <__gethex+0x132>
 800f06e:	230a      	movs	r3, #10
 800f070:	fb03 0202 	mla	r2, r3, r2, r0
 800f074:	3a10      	subs	r2, #16
 800f076:	e7cf      	b.n	800f018 <__gethex+0xe6>
 800f078:	4631      	mov	r1, r6
 800f07a:	e7da      	b.n	800f032 <__gethex+0x100>
 800f07c:	1bf3      	subs	r3, r6, r7
 800f07e:	3b01      	subs	r3, #1
 800f080:	4629      	mov	r1, r5
 800f082:	2b07      	cmp	r3, #7
 800f084:	dc49      	bgt.n	800f11a <__gethex+0x1e8>
 800f086:	9802      	ldr	r0, [sp, #8]
 800f088:	f000 fabc 	bl	800f604 <_Balloc>
 800f08c:	9b01      	ldr	r3, [sp, #4]
 800f08e:	f100 0914 	add.w	r9, r0, #20
 800f092:	f04f 0b00 	mov.w	fp, #0
 800f096:	f1c3 0301 	rsb	r3, r3, #1
 800f09a:	4605      	mov	r5, r0
 800f09c:	f8cd 9010 	str.w	r9, [sp, #16]
 800f0a0:	46da      	mov	sl, fp
 800f0a2:	9308      	str	r3, [sp, #32]
 800f0a4:	42b7      	cmp	r7, r6
 800f0a6:	d33b      	bcc.n	800f120 <__gethex+0x1ee>
 800f0a8:	9804      	ldr	r0, [sp, #16]
 800f0aa:	f840 ab04 	str.w	sl, [r0], #4
 800f0ae:	eba0 0009 	sub.w	r0, r0, r9
 800f0b2:	1080      	asrs	r0, r0, #2
 800f0b4:	6128      	str	r0, [r5, #16]
 800f0b6:	0147      	lsls	r7, r0, #5
 800f0b8:	4650      	mov	r0, sl
 800f0ba:	f000 fb67 	bl	800f78c <__hi0bits>
 800f0be:	f8d8 6000 	ldr.w	r6, [r8]
 800f0c2:	1a3f      	subs	r7, r7, r0
 800f0c4:	42b7      	cmp	r7, r6
 800f0c6:	dd64      	ble.n	800f192 <__gethex+0x260>
 800f0c8:	1bbf      	subs	r7, r7, r6
 800f0ca:	4639      	mov	r1, r7
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f000 fe77 	bl	800fdc0 <__any_on>
 800f0d2:	4682      	mov	sl, r0
 800f0d4:	b178      	cbz	r0, 800f0f6 <__gethex+0x1c4>
 800f0d6:	1e7b      	subs	r3, r7, #1
 800f0d8:	1159      	asrs	r1, r3, #5
 800f0da:	f003 021f 	and.w	r2, r3, #31
 800f0de:	f04f 0a01 	mov.w	sl, #1
 800f0e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f0e6:	fa0a f202 	lsl.w	r2, sl, r2
 800f0ea:	420a      	tst	r2, r1
 800f0ec:	d003      	beq.n	800f0f6 <__gethex+0x1c4>
 800f0ee:	4553      	cmp	r3, sl
 800f0f0:	dc46      	bgt.n	800f180 <__gethex+0x24e>
 800f0f2:	f04f 0a02 	mov.w	sl, #2
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	f7ff fecb 	bl	800ee94 <rshift>
 800f0fe:	443c      	add	r4, r7
 800f100:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f104:	42a3      	cmp	r3, r4
 800f106:	da52      	bge.n	800f1ae <__gethex+0x27c>
 800f108:	4629      	mov	r1, r5
 800f10a:	9802      	ldr	r0, [sp, #8]
 800f10c:	f000 faae 	bl	800f66c <_Bfree>
 800f110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f112:	2300      	movs	r3, #0
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	27a3      	movs	r7, #163	; 0xa3
 800f118:	e793      	b.n	800f042 <__gethex+0x110>
 800f11a:	3101      	adds	r1, #1
 800f11c:	105b      	asrs	r3, r3, #1
 800f11e:	e7b0      	b.n	800f082 <__gethex+0x150>
 800f120:	1e73      	subs	r3, r6, #1
 800f122:	9305      	str	r3, [sp, #20]
 800f124:	9a07      	ldr	r2, [sp, #28]
 800f126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d018      	beq.n	800f160 <__gethex+0x22e>
 800f12e:	f1bb 0f20 	cmp.w	fp, #32
 800f132:	d107      	bne.n	800f144 <__gethex+0x212>
 800f134:	9b04      	ldr	r3, [sp, #16]
 800f136:	f8c3 a000 	str.w	sl, [r3]
 800f13a:	3304      	adds	r3, #4
 800f13c:	f04f 0a00 	mov.w	sl, #0
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	46d3      	mov	fp, sl
 800f144:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f148:	f7ff fede 	bl	800ef08 <__hexdig_fun>
 800f14c:	f000 000f 	and.w	r0, r0, #15
 800f150:	fa00 f00b 	lsl.w	r0, r0, fp
 800f154:	ea4a 0a00 	orr.w	sl, sl, r0
 800f158:	f10b 0b04 	add.w	fp, fp, #4
 800f15c:	9b05      	ldr	r3, [sp, #20]
 800f15e:	e00d      	b.n	800f17c <__gethex+0x24a>
 800f160:	9b05      	ldr	r3, [sp, #20]
 800f162:	9a08      	ldr	r2, [sp, #32]
 800f164:	4413      	add	r3, r2
 800f166:	42bb      	cmp	r3, r7
 800f168:	d3e1      	bcc.n	800f12e <__gethex+0x1fc>
 800f16a:	4618      	mov	r0, r3
 800f16c:	9a01      	ldr	r2, [sp, #4]
 800f16e:	9903      	ldr	r1, [sp, #12]
 800f170:	9309      	str	r3, [sp, #36]	; 0x24
 800f172:	f001 f9e2 	bl	801053a <strncmp>
 800f176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f178:	2800      	cmp	r0, #0
 800f17a:	d1d8      	bne.n	800f12e <__gethex+0x1fc>
 800f17c:	461e      	mov	r6, r3
 800f17e:	e791      	b.n	800f0a4 <__gethex+0x172>
 800f180:	1eb9      	subs	r1, r7, #2
 800f182:	4628      	mov	r0, r5
 800f184:	f000 fe1c 	bl	800fdc0 <__any_on>
 800f188:	2800      	cmp	r0, #0
 800f18a:	d0b2      	beq.n	800f0f2 <__gethex+0x1c0>
 800f18c:	f04f 0a03 	mov.w	sl, #3
 800f190:	e7b1      	b.n	800f0f6 <__gethex+0x1c4>
 800f192:	da09      	bge.n	800f1a8 <__gethex+0x276>
 800f194:	1bf7      	subs	r7, r6, r7
 800f196:	4629      	mov	r1, r5
 800f198:	463a      	mov	r2, r7
 800f19a:	9802      	ldr	r0, [sp, #8]
 800f19c:	f000 fc32 	bl	800fa04 <__lshift>
 800f1a0:	1be4      	subs	r4, r4, r7
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	f100 0914 	add.w	r9, r0, #20
 800f1a8:	f04f 0a00 	mov.w	sl, #0
 800f1ac:	e7a8      	b.n	800f100 <__gethex+0x1ce>
 800f1ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f1b2:	42a0      	cmp	r0, r4
 800f1b4:	dd6a      	ble.n	800f28c <__gethex+0x35a>
 800f1b6:	1b04      	subs	r4, r0, r4
 800f1b8:	42a6      	cmp	r6, r4
 800f1ba:	dc2e      	bgt.n	800f21a <__gethex+0x2e8>
 800f1bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	d022      	beq.n	800f20a <__gethex+0x2d8>
 800f1c4:	2b03      	cmp	r3, #3
 800f1c6:	d024      	beq.n	800f212 <__gethex+0x2e0>
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d115      	bne.n	800f1f8 <__gethex+0x2c6>
 800f1cc:	42a6      	cmp	r6, r4
 800f1ce:	d113      	bne.n	800f1f8 <__gethex+0x2c6>
 800f1d0:	2e01      	cmp	r6, #1
 800f1d2:	dc0b      	bgt.n	800f1ec <__gethex+0x2ba>
 800f1d4:	9a06      	ldr	r2, [sp, #24]
 800f1d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	2301      	movs	r3, #1
 800f1de:	612b      	str	r3, [r5, #16]
 800f1e0:	f8c9 3000 	str.w	r3, [r9]
 800f1e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1e6:	2762      	movs	r7, #98	; 0x62
 800f1e8:	601d      	str	r5, [r3, #0]
 800f1ea:	e72a      	b.n	800f042 <__gethex+0x110>
 800f1ec:	1e71      	subs	r1, r6, #1
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	f000 fde6 	bl	800fdc0 <__any_on>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d1ed      	bne.n	800f1d4 <__gethex+0x2a2>
 800f1f8:	4629      	mov	r1, r5
 800f1fa:	9802      	ldr	r0, [sp, #8]
 800f1fc:	f000 fa36 	bl	800f66c <_Bfree>
 800f200:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f202:	2300      	movs	r3, #0
 800f204:	6013      	str	r3, [r2, #0]
 800f206:	2750      	movs	r7, #80	; 0x50
 800f208:	e71b      	b.n	800f042 <__gethex+0x110>
 800f20a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d0e1      	beq.n	800f1d4 <__gethex+0x2a2>
 800f210:	e7f2      	b.n	800f1f8 <__gethex+0x2c6>
 800f212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f214:	2b00      	cmp	r3, #0
 800f216:	d1dd      	bne.n	800f1d4 <__gethex+0x2a2>
 800f218:	e7ee      	b.n	800f1f8 <__gethex+0x2c6>
 800f21a:	1e67      	subs	r7, r4, #1
 800f21c:	f1ba 0f00 	cmp.w	sl, #0
 800f220:	d131      	bne.n	800f286 <__gethex+0x354>
 800f222:	b127      	cbz	r7, 800f22e <__gethex+0x2fc>
 800f224:	4639      	mov	r1, r7
 800f226:	4628      	mov	r0, r5
 800f228:	f000 fdca 	bl	800fdc0 <__any_on>
 800f22c:	4682      	mov	sl, r0
 800f22e:	117a      	asrs	r2, r7, #5
 800f230:	2301      	movs	r3, #1
 800f232:	f007 071f 	and.w	r7, r7, #31
 800f236:	fa03 f707 	lsl.w	r7, r3, r7
 800f23a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f23e:	4621      	mov	r1, r4
 800f240:	421f      	tst	r7, r3
 800f242:	4628      	mov	r0, r5
 800f244:	bf18      	it	ne
 800f246:	f04a 0a02 	orrne.w	sl, sl, #2
 800f24a:	1b36      	subs	r6, r6, r4
 800f24c:	f7ff fe22 	bl	800ee94 <rshift>
 800f250:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f254:	2702      	movs	r7, #2
 800f256:	f1ba 0f00 	cmp.w	sl, #0
 800f25a:	d048      	beq.n	800f2ee <__gethex+0x3bc>
 800f25c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f260:	2b02      	cmp	r3, #2
 800f262:	d015      	beq.n	800f290 <__gethex+0x35e>
 800f264:	2b03      	cmp	r3, #3
 800f266:	d017      	beq.n	800f298 <__gethex+0x366>
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d109      	bne.n	800f280 <__gethex+0x34e>
 800f26c:	f01a 0f02 	tst.w	sl, #2
 800f270:	d006      	beq.n	800f280 <__gethex+0x34e>
 800f272:	f8d9 3000 	ldr.w	r3, [r9]
 800f276:	ea4a 0a03 	orr.w	sl, sl, r3
 800f27a:	f01a 0f01 	tst.w	sl, #1
 800f27e:	d10e      	bne.n	800f29e <__gethex+0x36c>
 800f280:	f047 0710 	orr.w	r7, r7, #16
 800f284:	e033      	b.n	800f2ee <__gethex+0x3bc>
 800f286:	f04f 0a01 	mov.w	sl, #1
 800f28a:	e7d0      	b.n	800f22e <__gethex+0x2fc>
 800f28c:	2701      	movs	r7, #1
 800f28e:	e7e2      	b.n	800f256 <__gethex+0x324>
 800f290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f292:	f1c3 0301 	rsb	r3, r3, #1
 800f296:	9315      	str	r3, [sp, #84]	; 0x54
 800f298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0f0      	beq.n	800f280 <__gethex+0x34e>
 800f29e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f2a2:	f105 0314 	add.w	r3, r5, #20
 800f2a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f2aa:	eb03 010a 	add.w	r1, r3, sl
 800f2ae:	f04f 0c00 	mov.w	ip, #0
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f2bc:	d01c      	beq.n	800f2f8 <__gethex+0x3c6>
 800f2be:	3201      	adds	r2, #1
 800f2c0:	6002      	str	r2, [r0, #0]
 800f2c2:	2f02      	cmp	r7, #2
 800f2c4:	f105 0314 	add.w	r3, r5, #20
 800f2c8:	d138      	bne.n	800f33c <__gethex+0x40a>
 800f2ca:	f8d8 2000 	ldr.w	r2, [r8]
 800f2ce:	3a01      	subs	r2, #1
 800f2d0:	42b2      	cmp	r2, r6
 800f2d2:	d10a      	bne.n	800f2ea <__gethex+0x3b8>
 800f2d4:	1171      	asrs	r1, r6, #5
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f006 061f 	and.w	r6, r6, #31
 800f2dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2e0:	fa02 f606 	lsl.w	r6, r2, r6
 800f2e4:	421e      	tst	r6, r3
 800f2e6:	bf18      	it	ne
 800f2e8:	4617      	movne	r7, r2
 800f2ea:	f047 0720 	orr.w	r7, r7, #32
 800f2ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f2f0:	601d      	str	r5, [r3, #0]
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	601c      	str	r4, [r3, #0]
 800f2f6:	e6a4      	b.n	800f042 <__gethex+0x110>
 800f2f8:	4299      	cmp	r1, r3
 800f2fa:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2fe:	d8d8      	bhi.n	800f2b2 <__gethex+0x380>
 800f300:	68ab      	ldr	r3, [r5, #8]
 800f302:	4599      	cmp	r9, r3
 800f304:	db12      	blt.n	800f32c <__gethex+0x3fa>
 800f306:	6869      	ldr	r1, [r5, #4]
 800f308:	9802      	ldr	r0, [sp, #8]
 800f30a:	3101      	adds	r1, #1
 800f30c:	f000 f97a 	bl	800f604 <_Balloc>
 800f310:	692a      	ldr	r2, [r5, #16]
 800f312:	3202      	adds	r2, #2
 800f314:	f105 010c 	add.w	r1, r5, #12
 800f318:	4683      	mov	fp, r0
 800f31a:	0092      	lsls	r2, r2, #2
 800f31c:	300c      	adds	r0, #12
 800f31e:	f7fc ff97 	bl	800c250 <memcpy>
 800f322:	4629      	mov	r1, r5
 800f324:	9802      	ldr	r0, [sp, #8]
 800f326:	f000 f9a1 	bl	800f66c <_Bfree>
 800f32a:	465d      	mov	r5, fp
 800f32c:	692b      	ldr	r3, [r5, #16]
 800f32e:	1c5a      	adds	r2, r3, #1
 800f330:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f334:	612a      	str	r2, [r5, #16]
 800f336:	2201      	movs	r2, #1
 800f338:	615a      	str	r2, [r3, #20]
 800f33a:	e7c2      	b.n	800f2c2 <__gethex+0x390>
 800f33c:	692a      	ldr	r2, [r5, #16]
 800f33e:	454a      	cmp	r2, r9
 800f340:	dd0b      	ble.n	800f35a <__gethex+0x428>
 800f342:	2101      	movs	r1, #1
 800f344:	4628      	mov	r0, r5
 800f346:	f7ff fda5 	bl	800ee94 <rshift>
 800f34a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f34e:	3401      	adds	r4, #1
 800f350:	42a3      	cmp	r3, r4
 800f352:	f6ff aed9 	blt.w	800f108 <__gethex+0x1d6>
 800f356:	2701      	movs	r7, #1
 800f358:	e7c7      	b.n	800f2ea <__gethex+0x3b8>
 800f35a:	f016 061f 	ands.w	r6, r6, #31
 800f35e:	d0fa      	beq.n	800f356 <__gethex+0x424>
 800f360:	449a      	add	sl, r3
 800f362:	f1c6 0620 	rsb	r6, r6, #32
 800f366:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f36a:	f000 fa0f 	bl	800f78c <__hi0bits>
 800f36e:	42b0      	cmp	r0, r6
 800f370:	dbe7      	blt.n	800f342 <__gethex+0x410>
 800f372:	e7f0      	b.n	800f356 <__gethex+0x424>

0800f374 <L_shift>:
 800f374:	f1c2 0208 	rsb	r2, r2, #8
 800f378:	0092      	lsls	r2, r2, #2
 800f37a:	b570      	push	{r4, r5, r6, lr}
 800f37c:	f1c2 0620 	rsb	r6, r2, #32
 800f380:	6843      	ldr	r3, [r0, #4]
 800f382:	6804      	ldr	r4, [r0, #0]
 800f384:	fa03 f506 	lsl.w	r5, r3, r6
 800f388:	432c      	orrs	r4, r5
 800f38a:	40d3      	lsrs	r3, r2
 800f38c:	6004      	str	r4, [r0, #0]
 800f38e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f392:	4288      	cmp	r0, r1
 800f394:	d3f4      	bcc.n	800f380 <L_shift+0xc>
 800f396:	bd70      	pop	{r4, r5, r6, pc}

0800f398 <__match>:
 800f398:	b530      	push	{r4, r5, lr}
 800f39a:	6803      	ldr	r3, [r0, #0]
 800f39c:	3301      	adds	r3, #1
 800f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3a2:	b914      	cbnz	r4, 800f3aa <__match+0x12>
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	2001      	movs	r0, #1
 800f3a8:	bd30      	pop	{r4, r5, pc}
 800f3aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f3b2:	2d19      	cmp	r5, #25
 800f3b4:	bf98      	it	ls
 800f3b6:	3220      	addls	r2, #32
 800f3b8:	42a2      	cmp	r2, r4
 800f3ba:	d0f0      	beq.n	800f39e <__match+0x6>
 800f3bc:	2000      	movs	r0, #0
 800f3be:	e7f3      	b.n	800f3a8 <__match+0x10>

0800f3c0 <__hexnan>:
 800f3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3c4:	680b      	ldr	r3, [r1, #0]
 800f3c6:	6801      	ldr	r1, [r0, #0]
 800f3c8:	115f      	asrs	r7, r3, #5
 800f3ca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f3ce:	f013 031f 	ands.w	r3, r3, #31
 800f3d2:	b087      	sub	sp, #28
 800f3d4:	bf18      	it	ne
 800f3d6:	3704      	addne	r7, #4
 800f3d8:	2500      	movs	r5, #0
 800f3da:	1f3e      	subs	r6, r7, #4
 800f3dc:	4682      	mov	sl, r0
 800f3de:	4690      	mov	r8, r2
 800f3e0:	9301      	str	r3, [sp, #4]
 800f3e2:	f847 5c04 	str.w	r5, [r7, #-4]
 800f3e6:	46b1      	mov	r9, r6
 800f3e8:	4634      	mov	r4, r6
 800f3ea:	9502      	str	r5, [sp, #8]
 800f3ec:	46ab      	mov	fp, r5
 800f3ee:	784a      	ldrb	r2, [r1, #1]
 800f3f0:	1c4b      	adds	r3, r1, #1
 800f3f2:	9303      	str	r3, [sp, #12]
 800f3f4:	b342      	cbz	r2, 800f448 <__hexnan+0x88>
 800f3f6:	4610      	mov	r0, r2
 800f3f8:	9105      	str	r1, [sp, #20]
 800f3fa:	9204      	str	r2, [sp, #16]
 800f3fc:	f7ff fd84 	bl	800ef08 <__hexdig_fun>
 800f400:	2800      	cmp	r0, #0
 800f402:	d143      	bne.n	800f48c <__hexnan+0xcc>
 800f404:	9a04      	ldr	r2, [sp, #16]
 800f406:	9905      	ldr	r1, [sp, #20]
 800f408:	2a20      	cmp	r2, #32
 800f40a:	d818      	bhi.n	800f43e <__hexnan+0x7e>
 800f40c:	9b02      	ldr	r3, [sp, #8]
 800f40e:	459b      	cmp	fp, r3
 800f410:	dd13      	ble.n	800f43a <__hexnan+0x7a>
 800f412:	454c      	cmp	r4, r9
 800f414:	d206      	bcs.n	800f424 <__hexnan+0x64>
 800f416:	2d07      	cmp	r5, #7
 800f418:	dc04      	bgt.n	800f424 <__hexnan+0x64>
 800f41a:	462a      	mov	r2, r5
 800f41c:	4649      	mov	r1, r9
 800f41e:	4620      	mov	r0, r4
 800f420:	f7ff ffa8 	bl	800f374 <L_shift>
 800f424:	4544      	cmp	r4, r8
 800f426:	d944      	bls.n	800f4b2 <__hexnan+0xf2>
 800f428:	2300      	movs	r3, #0
 800f42a:	f1a4 0904 	sub.w	r9, r4, #4
 800f42e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f432:	f8cd b008 	str.w	fp, [sp, #8]
 800f436:	464c      	mov	r4, r9
 800f438:	461d      	mov	r5, r3
 800f43a:	9903      	ldr	r1, [sp, #12]
 800f43c:	e7d7      	b.n	800f3ee <__hexnan+0x2e>
 800f43e:	2a29      	cmp	r2, #41	; 0x29
 800f440:	d14a      	bne.n	800f4d8 <__hexnan+0x118>
 800f442:	3102      	adds	r1, #2
 800f444:	f8ca 1000 	str.w	r1, [sl]
 800f448:	f1bb 0f00 	cmp.w	fp, #0
 800f44c:	d044      	beq.n	800f4d8 <__hexnan+0x118>
 800f44e:	454c      	cmp	r4, r9
 800f450:	d206      	bcs.n	800f460 <__hexnan+0xa0>
 800f452:	2d07      	cmp	r5, #7
 800f454:	dc04      	bgt.n	800f460 <__hexnan+0xa0>
 800f456:	462a      	mov	r2, r5
 800f458:	4649      	mov	r1, r9
 800f45a:	4620      	mov	r0, r4
 800f45c:	f7ff ff8a 	bl	800f374 <L_shift>
 800f460:	4544      	cmp	r4, r8
 800f462:	d928      	bls.n	800f4b6 <__hexnan+0xf6>
 800f464:	4643      	mov	r3, r8
 800f466:	f854 2b04 	ldr.w	r2, [r4], #4
 800f46a:	f843 2b04 	str.w	r2, [r3], #4
 800f46e:	42a6      	cmp	r6, r4
 800f470:	d2f9      	bcs.n	800f466 <__hexnan+0xa6>
 800f472:	2200      	movs	r2, #0
 800f474:	f843 2b04 	str.w	r2, [r3], #4
 800f478:	429e      	cmp	r6, r3
 800f47a:	d2fb      	bcs.n	800f474 <__hexnan+0xb4>
 800f47c:	6833      	ldr	r3, [r6, #0]
 800f47e:	b91b      	cbnz	r3, 800f488 <__hexnan+0xc8>
 800f480:	4546      	cmp	r6, r8
 800f482:	d127      	bne.n	800f4d4 <__hexnan+0x114>
 800f484:	2301      	movs	r3, #1
 800f486:	6033      	str	r3, [r6, #0]
 800f488:	2005      	movs	r0, #5
 800f48a:	e026      	b.n	800f4da <__hexnan+0x11a>
 800f48c:	3501      	adds	r5, #1
 800f48e:	2d08      	cmp	r5, #8
 800f490:	f10b 0b01 	add.w	fp, fp, #1
 800f494:	dd06      	ble.n	800f4a4 <__hexnan+0xe4>
 800f496:	4544      	cmp	r4, r8
 800f498:	d9cf      	bls.n	800f43a <__hexnan+0x7a>
 800f49a:	2300      	movs	r3, #0
 800f49c:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4a0:	2501      	movs	r5, #1
 800f4a2:	3c04      	subs	r4, #4
 800f4a4:	6822      	ldr	r2, [r4, #0]
 800f4a6:	f000 000f 	and.w	r0, r0, #15
 800f4aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f4ae:	6020      	str	r0, [r4, #0]
 800f4b0:	e7c3      	b.n	800f43a <__hexnan+0x7a>
 800f4b2:	2508      	movs	r5, #8
 800f4b4:	e7c1      	b.n	800f43a <__hexnan+0x7a>
 800f4b6:	9b01      	ldr	r3, [sp, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d0df      	beq.n	800f47c <__hexnan+0xbc>
 800f4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c0:	f1c3 0320 	rsb	r3, r3, #32
 800f4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f4cc:	401a      	ands	r2, r3
 800f4ce:	f847 2c04 	str.w	r2, [r7, #-4]
 800f4d2:	e7d3      	b.n	800f47c <__hexnan+0xbc>
 800f4d4:	3e04      	subs	r6, #4
 800f4d6:	e7d1      	b.n	800f47c <__hexnan+0xbc>
 800f4d8:	2004      	movs	r0, #4
 800f4da:	b007      	add	sp, #28
 800f4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4e0 <__locale_ctype_ptr_l>:
 800f4e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800f4e4:	4770      	bx	lr

0800f4e6 <__localeconv_l>:
 800f4e6:	30f0      	adds	r0, #240	; 0xf0
 800f4e8:	4770      	bx	lr
	...

0800f4ec <_localeconv_r>:
 800f4ec:	4b04      	ldr	r3, [pc, #16]	; (800f500 <_localeconv_r+0x14>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6a18      	ldr	r0, [r3, #32]
 800f4f2:	4b04      	ldr	r3, [pc, #16]	; (800f504 <_localeconv_r+0x18>)
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	bf08      	it	eq
 800f4f8:	4618      	moveq	r0, r3
 800f4fa:	30f0      	adds	r0, #240	; 0xf0
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	20000040 	.word	0x20000040
 800f504:	200000a4 	.word	0x200000a4

0800f508 <__swhatbuf_r>:
 800f508:	b570      	push	{r4, r5, r6, lr}
 800f50a:	460e      	mov	r6, r1
 800f50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f510:	2900      	cmp	r1, #0
 800f512:	b096      	sub	sp, #88	; 0x58
 800f514:	4614      	mov	r4, r2
 800f516:	461d      	mov	r5, r3
 800f518:	da07      	bge.n	800f52a <__swhatbuf_r+0x22>
 800f51a:	2300      	movs	r3, #0
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	89b3      	ldrh	r3, [r6, #12]
 800f520:	061a      	lsls	r2, r3, #24
 800f522:	d410      	bmi.n	800f546 <__swhatbuf_r+0x3e>
 800f524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f528:	e00e      	b.n	800f548 <__swhatbuf_r+0x40>
 800f52a:	466a      	mov	r2, sp
 800f52c:	f001 f846 	bl	80105bc <_fstat_r>
 800f530:	2800      	cmp	r0, #0
 800f532:	dbf2      	blt.n	800f51a <__swhatbuf_r+0x12>
 800f534:	9a01      	ldr	r2, [sp, #4]
 800f536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f53a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f53e:	425a      	negs	r2, r3
 800f540:	415a      	adcs	r2, r3
 800f542:	602a      	str	r2, [r5, #0]
 800f544:	e7ee      	b.n	800f524 <__swhatbuf_r+0x1c>
 800f546:	2340      	movs	r3, #64	; 0x40
 800f548:	2000      	movs	r0, #0
 800f54a:	6023      	str	r3, [r4, #0]
 800f54c:	b016      	add	sp, #88	; 0x58
 800f54e:	bd70      	pop	{r4, r5, r6, pc}

0800f550 <__smakebuf_r>:
 800f550:	898b      	ldrh	r3, [r1, #12]
 800f552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f554:	079d      	lsls	r5, r3, #30
 800f556:	4606      	mov	r6, r0
 800f558:	460c      	mov	r4, r1
 800f55a:	d507      	bpl.n	800f56c <__smakebuf_r+0x1c>
 800f55c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f560:	6023      	str	r3, [r4, #0]
 800f562:	6123      	str	r3, [r4, #16]
 800f564:	2301      	movs	r3, #1
 800f566:	6163      	str	r3, [r4, #20]
 800f568:	b002      	add	sp, #8
 800f56a:	bd70      	pop	{r4, r5, r6, pc}
 800f56c:	ab01      	add	r3, sp, #4
 800f56e:	466a      	mov	r2, sp
 800f570:	f7ff ffca 	bl	800f508 <__swhatbuf_r>
 800f574:	9900      	ldr	r1, [sp, #0]
 800f576:	4605      	mov	r5, r0
 800f578:	4630      	mov	r0, r6
 800f57a:	f000 fc9f 	bl	800febc <_malloc_r>
 800f57e:	b948      	cbnz	r0, 800f594 <__smakebuf_r+0x44>
 800f580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f584:	059a      	lsls	r2, r3, #22
 800f586:	d4ef      	bmi.n	800f568 <__smakebuf_r+0x18>
 800f588:	f023 0303 	bic.w	r3, r3, #3
 800f58c:	f043 0302 	orr.w	r3, r3, #2
 800f590:	81a3      	strh	r3, [r4, #12]
 800f592:	e7e3      	b.n	800f55c <__smakebuf_r+0xc>
 800f594:	4b0d      	ldr	r3, [pc, #52]	; (800f5cc <__smakebuf_r+0x7c>)
 800f596:	62b3      	str	r3, [r6, #40]	; 0x28
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	6020      	str	r0, [r4, #0]
 800f59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a0:	81a3      	strh	r3, [r4, #12]
 800f5a2:	9b00      	ldr	r3, [sp, #0]
 800f5a4:	6163      	str	r3, [r4, #20]
 800f5a6:	9b01      	ldr	r3, [sp, #4]
 800f5a8:	6120      	str	r0, [r4, #16]
 800f5aa:	b15b      	cbz	r3, 800f5c4 <__smakebuf_r+0x74>
 800f5ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5b0:	4630      	mov	r0, r6
 800f5b2:	f001 f815 	bl	80105e0 <_isatty_r>
 800f5b6:	b128      	cbz	r0, 800f5c4 <__smakebuf_r+0x74>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	f043 0301 	orr.w	r3, r3, #1
 800f5c2:	81a3      	strh	r3, [r4, #12]
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	431d      	orrs	r5, r3
 800f5c8:	81a5      	strh	r5, [r4, #12]
 800f5ca:	e7cd      	b.n	800f568 <__smakebuf_r+0x18>
 800f5cc:	0800ed49 	.word	0x0800ed49

0800f5d0 <malloc>:
 800f5d0:	4b02      	ldr	r3, [pc, #8]	; (800f5dc <malloc+0xc>)
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	6818      	ldr	r0, [r3, #0]
 800f5d6:	f000 bc71 	b.w	800febc <_malloc_r>
 800f5da:	bf00      	nop
 800f5dc:	20000040 	.word	0x20000040

0800f5e0 <__ascii_mbtowc>:
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	b901      	cbnz	r1, 800f5e6 <__ascii_mbtowc+0x6>
 800f5e4:	a901      	add	r1, sp, #4
 800f5e6:	b142      	cbz	r2, 800f5fa <__ascii_mbtowc+0x1a>
 800f5e8:	b14b      	cbz	r3, 800f5fe <__ascii_mbtowc+0x1e>
 800f5ea:	7813      	ldrb	r3, [r2, #0]
 800f5ec:	600b      	str	r3, [r1, #0]
 800f5ee:	7812      	ldrb	r2, [r2, #0]
 800f5f0:	1c10      	adds	r0, r2, #0
 800f5f2:	bf18      	it	ne
 800f5f4:	2001      	movne	r0, #1
 800f5f6:	b002      	add	sp, #8
 800f5f8:	4770      	bx	lr
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	e7fb      	b.n	800f5f6 <__ascii_mbtowc+0x16>
 800f5fe:	f06f 0001 	mvn.w	r0, #1
 800f602:	e7f8      	b.n	800f5f6 <__ascii_mbtowc+0x16>

0800f604 <_Balloc>:
 800f604:	b570      	push	{r4, r5, r6, lr}
 800f606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f608:	4604      	mov	r4, r0
 800f60a:	460e      	mov	r6, r1
 800f60c:	b93d      	cbnz	r5, 800f61e <_Balloc+0x1a>
 800f60e:	2010      	movs	r0, #16
 800f610:	f7ff ffde 	bl	800f5d0 <malloc>
 800f614:	6260      	str	r0, [r4, #36]	; 0x24
 800f616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f61a:	6005      	str	r5, [r0, #0]
 800f61c:	60c5      	str	r5, [r0, #12]
 800f61e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f620:	68eb      	ldr	r3, [r5, #12]
 800f622:	b183      	cbz	r3, 800f646 <_Balloc+0x42>
 800f624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f62c:	b9b8      	cbnz	r0, 800f65e <_Balloc+0x5a>
 800f62e:	2101      	movs	r1, #1
 800f630:	fa01 f506 	lsl.w	r5, r1, r6
 800f634:	1d6a      	adds	r2, r5, #5
 800f636:	0092      	lsls	r2, r2, #2
 800f638:	4620      	mov	r0, r4
 800f63a:	f000 fbe2 	bl	800fe02 <_calloc_r>
 800f63e:	b160      	cbz	r0, 800f65a <_Balloc+0x56>
 800f640:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f644:	e00e      	b.n	800f664 <_Balloc+0x60>
 800f646:	2221      	movs	r2, #33	; 0x21
 800f648:	2104      	movs	r1, #4
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 fbd9 	bl	800fe02 <_calloc_r>
 800f650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f652:	60e8      	str	r0, [r5, #12]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d1e4      	bne.n	800f624 <_Balloc+0x20>
 800f65a:	2000      	movs	r0, #0
 800f65c:	bd70      	pop	{r4, r5, r6, pc}
 800f65e:	6802      	ldr	r2, [r0, #0]
 800f660:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f664:	2300      	movs	r3, #0
 800f666:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f66a:	e7f7      	b.n	800f65c <_Balloc+0x58>

0800f66c <_Bfree>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f670:	4606      	mov	r6, r0
 800f672:	460d      	mov	r5, r1
 800f674:	b93c      	cbnz	r4, 800f686 <_Bfree+0x1a>
 800f676:	2010      	movs	r0, #16
 800f678:	f7ff ffaa 	bl	800f5d0 <malloc>
 800f67c:	6270      	str	r0, [r6, #36]	; 0x24
 800f67e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f682:	6004      	str	r4, [r0, #0]
 800f684:	60c4      	str	r4, [r0, #12]
 800f686:	b13d      	cbz	r5, 800f698 <_Bfree+0x2c>
 800f688:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f68a:	686a      	ldr	r2, [r5, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f692:	6029      	str	r1, [r5, #0]
 800f694:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f698:	bd70      	pop	{r4, r5, r6, pc}

0800f69a <__multadd>:
 800f69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f69e:	690d      	ldr	r5, [r1, #16]
 800f6a0:	461f      	mov	r7, r3
 800f6a2:	4606      	mov	r6, r0
 800f6a4:	460c      	mov	r4, r1
 800f6a6:	f101 0c14 	add.w	ip, r1, #20
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	f8dc 0000 	ldr.w	r0, [ip]
 800f6b0:	b281      	uxth	r1, r0
 800f6b2:	fb02 7101 	mla	r1, r2, r1, r7
 800f6b6:	0c0f      	lsrs	r7, r1, #16
 800f6b8:	0c00      	lsrs	r0, r0, #16
 800f6ba:	fb02 7000 	mla	r0, r2, r0, r7
 800f6be:	b289      	uxth	r1, r1
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f6c6:	429d      	cmp	r5, r3
 800f6c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f6cc:	f84c 1b04 	str.w	r1, [ip], #4
 800f6d0:	dcec      	bgt.n	800f6ac <__multadd+0x12>
 800f6d2:	b1d7      	cbz	r7, 800f70a <__multadd+0x70>
 800f6d4:	68a3      	ldr	r3, [r4, #8]
 800f6d6:	42ab      	cmp	r3, r5
 800f6d8:	dc12      	bgt.n	800f700 <__multadd+0x66>
 800f6da:	6861      	ldr	r1, [r4, #4]
 800f6dc:	4630      	mov	r0, r6
 800f6de:	3101      	adds	r1, #1
 800f6e0:	f7ff ff90 	bl	800f604 <_Balloc>
 800f6e4:	6922      	ldr	r2, [r4, #16]
 800f6e6:	3202      	adds	r2, #2
 800f6e8:	f104 010c 	add.w	r1, r4, #12
 800f6ec:	4680      	mov	r8, r0
 800f6ee:	0092      	lsls	r2, r2, #2
 800f6f0:	300c      	adds	r0, #12
 800f6f2:	f7fc fdad 	bl	800c250 <memcpy>
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7ff ffb7 	bl	800f66c <_Bfree>
 800f6fe:	4644      	mov	r4, r8
 800f700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f704:	3501      	adds	r5, #1
 800f706:	615f      	str	r7, [r3, #20]
 800f708:	6125      	str	r5, [r4, #16]
 800f70a:	4620      	mov	r0, r4
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f710 <__s2b>:
 800f710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f714:	460c      	mov	r4, r1
 800f716:	4615      	mov	r5, r2
 800f718:	461f      	mov	r7, r3
 800f71a:	2209      	movs	r2, #9
 800f71c:	3308      	adds	r3, #8
 800f71e:	4606      	mov	r6, r0
 800f720:	fb93 f3f2 	sdiv	r3, r3, r2
 800f724:	2100      	movs	r1, #0
 800f726:	2201      	movs	r2, #1
 800f728:	429a      	cmp	r2, r3
 800f72a:	db20      	blt.n	800f76e <__s2b+0x5e>
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7ff ff69 	bl	800f604 <_Balloc>
 800f732:	9b08      	ldr	r3, [sp, #32]
 800f734:	6143      	str	r3, [r0, #20]
 800f736:	2d09      	cmp	r5, #9
 800f738:	f04f 0301 	mov.w	r3, #1
 800f73c:	6103      	str	r3, [r0, #16]
 800f73e:	dd19      	ble.n	800f774 <__s2b+0x64>
 800f740:	f104 0809 	add.w	r8, r4, #9
 800f744:	46c1      	mov	r9, r8
 800f746:	442c      	add	r4, r5
 800f748:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f74c:	4601      	mov	r1, r0
 800f74e:	3b30      	subs	r3, #48	; 0x30
 800f750:	220a      	movs	r2, #10
 800f752:	4630      	mov	r0, r6
 800f754:	f7ff ffa1 	bl	800f69a <__multadd>
 800f758:	45a1      	cmp	r9, r4
 800f75a:	d1f5      	bne.n	800f748 <__s2b+0x38>
 800f75c:	eb08 0405 	add.w	r4, r8, r5
 800f760:	3c08      	subs	r4, #8
 800f762:	1b2d      	subs	r5, r5, r4
 800f764:	1963      	adds	r3, r4, r5
 800f766:	42bb      	cmp	r3, r7
 800f768:	db07      	blt.n	800f77a <__s2b+0x6a>
 800f76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f76e:	0052      	lsls	r2, r2, #1
 800f770:	3101      	adds	r1, #1
 800f772:	e7d9      	b.n	800f728 <__s2b+0x18>
 800f774:	340a      	adds	r4, #10
 800f776:	2509      	movs	r5, #9
 800f778:	e7f3      	b.n	800f762 <__s2b+0x52>
 800f77a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f77e:	4601      	mov	r1, r0
 800f780:	3b30      	subs	r3, #48	; 0x30
 800f782:	220a      	movs	r2, #10
 800f784:	4630      	mov	r0, r6
 800f786:	f7ff ff88 	bl	800f69a <__multadd>
 800f78a:	e7eb      	b.n	800f764 <__s2b+0x54>

0800f78c <__hi0bits>:
 800f78c:	0c02      	lsrs	r2, r0, #16
 800f78e:	0412      	lsls	r2, r2, #16
 800f790:	4603      	mov	r3, r0
 800f792:	b9b2      	cbnz	r2, 800f7c2 <__hi0bits+0x36>
 800f794:	0403      	lsls	r3, r0, #16
 800f796:	2010      	movs	r0, #16
 800f798:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f79c:	bf04      	itt	eq
 800f79e:	021b      	lsleq	r3, r3, #8
 800f7a0:	3008      	addeq	r0, #8
 800f7a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f7a6:	bf04      	itt	eq
 800f7a8:	011b      	lsleq	r3, r3, #4
 800f7aa:	3004      	addeq	r0, #4
 800f7ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f7b0:	bf04      	itt	eq
 800f7b2:	009b      	lsleq	r3, r3, #2
 800f7b4:	3002      	addeq	r0, #2
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	db06      	blt.n	800f7c8 <__hi0bits+0x3c>
 800f7ba:	005b      	lsls	r3, r3, #1
 800f7bc:	d503      	bpl.n	800f7c6 <__hi0bits+0x3a>
 800f7be:	3001      	adds	r0, #1
 800f7c0:	4770      	bx	lr
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	e7e8      	b.n	800f798 <__hi0bits+0xc>
 800f7c6:	2020      	movs	r0, #32
 800f7c8:	4770      	bx	lr

0800f7ca <__lo0bits>:
 800f7ca:	6803      	ldr	r3, [r0, #0]
 800f7cc:	f013 0207 	ands.w	r2, r3, #7
 800f7d0:	4601      	mov	r1, r0
 800f7d2:	d00b      	beq.n	800f7ec <__lo0bits+0x22>
 800f7d4:	07da      	lsls	r2, r3, #31
 800f7d6:	d423      	bmi.n	800f820 <__lo0bits+0x56>
 800f7d8:	0798      	lsls	r0, r3, #30
 800f7da:	bf49      	itett	mi
 800f7dc:	085b      	lsrmi	r3, r3, #1
 800f7de:	089b      	lsrpl	r3, r3, #2
 800f7e0:	2001      	movmi	r0, #1
 800f7e2:	600b      	strmi	r3, [r1, #0]
 800f7e4:	bf5c      	itt	pl
 800f7e6:	600b      	strpl	r3, [r1, #0]
 800f7e8:	2002      	movpl	r0, #2
 800f7ea:	4770      	bx	lr
 800f7ec:	b298      	uxth	r0, r3
 800f7ee:	b9a8      	cbnz	r0, 800f81c <__lo0bits+0x52>
 800f7f0:	0c1b      	lsrs	r3, r3, #16
 800f7f2:	2010      	movs	r0, #16
 800f7f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f7f8:	bf04      	itt	eq
 800f7fa:	0a1b      	lsreq	r3, r3, #8
 800f7fc:	3008      	addeq	r0, #8
 800f7fe:	071a      	lsls	r2, r3, #28
 800f800:	bf04      	itt	eq
 800f802:	091b      	lsreq	r3, r3, #4
 800f804:	3004      	addeq	r0, #4
 800f806:	079a      	lsls	r2, r3, #30
 800f808:	bf04      	itt	eq
 800f80a:	089b      	lsreq	r3, r3, #2
 800f80c:	3002      	addeq	r0, #2
 800f80e:	07da      	lsls	r2, r3, #31
 800f810:	d402      	bmi.n	800f818 <__lo0bits+0x4e>
 800f812:	085b      	lsrs	r3, r3, #1
 800f814:	d006      	beq.n	800f824 <__lo0bits+0x5a>
 800f816:	3001      	adds	r0, #1
 800f818:	600b      	str	r3, [r1, #0]
 800f81a:	4770      	bx	lr
 800f81c:	4610      	mov	r0, r2
 800f81e:	e7e9      	b.n	800f7f4 <__lo0bits+0x2a>
 800f820:	2000      	movs	r0, #0
 800f822:	4770      	bx	lr
 800f824:	2020      	movs	r0, #32
 800f826:	4770      	bx	lr

0800f828 <__i2b>:
 800f828:	b510      	push	{r4, lr}
 800f82a:	460c      	mov	r4, r1
 800f82c:	2101      	movs	r1, #1
 800f82e:	f7ff fee9 	bl	800f604 <_Balloc>
 800f832:	2201      	movs	r2, #1
 800f834:	6144      	str	r4, [r0, #20]
 800f836:	6102      	str	r2, [r0, #16]
 800f838:	bd10      	pop	{r4, pc}

0800f83a <__multiply>:
 800f83a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83e:	4614      	mov	r4, r2
 800f840:	690a      	ldr	r2, [r1, #16]
 800f842:	6923      	ldr	r3, [r4, #16]
 800f844:	429a      	cmp	r2, r3
 800f846:	bfb8      	it	lt
 800f848:	460b      	movlt	r3, r1
 800f84a:	4688      	mov	r8, r1
 800f84c:	bfbc      	itt	lt
 800f84e:	46a0      	movlt	r8, r4
 800f850:	461c      	movlt	r4, r3
 800f852:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f856:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f85e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f862:	eb07 0609 	add.w	r6, r7, r9
 800f866:	42b3      	cmp	r3, r6
 800f868:	bfb8      	it	lt
 800f86a:	3101      	addlt	r1, #1
 800f86c:	f7ff feca 	bl	800f604 <_Balloc>
 800f870:	f100 0514 	add.w	r5, r0, #20
 800f874:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f878:	462b      	mov	r3, r5
 800f87a:	2200      	movs	r2, #0
 800f87c:	4573      	cmp	r3, lr
 800f87e:	d316      	bcc.n	800f8ae <__multiply+0x74>
 800f880:	f104 0214 	add.w	r2, r4, #20
 800f884:	f108 0114 	add.w	r1, r8, #20
 800f888:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f88c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f890:	9300      	str	r3, [sp, #0]
 800f892:	9b00      	ldr	r3, [sp, #0]
 800f894:	9201      	str	r2, [sp, #4]
 800f896:	4293      	cmp	r3, r2
 800f898:	d80c      	bhi.n	800f8b4 <__multiply+0x7a>
 800f89a:	2e00      	cmp	r6, #0
 800f89c:	dd03      	ble.n	800f8a6 <__multiply+0x6c>
 800f89e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d05d      	beq.n	800f962 <__multiply+0x128>
 800f8a6:	6106      	str	r6, [r0, #16]
 800f8a8:	b003      	add	sp, #12
 800f8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ae:	f843 2b04 	str.w	r2, [r3], #4
 800f8b2:	e7e3      	b.n	800f87c <__multiply+0x42>
 800f8b4:	f8b2 b000 	ldrh.w	fp, [r2]
 800f8b8:	f1bb 0f00 	cmp.w	fp, #0
 800f8bc:	d023      	beq.n	800f906 <__multiply+0xcc>
 800f8be:	4689      	mov	r9, r1
 800f8c0:	46ac      	mov	ip, r5
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	f859 4b04 	ldr.w	r4, [r9], #4
 800f8ca:	f8dc a000 	ldr.w	sl, [ip]
 800f8ce:	b2a3      	uxth	r3, r4
 800f8d0:	fa1f fa8a 	uxth.w	sl, sl
 800f8d4:	fb0b a303 	mla	r3, fp, r3, sl
 800f8d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f8dc:	f8dc 4000 	ldr.w	r4, [ip]
 800f8e0:	4443      	add	r3, r8
 800f8e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f8e6:	fb0b 840a 	mla	r4, fp, sl, r8
 800f8ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f8ee:	46e2      	mov	sl, ip
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f8f6:	454f      	cmp	r7, r9
 800f8f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f8fc:	f84a 3b04 	str.w	r3, [sl], #4
 800f900:	d82b      	bhi.n	800f95a <__multiply+0x120>
 800f902:	f8cc 8004 	str.w	r8, [ip, #4]
 800f906:	9b01      	ldr	r3, [sp, #4]
 800f908:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f90c:	3204      	adds	r2, #4
 800f90e:	f1ba 0f00 	cmp.w	sl, #0
 800f912:	d020      	beq.n	800f956 <__multiply+0x11c>
 800f914:	682b      	ldr	r3, [r5, #0]
 800f916:	4689      	mov	r9, r1
 800f918:	46a8      	mov	r8, r5
 800f91a:	f04f 0b00 	mov.w	fp, #0
 800f91e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f922:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f926:	fb0a 440c 	mla	r4, sl, ip, r4
 800f92a:	445c      	add	r4, fp
 800f92c:	46c4      	mov	ip, r8
 800f92e:	b29b      	uxth	r3, r3
 800f930:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f934:	f84c 3b04 	str.w	r3, [ip], #4
 800f938:	f859 3b04 	ldr.w	r3, [r9], #4
 800f93c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f940:	0c1b      	lsrs	r3, r3, #16
 800f942:	fb0a b303 	mla	r3, sl, r3, fp
 800f946:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f94a:	454f      	cmp	r7, r9
 800f94c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f950:	d805      	bhi.n	800f95e <__multiply+0x124>
 800f952:	f8c8 3004 	str.w	r3, [r8, #4]
 800f956:	3504      	adds	r5, #4
 800f958:	e79b      	b.n	800f892 <__multiply+0x58>
 800f95a:	46d4      	mov	ip, sl
 800f95c:	e7b3      	b.n	800f8c6 <__multiply+0x8c>
 800f95e:	46e0      	mov	r8, ip
 800f960:	e7dd      	b.n	800f91e <__multiply+0xe4>
 800f962:	3e01      	subs	r6, #1
 800f964:	e799      	b.n	800f89a <__multiply+0x60>
	...

0800f968 <__pow5mult>:
 800f968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f96c:	4615      	mov	r5, r2
 800f96e:	f012 0203 	ands.w	r2, r2, #3
 800f972:	4606      	mov	r6, r0
 800f974:	460f      	mov	r7, r1
 800f976:	d007      	beq.n	800f988 <__pow5mult+0x20>
 800f978:	3a01      	subs	r2, #1
 800f97a:	4c21      	ldr	r4, [pc, #132]	; (800fa00 <__pow5mult+0x98>)
 800f97c:	2300      	movs	r3, #0
 800f97e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f982:	f7ff fe8a 	bl	800f69a <__multadd>
 800f986:	4607      	mov	r7, r0
 800f988:	10ad      	asrs	r5, r5, #2
 800f98a:	d035      	beq.n	800f9f8 <__pow5mult+0x90>
 800f98c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f98e:	b93c      	cbnz	r4, 800f9a0 <__pow5mult+0x38>
 800f990:	2010      	movs	r0, #16
 800f992:	f7ff fe1d 	bl	800f5d0 <malloc>
 800f996:	6270      	str	r0, [r6, #36]	; 0x24
 800f998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f99c:	6004      	str	r4, [r0, #0]
 800f99e:	60c4      	str	r4, [r0, #12]
 800f9a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9a8:	b94c      	cbnz	r4, 800f9be <__pow5mult+0x56>
 800f9aa:	f240 2171 	movw	r1, #625	; 0x271
 800f9ae:	4630      	mov	r0, r6
 800f9b0:	f7ff ff3a 	bl	800f828 <__i2b>
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	6003      	str	r3, [r0, #0]
 800f9be:	f04f 0800 	mov.w	r8, #0
 800f9c2:	07eb      	lsls	r3, r5, #31
 800f9c4:	d50a      	bpl.n	800f9dc <__pow5mult+0x74>
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7ff ff35 	bl	800f83a <__multiply>
 800f9d0:	4639      	mov	r1, r7
 800f9d2:	4681      	mov	r9, r0
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f7ff fe49 	bl	800f66c <_Bfree>
 800f9da:	464f      	mov	r7, r9
 800f9dc:	106d      	asrs	r5, r5, #1
 800f9de:	d00b      	beq.n	800f9f8 <__pow5mult+0x90>
 800f9e0:	6820      	ldr	r0, [r4, #0]
 800f9e2:	b938      	cbnz	r0, 800f9f4 <__pow5mult+0x8c>
 800f9e4:	4622      	mov	r2, r4
 800f9e6:	4621      	mov	r1, r4
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ff26 	bl	800f83a <__multiply>
 800f9ee:	6020      	str	r0, [r4, #0]
 800f9f0:	f8c0 8000 	str.w	r8, [r0]
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	e7e4      	b.n	800f9c2 <__pow5mult+0x5a>
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9fe:	bf00      	nop
 800fa00:	08010ba8 	.word	0x08010ba8

0800fa04 <__lshift>:
 800fa04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa08:	460c      	mov	r4, r1
 800fa0a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa0e:	6923      	ldr	r3, [r4, #16]
 800fa10:	6849      	ldr	r1, [r1, #4]
 800fa12:	eb0a 0903 	add.w	r9, sl, r3
 800fa16:	68a3      	ldr	r3, [r4, #8]
 800fa18:	4607      	mov	r7, r0
 800fa1a:	4616      	mov	r6, r2
 800fa1c:	f109 0501 	add.w	r5, r9, #1
 800fa20:	42ab      	cmp	r3, r5
 800fa22:	db32      	blt.n	800fa8a <__lshift+0x86>
 800fa24:	4638      	mov	r0, r7
 800fa26:	f7ff fded 	bl	800f604 <_Balloc>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	4680      	mov	r8, r0
 800fa2e:	f100 0114 	add.w	r1, r0, #20
 800fa32:	461a      	mov	r2, r3
 800fa34:	4553      	cmp	r3, sl
 800fa36:	db2b      	blt.n	800fa90 <__lshift+0x8c>
 800fa38:	6920      	ldr	r0, [r4, #16]
 800fa3a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa3e:	f104 0314 	add.w	r3, r4, #20
 800fa42:	f016 021f 	ands.w	r2, r6, #31
 800fa46:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa4a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa4e:	d025      	beq.n	800fa9c <__lshift+0x98>
 800fa50:	f1c2 0e20 	rsb	lr, r2, #32
 800fa54:	2000      	movs	r0, #0
 800fa56:	681e      	ldr	r6, [r3, #0]
 800fa58:	468a      	mov	sl, r1
 800fa5a:	4096      	lsls	r6, r2
 800fa5c:	4330      	orrs	r0, r6
 800fa5e:	f84a 0b04 	str.w	r0, [sl], #4
 800fa62:	f853 0b04 	ldr.w	r0, [r3], #4
 800fa66:	459c      	cmp	ip, r3
 800fa68:	fa20 f00e 	lsr.w	r0, r0, lr
 800fa6c:	d814      	bhi.n	800fa98 <__lshift+0x94>
 800fa6e:	6048      	str	r0, [r1, #4]
 800fa70:	b108      	cbz	r0, 800fa76 <__lshift+0x72>
 800fa72:	f109 0502 	add.w	r5, r9, #2
 800fa76:	3d01      	subs	r5, #1
 800fa78:	4638      	mov	r0, r7
 800fa7a:	f8c8 5010 	str.w	r5, [r8, #16]
 800fa7e:	4621      	mov	r1, r4
 800fa80:	f7ff fdf4 	bl	800f66c <_Bfree>
 800fa84:	4640      	mov	r0, r8
 800fa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa8a:	3101      	adds	r1, #1
 800fa8c:	005b      	lsls	r3, r3, #1
 800fa8e:	e7c7      	b.n	800fa20 <__lshift+0x1c>
 800fa90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fa94:	3301      	adds	r3, #1
 800fa96:	e7cd      	b.n	800fa34 <__lshift+0x30>
 800fa98:	4651      	mov	r1, sl
 800fa9a:	e7dc      	b.n	800fa56 <__lshift+0x52>
 800fa9c:	3904      	subs	r1, #4
 800fa9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800faa2:	f841 2f04 	str.w	r2, [r1, #4]!
 800faa6:	459c      	cmp	ip, r3
 800faa8:	d8f9      	bhi.n	800fa9e <__lshift+0x9a>
 800faaa:	e7e4      	b.n	800fa76 <__lshift+0x72>

0800faac <__mcmp>:
 800faac:	6903      	ldr	r3, [r0, #16]
 800faae:	690a      	ldr	r2, [r1, #16]
 800fab0:	1a9b      	subs	r3, r3, r2
 800fab2:	b530      	push	{r4, r5, lr}
 800fab4:	d10c      	bne.n	800fad0 <__mcmp+0x24>
 800fab6:	0092      	lsls	r2, r2, #2
 800fab8:	3014      	adds	r0, #20
 800faba:	3114      	adds	r1, #20
 800fabc:	1884      	adds	r4, r0, r2
 800fabe:	4411      	add	r1, r2
 800fac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fac8:	4295      	cmp	r5, r2
 800faca:	d003      	beq.n	800fad4 <__mcmp+0x28>
 800facc:	d305      	bcc.n	800fada <__mcmp+0x2e>
 800face:	2301      	movs	r3, #1
 800fad0:	4618      	mov	r0, r3
 800fad2:	bd30      	pop	{r4, r5, pc}
 800fad4:	42a0      	cmp	r0, r4
 800fad6:	d3f3      	bcc.n	800fac0 <__mcmp+0x14>
 800fad8:	e7fa      	b.n	800fad0 <__mcmp+0x24>
 800fada:	f04f 33ff 	mov.w	r3, #4294967295
 800fade:	e7f7      	b.n	800fad0 <__mcmp+0x24>

0800fae0 <__mdiff>:
 800fae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	460d      	mov	r5, r1
 800fae6:	4607      	mov	r7, r0
 800fae8:	4611      	mov	r1, r2
 800faea:	4628      	mov	r0, r5
 800faec:	4614      	mov	r4, r2
 800faee:	f7ff ffdd 	bl	800faac <__mcmp>
 800faf2:	1e06      	subs	r6, r0, #0
 800faf4:	d108      	bne.n	800fb08 <__mdiff+0x28>
 800faf6:	4631      	mov	r1, r6
 800faf8:	4638      	mov	r0, r7
 800fafa:	f7ff fd83 	bl	800f604 <_Balloc>
 800fafe:	2301      	movs	r3, #1
 800fb00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb08:	bfa4      	itt	ge
 800fb0a:	4623      	movge	r3, r4
 800fb0c:	462c      	movge	r4, r5
 800fb0e:	4638      	mov	r0, r7
 800fb10:	6861      	ldr	r1, [r4, #4]
 800fb12:	bfa6      	itte	ge
 800fb14:	461d      	movge	r5, r3
 800fb16:	2600      	movge	r6, #0
 800fb18:	2601      	movlt	r6, #1
 800fb1a:	f7ff fd73 	bl	800f604 <_Balloc>
 800fb1e:	692b      	ldr	r3, [r5, #16]
 800fb20:	60c6      	str	r6, [r0, #12]
 800fb22:	6926      	ldr	r6, [r4, #16]
 800fb24:	f105 0914 	add.w	r9, r5, #20
 800fb28:	f104 0214 	add.w	r2, r4, #20
 800fb2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fb30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fb34:	f100 0514 	add.w	r5, r0, #20
 800fb38:	f04f 0e00 	mov.w	lr, #0
 800fb3c:	f852 ab04 	ldr.w	sl, [r2], #4
 800fb40:	f859 4b04 	ldr.w	r4, [r9], #4
 800fb44:	fa1e f18a 	uxtah	r1, lr, sl
 800fb48:	b2a3      	uxth	r3, r4
 800fb4a:	1ac9      	subs	r1, r1, r3
 800fb4c:	0c23      	lsrs	r3, r4, #16
 800fb4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fb52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fb56:	b289      	uxth	r1, r1
 800fb58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fb5c:	45c8      	cmp	r8, r9
 800fb5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fb62:	4694      	mov	ip, r2
 800fb64:	f845 3b04 	str.w	r3, [r5], #4
 800fb68:	d8e8      	bhi.n	800fb3c <__mdiff+0x5c>
 800fb6a:	45bc      	cmp	ip, r7
 800fb6c:	d304      	bcc.n	800fb78 <__mdiff+0x98>
 800fb6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fb72:	b183      	cbz	r3, 800fb96 <__mdiff+0xb6>
 800fb74:	6106      	str	r6, [r0, #16]
 800fb76:	e7c5      	b.n	800fb04 <__mdiff+0x24>
 800fb78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fb7c:	fa1e f381 	uxtah	r3, lr, r1
 800fb80:	141a      	asrs	r2, r3, #16
 800fb82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fb86:	b29b      	uxth	r3, r3
 800fb88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fb90:	f845 3b04 	str.w	r3, [r5], #4
 800fb94:	e7e9      	b.n	800fb6a <__mdiff+0x8a>
 800fb96:	3e01      	subs	r6, #1
 800fb98:	e7e9      	b.n	800fb6e <__mdiff+0x8e>
	...

0800fb9c <__ulp>:
 800fb9c:	4b12      	ldr	r3, [pc, #72]	; (800fbe8 <__ulp+0x4c>)
 800fb9e:	ee10 2a90 	vmov	r2, s1
 800fba2:	401a      	ands	r2, r3
 800fba4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	dd04      	ble.n	800fbb6 <__ulp+0x1a>
 800fbac:	2000      	movs	r0, #0
 800fbae:	4619      	mov	r1, r3
 800fbb0:	ec41 0b10 	vmov	d0, r0, r1
 800fbb4:	4770      	bx	lr
 800fbb6:	425b      	negs	r3, r3
 800fbb8:	151b      	asrs	r3, r3, #20
 800fbba:	2b13      	cmp	r3, #19
 800fbbc:	f04f 0000 	mov.w	r0, #0
 800fbc0:	f04f 0100 	mov.w	r1, #0
 800fbc4:	dc04      	bgt.n	800fbd0 <__ulp+0x34>
 800fbc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fbca:	fa42 f103 	asr.w	r1, r2, r3
 800fbce:	e7ef      	b.n	800fbb0 <__ulp+0x14>
 800fbd0:	3b14      	subs	r3, #20
 800fbd2:	2b1e      	cmp	r3, #30
 800fbd4:	f04f 0201 	mov.w	r2, #1
 800fbd8:	bfda      	itte	le
 800fbda:	f1c3 031f 	rsble	r3, r3, #31
 800fbde:	fa02 f303 	lslle.w	r3, r2, r3
 800fbe2:	4613      	movgt	r3, r2
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	e7e3      	b.n	800fbb0 <__ulp+0x14>
 800fbe8:	7ff00000 	.word	0x7ff00000

0800fbec <__b2d>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	6905      	ldr	r5, [r0, #16]
 800fbf0:	f100 0714 	add.w	r7, r0, #20
 800fbf4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fbf8:	1f2e      	subs	r6, r5, #4
 800fbfa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f7ff fdc4 	bl	800f78c <__hi0bits>
 800fc04:	f1c0 0320 	rsb	r3, r0, #32
 800fc08:	280a      	cmp	r0, #10
 800fc0a:	600b      	str	r3, [r1, #0]
 800fc0c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fc84 <__b2d+0x98>
 800fc10:	dc14      	bgt.n	800fc3c <__b2d+0x50>
 800fc12:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc16:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc1a:	42b7      	cmp	r7, r6
 800fc1c:	ea41 030c 	orr.w	r3, r1, ip
 800fc20:	bf34      	ite	cc
 800fc22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc26:	2100      	movcs	r1, #0
 800fc28:	3015      	adds	r0, #21
 800fc2a:	fa04 f000 	lsl.w	r0, r4, r0
 800fc2e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc32:	ea40 0201 	orr.w	r2, r0, r1
 800fc36:	ec43 2b10 	vmov	d0, r2, r3
 800fc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc3c:	42b7      	cmp	r7, r6
 800fc3e:	bf3a      	itte	cc
 800fc40:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc48:	2100      	movcs	r1, #0
 800fc4a:	380b      	subs	r0, #11
 800fc4c:	d015      	beq.n	800fc7a <__b2d+0x8e>
 800fc4e:	4084      	lsls	r4, r0
 800fc50:	f1c0 0520 	rsb	r5, r0, #32
 800fc54:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fc58:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fc5c:	42be      	cmp	r6, r7
 800fc5e:	fa21 fc05 	lsr.w	ip, r1, r5
 800fc62:	ea44 030c 	orr.w	r3, r4, ip
 800fc66:	bf8c      	ite	hi
 800fc68:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc6c:	2400      	movls	r4, #0
 800fc6e:	fa01 f000 	lsl.w	r0, r1, r0
 800fc72:	40ec      	lsrs	r4, r5
 800fc74:	ea40 0204 	orr.w	r2, r0, r4
 800fc78:	e7dd      	b.n	800fc36 <__b2d+0x4a>
 800fc7a:	ea44 030c 	orr.w	r3, r4, ip
 800fc7e:	460a      	mov	r2, r1
 800fc80:	e7d9      	b.n	800fc36 <__b2d+0x4a>
 800fc82:	bf00      	nop
 800fc84:	3ff00000 	.word	0x3ff00000

0800fc88 <__d2b>:
 800fc88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc8c:	460e      	mov	r6, r1
 800fc8e:	2101      	movs	r1, #1
 800fc90:	ec59 8b10 	vmov	r8, r9, d0
 800fc94:	4615      	mov	r5, r2
 800fc96:	f7ff fcb5 	bl	800f604 <_Balloc>
 800fc9a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fc9e:	4607      	mov	r7, r0
 800fca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fca4:	bb34      	cbnz	r4, 800fcf4 <__d2b+0x6c>
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	f1b8 0300 	subs.w	r3, r8, #0
 800fcac:	d027      	beq.n	800fcfe <__d2b+0x76>
 800fcae:	a802      	add	r0, sp, #8
 800fcb0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fcb4:	f7ff fd89 	bl	800f7ca <__lo0bits>
 800fcb8:	9900      	ldr	r1, [sp, #0]
 800fcba:	b1f0      	cbz	r0, 800fcfa <__d2b+0x72>
 800fcbc:	9a01      	ldr	r2, [sp, #4]
 800fcbe:	f1c0 0320 	rsb	r3, r0, #32
 800fcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc6:	430b      	orrs	r3, r1
 800fcc8:	40c2      	lsrs	r2, r0
 800fcca:	617b      	str	r3, [r7, #20]
 800fccc:	9201      	str	r2, [sp, #4]
 800fcce:	9b01      	ldr	r3, [sp, #4]
 800fcd0:	61bb      	str	r3, [r7, #24]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	bf14      	ite	ne
 800fcd6:	2102      	movne	r1, #2
 800fcd8:	2101      	moveq	r1, #1
 800fcda:	6139      	str	r1, [r7, #16]
 800fcdc:	b1c4      	cbz	r4, 800fd10 <__d2b+0x88>
 800fcde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fce2:	4404      	add	r4, r0
 800fce4:	6034      	str	r4, [r6, #0]
 800fce6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcea:	6028      	str	r0, [r5, #0]
 800fcec:	4638      	mov	r0, r7
 800fcee:	b003      	add	sp, #12
 800fcf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcf8:	e7d5      	b.n	800fca6 <__d2b+0x1e>
 800fcfa:	6179      	str	r1, [r7, #20]
 800fcfc:	e7e7      	b.n	800fcce <__d2b+0x46>
 800fcfe:	a801      	add	r0, sp, #4
 800fd00:	f7ff fd63 	bl	800f7ca <__lo0bits>
 800fd04:	9b01      	ldr	r3, [sp, #4]
 800fd06:	617b      	str	r3, [r7, #20]
 800fd08:	2101      	movs	r1, #1
 800fd0a:	6139      	str	r1, [r7, #16]
 800fd0c:	3020      	adds	r0, #32
 800fd0e:	e7e5      	b.n	800fcdc <__d2b+0x54>
 800fd10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fd14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd18:	6030      	str	r0, [r6, #0]
 800fd1a:	6918      	ldr	r0, [r3, #16]
 800fd1c:	f7ff fd36 	bl	800f78c <__hi0bits>
 800fd20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fd24:	e7e1      	b.n	800fcea <__d2b+0x62>

0800fd26 <__ratio>:
 800fd26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd2a:	4688      	mov	r8, r1
 800fd2c:	4669      	mov	r1, sp
 800fd2e:	4681      	mov	r9, r0
 800fd30:	f7ff ff5c 	bl	800fbec <__b2d>
 800fd34:	a901      	add	r1, sp, #4
 800fd36:	4640      	mov	r0, r8
 800fd38:	ec57 6b10 	vmov	r6, r7, d0
 800fd3c:	f7ff ff56 	bl	800fbec <__b2d>
 800fd40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd48:	eba3 0c02 	sub.w	ip, r3, r2
 800fd4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd50:	1a9b      	subs	r3, r3, r2
 800fd52:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd56:	ec5b ab10 	vmov	sl, fp, d0
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	bfce      	itee	gt
 800fd5e:	463a      	movgt	r2, r7
 800fd60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd64:	465a      	movle	r2, fp
 800fd66:	4659      	mov	r1, fp
 800fd68:	463d      	mov	r5, r7
 800fd6a:	bfd4      	ite	le
 800fd6c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fd70:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fd74:	4630      	mov	r0, r6
 800fd76:	ee10 2a10 	vmov	r2, s0
 800fd7a:	460b      	mov	r3, r1
 800fd7c:	4629      	mov	r1, r5
 800fd7e:	f7f0 fd65 	bl	800084c <__aeabi_ddiv>
 800fd82:	ec41 0b10 	vmov	d0, r0, r1
 800fd86:	b003      	add	sp, #12
 800fd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd8c <__copybits>:
 800fd8c:	3901      	subs	r1, #1
 800fd8e:	b510      	push	{r4, lr}
 800fd90:	1149      	asrs	r1, r1, #5
 800fd92:	6914      	ldr	r4, [r2, #16]
 800fd94:	3101      	adds	r1, #1
 800fd96:	f102 0314 	add.w	r3, r2, #20
 800fd9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fda2:	42a3      	cmp	r3, r4
 800fda4:	4602      	mov	r2, r0
 800fda6:	d303      	bcc.n	800fdb0 <__copybits+0x24>
 800fda8:	2300      	movs	r3, #0
 800fdaa:	428a      	cmp	r2, r1
 800fdac:	d305      	bcc.n	800fdba <__copybits+0x2e>
 800fdae:	bd10      	pop	{r4, pc}
 800fdb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdb4:	f840 2b04 	str.w	r2, [r0], #4
 800fdb8:	e7f3      	b.n	800fda2 <__copybits+0x16>
 800fdba:	f842 3b04 	str.w	r3, [r2], #4
 800fdbe:	e7f4      	b.n	800fdaa <__copybits+0x1e>

0800fdc0 <__any_on>:
 800fdc0:	f100 0214 	add.w	r2, r0, #20
 800fdc4:	6900      	ldr	r0, [r0, #16]
 800fdc6:	114b      	asrs	r3, r1, #5
 800fdc8:	4298      	cmp	r0, r3
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	db11      	blt.n	800fdf2 <__any_on+0x32>
 800fdce:	dd0a      	ble.n	800fde6 <__any_on+0x26>
 800fdd0:	f011 011f 	ands.w	r1, r1, #31
 800fdd4:	d007      	beq.n	800fde6 <__any_on+0x26>
 800fdd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fdda:	fa24 f001 	lsr.w	r0, r4, r1
 800fdde:	fa00 f101 	lsl.w	r1, r0, r1
 800fde2:	428c      	cmp	r4, r1
 800fde4:	d10b      	bne.n	800fdfe <__any_on+0x3e>
 800fde6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d803      	bhi.n	800fdf6 <__any_on+0x36>
 800fdee:	2000      	movs	r0, #0
 800fdf0:	bd10      	pop	{r4, pc}
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	e7f7      	b.n	800fde6 <__any_on+0x26>
 800fdf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdfa:	2900      	cmp	r1, #0
 800fdfc:	d0f5      	beq.n	800fdea <__any_on+0x2a>
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e7f6      	b.n	800fdf0 <__any_on+0x30>

0800fe02 <_calloc_r>:
 800fe02:	b538      	push	{r3, r4, r5, lr}
 800fe04:	fb02 f401 	mul.w	r4, r2, r1
 800fe08:	4621      	mov	r1, r4
 800fe0a:	f000 f857 	bl	800febc <_malloc_r>
 800fe0e:	4605      	mov	r5, r0
 800fe10:	b118      	cbz	r0, 800fe1a <_calloc_r+0x18>
 800fe12:	4622      	mov	r2, r4
 800fe14:	2100      	movs	r1, #0
 800fe16:	f7fc fa26 	bl	800c266 <memset>
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fe20 <_free_r>:
 800fe20:	b538      	push	{r3, r4, r5, lr}
 800fe22:	4605      	mov	r5, r0
 800fe24:	2900      	cmp	r1, #0
 800fe26:	d045      	beq.n	800feb4 <_free_r+0x94>
 800fe28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe2c:	1f0c      	subs	r4, r1, #4
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	bfb8      	it	lt
 800fe32:	18e4      	addlt	r4, r4, r3
 800fe34:	f000 fc0f 	bl	8010656 <__malloc_lock>
 800fe38:	4a1f      	ldr	r2, [pc, #124]	; (800feb8 <_free_r+0x98>)
 800fe3a:	6813      	ldr	r3, [r2, #0]
 800fe3c:	4610      	mov	r0, r2
 800fe3e:	b933      	cbnz	r3, 800fe4e <_free_r+0x2e>
 800fe40:	6063      	str	r3, [r4, #4]
 800fe42:	6014      	str	r4, [r2, #0]
 800fe44:	4628      	mov	r0, r5
 800fe46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe4a:	f000 bc05 	b.w	8010658 <__malloc_unlock>
 800fe4e:	42a3      	cmp	r3, r4
 800fe50:	d90c      	bls.n	800fe6c <_free_r+0x4c>
 800fe52:	6821      	ldr	r1, [r4, #0]
 800fe54:	1862      	adds	r2, r4, r1
 800fe56:	4293      	cmp	r3, r2
 800fe58:	bf04      	itt	eq
 800fe5a:	681a      	ldreq	r2, [r3, #0]
 800fe5c:	685b      	ldreq	r3, [r3, #4]
 800fe5e:	6063      	str	r3, [r4, #4]
 800fe60:	bf04      	itt	eq
 800fe62:	1852      	addeq	r2, r2, r1
 800fe64:	6022      	streq	r2, [r4, #0]
 800fe66:	6004      	str	r4, [r0, #0]
 800fe68:	e7ec      	b.n	800fe44 <_free_r+0x24>
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	b10a      	cbz	r2, 800fe74 <_free_r+0x54>
 800fe70:	42a2      	cmp	r2, r4
 800fe72:	d9fa      	bls.n	800fe6a <_free_r+0x4a>
 800fe74:	6819      	ldr	r1, [r3, #0]
 800fe76:	1858      	adds	r0, r3, r1
 800fe78:	42a0      	cmp	r0, r4
 800fe7a:	d10b      	bne.n	800fe94 <_free_r+0x74>
 800fe7c:	6820      	ldr	r0, [r4, #0]
 800fe7e:	4401      	add	r1, r0
 800fe80:	1858      	adds	r0, r3, r1
 800fe82:	4282      	cmp	r2, r0
 800fe84:	6019      	str	r1, [r3, #0]
 800fe86:	d1dd      	bne.n	800fe44 <_free_r+0x24>
 800fe88:	6810      	ldr	r0, [r2, #0]
 800fe8a:	6852      	ldr	r2, [r2, #4]
 800fe8c:	605a      	str	r2, [r3, #4]
 800fe8e:	4401      	add	r1, r0
 800fe90:	6019      	str	r1, [r3, #0]
 800fe92:	e7d7      	b.n	800fe44 <_free_r+0x24>
 800fe94:	d902      	bls.n	800fe9c <_free_r+0x7c>
 800fe96:	230c      	movs	r3, #12
 800fe98:	602b      	str	r3, [r5, #0]
 800fe9a:	e7d3      	b.n	800fe44 <_free_r+0x24>
 800fe9c:	6820      	ldr	r0, [r4, #0]
 800fe9e:	1821      	adds	r1, r4, r0
 800fea0:	428a      	cmp	r2, r1
 800fea2:	bf04      	itt	eq
 800fea4:	6811      	ldreq	r1, [r2, #0]
 800fea6:	6852      	ldreq	r2, [r2, #4]
 800fea8:	6062      	str	r2, [r4, #4]
 800feaa:	bf04      	itt	eq
 800feac:	1809      	addeq	r1, r1, r0
 800feae:	6021      	streq	r1, [r4, #0]
 800feb0:	605c      	str	r4, [r3, #4]
 800feb2:	e7c7      	b.n	800fe44 <_free_r+0x24>
 800feb4:	bd38      	pop	{r3, r4, r5, pc}
 800feb6:	bf00      	nop
 800feb8:	20015f30 	.word	0x20015f30

0800febc <_malloc_r>:
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	1ccd      	adds	r5, r1, #3
 800fec0:	f025 0503 	bic.w	r5, r5, #3
 800fec4:	3508      	adds	r5, #8
 800fec6:	2d0c      	cmp	r5, #12
 800fec8:	bf38      	it	cc
 800feca:	250c      	movcc	r5, #12
 800fecc:	2d00      	cmp	r5, #0
 800fece:	4606      	mov	r6, r0
 800fed0:	db01      	blt.n	800fed6 <_malloc_r+0x1a>
 800fed2:	42a9      	cmp	r1, r5
 800fed4:	d903      	bls.n	800fede <_malloc_r+0x22>
 800fed6:	230c      	movs	r3, #12
 800fed8:	6033      	str	r3, [r6, #0]
 800feda:	2000      	movs	r0, #0
 800fedc:	bd70      	pop	{r4, r5, r6, pc}
 800fede:	f000 fbba 	bl	8010656 <__malloc_lock>
 800fee2:	4a21      	ldr	r2, [pc, #132]	; (800ff68 <_malloc_r+0xac>)
 800fee4:	6814      	ldr	r4, [r2, #0]
 800fee6:	4621      	mov	r1, r4
 800fee8:	b991      	cbnz	r1, 800ff10 <_malloc_r+0x54>
 800feea:	4c20      	ldr	r4, [pc, #128]	; (800ff6c <_malloc_r+0xb0>)
 800feec:	6823      	ldr	r3, [r4, #0]
 800feee:	b91b      	cbnz	r3, 800fef8 <_malloc_r+0x3c>
 800fef0:	4630      	mov	r0, r6
 800fef2:	f000 facf 	bl	8010494 <_sbrk_r>
 800fef6:	6020      	str	r0, [r4, #0]
 800fef8:	4629      	mov	r1, r5
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 faca 	bl	8010494 <_sbrk_r>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d124      	bne.n	800ff4e <_malloc_r+0x92>
 800ff04:	230c      	movs	r3, #12
 800ff06:	6033      	str	r3, [r6, #0]
 800ff08:	4630      	mov	r0, r6
 800ff0a:	f000 fba5 	bl	8010658 <__malloc_unlock>
 800ff0e:	e7e4      	b.n	800feda <_malloc_r+0x1e>
 800ff10:	680b      	ldr	r3, [r1, #0]
 800ff12:	1b5b      	subs	r3, r3, r5
 800ff14:	d418      	bmi.n	800ff48 <_malloc_r+0x8c>
 800ff16:	2b0b      	cmp	r3, #11
 800ff18:	d90f      	bls.n	800ff3a <_malloc_r+0x7e>
 800ff1a:	600b      	str	r3, [r1, #0]
 800ff1c:	50cd      	str	r5, [r1, r3]
 800ff1e:	18cc      	adds	r4, r1, r3
 800ff20:	4630      	mov	r0, r6
 800ff22:	f000 fb99 	bl	8010658 <__malloc_unlock>
 800ff26:	f104 000b 	add.w	r0, r4, #11
 800ff2a:	1d23      	adds	r3, r4, #4
 800ff2c:	f020 0007 	bic.w	r0, r0, #7
 800ff30:	1ac3      	subs	r3, r0, r3
 800ff32:	d0d3      	beq.n	800fedc <_malloc_r+0x20>
 800ff34:	425a      	negs	r2, r3
 800ff36:	50e2      	str	r2, [r4, r3]
 800ff38:	e7d0      	b.n	800fedc <_malloc_r+0x20>
 800ff3a:	428c      	cmp	r4, r1
 800ff3c:	684b      	ldr	r3, [r1, #4]
 800ff3e:	bf16      	itet	ne
 800ff40:	6063      	strne	r3, [r4, #4]
 800ff42:	6013      	streq	r3, [r2, #0]
 800ff44:	460c      	movne	r4, r1
 800ff46:	e7eb      	b.n	800ff20 <_malloc_r+0x64>
 800ff48:	460c      	mov	r4, r1
 800ff4a:	6849      	ldr	r1, [r1, #4]
 800ff4c:	e7cc      	b.n	800fee8 <_malloc_r+0x2c>
 800ff4e:	1cc4      	adds	r4, r0, #3
 800ff50:	f024 0403 	bic.w	r4, r4, #3
 800ff54:	42a0      	cmp	r0, r4
 800ff56:	d005      	beq.n	800ff64 <_malloc_r+0xa8>
 800ff58:	1a21      	subs	r1, r4, r0
 800ff5a:	4630      	mov	r0, r6
 800ff5c:	f000 fa9a 	bl	8010494 <_sbrk_r>
 800ff60:	3001      	adds	r0, #1
 800ff62:	d0cf      	beq.n	800ff04 <_malloc_r+0x48>
 800ff64:	6025      	str	r5, [r4, #0]
 800ff66:	e7db      	b.n	800ff20 <_malloc_r+0x64>
 800ff68:	20015f30 	.word	0x20015f30
 800ff6c:	20015f34 	.word	0x20015f34

0800ff70 <__ssputs_r>:
 800ff70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff74:	688e      	ldr	r6, [r1, #8]
 800ff76:	429e      	cmp	r6, r3
 800ff78:	4682      	mov	sl, r0
 800ff7a:	460c      	mov	r4, r1
 800ff7c:	4690      	mov	r8, r2
 800ff7e:	4699      	mov	r9, r3
 800ff80:	d837      	bhi.n	800fff2 <__ssputs_r+0x82>
 800ff82:	898a      	ldrh	r2, [r1, #12]
 800ff84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ff88:	d031      	beq.n	800ffee <__ssputs_r+0x7e>
 800ff8a:	6825      	ldr	r5, [r4, #0]
 800ff8c:	6909      	ldr	r1, [r1, #16]
 800ff8e:	1a6f      	subs	r7, r5, r1
 800ff90:	6965      	ldr	r5, [r4, #20]
 800ff92:	2302      	movs	r3, #2
 800ff94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff98:	fb95 f5f3 	sdiv	r5, r5, r3
 800ff9c:	f109 0301 	add.w	r3, r9, #1
 800ffa0:	443b      	add	r3, r7
 800ffa2:	429d      	cmp	r5, r3
 800ffa4:	bf38      	it	cc
 800ffa6:	461d      	movcc	r5, r3
 800ffa8:	0553      	lsls	r3, r2, #21
 800ffaa:	d530      	bpl.n	801000e <__ssputs_r+0x9e>
 800ffac:	4629      	mov	r1, r5
 800ffae:	f7ff ff85 	bl	800febc <_malloc_r>
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	b950      	cbnz	r0, 800ffcc <__ssputs_r+0x5c>
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	f8ca 3000 	str.w	r3, [sl]
 800ffbc:	89a3      	ldrh	r3, [r4, #12]
 800ffbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffc2:	81a3      	strh	r3, [r4, #12]
 800ffc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffcc:	463a      	mov	r2, r7
 800ffce:	6921      	ldr	r1, [r4, #16]
 800ffd0:	f7fc f93e 	bl	800c250 <memcpy>
 800ffd4:	89a3      	ldrh	r3, [r4, #12]
 800ffd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffde:	81a3      	strh	r3, [r4, #12]
 800ffe0:	6126      	str	r6, [r4, #16]
 800ffe2:	6165      	str	r5, [r4, #20]
 800ffe4:	443e      	add	r6, r7
 800ffe6:	1bed      	subs	r5, r5, r7
 800ffe8:	6026      	str	r6, [r4, #0]
 800ffea:	60a5      	str	r5, [r4, #8]
 800ffec:	464e      	mov	r6, r9
 800ffee:	454e      	cmp	r6, r9
 800fff0:	d900      	bls.n	800fff4 <__ssputs_r+0x84>
 800fff2:	464e      	mov	r6, r9
 800fff4:	4632      	mov	r2, r6
 800fff6:	4641      	mov	r1, r8
 800fff8:	6820      	ldr	r0, [r4, #0]
 800fffa:	f000 fb13 	bl	8010624 <memmove>
 800fffe:	68a3      	ldr	r3, [r4, #8]
 8010000:	1b9b      	subs	r3, r3, r6
 8010002:	60a3      	str	r3, [r4, #8]
 8010004:	6823      	ldr	r3, [r4, #0]
 8010006:	441e      	add	r6, r3
 8010008:	6026      	str	r6, [r4, #0]
 801000a:	2000      	movs	r0, #0
 801000c:	e7dc      	b.n	800ffc8 <__ssputs_r+0x58>
 801000e:	462a      	mov	r2, r5
 8010010:	f000 fb23 	bl	801065a <_realloc_r>
 8010014:	4606      	mov	r6, r0
 8010016:	2800      	cmp	r0, #0
 8010018:	d1e2      	bne.n	800ffe0 <__ssputs_r+0x70>
 801001a:	6921      	ldr	r1, [r4, #16]
 801001c:	4650      	mov	r0, sl
 801001e:	f7ff feff 	bl	800fe20 <_free_r>
 8010022:	e7c8      	b.n	800ffb6 <__ssputs_r+0x46>

08010024 <_svfiprintf_r>:
 8010024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010028:	461d      	mov	r5, r3
 801002a:	898b      	ldrh	r3, [r1, #12]
 801002c:	061f      	lsls	r7, r3, #24
 801002e:	b09d      	sub	sp, #116	; 0x74
 8010030:	4680      	mov	r8, r0
 8010032:	460c      	mov	r4, r1
 8010034:	4616      	mov	r6, r2
 8010036:	d50f      	bpl.n	8010058 <_svfiprintf_r+0x34>
 8010038:	690b      	ldr	r3, [r1, #16]
 801003a:	b96b      	cbnz	r3, 8010058 <_svfiprintf_r+0x34>
 801003c:	2140      	movs	r1, #64	; 0x40
 801003e:	f7ff ff3d 	bl	800febc <_malloc_r>
 8010042:	6020      	str	r0, [r4, #0]
 8010044:	6120      	str	r0, [r4, #16]
 8010046:	b928      	cbnz	r0, 8010054 <_svfiprintf_r+0x30>
 8010048:	230c      	movs	r3, #12
 801004a:	f8c8 3000 	str.w	r3, [r8]
 801004e:	f04f 30ff 	mov.w	r0, #4294967295
 8010052:	e0c8      	b.n	80101e6 <_svfiprintf_r+0x1c2>
 8010054:	2340      	movs	r3, #64	; 0x40
 8010056:	6163      	str	r3, [r4, #20]
 8010058:	2300      	movs	r3, #0
 801005a:	9309      	str	r3, [sp, #36]	; 0x24
 801005c:	2320      	movs	r3, #32
 801005e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010062:	2330      	movs	r3, #48	; 0x30
 8010064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010068:	9503      	str	r5, [sp, #12]
 801006a:	f04f 0b01 	mov.w	fp, #1
 801006e:	4637      	mov	r7, r6
 8010070:	463d      	mov	r5, r7
 8010072:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010076:	b10b      	cbz	r3, 801007c <_svfiprintf_r+0x58>
 8010078:	2b25      	cmp	r3, #37	; 0x25
 801007a:	d13e      	bne.n	80100fa <_svfiprintf_r+0xd6>
 801007c:	ebb7 0a06 	subs.w	sl, r7, r6
 8010080:	d00b      	beq.n	801009a <_svfiprintf_r+0x76>
 8010082:	4653      	mov	r3, sl
 8010084:	4632      	mov	r2, r6
 8010086:	4621      	mov	r1, r4
 8010088:	4640      	mov	r0, r8
 801008a:	f7ff ff71 	bl	800ff70 <__ssputs_r>
 801008e:	3001      	adds	r0, #1
 8010090:	f000 80a4 	beq.w	80101dc <_svfiprintf_r+0x1b8>
 8010094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010096:	4453      	add	r3, sl
 8010098:	9309      	str	r3, [sp, #36]	; 0x24
 801009a:	783b      	ldrb	r3, [r7, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 809d 	beq.w	80101dc <_svfiprintf_r+0x1b8>
 80100a2:	2300      	movs	r3, #0
 80100a4:	f04f 32ff 	mov.w	r2, #4294967295
 80100a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100ac:	9304      	str	r3, [sp, #16]
 80100ae:	9307      	str	r3, [sp, #28]
 80100b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100b4:	931a      	str	r3, [sp, #104]	; 0x68
 80100b6:	462f      	mov	r7, r5
 80100b8:	2205      	movs	r2, #5
 80100ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80100be:	4850      	ldr	r0, [pc, #320]	; (8010200 <_svfiprintf_r+0x1dc>)
 80100c0:	f7f0 f88e 	bl	80001e0 <memchr>
 80100c4:	9b04      	ldr	r3, [sp, #16]
 80100c6:	b9d0      	cbnz	r0, 80100fe <_svfiprintf_r+0xda>
 80100c8:	06d9      	lsls	r1, r3, #27
 80100ca:	bf44      	itt	mi
 80100cc:	2220      	movmi	r2, #32
 80100ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100d2:	071a      	lsls	r2, r3, #28
 80100d4:	bf44      	itt	mi
 80100d6:	222b      	movmi	r2, #43	; 0x2b
 80100d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80100dc:	782a      	ldrb	r2, [r5, #0]
 80100de:	2a2a      	cmp	r2, #42	; 0x2a
 80100e0:	d015      	beq.n	801010e <_svfiprintf_r+0xea>
 80100e2:	9a07      	ldr	r2, [sp, #28]
 80100e4:	462f      	mov	r7, r5
 80100e6:	2000      	movs	r0, #0
 80100e8:	250a      	movs	r5, #10
 80100ea:	4639      	mov	r1, r7
 80100ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100f0:	3b30      	subs	r3, #48	; 0x30
 80100f2:	2b09      	cmp	r3, #9
 80100f4:	d94d      	bls.n	8010192 <_svfiprintf_r+0x16e>
 80100f6:	b1b8      	cbz	r0, 8010128 <_svfiprintf_r+0x104>
 80100f8:	e00f      	b.n	801011a <_svfiprintf_r+0xf6>
 80100fa:	462f      	mov	r7, r5
 80100fc:	e7b8      	b.n	8010070 <_svfiprintf_r+0x4c>
 80100fe:	4a40      	ldr	r2, [pc, #256]	; (8010200 <_svfiprintf_r+0x1dc>)
 8010100:	1a80      	subs	r0, r0, r2
 8010102:	fa0b f000 	lsl.w	r0, fp, r0
 8010106:	4318      	orrs	r0, r3
 8010108:	9004      	str	r0, [sp, #16]
 801010a:	463d      	mov	r5, r7
 801010c:	e7d3      	b.n	80100b6 <_svfiprintf_r+0x92>
 801010e:	9a03      	ldr	r2, [sp, #12]
 8010110:	1d11      	adds	r1, r2, #4
 8010112:	6812      	ldr	r2, [r2, #0]
 8010114:	9103      	str	r1, [sp, #12]
 8010116:	2a00      	cmp	r2, #0
 8010118:	db01      	blt.n	801011e <_svfiprintf_r+0xfa>
 801011a:	9207      	str	r2, [sp, #28]
 801011c:	e004      	b.n	8010128 <_svfiprintf_r+0x104>
 801011e:	4252      	negs	r2, r2
 8010120:	f043 0302 	orr.w	r3, r3, #2
 8010124:	9207      	str	r2, [sp, #28]
 8010126:	9304      	str	r3, [sp, #16]
 8010128:	783b      	ldrb	r3, [r7, #0]
 801012a:	2b2e      	cmp	r3, #46	; 0x2e
 801012c:	d10c      	bne.n	8010148 <_svfiprintf_r+0x124>
 801012e:	787b      	ldrb	r3, [r7, #1]
 8010130:	2b2a      	cmp	r3, #42	; 0x2a
 8010132:	d133      	bne.n	801019c <_svfiprintf_r+0x178>
 8010134:	9b03      	ldr	r3, [sp, #12]
 8010136:	1d1a      	adds	r2, r3, #4
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	9203      	str	r2, [sp, #12]
 801013c:	2b00      	cmp	r3, #0
 801013e:	bfb8      	it	lt
 8010140:	f04f 33ff 	movlt.w	r3, #4294967295
 8010144:	3702      	adds	r7, #2
 8010146:	9305      	str	r3, [sp, #20]
 8010148:	4d2e      	ldr	r5, [pc, #184]	; (8010204 <_svfiprintf_r+0x1e0>)
 801014a:	7839      	ldrb	r1, [r7, #0]
 801014c:	2203      	movs	r2, #3
 801014e:	4628      	mov	r0, r5
 8010150:	f7f0 f846 	bl	80001e0 <memchr>
 8010154:	b138      	cbz	r0, 8010166 <_svfiprintf_r+0x142>
 8010156:	2340      	movs	r3, #64	; 0x40
 8010158:	1b40      	subs	r0, r0, r5
 801015a:	fa03 f000 	lsl.w	r0, r3, r0
 801015e:	9b04      	ldr	r3, [sp, #16]
 8010160:	4303      	orrs	r3, r0
 8010162:	3701      	adds	r7, #1
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	7839      	ldrb	r1, [r7, #0]
 8010168:	4827      	ldr	r0, [pc, #156]	; (8010208 <_svfiprintf_r+0x1e4>)
 801016a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801016e:	2206      	movs	r2, #6
 8010170:	1c7e      	adds	r6, r7, #1
 8010172:	f7f0 f835 	bl	80001e0 <memchr>
 8010176:	2800      	cmp	r0, #0
 8010178:	d038      	beq.n	80101ec <_svfiprintf_r+0x1c8>
 801017a:	4b24      	ldr	r3, [pc, #144]	; (801020c <_svfiprintf_r+0x1e8>)
 801017c:	bb13      	cbnz	r3, 80101c4 <_svfiprintf_r+0x1a0>
 801017e:	9b03      	ldr	r3, [sp, #12]
 8010180:	3307      	adds	r3, #7
 8010182:	f023 0307 	bic.w	r3, r3, #7
 8010186:	3308      	adds	r3, #8
 8010188:	9303      	str	r3, [sp, #12]
 801018a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801018c:	444b      	add	r3, r9
 801018e:	9309      	str	r3, [sp, #36]	; 0x24
 8010190:	e76d      	b.n	801006e <_svfiprintf_r+0x4a>
 8010192:	fb05 3202 	mla	r2, r5, r2, r3
 8010196:	2001      	movs	r0, #1
 8010198:	460f      	mov	r7, r1
 801019a:	e7a6      	b.n	80100ea <_svfiprintf_r+0xc6>
 801019c:	2300      	movs	r3, #0
 801019e:	3701      	adds	r7, #1
 80101a0:	9305      	str	r3, [sp, #20]
 80101a2:	4619      	mov	r1, r3
 80101a4:	250a      	movs	r5, #10
 80101a6:	4638      	mov	r0, r7
 80101a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101ac:	3a30      	subs	r2, #48	; 0x30
 80101ae:	2a09      	cmp	r2, #9
 80101b0:	d903      	bls.n	80101ba <_svfiprintf_r+0x196>
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d0c8      	beq.n	8010148 <_svfiprintf_r+0x124>
 80101b6:	9105      	str	r1, [sp, #20]
 80101b8:	e7c6      	b.n	8010148 <_svfiprintf_r+0x124>
 80101ba:	fb05 2101 	mla	r1, r5, r1, r2
 80101be:	2301      	movs	r3, #1
 80101c0:	4607      	mov	r7, r0
 80101c2:	e7f0      	b.n	80101a6 <_svfiprintf_r+0x182>
 80101c4:	ab03      	add	r3, sp, #12
 80101c6:	9300      	str	r3, [sp, #0]
 80101c8:	4622      	mov	r2, r4
 80101ca:	4b11      	ldr	r3, [pc, #68]	; (8010210 <_svfiprintf_r+0x1ec>)
 80101cc:	a904      	add	r1, sp, #16
 80101ce:	4640      	mov	r0, r8
 80101d0:	f7fc f8e6 	bl	800c3a0 <_printf_float>
 80101d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80101d8:	4681      	mov	r9, r0
 80101da:	d1d6      	bne.n	801018a <_svfiprintf_r+0x166>
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	065b      	lsls	r3, r3, #25
 80101e0:	f53f af35 	bmi.w	801004e <_svfiprintf_r+0x2a>
 80101e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101e6:	b01d      	add	sp, #116	; 0x74
 80101e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ec:	ab03      	add	r3, sp, #12
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	4622      	mov	r2, r4
 80101f2:	4b07      	ldr	r3, [pc, #28]	; (8010210 <_svfiprintf_r+0x1ec>)
 80101f4:	a904      	add	r1, sp, #16
 80101f6:	4640      	mov	r0, r8
 80101f8:	f7fc fb88 	bl	800c90c <_printf_i>
 80101fc:	e7ea      	b.n	80101d4 <_svfiprintf_r+0x1b0>
 80101fe:	bf00      	nop
 8010200:	08010bb4 	.word	0x08010bb4
 8010204:	08010bba 	.word	0x08010bba
 8010208:	08010bbe 	.word	0x08010bbe
 801020c:	0800c3a1 	.word	0x0800c3a1
 8010210:	0800ff71 	.word	0x0800ff71

08010214 <__sfputc_r>:
 8010214:	6893      	ldr	r3, [r2, #8]
 8010216:	3b01      	subs	r3, #1
 8010218:	2b00      	cmp	r3, #0
 801021a:	b410      	push	{r4}
 801021c:	6093      	str	r3, [r2, #8]
 801021e:	da08      	bge.n	8010232 <__sfputc_r+0x1e>
 8010220:	6994      	ldr	r4, [r2, #24]
 8010222:	42a3      	cmp	r3, r4
 8010224:	db01      	blt.n	801022a <__sfputc_r+0x16>
 8010226:	290a      	cmp	r1, #10
 8010228:	d103      	bne.n	8010232 <__sfputc_r+0x1e>
 801022a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801022e:	f7fd bdb1 	b.w	800dd94 <__swbuf_r>
 8010232:	6813      	ldr	r3, [r2, #0]
 8010234:	1c58      	adds	r0, r3, #1
 8010236:	6010      	str	r0, [r2, #0]
 8010238:	7019      	strb	r1, [r3, #0]
 801023a:	4608      	mov	r0, r1
 801023c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010240:	4770      	bx	lr

08010242 <__sfputs_r>:
 8010242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010244:	4606      	mov	r6, r0
 8010246:	460f      	mov	r7, r1
 8010248:	4614      	mov	r4, r2
 801024a:	18d5      	adds	r5, r2, r3
 801024c:	42ac      	cmp	r4, r5
 801024e:	d101      	bne.n	8010254 <__sfputs_r+0x12>
 8010250:	2000      	movs	r0, #0
 8010252:	e007      	b.n	8010264 <__sfputs_r+0x22>
 8010254:	463a      	mov	r2, r7
 8010256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801025a:	4630      	mov	r0, r6
 801025c:	f7ff ffda 	bl	8010214 <__sfputc_r>
 8010260:	1c43      	adds	r3, r0, #1
 8010262:	d1f3      	bne.n	801024c <__sfputs_r+0xa>
 8010264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010268 <_vfiprintf_r>:
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	460c      	mov	r4, r1
 801026e:	b09d      	sub	sp, #116	; 0x74
 8010270:	4617      	mov	r7, r2
 8010272:	461d      	mov	r5, r3
 8010274:	4606      	mov	r6, r0
 8010276:	b118      	cbz	r0, 8010280 <_vfiprintf_r+0x18>
 8010278:	6983      	ldr	r3, [r0, #24]
 801027a:	b90b      	cbnz	r3, 8010280 <_vfiprintf_r+0x18>
 801027c:	f7fe fd80 	bl	800ed80 <__sinit>
 8010280:	4b7c      	ldr	r3, [pc, #496]	; (8010474 <_vfiprintf_r+0x20c>)
 8010282:	429c      	cmp	r4, r3
 8010284:	d158      	bne.n	8010338 <_vfiprintf_r+0xd0>
 8010286:	6874      	ldr	r4, [r6, #4]
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	0718      	lsls	r0, r3, #28
 801028c:	d55e      	bpl.n	801034c <_vfiprintf_r+0xe4>
 801028e:	6923      	ldr	r3, [r4, #16]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d05b      	beq.n	801034c <_vfiprintf_r+0xe4>
 8010294:	2300      	movs	r3, #0
 8010296:	9309      	str	r3, [sp, #36]	; 0x24
 8010298:	2320      	movs	r3, #32
 801029a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801029e:	2330      	movs	r3, #48	; 0x30
 80102a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80102a4:	9503      	str	r5, [sp, #12]
 80102a6:	f04f 0b01 	mov.w	fp, #1
 80102aa:	46b8      	mov	r8, r7
 80102ac:	4645      	mov	r5, r8
 80102ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80102b2:	b10b      	cbz	r3, 80102b8 <_vfiprintf_r+0x50>
 80102b4:	2b25      	cmp	r3, #37	; 0x25
 80102b6:	d154      	bne.n	8010362 <_vfiprintf_r+0xfa>
 80102b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80102bc:	d00b      	beq.n	80102d6 <_vfiprintf_r+0x6e>
 80102be:	4653      	mov	r3, sl
 80102c0:	463a      	mov	r2, r7
 80102c2:	4621      	mov	r1, r4
 80102c4:	4630      	mov	r0, r6
 80102c6:	f7ff ffbc 	bl	8010242 <__sfputs_r>
 80102ca:	3001      	adds	r0, #1
 80102cc:	f000 80c2 	beq.w	8010454 <_vfiprintf_r+0x1ec>
 80102d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102d2:	4453      	add	r3, sl
 80102d4:	9309      	str	r3, [sp, #36]	; 0x24
 80102d6:	f898 3000 	ldrb.w	r3, [r8]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 80ba 	beq.w	8010454 <_vfiprintf_r+0x1ec>
 80102e0:	2300      	movs	r3, #0
 80102e2:	f04f 32ff 	mov.w	r2, #4294967295
 80102e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102ea:	9304      	str	r3, [sp, #16]
 80102ec:	9307      	str	r3, [sp, #28]
 80102ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80102f2:	931a      	str	r3, [sp, #104]	; 0x68
 80102f4:	46a8      	mov	r8, r5
 80102f6:	2205      	movs	r2, #5
 80102f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80102fc:	485e      	ldr	r0, [pc, #376]	; (8010478 <_vfiprintf_r+0x210>)
 80102fe:	f7ef ff6f 	bl	80001e0 <memchr>
 8010302:	9b04      	ldr	r3, [sp, #16]
 8010304:	bb78      	cbnz	r0, 8010366 <_vfiprintf_r+0xfe>
 8010306:	06d9      	lsls	r1, r3, #27
 8010308:	bf44      	itt	mi
 801030a:	2220      	movmi	r2, #32
 801030c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010310:	071a      	lsls	r2, r3, #28
 8010312:	bf44      	itt	mi
 8010314:	222b      	movmi	r2, #43	; 0x2b
 8010316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801031a:	782a      	ldrb	r2, [r5, #0]
 801031c:	2a2a      	cmp	r2, #42	; 0x2a
 801031e:	d02a      	beq.n	8010376 <_vfiprintf_r+0x10e>
 8010320:	9a07      	ldr	r2, [sp, #28]
 8010322:	46a8      	mov	r8, r5
 8010324:	2000      	movs	r0, #0
 8010326:	250a      	movs	r5, #10
 8010328:	4641      	mov	r1, r8
 801032a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801032e:	3b30      	subs	r3, #48	; 0x30
 8010330:	2b09      	cmp	r3, #9
 8010332:	d969      	bls.n	8010408 <_vfiprintf_r+0x1a0>
 8010334:	b360      	cbz	r0, 8010390 <_vfiprintf_r+0x128>
 8010336:	e024      	b.n	8010382 <_vfiprintf_r+0x11a>
 8010338:	4b50      	ldr	r3, [pc, #320]	; (801047c <_vfiprintf_r+0x214>)
 801033a:	429c      	cmp	r4, r3
 801033c:	d101      	bne.n	8010342 <_vfiprintf_r+0xda>
 801033e:	68b4      	ldr	r4, [r6, #8]
 8010340:	e7a2      	b.n	8010288 <_vfiprintf_r+0x20>
 8010342:	4b4f      	ldr	r3, [pc, #316]	; (8010480 <_vfiprintf_r+0x218>)
 8010344:	429c      	cmp	r4, r3
 8010346:	bf08      	it	eq
 8010348:	68f4      	ldreq	r4, [r6, #12]
 801034a:	e79d      	b.n	8010288 <_vfiprintf_r+0x20>
 801034c:	4621      	mov	r1, r4
 801034e:	4630      	mov	r0, r6
 8010350:	f7fd fd72 	bl	800de38 <__swsetup_r>
 8010354:	2800      	cmp	r0, #0
 8010356:	d09d      	beq.n	8010294 <_vfiprintf_r+0x2c>
 8010358:	f04f 30ff 	mov.w	r0, #4294967295
 801035c:	b01d      	add	sp, #116	; 0x74
 801035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010362:	46a8      	mov	r8, r5
 8010364:	e7a2      	b.n	80102ac <_vfiprintf_r+0x44>
 8010366:	4a44      	ldr	r2, [pc, #272]	; (8010478 <_vfiprintf_r+0x210>)
 8010368:	1a80      	subs	r0, r0, r2
 801036a:	fa0b f000 	lsl.w	r0, fp, r0
 801036e:	4318      	orrs	r0, r3
 8010370:	9004      	str	r0, [sp, #16]
 8010372:	4645      	mov	r5, r8
 8010374:	e7be      	b.n	80102f4 <_vfiprintf_r+0x8c>
 8010376:	9a03      	ldr	r2, [sp, #12]
 8010378:	1d11      	adds	r1, r2, #4
 801037a:	6812      	ldr	r2, [r2, #0]
 801037c:	9103      	str	r1, [sp, #12]
 801037e:	2a00      	cmp	r2, #0
 8010380:	db01      	blt.n	8010386 <_vfiprintf_r+0x11e>
 8010382:	9207      	str	r2, [sp, #28]
 8010384:	e004      	b.n	8010390 <_vfiprintf_r+0x128>
 8010386:	4252      	negs	r2, r2
 8010388:	f043 0302 	orr.w	r3, r3, #2
 801038c:	9207      	str	r2, [sp, #28]
 801038e:	9304      	str	r3, [sp, #16]
 8010390:	f898 3000 	ldrb.w	r3, [r8]
 8010394:	2b2e      	cmp	r3, #46	; 0x2e
 8010396:	d10e      	bne.n	80103b6 <_vfiprintf_r+0x14e>
 8010398:	f898 3001 	ldrb.w	r3, [r8, #1]
 801039c:	2b2a      	cmp	r3, #42	; 0x2a
 801039e:	d138      	bne.n	8010412 <_vfiprintf_r+0x1aa>
 80103a0:	9b03      	ldr	r3, [sp, #12]
 80103a2:	1d1a      	adds	r2, r3, #4
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	9203      	str	r2, [sp, #12]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	bfb8      	it	lt
 80103ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80103b0:	f108 0802 	add.w	r8, r8, #2
 80103b4:	9305      	str	r3, [sp, #20]
 80103b6:	4d33      	ldr	r5, [pc, #204]	; (8010484 <_vfiprintf_r+0x21c>)
 80103b8:	f898 1000 	ldrb.w	r1, [r8]
 80103bc:	2203      	movs	r2, #3
 80103be:	4628      	mov	r0, r5
 80103c0:	f7ef ff0e 	bl	80001e0 <memchr>
 80103c4:	b140      	cbz	r0, 80103d8 <_vfiprintf_r+0x170>
 80103c6:	2340      	movs	r3, #64	; 0x40
 80103c8:	1b40      	subs	r0, r0, r5
 80103ca:	fa03 f000 	lsl.w	r0, r3, r0
 80103ce:	9b04      	ldr	r3, [sp, #16]
 80103d0:	4303      	orrs	r3, r0
 80103d2:	f108 0801 	add.w	r8, r8, #1
 80103d6:	9304      	str	r3, [sp, #16]
 80103d8:	f898 1000 	ldrb.w	r1, [r8]
 80103dc:	482a      	ldr	r0, [pc, #168]	; (8010488 <_vfiprintf_r+0x220>)
 80103de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80103e2:	2206      	movs	r2, #6
 80103e4:	f108 0701 	add.w	r7, r8, #1
 80103e8:	f7ef fefa 	bl	80001e0 <memchr>
 80103ec:	2800      	cmp	r0, #0
 80103ee:	d037      	beq.n	8010460 <_vfiprintf_r+0x1f8>
 80103f0:	4b26      	ldr	r3, [pc, #152]	; (801048c <_vfiprintf_r+0x224>)
 80103f2:	bb1b      	cbnz	r3, 801043c <_vfiprintf_r+0x1d4>
 80103f4:	9b03      	ldr	r3, [sp, #12]
 80103f6:	3307      	adds	r3, #7
 80103f8:	f023 0307 	bic.w	r3, r3, #7
 80103fc:	3308      	adds	r3, #8
 80103fe:	9303      	str	r3, [sp, #12]
 8010400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010402:	444b      	add	r3, r9
 8010404:	9309      	str	r3, [sp, #36]	; 0x24
 8010406:	e750      	b.n	80102aa <_vfiprintf_r+0x42>
 8010408:	fb05 3202 	mla	r2, r5, r2, r3
 801040c:	2001      	movs	r0, #1
 801040e:	4688      	mov	r8, r1
 8010410:	e78a      	b.n	8010328 <_vfiprintf_r+0xc0>
 8010412:	2300      	movs	r3, #0
 8010414:	f108 0801 	add.w	r8, r8, #1
 8010418:	9305      	str	r3, [sp, #20]
 801041a:	4619      	mov	r1, r3
 801041c:	250a      	movs	r5, #10
 801041e:	4640      	mov	r0, r8
 8010420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010424:	3a30      	subs	r2, #48	; 0x30
 8010426:	2a09      	cmp	r2, #9
 8010428:	d903      	bls.n	8010432 <_vfiprintf_r+0x1ca>
 801042a:	2b00      	cmp	r3, #0
 801042c:	d0c3      	beq.n	80103b6 <_vfiprintf_r+0x14e>
 801042e:	9105      	str	r1, [sp, #20]
 8010430:	e7c1      	b.n	80103b6 <_vfiprintf_r+0x14e>
 8010432:	fb05 2101 	mla	r1, r5, r1, r2
 8010436:	2301      	movs	r3, #1
 8010438:	4680      	mov	r8, r0
 801043a:	e7f0      	b.n	801041e <_vfiprintf_r+0x1b6>
 801043c:	ab03      	add	r3, sp, #12
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	4622      	mov	r2, r4
 8010442:	4b13      	ldr	r3, [pc, #76]	; (8010490 <_vfiprintf_r+0x228>)
 8010444:	a904      	add	r1, sp, #16
 8010446:	4630      	mov	r0, r6
 8010448:	f7fb ffaa 	bl	800c3a0 <_printf_float>
 801044c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010450:	4681      	mov	r9, r0
 8010452:	d1d5      	bne.n	8010400 <_vfiprintf_r+0x198>
 8010454:	89a3      	ldrh	r3, [r4, #12]
 8010456:	065b      	lsls	r3, r3, #25
 8010458:	f53f af7e 	bmi.w	8010358 <_vfiprintf_r+0xf0>
 801045c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801045e:	e77d      	b.n	801035c <_vfiprintf_r+0xf4>
 8010460:	ab03      	add	r3, sp, #12
 8010462:	9300      	str	r3, [sp, #0]
 8010464:	4622      	mov	r2, r4
 8010466:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <_vfiprintf_r+0x228>)
 8010468:	a904      	add	r1, sp, #16
 801046a:	4630      	mov	r0, r6
 801046c:	f7fc fa4e 	bl	800c90c <_printf_i>
 8010470:	e7ec      	b.n	801044c <_vfiprintf_r+0x1e4>
 8010472:	bf00      	nop
 8010474:	08010a68 	.word	0x08010a68
 8010478:	08010bb4 	.word	0x08010bb4
 801047c:	08010a88 	.word	0x08010a88
 8010480:	08010a48 	.word	0x08010a48
 8010484:	08010bba 	.word	0x08010bba
 8010488:	08010bbe 	.word	0x08010bbe
 801048c:	0800c3a1 	.word	0x0800c3a1
 8010490:	08010243 	.word	0x08010243

08010494 <_sbrk_r>:
 8010494:	b538      	push	{r3, r4, r5, lr}
 8010496:	4c06      	ldr	r4, [pc, #24]	; (80104b0 <_sbrk_r+0x1c>)
 8010498:	2300      	movs	r3, #0
 801049a:	4605      	mov	r5, r0
 801049c:	4608      	mov	r0, r1
 801049e:	6023      	str	r3, [r4, #0]
 80104a0:	f7f6 f856 	bl	8006550 <_sbrk>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d102      	bne.n	80104ae <_sbrk_r+0x1a>
 80104a8:	6823      	ldr	r3, [r4, #0]
 80104aa:	b103      	cbz	r3, 80104ae <_sbrk_r+0x1a>
 80104ac:	602b      	str	r3, [r5, #0]
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	20016478 	.word	0x20016478

080104b4 <__sread>:
 80104b4:	b510      	push	{r4, lr}
 80104b6:	460c      	mov	r4, r1
 80104b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104bc:	f000 f8f4 	bl	80106a8 <_read_r>
 80104c0:	2800      	cmp	r0, #0
 80104c2:	bfab      	itete	ge
 80104c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104c6:	89a3      	ldrhlt	r3, [r4, #12]
 80104c8:	181b      	addge	r3, r3, r0
 80104ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104ce:	bfac      	ite	ge
 80104d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80104d2:	81a3      	strhlt	r3, [r4, #12]
 80104d4:	bd10      	pop	{r4, pc}

080104d6 <__swrite>:
 80104d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104da:	461f      	mov	r7, r3
 80104dc:	898b      	ldrh	r3, [r1, #12]
 80104de:	05db      	lsls	r3, r3, #23
 80104e0:	4605      	mov	r5, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	4616      	mov	r6, r2
 80104e6:	d505      	bpl.n	80104f4 <__swrite+0x1e>
 80104e8:	2302      	movs	r3, #2
 80104ea:	2200      	movs	r2, #0
 80104ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104f0:	f000 f886 	bl	8010600 <_lseek_r>
 80104f4:	89a3      	ldrh	r3, [r4, #12]
 80104f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80104fe:	81a3      	strh	r3, [r4, #12]
 8010500:	4632      	mov	r2, r6
 8010502:	463b      	mov	r3, r7
 8010504:	4628      	mov	r0, r5
 8010506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801050a:	f000 b835 	b.w	8010578 <_write_r>

0801050e <__sseek>:
 801050e:	b510      	push	{r4, lr}
 8010510:	460c      	mov	r4, r1
 8010512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010516:	f000 f873 	bl	8010600 <_lseek_r>
 801051a:	1c43      	adds	r3, r0, #1
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	bf15      	itete	ne
 8010520:	6560      	strne	r0, [r4, #84]	; 0x54
 8010522:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010526:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801052a:	81a3      	strheq	r3, [r4, #12]
 801052c:	bf18      	it	ne
 801052e:	81a3      	strhne	r3, [r4, #12]
 8010530:	bd10      	pop	{r4, pc}

08010532 <__sclose>:
 8010532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010536:	f000 b831 	b.w	801059c <_close_r>

0801053a <strncmp>:
 801053a:	b510      	push	{r4, lr}
 801053c:	b16a      	cbz	r2, 801055a <strncmp+0x20>
 801053e:	3901      	subs	r1, #1
 8010540:	1884      	adds	r4, r0, r2
 8010542:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010546:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801054a:	4293      	cmp	r3, r2
 801054c:	d103      	bne.n	8010556 <strncmp+0x1c>
 801054e:	42a0      	cmp	r0, r4
 8010550:	d001      	beq.n	8010556 <strncmp+0x1c>
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1f5      	bne.n	8010542 <strncmp+0x8>
 8010556:	1a98      	subs	r0, r3, r2
 8010558:	bd10      	pop	{r4, pc}
 801055a:	4610      	mov	r0, r2
 801055c:	e7fc      	b.n	8010558 <strncmp+0x1e>

0801055e <__ascii_wctomb>:
 801055e:	b149      	cbz	r1, 8010574 <__ascii_wctomb+0x16>
 8010560:	2aff      	cmp	r2, #255	; 0xff
 8010562:	bf85      	ittet	hi
 8010564:	238a      	movhi	r3, #138	; 0x8a
 8010566:	6003      	strhi	r3, [r0, #0]
 8010568:	700a      	strbls	r2, [r1, #0]
 801056a:	f04f 30ff 	movhi.w	r0, #4294967295
 801056e:	bf98      	it	ls
 8010570:	2001      	movls	r0, #1
 8010572:	4770      	bx	lr
 8010574:	4608      	mov	r0, r1
 8010576:	4770      	bx	lr

08010578 <_write_r>:
 8010578:	b538      	push	{r3, r4, r5, lr}
 801057a:	4c07      	ldr	r4, [pc, #28]	; (8010598 <_write_r+0x20>)
 801057c:	4605      	mov	r5, r0
 801057e:	4608      	mov	r0, r1
 8010580:	4611      	mov	r1, r2
 8010582:	2200      	movs	r2, #0
 8010584:	6022      	str	r2, [r4, #0]
 8010586:	461a      	mov	r2, r3
 8010588:	f7f5 ff91 	bl	80064ae <_write>
 801058c:	1c43      	adds	r3, r0, #1
 801058e:	d102      	bne.n	8010596 <_write_r+0x1e>
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	b103      	cbz	r3, 8010596 <_write_r+0x1e>
 8010594:	602b      	str	r3, [r5, #0]
 8010596:	bd38      	pop	{r3, r4, r5, pc}
 8010598:	20016478 	.word	0x20016478

0801059c <_close_r>:
 801059c:	b538      	push	{r3, r4, r5, lr}
 801059e:	4c06      	ldr	r4, [pc, #24]	; (80105b8 <_close_r+0x1c>)
 80105a0:	2300      	movs	r3, #0
 80105a2:	4605      	mov	r5, r0
 80105a4:	4608      	mov	r0, r1
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	f7f5 ff9d 	bl	80064e6 <_close>
 80105ac:	1c43      	adds	r3, r0, #1
 80105ae:	d102      	bne.n	80105b6 <_close_r+0x1a>
 80105b0:	6823      	ldr	r3, [r4, #0]
 80105b2:	b103      	cbz	r3, 80105b6 <_close_r+0x1a>
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	20016478 	.word	0x20016478

080105bc <_fstat_r>:
 80105bc:	b538      	push	{r3, r4, r5, lr}
 80105be:	4c07      	ldr	r4, [pc, #28]	; (80105dc <_fstat_r+0x20>)
 80105c0:	2300      	movs	r3, #0
 80105c2:	4605      	mov	r5, r0
 80105c4:	4608      	mov	r0, r1
 80105c6:	4611      	mov	r1, r2
 80105c8:	6023      	str	r3, [r4, #0]
 80105ca:	f7f5 ff98 	bl	80064fe <_fstat>
 80105ce:	1c43      	adds	r3, r0, #1
 80105d0:	d102      	bne.n	80105d8 <_fstat_r+0x1c>
 80105d2:	6823      	ldr	r3, [r4, #0]
 80105d4:	b103      	cbz	r3, 80105d8 <_fstat_r+0x1c>
 80105d6:	602b      	str	r3, [r5, #0]
 80105d8:	bd38      	pop	{r3, r4, r5, pc}
 80105da:	bf00      	nop
 80105dc:	20016478 	.word	0x20016478

080105e0 <_isatty_r>:
 80105e0:	b538      	push	{r3, r4, r5, lr}
 80105e2:	4c06      	ldr	r4, [pc, #24]	; (80105fc <_isatty_r+0x1c>)
 80105e4:	2300      	movs	r3, #0
 80105e6:	4605      	mov	r5, r0
 80105e8:	4608      	mov	r0, r1
 80105ea:	6023      	str	r3, [r4, #0]
 80105ec:	f7f5 ff97 	bl	800651e <_isatty>
 80105f0:	1c43      	adds	r3, r0, #1
 80105f2:	d102      	bne.n	80105fa <_isatty_r+0x1a>
 80105f4:	6823      	ldr	r3, [r4, #0]
 80105f6:	b103      	cbz	r3, 80105fa <_isatty_r+0x1a>
 80105f8:	602b      	str	r3, [r5, #0]
 80105fa:	bd38      	pop	{r3, r4, r5, pc}
 80105fc:	20016478 	.word	0x20016478

08010600 <_lseek_r>:
 8010600:	b538      	push	{r3, r4, r5, lr}
 8010602:	4c07      	ldr	r4, [pc, #28]	; (8010620 <_lseek_r+0x20>)
 8010604:	4605      	mov	r5, r0
 8010606:	4608      	mov	r0, r1
 8010608:	4611      	mov	r1, r2
 801060a:	2200      	movs	r2, #0
 801060c:	6022      	str	r2, [r4, #0]
 801060e:	461a      	mov	r2, r3
 8010610:	f7f5 ff90 	bl	8006534 <_lseek>
 8010614:	1c43      	adds	r3, r0, #1
 8010616:	d102      	bne.n	801061e <_lseek_r+0x1e>
 8010618:	6823      	ldr	r3, [r4, #0]
 801061a:	b103      	cbz	r3, 801061e <_lseek_r+0x1e>
 801061c:	602b      	str	r3, [r5, #0]
 801061e:	bd38      	pop	{r3, r4, r5, pc}
 8010620:	20016478 	.word	0x20016478

08010624 <memmove>:
 8010624:	4288      	cmp	r0, r1
 8010626:	b510      	push	{r4, lr}
 8010628:	eb01 0302 	add.w	r3, r1, r2
 801062c:	d807      	bhi.n	801063e <memmove+0x1a>
 801062e:	1e42      	subs	r2, r0, #1
 8010630:	4299      	cmp	r1, r3
 8010632:	d00a      	beq.n	801064a <memmove+0x26>
 8010634:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010638:	f802 4f01 	strb.w	r4, [r2, #1]!
 801063c:	e7f8      	b.n	8010630 <memmove+0xc>
 801063e:	4283      	cmp	r3, r0
 8010640:	d9f5      	bls.n	801062e <memmove+0xa>
 8010642:	1881      	adds	r1, r0, r2
 8010644:	1ad2      	subs	r2, r2, r3
 8010646:	42d3      	cmn	r3, r2
 8010648:	d100      	bne.n	801064c <memmove+0x28>
 801064a:	bd10      	pop	{r4, pc}
 801064c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010650:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010654:	e7f7      	b.n	8010646 <memmove+0x22>

08010656 <__malloc_lock>:
 8010656:	4770      	bx	lr

08010658 <__malloc_unlock>:
 8010658:	4770      	bx	lr

0801065a <_realloc_r>:
 801065a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801065c:	4607      	mov	r7, r0
 801065e:	4614      	mov	r4, r2
 8010660:	460e      	mov	r6, r1
 8010662:	b921      	cbnz	r1, 801066e <_realloc_r+0x14>
 8010664:	4611      	mov	r1, r2
 8010666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801066a:	f7ff bc27 	b.w	800febc <_malloc_r>
 801066e:	b922      	cbnz	r2, 801067a <_realloc_r+0x20>
 8010670:	f7ff fbd6 	bl	800fe20 <_free_r>
 8010674:	4625      	mov	r5, r4
 8010676:	4628      	mov	r0, r5
 8010678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801067a:	f000 f827 	bl	80106cc <_malloc_usable_size_r>
 801067e:	42a0      	cmp	r0, r4
 8010680:	d20f      	bcs.n	80106a2 <_realloc_r+0x48>
 8010682:	4621      	mov	r1, r4
 8010684:	4638      	mov	r0, r7
 8010686:	f7ff fc19 	bl	800febc <_malloc_r>
 801068a:	4605      	mov	r5, r0
 801068c:	2800      	cmp	r0, #0
 801068e:	d0f2      	beq.n	8010676 <_realloc_r+0x1c>
 8010690:	4631      	mov	r1, r6
 8010692:	4622      	mov	r2, r4
 8010694:	f7fb fddc 	bl	800c250 <memcpy>
 8010698:	4631      	mov	r1, r6
 801069a:	4638      	mov	r0, r7
 801069c:	f7ff fbc0 	bl	800fe20 <_free_r>
 80106a0:	e7e9      	b.n	8010676 <_realloc_r+0x1c>
 80106a2:	4635      	mov	r5, r6
 80106a4:	e7e7      	b.n	8010676 <_realloc_r+0x1c>
	...

080106a8 <_read_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4c07      	ldr	r4, [pc, #28]	; (80106c8 <_read_r+0x20>)
 80106ac:	4605      	mov	r5, r0
 80106ae:	4608      	mov	r0, r1
 80106b0:	4611      	mov	r1, r2
 80106b2:	2200      	movs	r2, #0
 80106b4:	6022      	str	r2, [r4, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	f7f5 fedc 	bl	8006474 <_read>
 80106bc:	1c43      	adds	r3, r0, #1
 80106be:	d102      	bne.n	80106c6 <_read_r+0x1e>
 80106c0:	6823      	ldr	r3, [r4, #0]
 80106c2:	b103      	cbz	r3, 80106c6 <_read_r+0x1e>
 80106c4:	602b      	str	r3, [r5, #0]
 80106c6:	bd38      	pop	{r3, r4, r5, pc}
 80106c8:	20016478 	.word	0x20016478

080106cc <_malloc_usable_size_r>:
 80106cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106d0:	1f18      	subs	r0, r3, #4
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bfbc      	itt	lt
 80106d6:	580b      	ldrlt	r3, [r1, r0]
 80106d8:	18c0      	addlt	r0, r0, r3
 80106da:	4770      	bx	lr

080106dc <_init>:
 80106dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106de:	bf00      	nop
 80106e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106e2:	bc08      	pop	{r3}
 80106e4:	469e      	mov	lr, r3
 80106e6:	4770      	bx	lr

080106e8 <_fini>:
 80106e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ea:	bf00      	nop
 80106ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ee:	bc08      	pop	{r3}
 80106f0:	469e      	mov	lr, r3
 80106f2:	4770      	bx	lr


robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800b738  0800b738  0001b738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba10  0800ba10  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba10  0800ba10  0001ba10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba18  0800ba18  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba18  0800ba18  0001ba18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800ba20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  2000020c  0800bc2c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  0800bc2c  00020894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b8e  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c72  00000000  00000000  00033dca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  00036a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  00037e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020ed1  00000000  00000000  00039120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b32  00000000  00000000  00059ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6557  00000000  00000000  0006ab23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013107a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006154  00000000  00000000  001310f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b71c 	.word	0x0800b71c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800b71c 	.word	0x0800b71c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <initEncoder>:
static float side_line_judge_distance;
static float distance_cross_line_ignore;
static float distance_side_line_ignore;

void initEncoder(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 8000f8c:	213c      	movs	r1, #60	; 0x3c
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <initEncoder+0x28>)
 8000f90:	f005 fd0a 	bl	80069a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8000f94:	213c      	movs	r1, #60	; 0x3c
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <initEncoder+0x2c>)
 8000f98:	f005 fd06 	bl	80069a8 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <initEncoder+0x30>)
 8000f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <initEncoder+0x34>)
 8000fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000410 	.word	0x20000410
 8000fb4:	200003d0 	.word	0x200003d0
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8000fc0:	b598      	push	{r3, r4, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <updateEncoderCnt+0x138>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000fce:	3b10      	subs	r3, #16
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <updateEncoderCnt+0x13c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8000fd8:	4b49      	ldr	r3, [pc, #292]	; (8001100 <updateEncoderCnt+0x140>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <updateEncoderCnt+0x144>)
 8000fea:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <updateEncoderCnt+0x148>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b41      	ldr	r3, [pc, #260]	; (80010fc <updateEncoderCnt+0x13c>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <updateEncoderCnt+0x148>)
 8001004:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <updateEncoderCnt+0x14c>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <updateEncoderCnt+0x144>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <updateEncoderCnt+0x14c>)
 800101e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <updateEncoderCnt+0x13c>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	461a      	mov	r2, r3
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <updateEncoderCnt+0x144>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	4413      	add	r3, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	a32e      	add	r3, pc, #184	; (adr r3, 80010f0 <updateEncoderCnt+0x130>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fadc 	bl	80005f8 <__aeabi_dmul>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f7ff fdc4 	bl	8000be8 <__aeabi_d2f>
 8001060:	4602      	mov	r2, r0
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <updateEncoderCnt+0x150>)
 8001064:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <updateEncoderCnt+0x154>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <updateEncoderCnt+0x150>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <updateEncoderCnt+0x154>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <updateEncoderCnt+0x158>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <updateEncoderCnt+0x150>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <updateEncoderCnt+0x158>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <updateEncoderCnt+0x15c>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <updateEncoderCnt+0x150>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <updateEncoderCnt+0x15c>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <updateEncoderCnt+0x160>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <updateEncoderCnt+0x150>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <updateEncoderCnt+0x160>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <updateEncoderCnt+0x164>)
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <updateEncoderCnt+0x150>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <updateEncoderCnt+0x164>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <updateEncoderCnt+0x168>)
 80010d6:	ed93 7a00 	vldr	s14, [r3]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <updateEncoderCnt+0x150>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <updateEncoderCnt+0x168>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ea:	bf00      	nop
 80010ec:	bd98      	pop	{r3, r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	31e7b585 	.word	0x31e7b585
 80010f4:	3f8e28c7 	.word	0x3f8e28c7
 80010f8:	40000400 	.word	0x40000400
 80010fc:	20000228 	.word	0x20000228
 8001100:	40000800 	.word	0x40000800
 8001104:	2000022a 	.word	0x2000022a
 8001108:	2000022c 	.word	0x2000022c
 800110c:	2000022e 	.word	0x2000022e
 8001110:	20000230 	.word	0x20000230
 8001114:	20000234 	.word	0x20000234
 8001118:	20000238 	.word	0x20000238
 800111c:	2000023c 	.word	0x2000023c
 8001120:	20000240 	.word	0x20000240
 8001124:	20000244 	.word	0x20000244
 8001128:	20000248 	.word	0x20000248

0800112c <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <getEncoderCnt+0x2c>)
 8001138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <getEncoderCnt+0x30>)
 8001142:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	801a      	strh	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000228 	.word	0x20000228
 800115c:	2000022a 	.word	0x2000022a

08001160 <resetEncoderCnt>:
{
	distance_side_line_ignore = 0;
}

void resetEncoderCnt(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	TIM3 -> CNT = CNT_OFFSET;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <resetEncoderCnt+0x20>)
 8001166:	f242 7210 	movw	r2, #10000	; 0x2710
 800116a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <resetEncoderCnt+0x24>)
 800116e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001172:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40000400 	.word	0x40000400
 8001184:	40000800 	.word	0x40000800

08001188 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b52      	cmp	r3, #82	; 0x52
 8001196:	d112      	bne.n	80011be <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119e:	4860      	ldr	r0, [pc, #384]	; (8001320 <setLED+0x198>)
 80011a0:	f004 fcc6 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80011a4:	2201      	movs	r2, #1
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	485d      	ldr	r0, [pc, #372]	; (8001320 <setLED+0x198>)
 80011ac:	f004 fcc0 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b6:	485a      	ldr	r0, [pc, #360]	; (8001320 <setLED+0x198>)
 80011b8:	f004 fcba 	bl	8005b30 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80011bc:	e0ab      	b.n	8001316 <setLED+0x18e>
	else if(color == 'G'){
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b47      	cmp	r3, #71	; 0x47
 80011c2:	d112      	bne.n	80011ea <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ca:	4855      	ldr	r0, [pc, #340]	; (8001320 <setLED+0x198>)
 80011cc:	f004 fcb0 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	4852      	ldr	r0, [pc, #328]	; (8001320 <setLED+0x198>)
 80011d8:	f004 fcaa 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e2:	484f      	ldr	r0, [pc, #316]	; (8001320 <setLED+0x198>)
 80011e4:	f004 fca4 	bl	8005b30 <HAL_GPIO_WritePin>
}
 80011e8:	e095      	b.n	8001316 <setLED+0x18e>
	else if(color == 'B'){
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b42      	cmp	r3, #66	; 0x42
 80011ee:	d112      	bne.n	8001216 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011f6:	484a      	ldr	r0, [pc, #296]	; (8001320 <setLED+0x198>)
 80011f8:	f004 fc9a 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001202:	4847      	ldr	r0, [pc, #284]	; (8001320 <setLED+0x198>)
 8001204:	f004 fc94 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	4844      	ldr	r0, [pc, #272]	; (8001320 <setLED+0x198>)
 8001210:	f004 fc8e 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8001214:	e07f      	b.n	8001316 <setLED+0x18e>
	else if(color == 'M'){
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b4d      	cmp	r3, #77	; 0x4d
 800121a:	d112      	bne.n	8001242 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001222:	483f      	ldr	r0, [pc, #252]	; (8001320 <setLED+0x198>)
 8001224:	f004 fc84 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800122e:	483c      	ldr	r0, [pc, #240]	; (8001320 <setLED+0x198>)
 8001230:	f004 fc7e 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	4839      	ldr	r0, [pc, #228]	; (8001320 <setLED+0x198>)
 800123c:	f004 fc78 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8001240:	e069      	b.n	8001316 <setLED+0x18e>
	else if(color == 'Y'){
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b59      	cmp	r3, #89	; 0x59
 8001246:	d112      	bne.n	800126e <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001248:	2200      	movs	r2, #0
 800124a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124e:	4834      	ldr	r0, [pc, #208]	; (8001320 <setLED+0x198>)
 8001250:	f004 fc6e 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125a:	4831      	ldr	r0, [pc, #196]	; (8001320 <setLED+0x198>)
 800125c:	f004 fc68 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001266:	482e      	ldr	r0, [pc, #184]	; (8001320 <setLED+0x198>)
 8001268:	f004 fc62 	bl	8005b30 <HAL_GPIO_WritePin>
}
 800126c:	e053      	b.n	8001316 <setLED+0x18e>
	else if(color == 'C'){
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b43      	cmp	r3, #67	; 0x43
 8001272:	d112      	bne.n	800129a <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	4829      	ldr	r0, [pc, #164]	; (8001320 <setLED+0x198>)
 800127c:	f004 fc58 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001286:	4826      	ldr	r0, [pc, #152]	; (8001320 <setLED+0x198>)
 8001288:	f004 fc52 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800128c:	2200      	movs	r2, #0
 800128e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001292:	4823      	ldr	r0, [pc, #140]	; (8001320 <setLED+0x198>)
 8001294:	f004 fc4c 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8001298:	e03d      	b.n	8001316 <setLED+0x18e>
	else if(color == 'W'){
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b57      	cmp	r3, #87	; 0x57
 800129e:	d112      	bne.n	80012c6 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <setLED+0x198>)
 80012a8:	f004 fc42 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b2:	481b      	ldr	r0, [pc, #108]	; (8001320 <setLED+0x198>)
 80012b4:	f004 fc3c 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012be:	4818      	ldr	r0, [pc, #96]	; (8001320 <setLED+0x198>)
 80012c0:	f004 fc36 	bl	8005b30 <HAL_GPIO_WritePin>
}
 80012c4:	e027      	b.n	8001316 <setLED+0x18e>
	else if(color == 'N'){
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b4e      	cmp	r3, #78	; 0x4e
 80012ca:	d112      	bne.n	80012f2 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d2:	4813      	ldr	r0, [pc, #76]	; (8001320 <setLED+0x198>)
 80012d4:	f004 fc2c 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <setLED+0x198>)
 80012e0:	f004 fc26 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <setLED+0x198>)
 80012ec:	f004 fc20 	bl	8005b30 <HAL_GPIO_WritePin>
}
 80012f0:	e011      	b.n	8001316 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <setLED+0x198>)
 80012fa:	f004 fc19 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001304:	4806      	ldr	r0, [pc, #24]	; (8001320 <setLED+0x198>)
 8001306:	f004 fc13 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <setLED+0x198>)
 8001312:	f004 fc0d 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40020800 	.word	0x40020800

08001324 <setLED2>:

void setLED2(uint8_t color2)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b52      	cmp	r3, #82	; 0x52
 8001332:	d124      	bne.n	800137e <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133a:	4889      	ldr	r0, [pc, #548]	; (8001560 <setLED2+0x23c>)
 800133c:	f004 fbf8 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001346:	4887      	ldr	r0, [pc, #540]	; (8001564 <setLED2+0x240>)
 8001348:	f004 fbf2 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001352:	4884      	ldr	r0, [pc, #528]	; (8001564 <setLED2+0x240>)
 8001354:	f004 fbec 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135e:	4881      	ldr	r0, [pc, #516]	; (8001564 <setLED2+0x240>)
 8001360:	f004 fbe6 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136a:	487e      	ldr	r0, [pc, #504]	; (8001564 <setLED2+0x240>)
 800136c:	f004 fbe0 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001376:	487b      	ldr	r0, [pc, #492]	; (8001564 <setLED2+0x240>)
 8001378:	f004 fbda 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 800137c:	e0eb      	b.n	8001556 <setLED2+0x232>
	else if(color2 == 'G'){
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b47      	cmp	r3, #71	; 0x47
 8001382:	d124      	bne.n	80013ce <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	4875      	ldr	r0, [pc, #468]	; (8001560 <setLED2+0x23c>)
 800138c:	f004 fbd0 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001396:	4873      	ldr	r0, [pc, #460]	; (8001564 <setLED2+0x240>)
 8001398:	f004 fbca 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	4870      	ldr	r0, [pc, #448]	; (8001564 <setLED2+0x240>)
 80013a4:	f004 fbc4 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ae:	486d      	ldr	r0, [pc, #436]	; (8001564 <setLED2+0x240>)
 80013b0:	f004 fbbe 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ba:	486a      	ldr	r0, [pc, #424]	; (8001564 <setLED2+0x240>)
 80013bc:	f004 fbb8 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013c6:	4867      	ldr	r0, [pc, #412]	; (8001564 <setLED2+0x240>)
 80013c8:	f004 fbb2 	bl	8005b30 <HAL_GPIO_WritePin>
}
 80013cc:	e0c3      	b.n	8001556 <setLED2+0x232>
	else if(color2 == 'B'){
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b42      	cmp	r3, #66	; 0x42
 80013d2:	d124      	bne.n	800141e <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4861      	ldr	r0, [pc, #388]	; (8001560 <setLED2+0x23c>)
 80013dc:	f004 fba8 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e6:	485f      	ldr	r0, [pc, #380]	; (8001564 <setLED2+0x240>)
 80013e8:	f004 fba2 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f2:	485c      	ldr	r0, [pc, #368]	; (8001564 <setLED2+0x240>)
 80013f4:	f004 fb9c 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	4859      	ldr	r0, [pc, #356]	; (8001564 <setLED2+0x240>)
 8001400:	f004 fb96 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	4856      	ldr	r0, [pc, #344]	; (8001564 <setLED2+0x240>)
 800140c:	f004 fb90 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001416:	4853      	ldr	r0, [pc, #332]	; (8001564 <setLED2+0x240>)
 8001418:	f004 fb8a 	bl	8005b30 <HAL_GPIO_WritePin>
}
 800141c:	e09b      	b.n	8001556 <setLED2+0x232>
	else if(color2 == 'W'){
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	2b57      	cmp	r3, #87	; 0x57
 8001422:	d124      	bne.n	800146e <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800142a:	484d      	ldr	r0, [pc, #308]	; (8001560 <setLED2+0x23c>)
 800142c:	f004 fb80 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001436:	484b      	ldr	r0, [pc, #300]	; (8001564 <setLED2+0x240>)
 8001438:	f004 fb7a 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001442:	4848      	ldr	r0, [pc, #288]	; (8001564 <setLED2+0x240>)
 8001444:	f004 fb74 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144e:	4845      	ldr	r0, [pc, #276]	; (8001564 <setLED2+0x240>)
 8001450:	f004 fb6e 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4842      	ldr	r0, [pc, #264]	; (8001564 <setLED2+0x240>)
 800145c:	f004 fb68 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001466:	483f      	ldr	r0, [pc, #252]	; (8001564 <setLED2+0x240>)
 8001468:	f004 fb62 	bl	8005b30 <HAL_GPIO_WritePin>
}
 800146c:	e073      	b.n	8001556 <setLED2+0x232>
	else if(color2 == 'Y'){
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b59      	cmp	r3, #89	; 0x59
 8001472:	d124      	bne.n	80014be <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147a:	4839      	ldr	r0, [pc, #228]	; (8001560 <setLED2+0x23c>)
 800147c:	f004 fb58 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001486:	4837      	ldr	r0, [pc, #220]	; (8001564 <setLED2+0x240>)
 8001488:	f004 fb52 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4834      	ldr	r0, [pc, #208]	; (8001564 <setLED2+0x240>)
 8001494:	f004 fb4c 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149e:	4831      	ldr	r0, [pc, #196]	; (8001564 <setLED2+0x240>)
 80014a0:	f004 fb46 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014aa:	482e      	ldr	r0, [pc, #184]	; (8001564 <setLED2+0x240>)
 80014ac:	f004 fb40 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014b6:	482b      	ldr	r0, [pc, #172]	; (8001564 <setLED2+0x240>)
 80014b8:	f004 fb3a 	bl	8005b30 <HAL_GPIO_WritePin>
}
 80014bc:	e04b      	b.n	8001556 <setLED2+0x232>
	else if(color2 == 'X'){
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b58      	cmp	r3, #88	; 0x58
 80014c2:	d124      	bne.n	800150e <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ca:	4825      	ldr	r0, [pc, #148]	; (8001560 <setLED2+0x23c>)
 80014cc:	f004 fb30 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d6:	4823      	ldr	r0, [pc, #140]	; (8001564 <setLED2+0x240>)
 80014d8:	f004 fb2a 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <setLED2+0x240>)
 80014e4:	f004 fb24 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ee:	481d      	ldr	r0, [pc, #116]	; (8001564 <setLED2+0x240>)
 80014f0:	f004 fb1e 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014fa:	481a      	ldr	r0, [pc, #104]	; (8001564 <setLED2+0x240>)
 80014fc:	f004 fb18 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <setLED2+0x240>)
 8001508:	f004 fb12 	bl	8005b30 <HAL_GPIO_WritePin>
}
 800150c:	e023      	b.n	8001556 <setLED2+0x232>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001514:	4812      	ldr	r0, [pc, #72]	; (8001560 <setLED2+0x23c>)
 8001516:	f004 fb0b 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <setLED2+0x240>)
 8001522:	f004 fb05 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <setLED2+0x240>)
 800152e:	f004 faff 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001532:	2201      	movs	r2, #1
 8001534:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001538:	480a      	ldr	r0, [pc, #40]	; (8001564 <setLED2+0x240>)
 800153a:	f004 faf9 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800153e:	2201      	movs	r2, #1
 8001540:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001544:	4807      	ldr	r0, [pc, #28]	; (8001564 <setLED2+0x240>)
 8001546:	f004 faf3 	bl	8005b30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <setLED2+0x240>)
 8001552:	f004 faed 	bl	8005b30 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000
 8001564:	40020400 	.word	0x40020400

08001568 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 0.75, ki = 0, kd = 0.012;
 8001570:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	4bcc      	ldr	r3, [pc, #816]	; (80018b0 <calculateLineFollowingTermFlip+0x348>)
 800157e:	60fb      	str	r3, [r7, #12]
	float diff = 0.;
 8001580:	f04f 0300 	mov.w	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]

	if(line_trace_enable_flag == 1){
 8001586:	4bcb      	ldr	r3, [pc, #812]	; (80018b4 <calculateLineFollowingTermFlip+0x34c>)
 8001588:	f993 3000 	ldrsb.w	r3, [r3]
 800158c:	2b01      	cmp	r3, #1
 800158e:	f040 816f 	bne.w	8001870 <calculateLineFollowingTermFlip+0x308>
		if(i_clear_flag == 1){
 8001592:	4bc9      	ldr	r3, [pc, #804]	; (80018b8 <calculateLineFollowingTermFlip+0x350>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <calculateLineFollowingTermFlip+0x40>
			i = 0;
 800159a:	4bc8      	ldr	r3, [pc, #800]	; (80018bc <calculateLineFollowingTermFlip+0x354>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 80015a2:	4bc5      	ldr	r3, [pc, #788]	; (80018b8 <calculateLineFollowingTermFlip+0x350>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 3.2 + sensor[1] * 2.8 + sensor[2] * 2.4 + sensor[3] * 2.0 + sensor[4] * 1.6 + sensor[5] * 1.2 ) / 6 ) - ( ( sensor[6] * 1.2 + sensor[7] * 1.6 + sensor[8] * 2.0 + sensor[9] * 2.4 + sensor[10] * 2.8 + sensor[11] * 3.2 ) / 6 );
		diff = ( ( sensor[0] * 3.2 + sensor[1] * 2.8 + sensor[2] * 2.4 + sensor[3] * 2.0 + sensor[4] * 1.6 + sensor[5] * 1.4 ) / 6 ) - ( ( sensor[6] * 1.4 + sensor[7] * 1.6 + sensor[8] * 2.0 + sensor[9] * 2.4 + sensor[10] * 2.8 + sensor[11] * 3.2 ) / 6 );
 80015a8:	4bc5      	ldr	r3, [pc, #788]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffb8 	bl	8000524 <__aeabi_i2d>
 80015b4:	a3b2      	add	r3, pc, #712	; (adr r3, 8001880 <calculateLineFollowingTermFlip+0x318>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7ff f81d 	bl	80005f8 <__aeabi_dmul>
 80015be:	4603      	mov	r3, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	4625      	mov	r5, r4
 80015c4:	461c      	mov	r4, r3
 80015c6:	4bbe      	ldr	r3, [pc, #760]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80015c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffa9 	bl	8000524 <__aeabi_i2d>
 80015d2:	a3ad      	add	r3, pc, #692	; (adr r3, 8001888 <calculateLineFollowingTermFlip+0x320>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	f7ff f80e 	bl	80005f8 <__aeabi_dmul>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4620      	mov	r0, r4
 80015e2:	4629      	mov	r1, r5
 80015e4:	f7fe fe52 	bl	800028c <__adddf3>
 80015e8:	4603      	mov	r3, r0
 80015ea:	460c      	mov	r4, r1
 80015ec:	4625      	mov	r5, r4
 80015ee:	461c      	mov	r4, r3
 80015f0:	4bb3      	ldr	r3, [pc, #716]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80015f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff94 	bl	8000524 <__aeabi_i2d>
 80015fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8001890 <calculateLineFollowingTermFlip+0x328>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe fff9 	bl	80005f8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4620      	mov	r0, r4
 800160c:	4629      	mov	r1, r5
 800160e:	f7fe fe3d 	bl	800028c <__adddf3>
 8001612:	4603      	mov	r3, r0
 8001614:	460c      	mov	r4, r1
 8001616:	4625      	mov	r5, r4
 8001618:	461c      	mov	r4, r3
 800161a:	4ba9      	ldr	r3, [pc, #676]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 800161c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff7f 	bl	8000524 <__aeabi_i2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	f7fe fe2f 	bl	800028c <__adddf3>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4620      	mov	r0, r4
 8001634:	4629      	mov	r1, r5
 8001636:	f7fe fe29 	bl	800028c <__adddf3>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	4625      	mov	r5, r4
 8001640:	461c      	mov	r4, r3
 8001642:	4b9f      	ldr	r3, [pc, #636]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 8001644:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff6b 	bl	8000524 <__aeabi_i2d>
 800164e:	a392      	add	r3, pc, #584	; (adr r3, 8001898 <calculateLineFollowingTermFlip+0x330>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7fe ffd0 	bl	80005f8 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7fe fe14 	bl	800028c <__adddf3>
 8001664:	4603      	mov	r3, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4625      	mov	r5, r4
 800166a:	461c      	mov	r4, r3
 800166c:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 800166e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff56 	bl	8000524 <__aeabi_i2d>
 8001678:	a389      	add	r3, pc, #548	; (adr r3, 80018a0 <calculateLineFollowingTermFlip+0x338>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffbb 	bl	80005f8 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7fe fdff 	bl	800028c <__adddf3>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <calculateLineFollowingTermFlip+0x35c>)
 800169c:	f7ff f8d6 	bl	800084c <__aeabi_ddiv>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4625      	mov	r5, r4
 80016a6:	461c      	mov	r4, r3
 80016a8:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80016aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff38 	bl	8000524 <__aeabi_i2d>
 80016b4:	a37a      	add	r3, pc, #488	; (adr r3, 80018a0 <calculateLineFollowingTermFlip+0x338>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	f7fe ff9d 	bl	80005f8 <__aeabi_dmul>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4690      	mov	r8, r2
 80016c4:	4699      	mov	r9, r3
 80016c6:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80016c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff29 	bl	8000524 <__aeabi_i2d>
 80016d2:	a371      	add	r3, pc, #452	; (adr r3, 8001898 <calculateLineFollowingTermFlip+0x330>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ff8e 	bl	80005f8 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4640      	mov	r0, r8
 80016e2:	4649      	mov	r1, r9
 80016e4:	f7fe fdd2 	bl	800028c <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4690      	mov	r8, r2
 80016ee:	4699      	mov	r9, r3
 80016f0:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 80016f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe ff14 	bl	8000524 <__aeabi_i2d>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	f7fe fdc4 	bl	800028c <__adddf3>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4640      	mov	r0, r8
 800170a:	4649      	mov	r1, r9
 800170c:	f7fe fdbe 	bl	800028c <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4690      	mov	r8, r2
 8001716:	4699      	mov	r9, r3
 8001718:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 800171a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe ff00 	bl	8000524 <__aeabi_i2d>
 8001724:	a35a      	add	r3, pc, #360	; (adr r3, 8001890 <calculateLineFollowingTermFlip+0x328>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff65 	bl	80005f8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4640      	mov	r0, r8
 8001734:	4649      	mov	r1, r9
 8001736:	f7fe fda9 	bl	800028c <__adddf3>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4690      	mov	r8, r2
 8001740:	4699      	mov	r9, r3
 8001742:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 8001744:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe feeb 	bl	8000524 <__aeabi_i2d>
 800174e:	a34e      	add	r3, pc, #312	; (adr r3, 8001888 <calculateLineFollowingTermFlip+0x320>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff50 	bl	80005f8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4640      	mov	r0, r8
 800175e:	4649      	mov	r1, r9
 8001760:	f7fe fd94 	bl	800028c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4690      	mov	r8, r2
 800176a:	4699      	mov	r9, r3
 800176c:	4b54      	ldr	r3, [pc, #336]	; (80018c0 <calculateLineFollowingTermFlip+0x358>)
 800176e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fed6 	bl	8000524 <__aeabi_i2d>
 8001778:	a341      	add	r3, pc, #260	; (adr r3, 8001880 <calculateLineFollowingTermFlip+0x318>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe ff3b 	bl	80005f8 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4640      	mov	r0, r8
 8001788:	4649      	mov	r1, r9
 800178a:	f7fe fd7f 	bl	800028c <__adddf3>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <calculateLineFollowingTermFlip+0x35c>)
 800179c:	f7ff f856 	bl	800084c <__aeabi_ddiv>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe fd6e 	bl	8000288 <__aeabi_dsub>
 80017ac:	4603      	mov	r3, r0
 80017ae:	460c      	mov	r4, r1
 80017b0:	4618      	mov	r0, r3
 80017b2:	4621      	mov	r1, r4
 80017b4:	f7ff fa18 	bl	8000be8 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	60bb      	str	r3, [r7, #8]
		//diff = ( ( sensor[0] * 2.8 + sensor[1] * 2.4 + sensor[2] * 2.0 + sensor[3] * 1.6 + sensor[4] * 1.2 ) / 5 ) - ( (sensor[7] * 1.2 + sensor[8] * 1.6 + sensor[9] * 2.0 + sensor[10] * 2.4 + sensor[11] * 2.8 ) / 5 );

		p = kp * diff; //P制御
 80017bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80017c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	edc7 7a01 	vstr	s15, [r7, #4]
		i += ki * diff * DELTA_T; //I制御
 80017cc:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <calculateLineFollowingTermFlip+0x354>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe feb9 	bl	8000548 <__aeabi_f2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	ed97 7a04 	vldr	s14, [r7, #16]
 80017de:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017e6:	ee17 0a90 	vmov	r0, s15
 80017ea:	f7fe fead 	bl	8000548 <__aeabi_f2d>
 80017ee:	a32e      	add	r3, pc, #184	; (adr r3, 80018a8 <calculateLineFollowingTermFlip+0x340>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	f7fe ff00 	bl	80005f8 <__aeabi_dmul>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4620      	mov	r0, r4
 80017fe:	4629      	mov	r1, r5
 8001800:	f7fe fd44 	bl	800028c <__adddf3>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	4618      	mov	r0, r3
 800180a:	4621      	mov	r1, r4
 800180c:	f7ff f9ec 	bl	8000be8 <__aeabi_d2f>
 8001810:	4602      	mov	r2, r0
 8001812:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <calculateLineFollowingTermFlip+0x354>)
 8001814:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <calculateLineFollowingTermFlip+0x360>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001824:	edd7 7a03 	vldr	s15, [r7, #12]
 8001828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182c:	ee17 0a90 	vmov	r0, s15
 8001830:	f7fe fe8a 	bl	8000548 <__aeabi_f2d>
 8001834:	a31c      	add	r3, pc, #112	; (adr r3, 80018a8 <calculateLineFollowingTermFlip+0x340>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7ff f807 	bl	800084c <__aeabi_ddiv>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	4618      	mov	r0, r3
 8001844:	4621      	mov	r1, r4
 8001846:	f7ff f9cf 	bl	8000be8 <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	603b      	str	r3, [r7, #0]

		line_following_term = p + i + d;
 800184e:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <calculateLineFollowingTermFlip+0x354>)
 8001850:	ed93 7a00 	vldr	s14, [r3]
 8001854:	edd7 7a01 	vldr	s15, [r7, #4]
 8001858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185c:	edd7 7a00 	vldr	s15, [r7]
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <calculateLineFollowingTermFlip+0x364>)
 8001866:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <calculateLineFollowingTermFlip+0x360>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	6013      	str	r3, [r2, #0]
	}
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800187a:	bf00      	nop
 800187c:	f3af 8000 	nop.w
 8001880:	9999999a 	.word	0x9999999a
 8001884:	40099999 	.word	0x40099999
 8001888:	66666666 	.word	0x66666666
 800188c:	40066666 	.word	0x40066666
 8001890:	33333333 	.word	0x33333333
 8001894:	40033333 	.word	0x40033333
 8001898:	9999999a 	.word	0x9999999a
 800189c:	3ff99999 	.word	0x3ff99999
 80018a0:	66666666 	.word	0x66666666
 80018a4:	3ff66666 	.word	0x3ff66666
 80018a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018ac:	3f50624d 	.word	0x3f50624d
 80018b0:	3c449ba6 	.word	0x3c449ba6
 80018b4:	2000024c 	.word	0x2000024c
 80018b8:	2000024d 	.word	0x2000024d
 80018bc:	2000025c 	.word	0x2000025c
 80018c0:	20000498 	.word	0x20000498
 80018c4:	40180000 	.word	0x40180000
 80018c8:	20000258 	.word	0x20000258
 80018cc:	20000250 	.word	0x20000250

080018d0 <lineTraceFlip>:

void lineTraceFlip(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80018d6:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <lineTraceFlip+0x78>)
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d12b      	bne.n	8001938 <lineTraceFlip+0x68>

		float velocity_control_term = getVelocityControlTerm();
 80018e0:	f001 f840 	bl	8002964 <getVelocityControlTerm>
 80018e4:	ed87 0a03 	vstr	s0, [r7, #12]

		velocity_control_term -= exceeded;
		line_following_term += exceeded;
		*/

		float motor_l = velocity_control_term + line_following_term;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <lineTraceFlip+0x7c>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80018f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f6:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <lineTraceFlip+0x7c>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ed97 7a03 	vldr	s14, [r7, #12]
 8001904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001908:	edc7 7a01 	vstr	s15, [r7, #4]
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/


		mon_velo_term = velocity_control_term;
 800190c:	4a10      	ldr	r2, [pc, #64]	; (8001950 <lineTraceFlip+0x80>)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001912:	edd7 7a02 	vldr	s15, [r7, #8]
 8001916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191a:	ee17 3a90 	vmov	r3, s15
 800191e:	b21b      	sxth	r3, r3
 8001920:	edd7 7a01 	vldr	s15, [r7, #4]
 8001924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001928:	ee17 2a90 	vmov	r2, s15
 800192c:	b212      	sxth	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f002 f875 	bl	8003a20 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001936:	e003      	b.n	8001940 <lineTraceFlip+0x70>
		setMotor(0, 0);
 8001938:	2100      	movs	r1, #0
 800193a:	2000      	movs	r0, #0
 800193c:	f002 f870 	bl	8003a20 <setMotor>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000024c 	.word	0x2000024c
 800194c:	20000250 	.word	0x20000250
 8001950:	20000454 	.word	0x20000454

08001954 <startLineTrace>:

void startLineTrace()
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <startLineTrace+0x1c>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <startLineTrace+0x20>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	2000024c 	.word	0x2000024c
 8001974:	2000024d 	.word	0x2000024d

08001978 <stopLineTrace>:

void stopLineTrace()
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <stopLineTrace+0x1c>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <stopLineTrace+0x20>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	2000024c 	.word	0x2000024c
 8001998:	20000250 	.word	0x20000250

0800199c <checkCourseOut>:

void checkCourseOut(void){
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <checkCourseOut+0xb4>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b29      	ldr	r3, [pc, #164]	; (8001a50 <checkCourseOut+0xb4>)
 80019ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019b0:	4413      	add	r3, r2
 80019b2:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <checkCourseOut+0xb4>)
 80019b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <checkCourseOut+0xb4>)
 80019bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <checkCourseOut+0xb4>)
 80019c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <checkCourseOut+0xb4>)
 80019cc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <checkCourseOut+0xb4>)
 80019d4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80019d8:	4413      	add	r3, r2
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <checkCourseOut+0xb4>)
 80019dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <checkCourseOut+0xb4>)
 80019e4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <checkCourseOut+0xb4>)
 80019ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a17      	ldr	r2, [pc, #92]	; (8001a50 <checkCourseOut+0xb4>)
 80019f4:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <checkCourseOut+0xb4>)
 80019fc:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <checkCourseOut+0xb8>)
 8001a04:	fb82 1203 	smull	r1, r2, r2, r3
 8001a08:	1052      	asrs	r2, r2, #1
 8001a0a:	17db      	asrs	r3, r3, #31
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 1500){
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d906      	bls.n	8001a28 <checkCourseOut+0x8c>
		dark_cnt++;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <checkCourseOut+0xbc>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <checkCourseOut+0xbc>)
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	e002      	b.n	8001a2e <checkCourseOut+0x92>
	}
	else dark_cnt = 0;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <checkCourseOut+0xbc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <checkCourseOut+0xbc>)
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	2b13      	cmp	r3, #19
 8001a34:	d903      	bls.n	8001a3e <checkCourseOut+0xa2>
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <checkCourseOut+0xc0>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001a3c:	e002      	b.n	8001a44 <checkCourseOut+0xa8>
	else dark_flag = false;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <checkCourseOut+0xc0>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20000498 	.word	0x20000498
 8001a54:	2aaaaaab 	.word	0x2aaaaaab
 8001a58:	20000260 	.word	0x20000260
 8001a5c:	20000254 	.word	0x20000254

08001a60 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	return dark_flag;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <getCouseOutFlag+0x20>)
 8001a66:	f993 3000 	ldrsb.w	r3, [r3]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	bf14      	ite	ne
 8001a6e:	2301      	movne	r3, #1
 8001a70:	2300      	moveq	r3, #0
 8001a72:	b2db      	uxtb	r3, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000254 	.word	0x20000254

08001a84 <initADC>:

static int16_t side_sensorR_buffer[10];
static int16_t side_sensorL_buffer[10];

void initADC()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4905      	ldr	r1, [pc, #20]	; (8001aa0 <initADC+0x1c>)
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <initADC+0x20>)
 8001a8e:	f002 fe6d 	bl	800476c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8001a92:	220c      	movs	r2, #12
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <initADC+0x24>)
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <initADC+0x28>)
 8001a98:	f002 fe68 	bl	800476c <HAL_ADC_Start_DMA>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2000027c 	.word	0x2000027c
 8001aa4:	20000534 	.word	0x20000534
 8001aa8:	20000264 	.word	0x20000264
 8001aac:	200004e4 	.word	0x200004e4

08001ab0 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
	static uint8_t index = 0;

	for(uint16_t i = 0; i < 12; i++){
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	e00f      	b.n	8001adc <storeAnalogSensorBuffer+0x2c>

		if(adc_value[i] >= 2000) adc_value[i] = 2000;
 8001abc:	88fb      	ldrh	r3, [r7, #6]
 8001abe:	4ac9      	ldr	r2, [pc, #804]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001ac8:	d305      	bcc.n	8001ad6 <storeAnalogSensorBuffer+0x26>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4ac5      	ldr	r2, [pc, #788]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001ace:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 12; i++){
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	80fb      	strh	r3, [r7, #6]
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	2b0b      	cmp	r3, #11
 8001ae0:	d9ec      	bls.n	8001abc <storeAnalogSensorBuffer+0xc>
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor0_buffer[index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 2000;
 8001ae2:	4bc0      	ldr	r3, [pc, #768]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001ae4:	885b      	ldrh	r3, [r3, #2]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aee:	4bbe      	ldr	r3, [pc, #760]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001af8:	4bbc      	ldr	r3, [pc, #752]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001afa:	ed93 7a01 	vldr	s14, [r3, #4]
 8001afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b02:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b0a:	4bba      	ldr	r3, [pc, #744]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 3a90 	vmov	r3, s15
 8001b18:	b219      	sxth	r1, r3
 8001b1a:	4bb7      	ldr	r3, [pc, #732]	; (8001df8 <storeAnalogSensorBuffer+0x348>)
 8001b1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor1_buffer[index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 2000;
 8001b20:	4bb0      	ldr	r3, [pc, #704]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	ee07 3a90 	vmov	s15, r3
 8001b28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b2c:	4bae      	ldr	r3, [pc, #696]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b36:	4bad      	ldr	r3, [pc, #692]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b40:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b48:	4baa      	ldr	r3, [pc, #680]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b52:	ee17 3a90 	vmov	r3, s15
 8001b56:	b219      	sxth	r1, r3
 8001b58:	4ba8      	ldr	r3, [pc, #672]	; (8001dfc <storeAnalogSensorBuffer+0x34c>)
 8001b5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 2000;
 8001b5e:	4ba1      	ldr	r3, [pc, #644]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001b60:	889b      	ldrh	r3, [r3, #4]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6a:	4b9f      	ldr	r3, [pc, #636]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001b6c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b70:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b74:	4b9d      	ldr	r3, [pc, #628]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001b76:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b86:	4b9b      	ldr	r3, [pc, #620]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b90:	ee17 3a90 	vmov	r3, s15
 8001b94:	b219      	sxth	r1, r3
 8001b96:	4b9a      	ldr	r3, [pc, #616]	; (8001e00 <storeAnalogSensorBuffer+0x350>)
 8001b98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 2000;
 8001b9c:	4b91      	ldr	r3, [pc, #580]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001b9e:	88db      	ldrh	r3, [r3, #6]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ba8:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001baa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bb2:	4b8e      	ldr	r3, [pc, #568]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001bb4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bbc:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bc4:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bce:	ee17 3a90 	vmov	r3, s15
 8001bd2:	b219      	sxth	r1, r3
 8001bd4:	4b8b      	ldr	r3, [pc, #556]	; (8001e04 <storeAnalogSensorBuffer+0x354>)
 8001bd6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 2000;
 8001bda:	4b82      	ldr	r3, [pc, #520]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001bdc:	891b      	ldrh	r3, [r3, #8]
 8001bde:	ee07 3a90 	vmov	s15, r3
 8001be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be6:	4b80      	ldr	r3, [pc, #512]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001be8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bf0:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001bf2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bfa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0c:	ee17 3a90 	vmov	r3, s15
 8001c10:	b219      	sxth	r1, r3
 8001c12:	4b7d      	ldr	r3, [pc, #500]	; (8001e08 <storeAnalogSensorBuffer+0x358>)
 8001c14:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 2000;
 8001c18:	4b72      	ldr	r3, [pc, #456]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001c1a:	895b      	ldrh	r3, [r3, #10]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c2e:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001c30:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c38:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001c3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c40:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4a:	ee17 3a90 	vmov	r3, s15
 8001c4e:	b219      	sxth	r1, r3
 8001c50:	4b6e      	ldr	r3, [pc, #440]	; (8001e0c <storeAnalogSensorBuffer+0x35c>)
 8001c52:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 2000;
 8001c56:	4b63      	ldr	r3, [pc, #396]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001c58:	899b      	ldrh	r3, [r3, #12]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c62:	4b61      	ldr	r3, [pc, #388]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001c64:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001c6e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c76:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c7e:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c88:	ee17 3a90 	vmov	r3, s15
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	4b60      	ldr	r3, [pc, #384]	; (8001e10 <storeAnalogSensorBuffer+0x360>)
 8001c90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 2000;
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001c96:	89db      	ldrh	r3, [r3, #14]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ca0:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001ca2:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ca6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001caa:	4b50      	ldr	r3, [pc, #320]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001cac:	ed93 7a07 	vldr	s14, [r3, #28]
 8001cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc6:	ee17 3a90 	vmov	r3, s15
 8001cca:	b219      	sxth	r1, r3
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <storeAnalogSensorBuffer+0x364>)
 8001cce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 2000;
 8001cd2:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001cd4:	8a1b      	ldrh	r3, [r3, #16]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001ce0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ce4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001cea:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d04:	ee17 3a90 	vmov	r3, s15
 8001d08:	b219      	sxth	r1, r3
 8001d0a:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <storeAnalogSensorBuffer+0x368>)
 8001d0c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 2000;
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001d12:	8a5b      	ldrh	r3, [r3, #18]
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001d1e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001d28:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d30:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d42:	ee17 3a90 	vmov	r3, s15
 8001d46:	b219      	sxth	r1, r3
 8001d48:	4b34      	ldr	r3, [pc, #208]	; (8001e1c <storeAnalogSensorBuffer+0x36c>)
 8001d4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 2000;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001d50:	8a9b      	ldrh	r3, [r3, #20]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001d5c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d60:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001d66:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d80:	ee17 3a90 	vmov	r3, s15
 8001d84:	b219      	sxth	r1, r3
 8001d86:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <storeAnalogSensorBuffer+0x370>)
 8001d88:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 2000;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <storeAnalogSensorBuffer+0x334>)
 8001d8e:	8adb      	ldrh	r3, [r3, #22]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <storeAnalogSensorBuffer+0x338>)
 8001d9a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <storeAnalogSensorBuffer+0x33c>)
 8001da4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dac:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001df0 <storeAnalogSensorBuffer+0x340>
 8001db0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <storeAnalogSensorBuffer+0x344>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 3a90 	vmov	r3, s15
 8001dc2:	b219      	sxth	r1, r3
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <storeAnalogSensorBuffer+0x374>)
 8001dc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	side_sensorR_buffer[index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 2000;
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <storeAnalogSensorBuffer+0x378>)
 8001dcc:	885b      	ldrh	r3, [r3, #2]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <storeAnalogSensorBuffer+0x37c>)
 8001dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ddc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001de0:	e026      	b.n	8001e30 <storeAnalogSensorBuffer+0x380>
 8001de2:	bf00      	nop
 8001de4:	20000264 	.word	0x20000264
 8001de8:	20000460 	.word	0x20000460
 8001dec:	200004b4 	.word	0x200004b4
 8001df0:	44fa0000 	.word	0x44fa0000
 8001df4:	20000398 	.word	0x20000398
 8001df8:	20000280 	.word	0x20000280
 8001dfc:	20000294 	.word	0x20000294
 8001e00:	200002a8 	.word	0x200002a8
 8001e04:	200002bc 	.word	0x200002bc
 8001e08:	200002d0 	.word	0x200002d0
 8001e0c:	200002e4 	.word	0x200002e4
 8001e10:	200002f8 	.word	0x200002f8
 8001e14:	2000030c 	.word	0x2000030c
 8001e18:	20000320 	.word	0x20000320
 8001e1c:	20000334 	.word	0x20000334
 8001e20:	20000348 	.word	0x20000348
 8001e24:	2000035c 	.word	0x2000035c
 8001e28:	2000027c 	.word	0x2000027c
 8001e2c:	20000458 	.word	0x20000458
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <storeAnalogSensorBuffer+0x40c>)
 8001e32:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e3a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ec0 <storeAnalogSensorBuffer+0x410>
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e4c:	ee17 3a90 	vmov	r3, s15
 8001e50:	b219      	sxth	r1, r3
 8001e52:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <storeAnalogSensorBuffer+0x418>)
 8001e54:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	side_sensorL_buffer[index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 2000;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <storeAnalogSensorBuffer+0x41c>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <storeAnalogSensorBuffer+0x420>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <storeAnalogSensorBuffer+0x40c>)
 8001e70:	ed93 7a00 	vldr	s14, [r3]
 8001e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e78:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ec0 <storeAnalogSensorBuffer+0x410>
 8001e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	b219      	sxth	r1, r3
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <storeAnalogSensorBuffer+0x424>)
 8001e92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[index] = sensor_coefficient[11] * (adc_value[11] - offset_values[11]) * (-1);

	side_sensorR_buffer[index] = side_sensor_coefficient[1] * (side_adc_value[1] - side_offset_values[1]) * (-1);
	side_sensorL_buffer[index] = side_sensor_coefficient[0] * (side_adc_value[0] - side_offset_values[0]) * (-1);*/

	index++;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001ea0:	701a      	strb	r2, [r3, #0]
	if(index >= 10){
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	d902      	bls.n	8001eb0 <storeAnalogSensorBuffer+0x400>
		index = 0;
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <storeAnalogSensorBuffer+0x414>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000490 	.word	0x20000490
 8001ec0:	44fa0000 	.word	0x44fa0000
 8001ec4:	20000398 	.word	0x20000398
 8001ec8:	20000370 	.word	0x20000370
 8001ecc:	2000027c 	.word	0x2000027c
 8001ed0:	20000458 	.word	0x20000458
 8001ed4:	20000384 	.word	0x20000384

08001ed8 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	sensor[0] = ( sensor0_buffer[0] + sensor0_buffer[1] + sensor0_buffer[2] + sensor0_buffer[3] + sensor0_buffer[4] + sensor0_buffer[5] + sensor0_buffer[6] + sensor0_buffer[7] + sensor0_buffer[8] + sensor0_buffer[9] ) / 10;
 8001edc:	4bc5      	ldr	r3, [pc, #788]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4bc3      	ldr	r3, [pc, #780]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001ee6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eea:	4413      	add	r3, r2
 8001eec:	4ac1      	ldr	r2, [pc, #772]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001eee:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4abf      	ldr	r2, [pc, #764]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001ef6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001efa:	4413      	add	r3, r2
 8001efc:	4abd      	ldr	r2, [pc, #756]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001efe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	4abb      	ldr	r2, [pc, #748]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001f06:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4ab9      	ldr	r2, [pc, #740]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001f0e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	4ab7      	ldr	r2, [pc, #732]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001f16:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4ab5      	ldr	r2, [pc, #724]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001f1e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	4ab3      	ldr	r2, [pc, #716]	; (80021f4 <updateAnalogSensor+0x31c>)
 8001f26:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4ab2      	ldr	r2, [pc, #712]	; (80021f8 <updateAnalogSensor+0x320>)
 8001f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f32:	1092      	asrs	r2, r2, #2
 8001f34:	17db      	asrs	r3, r3, #31
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	4bb0      	ldr	r3, [pc, #704]	; (80021fc <updateAnalogSensor+0x324>)
 8001f3c:	801a      	strh	r2, [r3, #0]
	sensor[1] = ( sensor1_buffer[0] + sensor1_buffer[1] + sensor1_buffer[2] + sensor1_buffer[3] + sensor1_buffer[4] + sensor1_buffer[5] + sensor1_buffer[6] + sensor1_buffer[7] + sensor1_buffer[8] + sensor1_buffer[9] ) / 10;
 8001f3e:	4bb0      	ldr	r3, [pc, #704]	; (8002200 <updateAnalogSensor+0x328>)
 8001f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4bae      	ldr	r3, [pc, #696]	; (8002200 <updateAnalogSensor+0x328>)
 8001f48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4aac      	ldr	r2, [pc, #688]	; (8002200 <updateAnalogSensor+0x328>)
 8001f50:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4aaa      	ldr	r2, [pc, #680]	; (8002200 <updateAnalogSensor+0x328>)
 8001f58:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4aa8      	ldr	r2, [pc, #672]	; (8002200 <updateAnalogSensor+0x328>)
 8001f60:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f64:	4413      	add	r3, r2
 8001f66:	4aa6      	ldr	r2, [pc, #664]	; (8002200 <updateAnalogSensor+0x328>)
 8001f68:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4aa4      	ldr	r2, [pc, #656]	; (8002200 <updateAnalogSensor+0x328>)
 8001f70:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	4aa2      	ldr	r2, [pc, #648]	; (8002200 <updateAnalogSensor+0x328>)
 8001f78:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4aa0      	ldr	r2, [pc, #640]	; (8002200 <updateAnalogSensor+0x328>)
 8001f80:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a9e      	ldr	r2, [pc, #632]	; (8002200 <updateAnalogSensor+0x328>)
 8001f88:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4a9a      	ldr	r2, [pc, #616]	; (80021f8 <updateAnalogSensor+0x320>)
 8001f90:	fb82 1203 	smull	r1, r2, r2, r3
 8001f94:	1092      	asrs	r2, r2, #2
 8001f96:	17db      	asrs	r3, r3, #31
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	4b97      	ldr	r3, [pc, #604]	; (80021fc <updateAnalogSensor+0x324>)
 8001f9e:	805a      	strh	r2, [r3, #2]
	sensor[2] = ( sensor2_buffer[0] + sensor2_buffer[1] + sensor2_buffer[2] + sensor2_buffer[3] + sensor2_buffer[4] + sensor2_buffer[5] + sensor2_buffer[6] + sensor2_buffer[7] + sensor2_buffer[8] + sensor2_buffer[9] ) / 10;
 8001fa0:	4b98      	ldr	r3, [pc, #608]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b96      	ldr	r3, [pc, #600]	; (8002204 <updateAnalogSensor+0x32c>)
 8001faa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a94      	ldr	r2, [pc, #592]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fb2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a92      	ldr	r2, [pc, #584]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fba:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	4a90      	ldr	r2, [pc, #576]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fc2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a8e      	ldr	r2, [pc, #568]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fca:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001fce:	4413      	add	r3, r2
 8001fd0:	4a8c      	ldr	r2, [pc, #560]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fd2:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a8a      	ldr	r2, [pc, #552]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fda:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a88      	ldr	r2, [pc, #544]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fe2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a86      	ldr	r2, [pc, #536]	; (8002204 <updateAnalogSensor+0x32c>)
 8001fea:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a81      	ldr	r2, [pc, #516]	; (80021f8 <updateAnalogSensor+0x320>)
 8001ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff6:	1092      	asrs	r2, r2, #2
 8001ff8:	17db      	asrs	r3, r3, #31
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	; (80021fc <updateAnalogSensor+0x324>)
 8002000:	809a      	strh	r2, [r3, #4]
	sensor[3] = ( sensor3_buffer[0] + sensor3_buffer[1] + sensor3_buffer[2] + sensor3_buffer[3] + sensor3_buffer[4] + sensor3_buffer[5] + sensor3_buffer[6] + sensor3_buffer[7] + sensor3_buffer[8] + sensor3_buffer[9] ) / 10;
 8002002:	4b81      	ldr	r3, [pc, #516]	; (8002208 <updateAnalogSensor+0x330>)
 8002004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002008:	461a      	mov	r2, r3
 800200a:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <updateAnalogSensor+0x330>)
 800200c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002010:	4413      	add	r3, r2
 8002012:	4a7d      	ldr	r2, [pc, #500]	; (8002208 <updateAnalogSensor+0x330>)
 8002014:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4a7b      	ldr	r2, [pc, #492]	; (8002208 <updateAnalogSensor+0x330>)
 800201c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002020:	4413      	add	r3, r2
 8002022:	4a79      	ldr	r2, [pc, #484]	; (8002208 <updateAnalogSensor+0x330>)
 8002024:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002028:	4413      	add	r3, r2
 800202a:	4a77      	ldr	r2, [pc, #476]	; (8002208 <updateAnalogSensor+0x330>)
 800202c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002030:	4413      	add	r3, r2
 8002032:	4a75      	ldr	r2, [pc, #468]	; (8002208 <updateAnalogSensor+0x330>)
 8002034:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002038:	4413      	add	r3, r2
 800203a:	4a73      	ldr	r2, [pc, #460]	; (8002208 <updateAnalogSensor+0x330>)
 800203c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002040:	4413      	add	r3, r2
 8002042:	4a71      	ldr	r2, [pc, #452]	; (8002208 <updateAnalogSensor+0x330>)
 8002044:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002048:	4413      	add	r3, r2
 800204a:	4a6f      	ldr	r2, [pc, #444]	; (8002208 <updateAnalogSensor+0x330>)
 800204c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002050:	4413      	add	r3, r2
 8002052:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <updateAnalogSensor+0x320>)
 8002054:	fb82 1203 	smull	r1, r2, r2, r3
 8002058:	1092      	asrs	r2, r2, #2
 800205a:	17db      	asrs	r3, r3, #31
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	b21a      	sxth	r2, r3
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <updateAnalogSensor+0x324>)
 8002062:	80da      	strh	r2, [r3, #6]
	sensor[4] = ( sensor4_buffer[0] + sensor4_buffer[1] + sensor4_buffer[2] + sensor4_buffer[3] + sensor4_buffer[4] + sensor4_buffer[5] + sensor4_buffer[6] + sensor4_buffer[7] + sensor4_buffer[8] + sensor4_buffer[9] ) / 10;
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <updateAnalogSensor+0x334>)
 8002066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206a:	461a      	mov	r2, r3
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <updateAnalogSensor+0x334>)
 800206e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002072:	4413      	add	r3, r2
 8002074:	4a65      	ldr	r2, [pc, #404]	; (800220c <updateAnalogSensor+0x334>)
 8002076:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800207a:	4413      	add	r3, r2
 800207c:	4a63      	ldr	r2, [pc, #396]	; (800220c <updateAnalogSensor+0x334>)
 800207e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002082:	4413      	add	r3, r2
 8002084:	4a61      	ldr	r2, [pc, #388]	; (800220c <updateAnalogSensor+0x334>)
 8002086:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800208a:	4413      	add	r3, r2
 800208c:	4a5f      	ldr	r2, [pc, #380]	; (800220c <updateAnalogSensor+0x334>)
 800208e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002092:	4413      	add	r3, r2
 8002094:	4a5d      	ldr	r2, [pc, #372]	; (800220c <updateAnalogSensor+0x334>)
 8002096:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800209a:	4413      	add	r3, r2
 800209c:	4a5b      	ldr	r2, [pc, #364]	; (800220c <updateAnalogSensor+0x334>)
 800209e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a59      	ldr	r2, [pc, #356]	; (800220c <updateAnalogSensor+0x334>)
 80020a6:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <updateAnalogSensor+0x334>)
 80020ae:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <updateAnalogSensor+0x320>)
 80020b6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ba:	1092      	asrs	r2, r2, #2
 80020bc:	17db      	asrs	r3, r3, #31
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	b21a      	sxth	r2, r3
 80020c2:	4b4e      	ldr	r3, [pc, #312]	; (80021fc <updateAnalogSensor+0x324>)
 80020c4:	811a      	strh	r2, [r3, #8]
	sensor[5] = ( sensor5_buffer[0] + sensor5_buffer[1] + sensor5_buffer[2] + sensor5_buffer[3] + sensor5_buffer[4] + sensor5_buffer[5] + sensor5_buffer[6] + sensor5_buffer[7] + sensor5_buffer[8] + sensor5_buffer[9] ) / 10;
 80020c6:	4b52      	ldr	r3, [pc, #328]	; (8002210 <updateAnalogSensor+0x338>)
 80020c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <updateAnalogSensor+0x338>)
 80020d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a4e      	ldr	r2, [pc, #312]	; (8002210 <updateAnalogSensor+0x338>)
 80020d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a4c      	ldr	r2, [pc, #304]	; (8002210 <updateAnalogSensor+0x338>)
 80020e0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <updateAnalogSensor+0x338>)
 80020e8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a48      	ldr	r2, [pc, #288]	; (8002210 <updateAnalogSensor+0x338>)
 80020f0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a46      	ldr	r2, [pc, #280]	; (8002210 <updateAnalogSensor+0x338>)
 80020f8:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a44      	ldr	r2, [pc, #272]	; (8002210 <updateAnalogSensor+0x338>)
 8002100:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002104:	4413      	add	r3, r2
 8002106:	4a42      	ldr	r2, [pc, #264]	; (8002210 <updateAnalogSensor+0x338>)
 8002108:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800210c:	4413      	add	r3, r2
 800210e:	4a40      	ldr	r2, [pc, #256]	; (8002210 <updateAnalogSensor+0x338>)
 8002110:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002114:	4413      	add	r3, r2
 8002116:	4a38      	ldr	r2, [pc, #224]	; (80021f8 <updateAnalogSensor+0x320>)
 8002118:	fb82 1203 	smull	r1, r2, r2, r3
 800211c:	1092      	asrs	r2, r2, #2
 800211e:	17db      	asrs	r3, r3, #31
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	b21a      	sxth	r2, r3
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <updateAnalogSensor+0x324>)
 8002126:	815a      	strh	r2, [r3, #10]
	sensor[6] = ( sensor6_buffer[0] + sensor6_buffer[1] + sensor6_buffer[2] + sensor6_buffer[3] + sensor6_buffer[4] + sensor6_buffer[5] + sensor6_buffer[6] + sensor6_buffer[7] + sensor6_buffer[8] + sensor6_buffer[9] ) / 10;
 8002128:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <updateAnalogSensor+0x33c>)
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	461a      	mov	r2, r3
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <updateAnalogSensor+0x33c>)
 8002132:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002136:	4413      	add	r3, r2
 8002138:	4a36      	ldr	r2, [pc, #216]	; (8002214 <updateAnalogSensor+0x33c>)
 800213a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800213e:	4413      	add	r3, r2
 8002140:	4a34      	ldr	r2, [pc, #208]	; (8002214 <updateAnalogSensor+0x33c>)
 8002142:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002146:	4413      	add	r3, r2
 8002148:	4a32      	ldr	r2, [pc, #200]	; (8002214 <updateAnalogSensor+0x33c>)
 800214a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800214e:	4413      	add	r3, r2
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <updateAnalogSensor+0x33c>)
 8002152:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002156:	4413      	add	r3, r2
 8002158:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <updateAnalogSensor+0x33c>)
 800215a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800215e:	4413      	add	r3, r2
 8002160:	4a2c      	ldr	r2, [pc, #176]	; (8002214 <updateAnalogSensor+0x33c>)
 8002162:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002166:	4413      	add	r3, r2
 8002168:	4a2a      	ldr	r2, [pc, #168]	; (8002214 <updateAnalogSensor+0x33c>)
 800216a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800216e:	4413      	add	r3, r2
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <updateAnalogSensor+0x33c>)
 8002172:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002176:	4413      	add	r3, r2
 8002178:	4a1f      	ldr	r2, [pc, #124]	; (80021f8 <updateAnalogSensor+0x320>)
 800217a:	fb82 1203 	smull	r1, r2, r2, r3
 800217e:	1092      	asrs	r2, r2, #2
 8002180:	17db      	asrs	r3, r3, #31
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	b21a      	sxth	r2, r3
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <updateAnalogSensor+0x324>)
 8002188:	819a      	strh	r2, [r3, #12]
	sensor[7] = ( sensor7_buffer[0] + sensor7_buffer[1] + sensor7_buffer[2] + sensor7_buffer[3] + sensor7_buffer[4] + sensor7_buffer[5] + sensor7_buffer[6] + sensor7_buffer[7] + sensor7_buffer[8] + sensor7_buffer[9] ) / 10;
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <updateAnalogSensor+0x340>)
 800218c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002190:	461a      	mov	r2, r3
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <updateAnalogSensor+0x340>)
 8002194:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002198:	4413      	add	r3, r2
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <updateAnalogSensor+0x340>)
 800219c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <updateAnalogSensor+0x340>)
 80021a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <updateAnalogSensor+0x340>)
 80021ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a19      	ldr	r2, [pc, #100]	; (8002218 <updateAnalogSensor+0x340>)
 80021b4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <updateAnalogSensor+0x340>)
 80021bc:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <updateAnalogSensor+0x340>)
 80021c4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <updateAnalogSensor+0x340>)
 80021cc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <updateAnalogSensor+0x340>)
 80021d4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80021d8:	4413      	add	r3, r2
 80021da:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <updateAnalogSensor+0x320>)
 80021dc:	fb82 1203 	smull	r1, r2, r2, r3
 80021e0:	1092      	asrs	r2, r2, #2
 80021e2:	17db      	asrs	r3, r3, #31
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	b21a      	sxth	r2, r3
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <updateAnalogSensor+0x324>)
 80021ea:	81da      	strh	r2, [r3, #14]
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / 10;
 80021ec:	4b0b      	ldr	r3, [pc, #44]	; (800221c <updateAnalogSensor+0x344>)
 80021ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f2:	e015      	b.n	8002220 <updateAnalogSensor+0x348>
 80021f4:	20000280 	.word	0x20000280
 80021f8:	66666667 	.word	0x66666667
 80021fc:	20000498 	.word	0x20000498
 8002200:	20000294 	.word	0x20000294
 8002204:	200002a8 	.word	0x200002a8
 8002208:	200002bc 	.word	0x200002bc
 800220c:	200002d0 	.word	0x200002d0
 8002210:	200002e4 	.word	0x200002e4
 8002214:	200002f8 	.word	0x200002f8
 8002218:	2000030c 	.word	0x2000030c
 800221c:	20000320 	.word	0x20000320
 8002220:	461a      	mov	r2, r3
 8002222:	4b93      	ldr	r3, [pc, #588]	; (8002470 <updateAnalogSensor+0x598>)
 8002224:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002228:	4413      	add	r3, r2
 800222a:	4a91      	ldr	r2, [pc, #580]	; (8002470 <updateAnalogSensor+0x598>)
 800222c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002230:	4413      	add	r3, r2
 8002232:	4a8f      	ldr	r2, [pc, #572]	; (8002470 <updateAnalogSensor+0x598>)
 8002234:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002238:	4413      	add	r3, r2
 800223a:	4a8d      	ldr	r2, [pc, #564]	; (8002470 <updateAnalogSensor+0x598>)
 800223c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002240:	4413      	add	r3, r2
 8002242:	4a8b      	ldr	r2, [pc, #556]	; (8002470 <updateAnalogSensor+0x598>)
 8002244:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002248:	4413      	add	r3, r2
 800224a:	4a89      	ldr	r2, [pc, #548]	; (8002470 <updateAnalogSensor+0x598>)
 800224c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002250:	4413      	add	r3, r2
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <updateAnalogSensor+0x598>)
 8002254:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002258:	4413      	add	r3, r2
 800225a:	4a85      	ldr	r2, [pc, #532]	; (8002470 <updateAnalogSensor+0x598>)
 800225c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002260:	4413      	add	r3, r2
 8002262:	4a83      	ldr	r2, [pc, #524]	; (8002470 <updateAnalogSensor+0x598>)
 8002264:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002268:	4413      	add	r3, r2
 800226a:	4a82      	ldr	r2, [pc, #520]	; (8002474 <updateAnalogSensor+0x59c>)
 800226c:	fb82 1203 	smull	r1, r2, r2, r3
 8002270:	1092      	asrs	r2, r2, #2
 8002272:	17db      	asrs	r3, r3, #31
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	b21a      	sxth	r2, r3
 8002278:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <updateAnalogSensor+0x5a0>)
 800227a:	821a      	strh	r2, [r3, #16]
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / 10;
 800227c:	4b7f      	ldr	r3, [pc, #508]	; (800247c <updateAnalogSensor+0x5a4>)
 800227e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002282:	461a      	mov	r2, r3
 8002284:	4b7d      	ldr	r3, [pc, #500]	; (800247c <updateAnalogSensor+0x5a4>)
 8002286:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800228a:	4413      	add	r3, r2
 800228c:	4a7b      	ldr	r2, [pc, #492]	; (800247c <updateAnalogSensor+0x5a4>)
 800228e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002292:	4413      	add	r3, r2
 8002294:	4a79      	ldr	r2, [pc, #484]	; (800247c <updateAnalogSensor+0x5a4>)
 8002296:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800229a:	4413      	add	r3, r2
 800229c:	4a77      	ldr	r2, [pc, #476]	; (800247c <updateAnalogSensor+0x5a4>)
 800229e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a75      	ldr	r2, [pc, #468]	; (800247c <updateAnalogSensor+0x5a4>)
 80022a6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a73      	ldr	r2, [pc, #460]	; (800247c <updateAnalogSensor+0x5a4>)
 80022ae:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a71      	ldr	r2, [pc, #452]	; (800247c <updateAnalogSensor+0x5a4>)
 80022b6:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80022ba:	4413      	add	r3, r2
 80022bc:	4a6f      	ldr	r2, [pc, #444]	; (800247c <updateAnalogSensor+0x5a4>)
 80022be:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	4a6d      	ldr	r2, [pc, #436]	; (800247c <updateAnalogSensor+0x5a4>)
 80022c6:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a69      	ldr	r2, [pc, #420]	; (8002474 <updateAnalogSensor+0x59c>)
 80022ce:	fb82 1203 	smull	r1, r2, r2, r3
 80022d2:	1092      	asrs	r2, r2, #2
 80022d4:	17db      	asrs	r3, r3, #31
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b21a      	sxth	r2, r3
 80022da:	4b67      	ldr	r3, [pc, #412]	; (8002478 <updateAnalogSensor+0x5a0>)
 80022dc:	825a      	strh	r2, [r3, #18]
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / 10;
 80022de:	4b68      	ldr	r3, [pc, #416]	; (8002480 <updateAnalogSensor+0x5a8>)
 80022e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b66      	ldr	r3, [pc, #408]	; (8002480 <updateAnalogSensor+0x5a8>)
 80022e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a64      	ldr	r2, [pc, #400]	; (8002480 <updateAnalogSensor+0x5a8>)
 80022f0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	4a62      	ldr	r2, [pc, #392]	; (8002480 <updateAnalogSensor+0x5a8>)
 80022f8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80022fc:	4413      	add	r3, r2
 80022fe:	4a60      	ldr	r2, [pc, #384]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002300:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002304:	4413      	add	r3, r2
 8002306:	4a5e      	ldr	r2, [pc, #376]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002308:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800230c:	4413      	add	r3, r2
 800230e:	4a5c      	ldr	r2, [pc, #368]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002310:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002314:	4413      	add	r3, r2
 8002316:	4a5a      	ldr	r2, [pc, #360]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002318:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800231c:	4413      	add	r3, r2
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002320:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002324:	4413      	add	r3, r2
 8002326:	4a56      	ldr	r2, [pc, #344]	; (8002480 <updateAnalogSensor+0x5a8>)
 8002328:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800232c:	4413      	add	r3, r2
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <updateAnalogSensor+0x59c>)
 8002330:	fb82 1203 	smull	r1, r2, r2, r3
 8002334:	1092      	asrs	r2, r2, #2
 8002336:	17db      	asrs	r3, r3, #31
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b21a      	sxth	r2, r3
 800233c:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <updateAnalogSensor+0x5a0>)
 800233e:	829a      	strh	r2, [r3, #20]
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / 10;
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <updateAnalogSensor+0x5ac>)
 8002342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002346:	461a      	mov	r2, r3
 8002348:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <updateAnalogSensor+0x5ac>)
 800234a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800234e:	4413      	add	r3, r2
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <updateAnalogSensor+0x5ac>)
 8002352:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002356:	4413      	add	r3, r2
 8002358:	4a4a      	ldr	r2, [pc, #296]	; (8002484 <updateAnalogSensor+0x5ac>)
 800235a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800235e:	4413      	add	r3, r2
 8002360:	4a48      	ldr	r2, [pc, #288]	; (8002484 <updateAnalogSensor+0x5ac>)
 8002362:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002366:	4413      	add	r3, r2
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <updateAnalogSensor+0x5ac>)
 800236a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800236e:	4413      	add	r3, r2
 8002370:	4a44      	ldr	r2, [pc, #272]	; (8002484 <updateAnalogSensor+0x5ac>)
 8002372:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002376:	4413      	add	r3, r2
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <updateAnalogSensor+0x5ac>)
 800237a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800237e:	4413      	add	r3, r2
 8002380:	4a40      	ldr	r2, [pc, #256]	; (8002484 <updateAnalogSensor+0x5ac>)
 8002382:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002386:	4413      	add	r3, r2
 8002388:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <updateAnalogSensor+0x5ac>)
 800238a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800238e:	4413      	add	r3, r2
 8002390:	4a38      	ldr	r2, [pc, #224]	; (8002474 <updateAnalogSensor+0x59c>)
 8002392:	fb82 1203 	smull	r1, r2, r2, r3
 8002396:	1092      	asrs	r2, r2, #2
 8002398:	17db      	asrs	r3, r3, #31
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b21a      	sxth	r2, r3
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <updateAnalogSensor+0x5a0>)
 80023a0:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a35      	ldr	r2, [pc, #212]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023b4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a33      	ldr	r2, [pc, #204]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023bc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80023c0:	4413      	add	r3, r2
 80023c2:	4a31      	ldr	r2, [pc, #196]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023cc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023d4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80023d8:	4413      	add	r3, r2
 80023da:	4a2b      	ldr	r2, [pc, #172]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023dc:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023e4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a27      	ldr	r2, [pc, #156]	; (8002488 <updateAnalogSensor+0x5b0>)
 80023ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <updateAnalogSensor+0x59c>)
 80023f4:	fb82 1203 	smull	r1, r2, r2, r3
 80023f8:	1092      	asrs	r2, r2, #2
 80023fa:	17db      	asrs	r3, r3, #31
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	b21a      	sxth	r2, r3
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <updateAnalogSensor+0x5b4>)
 8002402:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002404:	4b22      	ldr	r3, [pc, #136]	; (8002490 <updateAnalogSensor+0x5b8>)
 8002406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240a:	461a      	mov	r2, r3
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <updateAnalogSensor+0x5b8>)
 800240e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002412:	4413      	add	r3, r2
 8002414:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <updateAnalogSensor+0x5b8>)
 8002416:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800241a:	4413      	add	r3, r2
 800241c:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <updateAnalogSensor+0x5b8>)
 800241e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002422:	4413      	add	r3, r2
 8002424:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <updateAnalogSensor+0x5b8>)
 8002426:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800242a:	4413      	add	r3, r2
 800242c:	4a18      	ldr	r2, [pc, #96]	; (8002490 <updateAnalogSensor+0x5b8>)
 800242e:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002432:	4413      	add	r3, r2
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <updateAnalogSensor+0x5b8>)
 8002436:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800243a:	4413      	add	r3, r2
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <updateAnalogSensor+0x5b8>)
 800243e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002442:	4413      	add	r3, r2
 8002444:	4a12      	ldr	r2, [pc, #72]	; (8002490 <updateAnalogSensor+0x5b8>)
 8002446:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800244a:	4413      	add	r3, r2
 800244c:	4a10      	ldr	r2, [pc, #64]	; (8002490 <updateAnalogSensor+0x5b8>)
 800244e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002452:	4413      	add	r3, r2
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <updateAnalogSensor+0x59c>)
 8002456:	fb82 1203 	smull	r1, r2, r2, r3
 800245a:	1092      	asrs	r2, r2, #2
 800245c:	17db      	asrs	r3, r3, #31
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	b21a      	sxth	r2, r3
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <updateAnalogSensor+0x5bc>)
 8002464:	801a      	strh	r2, [r3, #0]
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	20000320 	.word	0x20000320
 8002474:	66666667 	.word	0x66666667
 8002478:	20000498 	.word	0x20000498
 800247c:	20000334 	.word	0x20000334
 8002480:	20000348 	.word	0x20000348
 8002484:	2000035c 	.word	0x2000035c
 8002488:	20000370 	.word	0x20000370
 800248c:	20000450 	.word	0x20000450
 8002490:	20000384 	.word	0x20000384
 8002494:	200004b0 	.word	0x200004b0

08002498 <sensorCalibration>:

void sensorCalibration()
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0a0      	sub	sp, #128	; 0x80
 800249c:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM];
	float min_values_buffer[LINESENSOR_ADC_NUM];
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800249e:	2300      	movs	r3, #0
 80024a0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024a4:	e012      	b.n	80024cc <sensorCalibration+0x34>
		max_values[i] = 1000;
 80024a6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024aa:	4ada      	ldr	r2, [pc, #872]	; (8002814 <sensorCalibration+0x37c>)
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	4ad9      	ldr	r2, [pc, #868]	; (8002818 <sensorCalibration+0x380>)
 80024b2:	601a      	str	r2, [r3, #0]
		min_values[i] = 1000;
 80024b4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b8:	4ad8      	ldr	r2, [pc, #864]	; (800281c <sensorCalibration+0x384>)
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	4ad6      	ldr	r2, [pc, #856]	; (8002818 <sensorCalibration+0x380>)
 80024c0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80024c2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024c6:	3301      	adds	r3, #1
 80024c8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024d0:	2b0b      	cmp	r3, #11
 80024d2:	d9e8      	bls.n	80024a6 <sensorCalibration+0xe>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	e012      	b.n	8002502 <sensorCalibration+0x6a>
		side_max_values[i] = 1000;
 80024dc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e0:	4acf      	ldr	r2, [pc, #828]	; (8002820 <sensorCalibration+0x388>)
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	4acc      	ldr	r2, [pc, #816]	; (8002818 <sensorCalibration+0x380>)
 80024e8:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1000;
 80024ea:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024ee:	4acd      	ldr	r2, [pc, #820]	; (8002824 <sensorCalibration+0x38c>)
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	4ac8      	ldr	r2, [pc, #800]	; (8002818 <sensorCalibration+0x380>)
 80024f6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80024f8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024fc:	3301      	adds	r3, #1
 80024fe:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002502:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d9e8      	bls.n	80024dc <sensorCalibration+0x44>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 800250a:	e0fd      	b.n	8002708 <sensorCalibration+0x270>

		setLED2('X');
 800250c:	2058      	movs	r0, #88	; 0x58
 800250e:	f7fe ff09 	bl	8001324 <setLED2>
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002512:	2300      	movs	r3, #0
 8002514:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002518:	e076      	b.n	8002608 <sensorCalibration+0x170>

			setLED2('X');
 800251a:	2058      	movs	r0, #88	; 0x58
 800251c:	f7fe ff02 	bl	8001324 <setLED2>

			max_values_buffer[i] = adc_value[i];
 8002520:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002524:	4ac0      	ldr	r2, [pc, #768]	; (8002828 <sensorCalibration+0x390>)
 8002526:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800252a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800252e:	ee07 2a90 	vmov	s15, r2
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800253c:	4413      	add	r3, r2
 800253e:	3b40      	subs	r3, #64	; 0x40
 8002540:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002544:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002548:	4ab7      	ldr	r2, [pc, #732]	; (8002828 <sensorCalibration+0x390>)
 800254a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800254e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002552:	ee07 2a90 	vmov	s15, r2
 8002556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002560:	4413      	add	r3, r2
 8002562:	3b70      	subs	r3, #112	; 0x70
 8002564:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002568:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002572:	4413      	add	r3, r2
 8002574:	3b40      	subs	r3, #64	; 0x40
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800257e:	4aa5      	ldr	r2, [pc, #660]	; (8002814 <sensorCalibration+0x37c>)
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	dd10      	ble.n	80025b4 <sensorCalibration+0x11c>
				max_values[i] = adc_value[i];
 8002592:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002596:	4aa4      	ldr	r2, [pc, #656]	; (8002828 <sensorCalibration+0x390>)
 8002598:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800259c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025a0:	ee07 2a90 	vmov	s15, r2
 80025a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a8:	4a9a      	ldr	r2, [pc, #616]	; (8002814 <sensorCalibration+0x37c>)
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edc3 7a00 	vstr	s15, [r3]
 80025b2:	e024      	b.n	80025fe <sensorCalibration+0x166>
			}
			else if(min_values_buffer[i] < min_values[i]){
 80025b4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025be:	4413      	add	r3, r2
 80025c0:	3b70      	subs	r3, #112	; 0x70
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ca:	4a94      	ldr	r2, [pc, #592]	; (800281c <sensorCalibration+0x384>)
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d50f      	bpl.n	80025fe <sensorCalibration+0x166>
				min_values[i] = adc_value[i];
 80025de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025e2:	4a91      	ldr	r2, [pc, #580]	; (8002828 <sensorCalibration+0x390>)
 80025e4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	ee07 2a90 	vmov	s15, r2
 80025f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f4:	4a89      	ldr	r2, [pc, #548]	; (800281c <sensorCalibration+0x384>)
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	3301      	adds	r3, #1
 8002604:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002608:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800260c:	2b0b      	cmp	r3, #11
 800260e:	d984      	bls.n	800251a <sensorCalibration+0x82>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002610:	2300      	movs	r3, #0
 8002612:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002616:	e073      	b.n	8002700 <sensorCalibration+0x268>
			side_max_values_buffer[i] = side_adc_value[i];
 8002618:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800261c:	4a83      	ldr	r2, [pc, #524]	; (800282c <sensorCalibration+0x394>)
 800261e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002622:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002626:	ee07 2a90 	vmov	s15, r2
 800262a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002634:	4413      	add	r3, r2
 8002636:	3b78      	subs	r3, #120	; 0x78
 8002638:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 800263c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002640:	4a7a      	ldr	r2, [pc, #488]	; (800282c <sensorCalibration+0x394>)
 8002642:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002646:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800264a:	ee07 2a90 	vmov	s15, r2
 800264e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002658:	4413      	add	r3, r2
 800265a:	3b80      	subs	r3, #128	; 0x80
 800265c:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002660:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800266a:	4413      	add	r3, r2
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002676:	4a6a      	ldr	r2, [pc, #424]	; (8002820 <sensorCalibration+0x388>)
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	dd10      	ble.n	80026ac <sensorCalibration+0x214>
				side_max_values[i] = side_adc_value[i];
 800268a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800268e:	4a67      	ldr	r2, [pc, #412]	; (800282c <sensorCalibration+0x394>)
 8002690:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002694:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002698:	ee07 2a90 	vmov	s15, r2
 800269c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a0:	4a5f      	ldr	r2, [pc, #380]	; (8002820 <sensorCalibration+0x388>)
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	edc3 7a00 	vstr	s15, [r3]
 80026aa:	e024      	b.n	80026f6 <sensorCalibration+0x25e>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 80026ac:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b6:	4413      	add	r3, r2
 80026b8:	3b80      	subs	r3, #128	; 0x80
 80026ba:	ed93 7a00 	vldr	s14, [r3]
 80026be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026c2:	4a58      	ldr	r2, [pc, #352]	; (8002824 <sensorCalibration+0x38c>)
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	d50f      	bpl.n	80026f6 <sensorCalibration+0x25e>
				side_min_values[i] = side_adc_value[i];
 80026d6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026da:	4a54      	ldr	r2, [pc, #336]	; (800282c <sensorCalibration+0x394>)
 80026dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80026e0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026e4:	ee07 2a90 	vmov	s15, r2
 80026e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <sensorCalibration+0x38c>)
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80026f6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80026fa:	3301      	adds	r3, #1
 80026fc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002700:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002704:	2b01      	cmp	r3, #1
 8002706:	d987      	bls.n	8002618 <sensorCalibration+0x180>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002708:	204c      	movs	r0, #76	; 0x4c
 800270a:	f001 feb7 	bl	800447c <getSwitchStatus>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	f43f aefb 	beq.w	800250c <sensorCalibration+0x74>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002716:	2300      	movs	r3, #0
 8002718:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800271c:	e01b      	b.n	8002756 <sensorCalibration+0x2be>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 800271e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002722:	4a3c      	ldr	r2, [pc, #240]	; (8002814 <sensorCalibration+0x37c>)
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	ed93 7a00 	vldr	s14, [r3]
 800272c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002730:	4a3a      	ldr	r2, [pc, #232]	; (800281c <sensorCalibration+0x384>)
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	4a3b      	ldr	r2, [pc, #236]	; (8002830 <sensorCalibration+0x398>)
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800274c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002750:	3301      	adds	r3, #1
 8002752:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002756:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800275a:	2b0b      	cmp	r3, #11
 800275c:	d9df      	bls.n	800271e <sensorCalibration+0x286>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800275e:	2300      	movs	r3, #0
 8002760:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002764:	e010      	b.n	8002788 <sensorCalibration+0x2f0>
		offset_values[i] = min_values[i];
 8002766:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800276a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800276e:	492b      	ldr	r1, [pc, #172]	; (800281c <sensorCalibration+0x384>)
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	440a      	add	r2, r1
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	492f      	ldr	r1, [pc, #188]	; (8002834 <sensorCalibration+0x39c>)
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800277e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002782:	3301      	adds	r3, #1
 8002784:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002788:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800278c:	2b0b      	cmp	r3, #11
 800278e:	d9ea      	bls.n	8002766 <sensorCalibration+0x2ce>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002790:	2300      	movs	r3, #0
 8002792:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002796:	e01b      	b.n	80027d0 <sensorCalibration+0x338>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002798:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <sensorCalibration+0x388>)
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	ed93 7a00 	vldr	s14, [r3]
 80027a6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80027aa:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <sensorCalibration+0x38c>)
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80027b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027bc:	4a1e      	ldr	r2, [pc, #120]	; (8002838 <sensorCalibration+0x3a0>)
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80027c6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80027ca:	3301      	adds	r3, #1
 80027cc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80027d0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d9df      	bls.n	8002798 <sensorCalibration+0x300>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80027d8:	2300      	movs	r3, #0
 80027da:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80027de:	e010      	b.n	8002802 <sensorCalibration+0x36a>
		side_offset_values[i] = side_min_values[i];
 80027e0:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80027e4:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <sensorCalibration+0x38c>)
 80027ea:	0092      	lsls	r2, r2, #2
 80027ec:	440a      	add	r2, r1
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	4912      	ldr	r1, [pc, #72]	; (800283c <sensorCalibration+0x3a4>)
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80027f8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80027fc:	3301      	adds	r3, #1
 80027fe:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002802:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002806:	2b01      	cmp	r3, #1
 8002808:	d9ea      	bls.n	80027e0 <sensorCalibration+0x348>
	}
}
 800280a:	bf00      	nop
 800280c:	3780      	adds	r7, #128	; 0x80
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000057c 	.word	0x2000057c
 8002818:	447a0000 	.word	0x447a0000
 800281c:	20000000 	.word	0x20000000
 8002820:	2000052c 	.word	0x2000052c
 8002824:	200005ac 	.word	0x200005ac
 8002828:	20000264 	.word	0x20000264
 800282c:	2000027c 	.word	0x2000027c
 8002830:	200004b4 	.word	0x200004b4
 8002834:	20000460 	.word	0x20000460
 8002838:	20000490 	.word	0x20000490
 800283c:	20000458 	.word	0x20000458

08002840 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3500, ki = 40000, kd = 0.0;
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <calculateVelocityControlFlip+0xf8>)
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	4b3c      	ldr	r3, [pc, #240]	; (800293c <calculateVelocityControlFlip+0xfc>)
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	f04f 0300 	mov.w	r3, #0
 8002852:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800285a:	f000 f8a1 	bl	80029a0 <getCurrentVelocity>
 800285e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <calculateVelocityControlFlip+0x100>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d15b      	bne.n	8002922 <calculateVelocityControlFlip+0xe2>
		if(i_clear_flag == 1){
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <calculateVelocityControlFlip+0x104>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <calculateVelocityControlFlip+0x40>
			i = 0;
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <calculateVelocityControlFlip+0x108>)
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <calculateVelocityControlFlip+0x104>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
		}

		diff = target_velocity - current_velocity;
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <calculateVelocityControlFlip+0x10c>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	edd7 7a03 	vldr	s15, [r7, #12]
 800288a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288e:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8002892:	ed97 7a07 	vldr	s14, [r7, #28]
 8002896:	edd7 7a04 	vldr	s15, [r7, #16]
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <calculateVelocityControlFlip+0x108>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fe4e 	bl	8000548 <__aeabi_f2d>
 80028ac:	4604      	mov	r4, r0
 80028ae:	460d      	mov	r5, r1
 80028b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80028b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	ee17 0a90 	vmov	r0, s15
 80028c0:	f7fd fe42 	bl	8000548 <__aeabi_f2d>
 80028c4:	a31a      	add	r3, pc, #104	; (adr r3, 8002930 <calculateVelocityControlFlip+0xf0>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd fe95 	bl	80005f8 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4620      	mov	r0, r4
 80028d4:	4629      	mov	r1, r5
 80028d6:	f7fd fcd9 	bl	800028c <__adddf3>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	4618      	mov	r0, r3
 80028e0:	4621      	mov	r1, r4
 80028e2:	f7fe f981 	bl	8000be8 <__aeabi_d2f>
 80028e6:	4602      	mov	r2, r0
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <calculateVelocityControlFlip+0x108>)
 80028ea:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		mon_p = p;
 80028ec:	4a18      	ldr	r2, [pc, #96]	; (8002950 <calculateVelocityControlFlip+0x110>)
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <calculateVelocityControlFlip+0x108>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a17      	ldr	r2, [pc, #92]	; (8002954 <calculateVelocityControlFlip+0x114>)
 80028f8:	6013      	str	r3, [r2, #0]
		mon_d = d;
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <calculateVelocityControlFlip+0x118>)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6013      	str	r3, [r2, #0]

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <calculateVelocityControlFlip+0x108>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a02 	vldr	s15, [r7, #8]
 800290a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800290e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <calculateVelocityControlFlip+0x11c>)
 8002918:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <calculateVelocityControlFlip+0x120>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6013      	str	r3, [r2, #0]

	}

}
 8002922:	bf00      	nop
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bdb0      	pop	{r4, r5, r7, pc}
 800292a:	bf00      	nop
 800292c:	f3af 8000 	nop.w
 8002930:	d2f1a9fc 	.word	0xd2f1a9fc
 8002934:	3f50624d 	.word	0x3f50624d
 8002938:	455ac000 	.word	0x455ac000
 800293c:	471c4000 	.word	0x471c4000
 8002940:	20000399 	.word	0x20000399
 8002944:	2000039a 	.word	0x2000039a
 8002948:	200003a8 	.word	0x200003a8
 800294c:	200003a0 	.word	0x200003a0
 8002950:	200005c0 	.word	0x200005c0
 8002954:	200005b8 	.word	0x200005b8
 8002958:	200003a4 	.word	0x200003a4
 800295c:	2000039c 	.word	0x2000039c
 8002960:	200003ac 	.word	0x200003ac

08002964 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <getVelocityControlTerm+0x18>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
}
 8002970:	eeb0 0a67 	vmov.f32	s0, s15
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	2000039c 	.word	0x2000039c

08002980 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 800298a:	4a04      	ldr	r2, [pc, #16]	; (800299c <setTargetVelocity+0x1c>)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	200003a0 	.word	0x200003a0

080029a0 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	80fb      	strh	r3, [r7, #6]
 80029aa:	2300      	movs	r3, #0
 80029ac:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	1dbb      	adds	r3, r7, #6
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fbb9 	bl	800112c <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80029ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029be:	461a      	mov	r2, r3
 80029c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	0fda      	lsrs	r2, r3, #31
 80029c8:	4413      	add	r3, r2
 80029ca:	105b      	asrs	r3, r3, #1
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d4:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7fd fdb5 	bl	8000548 <__aeabi_f2d>
 80029de:	a30d      	add	r3, pc, #52	; (adr r3, 8002a14 <getCurrentVelocity+0x74>)
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f7fd fe08 	bl	80005f8 <__aeabi_dmul>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4618      	mov	r0, r3
 80029ee:	4621      	mov	r1, r4
 80029f0:	f7fe f8fa 	bl	8000be8 <__aeabi_d2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <getCurrentVelocity+0x70>)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6013      	str	r3, [r2, #0]

	return current_velocity;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	ee07 3a90 	vmov	s15, r3
}
 8002a04:	eeb0 0a67 	vmov.f32	s0, s15
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200005b4 	.word	0x200005b4
 8002a14:	31e7b585 	.word	0x31e7b585
 8002a18:	3f8e28c7 	.word	0x3f8e28c7

08002a1c <startVelocityControl>:
{
	return target_velocity;
}

void startVelocityControl(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <startVelocityControl+0x1c>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <startVelocityControl+0x20>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	20000399 	.word	0x20000399
 8002a3c:	2000039a 	.word	0x2000039a

08002a40 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <stopVelocityControl+0x14>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	20000399 	.word	0x20000399

08002a58 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d11d      	bne.n	8002aa6 <HAL_TIM_PeriodElapsedCallback+0x4e>
      timer++;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	4a16      	ldr	r2, [pc, #88]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002a72:	6013      	str	r3, [r2, #0]
      timer2++;
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002a7c:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 8002a7e:	f7fe fa9f 	bl	8000fc0 <updateEncoderCnt>
      updateAnalogSensor();
 8002a82:	f7ff fa29 	bl	8001ed8 <updateAnalogSensor>

      calculateVelocityControlFlip();
 8002a86:	f7ff fedb 	bl	8002840 <calculateVelocityControlFlip>
      calculateLineFollowingTermFlip();
 8002a8a:	f7fe fd6d 	bl	8001568 <calculateLineFollowingTermFlip>
      lineTraceFlip();
 8002a8e:	f7fe ff1f 	bl	80018d0 <lineTraceFlip>
      motorCtrlFlip();
 8002a92:	f000 ff4f 	bl	8003934 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8002a96:	f000 ffb1 	bl	80039fc <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 8002a9a:	f001 f81d 	bl	8003ad8 <updateSideSensorStatus>

      checkCourseOut();
 8002a9e:	f7fe ff7d 	bl	800199c <checkCourseOut>

      resetEncoderCnt();
 8002aa2:	f7fe fb5d 	bl	8001160 <resetEncoderCnt>
   }

   if(htim->Instance == TIM7){//0.1ms
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d106      	bne.n	8002abe <HAL_TIM_PeriodElapsedCallback+0x66>
	   timer1++;
 8002ab0:	4b09      	ldr	r3, [pc, #36]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002ab8:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8002aba:	f7fe fff9 	bl	8001ab0 <storeAnalogSensorBuffer>

   }
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40001000 	.word	0x40001000
 8002acc:	200005c4 	.word	0x200005c4
 8002ad0:	20000608 	.word	0x20000608
 8002ad4:	40001400 	.word	0x40001400
 8002ad8:	200007e0 	.word	0x200007e0

08002adc <init>:

void init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	  initADC();
 8002ae0:	f7fe ffd0 	bl	8001a84 <initADC>
	  initEncoder();
 8002ae4:	f7fe fa50 	bl	8000f88 <initEncoder>

	  HAL_TIM_Base_Start_IT(&htim6);
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <init+0x34>)
 8002aea:	f003 fe3e 	bl	800676a <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8002aee:	4809      	ldr	r0, [pc, #36]	; (8002b14 <init+0x38>)
 8002af0:	f003 fe3b 	bl	800676a <HAL_TIM_Base_Start_IT>

	  initMotor();
 8002af4:	f000 ff06 	bl	8003904 <initMotor>

	  setLED('R');
 8002af8:	2052      	movs	r0, #82	; 0x52
 8002afa:	f7fe fb45 	bl	8001188 <setLED>

	  sensorCalibration();
 8002afe:	f7ff fccb 	bl	8002498 <sensorCalibration>

	  HAL_Delay(1000);
 8002b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b06:	f001 fdcb 	bl	80046a0 <HAL_Delay>

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	2000075c 	.word	0x2000075c
 8002b14:	20000844 	.word	0x20000844

08002b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1e:	f001 fd4d 	bl	80045bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b22:	f000 f99d 	bl	8002e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b26:	f000 fe2b 	bl	8003780 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b2a:	f000 fe01 	bl	8003730 <MX_DMA_Init>
  MX_TIM1_Init();
 8002b2e:	f000 fbb1 	bl	8003294 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b32:	f000 fc31 	bl	8003398 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b36:	f000 fc83 	bl	8003440 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002b3a:	f000 fd3f 	bl	80035bc <MX_TIM8_Init>
  MX_ADC1_Init();
 8002b3e:	f000 f9f9 	bl	8002f34 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002b42:	f000 fb43 	bl	80031cc <MX_I2C1_Init>
  MX_SPI3_Init();
 8002b46:	f000 fb6f 	bl	8003228 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002b4a:	f000 fdc7 	bl	80036dc <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002b4e:	f000 fccb 	bl	80034e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002b52:	f000 fcff 	bl	8003554 <MX_TIM7_Init>
  MX_ADC2_Init();
 8002b56:	f000 fa4d 	bl	8002ff4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002b5a:	f7ff ffbf 	bl	8002adc <init>

  bool running_flag = false;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002b62:	204c      	movs	r0, #76	; 0x4c
 8002b64:	f001 fc8a 	bl	800447c <getSwitchStatus>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d109      	bne.n	8002b82 <main+0x6a>
 8002b6e:	4bb3      	ldr	r3, [pc, #716]	; (8002e3c <main+0x324>)
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <main+0x6a>
		  timer = 0;
 8002b76:	4bb2      	ldr	r3, [pc, #712]	; (8002e40 <main+0x328>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8002b7c:	4baf      	ldr	r3, [pc, #700]	; (8002e3c <main+0x324>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8002b82:	204c      	movs	r0, #76	; 0x4c
 8002b84:	f001 fc7a 	bl	800447c <getSwitchStatus>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d10a      	bne.n	8002ba4 <main+0x8c>
 8002b8e:	4bac      	ldr	r3, [pc, #688]	; (8002e40 <main+0x328>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b14      	cmp	r3, #20
 8002b94:	d906      	bls.n	8002ba4 <main+0x8c>
 8002b96:	4ba9      	ldr	r3, [pc, #676]	; (8002e3c <main+0x324>)
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d102      	bne.n	8002ba4 <main+0x8c>
		  sw = 2;
 8002b9e:	4ba7      	ldr	r3, [pc, #668]	; (8002e3c <main+0x324>)
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8002ba4:	4ba6      	ldr	r3, [pc, #664]	; (8002e40 <main+0x328>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b28      	cmp	r3, #40	; 0x28
 8002baa:	d906      	bls.n	8002bba <main+0xa2>
 8002bac:	4ba3      	ldr	r3, [pc, #652]	; (8002e3c <main+0x324>)
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <main+0xa2>
		  sw = 0;
 8002bb4:	4ba1      	ldr	r3, [pc, #644]	; (8002e3c <main+0x324>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8002bba:	204c      	movs	r0, #76	; 0x4c
 8002bbc:	f001 fc5e 	bl	800447c <getSwitchStatus>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <main+0xc8>
 8002bc6:	4b9d      	ldr	r3, [pc, #628]	; (8002e3c <main+0x324>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d108      	bne.n	8002be0 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 8002bce:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <main+0x32c>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	4b9b      	ldr	r3, [pc, #620]	; (8002e44 <main+0x32c>)
 8002bd8:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8002bda:	4b98      	ldr	r3, [pc, #608]	; (8002e3c <main+0x324>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8002be0:	2052      	movs	r0, #82	; 0x52
 8002be2:	f001 fc4b 	bl	800447c <getSwitchStatus>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d109      	bne.n	8002c00 <main+0xe8>
 8002bec:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <main+0x330>)
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <main+0xe8>
	  	  timer = 0;
 8002bf4:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <main+0x328>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8002bfa:	4b93      	ldr	r3, [pc, #588]	; (8002e48 <main+0x330>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8002c00:	2052      	movs	r0, #82	; 0x52
 8002c02:	f001 fc3b 	bl	800447c <getSwitchStatus>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10a      	bne.n	8002c22 <main+0x10a>
 8002c0c:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <main+0x328>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b14      	cmp	r3, #20
 8002c12:	d906      	bls.n	8002c22 <main+0x10a>
 8002c14:	4b8c      	ldr	r3, [pc, #560]	; (8002e48 <main+0x330>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d102      	bne.n	8002c22 <main+0x10a>
	  	  sw2 = 2;
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	; (8002e48 <main+0x330>)
 8002c1e:	2202      	movs	r2, #2
 8002c20:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8002c22:	4b87      	ldr	r3, [pc, #540]	; (8002e40 <main+0x328>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b28      	cmp	r3, #40	; 0x28
 8002c28:	d906      	bls.n	8002c38 <main+0x120>
 8002c2a:	4b87      	ldr	r3, [pc, #540]	; (8002e48 <main+0x330>)
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d102      	bne.n	8002c38 <main+0x120>
	  	  sw2 = 0;
 8002c32:	4b85      	ldr	r3, [pc, #532]	; (8002e48 <main+0x330>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8002c38:	2052      	movs	r0, #82	; 0x52
 8002c3a:	f001 fc1f 	bl	800447c <getSwitchStatus>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10c      	bne.n	8002c5e <main+0x146>
 8002c44:	4b80      	ldr	r3, [pc, #512]	; (8002e48 <main+0x330>)
 8002c46:	881b      	ldrh	r3, [r3, #0]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d108      	bne.n	8002c5e <main+0x146>
	  	  cnt++;
 8002c4c:	4b7f      	ldr	r3, [pc, #508]	; (8002e4c <main+0x334>)
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <main+0x334>)
 8002c56:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8002c58:	4b7b      	ldr	r3, [pc, #492]	; (8002e48 <main+0x330>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8002c5e:	4b7b      	ldr	r3, [pc, #492]	; (8002e4c <main+0x334>)
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d902      	bls.n	8002c6c <main+0x154>
		  cnt = 0;
 8002c66:	4b79      	ldr	r3, [pc, #484]	; (8002e4c <main+0x334>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8002c6c:	4b77      	ldr	r3, [pc, #476]	; (8002e4c <main+0x334>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <main+0x16e>
		  HAL_Delay(1000);
 8002c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c78:	f001 fd12 	bl	80046a0 <HAL_Delay>
		  running_flag = true;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8002c80:	4b72      	ldr	r3, [pc, #456]	; (8002e4c <main+0x334>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <main+0x182>
		  stopLineTrace();
 8002c92:	f7fe fe71 	bl	8001978 <stopLineTrace>
		  stopVelocityControl();
 8002c96:	f7ff fed3 	bl	8002a40 <stopVelocityControl>
		  //cnt = 0;
		  //setLED2('C');
	  }

	  if(getCouseOutFlag() == true){
 8002c9a:	f7fe fee1 	bl	8001a60 <getCouseOutFlag>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d009      	beq.n	8002cb8 <main+0x1a0>
          cnt = 0;
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <main+0x334>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	801a      	strh	r2, [r3, #0]
          HAL_Delay(500);
 8002caa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cae:	f001 fcf7 	bl	80046a0 <HAL_Delay>
          setsuctionMotor(0);
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 fef2 	bl	8003a9c <setsuctionMotor>
	  }

	  if(getgoalStatus() == true){  //goal判定
 8002cb8:	f001 f80e 	bl	8003cd8 <getgoalStatus>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <main+0x1ba>
		  running_flag = false;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8002cc6:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <main+0x334>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	801a      	strh	r2, [r3, #0]
		  //HAL_Delay(500);
		  setsuctionMotor(0);
 8002ccc:	2000      	movs	r0, #0
 8002cce:	f000 fee5 	bl	8003a9c <setsuctionMotor>
		  //getgoalStatus() == false;
	  }

	  if(soiya >= 6){
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	; (8002e44 <main+0x32c>)
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d902      	bls.n	8002ce0 <main+0x1c8>
		  soiya = 0;
 8002cda:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <main+0x32c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8002ce0:	4b58      	ldr	r3, [pc, #352]	; (8002e44 <main+0x32c>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	f200 809a 	bhi.w	8002e1e <main+0x306>
 8002cea:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <main+0x1d8>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d2f 	.word	0x08002d2f
 8002cf8:	08002d5f 	.word	0x08002d5f
 8002cfc:	08002d8f 	.word	0x08002d8f
 8002d00:	08002dbf 	.word	0x08002dbf
 8002d04:	08002def 	.word	0x08002def

			  case 0:
				  setLED('W');
 8002d08:	2057      	movs	r0, #87	; 0x57
 8002d0a:	f7fe fa3d 	bl	8001188 <setLED>
				  setLED2('R');
 8002d0e:	2052      	movs	r0, #82	; 0x52
 8002d10:	f7fe fb08 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8083 	beq.w	8002e22 <main+0x30a>
				  		  //setVelocityRange(0, 0);
				  		  //startLineTrace();

				  		  setTargetVelocity(0.6);
 8002d1c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8002e50 <main+0x338>
 8002d20:	f7ff fe2e 	bl	8002980 <setTargetVelocity>
				  		  //startVelocityControl();

				  		  setsuctionMotor(500);
 8002d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d28:	f000 feb8 	bl	8003a9c <setsuctionMotor>
				  		  //running();
				  		  //setMotor(500, 500);
				  		  //while(1);
				  }

				  break;
 8002d2c:	e079      	b.n	8002e22 <main+0x30a>

			  case 1:
				  setLED('G');
 8002d2e:	2047      	movs	r0, #71	; 0x47
 8002d30:	f7fe fa2a 	bl	8001188 <setLED>
				  setLED2('G');
 8002d34:	2047      	movs	r0, #71	; 0x47
 8002d36:	f7fe faf5 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d072      	beq.n	8002e26 <main+0x30e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  setTargetVelocity(1.0);
 8002d40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002d44:	f7ff fe1c 	bl	8002980 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 8002d48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d4c:	f000 fea6 	bl	8003a9c <setsuctionMotor>

						  HAL_Delay(1000);
 8002d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d54:	f001 fca4 	bl	80046a0 <HAL_Delay>

						  running();
 8002d58:	f000 fefa 	bl	8003b50 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002d5c:	e063      	b.n	8002e26 <main+0x30e>

			  case 2:
				  setLED('B');
 8002d5e:	2042      	movs	r0, #66	; 0x42
 8002d60:	f7fe fa12 	bl	8001188 <setLED>
				  setLED2('B');
 8002d64:	2042      	movs	r0, #66	; 0x42
 8002d66:	f7fe fadd 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d05c      	beq.n	8002e2a <main+0x312>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  setTargetVelocity(0.7);
 8002d70:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002e54 <main+0x33c>
 8002d74:	f7ff fe04 	bl	8002980 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(450);
 8002d78:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002d7c:	f000 fe8e 	bl	8003a9c <setsuctionMotor>

						  HAL_Delay(1000);
 8002d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d84:	f001 fc8c 	bl	80046a0 <HAL_Delay>

						  running();
 8002d88:	f000 fee2 	bl	8003b50 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002d8c:	e04d      	b.n	8002e2a <main+0x312>

			  case 3:
				  setLED('M');
 8002d8e:	204d      	movs	r0, #77	; 0x4d
 8002d90:	f7fe f9fa 	bl	8001188 <setLED>
				  setLED2('W');
 8002d94:	2057      	movs	r0, #87	; 0x57
 8002d96:	f7fe fac5 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d046      	beq.n	8002e2e <main+0x316>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  setTargetVelocity(0.8);
 8002da0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8002e58 <main+0x340>
 8002da4:	f7ff fdec 	bl	8002980 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 8002da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dac:	f000 fe76 	bl	8003a9c <setsuctionMotor>

						  HAL_Delay(1000);
 8002db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db4:	f001 fc74 	bl	80046a0 <HAL_Delay>

						  running();
 8002db8:	f000 feca 	bl	8003b50 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002dbc:	e037      	b.n	8002e2e <main+0x316>

			  case 4:
				  setLED('Y');
 8002dbe:	2059      	movs	r0, #89	; 0x59
 8002dc0:	f7fe f9e2 	bl	8001188 <setLED>
				  setLED2('Y');
 8002dc4:	2059      	movs	r0, #89	; 0x59
 8002dc6:	f7fe faad 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d030      	beq.n	8002e32 <main+0x31a>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  setTargetVelocity(0.9);
 8002dd0:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002e5c <main+0x344>
 8002dd4:	f7ff fdd4 	bl	8002980 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(550);
 8002dd8:	f240 2026 	movw	r0, #550	; 0x226
 8002ddc:	f000 fe5e 	bl	8003a9c <setsuctionMotor>

						  HAL_Delay(1000);
 8002de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de4:	f001 fc5c 	bl	80046a0 <HAL_Delay>

						  running();
 8002de8:	f000 feb2 	bl	8003b50 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002dec:	e021      	b.n	8002e32 <main+0x31a>

			  case 5:
				  setLED('C');
 8002dee:	2043      	movs	r0, #67	; 0x43
 8002df0:	f7fe f9ca 	bl	8001188 <setLED>
				  setLED2('X');
 8002df4:	2058      	movs	r0, #88	; 0x58
 8002df6:	f7fe fa95 	bl	8001324 <setLED2>

				  if(running_flag == true){
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <main+0x31e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  setTargetVelocity(1.0);
 8002e00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002e04:	f7ff fdbc 	bl	8002980 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(600);
 8002e08:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002e0c:	f000 fe46 	bl	8003a9c <setsuctionMotor>

						  HAL_Delay(1000);
 8002e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e14:	f001 fc44 	bl	80046a0 <HAL_Delay>

						  running();
 8002e18:	f000 fe9a 	bl	8003b50 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002e1c:	e00b      	b.n	8002e36 <main+0x31e>

			  default:
				  break;
 8002e1e:	bf00      	nop
 8002e20:	e69f      	b.n	8002b62 <main+0x4a>
				  break;
 8002e22:	bf00      	nop
 8002e24:	e69d      	b.n	8002b62 <main+0x4a>
				  break;
 8002e26:	bf00      	nop
 8002e28:	e69b      	b.n	8002b62 <main+0x4a>
				  break;
 8002e2a:	bf00      	nop
 8002e2c:	e699      	b.n	8002b62 <main+0x4a>
				  break;
 8002e2e:	bf00      	nop
 8002e30:	e697      	b.n	8002b62 <main+0x4a>
				  break;
 8002e32:	bf00      	nop
 8002e34:	e695      	b.n	8002b62 <main+0x4a>
				  break;
 8002e36:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002e38:	e693      	b.n	8002b62 <main+0x4a>
 8002e3a:	bf00      	nop
 8002e3c:	200007dc 	.word	0x200007dc
 8002e40:	200005c4 	.word	0x200005c4
 8002e44:	200003b2 	.word	0x200003b2
 8002e48:	200003b0 	.word	0x200003b0
 8002e4c:	20000660 	.word	0x20000660
 8002e50:	3f19999a 	.word	0x3f19999a
 8002e54:	3f333333 	.word	0x3f333333
 8002e58:	3f4ccccd 	.word	0x3f4ccccd
 8002e5c:	3f666666 	.word	0x3f666666

08002e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b094      	sub	sp, #80	; 0x50
 8002e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e66:	f107 0320 	add.w	r3, r7, #32
 8002e6a:	2230      	movs	r2, #48	; 0x30
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 ff14 	bl	8007c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <SystemClock_Config+0xcc>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <SystemClock_Config+0xcc>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6413      	str	r3, [r2, #64]	; 0x40
 8002e94:	4b25      	ldr	r3, [pc, #148]	; (8002f2c <SystemClock_Config+0xcc>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <SystemClock_Config+0xd0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <SystemClock_Config+0xd0>)
 8002eaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <SystemClock_Config+0xd0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ed0:	2308      	movs	r3, #8
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002ed4:	23a8      	movs	r3, #168	; 0xa8
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002edc:	2304      	movs	r3, #4
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee0:	f107 0320 	add.w	r3, r7, #32
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 ff75 	bl	8005dd4 <HAL_RCC_OscConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ef0:	f000 fd04 	bl	80038fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef4:	230f      	movs	r3, #15
 8002ef6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	2105      	movs	r1, #5
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 f9ce 	bl	80062b4 <HAL_RCC_ClockConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f1e:	f000 fced 	bl	80038fc <Error_Handler>
  }
}
 8002f22:	bf00      	nop
 8002f24:	3750      	adds	r7, #80	; 0x50
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40007000 	.word	0x40007000

08002f34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f46:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f48:	4a28      	ldr	r2, [pc, #160]	; (8002fec <MX_ADC1_Init+0xb8>)
 8002f4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f4c:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f4e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002f5a:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f62:	2201      	movs	r2, #1
 8002f64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f76:	4a1e      	ldr	r2, [pc, #120]	; (8002ff0 <MX_ADC1_Init+0xbc>)
 8002f78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f82:	2202      	movs	r2, #2
 8002f84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f94:	4814      	ldr	r0, [pc, #80]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002f96:	f001 fba5 	bl	80046e4 <HAL_ADC_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002fa0:	f000 fcac 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002fa4:	230c      	movs	r3, #12
 8002fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002fac:	2307      	movs	r3, #7
 8002fae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fb0:	463b      	mov	r3, r7
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480c      	ldr	r0, [pc, #48]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002fb6:	f001 fce9 	bl	800498c <HAL_ADC_ConfigChannel>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002fc0:	f000 fc9c 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002fc4:	230d      	movs	r3, #13
 8002fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002fc8:	2302      	movs	r3, #2
 8002fca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fcc:	463b      	mov	r3, r7
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4805      	ldr	r0, [pc, #20]	; (8002fe8 <MX_ADC1_Init+0xb4>)
 8002fd2:	f001 fcdb 	bl	800498c <HAL_ADC_ConfigChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002fdc:	f000 fc8e 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000534 	.word	0x20000534
 8002fec:	40012000 	.word	0x40012000
 8002ff0:	0f000001 	.word	0x0f000001

08002ff4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ffa:	463b      	mov	r3, r7
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003006:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003008:	4a6e      	ldr	r2, [pc, #440]	; (80031c4 <MX_ADC2_Init+0x1d0>)
 800300a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800300c:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800300e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003012:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003014:	4b6a      	ldr	r3, [pc, #424]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800301a:	4b69      	ldr	r3, [pc, #420]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800301c:	2201      	movs	r2, #1
 800301e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003020:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003022:	2201      	movs	r2, #1
 8003024:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003026:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800302e:	4b64      	ldr	r3, [pc, #400]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003030:	2200      	movs	r2, #0
 8003032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003034:	4b62      	ldr	r3, [pc, #392]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003036:	4a64      	ldr	r2, [pc, #400]	; (80031c8 <MX_ADC2_Init+0x1d4>)
 8003038:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800303a:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800303c:	2200      	movs	r2, #0
 800303e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8003040:	4b5f      	ldr	r3, [pc, #380]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003042:	220c      	movs	r2, #12
 8003044:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003046:	4b5e      	ldr	r3, [pc, #376]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800304e:	4b5c      	ldr	r3, [pc, #368]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003050:	2201      	movs	r2, #1
 8003052:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003054:	485a      	ldr	r0, [pc, #360]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003056:	f001 fb45 	bl	80046e4 <HAL_ADC_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003060:	f000 fc4c 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003064:	2300      	movs	r3, #0
 8003066:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003068:	2301      	movs	r3, #1
 800306a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800306c:	2307      	movs	r3, #7
 800306e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003070:	463b      	mov	r3, r7
 8003072:	4619      	mov	r1, r3
 8003074:	4852      	ldr	r0, [pc, #328]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003076:	f001 fc89 	bl	800498c <HAL_ADC_ConfigChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003080:	f000 fc3c 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003084:	2301      	movs	r3, #1
 8003086:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003088:	2302      	movs	r3, #2
 800308a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800308c:	463b      	mov	r3, r7
 800308e:	4619      	mov	r1, r3
 8003090:	484b      	ldr	r0, [pc, #300]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003092:	f001 fc7b 	bl	800498c <HAL_ADC_ConfigChannel>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800309c:	f000 fc2e 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80030a0:	2302      	movs	r3, #2
 80030a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80030a4:	2303      	movs	r3, #3
 80030a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030a8:	463b      	mov	r3, r7
 80030aa:	4619      	mov	r1, r3
 80030ac:	4844      	ldr	r0, [pc, #272]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 80030ae:	f001 fc6d 	bl	800498c <HAL_ADC_ConfigChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80030b8:	f000 fc20 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80030bc:	2303      	movs	r3, #3
 80030be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80030c0:	2304      	movs	r3, #4
 80030c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030c4:	463b      	mov	r3, r7
 80030c6:	4619      	mov	r1, r3
 80030c8:	483d      	ldr	r0, [pc, #244]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 80030ca:	f001 fc5f 	bl	800498c <HAL_ADC_ConfigChannel>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80030d4:	f000 fc12 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80030d8:	2304      	movs	r3, #4
 80030da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80030dc:	2305      	movs	r3, #5
 80030de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030e0:	463b      	mov	r3, r7
 80030e2:	4619      	mov	r1, r3
 80030e4:	4836      	ldr	r0, [pc, #216]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 80030e6:	f001 fc51 	bl	800498c <HAL_ADC_ConfigChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80030f0:	f000 fc04 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80030f4:	2305      	movs	r3, #5
 80030f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80030f8:	2306      	movs	r3, #6
 80030fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030fc:	463b      	mov	r3, r7
 80030fe:	4619      	mov	r1, r3
 8003100:	482f      	ldr	r0, [pc, #188]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003102:	f001 fc43 	bl	800498c <HAL_ADC_ConfigChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800310c:	f000 fbf6 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003110:	2306      	movs	r3, #6
 8003112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003114:	2307      	movs	r3, #7
 8003116:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003118:	463b      	mov	r3, r7
 800311a:	4619      	mov	r1, r3
 800311c:	4828      	ldr	r0, [pc, #160]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800311e:	f001 fc35 	bl	800498c <HAL_ADC_ConfigChannel>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003128:	f000 fbe8 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800312c:	2307      	movs	r3, #7
 800312e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003130:	2308      	movs	r3, #8
 8003132:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003134:	463b      	mov	r3, r7
 8003136:	4619      	mov	r1, r3
 8003138:	4821      	ldr	r0, [pc, #132]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800313a:	f001 fc27 	bl	800498c <HAL_ADC_ConfigChannel>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003144:	f000 fbda 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003148:	2308      	movs	r3, #8
 800314a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800314c:	2309      	movs	r3, #9
 800314e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003150:	463b      	mov	r3, r7
 8003152:	4619      	mov	r1, r3
 8003154:	481a      	ldr	r0, [pc, #104]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003156:	f001 fc19 	bl	800498c <HAL_ADC_ConfigChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003160:	f000 fbcc 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003164:	2309      	movs	r3, #9
 8003166:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003168:	230a      	movs	r3, #10
 800316a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800316c:	463b      	mov	r3, r7
 800316e:	4619      	mov	r1, r3
 8003170:	4813      	ldr	r0, [pc, #76]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 8003172:	f001 fc0b 	bl	800498c <HAL_ADC_ConfigChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800317c:	f000 fbbe 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003180:	230e      	movs	r3, #14
 8003182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003184:	230b      	movs	r3, #11
 8003186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003188:	463b      	mov	r3, r7
 800318a:	4619      	mov	r1, r3
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 800318e:	f001 fbfd 	bl	800498c <HAL_ADC_ConfigChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003198:	f000 fbb0 	bl	80038fc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800319c:	230f      	movs	r3, #15
 800319e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80031a0:	230c      	movs	r3, #12
 80031a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031a4:	463b      	mov	r3, r7
 80031a6:	4619      	mov	r1, r3
 80031a8:	4805      	ldr	r0, [pc, #20]	; (80031c0 <MX_ADC2_Init+0x1cc>)
 80031aa:	f001 fbef 	bl	800498c <HAL_ADC_ConfigChannel>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80031b4:	f000 fba2 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	200004e4 	.word	0x200004e4
 80031c4:	40012100 	.word	0x40012100
 80031c8:	0f000001 	.word	0x0f000001

080031cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <MX_I2C1_Init+0x50>)
 80031d2:	4a13      	ldr	r2, [pc, #76]	; (8003220 <MX_I2C1_Init+0x54>)
 80031d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80031d6:	4b11      	ldr	r3, [pc, #68]	; (800321c <MX_I2C1_Init+0x50>)
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <MX_I2C1_Init+0x58>)
 80031da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031dc:	4b0f      	ldr	r3, [pc, #60]	; (800321c <MX_I2C1_Init+0x50>)
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031e2:	4b0e      	ldr	r3, [pc, #56]	; (800321c <MX_I2C1_Init+0x50>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <MX_I2C1_Init+0x50>)
 80031ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <MX_I2C1_Init+0x50>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <MX_I2C1_Init+0x50>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <MX_I2C1_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <MX_I2C1_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <MX_I2C1_Init+0x50>)
 800320a:	f002 fcab 	bl	8005b64 <HAL_I2C_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003214:	f000 fb72 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003218:	bf00      	nop
 800321a:	bd80      	pop	{r7, pc}
 800321c:	2000060c 	.word	0x2000060c
 8003220:	40005400 	.word	0x40005400
 8003224:	000186a0 	.word	0x000186a0

08003228 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <MX_SPI3_Init+0x64>)
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <MX_SPI3_Init+0x68>)
 8003230:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <MX_SPI3_Init+0x64>)
 8003234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003238:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <MX_SPI3_Init+0x64>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003240:	4b12      	ldr	r3, [pc, #72]	; (800328c <MX_SPI3_Init+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003246:	4b11      	ldr	r3, [pc, #68]	; (800328c <MX_SPI3_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <MX_SPI3_Init+0x64>)
 800324e:	2200      	movs	r2, #0
 8003250:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_SPI3_Init+0x64>)
 8003254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003258:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <MX_SPI3_Init+0x64>)
 800325c:	2200      	movs	r2, #0
 800325e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <MX_SPI3_Init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <MX_SPI3_Init+0x64>)
 8003268:	2200      	movs	r2, #0
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800326c:	4b07      	ldr	r3, [pc, #28]	; (800328c <MX_SPI3_Init+0x64>)
 800326e:	2200      	movs	r2, #0
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <MX_SPI3_Init+0x64>)
 8003274:	220a      	movs	r2, #10
 8003276:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003278:	4804      	ldr	r0, [pc, #16]	; (800328c <MX_SPI3_Init+0x64>)
 800327a:	f003 f9e7 	bl	800664c <HAL_SPI_Init>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003284:	f000 fb3a 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003288:	bf00      	nop
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000664 	.word	0x20000664
 8003290:	40003c00 	.word	0x40003c00

08003294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b092      	sub	sp, #72	; 0x48
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800329a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	605a      	str	r2, [r3, #4]
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	60da      	str	r2, [r3, #12]
 80032b2:	611a      	str	r2, [r3, #16]
 80032b4:	615a      	str	r2, [r3, #20]
 80032b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032b8:	1d3b      	adds	r3, r7, #4
 80032ba:	2220      	movs	r2, #32
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f004 fcec 	bl	8007c9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032c6:	4a33      	ldr	r2, [pc, #204]	; (8003394 <MX_TIM1_Init+0x100>)
 80032c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032cc:	2209      	movs	r2, #9
 80032ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d0:	4b2f      	ldr	r3, [pc, #188]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80032d6:	4b2e      	ldr	r3, [pc, #184]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032d8:	f240 3247 	movw	r2, #839	; 0x347
 80032dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032e4:	4b2a      	ldr	r3, [pc, #168]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80032f0:	4827      	ldr	r0, [pc, #156]	; (8003390 <MX_TIM1_Init+0xfc>)
 80032f2:	f003 fa5e 	bl	80067b2 <HAL_TIM_PWM_Init>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80032fc:	f000 fafe 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003304:	2300      	movs	r3, #0
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003308:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800330c:	4619      	mov	r1, r3
 800330e:	4820      	ldr	r0, [pc, #128]	; (8003390 <MX_TIM1_Init+0xfc>)
 8003310:	f003 ffee 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800331a:	f000 faef 	bl	80038fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331e:	2360      	movs	r3, #96	; 0x60
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003326:	2300      	movs	r3, #0
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333a:	220c      	movs	r2, #12
 800333c:	4619      	mov	r1, r3
 800333e:	4814      	ldr	r0, [pc, #80]	; (8003390 <MX_TIM1_Init+0xfc>)
 8003340:	f003 fc72 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800334a:	f000 fad7 	bl	80038fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003366:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4807      	ldr	r0, [pc, #28]	; (8003390 <MX_TIM1_Init+0xfc>)
 8003372:	f004 f839 	bl	80073e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800337c:	f000 fabe 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <MX_TIM1_Init+0xfc>)
 8003382:	f000 ff7d 	bl	8004280 <HAL_TIM_MspPostInit>

}
 8003386:	bf00      	nop
 8003388:	3748      	adds	r7, #72	; 0x48
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000079c 	.word	0x2000079c
 8003394:	40010000 	.word	0x40010000

08003398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	; 0x30
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 fc78 	bl	8007c9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80033b4:	4b20      	ldr	r3, [pc, #128]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <MX_TIM3_Init+0xa4>)
 80033b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80033ba:	4b1f      	ldr	r3, [pc, #124]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033bc:	2200      	movs	r2, #0
 80033be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80033c6:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d4:	4b18      	ldr	r3, [pc, #96]	; (8003438 <MX_TIM3_Init+0xa0>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033da:	2301      	movs	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033e2:	2301      	movs	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033f2:	2301      	movs	r3, #1
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80033fe:	f107 030c 	add.w	r3, r7, #12
 8003402:	4619      	mov	r1, r3
 8003404:	480c      	ldr	r0, [pc, #48]	; (8003438 <MX_TIM3_Init+0xa0>)
 8003406:	f003 fa3d 	bl	8006884 <HAL_TIM_Encoder_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003410:	f000 fa74 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4805      	ldr	r0, [pc, #20]	; (8003438 <MX_TIM3_Init+0xa0>)
 8003422:	f003 ff65 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800342c:	f000 fa66 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000410 	.word	0x20000410
 800343c:	40000400 	.word	0x40000400

08003440 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08c      	sub	sp, #48	; 0x30
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f004 fc24 	bl	8007c9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800345c:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <MX_TIM4_Init+0xa0>)
 800345e:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <MX_TIM4_Init+0xa4>)
 8003460:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003462:	4b1f      	ldr	r3, [pc, #124]	; (80034e0 <MX_TIM4_Init+0xa0>)
 8003464:	2200      	movs	r2, #0
 8003466:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <MX_TIM4_Init+0xa0>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <MX_TIM4_Init+0xa0>)
 8003470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003474:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <MX_TIM4_Init+0xa0>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800347c:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <MX_TIM4_Init+0xa0>)
 800347e:	2200      	movs	r2, #0
 8003480:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003482:	2301      	movs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800348a:	2301      	movs	r3, #1
 800348c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003496:	2300      	movs	r3, #0
 8003498:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800349a:	2301      	movs	r3, #1
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800349e:	2300      	movs	r3, #0
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80034a6:	f107 030c 	add.w	r3, r7, #12
 80034aa:	4619      	mov	r1, r3
 80034ac:	480c      	ldr	r0, [pc, #48]	; (80034e0 <MX_TIM4_Init+0xa0>)
 80034ae:	f003 f9e9 	bl	8006884 <HAL_TIM_Encoder_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80034b8:	f000 fa20 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4805      	ldr	r0, [pc, #20]	; (80034e0 <MX_TIM4_Init+0xa0>)
 80034ca:	f003 ff11 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80034d4:	f000 fa12 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80034d8:	bf00      	nop
 80034da:	3730      	adds	r7, #48	; 0x30
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200003d0 	.word	0x200003d0
 80034e4:	40000800 	.word	0x40000800

080034e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ee:	463b      	mov	r3, r7
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80034f6:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_TIM6_Init+0x64>)
 80034f8:	4a15      	ldr	r2, [pc, #84]	; (8003550 <MX_TIM6_Init+0x68>)
 80034fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80034fc:	4b13      	ldr	r3, [pc, #76]	; (800354c <MX_TIM6_Init+0x64>)
 80034fe:	2253      	movs	r2, #83	; 0x53
 8003500:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <MX_TIM6_Init+0x64>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <MX_TIM6_Init+0x64>)
 800350a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800350e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <MX_TIM6_Init+0x64>)
 8003512:	2200      	movs	r2, #0
 8003514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003516:	480d      	ldr	r0, [pc, #52]	; (800354c <MX_TIM6_Init+0x64>)
 8003518:	f003 f8fc 	bl	8006714 <HAL_TIM_Base_Init>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003522:	f000 f9eb 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800352e:	463b      	mov	r3, r7
 8003530:	4619      	mov	r1, r3
 8003532:	4806      	ldr	r0, [pc, #24]	; (800354c <MX_TIM6_Init+0x64>)
 8003534:	f003 fedc 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800353e:	f000 f9dd 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	2000075c 	.word	0x2000075c
 8003550:	40001000 	.word	0x40001000

08003554 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355a:	463b      	mov	r3, r7
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <MX_TIM7_Init+0x60>)
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <MX_TIM7_Init+0x64>)
 8003566:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <MX_TIM7_Init+0x60>)
 800356a:	2253      	movs	r2, #83	; 0x53
 800356c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <MX_TIM7_Init+0x60>)
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <MX_TIM7_Init+0x60>)
 8003576:	2263      	movs	r2, #99	; 0x63
 8003578:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <MX_TIM7_Init+0x60>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <MX_TIM7_Init+0x60>)
 8003582:	f003 f8c7 	bl	8006714 <HAL_TIM_Base_Init>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800358c:	f000 f9b6 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003590:	2300      	movs	r3, #0
 8003592:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003594:	2300      	movs	r3, #0
 8003596:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003598:	463b      	mov	r3, r7
 800359a:	4619      	mov	r1, r3
 800359c:	4805      	ldr	r0, [pc, #20]	; (80035b4 <MX_TIM7_Init+0x60>)
 800359e:	f003 fea7 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80035a8:	f000 f9a8 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000844 	.word	0x20000844
 80035b8:	40001400 	.word	0x40001400

080035bc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b092      	sub	sp, #72	; 0x48
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
 80035dc:	615a      	str	r2, [r3, #20]
 80035de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	2220      	movs	r2, #32
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fb58 	bl	8007c9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80035ec:	4b39      	ldr	r3, [pc, #228]	; (80036d4 <MX_TIM8_Init+0x118>)
 80035ee:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <MX_TIM8_Init+0x11c>)
 80035f0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <MX_TIM8_Init+0x118>)
 80035f4:	2203      	movs	r2, #3
 80035f6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <MX_TIM8_Init+0x118>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80035fe:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <MX_TIM8_Init+0x118>)
 8003600:	f240 628f 	movw	r2, #1679	; 0x68f
 8003604:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003606:	4b33      	ldr	r3, [pc, #204]	; (80036d4 <MX_TIM8_Init+0x118>)
 8003608:	2200      	movs	r2, #0
 800360a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800360c:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <MX_TIM8_Init+0x118>)
 800360e:	2200      	movs	r2, #0
 8003610:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003612:	4b30      	ldr	r3, [pc, #192]	; (80036d4 <MX_TIM8_Init+0x118>)
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003618:	482e      	ldr	r0, [pc, #184]	; (80036d4 <MX_TIM8_Init+0x118>)
 800361a:	f003 f8ca 	bl	80067b2 <HAL_TIM_PWM_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003624:	f000 f96a 	bl	80038fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003628:	2300      	movs	r3, #0
 800362a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800362c:	2300      	movs	r3, #0
 800362e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003634:	4619      	mov	r1, r3
 8003636:	4827      	ldr	r0, [pc, #156]	; (80036d4 <MX_TIM8_Init+0x118>)
 8003638:	f003 fe5a 	bl	80072f0 <HAL_TIMEx_MasterConfigSynchronization>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003642:	f000 f95b 	bl	80038fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003646:	2360      	movs	r3, #96	; 0x60
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800364e:	2300      	movs	r3, #0
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003652:	2300      	movs	r3, #0
 8003654:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003656:	2300      	movs	r3, #0
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003666:	2200      	movs	r2, #0
 8003668:	4619      	mov	r1, r3
 800366a:	481a      	ldr	r0, [pc, #104]	; (80036d4 <MX_TIM8_Init+0x118>)
 800366c:	f003 fadc 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003676:	f000 f941 	bl	80038fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800367a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800367e:	2208      	movs	r2, #8
 8003680:	4619      	mov	r1, r3
 8003682:	4814      	ldr	r0, [pc, #80]	; (80036d4 <MX_TIM8_Init+0x118>)
 8003684:	f003 fad0 	bl	8006c28 <HAL_TIM_PWM_ConfigChannel>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800368e:	f000 f935 	bl	80038fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036ac:	2300      	movs	r3, #0
 80036ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80036b0:	1d3b      	adds	r3, r7, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4807      	ldr	r0, [pc, #28]	; (80036d4 <MX_TIM8_Init+0x118>)
 80036b6:	f003 fe97 	bl	80073e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80036c0:	f000 f91c 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <MX_TIM8_Init+0x118>)
 80036c6:	f000 fddb 	bl	8004280 <HAL_TIM_MspPostInit>

}
 80036ca:	bf00      	nop
 80036cc:	3748      	adds	r7, #72	; 0x48
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200005c8 	.word	0x200005c8
 80036d8:	40010400 	.word	0x40010400

080036dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <MX_USART1_UART_Init+0x50>)
 80036e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 80036e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 8003702:	220c      	movs	r2, #12
 8003704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003706:	4b08      	ldr	r3, [pc, #32]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 8003708:	2200      	movs	r2, #0
 800370a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 800370e:	2200      	movs	r2, #0
 8003710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003712:	4805      	ldr	r0, [pc, #20]	; (8003728 <MX_USART1_UART_Init+0x4c>)
 8003714:	f003 fece 	bl	80074b4 <HAL_UART_Init>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800371e:	f000 f8ed 	bl	80038fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200006bc 	.word	0x200006bc
 800372c:	40011000 	.word	0x40011000

08003730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <MX_DMA_Init+0x4c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a0f      	ldr	r2, [pc, #60]	; (800377c <MX_DMA_Init+0x4c>)
 8003740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <MX_DMA_Init+0x4c>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	2038      	movs	r0, #56	; 0x38
 8003758:	f001 fc93 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800375c:	2038      	movs	r0, #56	; 0x38
 800375e:	f001 fcac 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003762:	2200      	movs	r2, #0
 8003764:	2100      	movs	r1, #0
 8003766:	203a      	movs	r0, #58	; 0x3a
 8003768:	f001 fc8b 	bl	8005082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800376c:	203a      	movs	r0, #58	; 0x3a
 800376e:	f001 fca4 	bl	80050ba <HAL_NVIC_EnableIRQ>

}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08a      	sub	sp, #40	; 0x28
 8003784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003786:	f107 0314 	add.w	r3, r7, #20
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <MX_GPIO_Init+0x168>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	4a52      	ldr	r2, [pc, #328]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	6313      	str	r3, [r2, #48]	; 0x30
 80037a6:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	4b4c      	ldr	r3, [pc, #304]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	4a4b      	ldr	r2, [pc, #300]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	6313      	str	r3, [r2, #48]	; 0x30
 80037c2:	4b49      	ldr	r3, [pc, #292]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	4b45      	ldr	r3, [pc, #276]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a44      	ldr	r2, [pc, #272]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b42      	ldr	r3, [pc, #264]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b3b      	ldr	r3, [pc, #236]	; (80038e8 <MX_GPIO_Init+0x168>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4b37      	ldr	r3, [pc, #220]	; (80038e8 <MX_GPIO_Init+0x168>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a36      	ldr	r2, [pc, #216]	; (80038e8 <MX_GPIO_Init+0x168>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <MX_GPIO_Init+0x168>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8003822:	2200      	movs	r2, #0
 8003824:	f24e 2180 	movw	r1, #57984	; 0xe280
 8003828:	4830      	ldr	r0, [pc, #192]	; (80038ec <MX_GPIO_Init+0x16c>)
 800382a:	f002 f981 	bl	8005b30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800382e:	2200      	movs	r2, #0
 8003830:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8003834:	482e      	ldr	r0, [pc, #184]	; (80038f0 <MX_GPIO_Init+0x170>)
 8003836:	f002 f97b 	bl	8005b30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800383a:	2200      	movs	r2, #0
 800383c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003840:	482c      	ldr	r0, [pc, #176]	; (80038f4 <MX_GPIO_Init+0x174>)
 8003842:	f002 f975 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8003846:	2200      	movs	r2, #0
 8003848:	2104      	movs	r1, #4
 800384a:	482b      	ldr	r0, [pc, #172]	; (80038f8 <MX_GPIO_Init+0x178>)
 800384c:	f002 f970 	bl	8005b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8003850:	f24e 2380 	movw	r3, #57984	; 0xe280
 8003854:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003856:	2301      	movs	r3, #1
 8003858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003862:	f107 0314 	add.w	r3, r7, #20
 8003866:	4619      	mov	r1, r3
 8003868:	4820      	ldr	r0, [pc, #128]	; (80038ec <MX_GPIO_Init+0x16c>)
 800386a:	f001 ffaf 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800386e:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 8003872:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003874:	2301      	movs	r3, #1
 8003876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	4619      	mov	r1, r3
 8003886:	481a      	ldr	r0, [pc, #104]	; (80038f0 <MX_GPIO_Init+0x170>)
 8003888:	f001 ffa0 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800388c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003892:	2300      	movs	r3, #0
 8003894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800389a:	f107 0314 	add.w	r3, r7, #20
 800389e:	4619      	mov	r1, r3
 80038a0:	4814      	ldr	r0, [pc, #80]	; (80038f4 <MX_GPIO_Init+0x174>)
 80038a2:	f001 ff93 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038ac:	2301      	movs	r3, #1
 80038ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038b8:	f107 0314 	add.w	r3, r7, #20
 80038bc:	4619      	mov	r1, r3
 80038be:	480d      	ldr	r0, [pc, #52]	; (80038f4 <MX_GPIO_Init+0x174>)
 80038c0:	f001 ff84 	bl	80057cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038c4:	2304      	movs	r3, #4
 80038c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4619      	mov	r1, r3
 80038da:	4807      	ldr	r0, [pc, #28]	; (80038f8 <MX_GPIO_Init+0x178>)
 80038dc:	f001 ff76 	bl	80057cc <HAL_GPIO_Init>

}
 80038e0:	bf00      	nop
 80038e2:	3728      	adds	r7, #40	; 0x28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40020800 	.word	0x40020800
 80038f0:	40020400 	.word	0x40020400
 80038f4:	40020000 	.word	0x40020000
 80038f8:	40020c00 	.word	0x40020c00

080038fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003900:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003902:	e7fe      	b.n	8003902 <Error_Handler+0x6>

08003904 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8003908:	2100      	movs	r1, #0
 800390a:	4808      	ldr	r0, [pc, #32]	; (800392c <initMotor+0x28>)
 800390c:	f002 ff7c 	bl	8006808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8003910:	2108      	movs	r1, #8
 8003912:	4806      	ldr	r0, [pc, #24]	; (800392c <initMotor+0x28>)
 8003914:	f002 ff78 	bl	8006808 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003918:	210c      	movs	r1, #12
 800391a:	4805      	ldr	r0, [pc, #20]	; (8003930 <initMotor+0x2c>)
 800391c:	f002 ff74 	bl	8006808 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8003920:	2064      	movs	r0, #100	; 0x64
 8003922:	f000 febd 	bl	80046a0 <HAL_Delay>
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200005c8 	.word	0x200005c8
 8003930:	2000079c 	.word	0x2000079c

08003934 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <motorCtrlFlip+0xb0>)
 800393c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003940:	2b00      	cmp	r3, #0
 8003942:	db0d      	blt.n	8003960 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <motorCtrlFlip+0xb0>)
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <motorCtrlFlip+0xb4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003952:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8003954:	2201      	movs	r2, #1
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	4824      	ldr	r0, [pc, #144]	; (80039ec <motorCtrlFlip+0xb8>)
 800395a:	f002 f8e9 	bl	8005b30 <HAL_GPIO_WritePin>
 800395e:	e010      	b.n	8003982 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <motorCtrlFlip+0xb0>)
 8003962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003966:	b29b      	uxth	r3, r3
 8003968:	425b      	negs	r3, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800396e:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <motorCtrlFlip+0xb4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003976:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	481b      	ldr	r0, [pc, #108]	; (80039ec <motorCtrlFlip+0xb8>)
 800397e:	f002 f8d7 	bl	8005b30 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <motorCtrlFlip+0xbc>)
 8003984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003988:	2b00      	cmp	r3, #0
 800398a:	db0e      	blt.n	80039aa <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 800398c:	4b18      	ldr	r3, [pc, #96]	; (80039f0 <motorCtrlFlip+0xbc>)
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <motorCtrlFlip+0xb4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800399a:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800399c:	2201      	movs	r2, #1
 800399e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039a2:	4812      	ldr	r0, [pc, #72]	; (80039ec <motorCtrlFlip+0xb8>)
 80039a4:	f002 f8c4 	bl	8005b30 <HAL_GPIO_WritePin>
 80039a8:	e011      	b.n	80039ce <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <motorCtrlFlip+0xbc>)
 80039ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	425b      	negs	r3, r3
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <motorCtrlFlip+0xb4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80039c0:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039c8:	4808      	ldr	r0, [pc, #32]	; (80039ec <motorCtrlFlip+0xb8>)
 80039ca:	f002 f8b1 	bl	8005b30 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <motorCtrlFlip+0xc0>)
 80039d0:	88fb      	ldrh	r3, [r7, #6]
 80039d2:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80039d4:	4a08      	ldr	r2, [pc, #32]	; (80039f8 <motorCtrlFlip+0xc4>)
 80039d6:	88bb      	ldrh	r3, [r7, #4]
 80039d8:	8013      	strh	r3, [r2, #0]
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	200003b4 	.word	0x200003b4
 80039e8:	200005c8 	.word	0x200005c8
 80039ec:	40020800 	.word	0x40020800
 80039f0:	200003b6 	.word	0x200003b6
 80039f4:	20000888 	.word	0x20000888
 80039f8:	20000886 	.word	0x20000886

080039fc <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <suctionmotorCtrlFlip+0x1c>)
 8003a02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <suctionmotorCtrlFlip+0x20>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003a0c:	bf00      	nop
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	200003b8 	.word	0x200003b8
 8003a1c:	2000079c 	.word	0x2000079c

08003a20 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	460a      	mov	r2, r1
 8003a2a:	80fb      	strh	r3, [r7, #6]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8003a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a34:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	dd03      	ble.n	8003a44 <setMotor+0x24>
 8003a3c:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a40:	80fb      	strh	r3, [r7, #6]
 8003a42:	e007      	b.n	8003a54 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8003a44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <setMotor+0x70>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	da02      	bge.n	8003a54 <setMotor+0x34>
 8003a4e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003a52:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8003a54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a58:	f240 628e 	movw	r2, #1678	; 0x68e
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	dd03      	ble.n	8003a68 <setMotor+0x48>
 8003a60:	f240 638f 	movw	r3, #1679	; 0x68f
 8003a64:	80bb      	strh	r3, [r7, #4]
 8003a66:	e007      	b.n	8003a78 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8003a68:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <setMotor+0x70>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	da02      	bge.n	8003a78 <setMotor+0x58>
 8003a72:	f64f 1371 	movw	r3, #63857	; 0xf971
 8003a76:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8003a78:	4a06      	ldr	r2, [pc, #24]	; (8003a94 <setMotor+0x74>)
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8003a7e:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <setMotor+0x78>)
 8003a80:	88bb      	ldrh	r3, [r7, #4]
 8003a82:	8013      	strh	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	fffff972 	.word	0xfffff972
 8003a94:	200003b4 	.word	0x200003b4
 8003a98:	200003b6 	.word	0x200003b6

08003a9c <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8003aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bfb8      	it	lt
 8003aae:	425b      	neglt	r3, r3
 8003ab0:	b21a      	sxth	r2, r3
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <setsuctionMotor+0x38>)
 8003ab4:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8003ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aba:	f240 3246 	movw	r2, #838	; 0x346
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	dd02      	ble.n	8003ac8 <setsuctionMotor+0x2c>
 8003ac2:	f240 3347 	movw	r3, #839	; 0x347
 8003ac6:	80fb      	strh	r3, [r7, #6]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	200003b8 	.word	0x200003b8

08003ad8 <updateSideSensorStatus>:

static float min_velocity, max_velocity;

//white <= 1700 black >= 1700

void updateSideSensorStatus(){
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
	goal_timer++;
 8003adc:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <updateSideSensorStatus+0x64>)
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <updateSideSensorStatus+0x64>)
 8003ae6:	801a      	strh	r2, [r3, #0]

	if(goal_timer >= 10000){
 8003ae8:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <updateSideSensorStatus+0x64>)
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	f242 720f 	movw	r2, #9999	; 0x270f
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d903      	bls.n	8003afc <updateSideSensorStatus+0x24>
		goal_timer = 10000;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <updateSideSensorStatus+0x64>)
 8003af6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003afa:	801a      	strh	r2, [r3, #0]
	}

	if(side_sensorL <= 1000){
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <updateSideSensorStatus+0x68>)
 8003afe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b06:	dc03      	bgt.n	8003b10 <updateSideSensorStatus+0x38>
		side_sensor_l = true;
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <updateSideSensorStatus+0x6c>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e002      	b.n	8003b16 <updateSideSensorStatus+0x3e>
	}
	else{
		side_sensor_l = false;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <updateSideSensorStatus+0x6c>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 1000){
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <updateSideSensorStatus+0x70>)
 8003b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b20:	dc03      	bgt.n	8003b2a <updateSideSensorStatus+0x52>
		side_sensor_r = true;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <updateSideSensorStatus+0x74>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8003b28:	e002      	b.n	8003b30 <updateSideSensorStatus+0x58>
		side_sensor_r = false;
 8003b2a:	4b08      	ldr	r3, [pc, #32]	; (8003b4c <updateSideSensorStatus+0x74>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	200003ba 	.word	0x200003ba
 8003b40:	200004b0 	.word	0x200004b0
 8003b44:	200003bc 	.word	0x200003bc
 8003b48:	20000450 	.word	0x20000450
 8003b4c:	200003bd 	.word	0x200003bd

08003b50 <running>:

void running(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	80fb      	strh	r3, [r7, #6]
	startLineTrace();
 8003b5a:	f7fd fefb 	bl	8001954 <startLineTrace>
	startVelocityControl();
 8003b5e:	f7fe ff5d 	bl	8002a1c <startVelocityControl>
	//setTargetVelocity(min_velocity);

	while(goal_flag == false){
 8003b62:	e08d      	b.n	8003c80 <running+0x130>
		switch(pattern){
 8003b64:	88fb      	ldrh	r3, [r7, #6]
 8003b66:	2b14      	cmp	r3, #20
 8003b68:	f200 808a 	bhi.w	8003c80 <running+0x130>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <running+0x24>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003c81 	.word	0x08003c81
 8003b7c:	08003c81 	.word	0x08003c81
 8003b80:	08003c81 	.word	0x08003c81
 8003b84:	08003c81 	.word	0x08003c81
 8003b88:	08003beb 	.word	0x08003beb
 8003b8c:	08003c81 	.word	0x08003c81
 8003b90:	08003c81 	.word	0x08003c81
 8003b94:	08003c81 	.word	0x08003c81
 8003b98:	08003c81 	.word	0x08003c81
 8003b9c:	08003bff 	.word	0x08003bff
 8003ba0:	08003c81 	.word	0x08003c81
 8003ba4:	08003c81 	.word	0x08003c81
 8003ba8:	08003c81 	.word	0x08003c81
 8003bac:	08003c81 	.word	0x08003c81
 8003bb0:	08003c81 	.word	0x08003c81
 8003bb4:	08003c81 	.word	0x08003c81
 8003bb8:	08003c81 	.word	0x08003c81
 8003bbc:	08003c81 	.word	0x08003c81
 8003bc0:	08003c81 	.word	0x08003c81
 8003bc4:	08003c79 	.word	0x08003c79
				  case 0:

					  if(getSideSensorStatusR() == true){
 8003bc8:	f000 f87a 	bl	8003cc0 <getSideSensorStatusR>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d056      	beq.n	8003c80 <running+0x130>
						  start_goal_line_cnt++;
 8003bd2:	4b31      	ldr	r3, [pc, #196]	; (8003c98 <running+0x148>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <running+0x148>)
 8003bdc:	701a      	strb	r2, [r3, #0]
						  goal_timer = 0;
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <running+0x14c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	801a      	strh	r2, [r3, #0]
						  pattern = 5;
 8003be4:	2305      	movs	r3, #5
 8003be6:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8003be8:	e04a      	b.n	8003c80 <running+0x130>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8003bea:	f000 f869 	bl	8003cc0 <getSideSensorStatusR>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f083 0301 	eor.w	r3, r3, #1
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <running+0xae>
 8003bfa:	230a      	movs	r3, #10
 8003bfc:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8003bfe:	f000 f853 	bl	8003ca8 <getSideSensorStatusL>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <running+0xc4>
						  goal_judge_flag = false;
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <running+0x150>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
						  goal_timer = 0;
 8003c0e:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <running+0x14c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	801a      	strh	r2, [r3, #0]
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true && goal_timer >= 60){
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <running+0x150>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <running+0xf2>
 8003c22:	f000 f84d 	bl	8003cc0 <getSideSensorStatusR>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <running+0xf2>
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <running+0x14c>)
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	2b3b      	cmp	r3, #59	; 0x3b
 8003c32:	d906      	bls.n	8003c42 <running+0xf2>
						  goal_judge_flag = true;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <running+0x150>)
 8003c36:	2201      	movs	r2, #1
 8003c38:	701a      	strb	r2, [r3, #0]
						  goal_timer = 0;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <running+0x14c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	801a      	strh	r2, [r3, #0]
 8003c40:	e013      	b.n	8003c6a <running+0x11a>
					  }

					  else if(goal_judge_flag == true && goal_timer >= 60){
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <running+0x150>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <running+0x11a>
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <running+0x14c>)
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	2b3b      	cmp	r3, #59	; 0x3b
 8003c50:	d90b      	bls.n	8003c6a <running+0x11a>
						  start_goal_line_cnt++;
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <running+0x148>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <running+0x148>)
 8003c5c:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8003c5e:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <running+0x150>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
						  goal_timer = 0;
 8003c64:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <running+0x14c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	801a      	strh	r2, [r3, #0]
					  }

					  if(start_goal_line_cnt >= 2){
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <running+0x148>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d906      	bls.n	8003c80 <running+0x130>
						  pattern = 20;
 8003c72:	2314      	movs	r3, #20
 8003c74:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8003c76:	e003      	b.n	8003c80 <running+0x130>
					  //setLED('R');
					  //stopLineTrace();

					  //running_flag = false;

					  goal_flag = true;
 8003c78:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <running+0x154>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]

					  break;
 8003c7e:	bf00      	nop
	while(goal_flag == false){
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <running+0x154>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f47f af6a 	bne.w	8003b64 <running+0x14>
		}
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	200003c0 	.word	0x200003c0
 8003c9c:	200003ba 	.word	0x200003ba
 8003ca0:	200003bf 	.word	0x200003bf
 8003ca4:	200003be 	.word	0x200003be

08003ca8 <getSideSensorStatusL>:

bool getSideSensorStatusL()
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8003cac:	4b03      	ldr	r3, [pc, #12]	; (8003cbc <getSideSensorStatusL+0x14>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	200003bc 	.word	0x200003bc

08003cc0 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <getSideSensorStatusR+0x14>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200003bd 	.word	0x200003bd

08003cd8 <getgoalStatus>:

bool getgoalStatus()
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
	return goal_flag;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <getgoalStatus+0x14>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	200003be 	.word	0x200003be

08003cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
 8003cfa:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <HAL_MspInit+0x4c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4a0f      	ldr	r2, [pc, #60]	; (8003d3c <HAL_MspInit+0x4c>)
 8003d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <HAL_MspInit+0x4c>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0e:	607b      	str	r3, [r7, #4]
 8003d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_MspInit+0x4c>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <HAL_MspInit+0x4c>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	; 0x40
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_MspInit+0x4c>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800

08003d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08e      	sub	sp, #56	; 0x38
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
 8003d54:	60da      	str	r2, [r3, #12]
 8003d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a79      	ldr	r2, [pc, #484]	; (8003f44 <HAL_ADC_MspInit+0x204>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d158      	bne.n	8003e14 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	4b78      	ldr	r3, [pc, #480]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4a77      	ldr	r2, [pc, #476]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6453      	str	r3, [r2, #68]	; 0x44
 8003d72:	4b75      	ldr	r3, [pc, #468]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	4b71      	ldr	r3, [pc, #452]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	4a70      	ldr	r2, [pc, #448]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d88:	f043 0304 	orr.w	r3, r3, #4
 8003d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8e:	4b6e      	ldr	r3, [pc, #440]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003d9a:	230e      	movs	r3, #14
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003daa:	4619      	mov	r1, r3
 8003dac:	4867      	ldr	r0, [pc, #412]	; (8003f4c <HAL_ADC_MspInit+0x20c>)
 8003dae:	f001 fd0d 	bl	80057cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003db2:	4b67      	ldr	r3, [pc, #412]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003db4:	4a67      	ldr	r2, [pc, #412]	; (8003f54 <HAL_ADC_MspInit+0x214>)
 8003db6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003db8:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dbe:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc4:	4b62      	ldr	r3, [pc, #392]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003dd2:	4b5f      	ldr	r3, [pc, #380]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003ddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003de0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003de2:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003de8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003dea:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003df0:	4b57      	ldr	r3, [pc, #348]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003df6:	4856      	ldr	r0, [pc, #344]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003df8:	f001 f97a 	bl	80050f0 <HAL_DMA_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003e02:	f7ff fd7b 	bl	80038fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e0c:	4a50      	ldr	r2, [pc, #320]	; (8003f50 <HAL_ADC_MspInit+0x210>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003e12:	e092      	b.n	8003f3a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a4f      	ldr	r2, [pc, #316]	; (8003f58 <HAL_ADC_MspInit+0x218>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f040 808d 	bne.w	8003f3a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	4b48      	ldr	r3, [pc, #288]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	4a47      	ldr	r2, [pc, #284]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8003e30:	4b45      	ldr	r3, [pc, #276]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	4b41      	ldr	r3, [pc, #260]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	4a39      	ldr	r2, [pc, #228]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	6313      	str	r3, [r2, #48]	; 0x30
 8003e68:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	4a32      	ldr	r2, [pc, #200]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	6313      	str	r3, [r2, #48]	; 0x30
 8003e84:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_ADC_MspInit+0x208>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003e90:	23ff      	movs	r3, #255	; 0xff
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e94:	2303      	movs	r3, #3
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	482e      	ldr	r0, [pc, #184]	; (8003f5c <HAL_ADC_MspInit+0x21c>)
 8003ea4:	f001 fc92 	bl	80057cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ea8:	2330      	movs	r3, #48	; 0x30
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eac:	2303      	movs	r3, #3
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4824      	ldr	r0, [pc, #144]	; (8003f4c <HAL_ADC_MspInit+0x20c>)
 8003ebc:	f001 fc86 	bl	80057cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4823      	ldr	r0, [pc, #140]	; (8003f60 <HAL_ADC_MspInit+0x220>)
 8003ed4:	f001 fc7a 	bl	80057cc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003eda:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_ADC_MspInit+0x228>)
 8003edc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003ede:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ee4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003ef2:	4b1c      	ldr	r3, [pc, #112]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f00:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f08:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003f0a:	4b16      	ldr	r3, [pc, #88]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f10:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f18:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003f1e:	4811      	ldr	r0, [pc, #68]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f20:	f001 f8e6 	bl	80050f0 <HAL_DMA_Init>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8003f2a:	f7ff fce7 	bl	80038fc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a0c      	ldr	r2, [pc, #48]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f32:	639a      	str	r2, [r3, #56]	; 0x38
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_ADC_MspInit+0x224>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003f3a:	bf00      	nop
 8003f3c:	3738      	adds	r7, #56	; 0x38
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40012000 	.word	0x40012000
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40020800 	.word	0x40020800
 8003f50:	200006fc 	.word	0x200006fc
 8003f54:	40026410 	.word	0x40026410
 8003f58:	40012100 	.word	0x40012100
 8003f5c:	40020000 	.word	0x40020000
 8003f60:	40020400 	.word	0x40020400
 8003f64:	200007e4 	.word	0x200007e4
 8003f68:	40026440 	.word	0x40026440

08003f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f74:	f107 0314 	add.w	r3, r7, #20
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	605a      	str	r2, [r3, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_I2C_MspInit+0x84>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d12c      	bne.n	8003fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fb0:	2312      	movs	r3, #18
 8003fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	480c      	ldr	r0, [pc, #48]	; (8003ff8 <HAL_I2C_MspInit+0x8c>)
 8003fc8:	f001 fc00 	bl	80057cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_I2C_MspInit+0x88>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fe8:	bf00      	nop
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40005400 	.word	0x40005400
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	40020400 	.word	0x40020400

08003ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 0314 	add.w	r3, r7, #20
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <HAL_SPI_MspInit+0x84>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d12c      	bne.n	8004078 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	4b18      	ldr	r3, [pc, #96]	; (8004084 <HAL_SPI_MspInit+0x88>)
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	4a17      	ldr	r2, [pc, #92]	; (8004084 <HAL_SPI_MspInit+0x88>)
 8004028:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800402c:	6413      	str	r3, [r2, #64]	; 0x40
 800402e:	4b15      	ldr	r3, [pc, #84]	; (8004084 <HAL_SPI_MspInit+0x88>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <HAL_SPI_MspInit+0x88>)
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	4a10      	ldr	r2, [pc, #64]	; (8004084 <HAL_SPI_MspInit+0x88>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	6313      	str	r3, [r2, #48]	; 0x30
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <HAL_SPI_MspInit+0x88>)
 800404c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004056:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800405a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004064:	2303      	movs	r3, #3
 8004066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004068:	2306      	movs	r3, #6
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	4619      	mov	r1, r3
 8004072:	4805      	ldr	r0, [pc, #20]	; (8004088 <HAL_SPI_MspInit+0x8c>)
 8004074:	f001 fbaa 	bl	80057cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	; 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40003c00 	.word	0x40003c00
 8004084:	40023800 	.word	0x40023800
 8004088:	40020800 	.word	0x40020800

0800408c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <HAL_TIM_PWM_MspInit+0x64>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10e      	bne.n	80040bc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6453      	str	r3, [r2, #68]	; 0x44
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80040ba:	e012      	b.n	80040e2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0d      	ldr	r2, [pc, #52]	; (80040f8 <HAL_TIM_PWM_MspInit+0x6c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d10d      	bne.n	80040e2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	6453      	str	r3, [r2, #68]	; 0x44
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <HAL_TIM_PWM_MspInit+0x68>)
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40010400 	.word	0x40010400

080040fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	; 0x30
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 031c 	add.w	r3, r7, #28
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a32      	ldr	r2, [pc, #200]	; (80041e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d12c      	bne.n	8004178 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004128:	f043 0302 	orr.w	r3, r3, #2
 800412c:	6413      	str	r3, [r2, #64]	; 0x40
 800412e:	4b2e      	ldr	r3, [pc, #184]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	6313      	str	r3, [r2, #48]	; 0x30
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004156:	2330      	movs	r3, #48	; 0x30
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415a:	2302      	movs	r3, #2
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004162:	2300      	movs	r3, #0
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004166:	2302      	movs	r3, #2
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800416a:	f107 031c 	add.w	r3, r7, #28
 800416e:	4619      	mov	r1, r3
 8004170:	481e      	ldr	r0, [pc, #120]	; (80041ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8004172:	f001 fb2b 	bl	80057cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004176:	e030      	b.n	80041da <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1c      	ldr	r2, [pc, #112]	; (80041f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12b      	bne.n	80041da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	613b      	str	r3, [r7, #16]
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	4a10      	ldr	r2, [pc, #64]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	6313      	str	r3, [r2, #48]	; 0x30
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	2302      	movs	r3, #2
 80041c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041ca:	2302      	movs	r3, #2
 80041cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	4619      	mov	r1, r3
 80041d4:	4805      	ldr	r0, [pc, #20]	; (80041ec <HAL_TIM_Encoder_MspInit+0xf0>)
 80041d6:	f001 faf9 	bl	80057cc <HAL_GPIO_Init>
}
 80041da:	bf00      	nop
 80041dc:	3730      	adds	r7, #48	; 0x30
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40023800 	.word	0x40023800
 80041ec:	40020400 	.word	0x40020400
 80041f0:	40000800 	.word	0x40000800

080041f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_Base_MspInit+0x80>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d116      	bne.n	8004234 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a1a      	ldr	r2, [pc, #104]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 8004210:	f043 0310 	orr.w	r3, r3, #16
 8004214:	6413      	str	r3, [r2, #64]	; 0x40
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004222:	2200      	movs	r2, #0
 8004224:	2101      	movs	r1, #1
 8004226:	2036      	movs	r0, #54	; 0x36
 8004228:	f000 ff2b 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800422c:	2036      	movs	r0, #54	; 0x36
 800422e:	f000 ff44 	bl	80050ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004232:	e01a      	b.n	800426a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_TIM_Base_MspInit+0x88>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d115      	bne.n	800426a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	4a0c      	ldr	r2, [pc, #48]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 8004248:	f043 0320 	orr.w	r3, r3, #32
 800424c:	6413      	str	r3, [r2, #64]	; 0x40
 800424e:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_TIM_Base_MspInit+0x84>)
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	2037      	movs	r0, #55	; 0x37
 8004260:	f000 ff0f 	bl	8005082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004264:	2037      	movs	r0, #55	; 0x37
 8004266:	f000 ff28 	bl	80050ba <HAL_NVIC_EnableIRQ>
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40001000 	.word	0x40001000
 8004278:	40023800 	.word	0x40023800
 800427c:	40001400 	.word	0x40001400

08004280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004288:	f107 0314 	add.w	r3, r7, #20
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_TIM_MspPostInit+0xb4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d11f      	bne.n	80042e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a23      	ldr	r2, [pc, #140]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80042be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80042c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042cc:	2300      	movs	r3, #0
 80042ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042d0:	2301      	movs	r3, #1
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4619      	mov	r1, r3
 80042da:	4818      	ldr	r0, [pc, #96]	; (800433c <HAL_TIM_MspPostInit+0xbc>)
 80042dc:	f001 fa76 	bl	80057cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80042e0:	e023      	b.n	800432a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <HAL_TIM_MspPostInit+0xc0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d11e      	bne.n	800432a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	4a10      	ldr	r2, [pc, #64]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042f6:	f043 0304 	orr.w	r3, r3, #4
 80042fa:	6313      	str	r3, [r2, #48]	; 0x30
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <HAL_TIM_MspPostInit+0xb8>)
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004308:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800430c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430e:	2302      	movs	r3, #2
 8004310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004316:	2300      	movs	r3, #0
 8004318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800431a:	2303      	movs	r3, #3
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431e:	f107 0314 	add.w	r3, r7, #20
 8004322:	4619      	mov	r1, r3
 8004324:	4807      	ldr	r0, [pc, #28]	; (8004344 <HAL_TIM_MspPostInit+0xc4>)
 8004326:	f001 fa51 	bl	80057cc <HAL_GPIO_Init>
}
 800432a:	bf00      	nop
 800432c:	3728      	adds	r7, #40	; 0x28
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40023800 	.word	0x40023800
 800433c:	40020000 	.word	0x40020000
 8004340:	40010400 	.word	0x40010400
 8004344:	40020800 	.word	0x40020800

08004348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a19      	ldr	r2, [pc, #100]	; (80043cc <HAL_UART_MspInit+0x84>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d12c      	bne.n	80043c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <HAL_UART_MspInit+0x88>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_UART_MspInit+0x88>)
 8004374:	f043 0310 	orr.w	r3, r3, #16
 8004378:	6453      	str	r3, [r2, #68]	; 0x44
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_UART_MspInit+0x88>)
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_UART_MspInit+0x88>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <HAL_UART_MspInit+0x88>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	6313      	str	r3, [r2, #48]	; 0x30
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_UART_MspInit+0x88>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80043a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043b0:	2303      	movs	r3, #3
 80043b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043b4:	2307      	movs	r3, #7
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4805      	ldr	r0, [pc, #20]	; (80043d4 <HAL_UART_MspInit+0x8c>)
 80043c0:	f001 fa04 	bl	80057cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80043c4:	bf00      	nop
 80043c6:	3728      	adds	r7, #40	; 0x28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40011000 	.word	0x40011000
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40020000 	.word	0x40020000

080043d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043dc:	e7fe      	b.n	80043dc <NMI_Handler+0x4>

080043de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043e2:	e7fe      	b.n	80043e2 <HardFault_Handler+0x4>

080043e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043e8:	e7fe      	b.n	80043e8 <MemManage_Handler+0x4>

080043ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043ee:	e7fe      	b.n	80043ee <BusFault_Handler+0x4>

080043f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <UsageFault_Handler+0x4>

080043f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043f6:	b480      	push	{r7}
 80043f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004412:	b480      	push	{r7}
 8004414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004424:	f000 f91c 	bl	8004660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004428:	bf00      	nop
 800442a:	bd80      	pop	{r7, pc}

0800442c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004430:	4802      	ldr	r0, [pc, #8]	; (800443c <TIM6_DAC_IRQHandler+0x10>)
 8004432:	f002 faf0 	bl	8006a16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	2000075c 	.word	0x2000075c

08004440 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004444:	4802      	ldr	r0, [pc, #8]	; (8004450 <TIM7_IRQHandler+0x10>)
 8004446:	f002 fae6 	bl	8006a16 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000844 	.word	0x20000844

08004454 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004458:	4802      	ldr	r0, [pc, #8]	; (8004464 <DMA2_Stream0_IRQHandler+0x10>)
 800445a:	f000 ff4f 	bl	80052fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	200006fc 	.word	0x200006fc

08004468 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800446c:	4802      	ldr	r0, [pc, #8]	; (8004478 <DMA2_Stream2_IRQHandler+0x10>)
 800446e:	f000 ff45 	bl	80052fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004472:	bf00      	nop
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	200007e4 	.word	0x200007e4

0800447c <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 8004486:	2300      	movs	r3, #0
 8004488:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	2b52      	cmp	r3, #82	; 0x52
 800448e:	d10a      	bne.n	80044a6 <getSwitchStatus+0x2a>
 8004490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004494:	480d      	ldr	r0, [pc, #52]	; (80044cc <getSwitchStatus+0x50>)
 8004496:	f001 fb33 	bl	8005b00 <HAL_GPIO_ReadPin>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <getSwitchStatus+0x2a>
		ret = 1;
 80044a0:	2301      	movs	r3, #1
 80044a2:	81fb      	strh	r3, [r7, #14]
 80044a4:	e00c      	b.n	80044c0 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	2b4c      	cmp	r3, #76	; 0x4c
 80044aa:	d109      	bne.n	80044c0 <getSwitchStatus+0x44>
 80044ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044b0:	4806      	ldr	r0, [pc, #24]	; (80044cc <getSwitchStatus+0x50>)
 80044b2:	f001 fb25 	bl	8005b00 <HAL_GPIO_ReadPin>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <getSwitchStatus+0x44>
		ret = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 80044c0:	89fb      	ldrh	r3, [r7, #14]

}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40020000 	.word	0x40020000

080044d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <_sbrk+0x5c>)
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <_sbrk+0x60>)
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <_sbrk+0x64>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d102      	bne.n	80044f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044ec:	4b11      	ldr	r3, [pc, #68]	; (8004534 <_sbrk+0x64>)
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <_sbrk+0x68>)
 80044f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <_sbrk+0x64>)
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d207      	bcs.n	8004510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004500:	f003 fba2 	bl	8007c48 <__errno>
 8004504:	4602      	mov	r2, r0
 8004506:	230c      	movs	r3, #12
 8004508:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
 800450e:	e009      	b.n	8004524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <_sbrk+0x64>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004516:	4b07      	ldr	r3, [pc, #28]	; (8004534 <_sbrk+0x64>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <_sbrk+0x64>)
 8004520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20020000 	.word	0x20020000
 8004530:	00000400 	.word	0x00000400
 8004534:	200003c4 	.word	0x200003c4
 8004538:	20000898 	.word	0x20000898

0800453c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <SystemInit+0x28>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <SystemInit+0x28>)
 8004548:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800454c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <SystemInit+0x28>)
 8004552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004556:	609a      	str	r2, [r3, #8]
#endif
}
 8004558:	bf00      	nop
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800456c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800456e:	e003      	b.n	8004578 <LoopCopyDataInit>

08004570 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004572:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004574:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004576:	3104      	adds	r1, #4

08004578 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004578:	480b      	ldr	r0, [pc, #44]	; (80045a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800457a:	4b0c      	ldr	r3, [pc, #48]	; (80045ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800457c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800457e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004580:	d3f6      	bcc.n	8004570 <CopyDataInit>
  ldr  r2, =_sbss
 8004582:	4a0b      	ldr	r2, [pc, #44]	; (80045b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004584:	e002      	b.n	800458c <LoopFillZerobss>

08004586 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004586:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004588:	f842 3b04 	str.w	r3, [r2], #4

0800458c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800458c:	4b09      	ldr	r3, [pc, #36]	; (80045b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800458e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004590:	d3f9      	bcc.n	8004586 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004592:	f7ff ffd3 	bl	800453c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004596:	f003 fb5d 	bl	8007c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800459a:	f7fe fabd 	bl	8002b18 <main>
  bx  lr    
 800459e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80045a4:	0800ba20 	.word	0x0800ba20
  ldr  r0, =_sdata
 80045a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045ac:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 80045b0:	2000020c 	.word	0x2000020c
  ldr  r3, = _ebss
 80045b4:	20000894 	.word	0x20000894

080045b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b8:	e7fe      	b.n	80045b8 <ADC_IRQHandler>
	...

080045bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_Init+0x40>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_Init+0x40>)
 80045c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_Init+0x40>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <HAL_Init+0x40>)
 80045d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045d8:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_Init+0x40>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <HAL_Init+0x40>)
 80045de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045e4:	2003      	movs	r0, #3
 80045e6:	f000 fd41 	bl	800506c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045ea:	2000      	movs	r0, #0
 80045ec:	f000 f808 	bl	8004600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045f0:	f7ff fb7e 	bl	8003cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00

08004600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_InitTick+0x54>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_InitTick+0x58>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004616:	fbb3 f3f1 	udiv	r3, r3, r1
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd59 	bl	80050d6 <HAL_SYSTICK_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e00e      	b.n	800464c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b0f      	cmp	r3, #15
 8004632:	d80a      	bhi.n	800464a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004634:	2200      	movs	r2, #0
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	f000 fd21 	bl	8005082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004640:	4a06      	ldr	r2, [pc, #24]	; (800465c <HAL_InitTick+0x5c>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
 8004648:	e000      	b.n	800464c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	20000030 	.word	0x20000030
 8004658:	20000038 	.word	0x20000038
 800465c:	20000034 	.word	0x20000034

08004660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_IncTick+0x20>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	4b06      	ldr	r3, [pc, #24]	; (8004684 <HAL_IncTick+0x24>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4413      	add	r3, r2
 8004670:	4a04      	ldr	r2, [pc, #16]	; (8004684 <HAL_IncTick+0x24>)
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000038 	.word	0x20000038
 8004684:	2000088c 	.word	0x2000088c

08004688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return uwTick;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_GetTick+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	2000088c 	.word	0x2000088c

080046a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046a8:	f7ff ffee 	bl	8004688 <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d005      	beq.n	80046c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80046ba:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_Delay+0x40>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80046c6:	bf00      	nop
 80046c8:	f7ff ffde 	bl	8004688 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d8f7      	bhi.n	80046c8 <HAL_Delay+0x28>
  {
  }
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000038 	.word	0x20000038

080046e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e033      	b.n	8004762 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fb1c 	bl	8003d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	d118      	bne.n	8004754 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800472a:	f023 0302 	bic.w	r3, r3, #2
 800472e:	f043 0202 	orr.w	r2, r3, #2
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa4a 	bl	8004bd0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	; 0x40
 8004752:	e001      	b.n	8004758 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_ADC_Start_DMA+0x1e>
 8004786:	2302      	movs	r3, #2
 8004788:	e0cc      	b.n	8004924 <HAL_ADC_Start_DMA+0x1b8>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d018      	beq.n	80047d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047b0:	4b5e      	ldr	r3, [pc, #376]	; (800492c <HAL_ADC_Start_DMA+0x1c0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <HAL_ADC_Start_DMA+0x1c4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	0c9a      	lsrs	r2, r3, #18
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047c4:	e002      	b.n	80047cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f9      	bne.n	80047c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 80a0 	bne.w	8004922 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800480c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004820:	d106      	bne.n	8004830 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	f023 0206 	bic.w	r2, r3, #6
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
 800482e:	e002      	b.n	8004836 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800483e:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <HAL_ADC_Start_DMA+0x1c8>)
 8004840:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	4a3c      	ldr	r2, [pc, #240]	; (8004938 <HAL_ADC_Start_DMA+0x1cc>)
 8004848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	4a3b      	ldr	r2, [pc, #236]	; (800493c <HAL_ADC_Start_DMA+0x1d0>)
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_ADC_Start_DMA+0x1d4>)
 8004858:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004862:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004872:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004882:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	334c      	adds	r3, #76	; 0x4c
 800488e:	4619      	mov	r1, r3
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f000 fcda 	bl	800524c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d12a      	bne.n	80048fa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a26      	ldr	r2, [pc, #152]	; (8004944 <HAL_ADC_Start_DMA+0x1d8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d015      	beq.n	80048da <HAL_ADC_Start_DMA+0x16e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a25      	ldr	r2, [pc, #148]	; (8004948 <HAL_ADC_Start_DMA+0x1dc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d105      	bne.n	80048c4 <HAL_ADC_Start_DMA+0x158>
 80048b8:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <HAL_ADC_Start_DMA+0x1c8>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <HAL_ADC_Start_DMA+0x1e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d129      	bne.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
 80048ce:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_ADC_Start_DMA+0x1c8>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	2b0f      	cmp	r3, #15
 80048d8:	d823      	bhi.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11c      	bne.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e013      	b.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a11      	ldr	r2, [pc, #68]	; (8004944 <HAL_ADC_Start_DMA+0x1d8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10e      	bne.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d107      	bne.n	8004922 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004920:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000030 	.word	0x20000030
 8004930:	431bde83 	.word	0x431bde83
 8004934:	40012300 	.word	0x40012300
 8004938:	08004dc9 	.word	0x08004dc9
 800493c:	08004e83 	.word	0x08004e83
 8004940:	08004e9f 	.word	0x08004e9f
 8004944:	40012000 	.word	0x40012000
 8004948:	40012100 	.word	0x40012100
 800494c:	40012200 	.word	0x40012200

08004950 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x1c>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e105      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x228>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	d925      	bls.n	8004a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68d9      	ldr	r1, [r3, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	461a      	mov	r2, r3
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	3b1e      	subs	r3, #30
 80049ce:	2207      	movs	r2, #7
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43da      	mvns	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	400a      	ands	r2, r1
 80049dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68d9      	ldr	r1, [r3, #12]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4618      	mov	r0, r3
 80049f0:	4603      	mov	r3, r0
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4403      	add	r3, r0
 80049f6:	3b1e      	subs	r3, #30
 80049f8:	409a      	lsls	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	e022      	b.n	8004a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6919      	ldr	r1, [r3, #16]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	2207      	movs	r2, #7
 8004a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6919      	ldr	r1, [r3, #16]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	4618      	mov	r0, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4403      	add	r3, r0
 8004a40:	409a      	lsls	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b06      	cmp	r3, #6
 8004a50:	d824      	bhi.n	8004a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	3b05      	subs	r3, #5
 8004a64:	221f      	movs	r2, #31
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	400a      	ands	r2, r1
 8004a72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	4618      	mov	r0, r3
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3b05      	subs	r3, #5
 8004a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34
 8004a9a:	e04c      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	d824      	bhi.n	8004aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3b23      	subs	r3, #35	; 0x23
 8004ab6:	221f      	movs	r2, #31
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43da      	mvns	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	3b23      	subs	r3, #35	; 0x23
 8004ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
 8004aec:	e023      	b.n	8004b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	3b41      	subs	r3, #65	; 0x41
 8004b00:	221f      	movs	r2, #31
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43da      	mvns	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	3b41      	subs	r3, #65	; 0x41
 8004b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b36:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <HAL_ADC_ConfigChannel+0x234>)
 8004b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a21      	ldr	r2, [pc, #132]	; (8004bc4 <HAL_ADC_ConfigChannel+0x238>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d109      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1cc>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b12      	cmp	r3, #18
 8004b4a:	d105      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_ADC_ConfigChannel+0x238>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d123      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x21e>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b10      	cmp	r3, #16
 8004b68:	d003      	beq.n	8004b72 <HAL_ADC_ConfigChannel+0x1e6>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b11      	cmp	r3, #17
 8004b70:	d11b      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d111      	bne.n	8004baa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_ADC_ConfigChannel+0x23c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a10      	ldr	r2, [pc, #64]	; (8004bcc <HAL_ADC_ConfigChannel+0x240>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	0c9a      	lsrs	r2, r3, #18
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b9c:	e002      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1f9      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	40012300 	.word	0x40012300
 8004bc4:	40012000 	.word	0x40012000
 8004bc8:	20000030 	.word	0x20000030
 8004bcc:	431bde83 	.word	0x431bde83

08004bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bd8:	4b79      	ldr	r3, [pc, #484]	; (8004dc0 <ADC_Init+0x1f0>)
 8004bda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	021a      	lsls	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	4a58      	ldr	r2, [pc, #352]	; (8004dc4 <ADC_Init+0x1f4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d022      	beq.n	8004cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	e00f      	b.n	8004cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0202 	bic.w	r2, r2, #2
 8004cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7e1b      	ldrb	r3, [r3, #24]
 8004ce8:	005a      	lsls	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d01b      	beq.n	8004d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	3b01      	subs	r3, #1
 8004d28:	035a      	lsls	r2, r3, #13
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	e007      	b.n	8004d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	051a      	lsls	r2, r3, #20
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6899      	ldr	r1, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d86:	025a      	lsls	r2, r3, #9
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6899      	ldr	r1, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	029a      	lsls	r2, r3, #10
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr
 8004dc0:	40012300 	.word	0x40012300
 8004dc4:	0f000001 	.word	0x0f000001

08004dc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d13c      	bne.n	8004e5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d12b      	bne.n	8004e54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d127      	bne.n	8004e54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d006      	beq.n	8004e20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d119      	bne.n	8004e54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0220 	bic.w	r2, r2, #32
 8004e2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f043 0201 	orr.w	r2, r3, #1
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff fd7b 	bl	8004950 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e5a:	e00e      	b.n	8004e7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f7ff fd85 	bl	8004978 <HAL_ADC_ErrorCallback>
}
 8004e6e:	e004      	b.n	8004e7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	4798      	blx	r3
}
 8004e7a:	bf00      	nop
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b084      	sub	sp, #16
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff fd67 	bl	8004964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2240      	movs	r2, #64	; 0x40
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff fd5a 	bl	8004978 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <__NVIC_SetPriorityGrouping+0x44>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efe:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <__NVIC_SetPriorityGrouping+0x44>)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	60d3      	str	r3, [r2, #12]
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	e000ed00 	.word	0xe000ed00

08004f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <__NVIC_GetPriorityGrouping+0x18>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	0a1b      	lsrs	r3, r3, #8
 8004f1e:	f003 0307 	and.w	r3, r3, #7
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	db0b      	blt.n	8004f5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f003 021f 	and.w	r2, r3, #31
 8004f48:	4907      	ldr	r1, [pc, #28]	; (8004f68 <__NVIC_EnableIRQ+0x38>)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2001      	movs	r0, #1
 8004f52:	fa00 f202 	lsl.w	r2, r0, r2
 8004f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	e000e100 	.word	0xe000e100

08004f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	6039      	str	r1, [r7, #0]
 8004f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db0a      	blt.n	8004f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	490c      	ldr	r1, [pc, #48]	; (8004fb8 <__NVIC_SetPriority+0x4c>)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	0112      	lsls	r2, r2, #4
 8004f8c:	b2d2      	uxtb	r2, r2
 8004f8e:	440b      	add	r3, r1
 8004f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f94:	e00a      	b.n	8004fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	4908      	ldr	r1, [pc, #32]	; (8004fbc <__NVIC_SetPriority+0x50>)
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	3b04      	subs	r3, #4
 8004fa4:	0112      	lsls	r2, r2, #4
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	440b      	add	r3, r1
 8004faa:	761a      	strb	r2, [r3, #24]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b089      	sub	sp, #36	; 0x24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f1c3 0307 	rsb	r3, r3, #7
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	bf28      	it	cs
 8004fde:	2304      	movcs	r3, #4
 8004fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2b06      	cmp	r3, #6
 8004fe8:	d902      	bls.n	8004ff0 <NVIC_EncodePriority+0x30>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3b03      	subs	r3, #3
 8004fee:	e000      	b.n	8004ff2 <NVIC_EncodePriority+0x32>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffe:	43da      	mvns	r2, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	401a      	ands	r2, r3
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005008:	f04f 31ff 	mov.w	r1, #4294967295
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	fa01 f303 	lsl.w	r3, r1, r3
 8005012:	43d9      	mvns	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	4313      	orrs	r3, r2
         );
}
 800501a:	4618      	mov	r0, r3
 800501c:	3724      	adds	r7, #36	; 0x24
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
	...

08005028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3b01      	subs	r3, #1
 8005034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005038:	d301      	bcc.n	800503e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800503a:	2301      	movs	r3, #1
 800503c:	e00f      	b.n	800505e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <SysTick_Config+0x40>)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005046:	210f      	movs	r1, #15
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	f7ff ff8e 	bl	8004f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005050:	4b05      	ldr	r3, [pc, #20]	; (8005068 <SysTick_Config+0x40>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005056:	4b04      	ldr	r3, [pc, #16]	; (8005068 <SysTick_Config+0x40>)
 8005058:	2207      	movs	r2, #7
 800505a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	e000e010 	.word	0xe000e010

0800506c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff29 	bl	8004ecc <__NVIC_SetPriorityGrouping>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	4603      	mov	r3, r0
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
 800508e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005094:	f7ff ff3e 	bl	8004f14 <__NVIC_GetPriorityGrouping>
 8005098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	6978      	ldr	r0, [r7, #20]
 80050a0:	f7ff ff8e 	bl	8004fc0 <NVIC_EncodePriority>
 80050a4:	4602      	mov	r2, r0
 80050a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ff5d 	bl	8004f6c <__NVIC_SetPriority>
}
 80050b2:	bf00      	nop
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
 80050c0:	4603      	mov	r3, r0
 80050c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff31 	bl	8004f30 <__NVIC_EnableIRQ>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffa2 	bl	8005028 <SysTick_Config>
 80050e4:	4603      	mov	r3, r0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7ff fac4 	bl	8004688 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e099      	b.n	8005240 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0201 	bic.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800512c:	e00f      	b.n	800514e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800512e:	f7ff faab 	bl	8004688 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b05      	cmp	r3, #5
 800513a:	d908      	bls.n	800514e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2220      	movs	r2, #32
 8005140:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2203      	movs	r2, #3
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e078      	b.n	8005240 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e8      	bne.n	800512e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4b38      	ldr	r3, [pc, #224]	; (8005248 <HAL_DMA_Init+0x158>)
 8005168:	4013      	ands	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800517a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005186:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005192:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d107      	bne.n	80051b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	4313      	orrs	r3, r2
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f023 0307 	bic.w	r3, r3, #7
 80051ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d117      	bne.n	8005212 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00e      	beq.n	8005212 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fa6f 	bl	80056d8 <DMA_CheckFifoParam>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2240      	movs	r2, #64	; 0x40
 8005204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800520e:	2301      	movs	r3, #1
 8005210:	e016      	b.n	8005240 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa26 	bl	800566c <DMA_CalcBaseAndBitshift>
 8005220:	4603      	mov	r3, r0
 8005222:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005228:	223f      	movs	r2, #63	; 0x3f
 800522a:	409a      	lsls	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	f010803f 	.word	0xf010803f

0800524c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
 8005258:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005262:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_DMA_Start_IT+0x26>
 800526e:	2302      	movs	r3, #2
 8005270:	e040      	b.n	80052f4 <HAL_DMA_Start_IT+0xa8>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d12f      	bne.n	80052e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2202      	movs	r2, #2
 800528a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f9b8 	bl	8005610 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	223f      	movs	r2, #63	; 0x3f
 80052a6:	409a      	lsls	r2, r3
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0216 	orr.w	r2, r2, #22
 80052ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0208 	orr.w	r2, r2, #8
 80052d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e005      	b.n	80052f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
 80052f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005308:	4b92      	ldr	r3, [pc, #584]	; (8005554 <HAL_DMA_IRQHandler+0x258>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a92      	ldr	r2, [pc, #584]	; (8005558 <HAL_DMA_IRQHandler+0x25c>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005326:	2208      	movs	r2, #8
 8005328:	409a      	lsls	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d01a      	beq.n	8005368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d013      	beq.n	8005368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	2208      	movs	r2, #8
 8005356:	409a      	lsls	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005360:	f043 0201 	orr.w	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536c:	2201      	movs	r2, #1
 800536e:	409a      	lsls	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d012      	beq.n	800539e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00b      	beq.n	800539e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538a:	2201      	movs	r2, #1
 800538c:	409a      	lsls	r2, r3
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f043 0202 	orr.w	r2, r3, #2
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053a2:	2204      	movs	r2, #4
 80053a4:	409a      	lsls	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d012      	beq.n	80053d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c0:	2204      	movs	r2, #4
 80053c2:	409a      	lsls	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053cc:	f043 0204 	orr.w	r2, r3, #4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	2210      	movs	r2, #16
 80053da:	409a      	lsls	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4013      	ands	r3, r2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d043      	beq.n	800546c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0308 	and.w	r3, r3, #8
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d03c      	beq.n	800546c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f6:	2210      	movs	r2, #16
 80053f8:	409a      	lsls	r2, r3
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d018      	beq.n	800543e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d108      	bne.n	800542c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d024      	beq.n	800546c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
 800542a:	e01f      	b.n	800546c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01b      	beq.n	800546c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	4798      	blx	r3
 800543c:	e016      	b.n	800546c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0208 	bic.w	r2, r2, #8
 800545a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	2220      	movs	r2, #32
 8005472:	409a      	lsls	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 808e 	beq.w	800559a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8086 	beq.w	800559a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	2220      	movs	r2, #32
 8005494:	409a      	lsls	r2, r3
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	d136      	bne.n	8005514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0216 	bic.w	r2, r2, #22
 80054b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <HAL_DMA_IRQHandler+0x1da>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0208 	bic.w	r2, r2, #8
 80054e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	223f      	movs	r2, #63	; 0x3f
 80054ec:	409a      	lsls	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005506:	2b00      	cmp	r3, #0
 8005508:	d07d      	beq.n	8005606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	4798      	blx	r3
        }
        return;
 8005512:	e078      	b.n	8005606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d01c      	beq.n	800555c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005534:	2b00      	cmp	r3, #0
 8005536:	d030      	beq.n	800559a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
 8005540:	e02b      	b.n	800559a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d027      	beq.n	800559a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	4798      	blx	r3
 8005552:	e022      	b.n	800559a <HAL_DMA_IRQHandler+0x29e>
 8005554:	20000030 	.word	0x20000030
 8005558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10f      	bne.n	800558a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0210 	bic.w	r2, r2, #16
 8005578:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d032      	beq.n	8005608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d022      	beq.n	80055f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2205      	movs	r2, #5
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d307      	bcc.n	80055e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f2      	bne.n	80055c6 <HAL_DMA_IRQHandler+0x2ca>
 80055e0:	e000      	b.n	80055e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80055e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	e000      	b.n	8005608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005606:	bf00      	nop
    }
  }
}
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop

08005610 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800562c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	d108      	bne.n	8005650 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800564e:	e007      	b.n	8005660 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	60da      	str	r2, [r3, #12]
}
 8005660:	bf00      	nop
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	3b10      	subs	r3, #16
 800567c:	4a14      	ldr	r2, [pc, #80]	; (80056d0 <DMA_CalcBaseAndBitshift+0x64>)
 800567e:	fba2 2303 	umull	r2, r3, r2, r3
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005686:	4a13      	ldr	r2, [pc, #76]	; (80056d4 <DMA_CalcBaseAndBitshift+0x68>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2b03      	cmp	r3, #3
 8005698:	d909      	bls.n	80056ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	1d1a      	adds	r2, r3, #4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	659a      	str	r2, [r3, #88]	; 0x58
 80056ac:	e007      	b.n	80056be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	aaaaaaab 	.word	0xaaaaaaab
 80056d4:	0800b750 	.word	0x0800b750

080056d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11f      	bne.n	8005732 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d855      	bhi.n	80057a4 <DMA_CheckFifoParam+0xcc>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <DMA_CheckFifoParam+0x28>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005711 	.word	0x08005711
 8005704:	08005723 	.word	0x08005723
 8005708:	08005711 	.word	0x08005711
 800570c:	080057a5 	.word	0x080057a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d045      	beq.n	80057a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005720:	e042      	b.n	80057a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800572a:	d13f      	bne.n	80057ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005730:	e03c      	b.n	80057ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573a:	d121      	bne.n	8005780 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b03      	cmp	r3, #3
 8005740:	d836      	bhi.n	80057b0 <DMA_CheckFifoParam+0xd8>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <DMA_CheckFifoParam+0x70>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005759 	.word	0x08005759
 800574c:	0800575f 	.word	0x0800575f
 8005750:	08005759 	.word	0x08005759
 8005754:	08005771 	.word	0x08005771
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
      break;
 800575c:	e02f      	b.n	80057be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d024      	beq.n	80057b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576e:	e021      	b.n	80057b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005778:	d11e      	bne.n	80057b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800577e:	e01b      	b.n	80057b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d902      	bls.n	800578c <DMA_CheckFifoParam+0xb4>
 8005786:	2b03      	cmp	r3, #3
 8005788:	d003      	beq.n	8005792 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800578a:	e018      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      break;
 8005790:	e015      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	73fb      	strb	r3, [r7, #15]
      break;
 80057a2:	e00b      	b.n	80057bc <DMA_CheckFifoParam+0xe4>
      break;
 80057a4:	bf00      	nop
 80057a6:	e00a      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;
 80057a8:	bf00      	nop
 80057aa:	e008      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;
 80057ac:	bf00      	nop
 80057ae:	e006      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;
 80057b0:	bf00      	nop
 80057b2:	e004      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;
 80057b4:	bf00      	nop
 80057b6:	e002      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;   
 80057b8:	bf00      	nop
 80057ba:	e000      	b.n	80057be <DMA_CheckFifoParam+0xe6>
      break;
 80057bc:	bf00      	nop
    }
  } 
  
  return status; 
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	; 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e16b      	b.n	8005ac0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057e8:	2201      	movs	r2, #1
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	fa02 f303 	lsl.w	r3, r2, r3
 80057f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4013      	ands	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	429a      	cmp	r2, r3
 8005802:	f040 815a 	bne.w	8005aba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d00b      	beq.n	8005826 <HAL_GPIO_Init+0x5a>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d007      	beq.n	8005826 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800581a:	2b11      	cmp	r3, #17
 800581c:	d003      	beq.n	8005826 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b12      	cmp	r3, #18
 8005824:	d130      	bne.n	8005888 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	2203      	movs	r2, #3
 8005832:	fa02 f303 	lsl.w	r3, r2, r3
 8005836:	43db      	mvns	r3, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4013      	ands	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69ba      	ldr	r2, [r7, #24]
 8005854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800585c:	2201      	movs	r2, #1
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	fa02 f303 	lsl.w	r3, r2, r3
 8005864:	43db      	mvns	r3, r3
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	4013      	ands	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	091b      	lsrs	r3, r3, #4
 8005872:	f003 0201 	and.w	r2, r3, #1
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	fa02 f303 	lsl.w	r3, r2, r3
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	4313      	orrs	r3, r2
 8005880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	2203      	movs	r2, #3
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43db      	mvns	r3, r3
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	4013      	ands	r3, r2
 800589e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d003      	beq.n	80058c8 <HAL_GPIO_Init+0xfc>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b12      	cmp	r3, #18
 80058c6:	d123      	bne.n	8005910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	08da      	lsrs	r2, r3, #3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3208      	adds	r2, #8
 80058d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	220f      	movs	r2, #15
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	08da      	lsrs	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3208      	adds	r2, #8
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	2203      	movs	r2, #3
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0203 	and.w	r2, r3, #3
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	fa02 f303 	lsl.w	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4313      	orrs	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80b4 	beq.w	8005aba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	4b5f      	ldr	r3, [pc, #380]	; (8005ad4 <HAL_GPIO_Init+0x308>)
 8005958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595a:	4a5e      	ldr	r2, [pc, #376]	; (8005ad4 <HAL_GPIO_Init+0x308>)
 800595c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005960:	6453      	str	r3, [r2, #68]	; 0x44
 8005962:	4b5c      	ldr	r3, [pc, #368]	; (8005ad4 <HAL_GPIO_Init+0x308>)
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800596e:	4a5a      	ldr	r2, [pc, #360]	; (8005ad8 <HAL_GPIO_Init+0x30c>)
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	089b      	lsrs	r3, r3, #2
 8005974:	3302      	adds	r3, #2
 8005976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	220f      	movs	r2, #15
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a51      	ldr	r2, [pc, #324]	; (8005adc <HAL_GPIO_Init+0x310>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d02b      	beq.n	80059f2 <HAL_GPIO_Init+0x226>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a50      	ldr	r2, [pc, #320]	; (8005ae0 <HAL_GPIO_Init+0x314>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d025      	beq.n	80059ee <HAL_GPIO_Init+0x222>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a4f      	ldr	r2, [pc, #316]	; (8005ae4 <HAL_GPIO_Init+0x318>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01f      	beq.n	80059ea <HAL_GPIO_Init+0x21e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a4e      	ldr	r2, [pc, #312]	; (8005ae8 <HAL_GPIO_Init+0x31c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d019      	beq.n	80059e6 <HAL_GPIO_Init+0x21a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a4d      	ldr	r2, [pc, #308]	; (8005aec <HAL_GPIO_Init+0x320>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <HAL_GPIO_Init+0x216>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a4c      	ldr	r2, [pc, #304]	; (8005af0 <HAL_GPIO_Init+0x324>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00d      	beq.n	80059de <HAL_GPIO_Init+0x212>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a4b      	ldr	r2, [pc, #300]	; (8005af4 <HAL_GPIO_Init+0x328>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d007      	beq.n	80059da <HAL_GPIO_Init+0x20e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a4a      	ldr	r2, [pc, #296]	; (8005af8 <HAL_GPIO_Init+0x32c>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d101      	bne.n	80059d6 <HAL_GPIO_Init+0x20a>
 80059d2:	2307      	movs	r3, #7
 80059d4:	e00e      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059d6:	2308      	movs	r3, #8
 80059d8:	e00c      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059da:	2306      	movs	r3, #6
 80059dc:	e00a      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059de:	2305      	movs	r3, #5
 80059e0:	e008      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059e2:	2304      	movs	r3, #4
 80059e4:	e006      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059e6:	2303      	movs	r3, #3
 80059e8:	e004      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e002      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_GPIO_Init+0x228>
 80059f2:	2300      	movs	r3, #0
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	f002 0203 	and.w	r2, r2, #3
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	4093      	lsls	r3, r2
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a04:	4934      	ldr	r1, [pc, #208]	; (8005ad8 <HAL_GPIO_Init+0x30c>)
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	089b      	lsrs	r3, r3, #2
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a12:	4b3a      	ldr	r3, [pc, #232]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a36:	4a31      	ldr	r2, [pc, #196]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005a3c:	4b2f      	ldr	r3, [pc, #188]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a60:	4a26      	ldr	r2, [pc, #152]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a66:	4b25      	ldr	r3, [pc, #148]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab4:	4a11      	ldr	r2, [pc, #68]	; (8005afc <HAL_GPIO_Init+0x330>)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3301      	adds	r3, #1
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	2b0f      	cmp	r3, #15
 8005ac4:	f67f ae90 	bls.w	80057e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3724      	adds	r7, #36	; 0x24
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	40013800 	.word	0x40013800
 8005adc:	40020000 	.word	0x40020000
 8005ae0:	40020400 	.word	0x40020400
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40021400 	.word	0x40021400
 8005af4:	40021800 	.word	0x40021800
 8005af8:	40021c00 	.word	0x40021c00
 8005afc:	40013c00 	.word	0x40013c00

08005b00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	887b      	ldrh	r3, [r7, #2]
 8005b12:	4013      	ands	r3, r2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e001      	b.n	8005b22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	807b      	strh	r3, [r7, #2]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b40:	787b      	ldrb	r3, [r7, #1]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b4c:	e003      	b.n	8005b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	041a      	lsls	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	619a      	str	r2, [r3, #24]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e11f      	b.n	8005db6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d106      	bne.n	8005b90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fe f9ee 	bl	8003f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2224      	movs	r2, #36	; 0x24
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bc8:	f000 fd18 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8005bcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	4a7b      	ldr	r2, [pc, #492]	; (8005dc0 <HAL_I2C_Init+0x25c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d807      	bhi.n	8005be8 <HAL_I2C_Init+0x84>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a7a      	ldr	r2, [pc, #488]	; (8005dc4 <HAL_I2C_Init+0x260>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bf94      	ite	ls
 8005be0:	2301      	movls	r3, #1
 8005be2:	2300      	movhi	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	e006      	b.n	8005bf6 <HAL_I2C_Init+0x92>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4a77      	ldr	r2, [pc, #476]	; (8005dc8 <HAL_I2C_Init+0x264>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bf94      	ite	ls
 8005bf0:	2301      	movls	r3, #1
 8005bf2:	2300      	movhi	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e0db      	b.n	8005db6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4a72      	ldr	r2, [pc, #456]	; (8005dcc <HAL_I2C_Init+0x268>)
 8005c02:	fba2 2303 	umull	r2, r3, r2, r3
 8005c06:	0c9b      	lsrs	r3, r3, #18
 8005c08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4a64      	ldr	r2, [pc, #400]	; (8005dc0 <HAL_I2C_Init+0x25c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d802      	bhi.n	8005c38 <HAL_I2C_Init+0xd4>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	3301      	adds	r3, #1
 8005c36:	e009      	b.n	8005c4c <HAL_I2C_Init+0xe8>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c3e:	fb02 f303 	mul.w	r3, r2, r3
 8005c42:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_I2C_Init+0x26c>)
 8005c44:	fba2 2303 	umull	r2, r3, r2, r3
 8005c48:	099b      	lsrs	r3, r3, #6
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4956      	ldr	r1, [pc, #344]	; (8005dc0 <HAL_I2C_Init+0x25c>)
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	d80d      	bhi.n	8005c88 <HAL_I2C_Init+0x124>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	1e59      	subs	r1, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	bf38      	it	cc
 8005c84:	2304      	movcc	r3, #4
 8005c86:	e04f      	b.n	8005d28 <HAL_I2C_Init+0x1c4>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d111      	bne.n	8005cb4 <HAL_I2C_Init+0x150>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	1e58      	subs	r0, r3, #1
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6859      	ldr	r1, [r3, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	440b      	add	r3, r1
 8005c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	e012      	b.n	8005cda <HAL_I2C_Init+0x176>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e58      	subs	r0, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	0099      	lsls	r1, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf0c      	ite	eq
 8005cd4:	2301      	moveq	r3, #1
 8005cd6:	2300      	movne	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Init+0x17e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e022      	b.n	8005d28 <HAL_I2C_Init+0x1c4>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10e      	bne.n	8005d08 <HAL_I2C_Init+0x1a4>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1e58      	subs	r0, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6859      	ldr	r1, [r3, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	440b      	add	r3, r1
 8005cf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d06:	e00f      	b.n	8005d28 <HAL_I2C_Init+0x1c4>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1e58      	subs	r0, r3, #1
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6859      	ldr	r1, [r3, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	0099      	lsls	r1, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d1e:	3301      	adds	r3, #1
 8005d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	6809      	ldr	r1, [r1, #0]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6911      	ldr	r1, [r2, #16]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	68d2      	ldr	r2, [r2, #12]
 8005d62:	4311      	orrs	r1, r2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	000186a0 	.word	0x000186a0
 8005dc4:	001e847f 	.word	0x001e847f
 8005dc8:	003d08ff 	.word	0x003d08ff
 8005dcc:	431bde83 	.word	0x431bde83
 8005dd0:	10624dd3 	.word	0x10624dd3

08005dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e25b      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d075      	beq.n	8005ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005df2:	4ba3      	ldr	r3, [pc, #652]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d00c      	beq.n	8005e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfe:	4ba0      	ldr	r3, [pc, #640]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d112      	bne.n	8005e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0a:	4b9d      	ldr	r3, [pc, #628]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e16:	d10b      	bne.n	8005e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e18:	4b99      	ldr	r3, [pc, #612]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d05b      	beq.n	8005edc <HAL_RCC_OscConfig+0x108>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d157      	bne.n	8005edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e236      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e38:	d106      	bne.n	8005e48 <HAL_RCC_OscConfig+0x74>
 8005e3a:	4b91      	ldr	r3, [pc, #580]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a90      	ldr	r2, [pc, #576]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	e01d      	b.n	8005e84 <HAL_RCC_OscConfig+0xb0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e50:	d10c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x98>
 8005e52:	4b8b      	ldr	r3, [pc, #556]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a8a      	ldr	r2, [pc, #552]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4b88      	ldr	r3, [pc, #544]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a87      	ldr	r2, [pc, #540]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	e00b      	b.n	8005e84 <HAL_RCC_OscConfig+0xb0>
 8005e6c:	4b84      	ldr	r3, [pc, #528]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a83      	ldr	r2, [pc, #524]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	4b81      	ldr	r3, [pc, #516]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a80      	ldr	r2, [pc, #512]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d013      	beq.n	8005eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8c:	f7fe fbfc 	bl	8004688 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e94:	f7fe fbf8 	bl	8004688 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b64      	cmp	r3, #100	; 0x64
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1fb      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea6:	4b76      	ldr	r3, [pc, #472]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d0f0      	beq.n	8005e94 <HAL_RCC_OscConfig+0xc0>
 8005eb2:	e014      	b.n	8005ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb4:	f7fe fbe8 	bl	8004688 <HAL_GetTick>
 8005eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ebc:	f7fe fbe4 	bl	8004688 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b64      	cmp	r3, #100	; 0x64
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e1e7      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ece:	4b6c      	ldr	r3, [pc, #432]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1f0      	bne.n	8005ebc <HAL_RCC_OscConfig+0xe8>
 8005eda:	e000      	b.n	8005ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d063      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eea:	4b65      	ldr	r3, [pc, #404]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef6:	4b62      	ldr	r3, [pc, #392]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d11c      	bne.n	8005f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f02:	4b5f      	ldr	r3, [pc, #380]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d116      	bne.n	8005f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0e:	4b5c      	ldr	r3, [pc, #368]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d005      	beq.n	8005f26 <HAL_RCC_OscConfig+0x152>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d001      	beq.n	8005f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e1bb      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f26:	4b56      	ldr	r3, [pc, #344]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	4952      	ldr	r1, [pc, #328]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3a:	e03a      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d020      	beq.n	8005f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f44:	4b4f      	ldr	r3, [pc, #316]	; (8006084 <HAL_RCC_OscConfig+0x2b0>)
 8005f46:	2201      	movs	r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fe fb9d 	bl	8004688 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f50:	e008      	b.n	8005f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f52:	f7fe fb99 	bl	8004688 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d901      	bls.n	8005f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e19c      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f64:	4b46      	ldr	r3, [pc, #280]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0f0      	beq.n	8005f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f70:	4b43      	ldr	r3, [pc, #268]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4940      	ldr	r1, [pc, #256]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	600b      	str	r3, [r1, #0]
 8005f84:	e015      	b.n	8005fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f86:	4b3f      	ldr	r3, [pc, #252]	; (8006084 <HAL_RCC_OscConfig+0x2b0>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8c:	f7fe fb7c 	bl	8004688 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f94:	f7fe fb78 	bl	8004688 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e17b      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d030      	beq.n	8006020 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc6:	4b30      	ldr	r3, [pc, #192]	; (8006088 <HAL_RCC_OscConfig+0x2b4>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fcc:	f7fe fb5c 	bl	8004688 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd4:	f7fe fb58 	bl	8004688 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e15b      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe6:	4b26      	ldr	r3, [pc, #152]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8005fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x200>
 8005ff2:	e015      	b.n	8006020 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff4:	4b24      	ldr	r3, [pc, #144]	; (8006088 <HAL_RCC_OscConfig+0x2b4>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffa:	f7fe fb45 	bl	8004688 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006002:	f7fe fb41 	bl	8004688 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e144      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8006016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f0      	bne.n	8006002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0304 	and.w	r3, r3, #4
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a0 	beq.w	800616e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800602e:	2300      	movs	r3, #0
 8006030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10f      	bne.n	800605e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800604c:	6413      	str	r3, [r2, #64]	; 0x40
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <HAL_RCC_OscConfig+0x2ac>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006056:	60bb      	str	r3, [r7, #8]
 8006058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605a:	2301      	movs	r3, #1
 800605c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605e:	4b0b      	ldr	r3, [pc, #44]	; (800608c <HAL_RCC_OscConfig+0x2b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d121      	bne.n	80060ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606a:	4b08      	ldr	r3, [pc, #32]	; (800608c <HAL_RCC_OscConfig+0x2b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a07      	ldr	r2, [pc, #28]	; (800608c <HAL_RCC_OscConfig+0x2b8>)
 8006070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006076:	f7fe fb07 	bl	8004688 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800607c:	e011      	b.n	80060a2 <HAL_RCC_OscConfig+0x2ce>
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800
 8006084:	42470000 	.word	0x42470000
 8006088:	42470e80 	.word	0x42470e80
 800608c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006090:	f7fe fafa 	bl	8004688 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e0fd      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a2:	4b81      	ldr	r3, [pc, #516]	; (80062a8 <HAL_RCC_OscConfig+0x4d4>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d0f0      	beq.n	8006090 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d106      	bne.n	80060c4 <HAL_RCC_OscConfig+0x2f0>
 80060b6:	4b7d      	ldr	r3, [pc, #500]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ba:	4a7c      	ldr	r2, [pc, #496]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060bc:	f043 0301 	orr.w	r3, r3, #1
 80060c0:	6713      	str	r3, [r2, #112]	; 0x70
 80060c2:	e01c      	b.n	80060fe <HAL_RCC_OscConfig+0x32a>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	2b05      	cmp	r3, #5
 80060ca:	d10c      	bne.n	80060e6 <HAL_RCC_OscConfig+0x312>
 80060cc:	4b77      	ldr	r3, [pc, #476]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d0:	4a76      	ldr	r2, [pc, #472]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6713      	str	r3, [r2, #112]	; 0x70
 80060d8:	4b74      	ldr	r3, [pc, #464]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060dc:	4a73      	ldr	r2, [pc, #460]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	6713      	str	r3, [r2, #112]	; 0x70
 80060e4:	e00b      	b.n	80060fe <HAL_RCC_OscConfig+0x32a>
 80060e6:	4b71      	ldr	r3, [pc, #452]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ea:	4a70      	ldr	r2, [pc, #448]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	; 0x70
 80060f2:	4b6e      	ldr	r3, [pc, #440]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	4a6d      	ldr	r2, [pc, #436]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d015      	beq.n	8006132 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fe fabf 	bl	8004688 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610c:	e00a      	b.n	8006124 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610e:	f7fe fabb 	bl	8004688 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	; 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0bc      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006124:	4b61      	ldr	r3, [pc, #388]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0ee      	beq.n	800610e <HAL_RCC_OscConfig+0x33a>
 8006130:	e014      	b.n	800615c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006132:	f7fe faa9 	bl	8004688 <HAL_GetTick>
 8006136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006138:	e00a      	b.n	8006150 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613a:	f7fe faa5 	bl	8004688 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f241 3288 	movw	r2, #5000	; 0x1388
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e0a6      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006150:	4b56      	ldr	r3, [pc, #344]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1ee      	bne.n	800613a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006162:	4b52      	ldr	r3, [pc, #328]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	4a51      	ldr	r2, [pc, #324]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8092 	beq.w	800629c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006178:	4b4c      	ldr	r3, [pc, #304]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d05c      	beq.n	800623e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d141      	bne.n	8006210 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618c:	4b48      	ldr	r3, [pc, #288]	; (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006192:	f7fe fa79 	bl	8004688 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619a:	f7fe fa75 	bl	8004688 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e078      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ac:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	69da      	ldr	r2, [r3, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	019b      	lsls	r3, r3, #6
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	085b      	lsrs	r3, r3, #1
 80061d0:	3b01      	subs	r3, #1
 80061d2:	041b      	lsls	r3, r3, #16
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	061b      	lsls	r3, r3, #24
 80061dc:	4933      	ldr	r1, [pc, #204]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e2:	4b33      	ldr	r3, [pc, #204]	; (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fe fa4e 	bl	8004688 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fe fa4a 	bl	8004688 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e04d      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006202:	4b2a      	ldr	r3, [pc, #168]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x41c>
 800620e:	e045      	b.n	800629c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <HAL_RCC_OscConfig+0x4dc>)
 8006212:	2200      	movs	r2, #0
 8006214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006216:	f7fe fa37 	bl	8004688 <HAL_GetTick>
 800621a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621e:	f7fe fa33 	bl	8004688 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e036      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <HAL_RCC_OscConfig+0x44a>
 800623c:	e02e      	b.n	800629c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e029      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800624a:	4b18      	ldr	r3, [pc, #96]	; (80062ac <HAL_RCC_OscConfig+0x4d8>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	429a      	cmp	r2, r3
 800625c:	d11c      	bne.n	8006298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006268:	429a      	cmp	r2, r3
 800626a:	d115      	bne.n	8006298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006272:	4013      	ands	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006286:	429a      	cmp	r2, r3
 8006288:	d106      	bne.n	8006298 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d001      	beq.n	800629c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40007000 	.word	0x40007000
 80062ac:	40023800 	.word	0x40023800
 80062b0:	42470060 	.word	0x42470060

080062b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cc      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062c8:	4b68      	ldr	r3, [pc, #416]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 030f 	and.w	r3, r3, #15
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d90c      	bls.n	80062f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d6:	4b65      	ldr	r3, [pc, #404]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062de:	4b63      	ldr	r3, [pc, #396]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 030f 	and.w	r3, r3, #15
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d001      	beq.n	80062f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0b8      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d020      	beq.n	800633e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006308:	4b59      	ldr	r3, [pc, #356]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	4a58      	ldr	r2, [pc, #352]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800630e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006320:	4b53      	ldr	r3, [pc, #332]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4a52      	ldr	r2, [pc, #328]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800632a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800632c:	4b50      	ldr	r3, [pc, #320]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	494d      	ldr	r1, [pc, #308]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	4313      	orrs	r3, r2
 800633c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d044      	beq.n	80063d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d107      	bne.n	8006362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	4b47      	ldr	r3, [pc, #284]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d119      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e07f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b02      	cmp	r3, #2
 8006368:	d003      	beq.n	8006372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800636e:	2b03      	cmp	r3, #3
 8006370:	d107      	bne.n	8006382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006372:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d109      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e06f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006382:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e067      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006392:	4b37      	ldr	r3, [pc, #220]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 0203 	bic.w	r2, r3, #3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	4934      	ldr	r1, [pc, #208]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063a4:	f7fe f970 	bl	8004688 <HAL_GetTick>
 80063a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ac:	f7fe f96c 	bl	8004688 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e04f      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	4b2b      	ldr	r3, [pc, #172]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 020c 	and.w	r2, r3, #12
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d1eb      	bne.n	80063ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063d4:	4b25      	ldr	r3, [pc, #148]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20c      	bcs.n	80063fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e2:	4b22      	ldr	r3, [pc, #136]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	b2d2      	uxtb	r2, r2
 80063e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ea:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCC_ClockConfig+0x1b8>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d001      	beq.n	80063fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e032      	b.n	8006462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006408:	4b19      	ldr	r3, [pc, #100]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4916      	ldr	r1, [pc, #88]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	4313      	orrs	r3, r2
 8006418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006426:	4b12      	ldr	r3, [pc, #72]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	490e      	ldr	r1, [pc, #56]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800643a:	f000 f821 	bl	8006480 <HAL_RCC_GetSysClockFreq>
 800643e:	4601      	mov	r1, r0
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <HAL_RCC_ClockConfig+0x1c0>)
 800644c:	5cd3      	ldrb	r3, [r2, r3]
 800644e:	fa21 f303 	lsr.w	r3, r1, r3
 8006452:	4a09      	ldr	r2, [pc, #36]	; (8006478 <HAL_RCC_ClockConfig+0x1c4>)
 8006454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe f8d0 	bl	8004600 <HAL_InitTick>

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	40023c00 	.word	0x40023c00
 8006470:	40023800 	.word	0x40023800
 8006474:	0800b738 	.word	0x0800b738
 8006478:	20000030 	.word	0x20000030
 800647c:	20000034 	.word	0x20000034

08006480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	2300      	movs	r3, #0
 8006490:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006496:	4b50      	ldr	r3, [pc, #320]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f003 030c 	and.w	r3, r3, #12
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d007      	beq.n	80064b2 <HAL_RCC_GetSysClockFreq+0x32>
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d008      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x38>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f040 808d 	bne.w	80065c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064ac:	4b4b      	ldr	r3, [pc, #300]	; (80065dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80064ae:	60bb      	str	r3, [r7, #8]
       break;
 80064b0:	e08c      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064b2:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064b4:	60bb      	str	r3, [r7, #8]
      break;
 80064b6:	e089      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064b8:	4b47      	ldr	r3, [pc, #284]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064c2:	4b45      	ldr	r3, [pc, #276]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d023      	beq.n	8006516 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ce:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	099b      	lsrs	r3, r3, #6
 80064d4:	f04f 0400 	mov.w	r4, #0
 80064d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	ea03 0501 	and.w	r5, r3, r1
 80064e4:	ea04 0602 	and.w	r6, r4, r2
 80064e8:	4a3d      	ldr	r2, [pc, #244]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064ea:	fb02 f106 	mul.w	r1, r2, r6
 80064ee:	2200      	movs	r2, #0
 80064f0:	fb02 f205 	mul.w	r2, r2, r5
 80064f4:	440a      	add	r2, r1
 80064f6:	493a      	ldr	r1, [pc, #232]	; (80065e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80064f8:	fba5 0101 	umull	r0, r1, r5, r1
 80064fc:	1853      	adds	r3, r2, r1
 80064fe:	4619      	mov	r1, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f04f 0400 	mov.w	r4, #0
 8006506:	461a      	mov	r2, r3
 8006508:	4623      	mov	r3, r4
 800650a:	f7fa fbbd 	bl	8000c88 <__aeabi_uldivmod>
 800650e:	4603      	mov	r3, r0
 8006510:	460c      	mov	r4, r1
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e049      	b.n	80065aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006516:	4b30      	ldr	r3, [pc, #192]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	099b      	lsrs	r3, r3, #6
 800651c:	f04f 0400 	mov.w	r4, #0
 8006520:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	ea03 0501 	and.w	r5, r3, r1
 800652c:	ea04 0602 	and.w	r6, r4, r2
 8006530:	4629      	mov	r1, r5
 8006532:	4632      	mov	r2, r6
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	f04f 0400 	mov.w	r4, #0
 800653c:	0154      	lsls	r4, r2, #5
 800653e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006542:	014b      	lsls	r3, r1, #5
 8006544:	4619      	mov	r1, r3
 8006546:	4622      	mov	r2, r4
 8006548:	1b49      	subs	r1, r1, r5
 800654a:	eb62 0206 	sbc.w	r2, r2, r6
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	f04f 0400 	mov.w	r4, #0
 8006556:	0194      	lsls	r4, r2, #6
 8006558:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800655c:	018b      	lsls	r3, r1, #6
 800655e:	1a5b      	subs	r3, r3, r1
 8006560:	eb64 0402 	sbc.w	r4, r4, r2
 8006564:	f04f 0100 	mov.w	r1, #0
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	00e2      	lsls	r2, r4, #3
 800656e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006572:	00d9      	lsls	r1, r3, #3
 8006574:	460b      	mov	r3, r1
 8006576:	4614      	mov	r4, r2
 8006578:	195b      	adds	r3, r3, r5
 800657a:	eb44 0406 	adc.w	r4, r4, r6
 800657e:	f04f 0100 	mov.w	r1, #0
 8006582:	f04f 0200 	mov.w	r2, #0
 8006586:	02a2      	lsls	r2, r4, #10
 8006588:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800658c:	0299      	lsls	r1, r3, #10
 800658e:	460b      	mov	r3, r1
 8006590:	4614      	mov	r4, r2
 8006592:	4618      	mov	r0, r3
 8006594:	4621      	mov	r1, r4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f04f 0400 	mov.w	r4, #0
 800659c:	461a      	mov	r2, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	f7fa fb72 	bl	8000c88 <__aeabi_uldivmod>
 80065a4:	4603      	mov	r3, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	0c1b      	lsrs	r3, r3, #16
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	3301      	adds	r3, #1
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c2:	60bb      	str	r3, [r7, #8]
      break;
 80065c4:	e002      	b.n	80065cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065c6:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80065c8:	60bb      	str	r3, [r7, #8]
      break;
 80065ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065cc:	68bb      	ldr	r3, [r7, #8]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065d6:	bf00      	nop
 80065d8:	40023800 	.word	0x40023800
 80065dc:	00f42400 	.word	0x00f42400
 80065e0:	00bebc20 	.word	0x00bebc20

080065e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065e8:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ea:	681b      	ldr	r3, [r3, #0]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000030 	.word	0x20000030

080065fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006600:	f7ff fff0 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8006604:	4601      	mov	r1, r0
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	0a9b      	lsrs	r3, r3, #10
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	4a03      	ldr	r2, [pc, #12]	; (8006620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006618:	4618      	mov	r0, r3
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40023800 	.word	0x40023800
 8006620:	0800b748 	.word	0x0800b748

08006624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006628:	f7ff ffdc 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800662c:	4601      	mov	r1, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0b5b      	lsrs	r3, r3, #13
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4a03      	ldr	r2, [pc, #12]	; (8006648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800663a:	5cd3      	ldrb	r3, [r2, r3]
 800663c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800b748 	.word	0x0800b748

0800664c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e056      	b.n	800670c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d106      	bne.n	800667e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7fd fcbf 	bl	8003ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006694:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	ea42 0103 	orr.w	r1, r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	0c1b      	lsrs	r3, r3, #16
 80066dc:	f003 0104 	and.w	r1, r3, #4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	69da      	ldr	r2, [r3, #28]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01d      	b.n	8006762 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fd fd5a 	bl	80041f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 fb56 	bl	8006e04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b06      	cmp	r3, #6
 8006792:	d007      	beq.n	80067a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e01d      	b.n	8006800 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d106      	bne.n	80067de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7fd fc57 	bl	800408c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3304      	adds	r3, #4
 80067ee:	4619      	mov	r1, r3
 80067f0:	4610      	mov	r0, r2
 80067f2:	f000 fb07 	bl	8006e04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2201      	movs	r2, #1
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fd42 	bl	80072a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <HAL_TIM_PWM_Start+0x74>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_PWM_Start+0x2c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a14      	ldr	r2, [pc, #80]	; (8006880 <HAL_TIM_PWM_Start+0x78>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d101      	bne.n	8006838 <HAL_TIM_PWM_Start+0x30>
 8006834:	2301      	movs	r3, #1
 8006836:	e000      	b.n	800683a <HAL_TIM_PWM_Start+0x32>
 8006838:	2300      	movs	r3, #0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800684c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b06      	cmp	r3, #6
 800685e:	d007      	beq.n	8006870 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40010000 	.word	0x40010000
 8006880:	40010400 	.word	0x40010400

08006884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e083      	b.n	80069a0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7fd fc25 	bl	80040fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6812      	ldr	r2, [r2, #0]
 80068c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c8:	f023 0307 	bic.w	r3, r3, #7
 80068cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	4619      	mov	r1, r3
 80068d8:	4610      	mov	r0, r2
 80068da:	f000 fa93 	bl	8006e04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	4313      	orrs	r3, r2
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006924:	f023 030c 	bic.w	r3, r3, #12
 8006928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	4313      	orrs	r3, r2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	031b      	lsls	r3, r3, #12
 8006954:	4313      	orrs	r3, r2
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	4313      	orrs	r3, r2
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <HAL_TIM_Encoder_Start+0x16>
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d008      	beq.n	80069ce <HAL_TIM_Encoder_Start+0x26>
 80069bc:	e00f      	b.n	80069de <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2201      	movs	r2, #1
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fc6c 	bl	80072a4 <TIM_CCxChannelCmd>
      break;
 80069cc:	e016      	b.n	80069fc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2201      	movs	r2, #1
 80069d4:	2104      	movs	r1, #4
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fc64 	bl	80072a4 <TIM_CCxChannelCmd>
      break;
 80069dc:	e00e      	b.n	80069fc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2201      	movs	r2, #1
 80069e4:	2100      	movs	r1, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 fc5c 	bl	80072a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2201      	movs	r2, #1
 80069f2:	2104      	movs	r1, #4
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fc55 	bl	80072a4 <TIM_CCxChannelCmd>
      break;
 80069fa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b082      	sub	sp, #8
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d122      	bne.n	8006a72 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d11b      	bne.n	8006a72 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f06f 0202 	mvn.w	r2, #2
 8006a42:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9b5 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006a5e:	e005      	b.n	8006a6c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f9a7 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f9b8 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d122      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0304 	and.w	r3, r3, #4
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d11b      	bne.n	8006ac6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f06f 0204 	mvn.w	r2, #4
 8006a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f98b 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006ab2:	e005      	b.n	8006ac0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f97d 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f98e 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d122      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d11b      	bne.n	8006b1a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f06f 0208 	mvn.w	r2, #8
 8006aea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2204      	movs	r2, #4
 8006af0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f961 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006b06:	e005      	b.n	8006b14 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f953 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f964 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d122      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f003 0310 	and.w	r3, r3, #16
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d11b      	bne.n	8006b6e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f06f 0210 	mvn.w	r2, #16
 8006b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2208      	movs	r2, #8
 8006b44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f937 	bl	8006dc8 <HAL_TIM_IC_CaptureCallback>
 8006b5a:	e005      	b.n	8006b68 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f929 	bl	8006db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f93a 	bl	8006ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d10e      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f06f 0201 	mvn.w	r2, #1
 8006b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7fb ff5f 	bl	8002a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d10e      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fc6d 	bl	80074a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d10e      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d107      	bne.n	8006bf2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f8ff 	bl	8006df0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d10e      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f06f 0220 	mvn.w	r2, #32
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fc37 	bl	800748c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1e:	bf00      	nop
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e0b4      	b.n	8006dac <HAL_TIM_PWM_ConfigChannel+0x184>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b0c      	cmp	r3, #12
 8006c56:	f200 809f 	bhi.w	8006d98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c95 	.word	0x08006c95
 8006c64:	08006d99 	.word	0x08006d99
 8006c68:	08006d99 	.word	0x08006d99
 8006c6c:	08006d99 	.word	0x08006d99
 8006c70:	08006cd5 	.word	0x08006cd5
 8006c74:	08006d99 	.word	0x08006d99
 8006c78:	08006d99 	.word	0x08006d99
 8006c7c:	08006d99 	.word	0x08006d99
 8006c80:	08006d17 	.word	0x08006d17
 8006c84:	08006d99 	.word	0x08006d99
 8006c88:	08006d99 	.word	0x08006d99
 8006c8c:	08006d99 	.word	0x08006d99
 8006c90:	08006d57 	.word	0x08006d57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 f952 	bl	8006f44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0208 	orr.w	r2, r2, #8
 8006cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0204 	bic.w	r2, r2, #4
 8006cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6999      	ldr	r1, [r3, #24]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	691a      	ldr	r2, [r3, #16]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	619a      	str	r2, [r3, #24]
      break;
 8006cd2:	e062      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f9a2 	bl	8007024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6999      	ldr	r1, [r3, #24]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	021a      	lsls	r2, r3, #8
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	619a      	str	r2, [r3, #24]
      break;
 8006d14:	e041      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68b9      	ldr	r1, [r7, #8]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f9f7 	bl	8007110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0208 	orr.w	r2, r2, #8
 8006d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0204 	bic.w	r2, r2, #4
 8006d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69d9      	ldr	r1, [r3, #28]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	61da      	str	r2, [r3, #28]
      break;
 8006d54:	e021      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 fa4b 	bl	80071f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69d9      	ldr	r1, [r3, #28]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	021a      	lsls	r2, r3, #8
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	61da      	str	r2, [r3, #28]
      break;
 8006d96:	e000      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a40      	ldr	r2, [pc, #256]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d013      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d00f      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a3d      	ldr	r2, [pc, #244]	; (8006f1c <TIM_Base_SetConfig+0x118>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00b      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a3c      	ldr	r2, [pc, #240]	; (8006f20 <TIM_Base_SetConfig+0x11c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d007      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3b      	ldr	r2, [pc, #236]	; (8006f24 <TIM_Base_SetConfig+0x120>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a3a      	ldr	r2, [pc, #232]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d108      	bne.n	8006e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d027      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a2c      	ldr	r2, [pc, #176]	; (8006f1c <TIM_Base_SetConfig+0x118>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d023      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <TIM_Base_SetConfig+0x11c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01f      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <TIM_Base_SetConfig+0x120>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d017      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <TIM_Base_SetConfig+0x128>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a27      	ldr	r2, [pc, #156]	; (8006f30 <TIM_Base_SetConfig+0x12c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <TIM_Base_SetConfig+0x130>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a25      	ldr	r2, [pc, #148]	; (8006f38 <TIM_Base_SetConfig+0x134>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <TIM_Base_SetConfig+0x138>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <TIM_Base_SetConfig+0x13c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_Base_SetConfig+0xf8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d103      	bne.n	8006f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	615a      	str	r2, [r3, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40010400 	.word	0x40010400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800
 8006f38:	40001800 	.word	0x40001800
 8006f3c:	40001c00 	.word	0x40001c00
 8006f40:	40002000 	.word	0x40002000

08006f44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	f023 0201 	bic.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0303 	bic.w	r3, r3, #3
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f023 0302 	bic.w	r3, r3, #2
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a20      	ldr	r2, [pc, #128]	; (800701c <TIM_OC1_SetConfig+0xd8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_OC1_SetConfig+0x64>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	; (8007020 <TIM_OC1_SetConfig+0xdc>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d10c      	bne.n	8006fc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0308 	bic.w	r3, r3, #8
 8006fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f023 0304 	bic.w	r3, r3, #4
 8006fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a15      	ldr	r2, [pc, #84]	; (800701c <TIM_OC1_SetConfig+0xd8>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d003      	beq.n	8006fd2 <TIM_OC1_SetConfig+0x8e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a14      	ldr	r2, [pc, #80]	; (8007020 <TIM_OC1_SetConfig+0xdc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d111      	bne.n	8006ff6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	697a      	ldr	r2, [r7, #20]
 800700e:	621a      	str	r2, [r3, #32]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	40010000 	.word	0x40010000
 8007020:	40010400 	.word	0x40010400

08007024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0210 	bic.w	r2, r3, #16
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0320 	bic.w	r3, r3, #32
 800706e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a22      	ldr	r2, [pc, #136]	; (8007108 <TIM_OC2_SetConfig+0xe4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC2_SetConfig+0x68>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a21      	ldr	r2, [pc, #132]	; (800710c <TIM_OC2_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d10d      	bne.n	80070a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	4313      	orrs	r3, r2
 800709e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <TIM_OC2_SetConfig+0xe4>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d003      	beq.n	80070b8 <TIM_OC2_SetConfig+0x94>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a16      	ldr	r2, [pc, #88]	; (800710c <TIM_OC2_SetConfig+0xe8>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d113      	bne.n	80070e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	621a      	str	r2, [r3, #32]
}
 80070fa:	bf00      	nop
 80070fc:	371c      	adds	r7, #28
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	40010000 	.word	0x40010000
 800710c:	40010400 	.word	0x40010400

08007110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a21      	ldr	r2, [pc, #132]	; (80071f0 <TIM_OC3_SetConfig+0xe0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC3_SetConfig+0x66>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a20      	ldr	r2, [pc, #128]	; (80071f4 <TIM_OC3_SetConfig+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d10d      	bne.n	8007192 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800717c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a16      	ldr	r2, [pc, #88]	; (80071f0 <TIM_OC3_SetConfig+0xe0>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC3_SetConfig+0x92>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <TIM_OC3_SetConfig+0xe4>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d113      	bne.n	80071ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	621a      	str	r2, [r3, #32]
}
 80071e4:	bf00      	nop
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	031b      	lsls	r3, r3, #12
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	4313      	orrs	r3, r2
 800724e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a12      	ldr	r2, [pc, #72]	; (800729c <TIM_OC4_SetConfig+0xa4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d003      	beq.n	8007260 <TIM_OC4_SetConfig+0x68>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a11      	ldr	r2, [pc, #68]	; (80072a0 <TIM_OC4_SetConfig+0xa8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d109      	bne.n	8007274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	019b      	lsls	r3, r3, #6
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	693a      	ldr	r2, [r7, #16]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	40010000 	.word	0x40010000
 80072a0:	40010400 	.word	0x40010400

080072a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	2201      	movs	r2, #1
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1a      	ldr	r2, [r3, #32]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	43db      	mvns	r3, r3
 80072c6:	401a      	ands	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a1a      	ldr	r2, [r3, #32]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	fa01 f303 	lsl.w	r3, r1, r3
 80072dc:	431a      	orrs	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
	...

080072f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007304:	2302      	movs	r3, #2
 8007306:	e05a      	b.n	80073be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a21      	ldr	r2, [pc, #132]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d022      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007354:	d01d      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1d      	ldr	r2, [pc, #116]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d018      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a1b      	ldr	r2, [pc, #108]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d013      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1a      	ldr	r2, [pc, #104]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00e      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d009      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a17      	ldr	r2, [pc, #92]	; (80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d004      	beq.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d10c      	bne.n	80073ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3714      	adds	r7, #20
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	40010000 	.word	0x40010000
 80073d0:	40000400 	.word	0x40000400
 80073d4:	40000800 	.word	0x40000800
 80073d8:	40000c00 	.word	0x40000c00
 80073dc:	40010400 	.word	0x40010400
 80073e0:	40014000 	.word	0x40014000
 80073e4:	40001800 	.word	0x40001800

080073e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d101      	bne.n	8007404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007400:	2302      	movs	r3, #2
 8007402:	e03d      	b.n	8007480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4313      	orrs	r3, r2
 8007434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e03f      	b.n	8007546 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fc ff34 	bl	8004348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2224      	movs	r2, #36	; 0x24
 80074e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f829 	bl	8007550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	691a      	ldr	r2, [r3, #16]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800750c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800751c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68da      	ldr	r2, [r3, #12]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800752c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007592:	f023 030c 	bic.w	r3, r3, #12
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6812      	ldr	r2, [r2, #0]
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	430b      	orrs	r3, r1
 800759e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699a      	ldr	r2, [r3, #24]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075be:	f040 818b 	bne.w	80078d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4ac1      	ldr	r2, [pc, #772]	; (80078cc <UART_SetConfig+0x37c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d005      	beq.n	80075d8 <UART_SetConfig+0x88>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4abf      	ldr	r2, [pc, #764]	; (80078d0 <UART_SetConfig+0x380>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	f040 80bd 	bne.w	8007752 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075d8:	f7ff f824 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 80075dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	461d      	mov	r5, r3
 80075e2:	f04f 0600 	mov.w	r6, #0
 80075e6:	46a8      	mov	r8, r5
 80075e8:	46b1      	mov	r9, r6
 80075ea:	eb18 0308 	adds.w	r3, r8, r8
 80075ee:	eb49 0409 	adc.w	r4, r9, r9
 80075f2:	4698      	mov	r8, r3
 80075f4:	46a1      	mov	r9, r4
 80075f6:	eb18 0805 	adds.w	r8, r8, r5
 80075fa:	eb49 0906 	adc.w	r9, r9, r6
 80075fe:	f04f 0100 	mov.w	r1, #0
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800760a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800760e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007612:	4688      	mov	r8, r1
 8007614:	4691      	mov	r9, r2
 8007616:	eb18 0005 	adds.w	r0, r8, r5
 800761a:	eb49 0106 	adc.w	r1, r9, r6
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	461d      	mov	r5, r3
 8007624:	f04f 0600 	mov.w	r6, #0
 8007628:	196b      	adds	r3, r5, r5
 800762a:	eb46 0406 	adc.w	r4, r6, r6
 800762e:	461a      	mov	r2, r3
 8007630:	4623      	mov	r3, r4
 8007632:	f7f9 fb29 	bl	8000c88 <__aeabi_uldivmod>
 8007636:	4603      	mov	r3, r0
 8007638:	460c      	mov	r4, r1
 800763a:	461a      	mov	r2, r3
 800763c:	4ba5      	ldr	r3, [pc, #660]	; (80078d4 <UART_SetConfig+0x384>)
 800763e:	fba3 2302 	umull	r2, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	461d      	mov	r5, r3
 800764c:	f04f 0600 	mov.w	r6, #0
 8007650:	46a9      	mov	r9, r5
 8007652:	46b2      	mov	sl, r6
 8007654:	eb19 0309 	adds.w	r3, r9, r9
 8007658:	eb4a 040a 	adc.w	r4, sl, sl
 800765c:	4699      	mov	r9, r3
 800765e:	46a2      	mov	sl, r4
 8007660:	eb19 0905 	adds.w	r9, r9, r5
 8007664:	eb4a 0a06 	adc.w	sl, sl, r6
 8007668:	f04f 0100 	mov.w	r1, #0
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007674:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007678:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800767c:	4689      	mov	r9, r1
 800767e:	4692      	mov	sl, r2
 8007680:	eb19 0005 	adds.w	r0, r9, r5
 8007684:	eb4a 0106 	adc.w	r1, sl, r6
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	461d      	mov	r5, r3
 800768e:	f04f 0600 	mov.w	r6, #0
 8007692:	196b      	adds	r3, r5, r5
 8007694:	eb46 0406 	adc.w	r4, r6, r6
 8007698:	461a      	mov	r2, r3
 800769a:	4623      	mov	r3, r4
 800769c:	f7f9 faf4 	bl	8000c88 <__aeabi_uldivmod>
 80076a0:	4603      	mov	r3, r0
 80076a2:	460c      	mov	r4, r1
 80076a4:	461a      	mov	r2, r3
 80076a6:	4b8b      	ldr	r3, [pc, #556]	; (80078d4 <UART_SetConfig+0x384>)
 80076a8:	fba3 1302 	umull	r1, r3, r3, r2
 80076ac:	095b      	lsrs	r3, r3, #5
 80076ae:	2164      	movs	r1, #100	; 0x64
 80076b0:	fb01 f303 	mul.w	r3, r1, r3
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	3332      	adds	r3, #50	; 0x32
 80076ba:	4a86      	ldr	r2, [pc, #536]	; (80078d4 <UART_SetConfig+0x384>)
 80076bc:	fba2 2303 	umull	r2, r3, r2, r3
 80076c0:	095b      	lsrs	r3, r3, #5
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076c8:	4498      	add	r8, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	461d      	mov	r5, r3
 80076ce:	f04f 0600 	mov.w	r6, #0
 80076d2:	46a9      	mov	r9, r5
 80076d4:	46b2      	mov	sl, r6
 80076d6:	eb19 0309 	adds.w	r3, r9, r9
 80076da:	eb4a 040a 	adc.w	r4, sl, sl
 80076de:	4699      	mov	r9, r3
 80076e0:	46a2      	mov	sl, r4
 80076e2:	eb19 0905 	adds.w	r9, r9, r5
 80076e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80076ea:	f04f 0100 	mov.w	r1, #0
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80076f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80076fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80076fe:	4689      	mov	r9, r1
 8007700:	4692      	mov	sl, r2
 8007702:	eb19 0005 	adds.w	r0, r9, r5
 8007706:	eb4a 0106 	adc.w	r1, sl, r6
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	461d      	mov	r5, r3
 8007710:	f04f 0600 	mov.w	r6, #0
 8007714:	196b      	adds	r3, r5, r5
 8007716:	eb46 0406 	adc.w	r4, r6, r6
 800771a:	461a      	mov	r2, r3
 800771c:	4623      	mov	r3, r4
 800771e:	f7f9 fab3 	bl	8000c88 <__aeabi_uldivmod>
 8007722:	4603      	mov	r3, r0
 8007724:	460c      	mov	r4, r1
 8007726:	461a      	mov	r2, r3
 8007728:	4b6a      	ldr	r3, [pc, #424]	; (80078d4 <UART_SetConfig+0x384>)
 800772a:	fba3 1302 	umull	r1, r3, r3, r2
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	2164      	movs	r1, #100	; 0x64
 8007732:	fb01 f303 	mul.w	r3, r1, r3
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	00db      	lsls	r3, r3, #3
 800773a:	3332      	adds	r3, #50	; 0x32
 800773c:	4a65      	ldr	r2, [pc, #404]	; (80078d4 <UART_SetConfig+0x384>)
 800773e:	fba2 2303 	umull	r2, r3, r2, r3
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	f003 0207 	and.w	r2, r3, #7
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4442      	add	r2, r8
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	e26f      	b.n	8007c32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007752:	f7fe ff53 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8007756:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	461d      	mov	r5, r3
 800775c:	f04f 0600 	mov.w	r6, #0
 8007760:	46a8      	mov	r8, r5
 8007762:	46b1      	mov	r9, r6
 8007764:	eb18 0308 	adds.w	r3, r8, r8
 8007768:	eb49 0409 	adc.w	r4, r9, r9
 800776c:	4698      	mov	r8, r3
 800776e:	46a1      	mov	r9, r4
 8007770:	eb18 0805 	adds.w	r8, r8, r5
 8007774:	eb49 0906 	adc.w	r9, r9, r6
 8007778:	f04f 0100 	mov.w	r1, #0
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007784:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007788:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800778c:	4688      	mov	r8, r1
 800778e:	4691      	mov	r9, r2
 8007790:	eb18 0005 	adds.w	r0, r8, r5
 8007794:	eb49 0106 	adc.w	r1, r9, r6
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	461d      	mov	r5, r3
 800779e:	f04f 0600 	mov.w	r6, #0
 80077a2:	196b      	adds	r3, r5, r5
 80077a4:	eb46 0406 	adc.w	r4, r6, r6
 80077a8:	461a      	mov	r2, r3
 80077aa:	4623      	mov	r3, r4
 80077ac:	f7f9 fa6c 	bl	8000c88 <__aeabi_uldivmod>
 80077b0:	4603      	mov	r3, r0
 80077b2:	460c      	mov	r4, r1
 80077b4:	461a      	mov	r2, r3
 80077b6:	4b47      	ldr	r3, [pc, #284]	; (80078d4 <UART_SetConfig+0x384>)
 80077b8:	fba3 2302 	umull	r2, r3, r3, r2
 80077bc:	095b      	lsrs	r3, r3, #5
 80077be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	461d      	mov	r5, r3
 80077c6:	f04f 0600 	mov.w	r6, #0
 80077ca:	46a9      	mov	r9, r5
 80077cc:	46b2      	mov	sl, r6
 80077ce:	eb19 0309 	adds.w	r3, r9, r9
 80077d2:	eb4a 040a 	adc.w	r4, sl, sl
 80077d6:	4699      	mov	r9, r3
 80077d8:	46a2      	mov	sl, r4
 80077da:	eb19 0905 	adds.w	r9, r9, r5
 80077de:	eb4a 0a06 	adc.w	sl, sl, r6
 80077e2:	f04f 0100 	mov.w	r1, #0
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077f6:	4689      	mov	r9, r1
 80077f8:	4692      	mov	sl, r2
 80077fa:	eb19 0005 	adds.w	r0, r9, r5
 80077fe:	eb4a 0106 	adc.w	r1, sl, r6
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	461d      	mov	r5, r3
 8007808:	f04f 0600 	mov.w	r6, #0
 800780c:	196b      	adds	r3, r5, r5
 800780e:	eb46 0406 	adc.w	r4, r6, r6
 8007812:	461a      	mov	r2, r3
 8007814:	4623      	mov	r3, r4
 8007816:	f7f9 fa37 	bl	8000c88 <__aeabi_uldivmod>
 800781a:	4603      	mov	r3, r0
 800781c:	460c      	mov	r4, r1
 800781e:	461a      	mov	r2, r3
 8007820:	4b2c      	ldr	r3, [pc, #176]	; (80078d4 <UART_SetConfig+0x384>)
 8007822:	fba3 1302 	umull	r1, r3, r3, r2
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	2164      	movs	r1, #100	; 0x64
 800782a:	fb01 f303 	mul.w	r3, r1, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	3332      	adds	r3, #50	; 0x32
 8007834:	4a27      	ldr	r2, [pc, #156]	; (80078d4 <UART_SetConfig+0x384>)
 8007836:	fba2 2303 	umull	r2, r3, r2, r3
 800783a:	095b      	lsrs	r3, r3, #5
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007842:	4498      	add	r8, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	461d      	mov	r5, r3
 8007848:	f04f 0600 	mov.w	r6, #0
 800784c:	46a9      	mov	r9, r5
 800784e:	46b2      	mov	sl, r6
 8007850:	eb19 0309 	adds.w	r3, r9, r9
 8007854:	eb4a 040a 	adc.w	r4, sl, sl
 8007858:	4699      	mov	r9, r3
 800785a:	46a2      	mov	sl, r4
 800785c:	eb19 0905 	adds.w	r9, r9, r5
 8007860:	eb4a 0a06 	adc.w	sl, sl, r6
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007870:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007874:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007878:	4689      	mov	r9, r1
 800787a:	4692      	mov	sl, r2
 800787c:	eb19 0005 	adds.w	r0, r9, r5
 8007880:	eb4a 0106 	adc.w	r1, sl, r6
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	461d      	mov	r5, r3
 800788a:	f04f 0600 	mov.w	r6, #0
 800788e:	196b      	adds	r3, r5, r5
 8007890:	eb46 0406 	adc.w	r4, r6, r6
 8007894:	461a      	mov	r2, r3
 8007896:	4623      	mov	r3, r4
 8007898:	f7f9 f9f6 	bl	8000c88 <__aeabi_uldivmod>
 800789c:	4603      	mov	r3, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	461a      	mov	r2, r3
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <UART_SetConfig+0x384>)
 80078a4:	fba3 1302 	umull	r1, r3, r3, r2
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	2164      	movs	r1, #100	; 0x64
 80078ac:	fb01 f303 	mul.w	r3, r1, r3
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	3332      	adds	r3, #50	; 0x32
 80078b6:	4a07      	ldr	r2, [pc, #28]	; (80078d4 <UART_SetConfig+0x384>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	095b      	lsrs	r3, r3, #5
 80078be:	f003 0207 	and.w	r2, r3, #7
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4442      	add	r2, r8
 80078c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80078ca:	e1b2      	b.n	8007c32 <UART_SetConfig+0x6e2>
 80078cc:	40011000 	.word	0x40011000
 80078d0:	40011400 	.word	0x40011400
 80078d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4ad7      	ldr	r2, [pc, #860]	; (8007c3c <UART_SetConfig+0x6ec>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d005      	beq.n	80078ee <UART_SetConfig+0x39e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4ad6      	ldr	r2, [pc, #856]	; (8007c40 <UART_SetConfig+0x6f0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	f040 80d1 	bne.w	8007a90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80078ee:	f7fe fe99 	bl	8006624 <HAL_RCC_GetPCLK2Freq>
 80078f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	469a      	mov	sl, r3
 80078f8:	f04f 0b00 	mov.w	fp, #0
 80078fc:	46d0      	mov	r8, sl
 80078fe:	46d9      	mov	r9, fp
 8007900:	eb18 0308 	adds.w	r3, r8, r8
 8007904:	eb49 0409 	adc.w	r4, r9, r9
 8007908:	4698      	mov	r8, r3
 800790a:	46a1      	mov	r9, r4
 800790c:	eb18 080a 	adds.w	r8, r8, sl
 8007910:	eb49 090b 	adc.w	r9, r9, fp
 8007914:	f04f 0100 	mov.w	r1, #0
 8007918:	f04f 0200 	mov.w	r2, #0
 800791c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007920:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007924:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007928:	4688      	mov	r8, r1
 800792a:	4691      	mov	r9, r2
 800792c:	eb1a 0508 	adds.w	r5, sl, r8
 8007930:	eb4b 0609 	adc.w	r6, fp, r9
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	4619      	mov	r1, r3
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	f04f 0300 	mov.w	r3, #0
 8007942:	f04f 0400 	mov.w	r4, #0
 8007946:	0094      	lsls	r4, r2, #2
 8007948:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800794c:	008b      	lsls	r3, r1, #2
 800794e:	461a      	mov	r2, r3
 8007950:	4623      	mov	r3, r4
 8007952:	4628      	mov	r0, r5
 8007954:	4631      	mov	r1, r6
 8007956:	f7f9 f997 	bl	8000c88 <__aeabi_uldivmod>
 800795a:	4603      	mov	r3, r0
 800795c:	460c      	mov	r4, r1
 800795e:	461a      	mov	r2, r3
 8007960:	4bb8      	ldr	r3, [pc, #736]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007962:	fba3 2302 	umull	r2, r3, r3, r2
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	469b      	mov	fp, r3
 8007970:	f04f 0c00 	mov.w	ip, #0
 8007974:	46d9      	mov	r9, fp
 8007976:	46e2      	mov	sl, ip
 8007978:	eb19 0309 	adds.w	r3, r9, r9
 800797c:	eb4a 040a 	adc.w	r4, sl, sl
 8007980:	4699      	mov	r9, r3
 8007982:	46a2      	mov	sl, r4
 8007984:	eb19 090b 	adds.w	r9, r9, fp
 8007988:	eb4a 0a0c 	adc.w	sl, sl, ip
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800799c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079a0:	4689      	mov	r9, r1
 80079a2:	4692      	mov	sl, r2
 80079a4:	eb1b 0509 	adds.w	r5, fp, r9
 80079a8:	eb4c 060a 	adc.w	r6, ip, sl
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	4619      	mov	r1, r3
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	f04f 0400 	mov.w	r4, #0
 80079be:	0094      	lsls	r4, r2, #2
 80079c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079c4:	008b      	lsls	r3, r1, #2
 80079c6:	461a      	mov	r2, r3
 80079c8:	4623      	mov	r3, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	4631      	mov	r1, r6
 80079ce:	f7f9 f95b 	bl	8000c88 <__aeabi_uldivmod>
 80079d2:	4603      	mov	r3, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	461a      	mov	r2, r3
 80079d8:	4b9a      	ldr	r3, [pc, #616]	; (8007c44 <UART_SetConfig+0x6f4>)
 80079da:	fba3 1302 	umull	r1, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2164      	movs	r1, #100	; 0x64
 80079e2:	fb01 f303 	mul.w	r3, r1, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	3332      	adds	r3, #50	; 0x32
 80079ec:	4a95      	ldr	r2, [pc, #596]	; (8007c44 <UART_SetConfig+0x6f4>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079f8:	4498      	add	r8, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	469b      	mov	fp, r3
 80079fe:	f04f 0c00 	mov.w	ip, #0
 8007a02:	46d9      	mov	r9, fp
 8007a04:	46e2      	mov	sl, ip
 8007a06:	eb19 0309 	adds.w	r3, r9, r9
 8007a0a:	eb4a 040a 	adc.w	r4, sl, sl
 8007a0e:	4699      	mov	r9, r3
 8007a10:	46a2      	mov	sl, r4
 8007a12:	eb19 090b 	adds.w	r9, r9, fp
 8007a16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a1a:	f04f 0100 	mov.w	r1, #0
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a2e:	4689      	mov	r9, r1
 8007a30:	4692      	mov	sl, r2
 8007a32:	eb1b 0509 	adds.w	r5, fp, r9
 8007a36:	eb4c 060a 	adc.w	r6, ip, sl
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	f04f 0400 	mov.w	r4, #0
 8007a4c:	0094      	lsls	r4, r2, #2
 8007a4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a52:	008b      	lsls	r3, r1, #2
 8007a54:	461a      	mov	r2, r3
 8007a56:	4623      	mov	r3, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	f7f9 f914 	bl	8000c88 <__aeabi_uldivmod>
 8007a60:	4603      	mov	r3, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	461a      	mov	r2, r3
 8007a66:	4b77      	ldr	r3, [pc, #476]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007a68:	fba3 1302 	umull	r1, r3, r3, r2
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	2164      	movs	r1, #100	; 0x64
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	3332      	adds	r3, #50	; 0x32
 8007a7a:	4a72      	ldr	r2, [pc, #456]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f003 020f 	and.w	r2, r3, #15
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4442      	add	r2, r8
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	e0d0      	b.n	8007c32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a90:	f7fe fdb4 	bl	80065fc <HAL_RCC_GetPCLK1Freq>
 8007a94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	469a      	mov	sl, r3
 8007a9a:	f04f 0b00 	mov.w	fp, #0
 8007a9e:	46d0      	mov	r8, sl
 8007aa0:	46d9      	mov	r9, fp
 8007aa2:	eb18 0308 	adds.w	r3, r8, r8
 8007aa6:	eb49 0409 	adc.w	r4, r9, r9
 8007aaa:	4698      	mov	r8, r3
 8007aac:	46a1      	mov	r9, r4
 8007aae:	eb18 080a 	adds.w	r8, r8, sl
 8007ab2:	eb49 090b 	adc.w	r9, r9, fp
 8007ab6:	f04f 0100 	mov.w	r1, #0
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ac2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ac6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007aca:	4688      	mov	r8, r1
 8007acc:	4691      	mov	r9, r2
 8007ace:	eb1a 0508 	adds.w	r5, sl, r8
 8007ad2:	eb4b 0609 	adc.w	r6, fp, r9
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	f04f 0400 	mov.w	r4, #0
 8007ae8:	0094      	lsls	r4, r2, #2
 8007aea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007aee:	008b      	lsls	r3, r1, #2
 8007af0:	461a      	mov	r2, r3
 8007af2:	4623      	mov	r3, r4
 8007af4:	4628      	mov	r0, r5
 8007af6:	4631      	mov	r1, r6
 8007af8:	f7f9 f8c6 	bl	8000c88 <__aeabi_uldivmod>
 8007afc:	4603      	mov	r3, r0
 8007afe:	460c      	mov	r4, r1
 8007b00:	461a      	mov	r2, r3
 8007b02:	4b50      	ldr	r3, [pc, #320]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007b04:	fba3 2302 	umull	r2, r3, r3, r2
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	469b      	mov	fp, r3
 8007b12:	f04f 0c00 	mov.w	ip, #0
 8007b16:	46d9      	mov	r9, fp
 8007b18:	46e2      	mov	sl, ip
 8007b1a:	eb19 0309 	adds.w	r3, r9, r9
 8007b1e:	eb4a 040a 	adc.w	r4, sl, sl
 8007b22:	4699      	mov	r9, r3
 8007b24:	46a2      	mov	sl, r4
 8007b26:	eb19 090b 	adds.w	r9, r9, fp
 8007b2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b2e:	f04f 0100 	mov.w	r1, #0
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b42:	4689      	mov	r9, r1
 8007b44:	4692      	mov	sl, r2
 8007b46:	eb1b 0509 	adds.w	r5, fp, r9
 8007b4a:	eb4c 060a 	adc.w	r6, ip, sl
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4619      	mov	r1, r3
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	f04f 0300 	mov.w	r3, #0
 8007b5c:	f04f 0400 	mov.w	r4, #0
 8007b60:	0094      	lsls	r4, r2, #2
 8007b62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b66:	008b      	lsls	r3, r1, #2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	4631      	mov	r1, r6
 8007b70:	f7f9 f88a 	bl	8000c88 <__aeabi_uldivmod>
 8007b74:	4603      	mov	r3, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b32      	ldr	r3, [pc, #200]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007b80:	095b      	lsrs	r3, r3, #5
 8007b82:	2164      	movs	r1, #100	; 0x64
 8007b84:	fb01 f303 	mul.w	r3, r1, r3
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	3332      	adds	r3, #50	; 0x32
 8007b8e:	4a2d      	ldr	r2, [pc, #180]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007b90:	fba2 2303 	umull	r2, r3, r2, r3
 8007b94:	095b      	lsrs	r3, r3, #5
 8007b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b9a:	4498      	add	r8, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	469b      	mov	fp, r3
 8007ba0:	f04f 0c00 	mov.w	ip, #0
 8007ba4:	46d9      	mov	r9, fp
 8007ba6:	46e2      	mov	sl, ip
 8007ba8:	eb19 0309 	adds.w	r3, r9, r9
 8007bac:	eb4a 040a 	adc.w	r4, sl, sl
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	46a2      	mov	sl, r4
 8007bb4:	eb19 090b 	adds.w	r9, r9, fp
 8007bb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bbc:	f04f 0100 	mov.w	r1, #0
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bd0:	4689      	mov	r9, r1
 8007bd2:	4692      	mov	sl, r2
 8007bd4:	eb1b 0509 	adds.w	r5, fp, r9
 8007bd8:	eb4c 060a 	adc.w	r6, ip, sl
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4619      	mov	r1, r3
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	f04f 0300 	mov.w	r3, #0
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	0094      	lsls	r4, r2, #2
 8007bf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bf4:	008b      	lsls	r3, r1, #2
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	4623      	mov	r3, r4
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	f7f9 f843 	bl	8000c88 <__aeabi_uldivmod>
 8007c02:	4603      	mov	r3, r0
 8007c04:	460c      	mov	r4, r1
 8007c06:	461a      	mov	r2, r3
 8007c08:	4b0e      	ldr	r3, [pc, #56]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2164      	movs	r1, #100	; 0x64
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	3332      	adds	r3, #50	; 0x32
 8007c1c:	4a09      	ldr	r2, [pc, #36]	; (8007c44 <UART_SetConfig+0x6f4>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4442      	add	r2, r8
 8007c2e:	609a      	str	r2, [r3, #8]
}
 8007c30:	e7ff      	b.n	8007c32 <UART_SetConfig+0x6e2>
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c3c:	40011000 	.word	0x40011000
 8007c40:	40011400 	.word	0x40011400
 8007c44:	51eb851f 	.word	0x51eb851f

08007c48 <__errno>:
 8007c48:	4b01      	ldr	r3, [pc, #4]	; (8007c50 <__errno+0x8>)
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	2000003c 	.word	0x2000003c

08007c54 <__libc_init_array>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0d      	ldr	r6, [pc, #52]	; (8007c8c <__libc_init_array+0x38>)
 8007c58:	4c0d      	ldr	r4, [pc, #52]	; (8007c90 <__libc_init_array+0x3c>)
 8007c5a:	1ba4      	subs	r4, r4, r6
 8007c5c:	10a4      	asrs	r4, r4, #2
 8007c5e:	2500      	movs	r5, #0
 8007c60:	42a5      	cmp	r5, r4
 8007c62:	d109      	bne.n	8007c78 <__libc_init_array+0x24>
 8007c64:	4e0b      	ldr	r6, [pc, #44]	; (8007c94 <__libc_init_array+0x40>)
 8007c66:	4c0c      	ldr	r4, [pc, #48]	; (8007c98 <__libc_init_array+0x44>)
 8007c68:	f003 fd58 	bl	800b71c <_init>
 8007c6c:	1ba4      	subs	r4, r4, r6
 8007c6e:	10a4      	asrs	r4, r4, #2
 8007c70:	2500      	movs	r5, #0
 8007c72:	42a5      	cmp	r5, r4
 8007c74:	d105      	bne.n	8007c82 <__libc_init_array+0x2e>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c7c:	4798      	blx	r3
 8007c7e:	3501      	adds	r5, #1
 8007c80:	e7ee      	b.n	8007c60 <__libc_init_array+0xc>
 8007c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007c86:	4798      	blx	r3
 8007c88:	3501      	adds	r5, #1
 8007c8a:	e7f2      	b.n	8007c72 <__libc_init_array+0x1e>
 8007c8c:	0800ba18 	.word	0x0800ba18
 8007c90:	0800ba18 	.word	0x0800ba18
 8007c94:	0800ba18 	.word	0x0800ba18
 8007c98:	0800ba1c 	.word	0x0800ba1c

08007c9c <memset>:
 8007c9c:	4402      	add	r2, r0
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d100      	bne.n	8007ca6 <memset+0xa>
 8007ca4:	4770      	bx	lr
 8007ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8007caa:	e7f9      	b.n	8007ca0 <memset+0x4>

08007cac <__cvt>:
 8007cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb0:	ec55 4b10 	vmov	r4, r5, d0
 8007cb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007cb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	460e      	mov	r6, r1
 8007cbe:	4691      	mov	r9, r2
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	bfb8      	it	lt
 8007cc4:	4622      	movlt	r2, r4
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f027 0720 	bic.w	r7, r7, #32
 8007ccc:	bfbb      	ittet	lt
 8007cce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007cd2:	461d      	movlt	r5, r3
 8007cd4:	2300      	movge	r3, #0
 8007cd6:	232d      	movlt	r3, #45	; 0x2d
 8007cd8:	bfb8      	it	lt
 8007cda:	4614      	movlt	r4, r2
 8007cdc:	2f46      	cmp	r7, #70	; 0x46
 8007cde:	700b      	strb	r3, [r1, #0]
 8007ce0:	d004      	beq.n	8007cec <__cvt+0x40>
 8007ce2:	2f45      	cmp	r7, #69	; 0x45
 8007ce4:	d100      	bne.n	8007ce8 <__cvt+0x3c>
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	2102      	movs	r1, #2
 8007cea:	e000      	b.n	8007cee <__cvt+0x42>
 8007cec:	2103      	movs	r1, #3
 8007cee:	ab03      	add	r3, sp, #12
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	ab02      	add	r3, sp, #8
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4632      	mov	r2, r6
 8007cf8:	4653      	mov	r3, sl
 8007cfa:	ec45 4b10 	vmov	d0, r4, r5
 8007cfe:	f001 fd77 	bl	80097f0 <_dtoa_r>
 8007d02:	2f47      	cmp	r7, #71	; 0x47
 8007d04:	4680      	mov	r8, r0
 8007d06:	d102      	bne.n	8007d0e <__cvt+0x62>
 8007d08:	f019 0f01 	tst.w	r9, #1
 8007d0c:	d026      	beq.n	8007d5c <__cvt+0xb0>
 8007d0e:	2f46      	cmp	r7, #70	; 0x46
 8007d10:	eb08 0906 	add.w	r9, r8, r6
 8007d14:	d111      	bne.n	8007d3a <__cvt+0x8e>
 8007d16:	f898 3000 	ldrb.w	r3, [r8]
 8007d1a:	2b30      	cmp	r3, #48	; 0x30
 8007d1c:	d10a      	bne.n	8007d34 <__cvt+0x88>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4620      	mov	r0, r4
 8007d24:	4629      	mov	r1, r5
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b918      	cbnz	r0, 8007d34 <__cvt+0x88>
 8007d2c:	f1c6 0601 	rsb	r6, r6, #1
 8007d30:	f8ca 6000 	str.w	r6, [sl]
 8007d34:	f8da 3000 	ldr.w	r3, [sl]
 8007d38:	4499      	add	r9, r3
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4620      	mov	r0, r4
 8007d40:	4629      	mov	r1, r5
 8007d42:	f7f8 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d46:	b938      	cbnz	r0, 8007d58 <__cvt+0xac>
 8007d48:	2230      	movs	r2, #48	; 0x30
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	454b      	cmp	r3, r9
 8007d4e:	d205      	bcs.n	8007d5c <__cvt+0xb0>
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	9103      	str	r1, [sp, #12]
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e7f8      	b.n	8007d4a <__cvt+0x9e>
 8007d58:	f8cd 900c 	str.w	r9, [sp, #12]
 8007d5c:	9b03      	ldr	r3, [sp, #12]
 8007d5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d60:	eba3 0308 	sub.w	r3, r3, r8
 8007d64:	4640      	mov	r0, r8
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	b004      	add	sp, #16
 8007d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007d6e <__exponent>:
 8007d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d70:	2900      	cmp	r1, #0
 8007d72:	4604      	mov	r4, r0
 8007d74:	bfba      	itte	lt
 8007d76:	4249      	neglt	r1, r1
 8007d78:	232d      	movlt	r3, #45	; 0x2d
 8007d7a:	232b      	movge	r3, #43	; 0x2b
 8007d7c:	2909      	cmp	r1, #9
 8007d7e:	f804 2b02 	strb.w	r2, [r4], #2
 8007d82:	7043      	strb	r3, [r0, #1]
 8007d84:	dd20      	ble.n	8007dc8 <__exponent+0x5a>
 8007d86:	f10d 0307 	add.w	r3, sp, #7
 8007d8a:	461f      	mov	r7, r3
 8007d8c:	260a      	movs	r6, #10
 8007d8e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007d92:	fb06 1115 	mls	r1, r6, r5, r1
 8007d96:	3130      	adds	r1, #48	; 0x30
 8007d98:	2d09      	cmp	r5, #9
 8007d9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d9e:	f103 32ff 	add.w	r2, r3, #4294967295
 8007da2:	4629      	mov	r1, r5
 8007da4:	dc09      	bgt.n	8007dba <__exponent+0x4c>
 8007da6:	3130      	adds	r1, #48	; 0x30
 8007da8:	3b02      	subs	r3, #2
 8007daa:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007dae:	42bb      	cmp	r3, r7
 8007db0:	4622      	mov	r2, r4
 8007db2:	d304      	bcc.n	8007dbe <__exponent+0x50>
 8007db4:	1a10      	subs	r0, r2, r0
 8007db6:	b003      	add	sp, #12
 8007db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dba:	4613      	mov	r3, r2
 8007dbc:	e7e7      	b.n	8007d8e <__exponent+0x20>
 8007dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc2:	f804 2b01 	strb.w	r2, [r4], #1
 8007dc6:	e7f2      	b.n	8007dae <__exponent+0x40>
 8007dc8:	2330      	movs	r3, #48	; 0x30
 8007dca:	4419      	add	r1, r3
 8007dcc:	7083      	strb	r3, [r0, #2]
 8007dce:	1d02      	adds	r2, r0, #4
 8007dd0:	70c1      	strb	r1, [r0, #3]
 8007dd2:	e7ef      	b.n	8007db4 <__exponent+0x46>

08007dd4 <_printf_float>:
 8007dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd8:	b08d      	sub	sp, #52	; 0x34
 8007dda:	460c      	mov	r4, r1
 8007ddc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007de0:	4616      	mov	r6, r2
 8007de2:	461f      	mov	r7, r3
 8007de4:	4605      	mov	r5, r0
 8007de6:	f002 fde7 	bl	800a9b8 <_localeconv_r>
 8007dea:	6803      	ldr	r3, [r0, #0]
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7f8 f9ee 	bl	80001d0 <strlen>
 8007df4:	2300      	movs	r3, #0
 8007df6:	930a      	str	r3, [sp, #40]	; 0x28
 8007df8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dfc:	9005      	str	r0, [sp, #20]
 8007dfe:	3307      	adds	r3, #7
 8007e00:	f023 0307 	bic.w	r3, r3, #7
 8007e04:	f103 0208 	add.w	r2, r3, #8
 8007e08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007e0c:	f8d4 b000 	ldr.w	fp, [r4]
 8007e10:	f8c8 2000 	str.w	r2, [r8]
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2e:	4ba7      	ldr	r3, [pc, #668]	; (80080cc <_printf_float+0x2f8>)
 8007e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e34:	f7f8 fe7a 	bl	8000b2c <__aeabi_dcmpun>
 8007e38:	bb70      	cbnz	r0, 8007e98 <_printf_float+0xc4>
 8007e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3e:	4ba3      	ldr	r3, [pc, #652]	; (80080cc <_printf_float+0x2f8>)
 8007e40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e44:	f7f8 fe54 	bl	8000af0 <__aeabi_dcmple>
 8007e48:	bb30      	cbnz	r0, 8007e98 <_printf_float+0xc4>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 fe43 	bl	8000adc <__aeabi_dcmplt>
 8007e56:	b110      	cbz	r0, 8007e5e <_printf_float+0x8a>
 8007e58:	232d      	movs	r3, #45	; 0x2d
 8007e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e5e:	4a9c      	ldr	r2, [pc, #624]	; (80080d0 <_printf_float+0x2fc>)
 8007e60:	4b9c      	ldr	r3, [pc, #624]	; (80080d4 <_printf_float+0x300>)
 8007e62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007e66:	bf8c      	ite	hi
 8007e68:	4690      	movhi	r8, r2
 8007e6a:	4698      	movls	r8, r3
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	f02b 0204 	bic.w	r2, fp, #4
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	6022      	str	r2, [r4, #0]
 8007e76:	f04f 0900 	mov.w	r9, #0
 8007e7a:	9700      	str	r7, [sp, #0]
 8007e7c:	4633      	mov	r3, r6
 8007e7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007e80:	4621      	mov	r1, r4
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 f9e6 	bl	8008254 <_printf_common>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f040 808d 	bne.w	8007fa8 <_printf_float+0x1d4>
 8007e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e92:	b00d      	add	sp, #52	; 0x34
 8007e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e98:	4642      	mov	r2, r8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fe44 	bl	8000b2c <__aeabi_dcmpun>
 8007ea4:	b110      	cbz	r0, 8007eac <_printf_float+0xd8>
 8007ea6:	4a8c      	ldr	r2, [pc, #560]	; (80080d8 <_printf_float+0x304>)
 8007ea8:	4b8c      	ldr	r3, [pc, #560]	; (80080dc <_printf_float+0x308>)
 8007eaa:	e7da      	b.n	8007e62 <_printf_float+0x8e>
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	1c4b      	adds	r3, r1, #1
 8007eb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007eb4:	a80a      	add	r0, sp, #40	; 0x28
 8007eb6:	d13e      	bne.n	8007f36 <_printf_float+0x162>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	6063      	str	r3, [r4, #4]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007ec2:	ab09      	add	r3, sp, #36	; 0x24
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	ec49 8b10 	vmov	d0, r8, r9
 8007eca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	f8cd a004 	str.w	sl, [sp, #4]
 8007ed4:	6861      	ldr	r1, [r4, #4]
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7ff fee8 	bl	8007cac <__cvt>
 8007edc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007ee0:	2b47      	cmp	r3, #71	; 0x47
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	d109      	bne.n	8007efa <_printf_float+0x126>
 8007ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee8:	1cd8      	adds	r0, r3, #3
 8007eea:	db02      	blt.n	8007ef2 <_printf_float+0x11e>
 8007eec:	6862      	ldr	r2, [r4, #4]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	dd47      	ble.n	8007f82 <_printf_float+0x1ae>
 8007ef2:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ef6:	fa5f fa8a 	uxtb.w	sl, sl
 8007efa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007efe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f00:	d824      	bhi.n	8007f4c <_printf_float+0x178>
 8007f02:	3901      	subs	r1, #1
 8007f04:	4652      	mov	r2, sl
 8007f06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f0a:	9109      	str	r1, [sp, #36]	; 0x24
 8007f0c:	f7ff ff2f 	bl	8007d6e <__exponent>
 8007f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f12:	1813      	adds	r3, r2, r0
 8007f14:	2a01      	cmp	r2, #1
 8007f16:	4681      	mov	r9, r0
 8007f18:	6123      	str	r3, [r4, #16]
 8007f1a:	dc02      	bgt.n	8007f22 <_printf_float+0x14e>
 8007f1c:	6822      	ldr	r2, [r4, #0]
 8007f1e:	07d1      	lsls	r1, r2, #31
 8007f20:	d501      	bpl.n	8007f26 <_printf_float+0x152>
 8007f22:	3301      	adds	r3, #1
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0a5      	beq.n	8007e7a <_printf_float+0xa6>
 8007f2e:	232d      	movs	r3, #45	; 0x2d
 8007f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f34:	e7a1      	b.n	8007e7a <_printf_float+0xa6>
 8007f36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007f3a:	f000 8177 	beq.w	800822c <_printf_float+0x458>
 8007f3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007f42:	d1bb      	bne.n	8007ebc <_printf_float+0xe8>
 8007f44:	2900      	cmp	r1, #0
 8007f46:	d1b9      	bne.n	8007ebc <_printf_float+0xe8>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e7b6      	b.n	8007eba <_printf_float+0xe6>
 8007f4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007f50:	d119      	bne.n	8007f86 <_printf_float+0x1b2>
 8007f52:	2900      	cmp	r1, #0
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	dd0c      	ble.n	8007f72 <_printf_float+0x19e>
 8007f58:	6121      	str	r1, [r4, #16]
 8007f5a:	b913      	cbnz	r3, 8007f62 <_printf_float+0x18e>
 8007f5c:	6822      	ldr	r2, [r4, #0]
 8007f5e:	07d2      	lsls	r2, r2, #31
 8007f60:	d502      	bpl.n	8007f68 <_printf_float+0x194>
 8007f62:	3301      	adds	r3, #1
 8007f64:	440b      	add	r3, r1
 8007f66:	6123      	str	r3, [r4, #16]
 8007f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f6c:	f04f 0900 	mov.w	r9, #0
 8007f70:	e7d9      	b.n	8007f26 <_printf_float+0x152>
 8007f72:	b913      	cbnz	r3, 8007f7a <_printf_float+0x1a6>
 8007f74:	6822      	ldr	r2, [r4, #0]
 8007f76:	07d0      	lsls	r0, r2, #31
 8007f78:	d501      	bpl.n	8007f7e <_printf_float+0x1aa>
 8007f7a:	3302      	adds	r3, #2
 8007f7c:	e7f3      	b.n	8007f66 <_printf_float+0x192>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e7f1      	b.n	8007f66 <_printf_float+0x192>
 8007f82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007f86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	db05      	blt.n	8007f9a <_printf_float+0x1c6>
 8007f8e:	6822      	ldr	r2, [r4, #0]
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	07d1      	lsls	r1, r2, #31
 8007f94:	d5e8      	bpl.n	8007f68 <_printf_float+0x194>
 8007f96:	3301      	adds	r3, #1
 8007f98:	e7e5      	b.n	8007f66 <_printf_float+0x192>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfd4      	ite	le
 8007f9e:	f1c3 0302 	rsble	r3, r3, #2
 8007fa2:	2301      	movgt	r3, #1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	e7de      	b.n	8007f66 <_printf_float+0x192>
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	055a      	lsls	r2, r3, #21
 8007fac:	d407      	bmi.n	8007fbe <_printf_float+0x1ea>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	47b8      	blx	r7
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d12b      	bne.n	8008014 <_printf_float+0x240>
 8007fbc:	e767      	b.n	8007e8e <_printf_float+0xba>
 8007fbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007fc2:	f240 80dc 	bls.w	800817e <_printf_float+0x3aa>
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fce:	f7f8 fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d033      	beq.n	800803e <_printf_float+0x26a>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	4a41      	ldr	r2, [pc, #260]	; (80080e0 <_printf_float+0x30c>)
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b8      	blx	r7
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f43f af54 	beq.w	8007e8e <_printf_float+0xba>
 8007fe6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fea:	429a      	cmp	r2, r3
 8007fec:	db02      	blt.n	8007ff4 <_printf_float+0x220>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	07d8      	lsls	r0, r3, #31
 8007ff2:	d50f      	bpl.n	8008014 <_printf_float+0x240>
 8007ff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff8:	4631      	mov	r1, r6
 8007ffa:	4628      	mov	r0, r5
 8007ffc:	47b8      	blx	r7
 8007ffe:	3001      	adds	r0, #1
 8008000:	f43f af45 	beq.w	8007e8e <_printf_float+0xba>
 8008004:	f04f 0800 	mov.w	r8, #0
 8008008:	f104 091a 	add.w	r9, r4, #26
 800800c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800800e:	3b01      	subs	r3, #1
 8008010:	4543      	cmp	r3, r8
 8008012:	dc09      	bgt.n	8008028 <_printf_float+0x254>
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	079b      	lsls	r3, r3, #30
 8008018:	f100 8103 	bmi.w	8008222 <_printf_float+0x44e>
 800801c:	68e0      	ldr	r0, [r4, #12]
 800801e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008020:	4298      	cmp	r0, r3
 8008022:	bfb8      	it	lt
 8008024:	4618      	movlt	r0, r3
 8008026:	e734      	b.n	8007e92 <_printf_float+0xbe>
 8008028:	2301      	movs	r3, #1
 800802a:	464a      	mov	r2, r9
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	f43f af2b 	beq.w	8007e8e <_printf_float+0xba>
 8008038:	f108 0801 	add.w	r8, r8, #1
 800803c:	e7e6      	b.n	800800c <_printf_float+0x238>
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	2b00      	cmp	r3, #0
 8008042:	dc2b      	bgt.n	800809c <_printf_float+0x2c8>
 8008044:	2301      	movs	r3, #1
 8008046:	4a26      	ldr	r2, [pc, #152]	; (80080e0 <_printf_float+0x30c>)
 8008048:	4631      	mov	r1, r6
 800804a:	4628      	mov	r0, r5
 800804c:	47b8      	blx	r7
 800804e:	3001      	adds	r0, #1
 8008050:	f43f af1d 	beq.w	8007e8e <_printf_float+0xba>
 8008054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008056:	b923      	cbnz	r3, 8008062 <_printf_float+0x28e>
 8008058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800805a:	b913      	cbnz	r3, 8008062 <_printf_float+0x28e>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	07d9      	lsls	r1, r3, #31
 8008060:	d5d8      	bpl.n	8008014 <_printf_float+0x240>
 8008062:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008066:	4631      	mov	r1, r6
 8008068:	4628      	mov	r0, r5
 800806a:	47b8      	blx	r7
 800806c:	3001      	adds	r0, #1
 800806e:	f43f af0e 	beq.w	8007e8e <_printf_float+0xba>
 8008072:	f04f 0900 	mov.w	r9, #0
 8008076:	f104 0a1a 	add.w	sl, r4, #26
 800807a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807c:	425b      	negs	r3, r3
 800807e:	454b      	cmp	r3, r9
 8008080:	dc01      	bgt.n	8008086 <_printf_float+0x2b2>
 8008082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008084:	e794      	b.n	8007fb0 <_printf_float+0x1dc>
 8008086:	2301      	movs	r3, #1
 8008088:	4652      	mov	r2, sl
 800808a:	4631      	mov	r1, r6
 800808c:	4628      	mov	r0, r5
 800808e:	47b8      	blx	r7
 8008090:	3001      	adds	r0, #1
 8008092:	f43f aefc 	beq.w	8007e8e <_printf_float+0xba>
 8008096:	f109 0901 	add.w	r9, r9, #1
 800809a:	e7ee      	b.n	800807a <_printf_float+0x2a6>
 800809c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800809e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80080a0:	429a      	cmp	r2, r3
 80080a2:	bfa8      	it	ge
 80080a4:	461a      	movge	r2, r3
 80080a6:	2a00      	cmp	r2, #0
 80080a8:	4691      	mov	r9, r2
 80080aa:	dd07      	ble.n	80080bc <_printf_float+0x2e8>
 80080ac:	4613      	mov	r3, r2
 80080ae:	4631      	mov	r1, r6
 80080b0:	4642      	mov	r2, r8
 80080b2:	4628      	mov	r0, r5
 80080b4:	47b8      	blx	r7
 80080b6:	3001      	adds	r0, #1
 80080b8:	f43f aee9 	beq.w	8007e8e <_printf_float+0xba>
 80080bc:	f104 031a 	add.w	r3, r4, #26
 80080c0:	f04f 0b00 	mov.w	fp, #0
 80080c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080c8:	9306      	str	r3, [sp, #24]
 80080ca:	e015      	b.n	80080f8 <_printf_float+0x324>
 80080cc:	7fefffff 	.word	0x7fefffff
 80080d0:	0800b75c 	.word	0x0800b75c
 80080d4:	0800b758 	.word	0x0800b758
 80080d8:	0800b764 	.word	0x0800b764
 80080dc:	0800b760 	.word	0x0800b760
 80080e0:	0800b768 	.word	0x0800b768
 80080e4:	2301      	movs	r3, #1
 80080e6:	9a06      	ldr	r2, [sp, #24]
 80080e8:	4631      	mov	r1, r6
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b8      	blx	r7
 80080ee:	3001      	adds	r0, #1
 80080f0:	f43f aecd 	beq.w	8007e8e <_printf_float+0xba>
 80080f4:	f10b 0b01 	add.w	fp, fp, #1
 80080f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80080fc:	ebaa 0309 	sub.w	r3, sl, r9
 8008100:	455b      	cmp	r3, fp
 8008102:	dcef      	bgt.n	80080e4 <_printf_float+0x310>
 8008104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008108:	429a      	cmp	r2, r3
 800810a:	44d0      	add	r8, sl
 800810c:	db15      	blt.n	800813a <_printf_float+0x366>
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	07da      	lsls	r2, r3, #31
 8008112:	d412      	bmi.n	800813a <_printf_float+0x366>
 8008114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008116:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008118:	eba3 020a 	sub.w	r2, r3, sl
 800811c:	eba3 0a01 	sub.w	sl, r3, r1
 8008120:	4592      	cmp	sl, r2
 8008122:	bfa8      	it	ge
 8008124:	4692      	movge	sl, r2
 8008126:	f1ba 0f00 	cmp.w	sl, #0
 800812a:	dc0e      	bgt.n	800814a <_printf_float+0x376>
 800812c:	f04f 0800 	mov.w	r8, #0
 8008130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008134:	f104 091a 	add.w	r9, r4, #26
 8008138:	e019      	b.n	800816e <_printf_float+0x39a>
 800813a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	d1e5      	bne.n	8008114 <_printf_float+0x340>
 8008148:	e6a1      	b.n	8007e8e <_printf_float+0xba>
 800814a:	4653      	mov	r3, sl
 800814c:	4642      	mov	r2, r8
 800814e:	4631      	mov	r1, r6
 8008150:	4628      	mov	r0, r5
 8008152:	47b8      	blx	r7
 8008154:	3001      	adds	r0, #1
 8008156:	d1e9      	bne.n	800812c <_printf_float+0x358>
 8008158:	e699      	b.n	8007e8e <_printf_float+0xba>
 800815a:	2301      	movs	r3, #1
 800815c:	464a      	mov	r2, r9
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	f43f ae92 	beq.w	8007e8e <_printf_float+0xba>
 800816a:	f108 0801 	add.w	r8, r8, #1
 800816e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	eba3 030a 	sub.w	r3, r3, sl
 8008178:	4543      	cmp	r3, r8
 800817a:	dcee      	bgt.n	800815a <_printf_float+0x386>
 800817c:	e74a      	b.n	8008014 <_printf_float+0x240>
 800817e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008180:	2a01      	cmp	r2, #1
 8008182:	dc01      	bgt.n	8008188 <_printf_float+0x3b4>
 8008184:	07db      	lsls	r3, r3, #31
 8008186:	d53a      	bpl.n	80081fe <_printf_float+0x42a>
 8008188:	2301      	movs	r3, #1
 800818a:	4642      	mov	r2, r8
 800818c:	4631      	mov	r1, r6
 800818e:	4628      	mov	r0, r5
 8008190:	47b8      	blx	r7
 8008192:	3001      	adds	r0, #1
 8008194:	f43f ae7b 	beq.w	8007e8e <_printf_float+0xba>
 8008198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f108 0801 	add.w	r8, r8, #1
 80081a8:	f43f ae71 	beq.w	8007e8e <_printf_float+0xba>
 80081ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ae:	2200      	movs	r2, #0
 80081b0:	f103 3aff 	add.w	sl, r3, #4294967295
 80081b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80081b8:	2300      	movs	r3, #0
 80081ba:	f7f8 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 80081be:	b9c8      	cbnz	r0, 80081f4 <_printf_float+0x420>
 80081c0:	4653      	mov	r3, sl
 80081c2:	4642      	mov	r2, r8
 80081c4:	4631      	mov	r1, r6
 80081c6:	4628      	mov	r0, r5
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	d10e      	bne.n	80081ec <_printf_float+0x418>
 80081ce:	e65e      	b.n	8007e8e <_printf_float+0xba>
 80081d0:	2301      	movs	r3, #1
 80081d2:	4652      	mov	r2, sl
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f ae57 	beq.w	8007e8e <_printf_float+0xba>
 80081e0:	f108 0801 	add.w	r8, r8, #1
 80081e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e6:	3b01      	subs	r3, #1
 80081e8:	4543      	cmp	r3, r8
 80081ea:	dcf1      	bgt.n	80081d0 <_printf_float+0x3fc>
 80081ec:	464b      	mov	r3, r9
 80081ee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80081f2:	e6de      	b.n	8007fb2 <_printf_float+0x1de>
 80081f4:	f04f 0800 	mov.w	r8, #0
 80081f8:	f104 0a1a 	add.w	sl, r4, #26
 80081fc:	e7f2      	b.n	80081e4 <_printf_float+0x410>
 80081fe:	2301      	movs	r3, #1
 8008200:	e7df      	b.n	80081c2 <_printf_float+0x3ee>
 8008202:	2301      	movs	r3, #1
 8008204:	464a      	mov	r2, r9
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	f43f ae3e 	beq.w	8007e8e <_printf_float+0xba>
 8008212:	f108 0801 	add.w	r8, r8, #1
 8008216:	68e3      	ldr	r3, [r4, #12]
 8008218:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	4543      	cmp	r3, r8
 800821e:	dcf0      	bgt.n	8008202 <_printf_float+0x42e>
 8008220:	e6fc      	b.n	800801c <_printf_float+0x248>
 8008222:	f04f 0800 	mov.w	r8, #0
 8008226:	f104 0919 	add.w	r9, r4, #25
 800822a:	e7f4      	b.n	8008216 <_printf_float+0x442>
 800822c:	2900      	cmp	r1, #0
 800822e:	f43f ae8b 	beq.w	8007f48 <_printf_float+0x174>
 8008232:	2300      	movs	r3, #0
 8008234:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008238:	ab09      	add	r3, sp, #36	; 0x24
 800823a:	9300      	str	r3, [sp, #0]
 800823c:	ec49 8b10 	vmov	d0, r8, r9
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	f8cd a004 	str.w	sl, [sp, #4]
 8008246:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff fd2e 	bl	8007cac <__cvt>
 8008250:	4680      	mov	r8, r0
 8008252:	e648      	b.n	8007ee6 <_printf_float+0x112>

08008254 <_printf_common>:
 8008254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008258:	4691      	mov	r9, r2
 800825a:	461f      	mov	r7, r3
 800825c:	688a      	ldr	r2, [r1, #8]
 800825e:	690b      	ldr	r3, [r1, #16]
 8008260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008264:	4293      	cmp	r3, r2
 8008266:	bfb8      	it	lt
 8008268:	4613      	movlt	r3, r2
 800826a:	f8c9 3000 	str.w	r3, [r9]
 800826e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008272:	4606      	mov	r6, r0
 8008274:	460c      	mov	r4, r1
 8008276:	b112      	cbz	r2, 800827e <_printf_common+0x2a>
 8008278:	3301      	adds	r3, #1
 800827a:	f8c9 3000 	str.w	r3, [r9]
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	0699      	lsls	r1, r3, #26
 8008282:	bf42      	ittt	mi
 8008284:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008288:	3302      	addmi	r3, #2
 800828a:	f8c9 3000 	strmi.w	r3, [r9]
 800828e:	6825      	ldr	r5, [r4, #0]
 8008290:	f015 0506 	ands.w	r5, r5, #6
 8008294:	d107      	bne.n	80082a6 <_printf_common+0x52>
 8008296:	f104 0a19 	add.w	sl, r4, #25
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	f8d9 2000 	ldr.w	r2, [r9]
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	42ab      	cmp	r3, r5
 80082a4:	dc28      	bgt.n	80082f8 <_printf_common+0xa4>
 80082a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	3300      	adds	r3, #0
 80082ae:	bf18      	it	ne
 80082b0:	2301      	movne	r3, #1
 80082b2:	0692      	lsls	r2, r2, #26
 80082b4:	d42d      	bmi.n	8008312 <_printf_common+0xbe>
 80082b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082ba:	4639      	mov	r1, r7
 80082bc:	4630      	mov	r0, r6
 80082be:	47c0      	blx	r8
 80082c0:	3001      	adds	r0, #1
 80082c2:	d020      	beq.n	8008306 <_printf_common+0xb2>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	68e5      	ldr	r5, [r4, #12]
 80082c8:	f8d9 2000 	ldr.w	r2, [r9]
 80082cc:	f003 0306 	and.w	r3, r3, #6
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	bf08      	it	eq
 80082d4:	1aad      	subeq	r5, r5, r2
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	6922      	ldr	r2, [r4, #16]
 80082da:	bf0c      	ite	eq
 80082dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082e0:	2500      	movne	r5, #0
 80082e2:	4293      	cmp	r3, r2
 80082e4:	bfc4      	itt	gt
 80082e6:	1a9b      	subgt	r3, r3, r2
 80082e8:	18ed      	addgt	r5, r5, r3
 80082ea:	f04f 0900 	mov.w	r9, #0
 80082ee:	341a      	adds	r4, #26
 80082f0:	454d      	cmp	r5, r9
 80082f2:	d11a      	bne.n	800832a <_printf_common+0xd6>
 80082f4:	2000      	movs	r0, #0
 80082f6:	e008      	b.n	800830a <_printf_common+0xb6>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4652      	mov	r2, sl
 80082fc:	4639      	mov	r1, r7
 80082fe:	4630      	mov	r0, r6
 8008300:	47c0      	blx	r8
 8008302:	3001      	adds	r0, #1
 8008304:	d103      	bne.n	800830e <_printf_common+0xba>
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800830e:	3501      	adds	r5, #1
 8008310:	e7c3      	b.n	800829a <_printf_common+0x46>
 8008312:	18e1      	adds	r1, r4, r3
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	2030      	movs	r0, #48	; 0x30
 8008318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800831c:	4422      	add	r2, r4
 800831e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008326:	3302      	adds	r3, #2
 8008328:	e7c5      	b.n	80082b6 <_printf_common+0x62>
 800832a:	2301      	movs	r3, #1
 800832c:	4622      	mov	r2, r4
 800832e:	4639      	mov	r1, r7
 8008330:	4630      	mov	r0, r6
 8008332:	47c0      	blx	r8
 8008334:	3001      	adds	r0, #1
 8008336:	d0e6      	beq.n	8008306 <_printf_common+0xb2>
 8008338:	f109 0901 	add.w	r9, r9, #1
 800833c:	e7d8      	b.n	80082f0 <_printf_common+0x9c>
	...

08008340 <_printf_i>:
 8008340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008344:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008348:	460c      	mov	r4, r1
 800834a:	7e09      	ldrb	r1, [r1, #24]
 800834c:	b085      	sub	sp, #20
 800834e:	296e      	cmp	r1, #110	; 0x6e
 8008350:	4617      	mov	r7, r2
 8008352:	4606      	mov	r6, r0
 8008354:	4698      	mov	r8, r3
 8008356:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008358:	f000 80b3 	beq.w	80084c2 <_printf_i+0x182>
 800835c:	d822      	bhi.n	80083a4 <_printf_i+0x64>
 800835e:	2963      	cmp	r1, #99	; 0x63
 8008360:	d036      	beq.n	80083d0 <_printf_i+0x90>
 8008362:	d80a      	bhi.n	800837a <_printf_i+0x3a>
 8008364:	2900      	cmp	r1, #0
 8008366:	f000 80b9 	beq.w	80084dc <_printf_i+0x19c>
 800836a:	2958      	cmp	r1, #88	; 0x58
 800836c:	f000 8083 	beq.w	8008476 <_printf_i+0x136>
 8008370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008374:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008378:	e032      	b.n	80083e0 <_printf_i+0xa0>
 800837a:	2964      	cmp	r1, #100	; 0x64
 800837c:	d001      	beq.n	8008382 <_printf_i+0x42>
 800837e:	2969      	cmp	r1, #105	; 0x69
 8008380:	d1f6      	bne.n	8008370 <_printf_i+0x30>
 8008382:	6820      	ldr	r0, [r4, #0]
 8008384:	6813      	ldr	r3, [r2, #0]
 8008386:	0605      	lsls	r5, r0, #24
 8008388:	f103 0104 	add.w	r1, r3, #4
 800838c:	d52a      	bpl.n	80083e4 <_printf_i+0xa4>
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6011      	str	r1, [r2, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	da03      	bge.n	800839e <_printf_i+0x5e>
 8008396:	222d      	movs	r2, #45	; 0x2d
 8008398:	425b      	negs	r3, r3
 800839a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800839e:	486f      	ldr	r0, [pc, #444]	; (800855c <_printf_i+0x21c>)
 80083a0:	220a      	movs	r2, #10
 80083a2:	e039      	b.n	8008418 <_printf_i+0xd8>
 80083a4:	2973      	cmp	r1, #115	; 0x73
 80083a6:	f000 809d 	beq.w	80084e4 <_printf_i+0x1a4>
 80083aa:	d808      	bhi.n	80083be <_printf_i+0x7e>
 80083ac:	296f      	cmp	r1, #111	; 0x6f
 80083ae:	d020      	beq.n	80083f2 <_printf_i+0xb2>
 80083b0:	2970      	cmp	r1, #112	; 0x70
 80083b2:	d1dd      	bne.n	8008370 <_printf_i+0x30>
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	f043 0320 	orr.w	r3, r3, #32
 80083ba:	6023      	str	r3, [r4, #0]
 80083bc:	e003      	b.n	80083c6 <_printf_i+0x86>
 80083be:	2975      	cmp	r1, #117	; 0x75
 80083c0:	d017      	beq.n	80083f2 <_printf_i+0xb2>
 80083c2:	2978      	cmp	r1, #120	; 0x78
 80083c4:	d1d4      	bne.n	8008370 <_printf_i+0x30>
 80083c6:	2378      	movs	r3, #120	; 0x78
 80083c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083cc:	4864      	ldr	r0, [pc, #400]	; (8008560 <_printf_i+0x220>)
 80083ce:	e055      	b.n	800847c <_printf_i+0x13c>
 80083d0:	6813      	ldr	r3, [r2, #0]
 80083d2:	1d19      	adds	r1, r3, #4
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6011      	str	r1, [r2, #0]
 80083d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083e0:	2301      	movs	r3, #1
 80083e2:	e08c      	b.n	80084fe <_printf_i+0x1be>
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6011      	str	r1, [r2, #0]
 80083e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083ec:	bf18      	it	ne
 80083ee:	b21b      	sxthne	r3, r3
 80083f0:	e7cf      	b.n	8008392 <_printf_i+0x52>
 80083f2:	6813      	ldr	r3, [r2, #0]
 80083f4:	6825      	ldr	r5, [r4, #0]
 80083f6:	1d18      	adds	r0, r3, #4
 80083f8:	6010      	str	r0, [r2, #0]
 80083fa:	0628      	lsls	r0, r5, #24
 80083fc:	d501      	bpl.n	8008402 <_printf_i+0xc2>
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	e002      	b.n	8008408 <_printf_i+0xc8>
 8008402:	0668      	lsls	r0, r5, #25
 8008404:	d5fb      	bpl.n	80083fe <_printf_i+0xbe>
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	4854      	ldr	r0, [pc, #336]	; (800855c <_printf_i+0x21c>)
 800840a:	296f      	cmp	r1, #111	; 0x6f
 800840c:	bf14      	ite	ne
 800840e:	220a      	movne	r2, #10
 8008410:	2208      	moveq	r2, #8
 8008412:	2100      	movs	r1, #0
 8008414:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008418:	6865      	ldr	r5, [r4, #4]
 800841a:	60a5      	str	r5, [r4, #8]
 800841c:	2d00      	cmp	r5, #0
 800841e:	f2c0 8095 	blt.w	800854c <_printf_i+0x20c>
 8008422:	6821      	ldr	r1, [r4, #0]
 8008424:	f021 0104 	bic.w	r1, r1, #4
 8008428:	6021      	str	r1, [r4, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d13d      	bne.n	80084aa <_printf_i+0x16a>
 800842e:	2d00      	cmp	r5, #0
 8008430:	f040 808e 	bne.w	8008550 <_printf_i+0x210>
 8008434:	4665      	mov	r5, ip
 8008436:	2a08      	cmp	r2, #8
 8008438:	d10b      	bne.n	8008452 <_printf_i+0x112>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	07db      	lsls	r3, r3, #31
 800843e:	d508      	bpl.n	8008452 <_printf_i+0x112>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	429a      	cmp	r2, r3
 8008446:	bfde      	ittt	le
 8008448:	2330      	movle	r3, #48	; 0x30
 800844a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800844e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008452:	ebac 0305 	sub.w	r3, ip, r5
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	f8cd 8000 	str.w	r8, [sp]
 800845c:	463b      	mov	r3, r7
 800845e:	aa03      	add	r2, sp, #12
 8008460:	4621      	mov	r1, r4
 8008462:	4630      	mov	r0, r6
 8008464:	f7ff fef6 	bl	8008254 <_printf_common>
 8008468:	3001      	adds	r0, #1
 800846a:	d14d      	bne.n	8008508 <_printf_i+0x1c8>
 800846c:	f04f 30ff 	mov.w	r0, #4294967295
 8008470:	b005      	add	sp, #20
 8008472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008476:	4839      	ldr	r0, [pc, #228]	; (800855c <_printf_i+0x21c>)
 8008478:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800847c:	6813      	ldr	r3, [r2, #0]
 800847e:	6821      	ldr	r1, [r4, #0]
 8008480:	1d1d      	adds	r5, r3, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6015      	str	r5, [r2, #0]
 8008486:	060a      	lsls	r2, r1, #24
 8008488:	d50b      	bpl.n	80084a2 <_printf_i+0x162>
 800848a:	07ca      	lsls	r2, r1, #31
 800848c:	bf44      	itt	mi
 800848e:	f041 0120 	orrmi.w	r1, r1, #32
 8008492:	6021      	strmi	r1, [r4, #0]
 8008494:	b91b      	cbnz	r3, 800849e <_printf_i+0x15e>
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	f022 0220 	bic.w	r2, r2, #32
 800849c:	6022      	str	r2, [r4, #0]
 800849e:	2210      	movs	r2, #16
 80084a0:	e7b7      	b.n	8008412 <_printf_i+0xd2>
 80084a2:	064d      	lsls	r5, r1, #25
 80084a4:	bf48      	it	mi
 80084a6:	b29b      	uxthmi	r3, r3
 80084a8:	e7ef      	b.n	800848a <_printf_i+0x14a>
 80084aa:	4665      	mov	r5, ip
 80084ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80084b0:	fb02 3311 	mls	r3, r2, r1, r3
 80084b4:	5cc3      	ldrb	r3, [r0, r3]
 80084b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80084ba:	460b      	mov	r3, r1
 80084bc:	2900      	cmp	r1, #0
 80084be:	d1f5      	bne.n	80084ac <_printf_i+0x16c>
 80084c0:	e7b9      	b.n	8008436 <_printf_i+0xf6>
 80084c2:	6813      	ldr	r3, [r2, #0]
 80084c4:	6825      	ldr	r5, [r4, #0]
 80084c6:	6961      	ldr	r1, [r4, #20]
 80084c8:	1d18      	adds	r0, r3, #4
 80084ca:	6010      	str	r0, [r2, #0]
 80084cc:	0628      	lsls	r0, r5, #24
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	d501      	bpl.n	80084d6 <_printf_i+0x196>
 80084d2:	6019      	str	r1, [r3, #0]
 80084d4:	e002      	b.n	80084dc <_printf_i+0x19c>
 80084d6:	066a      	lsls	r2, r5, #25
 80084d8:	d5fb      	bpl.n	80084d2 <_printf_i+0x192>
 80084da:	8019      	strh	r1, [r3, #0]
 80084dc:	2300      	movs	r3, #0
 80084de:	6123      	str	r3, [r4, #16]
 80084e0:	4665      	mov	r5, ip
 80084e2:	e7b9      	b.n	8008458 <_printf_i+0x118>
 80084e4:	6813      	ldr	r3, [r2, #0]
 80084e6:	1d19      	adds	r1, r3, #4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	681d      	ldr	r5, [r3, #0]
 80084ec:	6862      	ldr	r2, [r4, #4]
 80084ee:	2100      	movs	r1, #0
 80084f0:	4628      	mov	r0, r5
 80084f2:	f7f7 fe75 	bl	80001e0 <memchr>
 80084f6:	b108      	cbz	r0, 80084fc <_printf_i+0x1bc>
 80084f8:	1b40      	subs	r0, r0, r5
 80084fa:	6060      	str	r0, [r4, #4]
 80084fc:	6863      	ldr	r3, [r4, #4]
 80084fe:	6123      	str	r3, [r4, #16]
 8008500:	2300      	movs	r3, #0
 8008502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008506:	e7a7      	b.n	8008458 <_printf_i+0x118>
 8008508:	6923      	ldr	r3, [r4, #16]
 800850a:	462a      	mov	r2, r5
 800850c:	4639      	mov	r1, r7
 800850e:	4630      	mov	r0, r6
 8008510:	47c0      	blx	r8
 8008512:	3001      	adds	r0, #1
 8008514:	d0aa      	beq.n	800846c <_printf_i+0x12c>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	079b      	lsls	r3, r3, #30
 800851a:	d413      	bmi.n	8008544 <_printf_i+0x204>
 800851c:	68e0      	ldr	r0, [r4, #12]
 800851e:	9b03      	ldr	r3, [sp, #12]
 8008520:	4298      	cmp	r0, r3
 8008522:	bfb8      	it	lt
 8008524:	4618      	movlt	r0, r3
 8008526:	e7a3      	b.n	8008470 <_printf_i+0x130>
 8008528:	2301      	movs	r3, #1
 800852a:	464a      	mov	r2, r9
 800852c:	4639      	mov	r1, r7
 800852e:	4630      	mov	r0, r6
 8008530:	47c0      	blx	r8
 8008532:	3001      	adds	r0, #1
 8008534:	d09a      	beq.n	800846c <_printf_i+0x12c>
 8008536:	3501      	adds	r5, #1
 8008538:	68e3      	ldr	r3, [r4, #12]
 800853a:	9a03      	ldr	r2, [sp, #12]
 800853c:	1a9b      	subs	r3, r3, r2
 800853e:	42ab      	cmp	r3, r5
 8008540:	dcf2      	bgt.n	8008528 <_printf_i+0x1e8>
 8008542:	e7eb      	b.n	800851c <_printf_i+0x1dc>
 8008544:	2500      	movs	r5, #0
 8008546:	f104 0919 	add.w	r9, r4, #25
 800854a:	e7f5      	b.n	8008538 <_printf_i+0x1f8>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1ac      	bne.n	80084aa <_printf_i+0x16a>
 8008550:	7803      	ldrb	r3, [r0, #0]
 8008552:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008556:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800855a:	e76c      	b.n	8008436 <_printf_i+0xf6>
 800855c:	0800b76a 	.word	0x0800b76a
 8008560:	0800b77b 	.word	0x0800b77b

08008564 <_scanf_float>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	469a      	mov	sl, r3
 800856a:	688b      	ldr	r3, [r1, #8]
 800856c:	4616      	mov	r6, r2
 800856e:	1e5a      	subs	r2, r3, #1
 8008570:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008574:	b087      	sub	sp, #28
 8008576:	bf83      	ittte	hi
 8008578:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800857c:	189b      	addhi	r3, r3, r2
 800857e:	9301      	strhi	r3, [sp, #4]
 8008580:	2300      	movls	r3, #0
 8008582:	bf86      	itte	hi
 8008584:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008588:	608b      	strhi	r3, [r1, #8]
 800858a:	9301      	strls	r3, [sp, #4]
 800858c:	680b      	ldr	r3, [r1, #0]
 800858e:	4688      	mov	r8, r1
 8008590:	f04f 0b00 	mov.w	fp, #0
 8008594:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008598:	f848 3b1c 	str.w	r3, [r8], #28
 800859c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80085a0:	4607      	mov	r7, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	4645      	mov	r5, r8
 80085a6:	465a      	mov	r2, fp
 80085a8:	46d9      	mov	r9, fp
 80085aa:	f8cd b008 	str.w	fp, [sp, #8]
 80085ae:	68a1      	ldr	r1, [r4, #8]
 80085b0:	b181      	cbz	r1, 80085d4 <_scanf_float+0x70>
 80085b2:	6833      	ldr	r3, [r6, #0]
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b49      	cmp	r3, #73	; 0x49
 80085b8:	d071      	beq.n	800869e <_scanf_float+0x13a>
 80085ba:	d84d      	bhi.n	8008658 <_scanf_float+0xf4>
 80085bc:	2b39      	cmp	r3, #57	; 0x39
 80085be:	d840      	bhi.n	8008642 <_scanf_float+0xde>
 80085c0:	2b31      	cmp	r3, #49	; 0x31
 80085c2:	f080 8088 	bcs.w	80086d6 <_scanf_float+0x172>
 80085c6:	2b2d      	cmp	r3, #45	; 0x2d
 80085c8:	f000 8090 	beq.w	80086ec <_scanf_float+0x188>
 80085cc:	d815      	bhi.n	80085fa <_scanf_float+0x96>
 80085ce:	2b2b      	cmp	r3, #43	; 0x2b
 80085d0:	f000 808c 	beq.w	80086ec <_scanf_float+0x188>
 80085d4:	f1b9 0f00 	cmp.w	r9, #0
 80085d8:	d003      	beq.n	80085e2 <_scanf_float+0x7e>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	3a01      	subs	r2, #1
 80085e4:	2a01      	cmp	r2, #1
 80085e6:	f200 80ea 	bhi.w	80087be <_scanf_float+0x25a>
 80085ea:	4545      	cmp	r5, r8
 80085ec:	f200 80dc 	bhi.w	80087a8 <_scanf_float+0x244>
 80085f0:	2601      	movs	r6, #1
 80085f2:	4630      	mov	r0, r6
 80085f4:	b007      	add	sp, #28
 80085f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085fa:	2b2e      	cmp	r3, #46	; 0x2e
 80085fc:	f000 809f 	beq.w	800873e <_scanf_float+0x1da>
 8008600:	2b30      	cmp	r3, #48	; 0x30
 8008602:	d1e7      	bne.n	80085d4 <_scanf_float+0x70>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	f410 7f80 	tst.w	r0, #256	; 0x100
 800860a:	d064      	beq.n	80086d6 <_scanf_float+0x172>
 800860c:	9b01      	ldr	r3, [sp, #4]
 800860e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	f109 0901 	add.w	r9, r9, #1
 8008618:	b11b      	cbz	r3, 8008622 <_scanf_float+0xbe>
 800861a:	3b01      	subs	r3, #1
 800861c:	3101      	adds	r1, #1
 800861e:	9301      	str	r3, [sp, #4]
 8008620:	60a1      	str	r1, [r4, #8]
 8008622:	68a3      	ldr	r3, [r4, #8]
 8008624:	3b01      	subs	r3, #1
 8008626:	60a3      	str	r3, [r4, #8]
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	3301      	adds	r3, #1
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	6873      	ldr	r3, [r6, #4]
 8008630:	3b01      	subs	r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	6073      	str	r3, [r6, #4]
 8008636:	f340 80ac 	ble.w	8008792 <_scanf_float+0x22e>
 800863a:	6833      	ldr	r3, [r6, #0]
 800863c:	3301      	adds	r3, #1
 800863e:	6033      	str	r3, [r6, #0]
 8008640:	e7b5      	b.n	80085ae <_scanf_float+0x4a>
 8008642:	2b45      	cmp	r3, #69	; 0x45
 8008644:	f000 8085 	beq.w	8008752 <_scanf_float+0x1ee>
 8008648:	2b46      	cmp	r3, #70	; 0x46
 800864a:	d06a      	beq.n	8008722 <_scanf_float+0x1be>
 800864c:	2b41      	cmp	r3, #65	; 0x41
 800864e:	d1c1      	bne.n	80085d4 <_scanf_float+0x70>
 8008650:	2a01      	cmp	r2, #1
 8008652:	d1bf      	bne.n	80085d4 <_scanf_float+0x70>
 8008654:	2202      	movs	r2, #2
 8008656:	e046      	b.n	80086e6 <_scanf_float+0x182>
 8008658:	2b65      	cmp	r3, #101	; 0x65
 800865a:	d07a      	beq.n	8008752 <_scanf_float+0x1ee>
 800865c:	d818      	bhi.n	8008690 <_scanf_float+0x12c>
 800865e:	2b54      	cmp	r3, #84	; 0x54
 8008660:	d066      	beq.n	8008730 <_scanf_float+0x1cc>
 8008662:	d811      	bhi.n	8008688 <_scanf_float+0x124>
 8008664:	2b4e      	cmp	r3, #78	; 0x4e
 8008666:	d1b5      	bne.n	80085d4 <_scanf_float+0x70>
 8008668:	2a00      	cmp	r2, #0
 800866a:	d146      	bne.n	80086fa <_scanf_float+0x196>
 800866c:	f1b9 0f00 	cmp.w	r9, #0
 8008670:	d145      	bne.n	80086fe <_scanf_float+0x19a>
 8008672:	6821      	ldr	r1, [r4, #0]
 8008674:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008678:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800867c:	d13f      	bne.n	80086fe <_scanf_float+0x19a>
 800867e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008682:	6021      	str	r1, [r4, #0]
 8008684:	2201      	movs	r2, #1
 8008686:	e02e      	b.n	80086e6 <_scanf_float+0x182>
 8008688:	2b59      	cmp	r3, #89	; 0x59
 800868a:	d01e      	beq.n	80086ca <_scanf_float+0x166>
 800868c:	2b61      	cmp	r3, #97	; 0x61
 800868e:	e7de      	b.n	800864e <_scanf_float+0xea>
 8008690:	2b6e      	cmp	r3, #110	; 0x6e
 8008692:	d0e9      	beq.n	8008668 <_scanf_float+0x104>
 8008694:	d815      	bhi.n	80086c2 <_scanf_float+0x15e>
 8008696:	2b66      	cmp	r3, #102	; 0x66
 8008698:	d043      	beq.n	8008722 <_scanf_float+0x1be>
 800869a:	2b69      	cmp	r3, #105	; 0x69
 800869c:	d19a      	bne.n	80085d4 <_scanf_float+0x70>
 800869e:	f1bb 0f00 	cmp.w	fp, #0
 80086a2:	d138      	bne.n	8008716 <_scanf_float+0x1b2>
 80086a4:	f1b9 0f00 	cmp.w	r9, #0
 80086a8:	d197      	bne.n	80085da <_scanf_float+0x76>
 80086aa:	6821      	ldr	r1, [r4, #0]
 80086ac:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80086b0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80086b4:	d195      	bne.n	80085e2 <_scanf_float+0x7e>
 80086b6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80086ba:	6021      	str	r1, [r4, #0]
 80086bc:	f04f 0b01 	mov.w	fp, #1
 80086c0:	e011      	b.n	80086e6 <_scanf_float+0x182>
 80086c2:	2b74      	cmp	r3, #116	; 0x74
 80086c4:	d034      	beq.n	8008730 <_scanf_float+0x1cc>
 80086c6:	2b79      	cmp	r3, #121	; 0x79
 80086c8:	d184      	bne.n	80085d4 <_scanf_float+0x70>
 80086ca:	f1bb 0f07 	cmp.w	fp, #7
 80086ce:	d181      	bne.n	80085d4 <_scanf_float+0x70>
 80086d0:	f04f 0b08 	mov.w	fp, #8
 80086d4:	e007      	b.n	80086e6 <_scanf_float+0x182>
 80086d6:	eb12 0f0b 	cmn.w	r2, fp
 80086da:	f47f af7b 	bne.w	80085d4 <_scanf_float+0x70>
 80086de:	6821      	ldr	r1, [r4, #0]
 80086e0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80086e4:	6021      	str	r1, [r4, #0]
 80086e6:	702b      	strb	r3, [r5, #0]
 80086e8:	3501      	adds	r5, #1
 80086ea:	e79a      	b.n	8008622 <_scanf_float+0xbe>
 80086ec:	6821      	ldr	r1, [r4, #0]
 80086ee:	0608      	lsls	r0, r1, #24
 80086f0:	f57f af70 	bpl.w	80085d4 <_scanf_float+0x70>
 80086f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80086f8:	e7f4      	b.n	80086e4 <_scanf_float+0x180>
 80086fa:	2a02      	cmp	r2, #2
 80086fc:	d047      	beq.n	800878e <_scanf_float+0x22a>
 80086fe:	f1bb 0f01 	cmp.w	fp, #1
 8008702:	d003      	beq.n	800870c <_scanf_float+0x1a8>
 8008704:	f1bb 0f04 	cmp.w	fp, #4
 8008708:	f47f af64 	bne.w	80085d4 <_scanf_float+0x70>
 800870c:	f10b 0b01 	add.w	fp, fp, #1
 8008710:	fa5f fb8b 	uxtb.w	fp, fp
 8008714:	e7e7      	b.n	80086e6 <_scanf_float+0x182>
 8008716:	f1bb 0f03 	cmp.w	fp, #3
 800871a:	d0f7      	beq.n	800870c <_scanf_float+0x1a8>
 800871c:	f1bb 0f05 	cmp.w	fp, #5
 8008720:	e7f2      	b.n	8008708 <_scanf_float+0x1a4>
 8008722:	f1bb 0f02 	cmp.w	fp, #2
 8008726:	f47f af55 	bne.w	80085d4 <_scanf_float+0x70>
 800872a:	f04f 0b03 	mov.w	fp, #3
 800872e:	e7da      	b.n	80086e6 <_scanf_float+0x182>
 8008730:	f1bb 0f06 	cmp.w	fp, #6
 8008734:	f47f af4e 	bne.w	80085d4 <_scanf_float+0x70>
 8008738:	f04f 0b07 	mov.w	fp, #7
 800873c:	e7d3      	b.n	80086e6 <_scanf_float+0x182>
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	0588      	lsls	r0, r1, #22
 8008742:	f57f af47 	bpl.w	80085d4 <_scanf_float+0x70>
 8008746:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800874a:	6021      	str	r1, [r4, #0]
 800874c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008750:	e7c9      	b.n	80086e6 <_scanf_float+0x182>
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008758:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800875c:	d006      	beq.n	800876c <_scanf_float+0x208>
 800875e:	0548      	lsls	r0, r1, #21
 8008760:	f57f af38 	bpl.w	80085d4 <_scanf_float+0x70>
 8008764:	f1b9 0f00 	cmp.w	r9, #0
 8008768:	f43f af3b 	beq.w	80085e2 <_scanf_float+0x7e>
 800876c:	0588      	lsls	r0, r1, #22
 800876e:	bf58      	it	pl
 8008770:	9802      	ldrpl	r0, [sp, #8]
 8008772:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008776:	bf58      	it	pl
 8008778:	eba9 0000 	subpl.w	r0, r9, r0
 800877c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008780:	bf58      	it	pl
 8008782:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008786:	6021      	str	r1, [r4, #0]
 8008788:	f04f 0900 	mov.w	r9, #0
 800878c:	e7ab      	b.n	80086e6 <_scanf_float+0x182>
 800878e:	2203      	movs	r2, #3
 8008790:	e7a9      	b.n	80086e6 <_scanf_float+0x182>
 8008792:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008796:	9205      	str	r2, [sp, #20]
 8008798:	4631      	mov	r1, r6
 800879a:	4638      	mov	r0, r7
 800879c:	4798      	blx	r3
 800879e:	9a05      	ldr	r2, [sp, #20]
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f43f af04 	beq.w	80085ae <_scanf_float+0x4a>
 80087a6:	e715      	b.n	80085d4 <_scanf_float+0x70>
 80087a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80087b0:	4632      	mov	r2, r6
 80087b2:	4638      	mov	r0, r7
 80087b4:	4798      	blx	r3
 80087b6:	6923      	ldr	r3, [r4, #16]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	e715      	b.n	80085ea <_scanf_float+0x86>
 80087be:	f10b 33ff 	add.w	r3, fp, #4294967295
 80087c2:	2b06      	cmp	r3, #6
 80087c4:	d80a      	bhi.n	80087dc <_scanf_float+0x278>
 80087c6:	f1bb 0f02 	cmp.w	fp, #2
 80087ca:	d968      	bls.n	800889e <_scanf_float+0x33a>
 80087cc:	f1ab 0b03 	sub.w	fp, fp, #3
 80087d0:	fa5f fb8b 	uxtb.w	fp, fp
 80087d4:	eba5 0b0b 	sub.w	fp, r5, fp
 80087d8:	455d      	cmp	r5, fp
 80087da:	d14b      	bne.n	8008874 <_scanf_float+0x310>
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	05da      	lsls	r2, r3, #23
 80087e0:	d51f      	bpl.n	8008822 <_scanf_float+0x2be>
 80087e2:	055b      	lsls	r3, r3, #21
 80087e4:	d468      	bmi.n	80088b8 <_scanf_float+0x354>
 80087e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	2965      	cmp	r1, #101	; 0x65
 80087ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80087f2:	f105 3bff 	add.w	fp, r5, #4294967295
 80087f6:	6123      	str	r3, [r4, #16]
 80087f8:	d00d      	beq.n	8008816 <_scanf_float+0x2b2>
 80087fa:	2945      	cmp	r1, #69	; 0x45
 80087fc:	d00b      	beq.n	8008816 <_scanf_float+0x2b2>
 80087fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008802:	4632      	mov	r2, r6
 8008804:	4638      	mov	r0, r7
 8008806:	4798      	blx	r3
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800880e:	3b01      	subs	r3, #1
 8008810:	f1a5 0b02 	sub.w	fp, r5, #2
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800881a:	4632      	mov	r2, r6
 800881c:	4638      	mov	r0, r7
 800881e:	4798      	blx	r3
 8008820:	465d      	mov	r5, fp
 8008822:	6826      	ldr	r6, [r4, #0]
 8008824:	f016 0610 	ands.w	r6, r6, #16
 8008828:	d17a      	bne.n	8008920 <_scanf_float+0x3bc>
 800882a:	702e      	strb	r6, [r5, #0]
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008836:	d142      	bne.n	80088be <_scanf_float+0x35a>
 8008838:	9b02      	ldr	r3, [sp, #8]
 800883a:	eba9 0303 	sub.w	r3, r9, r3
 800883e:	425a      	negs	r2, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d149      	bne.n	80088d8 <_scanf_float+0x374>
 8008844:	2200      	movs	r2, #0
 8008846:	4641      	mov	r1, r8
 8008848:	4638      	mov	r0, r7
 800884a:	f000 fea5 	bl	8009598 <_strtod_r>
 800884e:	6825      	ldr	r5, [r4, #0]
 8008850:	f8da 3000 	ldr.w	r3, [sl]
 8008854:	f015 0f02 	tst.w	r5, #2
 8008858:	f103 0204 	add.w	r2, r3, #4
 800885c:	ec59 8b10 	vmov	r8, r9, d0
 8008860:	f8ca 2000 	str.w	r2, [sl]
 8008864:	d043      	beq.n	80088ee <_scanf_float+0x38a>
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	e9c3 8900 	strd	r8, r9, [r3]
 800886c:	68e3      	ldr	r3, [r4, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60e3      	str	r3, [r4, #12]
 8008872:	e6be      	b.n	80085f2 <_scanf_float+0x8e>
 8008874:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008878:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800887c:	4632      	mov	r2, r6
 800887e:	4638      	mov	r0, r7
 8008880:	4798      	blx	r3
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	3b01      	subs	r3, #1
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	e7a6      	b.n	80087d8 <_scanf_float+0x274>
 800888a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800888e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008892:	4632      	mov	r2, r6
 8008894:	4638      	mov	r0, r7
 8008896:	4798      	blx	r3
 8008898:	6923      	ldr	r3, [r4, #16]
 800889a:	3b01      	subs	r3, #1
 800889c:	6123      	str	r3, [r4, #16]
 800889e:	4545      	cmp	r5, r8
 80088a0:	d8f3      	bhi.n	800888a <_scanf_float+0x326>
 80088a2:	e6a5      	b.n	80085f0 <_scanf_float+0x8c>
 80088a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80088a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80088ac:	4632      	mov	r2, r6
 80088ae:	4638      	mov	r0, r7
 80088b0:	4798      	blx	r3
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	6123      	str	r3, [r4, #16]
 80088b8:	4545      	cmp	r5, r8
 80088ba:	d8f3      	bhi.n	80088a4 <_scanf_float+0x340>
 80088bc:	e698      	b.n	80085f0 <_scanf_float+0x8c>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d0bf      	beq.n	8008844 <_scanf_float+0x2e0>
 80088c4:	9904      	ldr	r1, [sp, #16]
 80088c6:	230a      	movs	r3, #10
 80088c8:	4632      	mov	r2, r6
 80088ca:	3101      	adds	r1, #1
 80088cc:	4638      	mov	r0, r7
 80088ce:	f000 feef 	bl	80096b0 <_strtol_r>
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	9d04      	ldr	r5, [sp, #16]
 80088d6:	1ac2      	subs	r2, r0, r3
 80088d8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80088dc:	429d      	cmp	r5, r3
 80088de:	bf28      	it	cs
 80088e0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80088e4:	490f      	ldr	r1, [pc, #60]	; (8008924 <_scanf_float+0x3c0>)
 80088e6:	4628      	mov	r0, r5
 80088e8:	f000 f824 	bl	8008934 <siprintf>
 80088ec:	e7aa      	b.n	8008844 <_scanf_float+0x2e0>
 80088ee:	f015 0504 	ands.w	r5, r5, #4
 80088f2:	d1b8      	bne.n	8008866 <_scanf_float+0x302>
 80088f4:	681f      	ldr	r7, [r3, #0]
 80088f6:	ee10 2a10 	vmov	r2, s0
 80088fa:	464b      	mov	r3, r9
 80088fc:	ee10 0a10 	vmov	r0, s0
 8008900:	4649      	mov	r1, r9
 8008902:	f7f8 f913 	bl	8000b2c <__aeabi_dcmpun>
 8008906:	b128      	cbz	r0, 8008914 <_scanf_float+0x3b0>
 8008908:	4628      	mov	r0, r5
 800890a:	f000 f80d 	bl	8008928 <nanf>
 800890e:	ed87 0a00 	vstr	s0, [r7]
 8008912:	e7ab      	b.n	800886c <_scanf_float+0x308>
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f966 	bl	8000be8 <__aeabi_d2f>
 800891c:	6038      	str	r0, [r7, #0]
 800891e:	e7a5      	b.n	800886c <_scanf_float+0x308>
 8008920:	2600      	movs	r6, #0
 8008922:	e666      	b.n	80085f2 <_scanf_float+0x8e>
 8008924:	0800b78c 	.word	0x0800b78c

08008928 <nanf>:
 8008928:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008930 <nanf+0x8>
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	7fc00000 	.word	0x7fc00000

08008934 <siprintf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b500      	push	{lr}
 8008938:	b09c      	sub	sp, #112	; 0x70
 800893a:	ab1d      	add	r3, sp, #116	; 0x74
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9006      	str	r0, [sp, #24]
 8008940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <siprintf+0x38>)
 8008946:	9107      	str	r1, [sp, #28]
 8008948:	9104      	str	r1, [sp, #16]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <siprintf+0x3c>)
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	a902      	add	r1, sp, #8
 8008958:	f002 fd70 	bl	800b43c <_svfiprintf_r>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	2000003c 	.word	0x2000003c
 8008970:	ffff0208 	.word	0xffff0208

08008974 <sulp>:
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	ec45 4b10 	vmov	d0, r4, r5
 800897e:	4616      	mov	r6, r2
 8008980:	f002 fb18 	bl	800afb4 <__ulp>
 8008984:	ec51 0b10 	vmov	r0, r1, d0
 8008988:	b17e      	cbz	r6, 80089aa <sulp+0x36>
 800898a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800898e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd09      	ble.n	80089aa <sulp+0x36>
 8008996:	051b      	lsls	r3, r3, #20
 8008998:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800899c:	2400      	movs	r4, #0
 800899e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	0000      	movs	r0, r0
	...

080089b0 <_strtod_l>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	461f      	mov	r7, r3
 80089b6:	b0a1      	sub	sp, #132	; 0x84
 80089b8:	2300      	movs	r3, #0
 80089ba:	4681      	mov	r9, r0
 80089bc:	4638      	mov	r0, r7
 80089be:	460e      	mov	r6, r1
 80089c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80089c2:	931c      	str	r3, [sp, #112]	; 0x70
 80089c4:	f001 fff5 	bl	800a9b2 <__localeconv_l>
 80089c8:	4680      	mov	r8, r0
 80089ca:	6800      	ldr	r0, [r0, #0]
 80089cc:	f7f7 fc00 	bl	80001d0 <strlen>
 80089d0:	f04f 0a00 	mov.w	sl, #0
 80089d4:	4604      	mov	r4, r0
 80089d6:	f04f 0b00 	mov.w	fp, #0
 80089da:	961b      	str	r6, [sp, #108]	; 0x6c
 80089dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	2a0d      	cmp	r2, #13
 80089e2:	d832      	bhi.n	8008a4a <_strtod_l+0x9a>
 80089e4:	2a09      	cmp	r2, #9
 80089e6:	d236      	bcs.n	8008a56 <_strtod_l+0xa6>
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	d03e      	beq.n	8008a6a <_strtod_l+0xba>
 80089ec:	2300      	movs	r3, #0
 80089ee:	930d      	str	r3, [sp, #52]	; 0x34
 80089f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80089f2:	782b      	ldrb	r3, [r5, #0]
 80089f4:	2b30      	cmp	r3, #48	; 0x30
 80089f6:	f040 80ac 	bne.w	8008b52 <_strtod_l+0x1a2>
 80089fa:	786b      	ldrb	r3, [r5, #1]
 80089fc:	2b58      	cmp	r3, #88	; 0x58
 80089fe:	d001      	beq.n	8008a04 <_strtod_l+0x54>
 8008a00:	2b78      	cmp	r3, #120	; 0x78
 8008a02:	d167      	bne.n	8008ad4 <_strtod_l+0x124>
 8008a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	ab1c      	add	r3, sp, #112	; 0x70
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	9702      	str	r7, [sp, #8]
 8008a0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a10:	4a88      	ldr	r2, [pc, #544]	; (8008c34 <_strtod_l+0x284>)
 8008a12:	a91b      	add	r1, sp, #108	; 0x6c
 8008a14:	4648      	mov	r0, r9
 8008a16:	f001 fcf2 	bl	800a3fe <__gethex>
 8008a1a:	f010 0407 	ands.w	r4, r0, #7
 8008a1e:	4606      	mov	r6, r0
 8008a20:	d005      	beq.n	8008a2e <_strtod_l+0x7e>
 8008a22:	2c06      	cmp	r4, #6
 8008a24:	d12b      	bne.n	8008a7e <_strtod_l+0xce>
 8008a26:	3501      	adds	r5, #1
 8008a28:	2300      	movs	r3, #0
 8008a2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8008a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f040 859a 	bne.w	800956a <_strtod_l+0xbba>
 8008a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a38:	b1e3      	cbz	r3, 8008a74 <_strtod_l+0xc4>
 8008a3a:	4652      	mov	r2, sl
 8008a3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008a40:	ec43 2b10 	vmov	d0, r2, r3
 8008a44:	b021      	add	sp, #132	; 0x84
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	2a2b      	cmp	r2, #43	; 0x2b
 8008a4c:	d015      	beq.n	8008a7a <_strtod_l+0xca>
 8008a4e:	2a2d      	cmp	r2, #45	; 0x2d
 8008a50:	d004      	beq.n	8008a5c <_strtod_l+0xac>
 8008a52:	2a20      	cmp	r2, #32
 8008a54:	d1ca      	bne.n	80089ec <_strtod_l+0x3c>
 8008a56:	3301      	adds	r3, #1
 8008a58:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a5a:	e7bf      	b.n	80089dc <_strtod_l+0x2c>
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	920d      	str	r2, [sp, #52]	; 0x34
 8008a60:	1c5a      	adds	r2, r3, #1
 8008a62:	921b      	str	r2, [sp, #108]	; 0x6c
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1c2      	bne.n	80089f0 <_strtod_l+0x40>
 8008a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	f040 8579 	bne.w	8009566 <_strtod_l+0xbb6>
 8008a74:	4652      	mov	r2, sl
 8008a76:	465b      	mov	r3, fp
 8008a78:	e7e2      	b.n	8008a40 <_strtod_l+0x90>
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	e7ef      	b.n	8008a5e <_strtod_l+0xae>
 8008a7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008a80:	b13a      	cbz	r2, 8008a92 <_strtod_l+0xe2>
 8008a82:	2135      	movs	r1, #53	; 0x35
 8008a84:	a81e      	add	r0, sp, #120	; 0x78
 8008a86:	f002 fb8d 	bl	800b1a4 <__copybits>
 8008a8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008a8c:	4648      	mov	r0, r9
 8008a8e:	f001 fffa 	bl	800aa86 <_Bfree>
 8008a92:	3c01      	subs	r4, #1
 8008a94:	2c04      	cmp	r4, #4
 8008a96:	d806      	bhi.n	8008aa6 <_strtod_l+0xf6>
 8008a98:	e8df f004 	tbb	[pc, r4]
 8008a9c:	1714030a 	.word	0x1714030a
 8008aa0:	0a          	.byte	0x0a
 8008aa1:	00          	.byte	0x00
 8008aa2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008aa6:	0730      	lsls	r0, r6, #28
 8008aa8:	d5c1      	bpl.n	8008a2e <_strtod_l+0x7e>
 8008aaa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008aae:	e7be      	b.n	8008a2e <_strtod_l+0x7e>
 8008ab0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008ab4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008aba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008abe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ac2:	e7f0      	b.n	8008aa6 <_strtod_l+0xf6>
 8008ac4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008c38 <_strtod_l+0x288>
 8008ac8:	e7ed      	b.n	8008aa6 <_strtod_l+0xf6>
 8008aca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008ace:	f04f 3aff 	mov.w	sl, #4294967295
 8008ad2:	e7e8      	b.n	8008aa6 <_strtod_l+0xf6>
 8008ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b30      	cmp	r3, #48	; 0x30
 8008ade:	d0f9      	beq.n	8008ad4 <_strtod_l+0x124>
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d0a4      	beq.n	8008a2e <_strtod_l+0x7e>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	2500      	movs	r5, #0
 8008ae8:	9306      	str	r3, [sp, #24]
 8008aea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008aec:	9308      	str	r3, [sp, #32]
 8008aee:	9507      	str	r5, [sp, #28]
 8008af0:	9505      	str	r5, [sp, #20]
 8008af2:	220a      	movs	r2, #10
 8008af4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008af6:	7807      	ldrb	r7, [r0, #0]
 8008af8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008afc:	b2d9      	uxtb	r1, r3
 8008afe:	2909      	cmp	r1, #9
 8008b00:	d929      	bls.n	8008b56 <_strtod_l+0x1a6>
 8008b02:	4622      	mov	r2, r4
 8008b04:	f8d8 1000 	ldr.w	r1, [r8]
 8008b08:	f002 fda0 	bl	800b64c <strncmp>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d031      	beq.n	8008b74 <_strtod_l+0x1c4>
 8008b10:	2000      	movs	r0, #0
 8008b12:	9c05      	ldr	r4, [sp, #20]
 8008b14:	9004      	str	r0, [sp, #16]
 8008b16:	463b      	mov	r3, r7
 8008b18:	4602      	mov	r2, r0
 8008b1a:	2b65      	cmp	r3, #101	; 0x65
 8008b1c:	d001      	beq.n	8008b22 <_strtod_l+0x172>
 8008b1e:	2b45      	cmp	r3, #69	; 0x45
 8008b20:	d114      	bne.n	8008b4c <_strtod_l+0x19c>
 8008b22:	b924      	cbnz	r4, 8008b2e <_strtod_l+0x17e>
 8008b24:	b910      	cbnz	r0, 8008b2c <_strtod_l+0x17c>
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d09e      	beq.n	8008a6a <_strtod_l+0xba>
 8008b2c:	2400      	movs	r4, #0
 8008b2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008b30:	1c73      	adds	r3, r6, #1
 8008b32:	931b      	str	r3, [sp, #108]	; 0x6c
 8008b34:	7873      	ldrb	r3, [r6, #1]
 8008b36:	2b2b      	cmp	r3, #43	; 0x2b
 8008b38:	d078      	beq.n	8008c2c <_strtod_l+0x27c>
 8008b3a:	2b2d      	cmp	r3, #45	; 0x2d
 8008b3c:	d070      	beq.n	8008c20 <_strtod_l+0x270>
 8008b3e:	f04f 0c00 	mov.w	ip, #0
 8008b42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008b46:	2f09      	cmp	r7, #9
 8008b48:	d97c      	bls.n	8008c44 <_strtod_l+0x294>
 8008b4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8008b4c:	f04f 0e00 	mov.w	lr, #0
 8008b50:	e09a      	b.n	8008c88 <_strtod_l+0x2d8>
 8008b52:	2300      	movs	r3, #0
 8008b54:	e7c7      	b.n	8008ae6 <_strtod_l+0x136>
 8008b56:	9905      	ldr	r1, [sp, #20]
 8008b58:	2908      	cmp	r1, #8
 8008b5a:	bfdd      	ittte	le
 8008b5c:	9907      	ldrle	r1, [sp, #28]
 8008b5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008b62:	9307      	strle	r3, [sp, #28]
 8008b64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008b68:	9b05      	ldr	r3, [sp, #20]
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	9305      	str	r3, [sp, #20]
 8008b70:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b72:	e7bf      	b.n	8008af4 <_strtod_l+0x144>
 8008b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b76:	191a      	adds	r2, r3, r4
 8008b78:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b7a:	9a05      	ldr	r2, [sp, #20]
 8008b7c:	5d1b      	ldrb	r3, [r3, r4]
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	d037      	beq.n	8008bf2 <_strtod_l+0x242>
 8008b82:	9c05      	ldr	r4, [sp, #20]
 8008b84:	4602      	mov	r2, r0
 8008b86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008b8a:	2909      	cmp	r1, #9
 8008b8c:	d913      	bls.n	8008bb6 <_strtod_l+0x206>
 8008b8e:	2101      	movs	r1, #1
 8008b90:	9104      	str	r1, [sp, #16]
 8008b92:	e7c2      	b.n	8008b1a <_strtod_l+0x16a>
 8008b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8008b9a:	785b      	ldrb	r3, [r3, #1]
 8008b9c:	3001      	adds	r0, #1
 8008b9e:	2b30      	cmp	r3, #48	; 0x30
 8008ba0:	d0f8      	beq.n	8008b94 <_strtod_l+0x1e4>
 8008ba2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008ba6:	2a08      	cmp	r2, #8
 8008ba8:	f200 84e4 	bhi.w	8009574 <_strtod_l+0xbc4>
 8008bac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008bae:	9208      	str	r2, [sp, #32]
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008bba:	f100 0101 	add.w	r1, r0, #1
 8008bbe:	d012      	beq.n	8008be6 <_strtod_l+0x236>
 8008bc0:	440a      	add	r2, r1
 8008bc2:	eb00 0c04 	add.w	ip, r0, r4
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	270a      	movs	r7, #10
 8008bca:	458c      	cmp	ip, r1
 8008bcc:	d113      	bne.n	8008bf6 <_strtod_l+0x246>
 8008bce:	1821      	adds	r1, r4, r0
 8008bd0:	2908      	cmp	r1, #8
 8008bd2:	f104 0401 	add.w	r4, r4, #1
 8008bd6:	4404      	add	r4, r0
 8008bd8:	dc19      	bgt.n	8008c0e <_strtod_l+0x25e>
 8008bda:	9b07      	ldr	r3, [sp, #28]
 8008bdc:	210a      	movs	r1, #10
 8008bde:	fb01 e303 	mla	r3, r1, r3, lr
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	2100      	movs	r1, #0
 8008be6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008be8:	1c58      	adds	r0, r3, #1
 8008bea:	901b      	str	r0, [sp, #108]	; 0x6c
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	4608      	mov	r0, r1
 8008bf0:	e7c9      	b.n	8008b86 <_strtod_l+0x1d6>
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	e7d3      	b.n	8008b9e <_strtod_l+0x1ee>
 8008bf6:	2908      	cmp	r1, #8
 8008bf8:	f101 0101 	add.w	r1, r1, #1
 8008bfc:	dc03      	bgt.n	8008c06 <_strtod_l+0x256>
 8008bfe:	9b07      	ldr	r3, [sp, #28]
 8008c00:	437b      	muls	r3, r7
 8008c02:	9307      	str	r3, [sp, #28]
 8008c04:	e7e1      	b.n	8008bca <_strtod_l+0x21a>
 8008c06:	2910      	cmp	r1, #16
 8008c08:	bfd8      	it	le
 8008c0a:	437d      	mulle	r5, r7
 8008c0c:	e7dd      	b.n	8008bca <_strtod_l+0x21a>
 8008c0e:	2c10      	cmp	r4, #16
 8008c10:	bfdc      	itt	le
 8008c12:	210a      	movle	r1, #10
 8008c14:	fb01 e505 	mlale	r5, r1, r5, lr
 8008c18:	e7e4      	b.n	8008be4 <_strtod_l+0x234>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	e781      	b.n	8008b24 <_strtod_l+0x174>
 8008c20:	f04f 0c01 	mov.w	ip, #1
 8008c24:	1cb3      	adds	r3, r6, #2
 8008c26:	931b      	str	r3, [sp, #108]	; 0x6c
 8008c28:	78b3      	ldrb	r3, [r6, #2]
 8008c2a:	e78a      	b.n	8008b42 <_strtod_l+0x192>
 8008c2c:	f04f 0c00 	mov.w	ip, #0
 8008c30:	e7f8      	b.n	8008c24 <_strtod_l+0x274>
 8008c32:	bf00      	nop
 8008c34:	0800b794 	.word	0x0800b794
 8008c38:	7ff00000 	.word	0x7ff00000
 8008c3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c3e:	1c5f      	adds	r7, r3, #1
 8008c40:	971b      	str	r7, [sp, #108]	; 0x6c
 8008c42:	785b      	ldrb	r3, [r3, #1]
 8008c44:	2b30      	cmp	r3, #48	; 0x30
 8008c46:	d0f9      	beq.n	8008c3c <_strtod_l+0x28c>
 8008c48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008c4c:	2f08      	cmp	r7, #8
 8008c4e:	f63f af7d 	bhi.w	8008b4c <_strtod_l+0x19c>
 8008c52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008c56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c58:	930a      	str	r3, [sp, #40]	; 0x28
 8008c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008c5c:	1c5f      	adds	r7, r3, #1
 8008c5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008c66:	f1b8 0f09 	cmp.w	r8, #9
 8008c6a:	d937      	bls.n	8008cdc <_strtod_l+0x32c>
 8008c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c6e:	1a7f      	subs	r7, r7, r1
 8008c70:	2f08      	cmp	r7, #8
 8008c72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008c76:	dc37      	bgt.n	8008ce8 <_strtod_l+0x338>
 8008c78:	45be      	cmp	lr, r7
 8008c7a:	bfa8      	it	ge
 8008c7c:	46be      	movge	lr, r7
 8008c7e:	f1bc 0f00 	cmp.w	ip, #0
 8008c82:	d001      	beq.n	8008c88 <_strtod_l+0x2d8>
 8008c84:	f1ce 0e00 	rsb	lr, lr, #0
 8008c88:	2c00      	cmp	r4, #0
 8008c8a:	d151      	bne.n	8008d30 <_strtod_l+0x380>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	f47f aece 	bne.w	8008a2e <_strtod_l+0x7e>
 8008c92:	9a06      	ldr	r2, [sp, #24]
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	f47f aeca 	bne.w	8008a2e <_strtod_l+0x7e>
 8008c9a:	9a04      	ldr	r2, [sp, #16]
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	f47f aee4 	bne.w	8008a6a <_strtod_l+0xba>
 8008ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8008ca4:	d027      	beq.n	8008cf6 <_strtod_l+0x346>
 8008ca6:	dc21      	bgt.n	8008cec <_strtod_l+0x33c>
 8008ca8:	2b49      	cmp	r3, #73	; 0x49
 8008caa:	f47f aede 	bne.w	8008a6a <_strtod_l+0xba>
 8008cae:	49a0      	ldr	r1, [pc, #640]	; (8008f30 <_strtod_l+0x580>)
 8008cb0:	a81b      	add	r0, sp, #108	; 0x6c
 8008cb2:	f001 fdd7 	bl	800a864 <__match>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	f43f aed7 	beq.w	8008a6a <_strtod_l+0xba>
 8008cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cbe:	499d      	ldr	r1, [pc, #628]	; (8008f34 <_strtod_l+0x584>)
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	a81b      	add	r0, sp, #108	; 0x6c
 8008cc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cc6:	f001 fdcd 	bl	800a864 <__match>
 8008cca:	b910      	cbnz	r0, 8008cd2 <_strtod_l+0x322>
 8008ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cce:	3301      	adds	r3, #1
 8008cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8008cd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008f48 <_strtod_l+0x598>
 8008cd6:	f04f 0a00 	mov.w	sl, #0
 8008cda:	e6a8      	b.n	8008a2e <_strtod_l+0x7e>
 8008cdc:	210a      	movs	r1, #10
 8008cde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ce2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ce6:	e7b8      	b.n	8008c5a <_strtod_l+0x2aa>
 8008ce8:	46be      	mov	lr, r7
 8008cea:	e7c8      	b.n	8008c7e <_strtod_l+0x2ce>
 8008cec:	2b69      	cmp	r3, #105	; 0x69
 8008cee:	d0de      	beq.n	8008cae <_strtod_l+0x2fe>
 8008cf0:	2b6e      	cmp	r3, #110	; 0x6e
 8008cf2:	f47f aeba 	bne.w	8008a6a <_strtod_l+0xba>
 8008cf6:	4990      	ldr	r1, [pc, #576]	; (8008f38 <_strtod_l+0x588>)
 8008cf8:	a81b      	add	r0, sp, #108	; 0x6c
 8008cfa:	f001 fdb3 	bl	800a864 <__match>
 8008cfe:	2800      	cmp	r0, #0
 8008d00:	f43f aeb3 	beq.w	8008a6a <_strtod_l+0xba>
 8008d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b28      	cmp	r3, #40	; 0x28
 8008d0a:	d10e      	bne.n	8008d2a <_strtod_l+0x37a>
 8008d0c:	aa1e      	add	r2, sp, #120	; 0x78
 8008d0e:	498b      	ldr	r1, [pc, #556]	; (8008f3c <_strtod_l+0x58c>)
 8008d10:	a81b      	add	r0, sp, #108	; 0x6c
 8008d12:	f001 fdbb 	bl	800a88c <__hexnan>
 8008d16:	2805      	cmp	r0, #5
 8008d18:	d107      	bne.n	8008d2a <_strtod_l+0x37a>
 8008d1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008d20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008d24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008d28:	e681      	b.n	8008a2e <_strtod_l+0x7e>
 8008d2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008f50 <_strtod_l+0x5a0>
 8008d2e:	e7d2      	b.n	8008cd6 <_strtod_l+0x326>
 8008d30:	ebae 0302 	sub.w	r3, lr, r2
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	9807      	ldr	r0, [sp, #28]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	bf08      	it	eq
 8008d3e:	4623      	moveq	r3, r4
 8008d40:	2c10      	cmp	r4, #16
 8008d42:	9305      	str	r3, [sp, #20]
 8008d44:	46a0      	mov	r8, r4
 8008d46:	bfa8      	it	ge
 8008d48:	f04f 0810 	movge.w	r8, #16
 8008d4c:	f7f7 fbda 	bl	8000504 <__aeabi_ui2d>
 8008d50:	2c09      	cmp	r4, #9
 8008d52:	4682      	mov	sl, r0
 8008d54:	468b      	mov	fp, r1
 8008d56:	dc13      	bgt.n	8008d80 <_strtod_l+0x3d0>
 8008d58:	9b06      	ldr	r3, [sp, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f43f ae67 	beq.w	8008a2e <_strtod_l+0x7e>
 8008d60:	9b06      	ldr	r3, [sp, #24]
 8008d62:	dd7a      	ble.n	8008e5a <_strtod_l+0x4aa>
 8008d64:	2b16      	cmp	r3, #22
 8008d66:	dc61      	bgt.n	8008e2c <_strtod_l+0x47c>
 8008d68:	4a75      	ldr	r2, [pc, #468]	; (8008f40 <_strtod_l+0x590>)
 8008d6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008d6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008d72:	4652      	mov	r2, sl
 8008d74:	465b      	mov	r3, fp
 8008d76:	f7f7 fc3f 	bl	80005f8 <__aeabi_dmul>
 8008d7a:	4682      	mov	sl, r0
 8008d7c:	468b      	mov	fp, r1
 8008d7e:	e656      	b.n	8008a2e <_strtod_l+0x7e>
 8008d80:	4b6f      	ldr	r3, [pc, #444]	; (8008f40 <_strtod_l+0x590>)
 8008d82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008d86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	4628      	mov	r0, r5
 8008d92:	460f      	mov	r7, r1
 8008d94:	f7f7 fbb6 	bl	8000504 <__aeabi_ui2d>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	460b      	mov	r3, r1
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	4639      	mov	r1, r7
 8008da0:	f7f7 fa74 	bl	800028c <__adddf3>
 8008da4:	2c0f      	cmp	r4, #15
 8008da6:	4682      	mov	sl, r0
 8008da8:	468b      	mov	fp, r1
 8008daa:	ddd5      	ble.n	8008d58 <_strtod_l+0x3a8>
 8008dac:	9b06      	ldr	r3, [sp, #24]
 8008dae:	eba4 0808 	sub.w	r8, r4, r8
 8008db2:	4498      	add	r8, r3
 8008db4:	f1b8 0f00 	cmp.w	r8, #0
 8008db8:	f340 8096 	ble.w	8008ee8 <_strtod_l+0x538>
 8008dbc:	f018 030f 	ands.w	r3, r8, #15
 8008dc0:	d00a      	beq.n	8008dd8 <_strtod_l+0x428>
 8008dc2:	495f      	ldr	r1, [pc, #380]	; (8008f40 <_strtod_l+0x590>)
 8008dc4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dc8:	4652      	mov	r2, sl
 8008dca:	465b      	mov	r3, fp
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	f038 080f 	bics.w	r8, r8, #15
 8008ddc:	d073      	beq.n	8008ec6 <_strtod_l+0x516>
 8008dde:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008de2:	dd47      	ble.n	8008e74 <_strtod_l+0x4c4>
 8008de4:	2400      	movs	r4, #0
 8008de6:	46a0      	mov	r8, r4
 8008de8:	9407      	str	r4, [sp, #28]
 8008dea:	9405      	str	r4, [sp, #20]
 8008dec:	2322      	movs	r3, #34	; 0x22
 8008dee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008f48 <_strtod_l+0x598>
 8008df2:	f8c9 3000 	str.w	r3, [r9]
 8008df6:	f04f 0a00 	mov.w	sl, #0
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f43f ae16 	beq.w	8008a2e <_strtod_l+0x7e>
 8008e02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e04:	4648      	mov	r0, r9
 8008e06:	f001 fe3e 	bl	800aa86 <_Bfree>
 8008e0a:	9905      	ldr	r1, [sp, #20]
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	f001 fe3a 	bl	800aa86 <_Bfree>
 8008e12:	4641      	mov	r1, r8
 8008e14:	4648      	mov	r0, r9
 8008e16:	f001 fe36 	bl	800aa86 <_Bfree>
 8008e1a:	9907      	ldr	r1, [sp, #28]
 8008e1c:	4648      	mov	r0, r9
 8008e1e:	f001 fe32 	bl	800aa86 <_Bfree>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4648      	mov	r0, r9
 8008e26:	f001 fe2e 	bl	800aa86 <_Bfree>
 8008e2a:	e600      	b.n	8008a2e <_strtod_l+0x7e>
 8008e2c:	9a06      	ldr	r2, [sp, #24]
 8008e2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008e32:	4293      	cmp	r3, r2
 8008e34:	dbba      	blt.n	8008dac <_strtod_l+0x3fc>
 8008e36:	4d42      	ldr	r5, [pc, #264]	; (8008f40 <_strtod_l+0x590>)
 8008e38:	f1c4 040f 	rsb	r4, r4, #15
 8008e3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008e40:	4652      	mov	r2, sl
 8008e42:	465b      	mov	r3, fp
 8008e44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e48:	f7f7 fbd6 	bl	80005f8 <__aeabi_dmul>
 8008e4c:	9b06      	ldr	r3, [sp, #24]
 8008e4e:	1b1c      	subs	r4, r3, r4
 8008e50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008e54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e58:	e78d      	b.n	8008d76 <_strtod_l+0x3c6>
 8008e5a:	f113 0f16 	cmn.w	r3, #22
 8008e5e:	dba5      	blt.n	8008dac <_strtod_l+0x3fc>
 8008e60:	4a37      	ldr	r2, [pc, #220]	; (8008f40 <_strtod_l+0x590>)
 8008e62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008e66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	4659      	mov	r1, fp
 8008e6e:	f7f7 fced 	bl	800084c <__aeabi_ddiv>
 8008e72:	e782      	b.n	8008d7a <_strtod_l+0x3ca>
 8008e74:	2300      	movs	r3, #0
 8008e76:	4e33      	ldr	r6, [pc, #204]	; (8008f44 <_strtod_l+0x594>)
 8008e78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	4659      	mov	r1, fp
 8008e80:	461d      	mov	r5, r3
 8008e82:	f1b8 0f01 	cmp.w	r8, #1
 8008e86:	dc21      	bgt.n	8008ecc <_strtod_l+0x51c>
 8008e88:	b10b      	cbz	r3, 8008e8e <_strtod_l+0x4de>
 8008e8a:	4682      	mov	sl, r0
 8008e8c:	468b      	mov	fp, r1
 8008e8e:	4b2d      	ldr	r3, [pc, #180]	; (8008f44 <_strtod_l+0x594>)
 8008e90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008e98:	4652      	mov	r2, sl
 8008e9a:	465b      	mov	r3, fp
 8008e9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008ea0:	f7f7 fbaa 	bl	80005f8 <__aeabi_dmul>
 8008ea4:	4b28      	ldr	r3, [pc, #160]	; (8008f48 <_strtod_l+0x598>)
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	400b      	ands	r3, r1
 8008eaa:	4928      	ldr	r1, [pc, #160]	; (8008f4c <_strtod_l+0x59c>)
 8008eac:	428b      	cmp	r3, r1
 8008eae:	4682      	mov	sl, r0
 8008eb0:	d898      	bhi.n	8008de4 <_strtod_l+0x434>
 8008eb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008eb6:	428b      	cmp	r3, r1
 8008eb8:	bf86      	itte	hi
 8008eba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008f54 <_strtod_l+0x5a4>
 8008ebe:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ec2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	e077      	b.n	8008fbc <_strtod_l+0x60c>
 8008ecc:	f018 0f01 	tst.w	r8, #1
 8008ed0:	d006      	beq.n	8008ee0 <_strtod_l+0x530>
 8008ed2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 fb8d 	bl	80005f8 <__aeabi_dmul>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008ee6:	e7cc      	b.n	8008e82 <_strtod_l+0x4d2>
 8008ee8:	d0ed      	beq.n	8008ec6 <_strtod_l+0x516>
 8008eea:	f1c8 0800 	rsb	r8, r8, #0
 8008eee:	f018 020f 	ands.w	r2, r8, #15
 8008ef2:	d00a      	beq.n	8008f0a <_strtod_l+0x55a>
 8008ef4:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <_strtod_l+0x590>)
 8008ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008efa:	4650      	mov	r0, sl
 8008efc:	4659      	mov	r1, fp
 8008efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f02:	f7f7 fca3 	bl	800084c <__aeabi_ddiv>
 8008f06:	4682      	mov	sl, r0
 8008f08:	468b      	mov	fp, r1
 8008f0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008f0e:	d0da      	beq.n	8008ec6 <_strtod_l+0x516>
 8008f10:	f1b8 0f1f 	cmp.w	r8, #31
 8008f14:	dd20      	ble.n	8008f58 <_strtod_l+0x5a8>
 8008f16:	2400      	movs	r4, #0
 8008f18:	46a0      	mov	r8, r4
 8008f1a:	9407      	str	r4, [sp, #28]
 8008f1c:	9405      	str	r4, [sp, #20]
 8008f1e:	2322      	movs	r3, #34	; 0x22
 8008f20:	f04f 0a00 	mov.w	sl, #0
 8008f24:	f04f 0b00 	mov.w	fp, #0
 8008f28:	f8c9 3000 	str.w	r3, [r9]
 8008f2c:	e765      	b.n	8008dfa <_strtod_l+0x44a>
 8008f2e:	bf00      	nop
 8008f30:	0800b75d 	.word	0x0800b75d
 8008f34:	0800b7eb 	.word	0x0800b7eb
 8008f38:	0800b765 	.word	0x0800b765
 8008f3c:	0800b7a8 	.word	0x0800b7a8
 8008f40:	0800b828 	.word	0x0800b828
 8008f44:	0800b800 	.word	0x0800b800
 8008f48:	7ff00000 	.word	0x7ff00000
 8008f4c:	7ca00000 	.word	0x7ca00000
 8008f50:	fff80000 	.word	0xfff80000
 8008f54:	7fefffff 	.word	0x7fefffff
 8008f58:	f018 0310 	ands.w	r3, r8, #16
 8008f5c:	bf18      	it	ne
 8008f5e:	236a      	movne	r3, #106	; 0x6a
 8008f60:	4da0      	ldr	r5, [pc, #640]	; (80091e4 <_strtod_l+0x834>)
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	4650      	mov	r0, sl
 8008f66:	4659      	mov	r1, fp
 8008f68:	2300      	movs	r3, #0
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	f300 810a 	bgt.w	8009186 <_strtod_l+0x7d6>
 8008f72:	b10b      	cbz	r3, 8008f78 <_strtod_l+0x5c8>
 8008f74:	4682      	mov	sl, r0
 8008f76:	468b      	mov	fp, r1
 8008f78:	9b04      	ldr	r3, [sp, #16]
 8008f7a:	b1bb      	cbz	r3, 8008fac <_strtod_l+0x5fc>
 8008f7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	4659      	mov	r1, fp
 8008f88:	dd10      	ble.n	8008fac <_strtod_l+0x5fc>
 8008f8a:	2b1f      	cmp	r3, #31
 8008f8c:	f340 8107 	ble.w	800919e <_strtod_l+0x7ee>
 8008f90:	2b34      	cmp	r3, #52	; 0x34
 8008f92:	bfde      	ittt	le
 8008f94:	3b20      	suble	r3, #32
 8008f96:	f04f 32ff 	movle.w	r2, #4294967295
 8008f9a:	fa02 f303 	lslle.w	r3, r2, r3
 8008f9e:	f04f 0a00 	mov.w	sl, #0
 8008fa2:	bfcc      	ite	gt
 8008fa4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008fa8:	ea03 0b01 	andle.w	fp, r3, r1
 8008fac:	2200      	movs	r2, #0
 8008fae:	2300      	movs	r3, #0
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	f7f7 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d1ac      	bne.n	8008f16 <_strtod_l+0x566>
 8008fbc:	9b07      	ldr	r3, [sp, #28]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	9a05      	ldr	r2, [sp, #20]
 8008fc2:	9908      	ldr	r1, [sp, #32]
 8008fc4:	4623      	mov	r3, r4
 8008fc6:	4648      	mov	r0, r9
 8008fc8:	f001 fdaf 	bl	800ab2a <__s2b>
 8008fcc:	9007      	str	r0, [sp, #28]
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f af08 	beq.w	8008de4 <_strtod_l+0x434>
 8008fd4:	9a06      	ldr	r2, [sp, #24]
 8008fd6:	9b06      	ldr	r3, [sp, #24]
 8008fd8:	2a00      	cmp	r2, #0
 8008fda:	f1c3 0300 	rsb	r3, r3, #0
 8008fde:	bfa8      	it	ge
 8008fe0:	2300      	movge	r3, #0
 8008fe2:	930e      	str	r3, [sp, #56]	; 0x38
 8008fe4:	2400      	movs	r4, #0
 8008fe6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008fea:	9316      	str	r3, [sp, #88]	; 0x58
 8008fec:	46a0      	mov	r8, r4
 8008fee:	9b07      	ldr	r3, [sp, #28]
 8008ff0:	4648      	mov	r0, r9
 8008ff2:	6859      	ldr	r1, [r3, #4]
 8008ff4:	f001 fd13 	bl	800aa1e <_Balloc>
 8008ff8:	9005      	str	r0, [sp, #20]
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	f43f aef6 	beq.w	8008dec <_strtod_l+0x43c>
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	691a      	ldr	r2, [r3, #16]
 8009004:	3202      	adds	r2, #2
 8009006:	f103 010c 	add.w	r1, r3, #12
 800900a:	0092      	lsls	r2, r2, #2
 800900c:	300c      	adds	r0, #12
 800900e:	f001 fcfb 	bl	800aa08 <memcpy>
 8009012:	aa1e      	add	r2, sp, #120	; 0x78
 8009014:	a91d      	add	r1, sp, #116	; 0x74
 8009016:	ec4b ab10 	vmov	d0, sl, fp
 800901a:	4648      	mov	r0, r9
 800901c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009020:	f002 f83e 	bl	800b0a0 <__d2b>
 8009024:	901c      	str	r0, [sp, #112]	; 0x70
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f aee0 	beq.w	8008dec <_strtod_l+0x43c>
 800902c:	2101      	movs	r1, #1
 800902e:	4648      	mov	r0, r9
 8009030:	f001 fe07 	bl	800ac42 <__i2b>
 8009034:	4680      	mov	r8, r0
 8009036:	2800      	cmp	r0, #0
 8009038:	f43f aed8 	beq.w	8008dec <_strtod_l+0x43c>
 800903c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800903e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009040:	2e00      	cmp	r6, #0
 8009042:	bfab      	itete	ge
 8009044:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009046:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009048:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800904a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800904c:	bfac      	ite	ge
 800904e:	18f7      	addge	r7, r6, r3
 8009050:	1b9d      	sublt	r5, r3, r6
 8009052:	9b04      	ldr	r3, [sp, #16]
 8009054:	1af6      	subs	r6, r6, r3
 8009056:	4416      	add	r6, r2
 8009058:	4b63      	ldr	r3, [pc, #396]	; (80091e8 <_strtod_l+0x838>)
 800905a:	3e01      	subs	r6, #1
 800905c:	429e      	cmp	r6, r3
 800905e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009062:	f280 80af 	bge.w	80091c4 <_strtod_l+0x814>
 8009066:	1b9b      	subs	r3, r3, r6
 8009068:	2b1f      	cmp	r3, #31
 800906a:	eba2 0203 	sub.w	r2, r2, r3
 800906e:	f04f 0101 	mov.w	r1, #1
 8009072:	f300 809b 	bgt.w	80091ac <_strtod_l+0x7fc>
 8009076:	fa01 f303 	lsl.w	r3, r1, r3
 800907a:	930f      	str	r3, [sp, #60]	; 0x3c
 800907c:	2300      	movs	r3, #0
 800907e:	930a      	str	r3, [sp, #40]	; 0x28
 8009080:	18be      	adds	r6, r7, r2
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	42b7      	cmp	r7, r6
 8009086:	4415      	add	r5, r2
 8009088:	441d      	add	r5, r3
 800908a:	463b      	mov	r3, r7
 800908c:	bfa8      	it	ge
 800908e:	4633      	movge	r3, r6
 8009090:	42ab      	cmp	r3, r5
 8009092:	bfa8      	it	ge
 8009094:	462b      	movge	r3, r5
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfc2      	ittt	gt
 800909a:	1af6      	subgt	r6, r6, r3
 800909c:	1aed      	subgt	r5, r5, r3
 800909e:	1aff      	subgt	r7, r7, r3
 80090a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090a2:	b1bb      	cbz	r3, 80090d4 <_strtod_l+0x724>
 80090a4:	4641      	mov	r1, r8
 80090a6:	461a      	mov	r2, r3
 80090a8:	4648      	mov	r0, r9
 80090aa:	f001 fe69 	bl	800ad80 <__pow5mult>
 80090ae:	4680      	mov	r8, r0
 80090b0:	2800      	cmp	r0, #0
 80090b2:	f43f ae9b 	beq.w	8008dec <_strtod_l+0x43c>
 80090b6:	4601      	mov	r1, r0
 80090b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80090ba:	4648      	mov	r0, r9
 80090bc:	f001 fdca 	bl	800ac54 <__multiply>
 80090c0:	900c      	str	r0, [sp, #48]	; 0x30
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f43f ae92 	beq.w	8008dec <_strtod_l+0x43c>
 80090c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80090ca:	4648      	mov	r0, r9
 80090cc:	f001 fcdb 	bl	800aa86 <_Bfree>
 80090d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090d2:	931c      	str	r3, [sp, #112]	; 0x70
 80090d4:	2e00      	cmp	r6, #0
 80090d6:	dc7a      	bgt.n	80091ce <_strtod_l+0x81e>
 80090d8:	9b06      	ldr	r3, [sp, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd08      	ble.n	80090f0 <_strtod_l+0x740>
 80090de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80090e0:	9905      	ldr	r1, [sp, #20]
 80090e2:	4648      	mov	r0, r9
 80090e4:	f001 fe4c 	bl	800ad80 <__pow5mult>
 80090e8:	9005      	str	r0, [sp, #20]
 80090ea:	2800      	cmp	r0, #0
 80090ec:	f43f ae7e 	beq.w	8008dec <_strtod_l+0x43c>
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	dd08      	ble.n	8009106 <_strtod_l+0x756>
 80090f4:	462a      	mov	r2, r5
 80090f6:	9905      	ldr	r1, [sp, #20]
 80090f8:	4648      	mov	r0, r9
 80090fa:	f001 fe8f 	bl	800ae1c <__lshift>
 80090fe:	9005      	str	r0, [sp, #20]
 8009100:	2800      	cmp	r0, #0
 8009102:	f43f ae73 	beq.w	8008dec <_strtod_l+0x43c>
 8009106:	2f00      	cmp	r7, #0
 8009108:	dd08      	ble.n	800911c <_strtod_l+0x76c>
 800910a:	4641      	mov	r1, r8
 800910c:	463a      	mov	r2, r7
 800910e:	4648      	mov	r0, r9
 8009110:	f001 fe84 	bl	800ae1c <__lshift>
 8009114:	4680      	mov	r8, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	f43f ae68 	beq.w	8008dec <_strtod_l+0x43c>
 800911c:	9a05      	ldr	r2, [sp, #20]
 800911e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009120:	4648      	mov	r0, r9
 8009122:	f001 fee9 	bl	800aef8 <__mdiff>
 8009126:	4604      	mov	r4, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f ae5f 	beq.w	8008dec <_strtod_l+0x43c>
 800912e:	68c3      	ldr	r3, [r0, #12]
 8009130:	930c      	str	r3, [sp, #48]	; 0x30
 8009132:	2300      	movs	r3, #0
 8009134:	60c3      	str	r3, [r0, #12]
 8009136:	4641      	mov	r1, r8
 8009138:	f001 fec4 	bl	800aec4 <__mcmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	da55      	bge.n	80091ec <_strtod_l+0x83c>
 8009140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009142:	b9e3      	cbnz	r3, 800917e <_strtod_l+0x7ce>
 8009144:	f1ba 0f00 	cmp.w	sl, #0
 8009148:	d119      	bne.n	800917e <_strtod_l+0x7ce>
 800914a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800914e:	b9b3      	cbnz	r3, 800917e <_strtod_l+0x7ce>
 8009150:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009154:	0d1b      	lsrs	r3, r3, #20
 8009156:	051b      	lsls	r3, r3, #20
 8009158:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800915c:	d90f      	bls.n	800917e <_strtod_l+0x7ce>
 800915e:	6963      	ldr	r3, [r4, #20]
 8009160:	b913      	cbnz	r3, 8009168 <_strtod_l+0x7b8>
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	2b01      	cmp	r3, #1
 8009166:	dd0a      	ble.n	800917e <_strtod_l+0x7ce>
 8009168:	4621      	mov	r1, r4
 800916a:	2201      	movs	r2, #1
 800916c:	4648      	mov	r0, r9
 800916e:	f001 fe55 	bl	800ae1c <__lshift>
 8009172:	4641      	mov	r1, r8
 8009174:	4604      	mov	r4, r0
 8009176:	f001 fea5 	bl	800aec4 <__mcmp>
 800917a:	2800      	cmp	r0, #0
 800917c:	dc67      	bgt.n	800924e <_strtod_l+0x89e>
 800917e:	9b04      	ldr	r3, [sp, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d171      	bne.n	8009268 <_strtod_l+0x8b8>
 8009184:	e63d      	b.n	8008e02 <_strtod_l+0x452>
 8009186:	f018 0f01 	tst.w	r8, #1
 800918a:	d004      	beq.n	8009196 <_strtod_l+0x7e6>
 800918c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009190:	f7f7 fa32 	bl	80005f8 <__aeabi_dmul>
 8009194:	2301      	movs	r3, #1
 8009196:	ea4f 0868 	mov.w	r8, r8, asr #1
 800919a:	3508      	adds	r5, #8
 800919c:	e6e5      	b.n	8008f6a <_strtod_l+0x5ba>
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	fa02 f303 	lsl.w	r3, r2, r3
 80091a6:	ea03 0a0a 	and.w	sl, r3, sl
 80091aa:	e6ff      	b.n	8008fac <_strtod_l+0x5fc>
 80091ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80091b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80091b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80091b8:	36e2      	adds	r6, #226	; 0xe2
 80091ba:	fa01 f306 	lsl.w	r3, r1, r6
 80091be:	930a      	str	r3, [sp, #40]	; 0x28
 80091c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80091c2:	e75d      	b.n	8009080 <_strtod_l+0x6d0>
 80091c4:	2300      	movs	r3, #0
 80091c6:	930a      	str	r3, [sp, #40]	; 0x28
 80091c8:	2301      	movs	r3, #1
 80091ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80091cc:	e758      	b.n	8009080 <_strtod_l+0x6d0>
 80091ce:	4632      	mov	r2, r6
 80091d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091d2:	4648      	mov	r0, r9
 80091d4:	f001 fe22 	bl	800ae1c <__lshift>
 80091d8:	901c      	str	r0, [sp, #112]	; 0x70
 80091da:	2800      	cmp	r0, #0
 80091dc:	f47f af7c 	bne.w	80090d8 <_strtod_l+0x728>
 80091e0:	e604      	b.n	8008dec <_strtod_l+0x43c>
 80091e2:	bf00      	nop
 80091e4:	0800b7c0 	.word	0x0800b7c0
 80091e8:	fffffc02 	.word	0xfffffc02
 80091ec:	465d      	mov	r5, fp
 80091ee:	f040 8086 	bne.w	80092fe <_strtod_l+0x94e>
 80091f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f8:	b32a      	cbz	r2, 8009246 <_strtod_l+0x896>
 80091fa:	4aaf      	ldr	r2, [pc, #700]	; (80094b8 <_strtod_l+0xb08>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d153      	bne.n	80092a8 <_strtod_l+0x8f8>
 8009200:	9b04      	ldr	r3, [sp, #16]
 8009202:	4650      	mov	r0, sl
 8009204:	b1d3      	cbz	r3, 800923c <_strtod_l+0x88c>
 8009206:	4aad      	ldr	r2, [pc, #692]	; (80094bc <_strtod_l+0xb0c>)
 8009208:	402a      	ands	r2, r5
 800920a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800920e:	f04f 31ff 	mov.w	r1, #4294967295
 8009212:	d816      	bhi.n	8009242 <_strtod_l+0x892>
 8009214:	0d12      	lsrs	r2, r2, #20
 8009216:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800921a:	fa01 f303 	lsl.w	r3, r1, r3
 800921e:	4298      	cmp	r0, r3
 8009220:	d142      	bne.n	80092a8 <_strtod_l+0x8f8>
 8009222:	4ba7      	ldr	r3, [pc, #668]	; (80094c0 <_strtod_l+0xb10>)
 8009224:	429d      	cmp	r5, r3
 8009226:	d102      	bne.n	800922e <_strtod_l+0x87e>
 8009228:	3001      	adds	r0, #1
 800922a:	f43f addf 	beq.w	8008dec <_strtod_l+0x43c>
 800922e:	4ba3      	ldr	r3, [pc, #652]	; (80094bc <_strtod_l+0xb0c>)
 8009230:	402b      	ands	r3, r5
 8009232:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009236:	f04f 0a00 	mov.w	sl, #0
 800923a:	e7a0      	b.n	800917e <_strtod_l+0x7ce>
 800923c:	f04f 33ff 	mov.w	r3, #4294967295
 8009240:	e7ed      	b.n	800921e <_strtod_l+0x86e>
 8009242:	460b      	mov	r3, r1
 8009244:	e7eb      	b.n	800921e <_strtod_l+0x86e>
 8009246:	bb7b      	cbnz	r3, 80092a8 <_strtod_l+0x8f8>
 8009248:	f1ba 0f00 	cmp.w	sl, #0
 800924c:	d12c      	bne.n	80092a8 <_strtod_l+0x8f8>
 800924e:	9904      	ldr	r1, [sp, #16]
 8009250:	4a9a      	ldr	r2, [pc, #616]	; (80094bc <_strtod_l+0xb0c>)
 8009252:	465b      	mov	r3, fp
 8009254:	b1f1      	cbz	r1, 8009294 <_strtod_l+0x8e4>
 8009256:	ea02 010b 	and.w	r1, r2, fp
 800925a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800925e:	dc19      	bgt.n	8009294 <_strtod_l+0x8e4>
 8009260:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009264:	f77f ae5b 	ble.w	8008f1e <_strtod_l+0x56e>
 8009268:	4a96      	ldr	r2, [pc, #600]	; (80094c4 <_strtod_l+0xb14>)
 800926a:	2300      	movs	r3, #0
 800926c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009270:	4650      	mov	r0, sl
 8009272:	4659      	mov	r1, fp
 8009274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009278:	f7f7 f9be 	bl	80005f8 <__aeabi_dmul>
 800927c:	4682      	mov	sl, r0
 800927e:	468b      	mov	fp, r1
 8009280:	2900      	cmp	r1, #0
 8009282:	f47f adbe 	bne.w	8008e02 <_strtod_l+0x452>
 8009286:	2800      	cmp	r0, #0
 8009288:	f47f adbb 	bne.w	8008e02 <_strtod_l+0x452>
 800928c:	2322      	movs	r3, #34	; 0x22
 800928e:	f8c9 3000 	str.w	r3, [r9]
 8009292:	e5b6      	b.n	8008e02 <_strtod_l+0x452>
 8009294:	4013      	ands	r3, r2
 8009296:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800929a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800929e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80092a2:	f04f 3aff 	mov.w	sl, #4294967295
 80092a6:	e76a      	b.n	800917e <_strtod_l+0x7ce>
 80092a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092aa:	b193      	cbz	r3, 80092d2 <_strtod_l+0x922>
 80092ac:	422b      	tst	r3, r5
 80092ae:	f43f af66 	beq.w	800917e <_strtod_l+0x7ce>
 80092b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092b4:	9a04      	ldr	r2, [sp, #16]
 80092b6:	4650      	mov	r0, sl
 80092b8:	4659      	mov	r1, fp
 80092ba:	b173      	cbz	r3, 80092da <_strtod_l+0x92a>
 80092bc:	f7ff fb5a 	bl	8008974 <sulp>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092c8:	f7f6 ffe0 	bl	800028c <__adddf3>
 80092cc:	4682      	mov	sl, r0
 80092ce:	468b      	mov	fp, r1
 80092d0:	e755      	b.n	800917e <_strtod_l+0x7ce>
 80092d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092d4:	ea13 0f0a 	tst.w	r3, sl
 80092d8:	e7e9      	b.n	80092ae <_strtod_l+0x8fe>
 80092da:	f7ff fb4b 	bl	8008974 <sulp>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092e6:	f7f6 ffcf 	bl	8000288 <__aeabi_dsub>
 80092ea:	2200      	movs	r2, #0
 80092ec:	2300      	movs	r3, #0
 80092ee:	4682      	mov	sl, r0
 80092f0:	468b      	mov	fp, r1
 80092f2:	f7f7 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f47f ae11 	bne.w	8008f1e <_strtod_l+0x56e>
 80092fc:	e73f      	b.n	800917e <_strtod_l+0x7ce>
 80092fe:	4641      	mov	r1, r8
 8009300:	4620      	mov	r0, r4
 8009302:	f001 ff1c 	bl	800b13e <__ratio>
 8009306:	ec57 6b10 	vmov	r6, r7, d0
 800930a:	2200      	movs	r2, #0
 800930c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009310:	ee10 0a10 	vmov	r0, s0
 8009314:	4639      	mov	r1, r7
 8009316:	f7f7 fbeb 	bl	8000af0 <__aeabi_dcmple>
 800931a:	2800      	cmp	r0, #0
 800931c:	d077      	beq.n	800940e <_strtod_l+0xa5e>
 800931e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009320:	2b00      	cmp	r3, #0
 8009322:	d04a      	beq.n	80093ba <_strtod_l+0xa0a>
 8009324:	4b68      	ldr	r3, [pc, #416]	; (80094c8 <_strtod_l+0xb18>)
 8009326:	2200      	movs	r2, #0
 8009328:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800932c:	4f66      	ldr	r7, [pc, #408]	; (80094c8 <_strtod_l+0xb18>)
 800932e:	2600      	movs	r6, #0
 8009330:	4b62      	ldr	r3, [pc, #392]	; (80094bc <_strtod_l+0xb0c>)
 8009332:	402b      	ands	r3, r5
 8009334:	930f      	str	r3, [sp, #60]	; 0x3c
 8009336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009338:	4b64      	ldr	r3, [pc, #400]	; (80094cc <_strtod_l+0xb1c>)
 800933a:	429a      	cmp	r2, r3
 800933c:	f040 80ce 	bne.w	80094dc <_strtod_l+0xb2c>
 8009340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009344:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009348:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800934c:	ec4b ab10 	vmov	d0, sl, fp
 8009350:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009354:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009358:	f001 fe2c 	bl	800afb4 <__ulp>
 800935c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009360:	ec53 2b10 	vmov	r2, r3, d0
 8009364:	f7f7 f948 	bl	80005f8 <__aeabi_dmul>
 8009368:	4652      	mov	r2, sl
 800936a:	465b      	mov	r3, fp
 800936c:	f7f6 ff8e 	bl	800028c <__adddf3>
 8009370:	460b      	mov	r3, r1
 8009372:	4952      	ldr	r1, [pc, #328]	; (80094bc <_strtod_l+0xb0c>)
 8009374:	4a56      	ldr	r2, [pc, #344]	; (80094d0 <_strtod_l+0xb20>)
 8009376:	4019      	ands	r1, r3
 8009378:	4291      	cmp	r1, r2
 800937a:	4682      	mov	sl, r0
 800937c:	d95b      	bls.n	8009436 <_strtod_l+0xa86>
 800937e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009380:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009384:	4293      	cmp	r3, r2
 8009386:	d103      	bne.n	8009390 <_strtod_l+0x9e0>
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	3301      	adds	r3, #1
 800938c:	f43f ad2e 	beq.w	8008dec <_strtod_l+0x43c>
 8009390:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80094c0 <_strtod_l+0xb10>
 8009394:	f04f 3aff 	mov.w	sl, #4294967295
 8009398:	991c      	ldr	r1, [sp, #112]	; 0x70
 800939a:	4648      	mov	r0, r9
 800939c:	f001 fb73 	bl	800aa86 <_Bfree>
 80093a0:	9905      	ldr	r1, [sp, #20]
 80093a2:	4648      	mov	r0, r9
 80093a4:	f001 fb6f 	bl	800aa86 <_Bfree>
 80093a8:	4641      	mov	r1, r8
 80093aa:	4648      	mov	r0, r9
 80093ac:	f001 fb6b 	bl	800aa86 <_Bfree>
 80093b0:	4621      	mov	r1, r4
 80093b2:	4648      	mov	r0, r9
 80093b4:	f001 fb67 	bl	800aa86 <_Bfree>
 80093b8:	e619      	b.n	8008fee <_strtod_l+0x63e>
 80093ba:	f1ba 0f00 	cmp.w	sl, #0
 80093be:	d11a      	bne.n	80093f6 <_strtod_l+0xa46>
 80093c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093c4:	b9eb      	cbnz	r3, 8009402 <_strtod_l+0xa52>
 80093c6:	2200      	movs	r2, #0
 80093c8:	4b3f      	ldr	r3, [pc, #252]	; (80094c8 <_strtod_l+0xb18>)
 80093ca:	4630      	mov	r0, r6
 80093cc:	4639      	mov	r1, r7
 80093ce:	f7f7 fb85 	bl	8000adc <__aeabi_dcmplt>
 80093d2:	b9c8      	cbnz	r0, 8009408 <_strtod_l+0xa58>
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	2200      	movs	r2, #0
 80093da:	4b3e      	ldr	r3, [pc, #248]	; (80094d4 <_strtod_l+0xb24>)
 80093dc:	f7f7 f90c 	bl	80005f8 <__aeabi_dmul>
 80093e0:	4606      	mov	r6, r0
 80093e2:	460f      	mov	r7, r1
 80093e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80093e8:	9618      	str	r6, [sp, #96]	; 0x60
 80093ea:	9319      	str	r3, [sp, #100]	; 0x64
 80093ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80093f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093f4:	e79c      	b.n	8009330 <_strtod_l+0x980>
 80093f6:	f1ba 0f01 	cmp.w	sl, #1
 80093fa:	d102      	bne.n	8009402 <_strtod_l+0xa52>
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	f43f ad8e 	beq.w	8008f1e <_strtod_l+0x56e>
 8009402:	2200      	movs	r2, #0
 8009404:	4b34      	ldr	r3, [pc, #208]	; (80094d8 <_strtod_l+0xb28>)
 8009406:	e78f      	b.n	8009328 <_strtod_l+0x978>
 8009408:	2600      	movs	r6, #0
 800940a:	4f32      	ldr	r7, [pc, #200]	; (80094d4 <_strtod_l+0xb24>)
 800940c:	e7ea      	b.n	80093e4 <_strtod_l+0xa34>
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <_strtod_l+0xb24>)
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	2200      	movs	r2, #0
 8009416:	f7f7 f8ef 	bl	80005f8 <__aeabi_dmul>
 800941a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800941c:	4606      	mov	r6, r0
 800941e:	460f      	mov	r7, r1
 8009420:	b933      	cbnz	r3, 8009430 <_strtod_l+0xa80>
 8009422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009426:	9010      	str	r0, [sp, #64]	; 0x40
 8009428:	9311      	str	r3, [sp, #68]	; 0x44
 800942a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800942e:	e7df      	b.n	80093f0 <_strtod_l+0xa40>
 8009430:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009434:	e7f9      	b.n	800942a <_strtod_l+0xa7a>
 8009436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1ab      	bne.n	8009398 <_strtod_l+0x9e8>
 8009440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009444:	0d1b      	lsrs	r3, r3, #20
 8009446:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009448:	051b      	lsls	r3, r3, #20
 800944a:	429a      	cmp	r2, r3
 800944c:	465d      	mov	r5, fp
 800944e:	d1a3      	bne.n	8009398 <_strtod_l+0x9e8>
 8009450:	4639      	mov	r1, r7
 8009452:	4630      	mov	r0, r6
 8009454:	f7f7 fb80 	bl	8000b58 <__aeabi_d2iz>
 8009458:	f7f7 f864 	bl	8000524 <__aeabi_i2d>
 800945c:	460b      	mov	r3, r1
 800945e:	4602      	mov	r2, r0
 8009460:	4639      	mov	r1, r7
 8009462:	4630      	mov	r0, r6
 8009464:	f7f6 ff10 	bl	8000288 <__aeabi_dsub>
 8009468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	b933      	cbnz	r3, 800947e <_strtod_l+0xace>
 8009470:	f1ba 0f00 	cmp.w	sl, #0
 8009474:	d103      	bne.n	800947e <_strtod_l+0xace>
 8009476:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800947a:	2d00      	cmp	r5, #0
 800947c:	d06d      	beq.n	800955a <_strtod_l+0xbaa>
 800947e:	a30a      	add	r3, pc, #40	; (adr r3, 80094a8 <_strtod_l+0xaf8>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	4630      	mov	r0, r6
 8009486:	4639      	mov	r1, r7
 8009488:	f7f7 fb28 	bl	8000adc <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	f47f acb8 	bne.w	8008e02 <_strtod_l+0x452>
 8009492:	a307      	add	r3, pc, #28	; (adr r3, 80094b0 <_strtod_l+0xb00>)
 8009494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009498:	4630      	mov	r0, r6
 800949a:	4639      	mov	r1, r7
 800949c:	f7f7 fb3c 	bl	8000b18 <__aeabi_dcmpgt>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	f43f af79 	beq.w	8009398 <_strtod_l+0x9e8>
 80094a6:	e4ac      	b.n	8008e02 <_strtod_l+0x452>
 80094a8:	94a03595 	.word	0x94a03595
 80094ac:	3fdfffff 	.word	0x3fdfffff
 80094b0:	35afe535 	.word	0x35afe535
 80094b4:	3fe00000 	.word	0x3fe00000
 80094b8:	000fffff 	.word	0x000fffff
 80094bc:	7ff00000 	.word	0x7ff00000
 80094c0:	7fefffff 	.word	0x7fefffff
 80094c4:	39500000 	.word	0x39500000
 80094c8:	3ff00000 	.word	0x3ff00000
 80094cc:	7fe00000 	.word	0x7fe00000
 80094d0:	7c9fffff 	.word	0x7c9fffff
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	bff00000 	.word	0xbff00000
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	b333      	cbz	r3, 800952e <_strtod_l+0xb7e>
 80094e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80094e6:	d822      	bhi.n	800952e <_strtod_l+0xb7e>
 80094e8:	a327      	add	r3, pc, #156	; (adr r3, 8009588 <_strtod_l+0xbd8>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	4630      	mov	r0, r6
 80094f0:	4639      	mov	r1, r7
 80094f2:	f7f7 fafd 	bl	8000af0 <__aeabi_dcmple>
 80094f6:	b1a0      	cbz	r0, 8009522 <_strtod_l+0xb72>
 80094f8:	4639      	mov	r1, r7
 80094fa:	4630      	mov	r0, r6
 80094fc:	f7f7 fb54 	bl	8000ba8 <__aeabi_d2uiz>
 8009500:	2800      	cmp	r0, #0
 8009502:	bf08      	it	eq
 8009504:	2001      	moveq	r0, #1
 8009506:	f7f6 fffd 	bl	8000504 <__aeabi_ui2d>
 800950a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800950c:	4606      	mov	r6, r0
 800950e:	460f      	mov	r7, r1
 8009510:	bb03      	cbnz	r3, 8009554 <_strtod_l+0xba4>
 8009512:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009516:	9012      	str	r0, [sp, #72]	; 0x48
 8009518:	9313      	str	r3, [sp, #76]	; 0x4c
 800951a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800951e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009526:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	930b      	str	r3, [sp, #44]	; 0x2c
 800952e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009532:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009536:	f001 fd3d 	bl	800afb4 <__ulp>
 800953a:	4650      	mov	r0, sl
 800953c:	ec53 2b10 	vmov	r2, r3, d0
 8009540:	4659      	mov	r1, fp
 8009542:	f7f7 f859 	bl	80005f8 <__aeabi_dmul>
 8009546:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800954a:	f7f6 fe9f 	bl	800028c <__adddf3>
 800954e:	4682      	mov	sl, r0
 8009550:	468b      	mov	fp, r1
 8009552:	e772      	b.n	800943a <_strtod_l+0xa8a>
 8009554:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009558:	e7df      	b.n	800951a <_strtod_l+0xb6a>
 800955a:	a30d      	add	r3, pc, #52	; (adr r3, 8009590 <_strtod_l+0xbe0>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f7 fabc 	bl	8000adc <__aeabi_dcmplt>
 8009564:	e79c      	b.n	80094a0 <_strtod_l+0xaf0>
 8009566:	2300      	movs	r3, #0
 8009568:	930d      	str	r3, [sp, #52]	; 0x34
 800956a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800956c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800956e:	6013      	str	r3, [r2, #0]
 8009570:	f7ff ba61 	b.w	8008a36 <_strtod_l+0x86>
 8009574:	2b65      	cmp	r3, #101	; 0x65
 8009576:	f04f 0200 	mov.w	r2, #0
 800957a:	f43f ab4e 	beq.w	8008c1a <_strtod_l+0x26a>
 800957e:	2101      	movs	r1, #1
 8009580:	4614      	mov	r4, r2
 8009582:	9104      	str	r1, [sp, #16]
 8009584:	f7ff bacb 	b.w	8008b1e <_strtod_l+0x16e>
 8009588:	ffc00000 	.word	0xffc00000
 800958c:	41dfffff 	.word	0x41dfffff
 8009590:	94a03595 	.word	0x94a03595
 8009594:	3fcfffff 	.word	0x3fcfffff

08009598 <_strtod_r>:
 8009598:	4b05      	ldr	r3, [pc, #20]	; (80095b0 <_strtod_r+0x18>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	b410      	push	{r4}
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	4c04      	ldr	r4, [pc, #16]	; (80095b4 <_strtod_r+0x1c>)
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bf08      	it	eq
 80095a6:	4623      	moveq	r3, r4
 80095a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095ac:	f7ff ba00 	b.w	80089b0 <_strtod_l>
 80095b0:	2000003c 	.word	0x2000003c
 80095b4:	200000a0 	.word	0x200000a0

080095b8 <_strtol_l.isra.0>:
 80095b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	4680      	mov	r8, r0
 80095be:	4689      	mov	r9, r1
 80095c0:	4692      	mov	sl, r2
 80095c2:	461e      	mov	r6, r3
 80095c4:	460f      	mov	r7, r1
 80095c6:	463d      	mov	r5, r7
 80095c8:	9808      	ldr	r0, [sp, #32]
 80095ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095ce:	f001 f9ed 	bl	800a9ac <__locale_ctype_ptr_l>
 80095d2:	4420      	add	r0, r4
 80095d4:	7843      	ldrb	r3, [r0, #1]
 80095d6:	f013 0308 	ands.w	r3, r3, #8
 80095da:	d132      	bne.n	8009642 <_strtol_l.isra.0+0x8a>
 80095dc:	2c2d      	cmp	r4, #45	; 0x2d
 80095de:	d132      	bne.n	8009646 <_strtol_l.isra.0+0x8e>
 80095e0:	787c      	ldrb	r4, [r7, #1]
 80095e2:	1cbd      	adds	r5, r7, #2
 80095e4:	2201      	movs	r2, #1
 80095e6:	2e00      	cmp	r6, #0
 80095e8:	d05d      	beq.n	80096a6 <_strtol_l.isra.0+0xee>
 80095ea:	2e10      	cmp	r6, #16
 80095ec:	d109      	bne.n	8009602 <_strtol_l.isra.0+0x4a>
 80095ee:	2c30      	cmp	r4, #48	; 0x30
 80095f0:	d107      	bne.n	8009602 <_strtol_l.isra.0+0x4a>
 80095f2:	782b      	ldrb	r3, [r5, #0]
 80095f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095f8:	2b58      	cmp	r3, #88	; 0x58
 80095fa:	d14f      	bne.n	800969c <_strtol_l.isra.0+0xe4>
 80095fc:	786c      	ldrb	r4, [r5, #1]
 80095fe:	2610      	movs	r6, #16
 8009600:	3502      	adds	r5, #2
 8009602:	2a00      	cmp	r2, #0
 8009604:	bf14      	ite	ne
 8009606:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800960a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800960e:	2700      	movs	r7, #0
 8009610:	fbb1 fcf6 	udiv	ip, r1, r6
 8009614:	4638      	mov	r0, r7
 8009616:	fb06 1e1c 	mls	lr, r6, ip, r1
 800961a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800961e:	2b09      	cmp	r3, #9
 8009620:	d817      	bhi.n	8009652 <_strtol_l.isra.0+0x9a>
 8009622:	461c      	mov	r4, r3
 8009624:	42a6      	cmp	r6, r4
 8009626:	dd23      	ble.n	8009670 <_strtol_l.isra.0+0xb8>
 8009628:	1c7b      	adds	r3, r7, #1
 800962a:	d007      	beq.n	800963c <_strtol_l.isra.0+0x84>
 800962c:	4584      	cmp	ip, r0
 800962e:	d31c      	bcc.n	800966a <_strtol_l.isra.0+0xb2>
 8009630:	d101      	bne.n	8009636 <_strtol_l.isra.0+0x7e>
 8009632:	45a6      	cmp	lr, r4
 8009634:	db19      	blt.n	800966a <_strtol_l.isra.0+0xb2>
 8009636:	fb00 4006 	mla	r0, r0, r6, r4
 800963a:	2701      	movs	r7, #1
 800963c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009640:	e7eb      	b.n	800961a <_strtol_l.isra.0+0x62>
 8009642:	462f      	mov	r7, r5
 8009644:	e7bf      	b.n	80095c6 <_strtol_l.isra.0+0xe>
 8009646:	2c2b      	cmp	r4, #43	; 0x2b
 8009648:	bf04      	itt	eq
 800964a:	1cbd      	addeq	r5, r7, #2
 800964c:	787c      	ldrbeq	r4, [r7, #1]
 800964e:	461a      	mov	r2, r3
 8009650:	e7c9      	b.n	80095e6 <_strtol_l.isra.0+0x2e>
 8009652:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009656:	2b19      	cmp	r3, #25
 8009658:	d801      	bhi.n	800965e <_strtol_l.isra.0+0xa6>
 800965a:	3c37      	subs	r4, #55	; 0x37
 800965c:	e7e2      	b.n	8009624 <_strtol_l.isra.0+0x6c>
 800965e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009662:	2b19      	cmp	r3, #25
 8009664:	d804      	bhi.n	8009670 <_strtol_l.isra.0+0xb8>
 8009666:	3c57      	subs	r4, #87	; 0x57
 8009668:	e7dc      	b.n	8009624 <_strtol_l.isra.0+0x6c>
 800966a:	f04f 37ff 	mov.w	r7, #4294967295
 800966e:	e7e5      	b.n	800963c <_strtol_l.isra.0+0x84>
 8009670:	1c7b      	adds	r3, r7, #1
 8009672:	d108      	bne.n	8009686 <_strtol_l.isra.0+0xce>
 8009674:	2322      	movs	r3, #34	; 0x22
 8009676:	f8c8 3000 	str.w	r3, [r8]
 800967a:	4608      	mov	r0, r1
 800967c:	f1ba 0f00 	cmp.w	sl, #0
 8009680:	d107      	bne.n	8009692 <_strtol_l.isra.0+0xda>
 8009682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009686:	b102      	cbz	r2, 800968a <_strtol_l.isra.0+0xd2>
 8009688:	4240      	negs	r0, r0
 800968a:	f1ba 0f00 	cmp.w	sl, #0
 800968e:	d0f8      	beq.n	8009682 <_strtol_l.isra.0+0xca>
 8009690:	b10f      	cbz	r7, 8009696 <_strtol_l.isra.0+0xde>
 8009692:	f105 39ff 	add.w	r9, r5, #4294967295
 8009696:	f8ca 9000 	str.w	r9, [sl]
 800969a:	e7f2      	b.n	8009682 <_strtol_l.isra.0+0xca>
 800969c:	2430      	movs	r4, #48	; 0x30
 800969e:	2e00      	cmp	r6, #0
 80096a0:	d1af      	bne.n	8009602 <_strtol_l.isra.0+0x4a>
 80096a2:	2608      	movs	r6, #8
 80096a4:	e7ad      	b.n	8009602 <_strtol_l.isra.0+0x4a>
 80096a6:	2c30      	cmp	r4, #48	; 0x30
 80096a8:	d0a3      	beq.n	80095f2 <_strtol_l.isra.0+0x3a>
 80096aa:	260a      	movs	r6, #10
 80096ac:	e7a9      	b.n	8009602 <_strtol_l.isra.0+0x4a>
	...

080096b0 <_strtol_r>:
 80096b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b2:	4c06      	ldr	r4, [pc, #24]	; (80096cc <_strtol_r+0x1c>)
 80096b4:	4d06      	ldr	r5, [pc, #24]	; (80096d0 <_strtol_r+0x20>)
 80096b6:	6824      	ldr	r4, [r4, #0]
 80096b8:	6a24      	ldr	r4, [r4, #32]
 80096ba:	2c00      	cmp	r4, #0
 80096bc:	bf08      	it	eq
 80096be:	462c      	moveq	r4, r5
 80096c0:	9400      	str	r4, [sp, #0]
 80096c2:	f7ff ff79 	bl	80095b8 <_strtol_l.isra.0>
 80096c6:	b003      	add	sp, #12
 80096c8:	bd30      	pop	{r4, r5, pc}
 80096ca:	bf00      	nop
 80096cc:	2000003c 	.word	0x2000003c
 80096d0:	200000a0 	.word	0x200000a0

080096d4 <quorem>:
 80096d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	6903      	ldr	r3, [r0, #16]
 80096da:	690c      	ldr	r4, [r1, #16]
 80096dc:	42a3      	cmp	r3, r4
 80096de:	4680      	mov	r8, r0
 80096e0:	f2c0 8082 	blt.w	80097e8 <quorem+0x114>
 80096e4:	3c01      	subs	r4, #1
 80096e6:	f101 0714 	add.w	r7, r1, #20
 80096ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80096ee:	f100 0614 	add.w	r6, r0, #20
 80096f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80096f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80096fa:	eb06 030c 	add.w	r3, r6, ip
 80096fe:	3501      	adds	r5, #1
 8009700:	eb07 090c 	add.w	r9, r7, ip
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	fbb0 f5f5 	udiv	r5, r0, r5
 800970a:	b395      	cbz	r5, 8009772 <quorem+0x9e>
 800970c:	f04f 0a00 	mov.w	sl, #0
 8009710:	4638      	mov	r0, r7
 8009712:	46b6      	mov	lr, r6
 8009714:	46d3      	mov	fp, sl
 8009716:	f850 2b04 	ldr.w	r2, [r0], #4
 800971a:	b293      	uxth	r3, r2
 800971c:	fb05 a303 	mla	r3, r5, r3, sl
 8009720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009724:	b29b      	uxth	r3, r3
 8009726:	ebab 0303 	sub.w	r3, fp, r3
 800972a:	0c12      	lsrs	r2, r2, #16
 800972c:	f8de b000 	ldr.w	fp, [lr]
 8009730:	fb05 a202 	mla	r2, r5, r2, sl
 8009734:	fa13 f38b 	uxtah	r3, r3, fp
 8009738:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800973c:	fa1f fb82 	uxth.w	fp, r2
 8009740:	f8de 2000 	ldr.w	r2, [lr]
 8009744:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800974c:	b29b      	uxth	r3, r3
 800974e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009752:	4581      	cmp	r9, r0
 8009754:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009758:	f84e 3b04 	str.w	r3, [lr], #4
 800975c:	d2db      	bcs.n	8009716 <quorem+0x42>
 800975e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009762:	b933      	cbnz	r3, 8009772 <quorem+0x9e>
 8009764:	9b01      	ldr	r3, [sp, #4]
 8009766:	3b04      	subs	r3, #4
 8009768:	429e      	cmp	r6, r3
 800976a:	461a      	mov	r2, r3
 800976c:	d330      	bcc.n	80097d0 <quorem+0xfc>
 800976e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009772:	4640      	mov	r0, r8
 8009774:	f001 fba6 	bl	800aec4 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	db25      	blt.n	80097c8 <quorem+0xf4>
 800977c:	3501      	adds	r5, #1
 800977e:	4630      	mov	r0, r6
 8009780:	f04f 0c00 	mov.w	ip, #0
 8009784:	f857 2b04 	ldr.w	r2, [r7], #4
 8009788:	f8d0 e000 	ldr.w	lr, [r0]
 800978c:	b293      	uxth	r3, r2
 800978e:	ebac 0303 	sub.w	r3, ip, r3
 8009792:	0c12      	lsrs	r2, r2, #16
 8009794:	fa13 f38e 	uxtah	r3, r3, lr
 8009798:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800979c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097a6:	45b9      	cmp	r9, r7
 80097a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80097ac:	f840 3b04 	str.w	r3, [r0], #4
 80097b0:	d2e8      	bcs.n	8009784 <quorem+0xb0>
 80097b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80097b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80097ba:	b92a      	cbnz	r2, 80097c8 <quorem+0xf4>
 80097bc:	3b04      	subs	r3, #4
 80097be:	429e      	cmp	r6, r3
 80097c0:	461a      	mov	r2, r3
 80097c2:	d30b      	bcc.n	80097dc <quorem+0x108>
 80097c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80097c8:	4628      	mov	r0, r5
 80097ca:	b003      	add	sp, #12
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	6812      	ldr	r2, [r2, #0]
 80097d2:	3b04      	subs	r3, #4
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	d1ca      	bne.n	800976e <quorem+0x9a>
 80097d8:	3c01      	subs	r4, #1
 80097da:	e7c5      	b.n	8009768 <quorem+0x94>
 80097dc:	6812      	ldr	r2, [r2, #0]
 80097de:	3b04      	subs	r3, #4
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	d1ef      	bne.n	80097c4 <quorem+0xf0>
 80097e4:	3c01      	subs	r4, #1
 80097e6:	e7ea      	b.n	80097be <quorem+0xea>
 80097e8:	2000      	movs	r0, #0
 80097ea:	e7ee      	b.n	80097ca <quorem+0xf6>
 80097ec:	0000      	movs	r0, r0
	...

080097f0 <_dtoa_r>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ec57 6b10 	vmov	r6, r7, d0
 80097f8:	b097      	sub	sp, #92	; 0x5c
 80097fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097fc:	9106      	str	r1, [sp, #24]
 80097fe:	4604      	mov	r4, r0
 8009800:	920b      	str	r2, [sp, #44]	; 0x2c
 8009802:	9312      	str	r3, [sp, #72]	; 0x48
 8009804:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009808:	e9cd 6700 	strd	r6, r7, [sp]
 800980c:	b93d      	cbnz	r5, 800981e <_dtoa_r+0x2e>
 800980e:	2010      	movs	r0, #16
 8009810:	f001 f8e0 	bl	800a9d4 <malloc>
 8009814:	6260      	str	r0, [r4, #36]	; 0x24
 8009816:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800981a:	6005      	str	r5, [r0, #0]
 800981c:	60c5      	str	r5, [r0, #12]
 800981e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009820:	6819      	ldr	r1, [r3, #0]
 8009822:	b151      	cbz	r1, 800983a <_dtoa_r+0x4a>
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	604a      	str	r2, [r1, #4]
 8009828:	2301      	movs	r3, #1
 800982a:	4093      	lsls	r3, r2
 800982c:	608b      	str	r3, [r1, #8]
 800982e:	4620      	mov	r0, r4
 8009830:	f001 f929 	bl	800aa86 <_Bfree>
 8009834:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	1e3b      	subs	r3, r7, #0
 800983c:	bfbb      	ittet	lt
 800983e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009842:	9301      	strlt	r3, [sp, #4]
 8009844:	2300      	movge	r3, #0
 8009846:	2201      	movlt	r2, #1
 8009848:	bfac      	ite	ge
 800984a:	f8c8 3000 	strge.w	r3, [r8]
 800984e:	f8c8 2000 	strlt.w	r2, [r8]
 8009852:	4baf      	ldr	r3, [pc, #700]	; (8009b10 <_dtoa_r+0x320>)
 8009854:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009858:	ea33 0308 	bics.w	r3, r3, r8
 800985c:	d114      	bne.n	8009888 <_dtoa_r+0x98>
 800985e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009860:	f242 730f 	movw	r3, #9999	; 0x270f
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	b923      	cbnz	r3, 8009874 <_dtoa_r+0x84>
 800986a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800986e:	2800      	cmp	r0, #0
 8009870:	f000 8542 	beq.w	800a2f8 <_dtoa_r+0xb08>
 8009874:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009876:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009b24 <_dtoa_r+0x334>
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8544 	beq.w	800a308 <_dtoa_r+0xb18>
 8009880:	f10b 0303 	add.w	r3, fp, #3
 8009884:	f000 bd3e 	b.w	800a304 <_dtoa_r+0xb14>
 8009888:	e9dd 6700 	ldrd	r6, r7, [sp]
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	f7f7 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 8009898:	4681      	mov	r9, r0
 800989a:	b168      	cbz	r0, 80098b8 <_dtoa_r+0xc8>
 800989c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800989e:	2301      	movs	r3, #1
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8524 	beq.w	800a2f2 <_dtoa_r+0xb02>
 80098aa:	4b9a      	ldr	r3, [pc, #616]	; (8009b14 <_dtoa_r+0x324>)
 80098ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	f000 bd28 	b.w	800a308 <_dtoa_r+0xb18>
 80098b8:	aa14      	add	r2, sp, #80	; 0x50
 80098ba:	a915      	add	r1, sp, #84	; 0x54
 80098bc:	ec47 6b10 	vmov	d0, r6, r7
 80098c0:	4620      	mov	r0, r4
 80098c2:	f001 fbed 	bl	800b0a0 <__d2b>
 80098c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80098ca:	9004      	str	r0, [sp, #16]
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	d07c      	beq.n	80099ca <_dtoa_r+0x1da>
 80098d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80098d8:	46b2      	mov	sl, r6
 80098da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80098de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80098e6:	2200      	movs	r2, #0
 80098e8:	4b8b      	ldr	r3, [pc, #556]	; (8009b18 <_dtoa_r+0x328>)
 80098ea:	4650      	mov	r0, sl
 80098ec:	4659      	mov	r1, fp
 80098ee:	f7f6 fccb 	bl	8000288 <__aeabi_dsub>
 80098f2:	a381      	add	r3, pc, #516	; (adr r3, 8009af8 <_dtoa_r+0x308>)
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fe7e 	bl	80005f8 <__aeabi_dmul>
 80098fc:	a380      	add	r3, pc, #512	; (adr r3, 8009b00 <_dtoa_r+0x310>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fcc3 	bl	800028c <__adddf3>
 8009906:	4606      	mov	r6, r0
 8009908:	4628      	mov	r0, r5
 800990a:	460f      	mov	r7, r1
 800990c:	f7f6 fe0a 	bl	8000524 <__aeabi_i2d>
 8009910:	a37d      	add	r3, pc, #500	; (adr r3, 8009b08 <_dtoa_r+0x318>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fe6f 	bl	80005f8 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fcb3 	bl	800028c <__adddf3>
 8009926:	4606      	mov	r6, r0
 8009928:	460f      	mov	r7, r1
 800992a:	f7f7 f915 	bl	8000b58 <__aeabi_d2iz>
 800992e:	2200      	movs	r2, #0
 8009930:	4682      	mov	sl, r0
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f8d0 	bl	8000adc <__aeabi_dcmplt>
 800993c:	b148      	cbz	r0, 8009952 <_dtoa_r+0x162>
 800993e:	4650      	mov	r0, sl
 8009940:	f7f6 fdf0 	bl	8000524 <__aeabi_i2d>
 8009944:	4632      	mov	r2, r6
 8009946:	463b      	mov	r3, r7
 8009948:	f7f7 f8be 	bl	8000ac8 <__aeabi_dcmpeq>
 800994c:	b908      	cbnz	r0, 8009952 <_dtoa_r+0x162>
 800994e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009952:	f1ba 0f16 	cmp.w	sl, #22
 8009956:	d859      	bhi.n	8009a0c <_dtoa_r+0x21c>
 8009958:	4970      	ldr	r1, [pc, #448]	; (8009b1c <_dtoa_r+0x32c>)
 800995a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800995e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009966:	f7f7 f8d7 	bl	8000b18 <__aeabi_dcmpgt>
 800996a:	2800      	cmp	r0, #0
 800996c:	d050      	beq.n	8009a10 <_dtoa_r+0x220>
 800996e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009972:	2300      	movs	r3, #0
 8009974:	930f      	str	r3, [sp, #60]	; 0x3c
 8009976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009978:	1b5d      	subs	r5, r3, r5
 800997a:	f1b5 0801 	subs.w	r8, r5, #1
 800997e:	bf49      	itett	mi
 8009980:	f1c5 0301 	rsbmi	r3, r5, #1
 8009984:	2300      	movpl	r3, #0
 8009986:	9305      	strmi	r3, [sp, #20]
 8009988:	f04f 0800 	movmi.w	r8, #0
 800998c:	bf58      	it	pl
 800998e:	9305      	strpl	r3, [sp, #20]
 8009990:	f1ba 0f00 	cmp.w	sl, #0
 8009994:	db3e      	blt.n	8009a14 <_dtoa_r+0x224>
 8009996:	2300      	movs	r3, #0
 8009998:	44d0      	add	r8, sl
 800999a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800999e:	9307      	str	r3, [sp, #28]
 80099a0:	9b06      	ldr	r3, [sp, #24]
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	f200 8090 	bhi.w	8009ac8 <_dtoa_r+0x2d8>
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	bfc4      	itt	gt
 80099ac:	3b04      	subgt	r3, #4
 80099ae:	9306      	strgt	r3, [sp, #24]
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	f1a3 0302 	sub.w	r3, r3, #2
 80099b6:	bfcc      	ite	gt
 80099b8:	2500      	movgt	r5, #0
 80099ba:	2501      	movle	r5, #1
 80099bc:	2b03      	cmp	r3, #3
 80099be:	f200 808f 	bhi.w	8009ae0 <_dtoa_r+0x2f0>
 80099c2:	e8df f003 	tbb	[pc, r3]
 80099c6:	7f7d      	.short	0x7f7d
 80099c8:	7131      	.short	0x7131
 80099ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80099ce:	441d      	add	r5, r3
 80099d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80099d4:	2820      	cmp	r0, #32
 80099d6:	dd13      	ble.n	8009a00 <_dtoa_r+0x210>
 80099d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80099dc:	9b00      	ldr	r3, [sp, #0]
 80099de:	fa08 f800 	lsl.w	r8, r8, r0
 80099e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80099e6:	fa23 f000 	lsr.w	r0, r3, r0
 80099ea:	ea48 0000 	orr.w	r0, r8, r0
 80099ee:	f7f6 fd89 	bl	8000504 <__aeabi_ui2d>
 80099f2:	2301      	movs	r3, #1
 80099f4:	4682      	mov	sl, r0
 80099f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80099fa:	3d01      	subs	r5, #1
 80099fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80099fe:	e772      	b.n	80098e6 <_dtoa_r+0xf6>
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	f1c0 0020 	rsb	r0, r0, #32
 8009a06:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0a:	e7f0      	b.n	80099ee <_dtoa_r+0x1fe>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e7b1      	b.n	8009974 <_dtoa_r+0x184>
 8009a10:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a12:	e7b0      	b.n	8009976 <_dtoa_r+0x186>
 8009a14:	9b05      	ldr	r3, [sp, #20]
 8009a16:	eba3 030a 	sub.w	r3, r3, sl
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	f1ca 0300 	rsb	r3, sl, #0
 8009a20:	9307      	str	r3, [sp, #28]
 8009a22:	2300      	movs	r3, #0
 8009a24:	930e      	str	r3, [sp, #56]	; 0x38
 8009a26:	e7bb      	b.n	80099a0 <_dtoa_r+0x1b0>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	dd59      	ble.n	8009ae6 <_dtoa_r+0x2f6>
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	4699      	mov	r9, r3
 8009a36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a38:	2200      	movs	r2, #0
 8009a3a:	6072      	str	r2, [r6, #4]
 8009a3c:	2204      	movs	r2, #4
 8009a3e:	f102 0014 	add.w	r0, r2, #20
 8009a42:	4298      	cmp	r0, r3
 8009a44:	6871      	ldr	r1, [r6, #4]
 8009a46:	d953      	bls.n	8009af0 <_dtoa_r+0x300>
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 ffe8 	bl	800aa1e <_Balloc>
 8009a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a50:	6030      	str	r0, [r6, #0]
 8009a52:	f1b9 0f0e 	cmp.w	r9, #14
 8009a56:	f8d3 b000 	ldr.w	fp, [r3]
 8009a5a:	f200 80e6 	bhi.w	8009c2a <_dtoa_r+0x43a>
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	f000 80e3 	beq.w	8009c2a <_dtoa_r+0x43a>
 8009a64:	ed9d 7b00 	vldr	d7, [sp]
 8009a68:	f1ba 0f00 	cmp.w	sl, #0
 8009a6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009a70:	dd74      	ble.n	8009b5c <_dtoa_r+0x36c>
 8009a72:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <_dtoa_r+0x32c>)
 8009a74:	f00a 030f 	and.w	r3, sl, #15
 8009a78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009a7c:	ed93 7b00 	vldr	d7, [r3]
 8009a80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009a84:	06f0      	lsls	r0, r6, #27
 8009a86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009a8a:	d565      	bpl.n	8009b58 <_dtoa_r+0x368>
 8009a8c:	4b24      	ldr	r3, [pc, #144]	; (8009b20 <_dtoa_r+0x330>)
 8009a8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a96:	f7f6 fed9 	bl	800084c <__aeabi_ddiv>
 8009a9a:	e9cd 0100 	strd	r0, r1, [sp]
 8009a9e:	f006 060f 	and.w	r6, r6, #15
 8009aa2:	2503      	movs	r5, #3
 8009aa4:	4f1e      	ldr	r7, [pc, #120]	; (8009b20 <_dtoa_r+0x330>)
 8009aa6:	e04c      	b.n	8009b42 <_dtoa_r+0x352>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8009aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aae:	4453      	add	r3, sl
 8009ab0:	f103 0901 	add.w	r9, r3, #1
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	bfb8      	it	lt
 8009abc:	2301      	movlt	r3, #1
 8009abe:	e7ba      	b.n	8009a36 <_dtoa_r+0x246>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	e7b2      	b.n	8009a2a <_dtoa_r+0x23a>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e7f0      	b.n	8009aaa <_dtoa_r+0x2ba>
 8009ac8:	2501      	movs	r5, #1
 8009aca:	2300      	movs	r3, #0
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	950a      	str	r5, [sp, #40]	; 0x28
 8009ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	4699      	mov	r9, r3
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2312      	movs	r3, #18
 8009adc:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ade:	e7aa      	b.n	8009a36 <_dtoa_r+0x246>
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae4:	e7f4      	b.n	8009ad0 <_dtoa_r+0x2e0>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9302      	str	r3, [sp, #8]
 8009aea:	4699      	mov	r9, r3
 8009aec:	461a      	mov	r2, r3
 8009aee:	e7f5      	b.n	8009adc <_dtoa_r+0x2ec>
 8009af0:	3101      	adds	r1, #1
 8009af2:	6071      	str	r1, [r6, #4]
 8009af4:	0052      	lsls	r2, r2, #1
 8009af6:	e7a2      	b.n	8009a3e <_dtoa_r+0x24e>
 8009af8:	636f4361 	.word	0x636f4361
 8009afc:	3fd287a7 	.word	0x3fd287a7
 8009b00:	8b60c8b3 	.word	0x8b60c8b3
 8009b04:	3fc68a28 	.word	0x3fc68a28
 8009b08:	509f79fb 	.word	0x509f79fb
 8009b0c:	3fd34413 	.word	0x3fd34413
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	0800b769 	.word	0x0800b769
 8009b18:	3ff80000 	.word	0x3ff80000
 8009b1c:	0800b828 	.word	0x0800b828
 8009b20:	0800b800 	.word	0x0800b800
 8009b24:	0800b7f1 	.word	0x0800b7f1
 8009b28:	07f1      	lsls	r1, r6, #31
 8009b2a:	d508      	bpl.n	8009b3e <_dtoa_r+0x34e>
 8009b2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b34:	f7f6 fd60 	bl	80005f8 <__aeabi_dmul>
 8009b38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b3c:	3501      	adds	r5, #1
 8009b3e:	1076      	asrs	r6, r6, #1
 8009b40:	3708      	adds	r7, #8
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	d1f0      	bne.n	8009b28 <_dtoa_r+0x338>
 8009b46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b4e:	f7f6 fe7d 	bl	800084c <__aeabi_ddiv>
 8009b52:	e9cd 0100 	strd	r0, r1, [sp]
 8009b56:	e01a      	b.n	8009b8e <_dtoa_r+0x39e>
 8009b58:	2502      	movs	r5, #2
 8009b5a:	e7a3      	b.n	8009aa4 <_dtoa_r+0x2b4>
 8009b5c:	f000 80a0 	beq.w	8009ca0 <_dtoa_r+0x4b0>
 8009b60:	f1ca 0600 	rsb	r6, sl, #0
 8009b64:	4b9f      	ldr	r3, [pc, #636]	; (8009de4 <_dtoa_r+0x5f4>)
 8009b66:	4fa0      	ldr	r7, [pc, #640]	; (8009de8 <_dtoa_r+0x5f8>)
 8009b68:	f006 020f 	and.w	r2, r6, #15
 8009b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	e9cd 0100 	strd	r0, r1, [sp]
 8009b80:	1136      	asrs	r6, r6, #4
 8009b82:	2300      	movs	r3, #0
 8009b84:	2502      	movs	r5, #2
 8009b86:	2e00      	cmp	r6, #0
 8009b88:	d17f      	bne.n	8009c8a <_dtoa_r+0x49a>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e1      	bne.n	8009b52 <_dtoa_r+0x362>
 8009b8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 8087 	beq.w	8009ca4 <_dtoa_r+0x4b4>
 8009b96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4b93      	ldr	r3, [pc, #588]	; (8009dec <_dtoa_r+0x5fc>)
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	f7f6 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d07c      	beq.n	8009ca4 <_dtoa_r+0x4b4>
 8009baa:	f1b9 0f00 	cmp.w	r9, #0
 8009bae:	d079      	beq.n	8009ca4 <_dtoa_r+0x4b4>
 8009bb0:	9b02      	ldr	r3, [sp, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dd35      	ble.n	8009c22 <_dtoa_r+0x432>
 8009bb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bba:	9308      	str	r3, [sp, #32]
 8009bbc:	4639      	mov	r1, r7
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4b8b      	ldr	r3, [pc, #556]	; (8009df0 <_dtoa_r+0x600>)
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7f6 fd18 	bl	80005f8 <__aeabi_dmul>
 8009bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bcc:	9f02      	ldr	r7, [sp, #8]
 8009bce:	3501      	adds	r5, #1
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f7f6 fca7 	bl	8000524 <__aeabi_i2d>
 8009bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bda:	f7f6 fd0d 	bl	80005f8 <__aeabi_dmul>
 8009bde:	2200      	movs	r2, #0
 8009be0:	4b84      	ldr	r3, [pc, #528]	; (8009df4 <_dtoa_r+0x604>)
 8009be2:	f7f6 fb53 	bl	800028c <__adddf3>
 8009be6:	4605      	mov	r5, r0
 8009be8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009bec:	2f00      	cmp	r7, #0
 8009bee:	d15d      	bne.n	8009cac <_dtoa_r+0x4bc>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	4b81      	ldr	r3, [pc, #516]	; (8009df8 <_dtoa_r+0x608>)
 8009bf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bf8:	f7f6 fb46 	bl	8000288 <__aeabi_dsub>
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4633      	mov	r3, r6
 8009c00:	e9cd 0100 	strd	r0, r1, [sp]
 8009c04:	f7f6 ff88 	bl	8000b18 <__aeabi_dcmpgt>
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	f040 8288 	bne.w	800a11e <_dtoa_r+0x92e>
 8009c0e:	462a      	mov	r2, r5
 8009c10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c18:	f7f6 ff60 	bl	8000adc <__aeabi_dcmplt>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f040 827c 	bne.w	800a11a <_dtoa_r+0x92a>
 8009c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c26:	e9cd 2300 	strd	r2, r3, [sp]
 8009c2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f2c0 8150 	blt.w	8009ed2 <_dtoa_r+0x6e2>
 8009c32:	f1ba 0f0e 	cmp.w	sl, #14
 8009c36:	f300 814c 	bgt.w	8009ed2 <_dtoa_r+0x6e2>
 8009c3a:	4b6a      	ldr	r3, [pc, #424]	; (8009de4 <_dtoa_r+0x5f4>)
 8009c3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c40:	ed93 7b00 	vldr	d7, [r3]
 8009c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c4c:	f280 80d8 	bge.w	8009e00 <_dtoa_r+0x610>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	f300 80d4 	bgt.w	8009e00 <_dtoa_r+0x610>
 8009c58:	f040 825e 	bne.w	800a118 <_dtoa_r+0x928>
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	4b66      	ldr	r3, [pc, #408]	; (8009df8 <_dtoa_r+0x608>)
 8009c60:	ec51 0b17 	vmov	r0, r1, d7
 8009c64:	f7f6 fcc8 	bl	80005f8 <__aeabi_dmul>
 8009c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6c:	f7f6 ff4a 	bl	8000b04 <__aeabi_dcmpge>
 8009c70:	464f      	mov	r7, r9
 8009c72:	464e      	mov	r6, r9
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f040 8234 	bne.w	800a0e2 <_dtoa_r+0x8f2>
 8009c7a:	2331      	movs	r3, #49	; 0x31
 8009c7c:	f10b 0501 	add.w	r5, fp, #1
 8009c80:	f88b 3000 	strb.w	r3, [fp]
 8009c84:	f10a 0a01 	add.w	sl, sl, #1
 8009c88:	e22f      	b.n	800a0ea <_dtoa_r+0x8fa>
 8009c8a:	07f2      	lsls	r2, r6, #31
 8009c8c:	d505      	bpl.n	8009c9a <_dtoa_r+0x4aa>
 8009c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c92:	f7f6 fcb1 	bl	80005f8 <__aeabi_dmul>
 8009c96:	3501      	adds	r5, #1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	1076      	asrs	r6, r6, #1
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	e772      	b.n	8009b86 <_dtoa_r+0x396>
 8009ca0:	2502      	movs	r5, #2
 8009ca2:	e774      	b.n	8009b8e <_dtoa_r+0x39e>
 8009ca4:	f8cd a020 	str.w	sl, [sp, #32]
 8009ca8:	464f      	mov	r7, r9
 8009caa:	e791      	b.n	8009bd0 <_dtoa_r+0x3e0>
 8009cac:	4b4d      	ldr	r3, [pc, #308]	; (8009de4 <_dtoa_r+0x5f4>)
 8009cae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d047      	beq.n	8009d4c <_dtoa_r+0x55c>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	494e      	ldr	r1, [pc, #312]	; (8009dfc <_dtoa_r+0x60c>)
 8009cc4:	f7f6 fdc2 	bl	800084c <__aeabi_ddiv>
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4633      	mov	r3, r6
 8009ccc:	f7f6 fadc 	bl	8000288 <__aeabi_dsub>
 8009cd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009cd4:	465d      	mov	r5, fp
 8009cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cda:	f7f6 ff3d 	bl	8000b58 <__aeabi_d2iz>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	f7f6 fc20 	bl	8000524 <__aeabi_i2d>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cec:	f7f6 facc 	bl	8000288 <__aeabi_dsub>
 8009cf0:	3630      	adds	r6, #48	; 0x30
 8009cf2:	f805 6b01 	strb.w	r6, [r5], #1
 8009cf6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009cfa:	e9cd 0100 	strd	r0, r1, [sp]
 8009cfe:	f7f6 feed 	bl	8000adc <__aeabi_dcmplt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d163      	bne.n	8009dce <_dtoa_r+0x5de>
 8009d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	4937      	ldr	r1, [pc, #220]	; (8009dec <_dtoa_r+0x5fc>)
 8009d0e:	f7f6 fabb 	bl	8000288 <__aeabi_dsub>
 8009d12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d16:	f7f6 fee1 	bl	8000adc <__aeabi_dcmplt>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	f040 80b7 	bne.w	8009e8e <_dtoa_r+0x69e>
 8009d20:	eba5 030b 	sub.w	r3, r5, fp
 8009d24:	429f      	cmp	r7, r3
 8009d26:	f77f af7c 	ble.w	8009c22 <_dtoa_r+0x432>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4b30      	ldr	r3, [pc, #192]	; (8009df0 <_dtoa_r+0x600>)
 8009d2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d32:	f7f6 fc61 	bl	80005f8 <__aeabi_dmul>
 8009d36:	2200      	movs	r2, #0
 8009d38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d3c:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <_dtoa_r+0x600>)
 8009d3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d42:	f7f6 fc59 	bl	80005f8 <__aeabi_dmul>
 8009d46:	e9cd 0100 	strd	r0, r1, [sp]
 8009d4a:	e7c4      	b.n	8009cd6 <_dtoa_r+0x4e6>
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4633      	mov	r3, r6
 8009d50:	f7f6 fc52 	bl	80005f8 <__aeabi_dmul>
 8009d54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d58:	eb0b 0507 	add.w	r5, fp, r7
 8009d5c:	465e      	mov	r6, fp
 8009d5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d62:	f7f6 fef9 	bl	8000b58 <__aeabi_d2iz>
 8009d66:	4607      	mov	r7, r0
 8009d68:	f7f6 fbdc 	bl	8000524 <__aeabi_i2d>
 8009d6c:	3730      	adds	r7, #48	; 0x30
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d76:	f7f6 fa87 	bl	8000288 <__aeabi_dsub>
 8009d7a:	f806 7b01 	strb.w	r7, [r6], #1
 8009d7e:	42ae      	cmp	r6, r5
 8009d80:	e9cd 0100 	strd	r0, r1, [sp]
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	d126      	bne.n	8009dd8 <_dtoa_r+0x5e8>
 8009d8a:	4b1c      	ldr	r3, [pc, #112]	; (8009dfc <_dtoa_r+0x60c>)
 8009d8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d90:	f7f6 fa7c 	bl	800028c <__adddf3>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d9c:	f7f6 febc 	bl	8000b18 <__aeabi_dcmpgt>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d174      	bne.n	8009e8e <_dtoa_r+0x69e>
 8009da4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009da8:	2000      	movs	r0, #0
 8009daa:	4914      	ldr	r1, [pc, #80]	; (8009dfc <_dtoa_r+0x60c>)
 8009dac:	f7f6 fa6c 	bl	8000288 <__aeabi_dsub>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db8:	f7f6 fe90 	bl	8000adc <__aeabi_dcmplt>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f43f af30 	beq.w	8009c22 <_dtoa_r+0x432>
 8009dc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dc6:	2b30      	cmp	r3, #48	; 0x30
 8009dc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8009dcc:	d002      	beq.n	8009dd4 <_dtoa_r+0x5e4>
 8009dce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009dd2:	e04a      	b.n	8009e6a <_dtoa_r+0x67a>
 8009dd4:	4615      	mov	r5, r2
 8009dd6:	e7f4      	b.n	8009dc2 <_dtoa_r+0x5d2>
 8009dd8:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <_dtoa_r+0x600>)
 8009dda:	f7f6 fc0d 	bl	80005f8 <__aeabi_dmul>
 8009dde:	e9cd 0100 	strd	r0, r1, [sp]
 8009de2:	e7bc      	b.n	8009d5e <_dtoa_r+0x56e>
 8009de4:	0800b828 	.word	0x0800b828
 8009de8:	0800b800 	.word	0x0800b800
 8009dec:	3ff00000 	.word	0x3ff00000
 8009df0:	40240000 	.word	0x40240000
 8009df4:	401c0000 	.word	0x401c0000
 8009df8:	40140000 	.word	0x40140000
 8009dfc:	3fe00000 	.word	0x3fe00000
 8009e00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e04:	465d      	mov	r5, fp
 8009e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	f7f6 fd1d 	bl	800084c <__aeabi_ddiv>
 8009e12:	f7f6 fea1 	bl	8000b58 <__aeabi_d2iz>
 8009e16:	4680      	mov	r8, r0
 8009e18:	f7f6 fb84 	bl	8000524 <__aeabi_i2d>
 8009e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e20:	f7f6 fbea 	bl	80005f8 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009e30:	f7f6 fa2a 	bl	8000288 <__aeabi_dsub>
 8009e34:	f805 6b01 	strb.w	r6, [r5], #1
 8009e38:	eba5 060b 	sub.w	r6, r5, fp
 8009e3c:	45b1      	cmp	r9, r6
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	d139      	bne.n	8009eb8 <_dtoa_r+0x6c8>
 8009e44:	f7f6 fa22 	bl	800028c <__adddf3>
 8009e48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	460f      	mov	r7, r1
 8009e50:	f7f6 fe62 	bl	8000b18 <__aeabi_dcmpgt>
 8009e54:	b9c8      	cbnz	r0, 8009e8a <_dtoa_r+0x69a>
 8009e56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	4639      	mov	r1, r7
 8009e5e:	f7f6 fe33 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e62:	b110      	cbz	r0, 8009e6a <_dtoa_r+0x67a>
 8009e64:	f018 0f01 	tst.w	r8, #1
 8009e68:	d10f      	bne.n	8009e8a <_dtoa_r+0x69a>
 8009e6a:	9904      	ldr	r1, [sp, #16]
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f000 fe0a 	bl	800aa86 <_Bfree>
 8009e72:	2300      	movs	r3, #0
 8009e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e76:	702b      	strb	r3, [r5, #0]
 8009e78:	f10a 0301 	add.w	r3, sl, #1
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 8241 	beq.w	800a308 <_dtoa_r+0xb18>
 8009e86:	601d      	str	r5, [r3, #0]
 8009e88:	e23e      	b.n	800a308 <_dtoa_r+0xb18>
 8009e8a:	f8cd a020 	str.w	sl, [sp, #32]
 8009e8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e92:	2a39      	cmp	r2, #57	; 0x39
 8009e94:	f105 33ff 	add.w	r3, r5, #4294967295
 8009e98:	d108      	bne.n	8009eac <_dtoa_r+0x6bc>
 8009e9a:	459b      	cmp	fp, r3
 8009e9c:	d10a      	bne.n	8009eb4 <_dtoa_r+0x6c4>
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	9308      	str	r3, [sp, #32]
 8009ea4:	2330      	movs	r3, #48	; 0x30
 8009ea6:	f88b 3000 	strb.w	r3, [fp]
 8009eaa:	465b      	mov	r3, fp
 8009eac:	781a      	ldrb	r2, [r3, #0]
 8009eae:	3201      	adds	r2, #1
 8009eb0:	701a      	strb	r2, [r3, #0]
 8009eb2:	e78c      	b.n	8009dce <_dtoa_r+0x5de>
 8009eb4:	461d      	mov	r5, r3
 8009eb6:	e7ea      	b.n	8009e8e <_dtoa_r+0x69e>
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4b9b      	ldr	r3, [pc, #620]	; (800a128 <_dtoa_r+0x938>)
 8009ebc:	f7f6 fb9c 	bl	80005f8 <__aeabi_dmul>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	460f      	mov	r7, r1
 8009ec8:	f7f6 fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	d09a      	beq.n	8009e06 <_dtoa_r+0x616>
 8009ed0:	e7cb      	b.n	8009e6a <_dtoa_r+0x67a>
 8009ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	f000 808b 	beq.w	8009ff0 <_dtoa_r+0x800>
 8009eda:	9a06      	ldr	r2, [sp, #24]
 8009edc:	2a01      	cmp	r2, #1
 8009ede:	dc6e      	bgt.n	8009fbe <_dtoa_r+0x7ce>
 8009ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d067      	beq.n	8009fb6 <_dtoa_r+0x7c6>
 8009ee6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009eea:	9f07      	ldr	r7, [sp, #28]
 8009eec:	9d05      	ldr	r5, [sp, #20]
 8009eee:	9a05      	ldr	r2, [sp, #20]
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	441a      	add	r2, r3
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	9205      	str	r2, [sp, #20]
 8009ef8:	4498      	add	r8, r3
 8009efa:	f000 fea2 	bl	800ac42 <__i2b>
 8009efe:	4606      	mov	r6, r0
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	dd0c      	ble.n	8009f1e <_dtoa_r+0x72e>
 8009f04:	f1b8 0f00 	cmp.w	r8, #0
 8009f08:	dd09      	ble.n	8009f1e <_dtoa_r+0x72e>
 8009f0a:	4545      	cmp	r5, r8
 8009f0c:	9a05      	ldr	r2, [sp, #20]
 8009f0e:	462b      	mov	r3, r5
 8009f10:	bfa8      	it	ge
 8009f12:	4643      	movge	r3, r8
 8009f14:	1ad2      	subs	r2, r2, r3
 8009f16:	9205      	str	r2, [sp, #20]
 8009f18:	1aed      	subs	r5, r5, r3
 8009f1a:	eba8 0803 	sub.w	r8, r8, r3
 8009f1e:	9b07      	ldr	r3, [sp, #28]
 8009f20:	b1eb      	cbz	r3, 8009f5e <_dtoa_r+0x76e>
 8009f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d067      	beq.n	8009ff8 <_dtoa_r+0x808>
 8009f28:	b18f      	cbz	r7, 8009f4e <_dtoa_r+0x75e>
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	463a      	mov	r2, r7
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 ff26 	bl	800ad80 <__pow5mult>
 8009f34:	9a04      	ldr	r2, [sp, #16]
 8009f36:	4601      	mov	r1, r0
 8009f38:	4606      	mov	r6, r0
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fe8a 	bl	800ac54 <__multiply>
 8009f40:	9904      	ldr	r1, [sp, #16]
 8009f42:	9008      	str	r0, [sp, #32]
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fd9e 	bl	800aa86 <_Bfree>
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	1bda      	subs	r2, r3, r7
 8009f52:	d004      	beq.n	8009f5e <_dtoa_r+0x76e>
 8009f54:	9904      	ldr	r1, [sp, #16]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 ff12 	bl	800ad80 <__pow5mult>
 8009f5c:	9004      	str	r0, [sp, #16]
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4620      	mov	r0, r4
 8009f62:	f000 fe6e 	bl	800ac42 <__i2b>
 8009f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f68:	4607      	mov	r7, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 81d0 	beq.w	800a310 <_dtoa_r+0xb20>
 8009f70:	461a      	mov	r2, r3
 8009f72:	4601      	mov	r1, r0
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 ff03 	bl	800ad80 <__pow5mult>
 8009f7a:	9b06      	ldr	r3, [sp, #24]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	4607      	mov	r7, r0
 8009f80:	dc40      	bgt.n	800a004 <_dtoa_r+0x814>
 8009f82:	9b00      	ldr	r3, [sp, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d139      	bne.n	8009ffc <_dtoa_r+0x80c>
 8009f88:	9b01      	ldr	r3, [sp, #4]
 8009f8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d136      	bne.n	800a000 <_dtoa_r+0x810>
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f98:	0d1b      	lsrs	r3, r3, #20
 8009f9a:	051b      	lsls	r3, r3, #20
 8009f9c:	b12b      	cbz	r3, 8009faa <_dtoa_r+0x7ba>
 8009f9e:	9b05      	ldr	r3, [sp, #20]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	f108 0801 	add.w	r8, r8, #1
 8009fa8:	2301      	movs	r3, #1
 8009faa:	9307      	str	r3, [sp, #28]
 8009fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d12a      	bne.n	800a008 <_dtoa_r+0x818>
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	e030      	b.n	800a018 <_dtoa_r+0x828>
 8009fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009fbc:	e795      	b.n	8009eea <_dtoa_r+0x6fa>
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8009fc4:	42bb      	cmp	r3, r7
 8009fc6:	bfbf      	itttt	lt
 8009fc8:	9b07      	ldrlt	r3, [sp, #28]
 8009fca:	9707      	strlt	r7, [sp, #28]
 8009fcc:	1afa      	sublt	r2, r7, r3
 8009fce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009fd0:	bfbb      	ittet	lt
 8009fd2:	189b      	addlt	r3, r3, r2
 8009fd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009fd6:	1bdf      	subge	r7, r3, r7
 8009fd8:	2700      	movlt	r7, #0
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	bfb5      	itete	lt
 8009fe0:	9b05      	ldrlt	r3, [sp, #20]
 8009fe2:	9d05      	ldrge	r5, [sp, #20]
 8009fe4:	eba3 0509 	sublt.w	r5, r3, r9
 8009fe8:	464b      	movge	r3, r9
 8009fea:	bfb8      	it	lt
 8009fec:	2300      	movlt	r3, #0
 8009fee:	e77e      	b.n	8009eee <_dtoa_r+0x6fe>
 8009ff0:	9f07      	ldr	r7, [sp, #28]
 8009ff2:	9d05      	ldr	r5, [sp, #20]
 8009ff4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009ff6:	e783      	b.n	8009f00 <_dtoa_r+0x710>
 8009ff8:	9a07      	ldr	r2, [sp, #28]
 8009ffa:	e7ab      	b.n	8009f54 <_dtoa_r+0x764>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e7d4      	b.n	8009faa <_dtoa_r+0x7ba>
 800a000:	9b00      	ldr	r3, [sp, #0]
 800a002:	e7d2      	b.n	8009faa <_dtoa_r+0x7ba>
 800a004:	2300      	movs	r3, #0
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a00e:	6918      	ldr	r0, [r3, #16]
 800a010:	f000 fdc9 	bl	800aba6 <__hi0bits>
 800a014:	f1c0 0020 	rsb	r0, r0, #32
 800a018:	4440      	add	r0, r8
 800a01a:	f010 001f 	ands.w	r0, r0, #31
 800a01e:	d047      	beq.n	800a0b0 <_dtoa_r+0x8c0>
 800a020:	f1c0 0320 	rsb	r3, r0, #32
 800a024:	2b04      	cmp	r3, #4
 800a026:	dd3b      	ble.n	800a0a0 <_dtoa_r+0x8b0>
 800a028:	9b05      	ldr	r3, [sp, #20]
 800a02a:	f1c0 001c 	rsb	r0, r0, #28
 800a02e:	4403      	add	r3, r0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	4405      	add	r5, r0
 800a034:	4480      	add	r8, r0
 800a036:	9b05      	ldr	r3, [sp, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dd05      	ble.n	800a048 <_dtoa_r+0x858>
 800a03c:	461a      	mov	r2, r3
 800a03e:	9904      	ldr	r1, [sp, #16]
 800a040:	4620      	mov	r0, r4
 800a042:	f000 feeb 	bl	800ae1c <__lshift>
 800a046:	9004      	str	r0, [sp, #16]
 800a048:	f1b8 0f00 	cmp.w	r8, #0
 800a04c:	dd05      	ble.n	800a05a <_dtoa_r+0x86a>
 800a04e:	4639      	mov	r1, r7
 800a050:	4642      	mov	r2, r8
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fee2 	bl	800ae1c <__lshift>
 800a058:	4607      	mov	r7, r0
 800a05a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a05c:	b353      	cbz	r3, 800a0b4 <_dtoa_r+0x8c4>
 800a05e:	4639      	mov	r1, r7
 800a060:	9804      	ldr	r0, [sp, #16]
 800a062:	f000 ff2f 	bl	800aec4 <__mcmp>
 800a066:	2800      	cmp	r0, #0
 800a068:	da24      	bge.n	800a0b4 <_dtoa_r+0x8c4>
 800a06a:	2300      	movs	r3, #0
 800a06c:	220a      	movs	r2, #10
 800a06e:	9904      	ldr	r1, [sp, #16]
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fd1f 	bl	800aab4 <__multadd>
 800a076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a078:	9004      	str	r0, [sp, #16]
 800a07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 814d 	beq.w	800a31e <_dtoa_r+0xb2e>
 800a084:	2300      	movs	r3, #0
 800a086:	4631      	mov	r1, r6
 800a088:	220a      	movs	r2, #10
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fd12 	bl	800aab4 <__multadd>
 800a090:	9b02      	ldr	r3, [sp, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	4606      	mov	r6, r0
 800a096:	dc4f      	bgt.n	800a138 <_dtoa_r+0x948>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	dd4c      	ble.n	800a138 <_dtoa_r+0x948>
 800a09e:	e011      	b.n	800a0c4 <_dtoa_r+0x8d4>
 800a0a0:	d0c9      	beq.n	800a036 <_dtoa_r+0x846>
 800a0a2:	9a05      	ldr	r2, [sp, #20]
 800a0a4:	331c      	adds	r3, #28
 800a0a6:	441a      	add	r2, r3
 800a0a8:	9205      	str	r2, [sp, #20]
 800a0aa:	441d      	add	r5, r3
 800a0ac:	4498      	add	r8, r3
 800a0ae:	e7c2      	b.n	800a036 <_dtoa_r+0x846>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	e7f6      	b.n	800a0a2 <_dtoa_r+0x8b2>
 800a0b4:	f1b9 0f00 	cmp.w	r9, #0
 800a0b8:	dc38      	bgt.n	800a12c <_dtoa_r+0x93c>
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	2b02      	cmp	r3, #2
 800a0be:	dd35      	ble.n	800a12c <_dtoa_r+0x93c>
 800a0c0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	b963      	cbnz	r3, 800a0e2 <_dtoa_r+0x8f2>
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	2205      	movs	r2, #5
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fcf1 	bl	800aab4 <__multadd>
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4607      	mov	r7, r0
 800a0d6:	9804      	ldr	r0, [sp, #16]
 800a0d8:	f000 fef4 	bl	800aec4 <__mcmp>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	f73f adcc 	bgt.w	8009c7a <_dtoa_r+0x48a>
 800a0e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0e4:	465d      	mov	r5, fp
 800a0e6:	ea6f 0a03 	mvn.w	sl, r3
 800a0ea:	f04f 0900 	mov.w	r9, #0
 800a0ee:	4639      	mov	r1, r7
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fcc8 	bl	800aa86 <_Bfree>
 800a0f6:	2e00      	cmp	r6, #0
 800a0f8:	f43f aeb7 	beq.w	8009e6a <_dtoa_r+0x67a>
 800a0fc:	f1b9 0f00 	cmp.w	r9, #0
 800a100:	d005      	beq.n	800a10e <_dtoa_r+0x91e>
 800a102:	45b1      	cmp	r9, r6
 800a104:	d003      	beq.n	800a10e <_dtoa_r+0x91e>
 800a106:	4649      	mov	r1, r9
 800a108:	4620      	mov	r0, r4
 800a10a:	f000 fcbc 	bl	800aa86 <_Bfree>
 800a10e:	4631      	mov	r1, r6
 800a110:	4620      	mov	r0, r4
 800a112:	f000 fcb8 	bl	800aa86 <_Bfree>
 800a116:	e6a8      	b.n	8009e6a <_dtoa_r+0x67a>
 800a118:	2700      	movs	r7, #0
 800a11a:	463e      	mov	r6, r7
 800a11c:	e7e1      	b.n	800a0e2 <_dtoa_r+0x8f2>
 800a11e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a122:	463e      	mov	r6, r7
 800a124:	e5a9      	b.n	8009c7a <_dtoa_r+0x48a>
 800a126:	bf00      	nop
 800a128:	40240000 	.word	0x40240000
 800a12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 80fa 	beq.w	800a32c <_dtoa_r+0xb3c>
 800a138:	2d00      	cmp	r5, #0
 800a13a:	dd05      	ble.n	800a148 <_dtoa_r+0x958>
 800a13c:	4631      	mov	r1, r6
 800a13e:	462a      	mov	r2, r5
 800a140:	4620      	mov	r0, r4
 800a142:	f000 fe6b 	bl	800ae1c <__lshift>
 800a146:	4606      	mov	r6, r0
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d04c      	beq.n	800a1e8 <_dtoa_r+0x9f8>
 800a14e:	6871      	ldr	r1, [r6, #4]
 800a150:	4620      	mov	r0, r4
 800a152:	f000 fc64 	bl	800aa1e <_Balloc>
 800a156:	6932      	ldr	r2, [r6, #16]
 800a158:	3202      	adds	r2, #2
 800a15a:	4605      	mov	r5, r0
 800a15c:	0092      	lsls	r2, r2, #2
 800a15e:	f106 010c 	add.w	r1, r6, #12
 800a162:	300c      	adds	r0, #12
 800a164:	f000 fc50 	bl	800aa08 <memcpy>
 800a168:	2201      	movs	r2, #1
 800a16a:	4629      	mov	r1, r5
 800a16c:	4620      	mov	r0, r4
 800a16e:	f000 fe55 	bl	800ae1c <__lshift>
 800a172:	9b00      	ldr	r3, [sp, #0]
 800a174:	f8cd b014 	str.w	fp, [sp, #20]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	46b1      	mov	r9, r6
 800a17e:	9307      	str	r3, [sp, #28]
 800a180:	4606      	mov	r6, r0
 800a182:	4639      	mov	r1, r7
 800a184:	9804      	ldr	r0, [sp, #16]
 800a186:	f7ff faa5 	bl	80096d4 <quorem>
 800a18a:	4649      	mov	r1, r9
 800a18c:	4605      	mov	r5, r0
 800a18e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a192:	9804      	ldr	r0, [sp, #16]
 800a194:	f000 fe96 	bl	800aec4 <__mcmp>
 800a198:	4632      	mov	r2, r6
 800a19a:	9000      	str	r0, [sp, #0]
 800a19c:	4639      	mov	r1, r7
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 feaa 	bl	800aef8 <__mdiff>
 800a1a4:	68c3      	ldr	r3, [r0, #12]
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	bb03      	cbnz	r3, 800a1ec <_dtoa_r+0x9fc>
 800a1aa:	4601      	mov	r1, r0
 800a1ac:	9008      	str	r0, [sp, #32]
 800a1ae:	9804      	ldr	r0, [sp, #16]
 800a1b0:	f000 fe88 	bl	800aec4 <__mcmp>
 800a1b4:	9a08      	ldr	r2, [sp, #32]
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4611      	mov	r1, r2
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	9308      	str	r3, [sp, #32]
 800a1be:	f000 fc62 	bl	800aa86 <_Bfree>
 800a1c2:	9b08      	ldr	r3, [sp, #32]
 800a1c4:	b9a3      	cbnz	r3, 800a1f0 <_dtoa_r+0xa00>
 800a1c6:	9a06      	ldr	r2, [sp, #24]
 800a1c8:	b992      	cbnz	r2, 800a1f0 <_dtoa_r+0xa00>
 800a1ca:	9a07      	ldr	r2, [sp, #28]
 800a1cc:	b982      	cbnz	r2, 800a1f0 <_dtoa_r+0xa00>
 800a1ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a1d2:	d029      	beq.n	800a228 <_dtoa_r+0xa38>
 800a1d4:	9b00      	ldr	r3, [sp, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	dd01      	ble.n	800a1de <_dtoa_r+0x9ee>
 800a1da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a1de:	9b05      	ldr	r3, [sp, #20]
 800a1e0:	1c5d      	adds	r5, r3, #1
 800a1e2:	f883 8000 	strb.w	r8, [r3]
 800a1e6:	e782      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a1e8:	4630      	mov	r0, r6
 800a1ea:	e7c2      	b.n	800a172 <_dtoa_r+0x982>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e7e3      	b.n	800a1b8 <_dtoa_r+0x9c8>
 800a1f0:	9a00      	ldr	r2, [sp, #0]
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	db04      	blt.n	800a200 <_dtoa_r+0xa10>
 800a1f6:	d125      	bne.n	800a244 <_dtoa_r+0xa54>
 800a1f8:	9a06      	ldr	r2, [sp, #24]
 800a1fa:	bb1a      	cbnz	r2, 800a244 <_dtoa_r+0xa54>
 800a1fc:	9a07      	ldr	r2, [sp, #28]
 800a1fe:	bb0a      	cbnz	r2, 800a244 <_dtoa_r+0xa54>
 800a200:	2b00      	cmp	r3, #0
 800a202:	ddec      	ble.n	800a1de <_dtoa_r+0x9ee>
 800a204:	2201      	movs	r2, #1
 800a206:	9904      	ldr	r1, [sp, #16]
 800a208:	4620      	mov	r0, r4
 800a20a:	f000 fe07 	bl	800ae1c <__lshift>
 800a20e:	4639      	mov	r1, r7
 800a210:	9004      	str	r0, [sp, #16]
 800a212:	f000 fe57 	bl	800aec4 <__mcmp>
 800a216:	2800      	cmp	r0, #0
 800a218:	dc03      	bgt.n	800a222 <_dtoa_r+0xa32>
 800a21a:	d1e0      	bne.n	800a1de <_dtoa_r+0x9ee>
 800a21c:	f018 0f01 	tst.w	r8, #1
 800a220:	d0dd      	beq.n	800a1de <_dtoa_r+0x9ee>
 800a222:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a226:	d1d8      	bne.n	800a1da <_dtoa_r+0x9ea>
 800a228:	9b05      	ldr	r3, [sp, #20]
 800a22a:	9a05      	ldr	r2, [sp, #20]
 800a22c:	1c5d      	adds	r5, r3, #1
 800a22e:	2339      	movs	r3, #57	; 0x39
 800a230:	7013      	strb	r3, [r2, #0]
 800a232:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a236:	2b39      	cmp	r3, #57	; 0x39
 800a238:	f105 32ff 	add.w	r2, r5, #4294967295
 800a23c:	d04f      	beq.n	800a2de <_dtoa_r+0xaee>
 800a23e:	3301      	adds	r3, #1
 800a240:	7013      	strb	r3, [r2, #0]
 800a242:	e754      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a244:	9a05      	ldr	r2, [sp, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	f102 0501 	add.w	r5, r2, #1
 800a24c:	dd06      	ble.n	800a25c <_dtoa_r+0xa6c>
 800a24e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a252:	d0e9      	beq.n	800a228 <_dtoa_r+0xa38>
 800a254:	f108 0801 	add.w	r8, r8, #1
 800a258:	9b05      	ldr	r3, [sp, #20]
 800a25a:	e7c2      	b.n	800a1e2 <_dtoa_r+0x9f2>
 800a25c:	9a02      	ldr	r2, [sp, #8]
 800a25e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a262:	eba5 030b 	sub.w	r3, r5, fp
 800a266:	4293      	cmp	r3, r2
 800a268:	d021      	beq.n	800a2ae <_dtoa_r+0xabe>
 800a26a:	2300      	movs	r3, #0
 800a26c:	220a      	movs	r2, #10
 800a26e:	9904      	ldr	r1, [sp, #16]
 800a270:	4620      	mov	r0, r4
 800a272:	f000 fc1f 	bl	800aab4 <__multadd>
 800a276:	45b1      	cmp	r9, r6
 800a278:	9004      	str	r0, [sp, #16]
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	f04f 020a 	mov.w	r2, #10
 800a282:	4649      	mov	r1, r9
 800a284:	4620      	mov	r0, r4
 800a286:	d105      	bne.n	800a294 <_dtoa_r+0xaa4>
 800a288:	f000 fc14 	bl	800aab4 <__multadd>
 800a28c:	4681      	mov	r9, r0
 800a28e:	4606      	mov	r6, r0
 800a290:	9505      	str	r5, [sp, #20]
 800a292:	e776      	b.n	800a182 <_dtoa_r+0x992>
 800a294:	f000 fc0e 	bl	800aab4 <__multadd>
 800a298:	4631      	mov	r1, r6
 800a29a:	4681      	mov	r9, r0
 800a29c:	2300      	movs	r3, #0
 800a29e:	220a      	movs	r2, #10
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fc07 	bl	800aab4 <__multadd>
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	e7f2      	b.n	800a290 <_dtoa_r+0xaa0>
 800a2aa:	f04f 0900 	mov.w	r9, #0
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	9904      	ldr	r1, [sp, #16]
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fdb2 	bl	800ae1c <__lshift>
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	9004      	str	r0, [sp, #16]
 800a2bc:	f000 fe02 	bl	800aec4 <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	dcb6      	bgt.n	800a232 <_dtoa_r+0xa42>
 800a2c4:	d102      	bne.n	800a2cc <_dtoa_r+0xadc>
 800a2c6:	f018 0f01 	tst.w	r8, #1
 800a2ca:	d1b2      	bne.n	800a232 <_dtoa_r+0xa42>
 800a2cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a2d0:	2b30      	cmp	r3, #48	; 0x30
 800a2d2:	f105 32ff 	add.w	r2, r5, #4294967295
 800a2d6:	f47f af0a 	bne.w	800a0ee <_dtoa_r+0x8fe>
 800a2da:	4615      	mov	r5, r2
 800a2dc:	e7f6      	b.n	800a2cc <_dtoa_r+0xadc>
 800a2de:	4593      	cmp	fp, r2
 800a2e0:	d105      	bne.n	800a2ee <_dtoa_r+0xafe>
 800a2e2:	2331      	movs	r3, #49	; 0x31
 800a2e4:	f10a 0a01 	add.w	sl, sl, #1
 800a2e8:	f88b 3000 	strb.w	r3, [fp]
 800a2ec:	e6ff      	b.n	800a0ee <_dtoa_r+0x8fe>
 800a2ee:	4615      	mov	r5, r2
 800a2f0:	e79f      	b.n	800a232 <_dtoa_r+0xa42>
 800a2f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a358 <_dtoa_r+0xb68>
 800a2f6:	e007      	b.n	800a308 <_dtoa_r+0xb18>
 800a2f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a35c <_dtoa_r+0xb6c>
 800a2fe:	b11b      	cbz	r3, 800a308 <_dtoa_r+0xb18>
 800a300:	f10b 0308 	add.w	r3, fp, #8
 800a304:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	4658      	mov	r0, fp
 800a30a:	b017      	add	sp, #92	; 0x5c
 800a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	9b06      	ldr	r3, [sp, #24]
 800a312:	2b01      	cmp	r3, #1
 800a314:	f77f ae35 	ble.w	8009f82 <_dtoa_r+0x792>
 800a318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31a:	9307      	str	r3, [sp, #28]
 800a31c:	e649      	b.n	8009fb2 <_dtoa_r+0x7c2>
 800a31e:	9b02      	ldr	r3, [sp, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc03      	bgt.n	800a32c <_dtoa_r+0xb3c>
 800a324:	9b06      	ldr	r3, [sp, #24]
 800a326:	2b02      	cmp	r3, #2
 800a328:	f73f aecc 	bgt.w	800a0c4 <_dtoa_r+0x8d4>
 800a32c:	465d      	mov	r5, fp
 800a32e:	4639      	mov	r1, r7
 800a330:	9804      	ldr	r0, [sp, #16]
 800a332:	f7ff f9cf 	bl	80096d4 <quorem>
 800a336:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a33a:	f805 8b01 	strb.w	r8, [r5], #1
 800a33e:	9a02      	ldr	r2, [sp, #8]
 800a340:	eba5 030b 	sub.w	r3, r5, fp
 800a344:	429a      	cmp	r2, r3
 800a346:	ddb0      	ble.n	800a2aa <_dtoa_r+0xaba>
 800a348:	2300      	movs	r3, #0
 800a34a:	220a      	movs	r2, #10
 800a34c:	9904      	ldr	r1, [sp, #16]
 800a34e:	4620      	mov	r0, r4
 800a350:	f000 fbb0 	bl	800aab4 <__multadd>
 800a354:	9004      	str	r0, [sp, #16]
 800a356:	e7ea      	b.n	800a32e <_dtoa_r+0xb3e>
 800a358:	0800b768 	.word	0x0800b768
 800a35c:	0800b7e8 	.word	0x0800b7e8

0800a360 <rshift>:
 800a360:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a362:	6906      	ldr	r6, [r0, #16]
 800a364:	114b      	asrs	r3, r1, #5
 800a366:	429e      	cmp	r6, r3
 800a368:	f100 0414 	add.w	r4, r0, #20
 800a36c:	dd30      	ble.n	800a3d0 <rshift+0x70>
 800a36e:	f011 011f 	ands.w	r1, r1, #31
 800a372:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a376:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a37a:	d108      	bne.n	800a38e <rshift+0x2e>
 800a37c:	4621      	mov	r1, r4
 800a37e:	42b2      	cmp	r2, r6
 800a380:	460b      	mov	r3, r1
 800a382:	d211      	bcs.n	800a3a8 <rshift+0x48>
 800a384:	f852 3b04 	ldr.w	r3, [r2], #4
 800a388:	f841 3b04 	str.w	r3, [r1], #4
 800a38c:	e7f7      	b.n	800a37e <rshift+0x1e>
 800a38e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a392:	f1c1 0c20 	rsb	ip, r1, #32
 800a396:	40cd      	lsrs	r5, r1
 800a398:	3204      	adds	r2, #4
 800a39a:	4623      	mov	r3, r4
 800a39c:	42b2      	cmp	r2, r6
 800a39e:	4617      	mov	r7, r2
 800a3a0:	d30c      	bcc.n	800a3bc <rshift+0x5c>
 800a3a2:	601d      	str	r5, [r3, #0]
 800a3a4:	b105      	cbz	r5, 800a3a8 <rshift+0x48>
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	1b1a      	subs	r2, r3, r4
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3b0:	bf08      	it	eq
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	6102      	str	r2, [r0, #16]
 800a3b6:	bf08      	it	eq
 800a3b8:	6143      	streq	r3, [r0, #20]
 800a3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3bc:	683f      	ldr	r7, [r7, #0]
 800a3be:	fa07 f70c 	lsl.w	r7, r7, ip
 800a3c2:	433d      	orrs	r5, r7
 800a3c4:	f843 5b04 	str.w	r5, [r3], #4
 800a3c8:	f852 5b04 	ldr.w	r5, [r2], #4
 800a3cc:	40cd      	lsrs	r5, r1
 800a3ce:	e7e5      	b.n	800a39c <rshift+0x3c>
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	e7e9      	b.n	800a3a8 <rshift+0x48>

0800a3d4 <__hexdig_fun>:
 800a3d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3d8:	2b09      	cmp	r3, #9
 800a3da:	d802      	bhi.n	800a3e2 <__hexdig_fun+0xe>
 800a3dc:	3820      	subs	r0, #32
 800a3de:	b2c0      	uxtb	r0, r0
 800a3e0:	4770      	bx	lr
 800a3e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3e6:	2b05      	cmp	r3, #5
 800a3e8:	d801      	bhi.n	800a3ee <__hexdig_fun+0x1a>
 800a3ea:	3847      	subs	r0, #71	; 0x47
 800a3ec:	e7f7      	b.n	800a3de <__hexdig_fun+0xa>
 800a3ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3f2:	2b05      	cmp	r3, #5
 800a3f4:	d801      	bhi.n	800a3fa <__hexdig_fun+0x26>
 800a3f6:	3827      	subs	r0, #39	; 0x27
 800a3f8:	e7f1      	b.n	800a3de <__hexdig_fun+0xa>
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	4770      	bx	lr

0800a3fe <__gethex>:
 800a3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a402:	b08b      	sub	sp, #44	; 0x2c
 800a404:	468a      	mov	sl, r1
 800a406:	9002      	str	r0, [sp, #8]
 800a408:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a40a:	9306      	str	r3, [sp, #24]
 800a40c:	4690      	mov	r8, r2
 800a40e:	f000 fad0 	bl	800a9b2 <__localeconv_l>
 800a412:	6803      	ldr	r3, [r0, #0]
 800a414:	9303      	str	r3, [sp, #12]
 800a416:	4618      	mov	r0, r3
 800a418:	f7f5 feda 	bl	80001d0 <strlen>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	9001      	str	r0, [sp, #4]
 800a420:	4403      	add	r3, r0
 800a422:	f04f 0b00 	mov.w	fp, #0
 800a426:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a42a:	9307      	str	r3, [sp, #28]
 800a42c:	f8da 3000 	ldr.w	r3, [sl]
 800a430:	3302      	adds	r3, #2
 800a432:	461f      	mov	r7, r3
 800a434:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a438:	2830      	cmp	r0, #48	; 0x30
 800a43a:	d06c      	beq.n	800a516 <__gethex+0x118>
 800a43c:	f7ff ffca 	bl	800a3d4 <__hexdig_fun>
 800a440:	4604      	mov	r4, r0
 800a442:	2800      	cmp	r0, #0
 800a444:	d16a      	bne.n	800a51c <__gethex+0x11e>
 800a446:	9a01      	ldr	r2, [sp, #4]
 800a448:	9903      	ldr	r1, [sp, #12]
 800a44a:	4638      	mov	r0, r7
 800a44c:	f001 f8fe 	bl	800b64c <strncmp>
 800a450:	2800      	cmp	r0, #0
 800a452:	d166      	bne.n	800a522 <__gethex+0x124>
 800a454:	9b01      	ldr	r3, [sp, #4]
 800a456:	5cf8      	ldrb	r0, [r7, r3]
 800a458:	18fe      	adds	r6, r7, r3
 800a45a:	f7ff ffbb 	bl	800a3d4 <__hexdig_fun>
 800a45e:	2800      	cmp	r0, #0
 800a460:	d062      	beq.n	800a528 <__gethex+0x12a>
 800a462:	4633      	mov	r3, r6
 800a464:	7818      	ldrb	r0, [r3, #0]
 800a466:	2830      	cmp	r0, #48	; 0x30
 800a468:	461f      	mov	r7, r3
 800a46a:	f103 0301 	add.w	r3, r3, #1
 800a46e:	d0f9      	beq.n	800a464 <__gethex+0x66>
 800a470:	f7ff ffb0 	bl	800a3d4 <__hexdig_fun>
 800a474:	fab0 f580 	clz	r5, r0
 800a478:	096d      	lsrs	r5, r5, #5
 800a47a:	4634      	mov	r4, r6
 800a47c:	f04f 0b01 	mov.w	fp, #1
 800a480:	463a      	mov	r2, r7
 800a482:	4616      	mov	r6, r2
 800a484:	3201      	adds	r2, #1
 800a486:	7830      	ldrb	r0, [r6, #0]
 800a488:	f7ff ffa4 	bl	800a3d4 <__hexdig_fun>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	d1f8      	bne.n	800a482 <__gethex+0x84>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	9903      	ldr	r1, [sp, #12]
 800a494:	4630      	mov	r0, r6
 800a496:	f001 f8d9 	bl	800b64c <strncmp>
 800a49a:	b950      	cbnz	r0, 800a4b2 <__gethex+0xb4>
 800a49c:	b954      	cbnz	r4, 800a4b4 <__gethex+0xb6>
 800a49e:	9b01      	ldr	r3, [sp, #4]
 800a4a0:	18f4      	adds	r4, r6, r3
 800a4a2:	4622      	mov	r2, r4
 800a4a4:	4616      	mov	r6, r2
 800a4a6:	3201      	adds	r2, #1
 800a4a8:	7830      	ldrb	r0, [r6, #0]
 800a4aa:	f7ff ff93 	bl	800a3d4 <__hexdig_fun>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	d1f8      	bne.n	800a4a4 <__gethex+0xa6>
 800a4b2:	b10c      	cbz	r4, 800a4b8 <__gethex+0xba>
 800a4b4:	1ba4      	subs	r4, r4, r6
 800a4b6:	00a4      	lsls	r4, r4, #2
 800a4b8:	7833      	ldrb	r3, [r6, #0]
 800a4ba:	2b50      	cmp	r3, #80	; 0x50
 800a4bc:	d001      	beq.n	800a4c2 <__gethex+0xc4>
 800a4be:	2b70      	cmp	r3, #112	; 0x70
 800a4c0:	d140      	bne.n	800a544 <__gethex+0x146>
 800a4c2:	7873      	ldrb	r3, [r6, #1]
 800a4c4:	2b2b      	cmp	r3, #43	; 0x2b
 800a4c6:	d031      	beq.n	800a52c <__gethex+0x12e>
 800a4c8:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ca:	d033      	beq.n	800a534 <__gethex+0x136>
 800a4cc:	1c71      	adds	r1, r6, #1
 800a4ce:	f04f 0900 	mov.w	r9, #0
 800a4d2:	7808      	ldrb	r0, [r1, #0]
 800a4d4:	f7ff ff7e 	bl	800a3d4 <__hexdig_fun>
 800a4d8:	1e43      	subs	r3, r0, #1
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	2b18      	cmp	r3, #24
 800a4de:	d831      	bhi.n	800a544 <__gethex+0x146>
 800a4e0:	f1a0 0210 	sub.w	r2, r0, #16
 800a4e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4e8:	f7ff ff74 	bl	800a3d4 <__hexdig_fun>
 800a4ec:	1e43      	subs	r3, r0, #1
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b18      	cmp	r3, #24
 800a4f2:	d922      	bls.n	800a53a <__gethex+0x13c>
 800a4f4:	f1b9 0f00 	cmp.w	r9, #0
 800a4f8:	d000      	beq.n	800a4fc <__gethex+0xfe>
 800a4fa:	4252      	negs	r2, r2
 800a4fc:	4414      	add	r4, r2
 800a4fe:	f8ca 1000 	str.w	r1, [sl]
 800a502:	b30d      	cbz	r5, 800a548 <__gethex+0x14a>
 800a504:	f1bb 0f00 	cmp.w	fp, #0
 800a508:	bf0c      	ite	eq
 800a50a:	2706      	moveq	r7, #6
 800a50c:	2700      	movne	r7, #0
 800a50e:	4638      	mov	r0, r7
 800a510:	b00b      	add	sp, #44	; 0x2c
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	f10b 0b01 	add.w	fp, fp, #1
 800a51a:	e78a      	b.n	800a432 <__gethex+0x34>
 800a51c:	2500      	movs	r5, #0
 800a51e:	462c      	mov	r4, r5
 800a520:	e7ae      	b.n	800a480 <__gethex+0x82>
 800a522:	463e      	mov	r6, r7
 800a524:	2501      	movs	r5, #1
 800a526:	e7c7      	b.n	800a4b8 <__gethex+0xba>
 800a528:	4604      	mov	r4, r0
 800a52a:	e7fb      	b.n	800a524 <__gethex+0x126>
 800a52c:	f04f 0900 	mov.w	r9, #0
 800a530:	1cb1      	adds	r1, r6, #2
 800a532:	e7ce      	b.n	800a4d2 <__gethex+0xd4>
 800a534:	f04f 0901 	mov.w	r9, #1
 800a538:	e7fa      	b.n	800a530 <__gethex+0x132>
 800a53a:	230a      	movs	r3, #10
 800a53c:	fb03 0202 	mla	r2, r3, r2, r0
 800a540:	3a10      	subs	r2, #16
 800a542:	e7cf      	b.n	800a4e4 <__gethex+0xe6>
 800a544:	4631      	mov	r1, r6
 800a546:	e7da      	b.n	800a4fe <__gethex+0x100>
 800a548:	1bf3      	subs	r3, r6, r7
 800a54a:	3b01      	subs	r3, #1
 800a54c:	4629      	mov	r1, r5
 800a54e:	2b07      	cmp	r3, #7
 800a550:	dc49      	bgt.n	800a5e6 <__gethex+0x1e8>
 800a552:	9802      	ldr	r0, [sp, #8]
 800a554:	f000 fa63 	bl	800aa1e <_Balloc>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	f100 0914 	add.w	r9, r0, #20
 800a55e:	f04f 0b00 	mov.w	fp, #0
 800a562:	f1c3 0301 	rsb	r3, r3, #1
 800a566:	4605      	mov	r5, r0
 800a568:	f8cd 9010 	str.w	r9, [sp, #16]
 800a56c:	46da      	mov	sl, fp
 800a56e:	9308      	str	r3, [sp, #32]
 800a570:	42b7      	cmp	r7, r6
 800a572:	d33b      	bcc.n	800a5ec <__gethex+0x1ee>
 800a574:	9804      	ldr	r0, [sp, #16]
 800a576:	f840 ab04 	str.w	sl, [r0], #4
 800a57a:	eba0 0009 	sub.w	r0, r0, r9
 800a57e:	1080      	asrs	r0, r0, #2
 800a580:	6128      	str	r0, [r5, #16]
 800a582:	0147      	lsls	r7, r0, #5
 800a584:	4650      	mov	r0, sl
 800a586:	f000 fb0e 	bl	800aba6 <__hi0bits>
 800a58a:	f8d8 6000 	ldr.w	r6, [r8]
 800a58e:	1a3f      	subs	r7, r7, r0
 800a590:	42b7      	cmp	r7, r6
 800a592:	dd64      	ble.n	800a65e <__gethex+0x260>
 800a594:	1bbf      	subs	r7, r7, r6
 800a596:	4639      	mov	r1, r7
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 fe1d 	bl	800b1d8 <__any_on>
 800a59e:	4682      	mov	sl, r0
 800a5a0:	b178      	cbz	r0, 800a5c2 <__gethex+0x1c4>
 800a5a2:	1e7b      	subs	r3, r7, #1
 800a5a4:	1159      	asrs	r1, r3, #5
 800a5a6:	f003 021f 	and.w	r2, r3, #31
 800a5aa:	f04f 0a01 	mov.w	sl, #1
 800a5ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5b2:	fa0a f202 	lsl.w	r2, sl, r2
 800a5b6:	420a      	tst	r2, r1
 800a5b8:	d003      	beq.n	800a5c2 <__gethex+0x1c4>
 800a5ba:	4553      	cmp	r3, sl
 800a5bc:	dc46      	bgt.n	800a64c <__gethex+0x24e>
 800a5be:	f04f 0a02 	mov.w	sl, #2
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	f7ff fecb 	bl	800a360 <rshift>
 800a5ca:	443c      	add	r4, r7
 800a5cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	da52      	bge.n	800a67a <__gethex+0x27c>
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	9802      	ldr	r0, [sp, #8]
 800a5d8:	f000 fa55 	bl	800aa86 <_Bfree>
 800a5dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	27a3      	movs	r7, #163	; 0xa3
 800a5e4:	e793      	b.n	800a50e <__gethex+0x110>
 800a5e6:	3101      	adds	r1, #1
 800a5e8:	105b      	asrs	r3, r3, #1
 800a5ea:	e7b0      	b.n	800a54e <__gethex+0x150>
 800a5ec:	1e73      	subs	r3, r6, #1
 800a5ee:	9305      	str	r3, [sp, #20]
 800a5f0:	9a07      	ldr	r2, [sp, #28]
 800a5f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d018      	beq.n	800a62c <__gethex+0x22e>
 800a5fa:	f1bb 0f20 	cmp.w	fp, #32
 800a5fe:	d107      	bne.n	800a610 <__gethex+0x212>
 800a600:	9b04      	ldr	r3, [sp, #16]
 800a602:	f8c3 a000 	str.w	sl, [r3]
 800a606:	3304      	adds	r3, #4
 800a608:	f04f 0a00 	mov.w	sl, #0
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	46d3      	mov	fp, sl
 800a610:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a614:	f7ff fede 	bl	800a3d4 <__hexdig_fun>
 800a618:	f000 000f 	and.w	r0, r0, #15
 800a61c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a620:	ea4a 0a00 	orr.w	sl, sl, r0
 800a624:	f10b 0b04 	add.w	fp, fp, #4
 800a628:	9b05      	ldr	r3, [sp, #20]
 800a62a:	e00d      	b.n	800a648 <__gethex+0x24a>
 800a62c:	9b05      	ldr	r3, [sp, #20]
 800a62e:	9a08      	ldr	r2, [sp, #32]
 800a630:	4413      	add	r3, r2
 800a632:	42bb      	cmp	r3, r7
 800a634:	d3e1      	bcc.n	800a5fa <__gethex+0x1fc>
 800a636:	4618      	mov	r0, r3
 800a638:	9a01      	ldr	r2, [sp, #4]
 800a63a:	9903      	ldr	r1, [sp, #12]
 800a63c:	9309      	str	r3, [sp, #36]	; 0x24
 800a63e:	f001 f805 	bl	800b64c <strncmp>
 800a642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a644:	2800      	cmp	r0, #0
 800a646:	d1d8      	bne.n	800a5fa <__gethex+0x1fc>
 800a648:	461e      	mov	r6, r3
 800a64a:	e791      	b.n	800a570 <__gethex+0x172>
 800a64c:	1eb9      	subs	r1, r7, #2
 800a64e:	4628      	mov	r0, r5
 800a650:	f000 fdc2 	bl	800b1d8 <__any_on>
 800a654:	2800      	cmp	r0, #0
 800a656:	d0b2      	beq.n	800a5be <__gethex+0x1c0>
 800a658:	f04f 0a03 	mov.w	sl, #3
 800a65c:	e7b1      	b.n	800a5c2 <__gethex+0x1c4>
 800a65e:	da09      	bge.n	800a674 <__gethex+0x276>
 800a660:	1bf7      	subs	r7, r6, r7
 800a662:	4629      	mov	r1, r5
 800a664:	463a      	mov	r2, r7
 800a666:	9802      	ldr	r0, [sp, #8]
 800a668:	f000 fbd8 	bl	800ae1c <__lshift>
 800a66c:	1be4      	subs	r4, r4, r7
 800a66e:	4605      	mov	r5, r0
 800a670:	f100 0914 	add.w	r9, r0, #20
 800a674:	f04f 0a00 	mov.w	sl, #0
 800a678:	e7a8      	b.n	800a5cc <__gethex+0x1ce>
 800a67a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a67e:	42a0      	cmp	r0, r4
 800a680:	dd6a      	ble.n	800a758 <__gethex+0x35a>
 800a682:	1b04      	subs	r4, r0, r4
 800a684:	42a6      	cmp	r6, r4
 800a686:	dc2e      	bgt.n	800a6e6 <__gethex+0x2e8>
 800a688:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d022      	beq.n	800a6d6 <__gethex+0x2d8>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d024      	beq.n	800a6de <__gethex+0x2e0>
 800a694:	2b01      	cmp	r3, #1
 800a696:	d115      	bne.n	800a6c4 <__gethex+0x2c6>
 800a698:	42a6      	cmp	r6, r4
 800a69a:	d113      	bne.n	800a6c4 <__gethex+0x2c6>
 800a69c:	2e01      	cmp	r6, #1
 800a69e:	dc0b      	bgt.n	800a6b8 <__gethex+0x2ba>
 800a6a0:	9a06      	ldr	r2, [sp, #24]
 800a6a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6a6:	6013      	str	r3, [r2, #0]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	612b      	str	r3, [r5, #16]
 800a6ac:	f8c9 3000 	str.w	r3, [r9]
 800a6b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6b2:	2762      	movs	r7, #98	; 0x62
 800a6b4:	601d      	str	r5, [r3, #0]
 800a6b6:	e72a      	b.n	800a50e <__gethex+0x110>
 800a6b8:	1e71      	subs	r1, r6, #1
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	f000 fd8c 	bl	800b1d8 <__any_on>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d1ed      	bne.n	800a6a0 <__gethex+0x2a2>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	9802      	ldr	r0, [sp, #8]
 800a6c8:	f000 f9dd 	bl	800aa86 <_Bfree>
 800a6cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	2750      	movs	r7, #80	; 0x50
 800a6d4:	e71b      	b.n	800a50e <__gethex+0x110>
 800a6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0e1      	beq.n	800a6a0 <__gethex+0x2a2>
 800a6dc:	e7f2      	b.n	800a6c4 <__gethex+0x2c6>
 800a6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1dd      	bne.n	800a6a0 <__gethex+0x2a2>
 800a6e4:	e7ee      	b.n	800a6c4 <__gethex+0x2c6>
 800a6e6:	1e67      	subs	r7, r4, #1
 800a6e8:	f1ba 0f00 	cmp.w	sl, #0
 800a6ec:	d131      	bne.n	800a752 <__gethex+0x354>
 800a6ee:	b127      	cbz	r7, 800a6fa <__gethex+0x2fc>
 800a6f0:	4639      	mov	r1, r7
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 fd70 	bl	800b1d8 <__any_on>
 800a6f8:	4682      	mov	sl, r0
 800a6fa:	117a      	asrs	r2, r7, #5
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	f007 071f 	and.w	r7, r7, #31
 800a702:	fa03 f707 	lsl.w	r7, r3, r7
 800a706:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a70a:	4621      	mov	r1, r4
 800a70c:	421f      	tst	r7, r3
 800a70e:	4628      	mov	r0, r5
 800a710:	bf18      	it	ne
 800a712:	f04a 0a02 	orrne.w	sl, sl, #2
 800a716:	1b36      	subs	r6, r6, r4
 800a718:	f7ff fe22 	bl	800a360 <rshift>
 800a71c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a720:	2702      	movs	r7, #2
 800a722:	f1ba 0f00 	cmp.w	sl, #0
 800a726:	d048      	beq.n	800a7ba <__gethex+0x3bc>
 800a728:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d015      	beq.n	800a75c <__gethex+0x35e>
 800a730:	2b03      	cmp	r3, #3
 800a732:	d017      	beq.n	800a764 <__gethex+0x366>
 800a734:	2b01      	cmp	r3, #1
 800a736:	d109      	bne.n	800a74c <__gethex+0x34e>
 800a738:	f01a 0f02 	tst.w	sl, #2
 800a73c:	d006      	beq.n	800a74c <__gethex+0x34e>
 800a73e:	f8d9 3000 	ldr.w	r3, [r9]
 800a742:	ea4a 0a03 	orr.w	sl, sl, r3
 800a746:	f01a 0f01 	tst.w	sl, #1
 800a74a:	d10e      	bne.n	800a76a <__gethex+0x36c>
 800a74c:	f047 0710 	orr.w	r7, r7, #16
 800a750:	e033      	b.n	800a7ba <__gethex+0x3bc>
 800a752:	f04f 0a01 	mov.w	sl, #1
 800a756:	e7d0      	b.n	800a6fa <__gethex+0x2fc>
 800a758:	2701      	movs	r7, #1
 800a75a:	e7e2      	b.n	800a722 <__gethex+0x324>
 800a75c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a75e:	f1c3 0301 	rsb	r3, r3, #1
 800a762:	9315      	str	r3, [sp, #84]	; 0x54
 800a764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f0      	beq.n	800a74c <__gethex+0x34e>
 800a76a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a76e:	f105 0314 	add.w	r3, r5, #20
 800a772:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a776:	eb03 010a 	add.w	r1, r3, sl
 800a77a:	f04f 0c00 	mov.w	ip, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f853 2b04 	ldr.w	r2, [r3], #4
 800a784:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a788:	d01c      	beq.n	800a7c4 <__gethex+0x3c6>
 800a78a:	3201      	adds	r2, #1
 800a78c:	6002      	str	r2, [r0, #0]
 800a78e:	2f02      	cmp	r7, #2
 800a790:	f105 0314 	add.w	r3, r5, #20
 800a794:	d138      	bne.n	800a808 <__gethex+0x40a>
 800a796:	f8d8 2000 	ldr.w	r2, [r8]
 800a79a:	3a01      	subs	r2, #1
 800a79c:	42b2      	cmp	r2, r6
 800a79e:	d10a      	bne.n	800a7b6 <__gethex+0x3b8>
 800a7a0:	1171      	asrs	r1, r6, #5
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f006 061f 	and.w	r6, r6, #31
 800a7a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7ac:	fa02 f606 	lsl.w	r6, r2, r6
 800a7b0:	421e      	tst	r6, r3
 800a7b2:	bf18      	it	ne
 800a7b4:	4617      	movne	r7, r2
 800a7b6:	f047 0720 	orr.w	r7, r7, #32
 800a7ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7bc:	601d      	str	r5, [r3, #0]
 800a7be:	9b06      	ldr	r3, [sp, #24]
 800a7c0:	601c      	str	r4, [r3, #0]
 800a7c2:	e6a4      	b.n	800a50e <__gethex+0x110>
 800a7c4:	4299      	cmp	r1, r3
 800a7c6:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7ca:	d8d8      	bhi.n	800a77e <__gethex+0x380>
 800a7cc:	68ab      	ldr	r3, [r5, #8]
 800a7ce:	4599      	cmp	r9, r3
 800a7d0:	db12      	blt.n	800a7f8 <__gethex+0x3fa>
 800a7d2:	6869      	ldr	r1, [r5, #4]
 800a7d4:	9802      	ldr	r0, [sp, #8]
 800a7d6:	3101      	adds	r1, #1
 800a7d8:	f000 f921 	bl	800aa1e <_Balloc>
 800a7dc:	692a      	ldr	r2, [r5, #16]
 800a7de:	3202      	adds	r2, #2
 800a7e0:	f105 010c 	add.w	r1, r5, #12
 800a7e4:	4683      	mov	fp, r0
 800a7e6:	0092      	lsls	r2, r2, #2
 800a7e8:	300c      	adds	r0, #12
 800a7ea:	f000 f90d 	bl	800aa08 <memcpy>
 800a7ee:	4629      	mov	r1, r5
 800a7f0:	9802      	ldr	r0, [sp, #8]
 800a7f2:	f000 f948 	bl	800aa86 <_Bfree>
 800a7f6:	465d      	mov	r5, fp
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a800:	612a      	str	r2, [r5, #16]
 800a802:	2201      	movs	r2, #1
 800a804:	615a      	str	r2, [r3, #20]
 800a806:	e7c2      	b.n	800a78e <__gethex+0x390>
 800a808:	692a      	ldr	r2, [r5, #16]
 800a80a:	454a      	cmp	r2, r9
 800a80c:	dd0b      	ble.n	800a826 <__gethex+0x428>
 800a80e:	2101      	movs	r1, #1
 800a810:	4628      	mov	r0, r5
 800a812:	f7ff fda5 	bl	800a360 <rshift>
 800a816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a81a:	3401      	adds	r4, #1
 800a81c:	42a3      	cmp	r3, r4
 800a81e:	f6ff aed9 	blt.w	800a5d4 <__gethex+0x1d6>
 800a822:	2701      	movs	r7, #1
 800a824:	e7c7      	b.n	800a7b6 <__gethex+0x3b8>
 800a826:	f016 061f 	ands.w	r6, r6, #31
 800a82a:	d0fa      	beq.n	800a822 <__gethex+0x424>
 800a82c:	449a      	add	sl, r3
 800a82e:	f1c6 0620 	rsb	r6, r6, #32
 800a832:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a836:	f000 f9b6 	bl	800aba6 <__hi0bits>
 800a83a:	42b0      	cmp	r0, r6
 800a83c:	dbe7      	blt.n	800a80e <__gethex+0x410>
 800a83e:	e7f0      	b.n	800a822 <__gethex+0x424>

0800a840 <L_shift>:
 800a840:	f1c2 0208 	rsb	r2, r2, #8
 800a844:	0092      	lsls	r2, r2, #2
 800a846:	b570      	push	{r4, r5, r6, lr}
 800a848:	f1c2 0620 	rsb	r6, r2, #32
 800a84c:	6843      	ldr	r3, [r0, #4]
 800a84e:	6804      	ldr	r4, [r0, #0]
 800a850:	fa03 f506 	lsl.w	r5, r3, r6
 800a854:	432c      	orrs	r4, r5
 800a856:	40d3      	lsrs	r3, r2
 800a858:	6004      	str	r4, [r0, #0]
 800a85a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a85e:	4288      	cmp	r0, r1
 800a860:	d3f4      	bcc.n	800a84c <L_shift+0xc>
 800a862:	bd70      	pop	{r4, r5, r6, pc}

0800a864 <__match>:
 800a864:	b530      	push	{r4, r5, lr}
 800a866:	6803      	ldr	r3, [r0, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86e:	b914      	cbnz	r4, 800a876 <__match+0x12>
 800a870:	6003      	str	r3, [r0, #0]
 800a872:	2001      	movs	r0, #1
 800a874:	bd30      	pop	{r4, r5, pc}
 800a876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a87e:	2d19      	cmp	r5, #25
 800a880:	bf98      	it	ls
 800a882:	3220      	addls	r2, #32
 800a884:	42a2      	cmp	r2, r4
 800a886:	d0f0      	beq.n	800a86a <__match+0x6>
 800a888:	2000      	movs	r0, #0
 800a88a:	e7f3      	b.n	800a874 <__match+0x10>

0800a88c <__hexnan>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	680b      	ldr	r3, [r1, #0]
 800a892:	6801      	ldr	r1, [r0, #0]
 800a894:	115f      	asrs	r7, r3, #5
 800a896:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a89a:	f013 031f 	ands.w	r3, r3, #31
 800a89e:	b087      	sub	sp, #28
 800a8a0:	bf18      	it	ne
 800a8a2:	3704      	addne	r7, #4
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	1f3e      	subs	r6, r7, #4
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	4690      	mov	r8, r2
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f847 5c04 	str.w	r5, [r7, #-4]
 800a8b2:	46b1      	mov	r9, r6
 800a8b4:	4634      	mov	r4, r6
 800a8b6:	9502      	str	r5, [sp, #8]
 800a8b8:	46ab      	mov	fp, r5
 800a8ba:	784a      	ldrb	r2, [r1, #1]
 800a8bc:	1c4b      	adds	r3, r1, #1
 800a8be:	9303      	str	r3, [sp, #12]
 800a8c0:	b342      	cbz	r2, 800a914 <__hexnan+0x88>
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	9105      	str	r1, [sp, #20]
 800a8c6:	9204      	str	r2, [sp, #16]
 800a8c8:	f7ff fd84 	bl	800a3d4 <__hexdig_fun>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d143      	bne.n	800a958 <__hexnan+0xcc>
 800a8d0:	9a04      	ldr	r2, [sp, #16]
 800a8d2:	9905      	ldr	r1, [sp, #20]
 800a8d4:	2a20      	cmp	r2, #32
 800a8d6:	d818      	bhi.n	800a90a <__hexnan+0x7e>
 800a8d8:	9b02      	ldr	r3, [sp, #8]
 800a8da:	459b      	cmp	fp, r3
 800a8dc:	dd13      	ble.n	800a906 <__hexnan+0x7a>
 800a8de:	454c      	cmp	r4, r9
 800a8e0:	d206      	bcs.n	800a8f0 <__hexnan+0x64>
 800a8e2:	2d07      	cmp	r5, #7
 800a8e4:	dc04      	bgt.n	800a8f0 <__hexnan+0x64>
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f7ff ffa8 	bl	800a840 <L_shift>
 800a8f0:	4544      	cmp	r4, r8
 800a8f2:	d944      	bls.n	800a97e <__hexnan+0xf2>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	f1a4 0904 	sub.w	r9, r4, #4
 800a8fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8fe:	f8cd b008 	str.w	fp, [sp, #8]
 800a902:	464c      	mov	r4, r9
 800a904:	461d      	mov	r5, r3
 800a906:	9903      	ldr	r1, [sp, #12]
 800a908:	e7d7      	b.n	800a8ba <__hexnan+0x2e>
 800a90a:	2a29      	cmp	r2, #41	; 0x29
 800a90c:	d14a      	bne.n	800a9a4 <__hexnan+0x118>
 800a90e:	3102      	adds	r1, #2
 800a910:	f8ca 1000 	str.w	r1, [sl]
 800a914:	f1bb 0f00 	cmp.w	fp, #0
 800a918:	d044      	beq.n	800a9a4 <__hexnan+0x118>
 800a91a:	454c      	cmp	r4, r9
 800a91c:	d206      	bcs.n	800a92c <__hexnan+0xa0>
 800a91e:	2d07      	cmp	r5, #7
 800a920:	dc04      	bgt.n	800a92c <__hexnan+0xa0>
 800a922:	462a      	mov	r2, r5
 800a924:	4649      	mov	r1, r9
 800a926:	4620      	mov	r0, r4
 800a928:	f7ff ff8a 	bl	800a840 <L_shift>
 800a92c:	4544      	cmp	r4, r8
 800a92e:	d928      	bls.n	800a982 <__hexnan+0xf6>
 800a930:	4643      	mov	r3, r8
 800a932:	f854 2b04 	ldr.w	r2, [r4], #4
 800a936:	f843 2b04 	str.w	r2, [r3], #4
 800a93a:	42a6      	cmp	r6, r4
 800a93c:	d2f9      	bcs.n	800a932 <__hexnan+0xa6>
 800a93e:	2200      	movs	r2, #0
 800a940:	f843 2b04 	str.w	r2, [r3], #4
 800a944:	429e      	cmp	r6, r3
 800a946:	d2fb      	bcs.n	800a940 <__hexnan+0xb4>
 800a948:	6833      	ldr	r3, [r6, #0]
 800a94a:	b91b      	cbnz	r3, 800a954 <__hexnan+0xc8>
 800a94c:	4546      	cmp	r6, r8
 800a94e:	d127      	bne.n	800a9a0 <__hexnan+0x114>
 800a950:	2301      	movs	r3, #1
 800a952:	6033      	str	r3, [r6, #0]
 800a954:	2005      	movs	r0, #5
 800a956:	e026      	b.n	800a9a6 <__hexnan+0x11a>
 800a958:	3501      	adds	r5, #1
 800a95a:	2d08      	cmp	r5, #8
 800a95c:	f10b 0b01 	add.w	fp, fp, #1
 800a960:	dd06      	ble.n	800a970 <__hexnan+0xe4>
 800a962:	4544      	cmp	r4, r8
 800a964:	d9cf      	bls.n	800a906 <__hexnan+0x7a>
 800a966:	2300      	movs	r3, #0
 800a968:	f844 3c04 	str.w	r3, [r4, #-4]
 800a96c:	2501      	movs	r5, #1
 800a96e:	3c04      	subs	r4, #4
 800a970:	6822      	ldr	r2, [r4, #0]
 800a972:	f000 000f 	and.w	r0, r0, #15
 800a976:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	e7c3      	b.n	800a906 <__hexnan+0x7a>
 800a97e:	2508      	movs	r5, #8
 800a980:	e7c1      	b.n	800a906 <__hexnan+0x7a>
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d0df      	beq.n	800a948 <__hexnan+0xbc>
 800a988:	f04f 32ff 	mov.w	r2, #4294967295
 800a98c:	f1c3 0320 	rsb	r3, r3, #32
 800a990:	fa22 f303 	lsr.w	r3, r2, r3
 800a994:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a998:	401a      	ands	r2, r3
 800a99a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a99e:	e7d3      	b.n	800a948 <__hexnan+0xbc>
 800a9a0:	3e04      	subs	r6, #4
 800a9a2:	e7d1      	b.n	800a948 <__hexnan+0xbc>
 800a9a4:	2004      	movs	r0, #4
 800a9a6:	b007      	add	sp, #28
 800a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9ac <__locale_ctype_ptr_l>:
 800a9ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a9b0:	4770      	bx	lr

0800a9b2 <__localeconv_l>:
 800a9b2:	30f0      	adds	r0, #240	; 0xf0
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <_localeconv_r>:
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <_localeconv_r+0x14>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6a18      	ldr	r0, [r3, #32]
 800a9be:	4b04      	ldr	r3, [pc, #16]	; (800a9d0 <_localeconv_r+0x18>)
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	bf08      	it	eq
 800a9c4:	4618      	moveq	r0, r3
 800a9c6:	30f0      	adds	r0, #240	; 0xf0
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	2000003c 	.word	0x2000003c
 800a9d0:	200000a0 	.word	0x200000a0

0800a9d4 <malloc>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <malloc+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f000 bc7b 	b.w	800b2d4 <_malloc_r>
 800a9de:	bf00      	nop
 800a9e0:	2000003c 	.word	0x2000003c

0800a9e4 <__ascii_mbtowc>:
 800a9e4:	b082      	sub	sp, #8
 800a9e6:	b901      	cbnz	r1, 800a9ea <__ascii_mbtowc+0x6>
 800a9e8:	a901      	add	r1, sp, #4
 800a9ea:	b142      	cbz	r2, 800a9fe <__ascii_mbtowc+0x1a>
 800a9ec:	b14b      	cbz	r3, 800aa02 <__ascii_mbtowc+0x1e>
 800a9ee:	7813      	ldrb	r3, [r2, #0]
 800a9f0:	600b      	str	r3, [r1, #0]
 800a9f2:	7812      	ldrb	r2, [r2, #0]
 800a9f4:	1c10      	adds	r0, r2, #0
 800a9f6:	bf18      	it	ne
 800a9f8:	2001      	movne	r0, #1
 800a9fa:	b002      	add	sp, #8
 800a9fc:	4770      	bx	lr
 800a9fe:	4610      	mov	r0, r2
 800aa00:	e7fb      	b.n	800a9fa <__ascii_mbtowc+0x16>
 800aa02:	f06f 0001 	mvn.w	r0, #1
 800aa06:	e7f8      	b.n	800a9fa <__ascii_mbtowc+0x16>

0800aa08 <memcpy>:
 800aa08:	b510      	push	{r4, lr}
 800aa0a:	1e43      	subs	r3, r0, #1
 800aa0c:	440a      	add	r2, r1
 800aa0e:	4291      	cmp	r1, r2
 800aa10:	d100      	bne.n	800aa14 <memcpy+0xc>
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa18:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa1c:	e7f7      	b.n	800aa0e <memcpy+0x6>

0800aa1e <_Balloc>:
 800aa1e:	b570      	push	{r4, r5, r6, lr}
 800aa20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aa22:	4604      	mov	r4, r0
 800aa24:	460e      	mov	r6, r1
 800aa26:	b93d      	cbnz	r5, 800aa38 <_Balloc+0x1a>
 800aa28:	2010      	movs	r0, #16
 800aa2a:	f7ff ffd3 	bl	800a9d4 <malloc>
 800aa2e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aa34:	6005      	str	r5, [r0, #0]
 800aa36:	60c5      	str	r5, [r0, #12]
 800aa38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa3a:	68eb      	ldr	r3, [r5, #12]
 800aa3c:	b183      	cbz	r3, 800aa60 <_Balloc+0x42>
 800aa3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa46:	b9b8      	cbnz	r0, 800aa78 <_Balloc+0x5a>
 800aa48:	2101      	movs	r1, #1
 800aa4a:	fa01 f506 	lsl.w	r5, r1, r6
 800aa4e:	1d6a      	adds	r2, r5, #5
 800aa50:	0092      	lsls	r2, r2, #2
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fbe1 	bl	800b21a <_calloc_r>
 800aa58:	b160      	cbz	r0, 800aa74 <_Balloc+0x56>
 800aa5a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa5e:	e00e      	b.n	800aa7e <_Balloc+0x60>
 800aa60:	2221      	movs	r2, #33	; 0x21
 800aa62:	2104      	movs	r1, #4
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fbd8 	bl	800b21a <_calloc_r>
 800aa6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6c:	60e8      	str	r0, [r5, #12]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e4      	bne.n	800aa3e <_Balloc+0x20>
 800aa74:	2000      	movs	r0, #0
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	6802      	ldr	r2, [r0, #0]
 800aa7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa84:	e7f7      	b.n	800aa76 <_Balloc+0x58>

0800aa86 <_Bfree>:
 800aa86:	b570      	push	{r4, r5, r6, lr}
 800aa88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	b93c      	cbnz	r4, 800aaa0 <_Bfree+0x1a>
 800aa90:	2010      	movs	r0, #16
 800aa92:	f7ff ff9f 	bl	800a9d4 <malloc>
 800aa96:	6270      	str	r0, [r6, #36]	; 0x24
 800aa98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa9c:	6004      	str	r4, [r0, #0]
 800aa9e:	60c4      	str	r4, [r0, #12]
 800aaa0:	b13d      	cbz	r5, 800aab2 <_Bfree+0x2c>
 800aaa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aaa4:	686a      	ldr	r2, [r5, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaac:	6029      	str	r1, [r5, #0]
 800aaae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aab2:	bd70      	pop	{r4, r5, r6, pc}

0800aab4 <__multadd>:
 800aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab8:	690d      	ldr	r5, [r1, #16]
 800aaba:	461f      	mov	r7, r3
 800aabc:	4606      	mov	r6, r0
 800aabe:	460c      	mov	r4, r1
 800aac0:	f101 0c14 	add.w	ip, r1, #20
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8dc 0000 	ldr.w	r0, [ip]
 800aaca:	b281      	uxth	r1, r0
 800aacc:	fb02 7101 	mla	r1, r2, r1, r7
 800aad0:	0c0f      	lsrs	r7, r1, #16
 800aad2:	0c00      	lsrs	r0, r0, #16
 800aad4:	fb02 7000 	mla	r0, r2, r0, r7
 800aad8:	b289      	uxth	r1, r1
 800aada:	3301      	adds	r3, #1
 800aadc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aae0:	429d      	cmp	r5, r3
 800aae2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aae6:	f84c 1b04 	str.w	r1, [ip], #4
 800aaea:	dcec      	bgt.n	800aac6 <__multadd+0x12>
 800aaec:	b1d7      	cbz	r7, 800ab24 <__multadd+0x70>
 800aaee:	68a3      	ldr	r3, [r4, #8]
 800aaf0:	42ab      	cmp	r3, r5
 800aaf2:	dc12      	bgt.n	800ab1a <__multadd+0x66>
 800aaf4:	6861      	ldr	r1, [r4, #4]
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	3101      	adds	r1, #1
 800aafa:	f7ff ff90 	bl	800aa1e <_Balloc>
 800aafe:	6922      	ldr	r2, [r4, #16]
 800ab00:	3202      	adds	r2, #2
 800ab02:	f104 010c 	add.w	r1, r4, #12
 800ab06:	4680      	mov	r8, r0
 800ab08:	0092      	lsls	r2, r2, #2
 800ab0a:	300c      	adds	r0, #12
 800ab0c:	f7ff ff7c 	bl	800aa08 <memcpy>
 800ab10:	4621      	mov	r1, r4
 800ab12:	4630      	mov	r0, r6
 800ab14:	f7ff ffb7 	bl	800aa86 <_Bfree>
 800ab18:	4644      	mov	r4, r8
 800ab1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab1e:	3501      	adds	r5, #1
 800ab20:	615f      	str	r7, [r3, #20]
 800ab22:	6125      	str	r5, [r4, #16]
 800ab24:	4620      	mov	r0, r4
 800ab26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ab2a <__s2b>:
 800ab2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	4615      	mov	r5, r2
 800ab32:	461f      	mov	r7, r3
 800ab34:	2209      	movs	r2, #9
 800ab36:	3308      	adds	r3, #8
 800ab38:	4606      	mov	r6, r0
 800ab3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3e:	2100      	movs	r1, #0
 800ab40:	2201      	movs	r2, #1
 800ab42:	429a      	cmp	r2, r3
 800ab44:	db20      	blt.n	800ab88 <__s2b+0x5e>
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ff69 	bl	800aa1e <_Balloc>
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	6143      	str	r3, [r0, #20]
 800ab50:	2d09      	cmp	r5, #9
 800ab52:	f04f 0301 	mov.w	r3, #1
 800ab56:	6103      	str	r3, [r0, #16]
 800ab58:	dd19      	ble.n	800ab8e <__s2b+0x64>
 800ab5a:	f104 0809 	add.w	r8, r4, #9
 800ab5e:	46c1      	mov	r9, r8
 800ab60:	442c      	add	r4, r5
 800ab62:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ab66:	4601      	mov	r1, r0
 800ab68:	3b30      	subs	r3, #48	; 0x30
 800ab6a:	220a      	movs	r2, #10
 800ab6c:	4630      	mov	r0, r6
 800ab6e:	f7ff ffa1 	bl	800aab4 <__multadd>
 800ab72:	45a1      	cmp	r9, r4
 800ab74:	d1f5      	bne.n	800ab62 <__s2b+0x38>
 800ab76:	eb08 0405 	add.w	r4, r8, r5
 800ab7a:	3c08      	subs	r4, #8
 800ab7c:	1b2d      	subs	r5, r5, r4
 800ab7e:	1963      	adds	r3, r4, r5
 800ab80:	42bb      	cmp	r3, r7
 800ab82:	db07      	blt.n	800ab94 <__s2b+0x6a>
 800ab84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab88:	0052      	lsls	r2, r2, #1
 800ab8a:	3101      	adds	r1, #1
 800ab8c:	e7d9      	b.n	800ab42 <__s2b+0x18>
 800ab8e:	340a      	adds	r4, #10
 800ab90:	2509      	movs	r5, #9
 800ab92:	e7f3      	b.n	800ab7c <__s2b+0x52>
 800ab94:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab98:	4601      	mov	r1, r0
 800ab9a:	3b30      	subs	r3, #48	; 0x30
 800ab9c:	220a      	movs	r2, #10
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff88 	bl	800aab4 <__multadd>
 800aba4:	e7eb      	b.n	800ab7e <__s2b+0x54>

0800aba6 <__hi0bits>:
 800aba6:	0c02      	lsrs	r2, r0, #16
 800aba8:	0412      	lsls	r2, r2, #16
 800abaa:	4603      	mov	r3, r0
 800abac:	b9b2      	cbnz	r2, 800abdc <__hi0bits+0x36>
 800abae:	0403      	lsls	r3, r0, #16
 800abb0:	2010      	movs	r0, #16
 800abb2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800abb6:	bf04      	itt	eq
 800abb8:	021b      	lsleq	r3, r3, #8
 800abba:	3008      	addeq	r0, #8
 800abbc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800abc0:	bf04      	itt	eq
 800abc2:	011b      	lsleq	r3, r3, #4
 800abc4:	3004      	addeq	r0, #4
 800abc6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800abca:	bf04      	itt	eq
 800abcc:	009b      	lsleq	r3, r3, #2
 800abce:	3002      	addeq	r0, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	db06      	blt.n	800abe2 <__hi0bits+0x3c>
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	d503      	bpl.n	800abe0 <__hi0bits+0x3a>
 800abd8:	3001      	adds	r0, #1
 800abda:	4770      	bx	lr
 800abdc:	2000      	movs	r0, #0
 800abde:	e7e8      	b.n	800abb2 <__hi0bits+0xc>
 800abe0:	2020      	movs	r0, #32
 800abe2:	4770      	bx	lr

0800abe4 <__lo0bits>:
 800abe4:	6803      	ldr	r3, [r0, #0]
 800abe6:	f013 0207 	ands.w	r2, r3, #7
 800abea:	4601      	mov	r1, r0
 800abec:	d00b      	beq.n	800ac06 <__lo0bits+0x22>
 800abee:	07da      	lsls	r2, r3, #31
 800abf0:	d423      	bmi.n	800ac3a <__lo0bits+0x56>
 800abf2:	0798      	lsls	r0, r3, #30
 800abf4:	bf49      	itett	mi
 800abf6:	085b      	lsrmi	r3, r3, #1
 800abf8:	089b      	lsrpl	r3, r3, #2
 800abfa:	2001      	movmi	r0, #1
 800abfc:	600b      	strmi	r3, [r1, #0]
 800abfe:	bf5c      	itt	pl
 800ac00:	600b      	strpl	r3, [r1, #0]
 800ac02:	2002      	movpl	r0, #2
 800ac04:	4770      	bx	lr
 800ac06:	b298      	uxth	r0, r3
 800ac08:	b9a8      	cbnz	r0, 800ac36 <__lo0bits+0x52>
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	2010      	movs	r0, #16
 800ac0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac12:	bf04      	itt	eq
 800ac14:	0a1b      	lsreq	r3, r3, #8
 800ac16:	3008      	addeq	r0, #8
 800ac18:	071a      	lsls	r2, r3, #28
 800ac1a:	bf04      	itt	eq
 800ac1c:	091b      	lsreq	r3, r3, #4
 800ac1e:	3004      	addeq	r0, #4
 800ac20:	079a      	lsls	r2, r3, #30
 800ac22:	bf04      	itt	eq
 800ac24:	089b      	lsreq	r3, r3, #2
 800ac26:	3002      	addeq	r0, #2
 800ac28:	07da      	lsls	r2, r3, #31
 800ac2a:	d402      	bmi.n	800ac32 <__lo0bits+0x4e>
 800ac2c:	085b      	lsrs	r3, r3, #1
 800ac2e:	d006      	beq.n	800ac3e <__lo0bits+0x5a>
 800ac30:	3001      	adds	r0, #1
 800ac32:	600b      	str	r3, [r1, #0]
 800ac34:	4770      	bx	lr
 800ac36:	4610      	mov	r0, r2
 800ac38:	e7e9      	b.n	800ac0e <__lo0bits+0x2a>
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	4770      	bx	lr
 800ac3e:	2020      	movs	r0, #32
 800ac40:	4770      	bx	lr

0800ac42 <__i2b>:
 800ac42:	b510      	push	{r4, lr}
 800ac44:	460c      	mov	r4, r1
 800ac46:	2101      	movs	r1, #1
 800ac48:	f7ff fee9 	bl	800aa1e <_Balloc>
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	6144      	str	r4, [r0, #20]
 800ac50:	6102      	str	r2, [r0, #16]
 800ac52:	bd10      	pop	{r4, pc}

0800ac54 <__multiply>:
 800ac54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	4614      	mov	r4, r2
 800ac5a:	690a      	ldr	r2, [r1, #16]
 800ac5c:	6923      	ldr	r3, [r4, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	bfb8      	it	lt
 800ac62:	460b      	movlt	r3, r1
 800ac64:	4688      	mov	r8, r1
 800ac66:	bfbc      	itt	lt
 800ac68:	46a0      	movlt	r8, r4
 800ac6a:	461c      	movlt	r4, r3
 800ac6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac7c:	eb07 0609 	add.w	r6, r7, r9
 800ac80:	42b3      	cmp	r3, r6
 800ac82:	bfb8      	it	lt
 800ac84:	3101      	addlt	r1, #1
 800ac86:	f7ff feca 	bl	800aa1e <_Balloc>
 800ac8a:	f100 0514 	add.w	r5, r0, #20
 800ac8e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ac92:	462b      	mov	r3, r5
 800ac94:	2200      	movs	r2, #0
 800ac96:	4573      	cmp	r3, lr
 800ac98:	d316      	bcc.n	800acc8 <__multiply+0x74>
 800ac9a:	f104 0214 	add.w	r2, r4, #20
 800ac9e:	f108 0114 	add.w	r1, r8, #20
 800aca2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aca6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	9b00      	ldr	r3, [sp, #0]
 800acae:	9201      	str	r2, [sp, #4]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d80c      	bhi.n	800acce <__multiply+0x7a>
 800acb4:	2e00      	cmp	r6, #0
 800acb6:	dd03      	ble.n	800acc0 <__multiply+0x6c>
 800acb8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d05d      	beq.n	800ad7c <__multiply+0x128>
 800acc0:	6106      	str	r6, [r0, #16]
 800acc2:	b003      	add	sp, #12
 800acc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc8:	f843 2b04 	str.w	r2, [r3], #4
 800accc:	e7e3      	b.n	800ac96 <__multiply+0x42>
 800acce:	f8b2 b000 	ldrh.w	fp, [r2]
 800acd2:	f1bb 0f00 	cmp.w	fp, #0
 800acd6:	d023      	beq.n	800ad20 <__multiply+0xcc>
 800acd8:	4689      	mov	r9, r1
 800acda:	46ac      	mov	ip, r5
 800acdc:	f04f 0800 	mov.w	r8, #0
 800ace0:	f859 4b04 	ldr.w	r4, [r9], #4
 800ace4:	f8dc a000 	ldr.w	sl, [ip]
 800ace8:	b2a3      	uxth	r3, r4
 800acea:	fa1f fa8a 	uxth.w	sl, sl
 800acee:	fb0b a303 	mla	r3, fp, r3, sl
 800acf2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800acf6:	f8dc 4000 	ldr.w	r4, [ip]
 800acfa:	4443      	add	r3, r8
 800acfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad00:	fb0b 840a 	mla	r4, fp, sl, r8
 800ad04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ad08:	46e2      	mov	sl, ip
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad10:	454f      	cmp	r7, r9
 800ad12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ad16:	f84a 3b04 	str.w	r3, [sl], #4
 800ad1a:	d82b      	bhi.n	800ad74 <__multiply+0x120>
 800ad1c:	f8cc 8004 	str.w	r8, [ip, #4]
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ad26:	3204      	adds	r2, #4
 800ad28:	f1ba 0f00 	cmp.w	sl, #0
 800ad2c:	d020      	beq.n	800ad70 <__multiply+0x11c>
 800ad2e:	682b      	ldr	r3, [r5, #0]
 800ad30:	4689      	mov	r9, r1
 800ad32:	46a8      	mov	r8, r5
 800ad34:	f04f 0b00 	mov.w	fp, #0
 800ad38:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad3c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad40:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad44:	445c      	add	r4, fp
 800ad46:	46c4      	mov	ip, r8
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad4e:	f84c 3b04 	str.w	r3, [ip], #4
 800ad52:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad56:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ad5a:	0c1b      	lsrs	r3, r3, #16
 800ad5c:	fb0a b303 	mla	r3, sl, r3, fp
 800ad60:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ad64:	454f      	cmp	r7, r9
 800ad66:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ad6a:	d805      	bhi.n	800ad78 <__multiply+0x124>
 800ad6c:	f8c8 3004 	str.w	r3, [r8, #4]
 800ad70:	3504      	adds	r5, #4
 800ad72:	e79b      	b.n	800acac <__multiply+0x58>
 800ad74:	46d4      	mov	ip, sl
 800ad76:	e7b3      	b.n	800ace0 <__multiply+0x8c>
 800ad78:	46e0      	mov	r8, ip
 800ad7a:	e7dd      	b.n	800ad38 <__multiply+0xe4>
 800ad7c:	3e01      	subs	r6, #1
 800ad7e:	e799      	b.n	800acb4 <__multiply+0x60>

0800ad80 <__pow5mult>:
 800ad80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad84:	4615      	mov	r5, r2
 800ad86:	f012 0203 	ands.w	r2, r2, #3
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	d007      	beq.n	800ada0 <__pow5mult+0x20>
 800ad90:	3a01      	subs	r2, #1
 800ad92:	4c21      	ldr	r4, [pc, #132]	; (800ae18 <__pow5mult+0x98>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad9a:	f7ff fe8b 	bl	800aab4 <__multadd>
 800ad9e:	4607      	mov	r7, r0
 800ada0:	10ad      	asrs	r5, r5, #2
 800ada2:	d035      	beq.n	800ae10 <__pow5mult+0x90>
 800ada4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ada6:	b93c      	cbnz	r4, 800adb8 <__pow5mult+0x38>
 800ada8:	2010      	movs	r0, #16
 800adaa:	f7ff fe13 	bl	800a9d4 <malloc>
 800adae:	6270      	str	r0, [r6, #36]	; 0x24
 800adb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adb4:	6004      	str	r4, [r0, #0]
 800adb6:	60c4      	str	r4, [r0, #12]
 800adb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adc0:	b94c      	cbnz	r4, 800add6 <__pow5mult+0x56>
 800adc2:	f240 2171 	movw	r1, #625	; 0x271
 800adc6:	4630      	mov	r0, r6
 800adc8:	f7ff ff3b 	bl	800ac42 <__i2b>
 800adcc:	2300      	movs	r3, #0
 800adce:	f8c8 0008 	str.w	r0, [r8, #8]
 800add2:	4604      	mov	r4, r0
 800add4:	6003      	str	r3, [r0, #0]
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	07eb      	lsls	r3, r5, #31
 800addc:	d50a      	bpl.n	800adf4 <__pow5mult+0x74>
 800adde:	4639      	mov	r1, r7
 800ade0:	4622      	mov	r2, r4
 800ade2:	4630      	mov	r0, r6
 800ade4:	f7ff ff36 	bl	800ac54 <__multiply>
 800ade8:	4639      	mov	r1, r7
 800adea:	4681      	mov	r9, r0
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff fe4a 	bl	800aa86 <_Bfree>
 800adf2:	464f      	mov	r7, r9
 800adf4:	106d      	asrs	r5, r5, #1
 800adf6:	d00b      	beq.n	800ae10 <__pow5mult+0x90>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	b938      	cbnz	r0, 800ae0c <__pow5mult+0x8c>
 800adfc:	4622      	mov	r2, r4
 800adfe:	4621      	mov	r1, r4
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff ff27 	bl	800ac54 <__multiply>
 800ae06:	6020      	str	r0, [r4, #0]
 800ae08:	f8c0 8000 	str.w	r8, [r0]
 800ae0c:	4604      	mov	r4, r0
 800ae0e:	e7e4      	b.n	800adda <__pow5mult+0x5a>
 800ae10:	4638      	mov	r0, r7
 800ae12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae16:	bf00      	nop
 800ae18:	0800b8f0 	.word	0x0800b8f0

0800ae1c <__lshift>:
 800ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	460c      	mov	r4, r1
 800ae22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	6849      	ldr	r1, [r1, #4]
 800ae2a:	eb0a 0903 	add.w	r9, sl, r3
 800ae2e:	68a3      	ldr	r3, [r4, #8]
 800ae30:	4607      	mov	r7, r0
 800ae32:	4616      	mov	r6, r2
 800ae34:	f109 0501 	add.w	r5, r9, #1
 800ae38:	42ab      	cmp	r3, r5
 800ae3a:	db32      	blt.n	800aea2 <__lshift+0x86>
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff fdee 	bl	800aa1e <_Balloc>
 800ae42:	2300      	movs	r3, #0
 800ae44:	4680      	mov	r8, r0
 800ae46:	f100 0114 	add.w	r1, r0, #20
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4553      	cmp	r3, sl
 800ae4e:	db2b      	blt.n	800aea8 <__lshift+0x8c>
 800ae50:	6920      	ldr	r0, [r4, #16]
 800ae52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae56:	f104 0314 	add.w	r3, r4, #20
 800ae5a:	f016 021f 	ands.w	r2, r6, #31
 800ae5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae66:	d025      	beq.n	800aeb4 <__lshift+0x98>
 800ae68:	f1c2 0e20 	rsb	lr, r2, #32
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	681e      	ldr	r6, [r3, #0]
 800ae70:	468a      	mov	sl, r1
 800ae72:	4096      	lsls	r6, r2
 800ae74:	4330      	orrs	r0, r6
 800ae76:	f84a 0b04 	str.w	r0, [sl], #4
 800ae7a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae7e:	459c      	cmp	ip, r3
 800ae80:	fa20 f00e 	lsr.w	r0, r0, lr
 800ae84:	d814      	bhi.n	800aeb0 <__lshift+0x94>
 800ae86:	6048      	str	r0, [r1, #4]
 800ae88:	b108      	cbz	r0, 800ae8e <__lshift+0x72>
 800ae8a:	f109 0502 	add.w	r5, r9, #2
 800ae8e:	3d01      	subs	r5, #1
 800ae90:	4638      	mov	r0, r7
 800ae92:	f8c8 5010 	str.w	r5, [r8, #16]
 800ae96:	4621      	mov	r1, r4
 800ae98:	f7ff fdf5 	bl	800aa86 <_Bfree>
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea2:	3101      	adds	r1, #1
 800aea4:	005b      	lsls	r3, r3, #1
 800aea6:	e7c7      	b.n	800ae38 <__lshift+0x1c>
 800aea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800aeac:	3301      	adds	r3, #1
 800aeae:	e7cd      	b.n	800ae4c <__lshift+0x30>
 800aeb0:	4651      	mov	r1, sl
 800aeb2:	e7dc      	b.n	800ae6e <__lshift+0x52>
 800aeb4:	3904      	subs	r1, #4
 800aeb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeba:	f841 2f04 	str.w	r2, [r1, #4]!
 800aebe:	459c      	cmp	ip, r3
 800aec0:	d8f9      	bhi.n	800aeb6 <__lshift+0x9a>
 800aec2:	e7e4      	b.n	800ae8e <__lshift+0x72>

0800aec4 <__mcmp>:
 800aec4:	6903      	ldr	r3, [r0, #16]
 800aec6:	690a      	ldr	r2, [r1, #16]
 800aec8:	1a9b      	subs	r3, r3, r2
 800aeca:	b530      	push	{r4, r5, lr}
 800aecc:	d10c      	bne.n	800aee8 <__mcmp+0x24>
 800aece:	0092      	lsls	r2, r2, #2
 800aed0:	3014      	adds	r0, #20
 800aed2:	3114      	adds	r1, #20
 800aed4:	1884      	adds	r4, r0, r2
 800aed6:	4411      	add	r1, r2
 800aed8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aedc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aee0:	4295      	cmp	r5, r2
 800aee2:	d003      	beq.n	800aeec <__mcmp+0x28>
 800aee4:	d305      	bcc.n	800aef2 <__mcmp+0x2e>
 800aee6:	2301      	movs	r3, #1
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd30      	pop	{r4, r5, pc}
 800aeec:	42a0      	cmp	r0, r4
 800aeee:	d3f3      	bcc.n	800aed8 <__mcmp+0x14>
 800aef0:	e7fa      	b.n	800aee8 <__mcmp+0x24>
 800aef2:	f04f 33ff 	mov.w	r3, #4294967295
 800aef6:	e7f7      	b.n	800aee8 <__mcmp+0x24>

0800aef8 <__mdiff>:
 800aef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aefc:	460d      	mov	r5, r1
 800aefe:	4607      	mov	r7, r0
 800af00:	4611      	mov	r1, r2
 800af02:	4628      	mov	r0, r5
 800af04:	4614      	mov	r4, r2
 800af06:	f7ff ffdd 	bl	800aec4 <__mcmp>
 800af0a:	1e06      	subs	r6, r0, #0
 800af0c:	d108      	bne.n	800af20 <__mdiff+0x28>
 800af0e:	4631      	mov	r1, r6
 800af10:	4638      	mov	r0, r7
 800af12:	f7ff fd84 	bl	800aa1e <_Balloc>
 800af16:	2301      	movs	r3, #1
 800af18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af20:	bfa4      	itt	ge
 800af22:	4623      	movge	r3, r4
 800af24:	462c      	movge	r4, r5
 800af26:	4638      	mov	r0, r7
 800af28:	6861      	ldr	r1, [r4, #4]
 800af2a:	bfa6      	itte	ge
 800af2c:	461d      	movge	r5, r3
 800af2e:	2600      	movge	r6, #0
 800af30:	2601      	movlt	r6, #1
 800af32:	f7ff fd74 	bl	800aa1e <_Balloc>
 800af36:	692b      	ldr	r3, [r5, #16]
 800af38:	60c6      	str	r6, [r0, #12]
 800af3a:	6926      	ldr	r6, [r4, #16]
 800af3c:	f105 0914 	add.w	r9, r5, #20
 800af40:	f104 0214 	add.w	r2, r4, #20
 800af44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800af48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800af4c:	f100 0514 	add.w	r5, r0, #20
 800af50:	f04f 0e00 	mov.w	lr, #0
 800af54:	f852 ab04 	ldr.w	sl, [r2], #4
 800af58:	f859 4b04 	ldr.w	r4, [r9], #4
 800af5c:	fa1e f18a 	uxtah	r1, lr, sl
 800af60:	b2a3      	uxth	r3, r4
 800af62:	1ac9      	subs	r1, r1, r3
 800af64:	0c23      	lsrs	r3, r4, #16
 800af66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800af6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800af6e:	b289      	uxth	r1, r1
 800af70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800af74:	45c8      	cmp	r8, r9
 800af76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af7a:	4694      	mov	ip, r2
 800af7c:	f845 3b04 	str.w	r3, [r5], #4
 800af80:	d8e8      	bhi.n	800af54 <__mdiff+0x5c>
 800af82:	45bc      	cmp	ip, r7
 800af84:	d304      	bcc.n	800af90 <__mdiff+0x98>
 800af86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800af8a:	b183      	cbz	r3, 800afae <__mdiff+0xb6>
 800af8c:	6106      	str	r6, [r0, #16]
 800af8e:	e7c5      	b.n	800af1c <__mdiff+0x24>
 800af90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af94:	fa1e f381 	uxtah	r3, lr, r1
 800af98:	141a      	asrs	r2, r3, #16
 800af9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800afa8:	f845 3b04 	str.w	r3, [r5], #4
 800afac:	e7e9      	b.n	800af82 <__mdiff+0x8a>
 800afae:	3e01      	subs	r6, #1
 800afb0:	e7e9      	b.n	800af86 <__mdiff+0x8e>
	...

0800afb4 <__ulp>:
 800afb4:	4b12      	ldr	r3, [pc, #72]	; (800b000 <__ulp+0x4c>)
 800afb6:	ee10 2a90 	vmov	r2, s1
 800afba:	401a      	ands	r2, r3
 800afbc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	dd04      	ble.n	800afce <__ulp+0x1a>
 800afc4:	2000      	movs	r0, #0
 800afc6:	4619      	mov	r1, r3
 800afc8:	ec41 0b10 	vmov	d0, r0, r1
 800afcc:	4770      	bx	lr
 800afce:	425b      	negs	r3, r3
 800afd0:	151b      	asrs	r3, r3, #20
 800afd2:	2b13      	cmp	r3, #19
 800afd4:	f04f 0000 	mov.w	r0, #0
 800afd8:	f04f 0100 	mov.w	r1, #0
 800afdc:	dc04      	bgt.n	800afe8 <__ulp+0x34>
 800afde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800afe2:	fa42 f103 	asr.w	r1, r2, r3
 800afe6:	e7ef      	b.n	800afc8 <__ulp+0x14>
 800afe8:	3b14      	subs	r3, #20
 800afea:	2b1e      	cmp	r3, #30
 800afec:	f04f 0201 	mov.w	r2, #1
 800aff0:	bfda      	itte	le
 800aff2:	f1c3 031f 	rsble	r3, r3, #31
 800aff6:	fa02 f303 	lslle.w	r3, r2, r3
 800affa:	4613      	movgt	r3, r2
 800affc:	4618      	mov	r0, r3
 800affe:	e7e3      	b.n	800afc8 <__ulp+0x14>
 800b000:	7ff00000 	.word	0x7ff00000

0800b004 <__b2d>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	6905      	ldr	r5, [r0, #16]
 800b008:	f100 0714 	add.w	r7, r0, #20
 800b00c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b010:	1f2e      	subs	r6, r5, #4
 800b012:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b016:	4620      	mov	r0, r4
 800b018:	f7ff fdc5 	bl	800aba6 <__hi0bits>
 800b01c:	f1c0 0320 	rsb	r3, r0, #32
 800b020:	280a      	cmp	r0, #10
 800b022:	600b      	str	r3, [r1, #0]
 800b024:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b09c <__b2d+0x98>
 800b028:	dc14      	bgt.n	800b054 <__b2d+0x50>
 800b02a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b02e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b032:	42b7      	cmp	r7, r6
 800b034:	ea41 030c 	orr.w	r3, r1, ip
 800b038:	bf34      	ite	cc
 800b03a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b03e:	2100      	movcs	r1, #0
 800b040:	3015      	adds	r0, #21
 800b042:	fa04 f000 	lsl.w	r0, r4, r0
 800b046:	fa21 f10e 	lsr.w	r1, r1, lr
 800b04a:	ea40 0201 	orr.w	r2, r0, r1
 800b04e:	ec43 2b10 	vmov	d0, r2, r3
 800b052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b054:	42b7      	cmp	r7, r6
 800b056:	bf3a      	itte	cc
 800b058:	f1a5 0608 	subcc.w	r6, r5, #8
 800b05c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b060:	2100      	movcs	r1, #0
 800b062:	380b      	subs	r0, #11
 800b064:	d015      	beq.n	800b092 <__b2d+0x8e>
 800b066:	4084      	lsls	r4, r0
 800b068:	f1c0 0520 	rsb	r5, r0, #32
 800b06c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b070:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b074:	42be      	cmp	r6, r7
 800b076:	fa21 fc05 	lsr.w	ip, r1, r5
 800b07a:	ea44 030c 	orr.w	r3, r4, ip
 800b07e:	bf8c      	ite	hi
 800b080:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b084:	2400      	movls	r4, #0
 800b086:	fa01 f000 	lsl.w	r0, r1, r0
 800b08a:	40ec      	lsrs	r4, r5
 800b08c:	ea40 0204 	orr.w	r2, r0, r4
 800b090:	e7dd      	b.n	800b04e <__b2d+0x4a>
 800b092:	ea44 030c 	orr.w	r3, r4, ip
 800b096:	460a      	mov	r2, r1
 800b098:	e7d9      	b.n	800b04e <__b2d+0x4a>
 800b09a:	bf00      	nop
 800b09c:	3ff00000 	.word	0x3ff00000

0800b0a0 <__d2b>:
 800b0a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	ec59 8b10 	vmov	r8, r9, d0
 800b0ac:	4615      	mov	r5, r2
 800b0ae:	f7ff fcb6 	bl	800aa1e <_Balloc>
 800b0b2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0bc:	bb34      	cbnz	r4, 800b10c <__d2b+0x6c>
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	f1b8 0300 	subs.w	r3, r8, #0
 800b0c4:	d027      	beq.n	800b116 <__d2b+0x76>
 800b0c6:	a802      	add	r0, sp, #8
 800b0c8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b0cc:	f7ff fd8a 	bl	800abe4 <__lo0bits>
 800b0d0:	9900      	ldr	r1, [sp, #0]
 800b0d2:	b1f0      	cbz	r0, 800b112 <__d2b+0x72>
 800b0d4:	9a01      	ldr	r2, [sp, #4]
 800b0d6:	f1c0 0320 	rsb	r3, r0, #32
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	40c2      	lsrs	r2, r0
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	9201      	str	r2, [sp, #4]
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	61bb      	str	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	bf14      	ite	ne
 800b0ee:	2102      	movne	r1, #2
 800b0f0:	2101      	moveq	r1, #1
 800b0f2:	6139      	str	r1, [r7, #16]
 800b0f4:	b1c4      	cbz	r4, 800b128 <__d2b+0x88>
 800b0f6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0fa:	4404      	add	r4, r0
 800b0fc:	6034      	str	r4, [r6, #0]
 800b0fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b102:	6028      	str	r0, [r5, #0]
 800b104:	4638      	mov	r0, r7
 800b106:	b003      	add	sp, #12
 800b108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b110:	e7d5      	b.n	800b0be <__d2b+0x1e>
 800b112:	6179      	str	r1, [r7, #20]
 800b114:	e7e7      	b.n	800b0e6 <__d2b+0x46>
 800b116:	a801      	add	r0, sp, #4
 800b118:	f7ff fd64 	bl	800abe4 <__lo0bits>
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	2101      	movs	r1, #1
 800b122:	6139      	str	r1, [r7, #16]
 800b124:	3020      	adds	r0, #32
 800b126:	e7e5      	b.n	800b0f4 <__d2b+0x54>
 800b128:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b12c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b130:	6030      	str	r0, [r6, #0]
 800b132:	6918      	ldr	r0, [r3, #16]
 800b134:	f7ff fd37 	bl	800aba6 <__hi0bits>
 800b138:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b13c:	e7e1      	b.n	800b102 <__d2b+0x62>

0800b13e <__ratio>:
 800b13e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b142:	4688      	mov	r8, r1
 800b144:	4669      	mov	r1, sp
 800b146:	4681      	mov	r9, r0
 800b148:	f7ff ff5c 	bl	800b004 <__b2d>
 800b14c:	a901      	add	r1, sp, #4
 800b14e:	4640      	mov	r0, r8
 800b150:	ec57 6b10 	vmov	r6, r7, d0
 800b154:	f7ff ff56 	bl	800b004 <__b2d>
 800b158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b15c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b160:	eba3 0c02 	sub.w	ip, r3, r2
 800b164:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b16e:	ec5b ab10 	vmov	sl, fp, d0
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfce      	itee	gt
 800b176:	463a      	movgt	r2, r7
 800b178:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b17c:	465a      	movle	r2, fp
 800b17e:	4659      	mov	r1, fp
 800b180:	463d      	mov	r5, r7
 800b182:	bfd4      	ite	le
 800b184:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b188:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b18c:	4630      	mov	r0, r6
 800b18e:	ee10 2a10 	vmov	r2, s0
 800b192:	460b      	mov	r3, r1
 800b194:	4629      	mov	r1, r5
 800b196:	f7f5 fb59 	bl	800084c <__aeabi_ddiv>
 800b19a:	ec41 0b10 	vmov	d0, r0, r1
 800b19e:	b003      	add	sp, #12
 800b1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1a4 <__copybits>:
 800b1a4:	3901      	subs	r1, #1
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	1149      	asrs	r1, r1, #5
 800b1aa:	6914      	ldr	r4, [r2, #16]
 800b1ac:	3101      	adds	r1, #1
 800b1ae:	f102 0314 	add.w	r3, r2, #20
 800b1b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1ba:	42a3      	cmp	r3, r4
 800b1bc:	4602      	mov	r2, r0
 800b1be:	d303      	bcc.n	800b1c8 <__copybits+0x24>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	428a      	cmp	r2, r1
 800b1c4:	d305      	bcc.n	800b1d2 <__copybits+0x2e>
 800b1c6:	bd10      	pop	{r4, pc}
 800b1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1cc:	f840 2b04 	str.w	r2, [r0], #4
 800b1d0:	e7f3      	b.n	800b1ba <__copybits+0x16>
 800b1d2:	f842 3b04 	str.w	r3, [r2], #4
 800b1d6:	e7f4      	b.n	800b1c2 <__copybits+0x1e>

0800b1d8 <__any_on>:
 800b1d8:	f100 0214 	add.w	r2, r0, #20
 800b1dc:	6900      	ldr	r0, [r0, #16]
 800b1de:	114b      	asrs	r3, r1, #5
 800b1e0:	4298      	cmp	r0, r3
 800b1e2:	b510      	push	{r4, lr}
 800b1e4:	db11      	blt.n	800b20a <__any_on+0x32>
 800b1e6:	dd0a      	ble.n	800b1fe <__any_on+0x26>
 800b1e8:	f011 011f 	ands.w	r1, r1, #31
 800b1ec:	d007      	beq.n	800b1fe <__any_on+0x26>
 800b1ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1f2:	fa24 f001 	lsr.w	r0, r4, r1
 800b1f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b1fa:	428c      	cmp	r4, r1
 800b1fc:	d10b      	bne.n	800b216 <__any_on+0x3e>
 800b1fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b202:	4293      	cmp	r3, r2
 800b204:	d803      	bhi.n	800b20e <__any_on+0x36>
 800b206:	2000      	movs	r0, #0
 800b208:	bd10      	pop	{r4, pc}
 800b20a:	4603      	mov	r3, r0
 800b20c:	e7f7      	b.n	800b1fe <__any_on+0x26>
 800b20e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b212:	2900      	cmp	r1, #0
 800b214:	d0f5      	beq.n	800b202 <__any_on+0x2a>
 800b216:	2001      	movs	r0, #1
 800b218:	e7f6      	b.n	800b208 <__any_on+0x30>

0800b21a <_calloc_r>:
 800b21a:	b538      	push	{r3, r4, r5, lr}
 800b21c:	fb02 f401 	mul.w	r4, r2, r1
 800b220:	4621      	mov	r1, r4
 800b222:	f000 f857 	bl	800b2d4 <_malloc_r>
 800b226:	4605      	mov	r5, r0
 800b228:	b118      	cbz	r0, 800b232 <_calloc_r+0x18>
 800b22a:	4622      	mov	r2, r4
 800b22c:	2100      	movs	r1, #0
 800b22e:	f7fc fd35 	bl	8007c9c <memset>
 800b232:	4628      	mov	r0, r5
 800b234:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b238 <_free_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4605      	mov	r5, r0
 800b23c:	2900      	cmp	r1, #0
 800b23e:	d045      	beq.n	800b2cc <_free_r+0x94>
 800b240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b244:	1f0c      	subs	r4, r1, #4
 800b246:	2b00      	cmp	r3, #0
 800b248:	bfb8      	it	lt
 800b24a:	18e4      	addlt	r4, r4, r3
 800b24c:	f000 fa36 	bl	800b6bc <__malloc_lock>
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <_free_r+0x98>)
 800b252:	6813      	ldr	r3, [r2, #0]
 800b254:	4610      	mov	r0, r2
 800b256:	b933      	cbnz	r3, 800b266 <_free_r+0x2e>
 800b258:	6063      	str	r3, [r4, #4]
 800b25a:	6014      	str	r4, [r2, #0]
 800b25c:	4628      	mov	r0, r5
 800b25e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b262:	f000 ba2c 	b.w	800b6be <__malloc_unlock>
 800b266:	42a3      	cmp	r3, r4
 800b268:	d90c      	bls.n	800b284 <_free_r+0x4c>
 800b26a:	6821      	ldr	r1, [r4, #0]
 800b26c:	1862      	adds	r2, r4, r1
 800b26e:	4293      	cmp	r3, r2
 800b270:	bf04      	itt	eq
 800b272:	681a      	ldreq	r2, [r3, #0]
 800b274:	685b      	ldreq	r3, [r3, #4]
 800b276:	6063      	str	r3, [r4, #4]
 800b278:	bf04      	itt	eq
 800b27a:	1852      	addeq	r2, r2, r1
 800b27c:	6022      	streq	r2, [r4, #0]
 800b27e:	6004      	str	r4, [r0, #0]
 800b280:	e7ec      	b.n	800b25c <_free_r+0x24>
 800b282:	4613      	mov	r3, r2
 800b284:	685a      	ldr	r2, [r3, #4]
 800b286:	b10a      	cbz	r2, 800b28c <_free_r+0x54>
 800b288:	42a2      	cmp	r2, r4
 800b28a:	d9fa      	bls.n	800b282 <_free_r+0x4a>
 800b28c:	6819      	ldr	r1, [r3, #0]
 800b28e:	1858      	adds	r0, r3, r1
 800b290:	42a0      	cmp	r0, r4
 800b292:	d10b      	bne.n	800b2ac <_free_r+0x74>
 800b294:	6820      	ldr	r0, [r4, #0]
 800b296:	4401      	add	r1, r0
 800b298:	1858      	adds	r0, r3, r1
 800b29a:	4282      	cmp	r2, r0
 800b29c:	6019      	str	r1, [r3, #0]
 800b29e:	d1dd      	bne.n	800b25c <_free_r+0x24>
 800b2a0:	6810      	ldr	r0, [r2, #0]
 800b2a2:	6852      	ldr	r2, [r2, #4]
 800b2a4:	605a      	str	r2, [r3, #4]
 800b2a6:	4401      	add	r1, r0
 800b2a8:	6019      	str	r1, [r3, #0]
 800b2aa:	e7d7      	b.n	800b25c <_free_r+0x24>
 800b2ac:	d902      	bls.n	800b2b4 <_free_r+0x7c>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	602b      	str	r3, [r5, #0]
 800b2b2:	e7d3      	b.n	800b25c <_free_r+0x24>
 800b2b4:	6820      	ldr	r0, [r4, #0]
 800b2b6:	1821      	adds	r1, r4, r0
 800b2b8:	428a      	cmp	r2, r1
 800b2ba:	bf04      	itt	eq
 800b2bc:	6811      	ldreq	r1, [r2, #0]
 800b2be:	6852      	ldreq	r2, [r2, #4]
 800b2c0:	6062      	str	r2, [r4, #4]
 800b2c2:	bf04      	itt	eq
 800b2c4:	1809      	addeq	r1, r1, r0
 800b2c6:	6021      	streq	r1, [r4, #0]
 800b2c8:	605c      	str	r4, [r3, #4]
 800b2ca:	e7c7      	b.n	800b25c <_free_r+0x24>
 800b2cc:	bd38      	pop	{r3, r4, r5, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200003c8 	.word	0x200003c8

0800b2d4 <_malloc_r>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	1ccd      	adds	r5, r1, #3
 800b2d8:	f025 0503 	bic.w	r5, r5, #3
 800b2dc:	3508      	adds	r5, #8
 800b2de:	2d0c      	cmp	r5, #12
 800b2e0:	bf38      	it	cc
 800b2e2:	250c      	movcc	r5, #12
 800b2e4:	2d00      	cmp	r5, #0
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	db01      	blt.n	800b2ee <_malloc_r+0x1a>
 800b2ea:	42a9      	cmp	r1, r5
 800b2ec:	d903      	bls.n	800b2f6 <_malloc_r+0x22>
 800b2ee:	230c      	movs	r3, #12
 800b2f0:	6033      	str	r3, [r6, #0]
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	bd70      	pop	{r4, r5, r6, pc}
 800b2f6:	f000 f9e1 	bl	800b6bc <__malloc_lock>
 800b2fa:	4a21      	ldr	r2, [pc, #132]	; (800b380 <_malloc_r+0xac>)
 800b2fc:	6814      	ldr	r4, [r2, #0]
 800b2fe:	4621      	mov	r1, r4
 800b300:	b991      	cbnz	r1, 800b328 <_malloc_r+0x54>
 800b302:	4c20      	ldr	r4, [pc, #128]	; (800b384 <_malloc_r+0xb0>)
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	b91b      	cbnz	r3, 800b310 <_malloc_r+0x3c>
 800b308:	4630      	mov	r0, r6
 800b30a:	f000 f98f 	bl	800b62c <_sbrk_r>
 800b30e:	6020      	str	r0, [r4, #0]
 800b310:	4629      	mov	r1, r5
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f98a 	bl	800b62c <_sbrk_r>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d124      	bne.n	800b366 <_malloc_r+0x92>
 800b31c:	230c      	movs	r3, #12
 800b31e:	6033      	str	r3, [r6, #0]
 800b320:	4630      	mov	r0, r6
 800b322:	f000 f9cc 	bl	800b6be <__malloc_unlock>
 800b326:	e7e4      	b.n	800b2f2 <_malloc_r+0x1e>
 800b328:	680b      	ldr	r3, [r1, #0]
 800b32a:	1b5b      	subs	r3, r3, r5
 800b32c:	d418      	bmi.n	800b360 <_malloc_r+0x8c>
 800b32e:	2b0b      	cmp	r3, #11
 800b330:	d90f      	bls.n	800b352 <_malloc_r+0x7e>
 800b332:	600b      	str	r3, [r1, #0]
 800b334:	50cd      	str	r5, [r1, r3]
 800b336:	18cc      	adds	r4, r1, r3
 800b338:	4630      	mov	r0, r6
 800b33a:	f000 f9c0 	bl	800b6be <__malloc_unlock>
 800b33e:	f104 000b 	add.w	r0, r4, #11
 800b342:	1d23      	adds	r3, r4, #4
 800b344:	f020 0007 	bic.w	r0, r0, #7
 800b348:	1ac3      	subs	r3, r0, r3
 800b34a:	d0d3      	beq.n	800b2f4 <_malloc_r+0x20>
 800b34c:	425a      	negs	r2, r3
 800b34e:	50e2      	str	r2, [r4, r3]
 800b350:	e7d0      	b.n	800b2f4 <_malloc_r+0x20>
 800b352:	428c      	cmp	r4, r1
 800b354:	684b      	ldr	r3, [r1, #4]
 800b356:	bf16      	itet	ne
 800b358:	6063      	strne	r3, [r4, #4]
 800b35a:	6013      	streq	r3, [r2, #0]
 800b35c:	460c      	movne	r4, r1
 800b35e:	e7eb      	b.n	800b338 <_malloc_r+0x64>
 800b360:	460c      	mov	r4, r1
 800b362:	6849      	ldr	r1, [r1, #4]
 800b364:	e7cc      	b.n	800b300 <_malloc_r+0x2c>
 800b366:	1cc4      	adds	r4, r0, #3
 800b368:	f024 0403 	bic.w	r4, r4, #3
 800b36c:	42a0      	cmp	r0, r4
 800b36e:	d005      	beq.n	800b37c <_malloc_r+0xa8>
 800b370:	1a21      	subs	r1, r4, r0
 800b372:	4630      	mov	r0, r6
 800b374:	f000 f95a 	bl	800b62c <_sbrk_r>
 800b378:	3001      	adds	r0, #1
 800b37a:	d0cf      	beq.n	800b31c <_malloc_r+0x48>
 800b37c:	6025      	str	r5, [r4, #0]
 800b37e:	e7db      	b.n	800b338 <_malloc_r+0x64>
 800b380:	200003c8 	.word	0x200003c8
 800b384:	200003cc 	.word	0x200003cc

0800b388 <__ssputs_r>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	688e      	ldr	r6, [r1, #8]
 800b38e:	429e      	cmp	r6, r3
 800b390:	4682      	mov	sl, r0
 800b392:	460c      	mov	r4, r1
 800b394:	4690      	mov	r8, r2
 800b396:	4699      	mov	r9, r3
 800b398:	d837      	bhi.n	800b40a <__ssputs_r+0x82>
 800b39a:	898a      	ldrh	r2, [r1, #12]
 800b39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3a0:	d031      	beq.n	800b406 <__ssputs_r+0x7e>
 800b3a2:	6825      	ldr	r5, [r4, #0]
 800b3a4:	6909      	ldr	r1, [r1, #16]
 800b3a6:	1a6f      	subs	r7, r5, r1
 800b3a8:	6965      	ldr	r5, [r4, #20]
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800b3b4:	f109 0301 	add.w	r3, r9, #1
 800b3b8:	443b      	add	r3, r7
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	bf38      	it	cc
 800b3be:	461d      	movcc	r5, r3
 800b3c0:	0553      	lsls	r3, r2, #21
 800b3c2:	d530      	bpl.n	800b426 <__ssputs_r+0x9e>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7ff ff85 	bl	800b2d4 <_malloc_r>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	b950      	cbnz	r0, 800b3e4 <__ssputs_r+0x5c>
 800b3ce:	230c      	movs	r3, #12
 800b3d0:	f8ca 3000 	str.w	r3, [sl]
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3da:	81a3      	strh	r3, [r4, #12]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e4:	463a      	mov	r2, r7
 800b3e6:	6921      	ldr	r1, [r4, #16]
 800b3e8:	f7ff fb0e 	bl	800aa08 <memcpy>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f6:	81a3      	strh	r3, [r4, #12]
 800b3f8:	6126      	str	r6, [r4, #16]
 800b3fa:	6165      	str	r5, [r4, #20]
 800b3fc:	443e      	add	r6, r7
 800b3fe:	1bed      	subs	r5, r5, r7
 800b400:	6026      	str	r6, [r4, #0]
 800b402:	60a5      	str	r5, [r4, #8]
 800b404:	464e      	mov	r6, r9
 800b406:	454e      	cmp	r6, r9
 800b408:	d900      	bls.n	800b40c <__ssputs_r+0x84>
 800b40a:	464e      	mov	r6, r9
 800b40c:	4632      	mov	r2, r6
 800b40e:	4641      	mov	r1, r8
 800b410:	6820      	ldr	r0, [r4, #0]
 800b412:	f000 f93a 	bl	800b68a <memmove>
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	1b9b      	subs	r3, r3, r6
 800b41a:	60a3      	str	r3, [r4, #8]
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	441e      	add	r6, r3
 800b420:	6026      	str	r6, [r4, #0]
 800b422:	2000      	movs	r0, #0
 800b424:	e7dc      	b.n	800b3e0 <__ssputs_r+0x58>
 800b426:	462a      	mov	r2, r5
 800b428:	f000 f94a 	bl	800b6c0 <_realloc_r>
 800b42c:	4606      	mov	r6, r0
 800b42e:	2800      	cmp	r0, #0
 800b430:	d1e2      	bne.n	800b3f8 <__ssputs_r+0x70>
 800b432:	6921      	ldr	r1, [r4, #16]
 800b434:	4650      	mov	r0, sl
 800b436:	f7ff feff 	bl	800b238 <_free_r>
 800b43a:	e7c8      	b.n	800b3ce <__ssputs_r+0x46>

0800b43c <_svfiprintf_r>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	461d      	mov	r5, r3
 800b442:	898b      	ldrh	r3, [r1, #12]
 800b444:	061f      	lsls	r7, r3, #24
 800b446:	b09d      	sub	sp, #116	; 0x74
 800b448:	4680      	mov	r8, r0
 800b44a:	460c      	mov	r4, r1
 800b44c:	4616      	mov	r6, r2
 800b44e:	d50f      	bpl.n	800b470 <_svfiprintf_r+0x34>
 800b450:	690b      	ldr	r3, [r1, #16]
 800b452:	b96b      	cbnz	r3, 800b470 <_svfiprintf_r+0x34>
 800b454:	2140      	movs	r1, #64	; 0x40
 800b456:	f7ff ff3d 	bl	800b2d4 <_malloc_r>
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	6120      	str	r0, [r4, #16]
 800b45e:	b928      	cbnz	r0, 800b46c <_svfiprintf_r+0x30>
 800b460:	230c      	movs	r3, #12
 800b462:	f8c8 3000 	str.w	r3, [r8]
 800b466:	f04f 30ff 	mov.w	r0, #4294967295
 800b46a:	e0c8      	b.n	800b5fe <_svfiprintf_r+0x1c2>
 800b46c:	2340      	movs	r3, #64	; 0x40
 800b46e:	6163      	str	r3, [r4, #20]
 800b470:	2300      	movs	r3, #0
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	2320      	movs	r3, #32
 800b476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b47a:	2330      	movs	r3, #48	; 0x30
 800b47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b480:	9503      	str	r5, [sp, #12]
 800b482:	f04f 0b01 	mov.w	fp, #1
 800b486:	4637      	mov	r7, r6
 800b488:	463d      	mov	r5, r7
 800b48a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b48e:	b10b      	cbz	r3, 800b494 <_svfiprintf_r+0x58>
 800b490:	2b25      	cmp	r3, #37	; 0x25
 800b492:	d13e      	bne.n	800b512 <_svfiprintf_r+0xd6>
 800b494:	ebb7 0a06 	subs.w	sl, r7, r6
 800b498:	d00b      	beq.n	800b4b2 <_svfiprintf_r+0x76>
 800b49a:	4653      	mov	r3, sl
 800b49c:	4632      	mov	r2, r6
 800b49e:	4621      	mov	r1, r4
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	f7ff ff71 	bl	800b388 <__ssputs_r>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f000 80a4 	beq.w	800b5f4 <_svfiprintf_r+0x1b8>
 800b4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ae:	4453      	add	r3, sl
 800b4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b2:	783b      	ldrb	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f000 809d 	beq.w	800b5f4 <_svfiprintf_r+0x1b8>
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c4:	9304      	str	r3, [sp, #16]
 800b4c6:	9307      	str	r3, [sp, #28]
 800b4c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4cc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ce:	462f      	mov	r7, r5
 800b4d0:	2205      	movs	r2, #5
 800b4d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b4d6:	4850      	ldr	r0, [pc, #320]	; (800b618 <_svfiprintf_r+0x1dc>)
 800b4d8:	f7f4 fe82 	bl	80001e0 <memchr>
 800b4dc:	9b04      	ldr	r3, [sp, #16]
 800b4de:	b9d0      	cbnz	r0, 800b516 <_svfiprintf_r+0xda>
 800b4e0:	06d9      	lsls	r1, r3, #27
 800b4e2:	bf44      	itt	mi
 800b4e4:	2220      	movmi	r2, #32
 800b4e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4ea:	071a      	lsls	r2, r3, #28
 800b4ec:	bf44      	itt	mi
 800b4ee:	222b      	movmi	r2, #43	; 0x2b
 800b4f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b4f4:	782a      	ldrb	r2, [r5, #0]
 800b4f6:	2a2a      	cmp	r2, #42	; 0x2a
 800b4f8:	d015      	beq.n	800b526 <_svfiprintf_r+0xea>
 800b4fa:	9a07      	ldr	r2, [sp, #28]
 800b4fc:	462f      	mov	r7, r5
 800b4fe:	2000      	movs	r0, #0
 800b500:	250a      	movs	r5, #10
 800b502:	4639      	mov	r1, r7
 800b504:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b508:	3b30      	subs	r3, #48	; 0x30
 800b50a:	2b09      	cmp	r3, #9
 800b50c:	d94d      	bls.n	800b5aa <_svfiprintf_r+0x16e>
 800b50e:	b1b8      	cbz	r0, 800b540 <_svfiprintf_r+0x104>
 800b510:	e00f      	b.n	800b532 <_svfiprintf_r+0xf6>
 800b512:	462f      	mov	r7, r5
 800b514:	e7b8      	b.n	800b488 <_svfiprintf_r+0x4c>
 800b516:	4a40      	ldr	r2, [pc, #256]	; (800b618 <_svfiprintf_r+0x1dc>)
 800b518:	1a80      	subs	r0, r0, r2
 800b51a:	fa0b f000 	lsl.w	r0, fp, r0
 800b51e:	4318      	orrs	r0, r3
 800b520:	9004      	str	r0, [sp, #16]
 800b522:	463d      	mov	r5, r7
 800b524:	e7d3      	b.n	800b4ce <_svfiprintf_r+0x92>
 800b526:	9a03      	ldr	r2, [sp, #12]
 800b528:	1d11      	adds	r1, r2, #4
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	9103      	str	r1, [sp, #12]
 800b52e:	2a00      	cmp	r2, #0
 800b530:	db01      	blt.n	800b536 <_svfiprintf_r+0xfa>
 800b532:	9207      	str	r2, [sp, #28]
 800b534:	e004      	b.n	800b540 <_svfiprintf_r+0x104>
 800b536:	4252      	negs	r2, r2
 800b538:	f043 0302 	orr.w	r3, r3, #2
 800b53c:	9207      	str	r2, [sp, #28]
 800b53e:	9304      	str	r3, [sp, #16]
 800b540:	783b      	ldrb	r3, [r7, #0]
 800b542:	2b2e      	cmp	r3, #46	; 0x2e
 800b544:	d10c      	bne.n	800b560 <_svfiprintf_r+0x124>
 800b546:	787b      	ldrb	r3, [r7, #1]
 800b548:	2b2a      	cmp	r3, #42	; 0x2a
 800b54a:	d133      	bne.n	800b5b4 <_svfiprintf_r+0x178>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	9203      	str	r2, [sp, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	bfb8      	it	lt
 800b558:	f04f 33ff 	movlt.w	r3, #4294967295
 800b55c:	3702      	adds	r7, #2
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	4d2e      	ldr	r5, [pc, #184]	; (800b61c <_svfiprintf_r+0x1e0>)
 800b562:	7839      	ldrb	r1, [r7, #0]
 800b564:	2203      	movs	r2, #3
 800b566:	4628      	mov	r0, r5
 800b568:	f7f4 fe3a 	bl	80001e0 <memchr>
 800b56c:	b138      	cbz	r0, 800b57e <_svfiprintf_r+0x142>
 800b56e:	2340      	movs	r3, #64	; 0x40
 800b570:	1b40      	subs	r0, r0, r5
 800b572:	fa03 f000 	lsl.w	r0, r3, r0
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	4303      	orrs	r3, r0
 800b57a:	3701      	adds	r7, #1
 800b57c:	9304      	str	r3, [sp, #16]
 800b57e:	7839      	ldrb	r1, [r7, #0]
 800b580:	4827      	ldr	r0, [pc, #156]	; (800b620 <_svfiprintf_r+0x1e4>)
 800b582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b586:	2206      	movs	r2, #6
 800b588:	1c7e      	adds	r6, r7, #1
 800b58a:	f7f4 fe29 	bl	80001e0 <memchr>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d038      	beq.n	800b604 <_svfiprintf_r+0x1c8>
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <_svfiprintf_r+0x1e8>)
 800b594:	bb13      	cbnz	r3, 800b5dc <_svfiprintf_r+0x1a0>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3307      	adds	r3, #7
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	3308      	adds	r3, #8
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	444b      	add	r3, r9
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	e76d      	b.n	800b486 <_svfiprintf_r+0x4a>
 800b5aa:	fb05 3202 	mla	r2, r5, r2, r3
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	460f      	mov	r7, r1
 800b5b2:	e7a6      	b.n	800b502 <_svfiprintf_r+0xc6>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	3701      	adds	r7, #1
 800b5b8:	9305      	str	r3, [sp, #20]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	250a      	movs	r5, #10
 800b5be:	4638      	mov	r0, r7
 800b5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c4:	3a30      	subs	r2, #48	; 0x30
 800b5c6:	2a09      	cmp	r2, #9
 800b5c8:	d903      	bls.n	800b5d2 <_svfiprintf_r+0x196>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0c8      	beq.n	800b560 <_svfiprintf_r+0x124>
 800b5ce:	9105      	str	r1, [sp, #20]
 800b5d0:	e7c6      	b.n	800b560 <_svfiprintf_r+0x124>
 800b5d2:	fb05 2101 	mla	r1, r5, r1, r2
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	4607      	mov	r7, r0
 800b5da:	e7f0      	b.n	800b5be <_svfiprintf_r+0x182>
 800b5dc:	ab03      	add	r3, sp, #12
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	4622      	mov	r2, r4
 800b5e2:	4b11      	ldr	r3, [pc, #68]	; (800b628 <_svfiprintf_r+0x1ec>)
 800b5e4:	a904      	add	r1, sp, #16
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	f7fc fbf4 	bl	8007dd4 <_printf_float>
 800b5ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b5f0:	4681      	mov	r9, r0
 800b5f2:	d1d6      	bne.n	800b5a2 <_svfiprintf_r+0x166>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	065b      	lsls	r3, r3, #25
 800b5f8:	f53f af35 	bmi.w	800b466 <_svfiprintf_r+0x2a>
 800b5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fe:	b01d      	add	sp, #116	; 0x74
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	4622      	mov	r2, r4
 800b60a:	4b07      	ldr	r3, [pc, #28]	; (800b628 <_svfiprintf_r+0x1ec>)
 800b60c:	a904      	add	r1, sp, #16
 800b60e:	4640      	mov	r0, r8
 800b610:	f7fc fe96 	bl	8008340 <_printf_i>
 800b614:	e7ea      	b.n	800b5ec <_svfiprintf_r+0x1b0>
 800b616:	bf00      	nop
 800b618:	0800b8fc 	.word	0x0800b8fc
 800b61c:	0800b902 	.word	0x0800b902
 800b620:	0800b906 	.word	0x0800b906
 800b624:	08007dd5 	.word	0x08007dd5
 800b628:	0800b389 	.word	0x0800b389

0800b62c <_sbrk_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4c06      	ldr	r4, [pc, #24]	; (800b648 <_sbrk_r+0x1c>)
 800b630:	2300      	movs	r3, #0
 800b632:	4605      	mov	r5, r0
 800b634:	4608      	mov	r0, r1
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f7f8 ff4a 	bl	80044d0 <_sbrk>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_sbrk_r+0x1a>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	b103      	cbz	r3, 800b646 <_sbrk_r+0x1a>
 800b644:	602b      	str	r3, [r5, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	20000890 	.word	0x20000890

0800b64c <strncmp>:
 800b64c:	b510      	push	{r4, lr}
 800b64e:	b16a      	cbz	r2, 800b66c <strncmp+0x20>
 800b650:	3901      	subs	r1, #1
 800b652:	1884      	adds	r4, r0, r2
 800b654:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b658:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d103      	bne.n	800b668 <strncmp+0x1c>
 800b660:	42a0      	cmp	r0, r4
 800b662:	d001      	beq.n	800b668 <strncmp+0x1c>
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1f5      	bne.n	800b654 <strncmp+0x8>
 800b668:	1a98      	subs	r0, r3, r2
 800b66a:	bd10      	pop	{r4, pc}
 800b66c:	4610      	mov	r0, r2
 800b66e:	e7fc      	b.n	800b66a <strncmp+0x1e>

0800b670 <__ascii_wctomb>:
 800b670:	b149      	cbz	r1, 800b686 <__ascii_wctomb+0x16>
 800b672:	2aff      	cmp	r2, #255	; 0xff
 800b674:	bf85      	ittet	hi
 800b676:	238a      	movhi	r3, #138	; 0x8a
 800b678:	6003      	strhi	r3, [r0, #0]
 800b67a:	700a      	strbls	r2, [r1, #0]
 800b67c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b680:	bf98      	it	ls
 800b682:	2001      	movls	r0, #1
 800b684:	4770      	bx	lr
 800b686:	4608      	mov	r0, r1
 800b688:	4770      	bx	lr

0800b68a <memmove>:
 800b68a:	4288      	cmp	r0, r1
 800b68c:	b510      	push	{r4, lr}
 800b68e:	eb01 0302 	add.w	r3, r1, r2
 800b692:	d807      	bhi.n	800b6a4 <memmove+0x1a>
 800b694:	1e42      	subs	r2, r0, #1
 800b696:	4299      	cmp	r1, r3
 800b698:	d00a      	beq.n	800b6b0 <memmove+0x26>
 800b69a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b69e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b6a2:	e7f8      	b.n	800b696 <memmove+0xc>
 800b6a4:	4283      	cmp	r3, r0
 800b6a6:	d9f5      	bls.n	800b694 <memmove+0xa>
 800b6a8:	1881      	adds	r1, r0, r2
 800b6aa:	1ad2      	subs	r2, r2, r3
 800b6ac:	42d3      	cmn	r3, r2
 800b6ae:	d100      	bne.n	800b6b2 <memmove+0x28>
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b6ba:	e7f7      	b.n	800b6ac <memmove+0x22>

0800b6bc <__malloc_lock>:
 800b6bc:	4770      	bx	lr

0800b6be <__malloc_unlock>:
 800b6be:	4770      	bx	lr

0800b6c0 <_realloc_r>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	460e      	mov	r6, r1
 800b6c8:	b921      	cbnz	r1, 800b6d4 <_realloc_r+0x14>
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6d0:	f7ff be00 	b.w	800b2d4 <_malloc_r>
 800b6d4:	b922      	cbnz	r2, 800b6e0 <_realloc_r+0x20>
 800b6d6:	f7ff fdaf 	bl	800b238 <_free_r>
 800b6da:	4625      	mov	r5, r4
 800b6dc:	4628      	mov	r0, r5
 800b6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6e0:	f000 f814 	bl	800b70c <_malloc_usable_size_r>
 800b6e4:	42a0      	cmp	r0, r4
 800b6e6:	d20f      	bcs.n	800b708 <_realloc_r+0x48>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f7ff fdf2 	bl	800b2d4 <_malloc_r>
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d0f2      	beq.n	800b6dc <_realloc_r+0x1c>
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	f7ff f985 	bl	800aa08 <memcpy>
 800b6fe:	4631      	mov	r1, r6
 800b700:	4638      	mov	r0, r7
 800b702:	f7ff fd99 	bl	800b238 <_free_r>
 800b706:	e7e9      	b.n	800b6dc <_realloc_r+0x1c>
 800b708:	4635      	mov	r5, r6
 800b70a:	e7e7      	b.n	800b6dc <_realloc_r+0x1c>

0800b70c <_malloc_usable_size_r>:
 800b70c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b710:	1f18      	subs	r0, r3, #4
 800b712:	2b00      	cmp	r3, #0
 800b714:	bfbc      	itt	lt
 800b716:	580b      	ldrlt	r3, [r1, r0]
 800b718:	18c0      	addlt	r0, r0, r3
 800b71a:	4770      	bx	lr

0800b71c <_init>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	bf00      	nop
 800b720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b722:	bc08      	pop	{r3}
 800b724:	469e      	mov	lr, r3
 800b726:	4770      	bx	lr

0800b728 <_fini>:
 800b728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72a:	bf00      	nop
 800b72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72e:	bc08      	pop	{r3}
 800b730:	469e      	mov	lr, r3
 800b732:	4770      	bx	lr
